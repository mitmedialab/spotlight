
Spotlight_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f84  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800a0c0  0800a0c0  0001a0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a19c  0800a19c  0001a19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a1a0  0800a1a0  0001a1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  20000004  0800a1a4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001aec  20000188  0800a328  00020188  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001c74  0800a328  00021c74  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  9 .debug_info   00026b98  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004a57  00000000  00000000  00046d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002028  00000000  00000000  0004b7a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001e10  00000000  00000000  0004d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002a8d0  00000000  00000000  0004f5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001acd2  00000000  00000000  00079eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000f181f  00000000  00000000  00094b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  001863a1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000864c  00000000  00000000  0018641c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000188 	.word	0x20000188
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a0a8 	.word	0x0800a0a8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000018c 	.word	0x2000018c
 8000178:	0800a0a8 	.word	0x0800a0a8

0800017c <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>:
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
//Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
//                                      int motor_pin_3, int motor_pin_4)
Stepper::Stepper(int32_t number_of_steps, 	GPIO_TypeDef* motor_pin_1_port, uint16_t motor_pin_1,
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	60f8      	str	r0, [r7, #12]
 8000184:	60b9      	str	r1, [r7, #8]
 8000186:	607a      	str	r2, [r7, #4]
 8000188:	807b      	strh	r3, [r7, #2]
											GPIO_TypeDef* motor_pin_2_port, uint16_t motor_pin_2,
											GPIO_TypeDef* motor_pin_3_port, uint16_t motor_pin_3,
											GPIO_TypeDef* motor_pin_4_port, uint16_t motor_pin_4,
											volatile uint16_t* stop_sensor, uint8_t motor_direction)
{
  this->step_number = 0;    // which step the motor is on
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	2200      	movs	r2, #0
 800018e:	611a      	str	r2, [r3, #16]
  this->direction = 0;      // motor direction
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	2200      	movs	r2, #0
 800019a:	645a      	str	r2, [r3, #68]	; 0x44
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	68ba      	ldr	r2, [r7, #8]
 80001a0:	609a      	str	r2, [r3, #8]

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	887a      	ldrh	r2, [r7, #2]
 80001a6:	839a      	strh	r2, [r3, #28]
  this->motor_pin_2 = motor_pin_2;
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	8bba      	ldrh	r2, [r7, #28]
 80001ac:	83da      	strh	r2, [r3, #30]
  this->motor_pin_3 = motor_pin_3;
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80001b2:	841a      	strh	r2, [r3, #32]
  this->motor_pin_4 = motor_pin_4;
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80001b8:	845a      	strh	r2, [r3, #34]	; 0x22

  // Arduino ports for the motor control pin connection:
  this->motor_pin_1_port = motor_pin_1_port;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	629a      	str	r2, [r3, #40]	; 0x28
  this->motor_pin_2_port = motor_pin_2_port;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	69ba      	ldr	r2, [r7, #24]
 80001c4:	62da      	str	r2, [r3, #44]	; 0x2c
  this->motor_pin_3_port = motor_pin_3_port;
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	6a3a      	ldr	r2, [r7, #32]
 80001ca:	631a      	str	r2, [r3, #48]	; 0x30
  this->motor_pin_4_port = motor_pin_4_port;
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80001d0:	635a      	str	r2, [r3, #52]	; 0x34

  this->motor_dir = motor_direction;
 80001d2:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
//  pinMode(this->motor_pin_2, OUTPUT);
//  pinMode(this->motor_pin_3, OUTPUT);
//  pinMode(this->motor_pin_4, OUTPUT);

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	2200      	movs	r2, #0
 80001e0:	849a      	strh	r2, [r3, #36]	; 0x24

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	2204      	movs	r2, #4
 80001e6:	60da      	str	r2, [r3, #12]

  // pin that is continously updated via DMA on the magnetic end stop value (0 means the magnet is directly aligned with the sensor)
  this->end_stop = stop_sensor;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80001ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	4618      	mov	r0, r3
 80001f2:	3714      	adds	r7, #20
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <_ZN7Stepper8setSpeedEl>:

/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	6039      	str	r1, [r7, #0]
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	689b      	ldr	r3, [r3, #8]
 800020a:	4a07      	ldr	r2, [pc, #28]	; (8000228 <_ZN7Stepper8setSpeedEl+0x2c>)
 800020c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	fb92 f3f3 	sdiv	r3, r2, r3
 8000216:	461a      	mov	r2, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	605a      	str	r2, [r3, #4]
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	03938700 	.word	0x03938700

0800022c <_ZN7Stepper12setStepBoundEl>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */

void Stepper::setStepBound(int32_t max_step){
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	6039      	str	r1, [r7, #0]
	this->max_step = max_step;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	683a      	ldr	r2, [r7, #0]
 800023a:	615a      	str	r2, [r3, #20]
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr

08000248 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000248:	b480      	push	{r7}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000254:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4313      	orrs	r3, r2
 800025e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000264:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800026c:	68fb      	ldr	r3, [r7, #12]
}
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
	...

0800027c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000282:	463b      	mov	r3, r7
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
 8000290:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000292:	4b3f      	ldr	r3, [pc, #252]	; (8000390 <MX_ADC1_Init+0x114>)
 8000294:	4a3f      	ldr	r2, [pc, #252]	; (8000394 <MX_ADC1_Init+0x118>)
 8000296:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000298:	4b3d      	ldr	r3, [pc, #244]	; (8000390 <MX_ADC1_Init+0x114>)
 800029a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800029e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002a0:	4b3b      	ldr	r3, [pc, #236]	; (8000390 <MX_ADC1_Init+0x114>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002a6:	4b3a      	ldr	r3, [pc, #232]	; (8000390 <MX_ADC1_Init+0x114>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002ac:	4b38      	ldr	r3, [pc, #224]	; (8000390 <MX_ADC1_Init+0x114>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80002b2:	4b37      	ldr	r3, [pc, #220]	; (8000390 <MX_ADC1_Init+0x114>)
 80002b4:	2208      	movs	r2, #8
 80002b6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002b8:	4b35      	ldr	r3, [pc, #212]	; (8000390 <MX_ADC1_Init+0x114>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002be:	4b34      	ldr	r3, [pc, #208]	; (8000390 <MX_ADC1_Init+0x114>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80002c4:	4b32      	ldr	r3, [pc, #200]	; (8000390 <MX_ADC1_Init+0x114>)
 80002c6:	2204      	movs	r2, #4
 80002c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ca:	4b31      	ldr	r3, [pc, #196]	; (8000390 <MX_ADC1_Init+0x114>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d2:	4b2f      	ldr	r3, [pc, #188]	; (8000390 <MX_ADC1_Init+0x114>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002d8:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <MX_ADC1_Init+0x114>)
 80002da:	2200      	movs	r2, #0
 80002dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80002de:	4b2c      	ldr	r3, [pc, #176]	; (8000390 <MX_ADC1_Init+0x114>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80002e6:	4b2a      	ldr	r3, [pc, #168]	; (8000390 <MX_ADC1_Init+0x114>)
 80002e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80002ee:	4b28      	ldr	r3, [pc, #160]	; (8000390 <MX_ADC1_Init+0x114>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002f6:	4826      	ldr	r0, [pc, #152]	; (8000390 <MX_ADC1_Init+0x114>)
 80002f8:	f000 ff86 	bl	8001208 <HAL_ADC_Init>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000302:	f000 fa2f 	bl	8000764 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000306:	4b24      	ldr	r3, [pc, #144]	; (8000398 <MX_ADC1_Init+0x11c>)
 8000308:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800030a:	2306      	movs	r3, #6
 800030c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800030e:	2303      	movs	r3, #3
 8000310:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000312:	237f      	movs	r3, #127	; 0x7f
 8000314:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000316:	2304      	movs	r3, #4
 8000318:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031e:	463b      	mov	r3, r7
 8000320:	4619      	mov	r1, r3
 8000322:	481b      	ldr	r0, [pc, #108]	; (8000390 <MX_ADC1_Init+0x114>)
 8000324:	f001 fb1c 	bl	8001960 <HAL_ADC_ConfigChannel>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800032e:	f000 fa19 	bl	8000764 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000332:	4b1a      	ldr	r3, [pc, #104]	; (800039c <MX_ADC1_Init+0x120>)
 8000334:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000336:	230c      	movs	r3, #12
 8000338:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033a:	463b      	mov	r3, r7
 800033c:	4619      	mov	r1, r3
 800033e:	4814      	ldr	r0, [pc, #80]	; (8000390 <MX_ADC1_Init+0x114>)
 8000340:	f001 fb0e 	bl	8001960 <HAL_ADC_ConfigChannel>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800034a:	f000 fa0b 	bl	8000764 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800034e:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_ADC1_Init+0x124>)
 8000350:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000352:	2312      	movs	r3, #18
 8000354:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000356:	463b      	mov	r3, r7
 8000358:	4619      	mov	r1, r3
 800035a:	480d      	ldr	r0, [pc, #52]	; (8000390 <MX_ADC1_Init+0x114>)
 800035c:	f001 fb00 	bl	8001960 <HAL_ADC_ConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000366:	f000 f9fd 	bl	8000764 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_ADC1_Init+0x128>)
 800036c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800036e:	2318      	movs	r3, #24
 8000370:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000372:	463b      	mov	r3, r7
 8000374:	4619      	mov	r1, r3
 8000376:	4806      	ldr	r0, [pc, #24]	; (8000390 <MX_ADC1_Init+0x114>)
 8000378:	f001 faf2 	bl	8001960 <HAL_ADC_ConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000382:	f000 f9ef 	bl	8000764 <Error_Handler>
  }

}
 8000386:	bf00      	nop
 8000388:	3718      	adds	r7, #24
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	200003d0 	.word	0x200003d0
 8000394:	50040000 	.word	0x50040000
 8000398:	04300002 	.word	0x04300002
 800039c:	08600004 	.word	0x08600004
 80003a0:	0c900008 	.word	0x0c900008
 80003a4:	1d500080 	.word	0x1d500080

080003a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b0:	f107 030c 	add.w	r3, r7, #12
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a2e      	ldr	r2, [pc, #184]	; (8000480 <HAL_ADC_MspInit+0xd8>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d155      	bne.n	8000476 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80003ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80003ce:	f7ff ff3b 	bl	8000248 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d2:	2004      	movs	r0, #4
 80003d4:	f7ff ff38 	bl	8000248 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	2001      	movs	r0, #1
 80003da:	f7ff ff35 	bl	8000248 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MAG_BASE_Pin|MAG_LIGHT_Pin|MAIN_BOARD_TEMP_Pin;
 80003de:	2307      	movs	r3, #7
 80003e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e2:	2303      	movs	r3, #3
 80003e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ea:	f107 030c 	add.w	r3, r7, #12
 80003ee:	4619      	mov	r1, r3
 80003f0:	4824      	ldr	r0, [pc, #144]	; (8000484 <HAL_ADC_MspInit+0xdc>)
 80003f2:	f002 fb3d 	bl	8002a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_TEMP_Pin;
 80003f6:	2304      	movs	r3, #4
 80003f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003fa:	2303      	movs	r3, #3
 80003fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000402:	f107 030c 	add.w	r3, r7, #12
 8000406:	4619      	mov	r1, r3
 8000408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040c:	f002 fb30 	bl	8002a70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000410:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <HAL_ADC_MspInit+0xe0>)
 8000412:	4a1e      	ldr	r2, [pc, #120]	; (800048c <HAL_ADC_MspInit+0xe4>)
 8000414:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <HAL_ADC_MspInit+0xe0>)
 8000418:	2205      	movs	r2, #5
 800041a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800041c:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <HAL_ADC_MspInit+0xe0>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000422:	4b19      	ldr	r3, [pc, #100]	; (8000488 <HAL_ADC_MspInit+0xe0>)
 8000424:	2200      	movs	r2, #0
 8000426:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000428:	4b17      	ldr	r3, [pc, #92]	; (8000488 <HAL_ADC_MspInit+0xe0>)
 800042a:	2280      	movs	r2, #128	; 0x80
 800042c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800042e:	4b16      	ldr	r3, [pc, #88]	; (8000488 <HAL_ADC_MspInit+0xe0>)
 8000430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000434:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000436:	4b14      	ldr	r3, [pc, #80]	; (8000488 <HAL_ADC_MspInit+0xe0>)
 8000438:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800043c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <HAL_ADC_MspInit+0xe0>)
 8000440:	2220      	movs	r2, #32
 8000442:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000444:	4b10      	ldr	r3, [pc, #64]	; (8000488 <HAL_ADC_MspInit+0xe0>)
 8000446:	2200      	movs	r2, #0
 8000448:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800044a:	480f      	ldr	r0, [pc, #60]	; (8000488 <HAL_ADC_MspInit+0xe0>)
 800044c:	f002 f89c 	bl	8002588 <HAL_DMA_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000456:	f000 f985 	bl	8000764 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <HAL_ADC_MspInit+0xe0>)
 800045e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000460:	4a09      	ldr	r2, [pc, #36]	; (8000488 <HAL_ADC_MspInit+0xe0>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	2012      	movs	r0, #18
 800046c:	f002 f857 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000470:	2012      	movs	r0, #18
 8000472:	f002 f86e 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000476:	bf00      	nop
 8000478:	3720      	adds	r7, #32
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	50040000 	.word	0x50040000
 8000484:	48000800 	.word	0x48000800
 8000488:	20000434 	.word	0x20000434
 800048c:	40020008 	.word	0x40020008

08000490 <LL_AHB1_GRP1_EnableClock>:
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800049e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4013      	ands	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b4:	68fb      	ldr	r3, [r7, #12]
}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004c6:	2004      	movs	r0, #4
 80004c8:	f7ff ffe2 	bl	8000490 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004cc:	2001      	movs	r0, #1
 80004ce:	f7ff ffdf 	bl	8000490 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2100      	movs	r1, #0
 80004d6:	200b      	movs	r0, #11
 80004d8:	f002 f821 	bl	800251e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004dc:	200b      	movs	r0, #11
 80004de:	f002 f838 	bl	8002552 <HAL_NVIC_EnableIRQ>

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <LL_AHB2_GRP1_EnableClock>:
{
 80004e6:	b480      	push	{r7}
 80004e8:	b085      	sub	sp, #20
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4313      	orrs	r3, r2
 80004fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052c:	2004      	movs	r0, #4
 800052e:	f7ff ffda 	bl	80004e6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	2002      	movs	r0, #2
 8000534:	f7ff ffd7 	bl	80004e6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	2001      	movs	r0, #1
 800053a:	f7ff ffd4 	bl	80004e6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800053e:	2010      	movs	r0, #16
 8000540:	f7ff ffd1 	bl	80004e6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 8000544:	2200      	movs	r2, #0
 8000546:	f240 3193 	movw	r1, #915	; 0x393
 800054a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054e:	f002 fbff 	bl	8002d50 <HAL_GPIO_WritePin>
                          |AIN1_1_Pin|BIN1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN1_2_Pin|BIN2_2_Pin|BIN2_1_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 8000558:	4823      	ldr	r0, [pc, #140]	; (80005e8 <MX_GPIO_Init+0xd0>)
 800055a:	f002 fbf9 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2103      	movs	r1, #3
 8000562:	4821      	ldr	r0, [pc, #132]	; (80005e8 <MX_GPIO_Init+0xd0>)
 8000564:	f002 fbf4 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2110      	movs	r1, #16
 800056c:	481f      	ldr	r0, [pc, #124]	; (80005ec <MX_GPIO_Init+0xd4>)
 800056e:	f002 fbef 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 8000572:	f240 3393 	movw	r3, #915	; 0x393
 8000576:	607b      	str	r3, [r7, #4]
                          |AIN1_1_Pin|BIN1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4619      	mov	r1, r3
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f002 fa70 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_LED_DISC_Pin;
 8000590:	2308      	movs	r3, #8
 8000592:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT_LED_DISC_GPIO_Port, &GPIO_InitStruct);
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	4619      	mov	r1, r3
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a4:	f002 fa64 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BIN1_2_Pin|BIN2_2_Pin|BLUE_LED_Pin|GREEN_LED_Pin
 80005a8:	f644 4303 	movw	r3, #19459	; 0x4c03
 80005ac:	607b      	str	r3, [r7, #4]
                          |BIN2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <MX_GPIO_Init+0xd0>)
 80005c0:	f002 fa56 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 80005c4:	2310      	movs	r3, #16
 80005c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	4619      	mov	r1, r3
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_GPIO_Init+0xd4>)
 80005da:	f002 fa49 	bl	8002a70 <HAL_GPIO_Init>

}
 80005de:	bf00      	nop
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	48000400 	.word	0x48000400
 80005ec:	48001000 	.word	0x48001000

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fb78 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f810 	bl	800061c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f7ff ff8c 	bl	8000518 <MX_GPIO_Init>
  MX_DMA_Init();
 8000600:	f7ff ff5f 	bl	80004c2 <MX_DMA_Init>
  MX_TIM2_Init();
 8000604:	f000 fa26 	bl	8000a54 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000608:	f000 fa72 	bl	8000af0 <MX_TIM17_Init>
  MX_ADC1_Init();
 800060c:	f7ff fe36 	bl	800027c <MX_ADC1_Init>
  MX_USB_Device_Init();
 8000610:	f009 f816 	bl	8009640 <MX_USB_Device_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  myMain();
 8000614:	f000 f8aa 	bl	800076c <_Z6myMainv>
 8000618:	e7fc      	b.n	8000614 <main+0x24>
	...

0800061c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b0ae      	sub	sp, #184	; 0xb8
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000626:	2248      	movs	r2, #72	; 0x48
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f009 fd34 	bl	800a098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
 8000640:	615a      	str	r2, [r3, #20]
 8000642:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2250      	movs	r2, #80	; 0x50
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f009 fd24 	bl	800a098 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8000650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800065a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800066e:	f043 0303 	orr.w	r3, r3, #3
 8000672:	60d3      	str	r3, [r2, #12]
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <_Z18SystemClock_Configv+0x144>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800067c:	4a38      	ldr	r2, [pc, #224]	; (8000760 <_Z18SystemClock_Configv+0x144>)
 800067e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <_Z18SystemClock_Configv+0x144>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000690:	2303      	movs	r3, #3
 8000692:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000698:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2340      	movs	r3, #64	; 0x40
 80006a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fe2b 	bl	800430c <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	bf14      	ite	ne
 80006bc:	2301      	movne	r3, #1
 80006be:	2300      	moveq	r3, #0
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 80006c6:	f000 f84d 	bl	8000764 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006ca:	236f      	movs	r3, #111	; 0x6f
 80006cc:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006ce:	2302      	movs	r3, #2
 80006d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006ea:	2101      	movs	r1, #1
 80006ec:	4618      	mov	r0, r3
 80006ee:	f004 f999 	bl	8004a24 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	bf14      	ite	ne
 80006f8:	2301      	movne	r3, #1
 80006fa:	2300      	moveq	r3, #0
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <_Z18SystemClock_Configv+0xea>
  {
    Error_Handler();
 8000702:	f000 f82f 	bl	8000764 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8000706:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 800070a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800070c:	2306      	movs	r3, #6
 800070e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000714:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800071a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800071c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000720:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000722:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000726:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000728:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800072e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000738:	2310      	movs	r3, #16
 800073a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4618      	mov	r0, r3
 8000740:	f004 fd83 	bl	800524a <HAL_RCCEx_PeriphCLKConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	bf14      	ite	ne
 800074a:	2301      	movne	r3, #1
 800074c:	2300      	moveq	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <_Z18SystemClock_Configv+0x13c>
  {
    Error_Handler();
 8000754:	f000 f806 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000758:	bf00      	nop
 800075a:	37b8      	adds	r7, #184	; 0xb8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	58000400 	.word	0x58000400

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076a:	e7fe      	b.n	800076a <Error_Handler+0x6>

0800076c <_Z6myMainv>:

struct ADC_DATA adc_data;

//uint16_t adc_data[4];

int myMain(void){
 800076c:	b580      	push	{r7, lr}
 800076e:	b0ae      	sub	sp, #184	; 0xb8
 8000770:	af08      	add	r7, sp, #32

	HAL_TIM_Base_Start_IT(&htim2);
 8000772:	4839      	ldr	r0, [pc, #228]	; (8000858 <_Z6myMainv+0xec>)
 8000774:	f005 f88c 	bl	8005890 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2110      	movs	r1, #16
 800077c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000780:	f002 fae6 	bl	8002d50 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim17);
 8000784:	4835      	ldr	r0, [pc, #212]	; (800085c <_Z6myMainv+0xf0>)
 8000786:	f005 f83d 	bl	8005804 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800078a:	2100      	movs	r1, #0
 800078c:	4833      	ldr	r0, [pc, #204]	; (800085c <_Z6myMainv+0xf0>)
 800078e:	f005 f92f 	bl	80059f0 <HAL_TIM_PWM_Start>

	Stepper motor_base(STEPS, AIN1_1_GPIO_Port, AIN1_1_Pin,
			AIN2_1_GPIO_Port, AIN2_1_Pin,
			BIN1_1_GPIO_Port, BIN1_1_Pin,
			BIN2_1_GPIO_Port, BIN2_1_Pin, &adc_data.mag_base, INVERTED);
 8000792:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8000796:	23ff      	movs	r3, #255	; 0xff
 8000798:	9307      	str	r3, [sp, #28]
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <_Z6myMainv+0xf4>)
 800079c:	9306      	str	r3, [sp, #24]
 800079e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007a2:	9305      	str	r3, [sp, #20]
 80007a4:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <_Z6myMainv+0xf8>)
 80007a6:	9304      	str	r3, [sp, #16]
 80007a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ac:	9303      	str	r3, [sp, #12]
 80007ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007b2:	9302      	str	r3, [sp, #8]
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007c6:	f640 0104 	movw	r1, #2052	; 0x804
 80007ca:	f7ff fcd7 	bl	800017c <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_base.setSpeed(12);
 80007ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007d2:	210c      	movs	r1, #12
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fd11 	bl	80001fc <_ZN7Stepper8setSpeedEl>
	motor_base.setStepBound(BASE_STEP_RANGE);
 80007da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007de:	f641 010c 	movw	r1, #6156	; 0x180c
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fd22 	bl	800022c <_ZN7Stepper12setStepBoundEl>

	Stepper motor_led(STEPS, AIN1_2_GPIO_Port, AIN1_2_Pin,
				AIN2_2_GPIO_Port, AIN2_2_Pin,
				BIN1_2_GPIO_Port, BIN1_2_Pin,
				BIN2_2_GPIO_Port, BIN2_2_Pin,  &adc_data.mag_led, NON_INVERTED);
 80007e8:	1d38      	adds	r0, r7, #4
 80007ea:	2301      	movs	r3, #1
 80007ec:	9307      	str	r3, [sp, #28]
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <_Z6myMainv+0xfc>)
 80007f0:	9306      	str	r3, [sp, #24]
 80007f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007f6:	9305      	str	r3, [sp, #20]
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <_Z6myMainv+0xf8>)
 80007fa:	9304      	str	r3, [sp, #16]
 80007fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000800:	9303      	str	r3, [sp, #12]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <_Z6myMainv+0xf8>)
 8000804:	9302      	str	r3, [sp, #8]
 8000806:	2301      	movs	r3, #1
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2302      	movs	r3, #2
 8000812:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000816:	f640 0104 	movw	r1, #2052	; 0x804
 800081a:	f7ff fcaf 	bl	800017c <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_led.setSpeed(16);
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2110      	movs	r1, #16
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fcea 	bl	80001fc <_ZN7Stepper8setSpeedEl>
	motor_led.setStepBound(LED_STEP_RANGE);
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	f647 1123 	movw	r1, #31011	; 0x7923
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff fcfc 	bl	800022c <_ZN7Stepper12setStepBoundEl>

	uint32_t counter = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_data, 4);
 800083a:	2204      	movs	r2, #4
 800083c:	4908      	ldr	r1, [pc, #32]	; (8000860 <_Z6myMainv+0xf4>)
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <_Z6myMainv+0x100>)
 8000840:	f000 fe2c 	bl	800149c <HAL_ADC_Start_DMA>
	HAL_Delay(100);
 8000844:	2064      	movs	r0, #100	; 0x64
 8000846:	f000 fad5 	bl	8000df4 <HAL_Delay>
	while (1)
		  {
			counter += 1;
 800084a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800084e:	3301      	adds	r3, #1
 8000850:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
//				motor_base.honeAxis();
//				motor_base.step(-3078);
//				motor_base.step(-3078);
//			}

			while(1){};
 8000854:	e7fe      	b.n	8000854 <_Z6myMainv+0xe8>
 8000856:	bf00      	nop
 8000858:	200004e0 	.word	0x200004e0
 800085c:	20000494 	.word	0x20000494
 8000860:	200001a4 	.word	0x200001a4
 8000864:	48000400 	.word	0x48000400
 8000868:	200001a6 	.word	0x200001a6
 800086c:	200003d0 	.word	0x200003d0

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <HardFault_Handler+0x4>

0800088a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <MemManage_Handler+0x4>

08000890 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <BusFault_Handler+0x4>

08000896 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <UsageFault_Handler+0x4>

0800089c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ca:	f000 fa67 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <DMA1_Channel1_IRQHandler+0x10>)
 80008da:	f001 ff78 	bl	80027ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000434 	.word	0x20000434

080008e8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <ADC1_IRQHandler+0x10>)
 80008ee:	f000 fe59 	bl	80015a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200003d0 	.word	0x200003d0

080008fc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <USB_LP_IRQHandler+0x10>)
 8000902:	f002 fb1a 	bl	8002f3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20001a00 	.word	0x20001a00

08000910 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000914:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <SystemInit+0xa0>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800091a:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <SystemInit+0xa0>)
 800091c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000920:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <SystemInit+0xa0>)
 8000922:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000926:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800092a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800093a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000942:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <SystemInit+0xa4>)
 8000950:	4013      	ands	r3, r2
 8000952:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800095c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000960:	f023 0305 	bic.w	r3, r3, #5
 8000964:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800096c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000974:	f023 0301 	bic.w	r3, r3, #1
 8000978:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800097c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <SystemInit+0xa8>)
 8000982:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <SystemInit+0xa8>)
 800098a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800098c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800099c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00
 80009b4:	faf6fefb 	.word	0xfaf6fefb
 80009b8:	22041000 	.word	0x22041000

080009bc <LL_AHB2_GRP1_EnableClock>:
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4013      	ands	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009e0:	68fb      	ldr	r3, [r7, #12]
}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a44:	68fb      	ldr	r3, [r7, #12]
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000a72:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <MX_TIM2_Init+0x98>)
 8000a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <MX_TIM2_Init+0x98>)
 8000a7c:	221f      	movs	r2, #31
 8000a7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_TIM2_Init+0x98>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <MX_TIM2_Init+0x98>)
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_TIM2_Init+0x98>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_TIM2_Init+0x98>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a9a:	4814      	ldr	r0, [pc, #80]	; (8000aec <MX_TIM2_Init+0x98>)
 8000a9c:	f004 fe5b 	bl	8005756 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000aa6:	f7ff fe5d 	bl	8000764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480d      	ldr	r0, [pc, #52]	; (8000aec <MX_TIM2_Init+0x98>)
 8000ab8:	f005 f984 	bl	8005dc4 <HAL_TIM_ConfigClockSource>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ac2:	f7ff fe4f 	bl	8000764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4806      	ldr	r0, [pc, #24]	; (8000aec <MX_TIM2_Init+0x98>)
 8000ad4:	f005 fdd4 	bl	8006680 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ade:	f7ff fe41 	bl	8000764 <Error_Handler>
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3720      	adds	r7, #32
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200004e0 	.word	0x200004e0

08000af0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	; 0x50
 8000af4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2234      	movs	r2, #52	; 0x34
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f009 fac1 	bl	800a098 <memset>

  htim17.Instance = TIM17;
 8000b16:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <MX_TIM17_Init+0xec>)
 8000b18:	4a31      	ldr	r2, [pc, #196]	; (8000be0 <MX_TIM17_Init+0xf0>)
 8000b1a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3199;
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <MX_TIM17_Init+0xec>)
 8000b1e:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000b22:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <MX_TIM17_Init+0xec>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000b2a:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <MX_TIM17_Init+0xec>)
 8000b2c:	2264      	movs	r2, #100	; 0x64
 8000b2e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b30:	4b2a      	ldr	r3, [pc, #168]	; (8000bdc <MX_TIM17_Init+0xec>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b36:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <MX_TIM17_Init+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <MX_TIM17_Init+0xec>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b42:	4826      	ldr	r0, [pc, #152]	; (8000bdc <MX_TIM17_Init+0xec>)
 8000b44:	f004 fe07 	bl	8005756 <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000b4e:	f7ff fe09 	bl	8000764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000b52:	4822      	ldr	r0, [pc, #136]	; (8000bdc <MX_TIM17_Init+0xec>)
 8000b54:	f004 feea 	bl	800592c <HAL_TIM_PWM_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000b5e:	f7ff fe01 	bl	8000764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b62:	2360      	movs	r3, #96	; 0x60
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	4815      	ldr	r0, [pc, #84]	; (8000bdc <MX_TIM17_Init+0xec>)
 8000b88:	f005 f80c 	bl	8005ba4 <HAL_TIM_PWM_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000b92:	f7ff fde7 	bl	8000764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <MX_TIM17_Init+0xec>)
 8000bbe:	f005 fdbf 	bl	8006740 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000bc8:	f7ff fdcc 	bl	8000764 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <MX_TIM17_Init+0xec>)
 8000bce:	f000 f825 	bl	8000c1c <HAL_TIM_MspPostInit>

}
 8000bd2:	bf00      	nop
 8000bd4:	3750      	adds	r7, #80	; 0x50
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000494 	.word	0x20000494
 8000be0:	40014800 	.word	0x40014800

08000be4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf4:	d103      	bne.n	8000bfe <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff fef9 	bl	80009ee <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000bfc:	e008      	b.n	8000c10 <HAL_TIM_Base_MspInit+0x2c>
  else if(tim_baseHandle->Instance==TIM17)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <HAL_TIM_Base_MspInit+0x34>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d103      	bne.n	8000c10 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c08:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000c0c:	f7ff ff08 	bl	8000a20 <LL_APB2_GRP1_EnableClock>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40014800 	.word	0x40014800

08000c1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM17)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_TIM_MspPostInit+0x54>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d113      	bne.n	8000c66 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f7ff febc 	bl	80009bc <LL_AHB2_GRP1_EnableClock>
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8000c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8000c56:	230e      	movs	r3, #14
 8000c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <HAL_TIM_MspPostInit+0x58>)
 8000c62:	f001 ff05 	bl	8002a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40014800 	.word	0x40014800
 8000c74:	48000400 	.word	0x48000400

08000c78 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000c78:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7c:	3304      	adds	r3, #4

08000c7e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c80:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000c82:	d3f9      	bcc.n	8000c78 <CopyDataInit>
  bx lr
 8000c84:	4770      	bx	lr

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000c86:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000c88:	3004      	adds	r0, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000c8a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>
  bx lr
 8000c8e:	4770      	bx	lr

08000c90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000c92:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c94:	f7ff fe3c 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <LoopForever+0x8>)
 8000c9a:	490c      	ldr	r1, [pc, #48]	; (8000ccc <LoopForever+0xc>)
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <LoopForever+0x10>)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f7ff ffed 	bl	8000c7e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ca4:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <LoopForever+0x14>)
 8000ca6:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <LoopForever+0x18>)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f7ff ffee 	bl	8000c8a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000cae:	480b      	ldr	r0, [pc, #44]	; (8000cdc <LoopForever+0x1c>)
 8000cb0:	490b      	ldr	r1, [pc, #44]	; (8000ce0 <LoopForever+0x20>)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f7ff ffe9 	bl	8000c8a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cb8:	f009 f9ca 	bl	800a050 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000cbc:	f7ff fc98 	bl	80005f0 <main>

08000cc0 <LoopForever>:

LoopForever:
  b LoopForever
 8000cc0:	e7fe      	b.n	8000cc0 <LoopForever>
 8000cc2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000cc4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000cc8:	20000004 	.word	0x20000004
 8000ccc:	20000188 	.word	0x20000188
 8000cd0:	0800a1a4 	.word	0x0800a1a4
  INIT_BSS _sbss, _ebss
 8000cd4:	20000188 	.word	0x20000188
 8000cd8:	20001c74 	.word	0x20001c74
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000cdc:	20030000 	.word	0x20030000
 8000ce0:	20030000 	.word	0x20030000

08000ce4 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <AES1_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_Init+0x3c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <HAL_Init+0x3c>)
 8000cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfe:	2003      	movs	r0, #3
 8000d00:	f001 fc02 	bl	8002508 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d04:	2000      	movs	r0, #0
 8000d06:	f000 f80f 	bl	8000d28 <HAL_InitTick>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	e001      	b.n	8000d1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d16:	f7ff fdab 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	58004000 	.word	0x58004000

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <HAL_InitTick+0x6c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d024      	beq.n	8000d86 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d3c:	f004 f81c 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8000d40:	4602      	mov	r2, r0
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <HAL_InitTick+0x6c>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	4619      	mov	r1, r3
 8000d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 fc0a 	bl	800256e <HAL_SYSTICK_Config>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10f      	bne.n	8000d80 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b0f      	cmp	r3, #15
 8000d64:	d809      	bhi.n	8000d7a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d66:	2200      	movs	r2, #0
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6e:	f001 fbd6 	bl	800251e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <HAL_InitTick+0x70>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	e007      	b.n	8000d8a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	e004      	b.n	8000d8a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	e001      	b.n	8000d8a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000000c 	.word	0x2000000c
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	2000052c 	.word	0x2000052c

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000052c 	.word	0x2000052c

08000ddc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTickPrio+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff ffe2 	bl	8000dc4 <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_Delay+0x40>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000e1a:	bf00      	nop
 8000e1c:	f7ff ffd2 	bl	8000dc4 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f7      	bhi.n	8000e1c <HAL_Delay+0x28>
    {
    }
  }
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000000c 	.word	0x2000000c

08000e38 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	609a      	str	r2, [r3, #8]
#endif
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	609a      	str	r2, [r3, #8]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3360      	adds	r3, #96	; 0x60
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <LL_ADC_SetOffset+0x44>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ed8:	bf00      	nop
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	03fff000 	.word	0x03fff000

08000ee8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3360      	adds	r3, #96	; 0x60
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3360      	adds	r3, #96	; 0x60
 8000f24:	461a      	mov	r2, r3
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f3e:	bf00      	nop
 8000f40:	371c      	adds	r7, #28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f62:	2300      	movs	r3, #0
#endif
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3330      	adds	r3, #48	; 0x30
 8000f80:	461a      	mov	r2, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	4413      	add	r3, r2
 8000f8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	f003 031f 	and.w	r3, r3, #31
 8000f9a:	211f      	movs	r1, #31
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	0e9b      	lsrs	r3, r3, #26
 8000fa8:	f003 011f 	and.w	r1, r3, #31
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8000fbc:	bf00      	nop
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
#endif
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800100a:	b480      	push	{r7}
 800100c:	b087      	sub	sp, #28
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3314      	adds	r3, #20
 800101a:	461a      	mov	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	0e5b      	lsrs	r3, r3, #25
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	0d1b      	lsrs	r3, r3, #20
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	2107      	movs	r1, #7
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	401a      	ands	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	0d1b      	lsrs	r3, r3, #20
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	431a      	orrs	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8001054:	bf00      	nop
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001078:	43db      	mvns	r3, r3
 800107a:	401a      	ands	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0318 	and.w	r3, r3, #24
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001084:	40d9      	lsrs	r1, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	400b      	ands	r3, r1
 800108a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800108e:	431a      	orrs	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	0007ffff 	.word	0x0007ffff

080010a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	6093      	str	r3, [r2, #8]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010e0:	d101      	bne.n	80010e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001104:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001108:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001130:	d101      	bne.n	8001136 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001154:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001158:	f043 0201 	orr.w	r2, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <LL_ADC_IsEnabled+0x18>
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <LL_ADC_IsEnabled+0x1a>
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011a6:	f043 0204 	orr.w	r2, r3, #4
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d101      	bne.n	80011d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d101      	bne.n	80011f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e12c      	b.n	8001480 <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001230:	2b00      	cmp	r3, #0
 8001232:	d109      	bne.n	8001248 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff f8b7 	bl	80003a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff3d 	bl	80010cc <LL_ADC_IsDeepPowerDownEnabled>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff23 	bl	80010a8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff58 	bl	800111c <LL_ADC_IsInternalRegulatorEnabled>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d113      	bne.n	800129a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff3c 	bl	80010f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800127c:	4b82      	ldr	r3, [pc, #520]	; (8001488 <HAL_ADC_Init+0x280>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	099b      	lsrs	r3, r3, #6
 8001282:	4a82      	ldr	r2, [pc, #520]	; (800148c <HAL_ADC_Init+0x284>)
 8001284:	fba2 2303 	umull	r2, r3, r2, r3
 8001288:	099b      	lsrs	r3, r3, #6
 800128a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800128c:	e002      	b.n	8001294 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	3b01      	subs	r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f9      	bne.n	800128e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff3c 	bl	800111c <LL_ADC_IsInternalRegulatorEnabled>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10d      	bne.n	80012c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ae:	f043 0210 	orr.w	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	f043 0201 	orr.w	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff75 	bl	80011ba <LL_ADC_REG_IsConversionOngoing>
 80012d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f040 80c7 	bne.w	800146e <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f040 80c3 	bne.w	800146e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012f0:	f043 0202 	orr.w	r2, r3, #2
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff35 	bl	800116c <LL_ADC_IsEnabled>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10b      	bne.n	8001320 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001308:	4861      	ldr	r0, [pc, #388]	; (8001490 <HAL_ADC_Init+0x288>)
 800130a:	f7ff ff2f 	bl	800116c <LL_ADC_IsEnabled>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d105      	bne.n	8001320 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4619      	mov	r1, r3
 800131a:	485e      	ldr	r0, [pc, #376]	; (8001494 <HAL_ADC_Init+0x28c>)
 800131c:	f7ff fd8c 	bl	8000e38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7e5b      	ldrb	r3, [r3, #25]
 8001324:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800132a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001330:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001336:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001340:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d106      	bne.n	8001360 <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	3b01      	subs	r3, #1
 8001358:	045b      	lsls	r3, r3, #17
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	2b00      	cmp	r3, #0
 8001366:	d009      	beq.n	800137c <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	4b45      	ldr	r3, [pc, #276]	; (8001498 <HAL_ADC_Init+0x290>)
 8001384:	4013      	ands	r3, r2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	430b      	orrs	r3, r1
 800138e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff10 	bl	80011ba <LL_ADC_REG_IsConversionOngoing>
 800139a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff1d 	bl	80011e0 <LL_ADC_INJ_IsConversionOngoing>
 80013a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d13d      	bne.n	800142a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d13a      	bne.n	800142a <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013b8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013c0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013d0:	f023 0302 	bic.w	r3, r3, #2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	69b9      	ldr	r1, [r7, #24]
 80013da:	430b      	orrs	r3, r1
 80013dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d118      	bne.n	800141a <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013f2:	f023 0304 	bic.w	r3, r3, #4
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013fe:	4311      	orrs	r1, r2
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001404:	4311      	orrs	r1, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800140a:	430a      	orrs	r2, r1
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	e007      	b.n	800142a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0201 	bic.w	r2, r2, #1
 8001428:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d10c      	bne.n	800144c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	f023 010f 	bic.w	r1, r3, #15
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	1e5a      	subs	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	631a      	str	r2, [r3, #48]	; 0x30
 800144a:	e007      	b.n	800145c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 020f 	bic.w	r2, r2, #15
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	f023 0303 	bic.w	r3, r3, #3
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	655a      	str	r2, [r3, #84]	; 0x54
 800146c:	e007      	b.n	800147e <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001472:	f043 0210 	orr.w	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800147e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000004 	.word	0x20000004
 800148c:	053e2d63 	.word	0x053e2d63
 8001490:	50040000 	.word	0x50040000
 8001494:	50040300 	.word	0x50040300
 8001498:	fff0c007 	.word	0xfff0c007

0800149c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fe84 	bl	80011ba <LL_ADC_REG_IsConversionOngoing>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d167      	bne.n	8001588 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Start_DMA+0x2a>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e063      	b.n	800158e <HAL_ADC_Start_DMA+0xf2>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 fe0a 	bl	80020e8 <ADC_Enable>
 80014d4:	4603      	mov	r3, r0
 80014d6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d14f      	bne.n	800157e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	f023 0206 	bic.w	r2, r3, #6
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	659a      	str	r2, [r3, #88]	; 0x58
 800150a:	e002      	b.n	8001512 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a20      	ldr	r2, [pc, #128]	; (8001598 <HAL_ADC_Start_DMA+0xfc>)
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	4a1f      	ldr	r2, [pc, #124]	; (800159c <HAL_ADC_Start_DMA+0x100>)
 8001520:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <HAL_ADC_Start_DMA+0x104>)
 8001528:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	221c      	movs	r2, #28
 8001530:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 0210 	orr.w	r2, r2, #16
 8001548:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3340      	adds	r3, #64	; 0x40
 8001564:	4619      	mov	r1, r3
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f001 f8b5 	bl	80026d8 <HAL_DMA_Start_IT>
 800156e:	4603      	mov	r3, r0
 8001570:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fe0b 	bl	8001192 <LL_ADC_REG_StartConversion>
 800157c:	e006      	b.n	800158c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001586:	e001      	b.n	800158c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001588:	2302      	movs	r3, #2
 800158a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800158c:	7dfb      	ldrb	r3, [r7, #23]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	080021dd 	.word	0x080021dd
 800159c:	080022b5 	.word	0x080022b5
 80015a0:	080022d1 	.word	0x080022d1

080015a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d017      	beq.n	80015fa <HAL_ADC_IRQHandler+0x56>
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d012      	beq.n	80015fa <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 feb1 	bl	8002354 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2202      	movs	r2, #2
 80015f8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d004      	beq.n	800160e <HAL_ADC_IRQHandler+0x6a>
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001614:	2b00      	cmp	r3, #0
 8001616:	d05d      	beq.n	80016d4 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d058      	beq.n	80016d4 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	d105      	bne.n	800163a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fc83 	bl	8000f4a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d03d      	beq.n	80016c6 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if defined (ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001658:	d035      	beq.n	80016c6 <HAL_ADC_IRQHandler+0x122>
#endif
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b08      	cmp	r3, #8
 8001666:	d12e      	bne.n	80016c6 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fda4 	bl	80011ba <LL_ADC_REG_IsConversionOngoing>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d11a      	bne.n	80016ae <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 020c 	bic.w	r2, r2, #12
 8001686:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d112      	bne.n	80016c6 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
 80016ac:	e00b      	b.n	80016c6 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b2:	f043 0210 	orr.w	r2, r3, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f922 	bl	8001910 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	220c      	movs	r2, #12
 80016d2:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d004      	beq.n	80016e8 <HAL_ADC_IRQHandler+0x144>
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d109      	bne.n	80016fc <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d074      	beq.n	80017dc <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d06f      	beq.n	80017dc <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fc63 	bl	8000fe4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800171e:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fc10 	bl	8000f4a <LL_ADC_REG_IsTriggerSourceSWStart>
 800172a:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d049      	beq.n	80017ce <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <HAL_ADC_IRQHandler+0x1b0>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d041      	beq.n	80017ce <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001750:	2b00      	cmp	r3, #0
 8001752:	d13c      	bne.n	80017ce <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175e:	2b40      	cmp	r3, #64	; 0x40
 8001760:	d135      	bne.n	80017ce <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d12e      	bne.n	80017ce <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fd33 	bl	80011e0 <LL_ADC_INJ_IsConversionOngoing>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d11a      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800178e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001794:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d112      	bne.n	80017ce <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	655a      	str	r2, [r3, #84]	; 0x54
 80017b4:	e00b      	b.n	80017ce <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ba:	f043 0210 	orr.w	r2, r3, #16
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	f043 0201 	orr.w	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fd98 	bl	8002304 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2260      	movs	r2, #96	; 0x60
 80017da:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d011      	beq.n	800180a <HAL_ADC_IRQHandler+0x266>
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00c      	beq.n	800180a <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f89b 	bl	8001938 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d012      	beq.n	800183a <HAL_ADC_IRQHandler+0x296>
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00d      	beq.n	800183a <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001822:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fd7e 	bl	800232c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001840:	2b00      	cmp	r3, #0
 8001842:	d012      	beq.n	800186a <HAL_ADC_IRQHandler+0x2c6>
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00d      	beq.n	800186a <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001852:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fd70 	bl	8002340 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2b00      	cmp	r3, #0
 8001872:	d02b      	beq.n	80018cc <HAL_ADC_IRQHandler+0x328>
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	2b00      	cmp	r3, #0
 800187c:	d026      	beq.n	80018cc <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8001886:	2301      	movs	r3, #1
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e009      	b.n	80018a0 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fb99 	bl	8000fc8 <LL_ADC_REG_GetDMATransfer>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 800189c:	2301      	movs	r3, #1
 800189e:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10e      	bne.n	80018c4 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018aa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	f043 0202 	orr.w	r2, r3, #2
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f844 	bl	800194c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2210      	movs	r2, #16
 80018ca:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d018      	beq.n	8001908 <HAL_ADC_IRQHandler+0x364>
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f0:	f043 0208 	orr.w	r2, r3, #8
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001900:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fd08 	bl	8002318 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8001908:	bf00      	nop
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b0b6      	sub	sp, #216	; 0xd8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x22>
 800197e:	2302      	movs	r3, #2
 8001980:	e39e      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x760>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fc13 	bl	80011ba <LL_ADC_REG_IsConversionOngoing>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 8383 	bne.w	80020a2 <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	f7ff fae1 	bl	8000f70 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fc01 	bl	80011ba <LL_ADC_REG_IsConversionOngoing>
 80019b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fc0d 	bl	80011e0 <LL_ADC_INJ_IsConversionOngoing>
 80019c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 81a6 	bne.w	8001d20 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f040 81a1 	bne.w	8001d20 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6819      	ldr	r1, [r3, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	461a      	mov	r2, r3
 80019ec:	f7ff fb0d 	bl	800100a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	08db      	lsrs	r3, r3, #3
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d00a      	beq.n	8001a28 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6919      	ldr	r1, [r3, #16]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a22:	f7ff fa3d 	bl	8000ea0 <LL_ADC_SetOffset>
 8001a26:	e17b      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fa5a 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10a      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0xf4>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fa4f 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	0e9b      	lsrs	r3, r3, #26
 8001a4e:	f003 021f 	and.w	r2, r3, #31
 8001a52:	e01e      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x132>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fa44 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a6a:	fa93 f3a3 	rbit	r3, r3
 8001a6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001a82:	2320      	movs	r3, #32
 8001a84:	e004      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001a86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a8a:	fab3 f383 	clz	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d105      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x14a>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	0e9b      	lsrs	r3, r3, #26
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	e018      	b.n	8001adc <HAL_ADC_ConfigChannel+0x17c>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ac6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	e004      	b.n	8001adc <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8001ad2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d106      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fa13 	bl	8000f14 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2101      	movs	r1, #1
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff f9f7 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10a      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x1ba>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f9ec 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	0e9b      	lsrs	r3, r3, #26
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	e01e      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x1f8>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2101      	movs	r1, #1
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff f9e1 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	e004      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8001b4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d105      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x210>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0e9b      	lsrs	r3, r3, #26
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	e018      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x242>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8001b94:	2320      	movs	r3, #32
 8001b96:	e004      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8001b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b9c:	fab3 f383 	clz	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d106      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	2101      	movs	r1, #1
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f9b0 	bl	8000f14 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2102      	movs	r1, #2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f994 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10a      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x280>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2102      	movs	r1, #2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f989 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	0e9b      	lsrs	r3, r3, #26
 8001bda:	f003 021f 	and.w	r2, r3, #31
 8001bde:	e01e      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x2be>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2102      	movs	r1, #2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f97e 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e004      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001c12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x2d6>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0e9b      	lsrs	r3, r3, #26
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	e016      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x304>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8001c56:	2320      	movs	r3, #32
 8001c58:	e004      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8001c5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d106      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2102      	movs	r1, #2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f94f 	bl	8000f14 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2103      	movs	r1, #3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f933 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10a      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x342>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2103      	movs	r1, #3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f928 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	0e9b      	lsrs	r3, r3, #26
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	e017      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x372>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2103      	movs	r1, #3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f91d 	bl	8000ee8 <LL_ADC_GetOffsetChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cbc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001cbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	e003      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8001cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d105      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x38a>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	0e9b      	lsrs	r3, r3, #26
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	e011      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x3ae>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8001d02:	2320      	movs	r3, #32
 8001d04:	e003      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8001d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d106      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	2103      	movs	r1, #3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f8fa 	bl	8000f14 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fa21 	bl	800116c <LL_ADC_IsEnabled>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f040 81c1 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	6819      	ldr	r1, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f7ff f98e 	bl	8001060 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4a8e      	ldr	r2, [pc, #568]	; (8001f84 <HAL_ADC_ConfigChannel+0x624>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	f040 8130 	bne.w	8001fb0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10b      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x418>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	0e9b      	lsrs	r3, r3, #26
 8001d66:	3301      	adds	r3, #1
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	2b09      	cmp	r3, #9
 8001d6e:	bf94      	ite	ls
 8001d70:	2301      	movls	r3, #1
 8001d72:	2300      	movhi	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	e019      	b.n	8001dac <HAL_ADC_ConfigChannel+0x44c>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d88:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8001d90:	2320      	movs	r3, #32
 8001d92:	e003      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8001d94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	2b09      	cmp	r3, #9
 8001da4:	bf94      	ite	ls
 8001da6:	2301      	movls	r3, #1
 8001da8:	2300      	movhi	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d079      	beq.n	8001ea4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x46c>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0e9b      	lsrs	r3, r3, #26
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	069b      	lsls	r3, r3, #26
 8001dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dca:	e015      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x498>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ddc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001de4:	2320      	movs	r3, #32
 8001de6:	e003      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	069b      	lsls	r3, r3, #26
 8001df4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x4b8>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	0e9b      	lsrs	r3, r3, #26
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	e017      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x4e8>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8001e30:	2320      	movs	r3, #32
 8001e32:	e003      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8001e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	2101      	movs	r1, #1
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	ea42 0103 	orr.w	r1, r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10a      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x50e>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0e9b      	lsrs	r3, r3, #26
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	051b      	lsls	r3, r3, #20
 8001e6c:	e018      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x540>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001e86:	2320      	movs	r3, #32
 8001e88:	e003      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	e080      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x560>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0e9b      	lsrs	r3, r3, #26
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	069b      	lsls	r3, r3, #26
 8001eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ebe:	e015      	b.n	8001eec <HAL_ADC_ConfigChannel+0x58c>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	e003      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	069b      	lsls	r3, r3, #26
 8001ee8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x5ac>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	3301      	adds	r3, #1
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	e017      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x5dc>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	61fb      	str	r3, [r7, #28]
  return result;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2101      	movs	r1, #1
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	ea42 0103 	orr.w	r1, r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10d      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x608>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	3301      	adds	r3, #1
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3b1e      	subs	r3, #30
 8001f60:	051b      	lsls	r3, r3, #20
 8001f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f66:	e01d      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x644>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	613b      	str	r3, [r7, #16]
  return result;
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d103      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8001f80:	2320      	movs	r3, #32
 8001f82:	e005      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x630>
 8001f84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	f003 021f 	and.w	r2, r3, #31
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b1e      	subs	r3, #30
 8001f9e:	051b      	lsls	r3, r3, #20
 8001fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	6892      	ldr	r2, [r2, #8]
 8001faa:	4619      	mov	r1, r3
 8001fac:	f7ff f82d 	bl	800100a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b44      	ldr	r3, [pc, #272]	; (80020c8 <HAL_ADC_ConfigChannel+0x768>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d07b      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fbc:	4843      	ldr	r0, [pc, #268]	; (80020cc <HAL_ADC_ConfigChannel+0x76c>)
 8001fbe:	f7fe ff61 	bl	8000e84 <LL_ADC_GetCommonPathInternalCh>
 8001fc2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fc6:	4842      	ldr	r0, [pc, #264]	; (80020d0 <HAL_ADC_ConfigChannel+0x770>)
 8001fc8:	f7ff f8d0 	bl	800116c <LL_ADC_IsEnabled>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d15d      	bne.n	800208e <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a3f      	ldr	r2, [pc, #252]	; (80020d4 <HAL_ADC_ConfigChannel+0x774>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d126      	bne.n	800202a <HAL_ADC_ConfigChannel+0x6ca>
 8001fdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d120      	bne.n	800202a <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a38      	ldr	r2, [pc, #224]	; (80020d0 <HAL_ADC_ConfigChannel+0x770>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d160      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ff6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4833      	ldr	r0, [pc, #204]	; (80020cc <HAL_ADC_ConfigChannel+0x76c>)
 8001ffe:	f7fe ff2e 	bl	8000e5e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002002:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <HAL_ADC_ConfigChannel+0x778>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	099b      	lsrs	r3, r3, #6
 8002008:	4a34      	ldr	r2, [pc, #208]	; (80020dc <HAL_ADC_ConfigChannel+0x77c>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	099a      	lsrs	r2, r3, #6
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800201a:	e002      	b.n	8002022 <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3b01      	subs	r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f9      	bne.n	800201c <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002028:	e044      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <HAL_ADC_ConfigChannel+0x780>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d113      	bne.n	800205c <HAL_ADC_ConfigChannel+0x6fc>
 8002034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10d      	bne.n	800205c <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <HAL_ADC_ConfigChannel+0x770>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d134      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800204a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800204e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002052:	4619      	mov	r1, r3
 8002054:	481d      	ldr	r0, [pc, #116]	; (80020cc <HAL_ADC_ConfigChannel+0x76c>)
 8002056:	f7fe ff02 	bl	8000e5e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800205a:	e02b      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a20      	ldr	r2, [pc, #128]	; (80020e4 <HAL_ADC_ConfigChannel+0x784>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d126      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x754>
 8002066:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d120      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <HAL_ADC_ConfigChannel+0x770>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d11b      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800207c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002080:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002084:	4619      	mov	r1, r3
 8002086:	4811      	ldr	r0, [pc, #68]	; (80020cc <HAL_ADC_ConfigChannel+0x76c>)
 8002088:	f7fe fee9 	bl	8000e5e <LL_ADC_SetCommonPathInternalCh>
 800208c:	e012      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f043 0220 	orr.w	r2, r3, #32
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80020a0:	e008      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a6:	f043 0220 	orr.w	r2, r3, #32
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80020bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	37d8      	adds	r7, #216	; 0xd8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	80080000 	.word	0x80080000
 80020cc:	50040300 	.word	0x50040300
 80020d0:	50040000 	.word	0x50040000
 80020d4:	c7520000 	.word	0xc7520000
 80020d8:	20000004 	.word	0x20000004
 80020dc:	053e2d63 	.word	0x053e2d63
 80020e0:	cb840000 	.word	0xcb840000
 80020e4:	80000001 	.word	0x80000001

080020e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff f837 	bl	800116c <LL_ADC_IsEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d15e      	bne.n	80021c2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	4b30      	ldr	r3, [pc, #192]	; (80021cc <ADC_Enable+0xe4>)
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00d      	beq.n	800212e <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	f043 0210 	orr.w	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	f043 0201 	orr.w	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e04a      	b.n	80021c4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff f806 	bl	8001144 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002138:	4825      	ldr	r0, [pc, #148]	; (80021d0 <ADC_Enable+0xe8>)
 800213a:	f7fe fea3 	bl	8000e84 <LL_ADC_GetCommonPathInternalCh>
 800213e:	4603      	mov	r3, r0
 8002140:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00f      	beq.n	8002168 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002148:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <ADC_Enable+0xec>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <ADC_Enable+0xf0>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	099b      	lsrs	r3, r3, #6
 8002156:	3301      	adds	r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800215a:	e002      	b.n	8002162 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3b01      	subs	r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f9      	bne.n	800215c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002168:	f7fe fe2c 	bl	8000dc4 <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800216e:	e021      	b.n	80021b4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fff9 	bl	800116c <LL_ADC_IsEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d104      	bne.n	800218a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe ffdd 	bl	8001144 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800218a:	f7fe fe1b 	bl	8000dc4 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d90d      	bls.n	80021b4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219c:	f043 0210 	orr.w	r2, r3, #16
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e007      	b.n	80021c4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d1d6      	bne.n	8002170 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	8000003f 	.word	0x8000003f
 80021d0:	50040300 	.word	0x50040300
 80021d4:	20000004 	.word	0x20000004
 80021d8:	053e2d63 	.word	0x053e2d63

080021dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d14b      	bne.n	800228e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d021      	beq.n	8002254 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fe98 	bl	8000f4a <LL_ADC_REG_IsTriggerSourceSWStart>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d032      	beq.n	8002286 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d12b      	bne.n	8002286 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11f      	bne.n	8002286 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f043 0201 	orr.w	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
 8002252:	e018      	b.n	8002286 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d111      	bne.n	8002286 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d105      	bne.n	8002286 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f7ff fb42 	bl	8001910 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800228c:	e00e      	b.n	80022ac <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f7ff fb56 	bl	800194c <HAL_ADC_ErrorCallback>
}
 80022a0:	e004      	b.n	80022ac <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f7ff fb2e 	bl	8001924 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f043 0204 	orr.w	r2, r3, #4
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f7ff fb28 	bl	800194c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002384:	4013      	ands	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239a:	4a04      	ldr	r2, [pc, #16]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60d3      	str	r3, [r2, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <__NVIC_GetPriorityGrouping+0x18>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	f003 0307 	and.w	r3, r3, #7
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	db0b      	blt.n	80023f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4907      	ldr	r1, [pc, #28]	; (8002404 <__NVIC_EnableIRQ+0x38>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	2001      	movs	r0, #1
 80023ee:	fa00 f202 	lsl.w	r2, r0, r2
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000e100 	.word	0xe000e100

08002408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	2b00      	cmp	r3, #0
 800241a:	db0a      	blt.n	8002432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	490c      	ldr	r1, [pc, #48]	; (8002454 <__NVIC_SetPriority+0x4c>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	0112      	lsls	r2, r2, #4
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	440b      	add	r3, r1
 800242c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002430:	e00a      	b.n	8002448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4908      	ldr	r1, [pc, #32]	; (8002458 <__NVIC_SetPriority+0x50>)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	3b04      	subs	r3, #4
 8002440:	0112      	lsls	r2, r2, #4
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	440b      	add	r3, r1
 8002446:	761a      	strb	r2, [r3, #24]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f1c3 0307 	rsb	r3, r3, #7
 8002476:	2b04      	cmp	r3, #4
 8002478:	bf28      	it	cs
 800247a:	2304      	movcs	r3, #4
 800247c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3304      	adds	r3, #4
 8002482:	2b06      	cmp	r3, #6
 8002484:	d902      	bls.n	800248c <NVIC_EncodePriority+0x30>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3b03      	subs	r3, #3
 800248a:	e000      	b.n	800248e <NVIC_EncodePriority+0x32>
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	401a      	ands	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	43d9      	mvns	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	4313      	orrs	r3, r2
         );
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d4:	d301      	bcc.n	80024da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00f      	b.n	80024fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <SysTick_Config+0x40>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e2:	210f      	movs	r1, #15
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f7ff ff8e 	bl	8002408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <SysTick_Config+0x40>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <SysTick_Config+0x40>)
 80024f4:	2207      	movs	r2, #7
 80024f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	e000e010 	.word	0xe000e010

08002508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ff29 	bl	8002368 <__NVIC_SetPriorityGrouping>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800252c:	f7ff ff40 	bl	80023b0 <__NVIC_GetPriorityGrouping>
 8002530:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff90 	bl	800245c <NVIC_EncodePriority>
 800253c:	4602      	mov	r2, r0
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff5f 	bl	8002408 <__NVIC_SetPriority>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff33 	bl	80023cc <__NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ffa4 	bl	80024c4 <SysTick_Config>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e08e      	b.n	80026b8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_DMA_Init+0x138>)
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d80f      	bhi.n	80025c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b45      	ldr	r3, [pc, #276]	; (80026c4 <HAL_DMA_Init+0x13c>)
 80025ae:	4413      	add	r3, r2
 80025b0:	4a45      	ldr	r2, [pc, #276]	; (80026c8 <HAL_DMA_Init+0x140>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	009a      	lsls	r2, r3, #2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a42      	ldr	r2, [pc, #264]	; (80026cc <HAL_DMA_Init+0x144>)
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40
 80025c4:	e00e      	b.n	80025e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <HAL_DMA_Init+0x148>)
 80025ce:	4413      	add	r3, r2
 80025d0:	4a3d      	ldr	r2, [pc, #244]	; (80026c8 <HAL_DMA_Init+0x140>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	009a      	lsls	r2, r3, #2
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a3c      	ldr	r2, [pc, #240]	; (80026d4 <HAL_DMA_Init+0x14c>)
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f9b6 	bl	80029a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002644:	d102      	bne.n	800264c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002654:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002658:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002662:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d010      	beq.n	800268e <HAL_DMA_Init+0x106>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d80c      	bhi.n	800268e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f9d5 	bl	8002a24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	e008      	b.n	80026a0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40020407 	.word	0x40020407
 80026c4:	bffdfff8 	.word	0xbffdfff8
 80026c8:	cccccccd 	.word	0xcccccccd
 80026cc:	40020000 	.word	0x40020000
 80026d0:	bffdfbf8 	.word	0xbffdfbf8
 80026d4:	40020400 	.word	0x40020400

080026d8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_DMA_Start_IT+0x20>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e066      	b.n	80027c6 <HAL_DMA_Start_IT+0xee>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d155      	bne.n	80027b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f8fb 	bl	800292c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 020e 	orr.w	r2, r2, #14
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e00f      	b.n	8002770 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0204 	bic.w	r2, r2, #4
 800275e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 020a 	orr.w	r2, r2, #10
 800276e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800278c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0201 	orr.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e005      	b.n	80027c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
 80027c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f003 031c 	and.w	r3, r3, #28
 80027ee:	2204      	movs	r2, #4
 80027f0:	409a      	lsls	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d026      	beq.n	8002848 <HAL_DMA_IRQHandler+0x7a>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d021      	beq.n	8002848 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d107      	bne.n	8002822 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0204 	bic.w	r2, r2, #4
 8002820:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f003 021c 	and.w	r2, r3, #28
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	2104      	movs	r1, #4
 8002830:	fa01 f202 	lsl.w	r2, r1, r2
 8002834:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	2b00      	cmp	r3, #0
 800283c:	d071      	beq.n	8002922 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002846:	e06c      	b.n	8002922 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	f003 031c 	and.w	r3, r3, #28
 8002850:	2202      	movs	r2, #2
 8002852:	409a      	lsls	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d02e      	beq.n	80028ba <HAL_DMA_IRQHandler+0xec>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d029      	beq.n	80028ba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10b      	bne.n	800288c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 020a 	bic.w	r2, r2, #10
 8002882:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	f003 021c 	and.w	r2, r3, #28
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	2102      	movs	r1, #2
 800289a:	fa01 f202 	lsl.w	r2, r1, r2
 800289e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d038      	beq.n	8002922 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80028b8:	e033      	b.n	8002922 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	f003 031c 	and.w	r3, r3, #28
 80028c2:	2208      	movs	r2, #8
 80028c4:	409a      	lsls	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d02a      	beq.n	8002924 <HAL_DMA_IRQHandler+0x156>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d025      	beq.n	8002924 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 020e 	bic.w	r2, r2, #14
 80028e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	f003 021c 	and.w	r2, r3, #28
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	2101      	movs	r1, #1
 80028f6:	fa01 f202 	lsl.w	r2, r1, r2
 80028fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002922:	bf00      	nop
 8002924:	bf00      	nop
}
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002942:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002954:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f003 021c 	and.w	r2, r3, #28
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f202 	lsl.w	r2, r1, r2
 8002968:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b10      	cmp	r3, #16
 8002978:	d108      	bne.n	800298c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800298a:	e007      	b.n	800299c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	60da      	str	r2, [r3, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d80a      	bhi.n	80029d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029c8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6493      	str	r3, [r2, #72]	; 0x48
 80029d0:	e007      	b.n	80029e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	009a      	lsls	r2, r3, #2
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80029dc:	4413      	add	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	3b08      	subs	r3, #8
 80029ea:	4a0c      	ldr	r2, [pc, #48]	; (8002a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80029f8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	2201      	movs	r2, #1
 8002a02:	409a      	lsls	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	40020407 	.word	0x40020407
 8002a18:	4002081c 	.word	0x4002081c
 8002a1c:	cccccccd 	.word	0xcccccccd
 8002a20:	40020880 	.word	0x40020880

08002a24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a34:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	461a      	mov	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a09      	ldr	r2, [pc, #36]	; (8002a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002a48:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2201      	movs	r2, #1
 8002a54:	409a      	lsls	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	1000823f 	.word	0x1000823f
 8002a6c:	40020940 	.word	0x40020940

08002a70 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7e:	e14c      	b.n	8002d1a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2101      	movs	r1, #1
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 813e 	beq.w	8002d14 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d00b      	beq.n	8002ab8 <HAL_GPIO_Init+0x48>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d007      	beq.n	8002ab8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aac:	2b11      	cmp	r3, #17
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b12      	cmp	r3, #18
 8002ab6:	d130      	bne.n	8002b1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aee:	2201      	movs	r2, #1
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	f003 0201 	and.w	r2, r3, #1
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0xea>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b12      	cmp	r3, #18
 8002b58:	d123      	bne.n	8002ba2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	08da      	lsrs	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3208      	adds	r2, #8
 8002b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	6939      	ldr	r1, [r7, #16]
 8002b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0203 	and.w	r2, r3, #3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8098 	beq.w	8002d14 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002be4:	4a54      	ldr	r2, [pc, #336]	; (8002d38 <HAL_GPIO_Init+0x2c8>)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	3302      	adds	r3, #2
 8002bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c0e:	d019      	beq.n	8002c44 <HAL_GPIO_Init+0x1d4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a4a      	ldr	r2, [pc, #296]	; (8002d3c <HAL_GPIO_Init+0x2cc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d013      	beq.n	8002c40 <HAL_GPIO_Init+0x1d0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a49      	ldr	r2, [pc, #292]	; (8002d40 <HAL_GPIO_Init+0x2d0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00d      	beq.n	8002c3c <HAL_GPIO_Init+0x1cc>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a48      	ldr	r2, [pc, #288]	; (8002d44 <HAL_GPIO_Init+0x2d4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d007      	beq.n	8002c38 <HAL_GPIO_Init+0x1c8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a47      	ldr	r2, [pc, #284]	; (8002d48 <HAL_GPIO_Init+0x2d8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d101      	bne.n	8002c34 <HAL_GPIO_Init+0x1c4>
 8002c30:	2304      	movs	r3, #4
 8002c32:	e008      	b.n	8002c46 <HAL_GPIO_Init+0x1d6>
 8002c34:	2307      	movs	r3, #7
 8002c36:	e006      	b.n	8002c46 <HAL_GPIO_Init+0x1d6>
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e004      	b.n	8002c46 <HAL_GPIO_Init+0x1d6>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e002      	b.n	8002c46 <HAL_GPIO_Init+0x1d6>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_GPIO_Init+0x1d6>
 8002c44:	2300      	movs	r3, #0
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	f002 0203 	and.w	r2, r2, #3
 8002c4c:	0092      	lsls	r2, r2, #2
 8002c4e:	4093      	lsls	r3, r2
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c56:	4938      	ldr	r1, [pc, #224]	; (8002d38 <HAL_GPIO_Init+0x2c8>)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	089b      	lsrs	r3, r3, #2
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c64:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <HAL_GPIO_Init+0x2dc>)
 8002c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c8a:	4a30      	ldr	r2, [pc, #192]	; (8002d4c <HAL_GPIO_Init+0x2dc>)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002c92:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <HAL_GPIO_Init+0x2dc>)
 8002c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cb8:	4a24      	ldr	r2, [pc, #144]	; (8002d4c <HAL_GPIO_Init+0x2dc>)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <HAL_GPIO_Init+0x2dc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ce4:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <HAL_GPIO_Init+0x2dc>)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cea:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <HAL_GPIO_Init+0x2dc>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d0e:	4a0f      	ldr	r2, [pc, #60]	; (8002d4c <HAL_GPIO_Init+0x2dc>)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3301      	adds	r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f47f aeab 	bne.w	8002a80 <HAL_GPIO_Init+0x10>
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40010000 	.word	0x40010000
 8002d3c:	48000400 	.word	0x48000400
 8002d40:	48000800 	.word	0x48000800
 8002d44:	48000c00 	.word	0x48000c00
 8002d48:	48001000 	.word	0x48001000
 8002d4c:	58000800 	.word	0x58000800

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d82:	b08b      	sub	sp, #44	; 0x2c
 8002d84:	af06      	add	r7, sp, #24
 8002d86:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0ad      	b.n	8002eee <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f006 fe5a 	bl	8009a60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2203      	movs	r2, #3
 8002db0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 fd6a 	bl	8006892 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
 8002dc2:	e035      	b.n	8002e30 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	015b      	lsls	r3, r3, #5
 8002dca:	4413      	add	r3, r2
 8002dcc:	3329      	adds	r3, #41	; 0x29
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	015b      	lsls	r3, r3, #5
 8002dd8:	4413      	add	r3, r2
 8002dda:	3328      	adds	r3, #40	; 0x28
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
 8002dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	b291      	uxth	r1, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	015b      	lsls	r3, r3, #5
 8002dea:	4413      	add	r3, r2
 8002dec:	3336      	adds	r3, #54	; 0x36
 8002dee:	460a      	mov	r2, r1
 8002df0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	015b      	lsls	r3, r3, #5
 8002df8:	4413      	add	r3, r2
 8002dfa:	332b      	adds	r3, #43	; 0x2b
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	015b      	lsls	r3, r3, #5
 8002e06:	4413      	add	r3, r2
 8002e08:	3338      	adds	r3, #56	; 0x38
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	015b      	lsls	r3, r3, #5
 8002e14:	4413      	add	r3, r2
 8002e16:	333c      	adds	r3, #60	; 0x3c
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	3302      	adds	r3, #2
 8002e22:	015b      	lsls	r3, r3, #5
 8002e24:	4413      	add	r3, r2
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d3c4      	bcc.n	8002dc4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
 8002e3e:	e031      	b.n	8002ea4 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	015b      	lsls	r3, r3, #5
 8002e46:	4413      	add	r3, r2
 8002e48:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	015b      	lsls	r3, r3, #5
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	015b      	lsls	r3, r3, #5
 8002e66:	4413      	add	r3, r2
 8002e68:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	015b      	lsls	r3, r3, #5
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	015b      	lsls	r3, r3, #5
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	330a      	adds	r3, #10
 8002e96:	015b      	lsls	r3, r3, #5
 8002e98:	4413      	add	r3, r2
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d3c8      	bcc.n	8002e40 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	687e      	ldr	r6, [r7, #4]
 8002eb6:	466d      	mov	r5, sp
 8002eb8:	f106 0410 	add.w	r4, r6, #16
 8002ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	602b      	str	r3, [r5, #0]
 8002ec4:	1d33      	adds	r3, r6, #4
 8002ec6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec8:	6838      	ldr	r0, [r7, #0]
 8002eca:	f003 fcfd 	bl	80068c8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d102      	bne.n	8002eec <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fe59 	bl	8003b9e <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ef6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_PCD_Start+0x16>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e012      	b.n	8002f32 <HAL_PCD_Start+0x3c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f004 fecd 	bl	8007cb8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f003 fc9c 	bl	8006860 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f004 fecd 	bl	8007ce6 <USB_ReadInterrupts>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f56:	d102      	bne.n	8002f5e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fb33 	bl	80035c4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f004 febf 	bl	8007ce6 <USB_ReadInterrupts>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f72:	d112      	bne.n	8002f9a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f86:	b292      	uxth	r2, r2
 8002f88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f006 fdee 	bl	8009b6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002f92:	2100      	movs	r1, #0
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f91e 	bl	80031d6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f004 fea1 	bl	8007ce6 <USB_ReadInterrupts>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fae:	d10b      	bne.n	8002fc8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 fe8a 	bl	8007ce6 <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f004 fe73 	bl	8007ce6 <USB_ReadInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300a:	d133      	bne.n	8003074 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003014:	b29a      	uxth	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0204 	bic.w	r2, r2, #4
 800301e:	b292      	uxth	r2, r2
 8003020:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800302c:	b29a      	uxth	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0208 	bic.w	r2, r2, #8
 8003036:	b292      	uxth	r2, r2
 8003038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003042:	2b01      	cmp	r3, #1
 8003044:	d107      	bne.n	8003056 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800304e:	2100      	movs	r1, #0
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f006 ff7b 	bl	8009f4c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f006 fdc2 	bl	8009be0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003064:	b29a      	uxth	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800306e:	b292      	uxth	r2, r2
 8003070:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f004 fe34 	bl	8007ce6 <USB_ReadInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003088:	d126      	bne.n	80030d8 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003092:	b29a      	uxth	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0208 	orr.w	r2, r2, #8
 800309c:	b292      	uxth	r2, r2
 800309e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b4:	b292      	uxth	r2, r2
 80030b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0204 	orr.w	r2, r2, #4
 80030cc:	b292      	uxth	r2, r2
 80030ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f006 fd6a 	bl	8009bac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f004 fe02 	bl	8007ce6 <USB_ReadInterrupts>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e8:	2b80      	cmp	r3, #128	; 0x80
 80030ea:	d13f      	bne.n	800316c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fe:	b292      	uxth	r2, r2
 8003100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800310a:	2b00      	cmp	r3, #0
 800310c:	d12b      	bne.n	8003166 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003116:	b29a      	uxth	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0204 	orr.w	r2, r2, #4
 8003120:	b292      	uxth	r2, r2
 8003122:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800312e:	b29a      	uxth	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0208 	orr.w	r2, r2, #8
 8003138:	b292      	uxth	r2, r2
 800313a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800314e:	b29b      	uxth	r3, r3
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800315c:	2101      	movs	r1, #1
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f006 fef4 	bl	8009f4c <HAL_PCDEx_LPM_Callback>
 8003164:	e002      	b.n	800316c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f006 fd20 	bl	8009bac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f004 fdb8 	bl	8007ce6 <USB_ReadInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003180:	d10e      	bne.n	80031a0 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800318a:	b29a      	uxth	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003194:	b292      	uxth	r2, r2
 8003196:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f006 fcd9 	bl	8009b52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f004 fd9e 	bl	8007ce6 <USB_ReadInterrupts>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b4:	d10b      	bne.n	80031ce <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031be:	b29a      	uxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031c8:	b292      	uxth	r2, r2
 80031ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_PCD_SetAddress+0x1a>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e013      	b.n	8003218 <HAL_PCD_SetAddress+0x42>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f004 fd41 	bl	8007c90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	461a      	mov	r2, r3
 800322e:	4603      	mov	r3, r0
 8003230:	70fb      	strb	r3, [r7, #3]
 8003232:	460b      	mov	r3, r1
 8003234:	803b      	strh	r3, [r7, #0]
 8003236:	4613      	mov	r3, r2
 8003238:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800323e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003242:	2b00      	cmp	r3, #0
 8003244:	da0b      	bge.n	800325e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	015b      	lsls	r3, r3, #5
 800324e:	3328      	adds	r3, #40	; 0x28
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	705a      	strb	r2, [r3, #1]
 800325c:	e00b      	b.n	8003276 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	015b      	lsls	r3, r3, #5
 8003266:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003282:	883a      	ldrh	r2, [r7, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	78ba      	ldrb	r2, [r7, #2]
 800328c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	785b      	ldrb	r3, [r3, #1]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d004      	beq.n	80032a0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032a0:	78bb      	ldrb	r3, [r7, #2]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d102      	bne.n	80032ac <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_PCD_EP_Open+0x9a>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e00e      	b.n	80032d8 <HAL_PCD_EP_Open+0xb8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68f9      	ldr	r1, [r7, #12]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f003 fb21 	bl	8006910 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80032d6:	7afb      	ldrb	r3, [r7, #11]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	da0b      	bge.n	800330c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	015b      	lsls	r3, r3, #5
 80032fc:	3328      	adds	r3, #40	; 0x28
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	705a      	strb	r2, [r3, #1]
 800330a:	e00b      	b.n	8003324 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	015b      	lsls	r3, r3, #5
 8003314:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	b2da      	uxtb	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_PCD_EP_Close+0x5e>
 800333a:	2302      	movs	r3, #2
 800333c:	e00e      	b.n	800335c <HAL_PCD_EP_Close+0x7c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68f9      	ldr	r1, [r7, #12]
 800334c:	4618      	mov	r0, r3
 800334e:	f003 fe8d 	bl	800706c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	460b      	mov	r3, r1
 8003372:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003374:	7afb      	ldrb	r3, [r7, #11]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	015b      	lsls	r3, r3, #5
 800337c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2200      	movs	r2, #0
 8003396:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2200      	movs	r2, #0
 800339c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800339e:	7afb      	ldrb	r3, [r7, #11]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033aa:	7afb      	ldrb	r3, [r7, #11]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6979      	ldr	r1, [r7, #20]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f004 f843 	bl	8007446 <USB_EPStartXfer>
 80033c0:	e005      	b.n	80033ce <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6979      	ldr	r1, [r7, #20]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f004 f83c 	bl	8007446 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	330a      	adds	r3, #10
 80033ee:	015b      	lsls	r3, r3, #5
 80033f0:	4413      	add	r3, r2
 80033f2:	3304      	adds	r3, #4
 80033f4:	681b      	ldr	r3, [r3, #0]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	460b      	mov	r3, r1
 8003410:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003412:	7afb      	ldrb	r3, [r7, #11]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	015b      	lsls	r3, r3, #5
 800341a:	3328      	adds	r3, #40	; 0x28
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2200      	movs	r2, #0
 8003432:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2201      	movs	r2, #1
 8003438:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800343a:	7afb      	ldrb	r3, [r7, #11]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	b2da      	uxtb	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003446:	7afb      	ldrb	r3, [r7, #11]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	2b00      	cmp	r3, #0
 800344e:	d106      	bne.n	800345e <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6979      	ldr	r1, [r7, #20]
 8003456:	4618      	mov	r0, r3
 8003458:	f003 fff5 	bl	8007446 <USB_EPStartXfer>
 800345c:	e005      	b.n	800346a <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6979      	ldr	r1, [r7, #20]
 8003464:	4618      	mov	r0, r3
 8003466:	f003 ffee 	bl	8007446 <USB_EPStartXfer>
  }

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	f003 0207 	and.w	r2, r3, #7
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	429a      	cmp	r2, r3
 800348c:	d901      	bls.n	8003492 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e046      	b.n	8003520 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003496:	2b00      	cmp	r3, #0
 8003498:	da0b      	bge.n	80034b2 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	015b      	lsls	r3, r3, #5
 80034a2:	3328      	adds	r3, #40	; 0x28
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	705a      	strb	r2, [r3, #1]
 80034b0:	e009      	b.n	80034c6 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	015b      	lsls	r3, r3, #5
 80034b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_PCD_EP_SetStall+0x72>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e01c      	b.n	8003520 <HAL_PCD_EP_SetStall+0xac>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f004 facc 	bl	8007a92 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	2b00      	cmp	r3, #0
 8003502:	d108      	bne.n	8003516 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f004 fbf8 	bl	8007d06 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	f003 020f 	and.w	r2, r3, #15
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	429a      	cmp	r2, r3
 8003540:	d901      	bls.n	8003546 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e03a      	b.n	80035bc <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003546:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800354a:	2b00      	cmp	r3, #0
 800354c:	da0b      	bge.n	8003566 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	015b      	lsls	r3, r3, #5
 8003556:	3328      	adds	r3, #40	; 0x28
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	705a      	strb	r2, [r3, #1]
 8003564:	e00b      	b.n	800357e <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	015b      	lsls	r3, r3, #5
 800356e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	b2da      	uxtb	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_PCD_EP_ClrStall+0x76>
 800359a:	2302      	movs	r3, #2
 800359c:	e00e      	b.n	80035bc <HAL_PCD_EP_ClrStall+0x94>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68f9      	ldr	r1, [r7, #12]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f004 fac1 	bl	8007b34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08e      	sub	sp, #56	; 0x38
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035cc:	e29c      	b.n	8003b08 <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80035d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80035e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f040 8152 	bne.w	8003892 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80035ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d150      	bne.n	800369a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003608:	81fb      	strh	r3, [r7, #14]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	89fb      	ldrh	r3, [r7, #14]
 8003610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003618:	b29b      	uxth	r3, r3
 800361a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3328      	adds	r3, #40	; 0x28
 8003620:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800362a:	b29b      	uxth	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	4413      	add	r3, r2
 800363c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	441a      	add	r2, r3
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003658:	2100      	movs	r1, #0
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f006 fa62 	bl	8009b24 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 824d 	beq.w	8003b08 <PCD_EP_ISR_Handler+0x544>
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 8248 	bne.w	8003b08 <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003684:	b2da      	uxtb	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	b292      	uxth	r2, r2
 800368c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003698:	e236      	b.n	8003b08 <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80036aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d032      	beq.n	800371a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036bc:	b29b      	uxth	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	4413      	add	r3, r2
 80036ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f004 fb56 	bl	8007da0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003700:	4013      	ands	r3, r2
 8003702:	823b      	strh	r3, [r7, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	8a3a      	ldrh	r2, [r7, #16]
 800370a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800370e:	b292      	uxth	r2, r2
 8003710:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f006 f9dc 	bl	8009ad0 <HAL_PCD_SetupStageCallback>
 8003718:	e1f6      	b.n	8003b08 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800371a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800371e:	2b00      	cmp	r3, #0
 8003720:	f280 81f2 	bge.w	8003b08 <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	b29a      	uxth	r2, r3
 800372c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003730:	4013      	ands	r3, r2
 8003732:	83fb      	strh	r3, [r7, #30]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	8bfa      	ldrh	r2, [r7, #30]
 800373a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800373e:	b292      	uxth	r2, r2
 8003740:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800374a:	b29b      	uxth	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	4413      	add	r3, r2
 800375c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d019      	beq.n	80037a6 <PCD_EP_ISR_Handler+0x1e2>
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d015      	beq.n	80037a6 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	6959      	ldr	r1, [r3, #20]
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800378a:	b29b      	uxth	r3, r3
 800378c:	f004 fb08 	bl	8007da0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	441a      	add	r2, r3
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800379e:	2100      	movs	r1, #0
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f006 f9a7 	bl	8009af4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	4413      	add	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d112      	bne.n	80037f4 <PCD_EP_ISR_Handler+0x230>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037d8:	b29a      	uxth	r2, r3
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	801a      	strh	r2, [r3, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	801a      	strh	r2, [r3, #0]
 80037f2:	e02f      	b.n	8003854 <PCD_EP_ISR_Handler+0x290>
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	2b3e      	cmp	r3, #62	; 0x3e
 80037fa:	d813      	bhi.n	8003824 <PCD_EP_ISR_Handler+0x260>
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <PCD_EP_ISR_Handler+0x252>
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	3301      	adds	r3, #1
 8003814:	633b      	str	r3, [r7, #48]	; 0x30
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	b29b      	uxth	r3, r3
 800381a:	029b      	lsls	r3, r3, #10
 800381c:	b29a      	uxth	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	801a      	strh	r2, [r3, #0]
 8003822:	e017      	b.n	8003854 <PCD_EP_ISR_Handler+0x290>
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	633b      	str	r3, [r7, #48]	; 0x30
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <PCD_EP_ISR_Handler+0x27a>
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	3b01      	subs	r3, #1
 800383c:	633b      	str	r3, [r7, #48]	; 0x30
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	b29b      	uxth	r3, r3
 8003842:	029b      	lsls	r3, r3, #10
 8003844:	b29b      	uxth	r3, r3
 8003846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800384a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800384e:	b29a      	uxth	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	b29b      	uxth	r3, r3
 800385c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003864:	827b      	strh	r3, [r7, #18]
 8003866:	8a7b      	ldrh	r3, [r7, #18]
 8003868:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800386c:	827b      	strh	r3, [r7, #18]
 800386e:	8a7b      	ldrh	r3, [r7, #18]
 8003870:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003874:	827b      	strh	r3, [r7, #18]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	8a7b      	ldrh	r3, [r7, #18]
 800387c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388c:	b29b      	uxth	r3, r3
 800388e:	8013      	strh	r3, [r2, #0]
 8003890:	e13a      	b.n	8003b08 <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038a4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f280 80d6 	bge.w	8003a5a <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29a      	uxth	r2, r3
 80038c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038c4:	4013      	ands	r3, r2
 80038c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80038d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038dc:	b292      	uxth	r2, r2
 80038de:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80038e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038e4:	015b      	lsls	r3, r3, #5
 80038e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	7b1b      	ldrb	r3, [r3, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d11f      	bne.n	8003938 <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003900:	b29b      	uxth	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	4413      	add	r3, r2
 8003912:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800391c:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 800391e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003920:	2b00      	cmp	r3, #0
 8003922:	d075      	beq.n	8003a10 <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	6959      	ldr	r1, [r3, #20]
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	88da      	ldrh	r2, [r3, #6]
 8003930:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003932:	f004 fa35 	bl	8007da0 <USB_ReadPMA>
 8003936:	e06b      	b.n	8003a10 <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	847b      	strh	r3, [r7, #34]	; 0x22
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	441a      	add	r2, r3
 8003962:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800396c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003970:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003974:	b29b      	uxth	r3, r3
 8003976:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01f      	beq.n	80039d2 <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399a:	b29b      	uxth	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4413      	add	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	4413      	add	r3, r2
 80039ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039b6:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 80039b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d028      	beq.n	8003a10 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	6959      	ldr	r1, [r3, #20]
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	891a      	ldrh	r2, [r3, #8]
 80039ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039cc:	f004 f9e8 	bl	8007da0 <USB_ReadPMA>
 80039d0:	e01e      	b.n	8003a10 <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039da:	b29b      	uxth	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	4413      	add	r3, r2
 80039ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039f6:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 80039f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d008      	beq.n	8003a10 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	6959      	ldr	r1, [r3, #20]
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	895a      	ldrh	r2, [r3, #10]
 8003a0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a0c:	f004 f9c8 	bl	8007da0 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a16:	441a      	add	r2, r3
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a22:	441a      	add	r2, r3
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <PCD_EP_ISR_Handler+0x476>
 8003a30:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d206      	bcs.n	8003a48 <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f006 f857 	bl	8009af4 <HAL_PCD_DataOutStageCallback>
 8003a46:	e008      	b.n	8003a5a <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	7819      	ldrb	r1, [r3, #0]
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fc85 	bl	8003364 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d051      	beq.n	8003b08 <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 8003a64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a68:	015b      	lsls	r3, r3, #5
 8003a6a:	3328      	adds	r3, #40	; 0x28
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8c:	843b      	strh	r3, [r7, #32]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	441a      	add	r2, r3
 8003a9c:	8c3b      	ldrh	r3, [r7, #32]
 8003a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	441a      	add	r2, r3
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d106      	bne.n	8003af6 <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	4619      	mov	r1, r3
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f006 f818 	bl	8009b24 <HAL_PCD_DataInStageCallback>
 8003af4:	e008      	b.n	8003b08 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	7819      	ldrb	r1, [r3, #0]
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fc7d 	bl	8003402 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	b21b      	sxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f6ff ad5a 	blt.w	80035ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3738      	adds	r7, #56	; 0x38
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	817b      	strh	r3, [r7, #10]
 8003b32:	4613      	mov	r3, r2
 8003b34:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003b36:	897b      	ldrh	r3, [r7, #10]
 8003b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b42:	897b      	ldrh	r3, [r7, #10]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	015b      	lsls	r3, r3, #5
 8003b4a:	3328      	adds	r3, #40	; 0x28
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e006      	b.n	8003b62 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b54:	897b      	ldrh	r3, [r7, #10]
 8003b56:	015b      	lsls	r3, r3, #5
 8003b58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b62:	893b      	ldrh	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d107      	bne.n	8003b78 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	80da      	strh	r2, [r3, #6]
 8003b76:	e00b      	b.n	8003b90 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a04      	ldr	r2, [pc, #16]	; (8003c10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c02:	6013      	str	r3, [r2, #0]
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	58000400 	.word	0x58000400

08003c14 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <HAL_PWREx_GetVoltageRange+0x18>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	58000400 	.word	0x58000400

08003c30 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c3e:	6053      	str	r3, [r2, #4]
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	58000400 	.word	0x58000400

08003c50 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c62:	d101      	bne.n	8003c68 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c86:	6013      	str	r3, [r2, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003c92:	b480      	push	{r7}
 8003c94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
}
 8003ca6:	bf00      	nop
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cc2:	d101      	bne.n	8003cc8 <LL_RCC_HSE_IsReady+0x18>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <LL_RCC_HSE_IsReady+0x1a>
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce6:	6013      	str	r3, [r2, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d04:	6013      	str	r3, [r2, #0]
}
 8003d06:	bf00      	nop
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d22:	d101      	bne.n	8003d28 <LL_RCC_HSI_IsReady+0x18>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <LL_RCC_HSI_IsReady+0x1a>
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	061b      	lsls	r3, r3, #24
 8003d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	604b      	str	r3, [r1, #4]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003d76:	bf00      	nop
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d101      	bne.n	8003dba <LL_RCC_HSI48_IsReady+0x18>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <LL_RCC_HSI48_IsReady+0x1a>
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003dde:	bf00      	nop
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e1a:	f043 0304 	orr.w	r3, r3, #4
 8003e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e22:	bf00      	nop
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d101      	bne.n	8003e66 <LL_RCC_LSE_IsReady+0x18>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <LL_RCC_LSE_IsReady+0x1a>
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d101      	bne.n	8003ece <LL_RCC_LSI1_IsReady+0x18>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <LL_RCC_LSI1_IsReady+0x1a>
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eea:	f043 0304 	orr.w	r3, r3, #4
 8003eee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ef2:	bf00      	nop
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d101      	bne.n	8003f36 <LL_RCC_LSI2_IsReady+0x18>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <LL_RCC_LSI2_IsReady+0x1a>
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6013      	str	r3, [r2, #0]
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	6013      	str	r3, [r2, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d101      	bne.n	8003fc2 <LL_RCC_MSI_IsReady+0x16>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <LL_RCC_MSI_IsReady+0x18>
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004006:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2bb0      	cmp	r3, #176	; 0xb0
 800400c:	d901      	bls.n	8004012 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800400e:	23b0      	movs	r3, #176	; 0xb0
 8004010:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004012:	687b      	ldr	r3, [r7, #4]
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800403a:	4313      	orrs	r3, r2
 800403c:	604b      	str	r3, [r1, #4]
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f023 0203 	bic.w	r2, r3, #3
 800405c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030c 	and.w	r3, r3, #12
}
 8004080:	4618      	mov	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800409c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80040e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040ee:	f023 020f 	bic.w	r2, r3, #15
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	091b      	lsrs	r3, r3, #4
 80040f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800411e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4313      	orrs	r3, r2
 8004126:	608b      	str	r3, [r1, #8]
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800413c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004146:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4313      	orrs	r3, r2
 800414e:	608b      	str	r3, [r1, #8]
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800416a:	4618      	mov	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800419e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041a2:	6013      	str	r3, [r2, #0]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80041ae:	b480      	push	{r7}
 80041b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80041b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041c0:	6013      	str	r3, [r2, #0]
}
 80041c2:	bf00      	nop
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80041d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041de:	d101      	bne.n	80041e4 <LL_RCC_PLL_IsReady+0x18>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <LL_RCC_PLL_IsReady+0x1a>
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800420a:	b480      	push	{r7}
 800420c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800420e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004218:	4618      	mov	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004222:	b480      	push	{r7}
 8004224:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800423e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0303 	and.w	r3, r3, #3
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004252:	b480      	push	{r7}
 8004254:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004264:	d101      	bne.n	800426a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800427a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800428a:	d101      	bne.n	8004290 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80042a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b0:	d101      	bne.n	80042b6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80042c2:	b480      	push	{r7}
 80042c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042d4:	d101      	bne.n	80042da <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80042e6:	b480      	push	{r7}
 80042e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80042ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042f8:	d101      	bne.n	80042fe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b08d      	sub	sp, #52	; 0x34
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e37e      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8092 	beq.w	8004450 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800432c:	f7ff fea1 	bl	8004072 <LL_RCC_GetSysClkSource>
 8004330:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004332:	f7ff ff82 	bl	800423a <LL_RCC_PLL_GetMainSource>
 8004336:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <HAL_RCC_OscConfig+0x3e>
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d14c      	bne.n	80043de <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	2b01      	cmp	r3, #1
 8004348:	d149      	bne.n	80043de <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800434a:	f7ff fe2f 	bl	8003fac <LL_RCC_MSI_IsReady>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_OscConfig+0x54>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e35d      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004364:	f7ff fe47 	bl	8003ff6 <LL_RCC_MSI_GetRange>
 8004368:	4603      	mov	r3, r0
 800436a:	429c      	cmp	r4, r3
 800436c:	d914      	bls.n	8004398 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fd14 	bl	8004da0 <RCC_SetFlashLatencyFromMSIRange>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e34c      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fe21 	bl	8003fce <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff fe45 	bl	8004020 <LL_RCC_MSI_SetCalibTrimming>
 8004396:	e013      	b.n	80043c0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fe16 	bl	8003fce <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fe3a 	bl	8004020 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fcf5 	bl	8004da0 <RCC_SetFlashLatencyFromMSIRange>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e32d      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80043c0:	f000 fcda 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 80043c4:	4602      	mov	r2, r0
 80043c6:	4bb3      	ldr	r3, [pc, #716]	; (8004694 <HAL_RCC_OscConfig+0x388>)
 80043c8:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043ca:	4bb3      	ldr	r3, [pc, #716]	; (8004698 <HAL_RCC_OscConfig+0x38c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fc fcaa 	bl	8000d28 <HAL_InitTick>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d039      	beq.n	800444e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e31e      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01e      	beq.n	8004424 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043e6:	f7ff fdc3 	bl	8003f70 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043ea:	f7fc fceb 	bl	8000dc4 <HAL_GetTick>
 80043ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043f2:	f7fc fce7 	bl	8000dc4 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e30b      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004404:	f7ff fdd2 	bl	8003fac <LL_RCC_MSI_IsReady>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f1      	beq.n	80043f2 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fddb 	bl	8003fce <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fdff 	bl	8004020 <LL_RCC_MSI_SetCalibTrimming>
 8004422:	e015      	b.n	8004450 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004424:	f7ff fdb3 	bl	8003f8e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004428:	f7fc fccc 	bl	8000dc4 <HAL_GetTick>
 800442c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004430:	f7fc fcc8 	bl	8000dc4 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e2ec      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004442:	f7ff fdb3 	bl	8003fac <LL_RCC_MSI_IsReady>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f1      	bne.n	8004430 <HAL_RCC_OscConfig+0x124>
 800444c:	e000      	b.n	8004450 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800444e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d04e      	beq.n	80044fa <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445c:	f7ff fe09 	bl	8004072 <LL_RCC_GetSysClkSource>
 8004460:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004462:	f7ff feea 	bl	800423a <LL_RCC_PLL_GetMainSource>
 8004466:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	2b08      	cmp	r3, #8
 800446c:	d005      	beq.n	800447a <HAL_RCC_OscConfig+0x16e>
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	2b0c      	cmp	r3, #12
 8004472:	d10d      	bne.n	8004490 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d10a      	bne.n	8004490 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447a:	f7ff fc19 	bl	8003cb0 <LL_RCC_HSE_IsReady>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d039      	beq.n	80044f8 <HAL_RCC_OscConfig+0x1ec>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d135      	bne.n	80044f8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e2c5      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004498:	d102      	bne.n	80044a0 <HAL_RCC_OscConfig+0x194>
 800449a:	f7ff fbeb 	bl	8003c74 <LL_RCC_HSE_Enable>
 800449e:	e001      	b.n	80044a4 <HAL_RCC_OscConfig+0x198>
 80044a0:	f7ff fbf7 	bl	8003c92 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d012      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fc fc8a 	bl	8000dc4 <HAL_GetTick>
 80044b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b4:	f7fc fc86 	bl	8000dc4 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	; 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e2aa      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80044c6:	f7ff fbf3 	bl	8003cb0 <LL_RCC_HSE_IsReady>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f1      	beq.n	80044b4 <HAL_RCC_OscConfig+0x1a8>
 80044d0:	e013      	b.n	80044fa <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d2:	f7fc fc77 	bl	8000dc4 <HAL_GetTick>
 80044d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044da:	f7fc fc73 	bl	8000dc4 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b64      	cmp	r3, #100	; 0x64
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e297      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80044ec:	f7ff fbe0 	bl	8003cb0 <LL_RCC_HSE_IsReady>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f1      	bne.n	80044da <HAL_RCC_OscConfig+0x1ce>
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d051      	beq.n	80045aa <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004506:	f7ff fdb4 	bl	8004072 <LL_RCC_GetSysClkSource>
 800450a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800450c:	f7ff fe95 	bl	800423a <LL_RCC_PLL_GetMainSource>
 8004510:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b04      	cmp	r3, #4
 8004516:	d005      	beq.n	8004524 <HAL_RCC_OscConfig+0x218>
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2b0c      	cmp	r3, #12
 800451c:	d113      	bne.n	8004546 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d110      	bne.n	8004546 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004524:	f7ff fbf4 	bl	8003d10 <LL_RCC_HSI_IsReady>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_RCC_OscConfig+0x22e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e270      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fbf8 	bl	8003d34 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004544:	e031      	b.n	80045aa <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d019      	beq.n	8004582 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800454e:	f7ff fbc1 	bl	8003cd4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004552:	f7fc fc37 	bl	8000dc4 <HAL_GetTick>
 8004556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455a:	f7fc fc33 	bl	8000dc4 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e257      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 800456c:	f7ff fbd0 	bl	8003d10 <LL_RCC_HSI_IsReady>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f1      	beq.n	800455a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fbda 	bl	8003d34 <LL_RCC_HSI_SetCalibTrimming>
 8004580:	e013      	b.n	80045aa <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004582:	f7ff fbb6 	bl	8003cf2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004586:	f7fc fc1d 	bl	8000dc4 <HAL_GetTick>
 800458a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800458e:	f7fc fc19 	bl	8000dc4 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e23d      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80045a0:	f7ff fbb6 	bl	8003d10 <LL_RCC_HSI_IsReady>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f1      	bne.n	800458e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80a3 	beq.w	800470a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d076      	beq.n	80046ba <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d046      	beq.n	8004666 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80045d8:	f7ff fc6d 	bl	8003eb6 <LL_RCC_LSI1_IsReady>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d113      	bne.n	800460a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80045e2:	f7ff fc46 	bl	8003e72 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045e6:	f7fc fbed 	bl	8000dc4 <HAL_GetTick>
 80045ea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045ee:	f7fc fbe9 	bl	8000dc4 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e20d      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004600:	f7ff fc59 	bl	8003eb6 <LL_RCC_LSI1_IsReady>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f1      	beq.n	80045ee <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800460a:	f7ff fc66 	bl	8003eda <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fc fbd9 	bl	8000dc4 <HAL_GetTick>
 8004612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004616:	f7fc fbd5 	bl	8000dc4 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b03      	cmp	r3, #3
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e1f9      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004628:	f7ff fc79 	bl	8003f1e <LL_RCC_LSI2_IsReady>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f1      	beq.n	8004616 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fc83 	bl	8003f42 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800463c:	f7ff fc2a 	bl	8003e94 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fc fbc0 	bl	8000dc4 <HAL_GetTick>
 8004644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004648:	f7fc fbbc 	bl	8000dc4 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e1e0      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800465a:	f7ff fc2c 	bl	8003eb6 <LL_RCC_LSI1_IsReady>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f1      	bne.n	8004648 <HAL_RCC_OscConfig+0x33c>
 8004664:	e051      	b.n	800470a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004666:	f7ff fc04 	bl	8003e72 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466a:	f7fc fbab 	bl	8000dc4 <HAL_GetTick>
 800466e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004672:	f7fc fba7 	bl	8000dc4 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e1cb      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004684:	f7ff fc17 	bl	8003eb6 <LL_RCC_LSI1_IsReady>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f1      	beq.n	8004672 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800468e:	f7ff fc35 	bl	8003efc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004692:	e00c      	b.n	80046ae <HAL_RCC_OscConfig+0x3a2>
 8004694:	20000004 	.word	0x20000004
 8004698:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800469c:	f7fc fb92 	bl	8000dc4 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e1b6      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80046ae:	f7ff fc36 	bl	8003f1e <LL_RCC_LSI2_IsReady>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f1      	bne.n	800469c <HAL_RCC_OscConfig+0x390>
 80046b8:	e027      	b.n	800470a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80046ba:	f7ff fc1f 	bl	8003efc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046be:	f7fc fb81 	bl	8000dc4 <HAL_GetTick>
 80046c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80046c6:	f7fc fb7d 	bl	8000dc4 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e1a1      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80046d8:	f7ff fc21 	bl	8003f1e <LL_RCC_LSI2_IsReady>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f1      	bne.n	80046c6 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80046e2:	f7ff fbd7 	bl	8003e94 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e6:	f7fc fb6d 	bl	8000dc4 <HAL_GetTick>
 80046ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80046ee:	f7fc fb69 	bl	8000dc4 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e18d      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004700:	f7ff fbd9 	bl	8003eb6 <LL_RCC_LSI1_IsReady>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f1      	bne.n	80046ee <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d05b      	beq.n	80047ce <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004716:	4bb5      	ldr	r3, [pc, #724]	; (80049ec <HAL_RCC_OscConfig+0x6e0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471e:	2b00      	cmp	r3, #0
 8004720:	d114      	bne.n	800474c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004722:	f7ff fa67 	bl	8003bf4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004726:	f7fc fb4d 	bl	8000dc4 <HAL_GetTick>
 800472a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472e:	f7fc fb49 	bl	8000dc4 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e16d      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004740:	4baa      	ldr	r3, [pc, #680]	; (80049ec <HAL_RCC_OscConfig+0x6e0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d102      	bne.n	800475a <HAL_RCC_OscConfig+0x44e>
 8004754:	f7ff fb37 	bl	8003dc6 <LL_RCC_LSE_Enable>
 8004758:	e00c      	b.n	8004774 <HAL_RCC_OscConfig+0x468>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2b05      	cmp	r3, #5
 8004760:	d104      	bne.n	800476c <HAL_RCC_OscConfig+0x460>
 8004762:	f7ff fb52 	bl	8003e0a <LL_RCC_LSE_EnableBypass>
 8004766:	f7ff fb2e 	bl	8003dc6 <LL_RCC_LSE_Enable>
 800476a:	e003      	b.n	8004774 <HAL_RCC_OscConfig+0x468>
 800476c:	f7ff fb3c 	bl	8003de8 <LL_RCC_LSE_Disable>
 8004770:	f7ff fb5c 	bl	8003e2c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d014      	beq.n	80047a6 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fc fb22 	bl	8000dc4 <HAL_GetTick>
 8004780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004782:	e00a      	b.n	800479a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004784:	f7fc fb1e 	bl	8000dc4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e140      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800479a:	f7ff fb58 	bl	8003e4e <LL_RCC_LSE_IsReady>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0ef      	beq.n	8004784 <HAL_RCC_OscConfig+0x478>
 80047a4:	e013      	b.n	80047ce <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a6:	f7fc fb0d 	bl	8000dc4 <HAL_GetTick>
 80047aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80047ac:	e00a      	b.n	80047c4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ae:	f7fc fb09 	bl	8000dc4 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047bc:	4293      	cmp	r3, r2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e12b      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80047c4:	f7ff fb43 	bl	8003e4e <LL_RCC_LSE_IsReady>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1ef      	bne.n	80047ae <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d02c      	beq.n	8004834 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d014      	beq.n	800480c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047e2:	f7ff fabc 	bl	8003d5e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e6:	f7fc faed 	bl	8000dc4 <HAL_GetTick>
 80047ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047ee:	f7fc fae9 	bl	8000dc4 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e10d      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004800:	f7ff facf 	bl	8003da2 <LL_RCC_HSI48_IsReady>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f1      	beq.n	80047ee <HAL_RCC_OscConfig+0x4e2>
 800480a:	e013      	b.n	8004834 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800480c:	f7ff fab8 	bl	8003d80 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004810:	f7fc fad8 	bl	8000dc4 <HAL_GetTick>
 8004814:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004818:	f7fc fad4 	bl	8000dc4 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e0f8      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800482a:	f7ff faba 	bl	8003da2 <LL_RCC_HSI48_IsReady>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f1      	bne.n	8004818 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80ee 	beq.w	8004a1a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800483e:	f7ff fc18 	bl	8004072 <LL_RCC_GetSysClkSource>
 8004842:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	2b02      	cmp	r3, #2
 8004852:	f040 80af 	bne.w	80049b4 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f003 0203 	and.w	r2, r3, #3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	429a      	cmp	r2, r3
 8004862:	d123      	bne.n	80048ac <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d11c      	bne.n	80048ac <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	0a1b      	lsrs	r3, r3, #8
 8004876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d114      	bne.n	80048ac <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d10d      	bne.n	80048ac <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800489a:	429a      	cmp	r2, r3
 800489c:	d106      	bne.n	80048ac <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d05d      	beq.n	8004968 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b0c      	cmp	r3, #12
 80048b0:	d058      	beq.n	8004964 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0ab      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048c4:	f7ff fc73 	bl	80041ae <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048c8:	f7fc fa7c 	bl	8000dc4 <HAL_GetTick>
 80048cc:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fc fa78 	bl	8000dc4 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e09c      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1ef      	bne.n	80048d0 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	4b3e      	ldr	r3, [pc, #248]	; (80049f0 <HAL_RCC_OscConfig+0x6e4>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004902:	4311      	orrs	r1, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004908:	0212      	lsls	r2, r2, #8
 800490a:	4311      	orrs	r1, r2
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004910:	4311      	orrs	r1, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004916:	4311      	orrs	r1, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800491c:	430a      	orrs	r2, r1
 800491e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004922:	4313      	orrs	r3, r2
 8004924:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004926:	f7ff fc33 	bl	8004190 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800492a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004938:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800493a:	f7fc fa43 	bl	8000dc4 <HAL_GetTick>
 800493e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004942:	f7fc fa3f 	bl	8000dc4 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e063      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0ef      	beq.n	8004942 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004962:	e05a      	b.n	8004a1a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e059      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d151      	bne.n	8004a1a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004976:	f7ff fc0b 	bl	8004190 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004988:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800498a:	f7fc fa1b 	bl	8000dc4 <HAL_GetTick>
 800498e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004992:	f7fc fa17 	bl	8000dc4 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e03b      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0ef      	beq.n	8004992 <HAL_RCC_OscConfig+0x686>
 80049b2:	e032      	b.n	8004a1a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b0c      	cmp	r3, #12
 80049b8:	d02d      	beq.n	8004a16 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ba:	f7ff fbf8 	bl	80041ae <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80049be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049c8:	f023 0303 	bic.w	r3, r3, #3
 80049cc:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80049ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049d8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80049dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e2:	f7fc f9ef 	bl	8000dc4 <HAL_GetTick>
 80049e6:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e8:	e00d      	b.n	8004a06 <HAL_RCC_OscConfig+0x6fa>
 80049ea:	bf00      	nop
 80049ec:	58000400 	.word	0x58000400
 80049f0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f4:	f7fc f9e6 	bl	8000dc4 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e00a      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1ef      	bne.n	80049f4 <HAL_RCC_OscConfig+0x6e8>
 8004a14:	e001      	b.n	8004a1a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3734      	adds	r7, #52	; 0x34
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd90      	pop	{r4, r7, pc}

08004a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e12d      	b.n	8004c94 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a38:	4b98      	ldr	r3, [pc, #608]	; (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d91b      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a46:	4b95      	ldr	r3, [pc, #596]	; (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 0207 	bic.w	r2, r3, #7
 8004a4e:	4993      	ldr	r1, [pc, #588]	; (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a56:	f7fc f9b5 	bl	8000dc4 <HAL_GetTick>
 8004a5a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a5e:	f7fc f9b1 	bl	8000dc4 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e111      	b.n	8004c94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a70:	4b8a      	ldr	r3, [pc, #552]	; (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d1ef      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d016      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff fafb 	bl	800408a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a94:	f7fc f996 	bl	8000dc4 <HAL_GetTick>
 8004a98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a9c:	f7fc f992 	bl	8000dc4 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e0f2      	b.n	8004c94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004aae:	f7ff fbd0 	bl	8004252 <LL_RCC_IsActiveFlag_HPRE>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f1      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d016      	beq.n	8004af2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff faf2 	bl	80040b2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ace:	f7fc f979 	bl	8000dc4 <HAL_GetTick>
 8004ad2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ad6:	f7fc f975 	bl	8000dc4 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e0d5      	b.n	8004c94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004ae8:	f7ff fbc5 	bl	8004276 <LL_RCC_IsActiveFlag_C2HPRE>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f1      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d016      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff faeb 	bl	80040de <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b08:	f7fc f95c 	bl	8000dc4 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b10:	f7fc f958 	bl	8000dc4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e0b8      	b.n	8004c94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b22:	f7ff fbbb 	bl	800429c <LL_RCC_IsActiveFlag_SHDHPRE>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f1      	beq.n	8004b10 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d016      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fae5 	bl	800410c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b42:	f7fc f93f 	bl	8000dc4 <HAL_GetTick>
 8004b46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b4a:	f7fc f93b 	bl	8000dc4 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e09b      	b.n	8004c94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004b5c:	f7ff fbb1 	bl	80042c2 <LL_RCC_IsActiveFlag_PPRE1>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f1      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d017      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff fadb 	bl	8004134 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b7e:	f7fc f921 	bl	8000dc4 <HAL_GetTick>
 8004b82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b86:	f7fc f91d 	bl	8000dc4 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e07d      	b.n	8004c94 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004b98:	f7ff fba5 	bl	80042e6 <LL_RCC_IsActiveFlag_PPRE2>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f1      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d043      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d106      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004bb6:	f7ff f87b 	bl	8003cb0 <LL_RCC_HSE_IsReady>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d11e      	bne.n	8004bfe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e067      	b.n	8004c94 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d106      	bne.n	8004bda <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004bcc:	f7ff fafe 	bl	80041cc <LL_RCC_PLL_IsReady>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d113      	bne.n	8004bfe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e05c      	b.n	8004c94 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004be2:	f7ff f9e3 	bl	8003fac <LL_RCC_MSI_IsReady>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d108      	bne.n	8004bfe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e051      	b.n	8004c94 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004bf0:	f7ff f88e 	bl	8003d10 <LL_RCC_HSI_IsReady>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e04a      	b.n	8004c94 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff fa21 	bl	800404a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c08:	f7fc f8dc 	bl	8000dc4 <HAL_GetTick>
 8004c0c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0e:	e00a      	b.n	8004c26 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c10:	f7fc f8d8 	bl	8000dc4 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e036      	b.n	8004c94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c26:	f7ff fa24 	bl	8004072 <LL_RCC_GetSysClkSource>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d1ec      	bne.n	8004c10 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c36:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d21b      	bcs.n	8004c7c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c44:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f023 0207 	bic.w	r2, r3, #7
 8004c4c:	4913      	ldr	r1, [pc, #76]	; (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c54:	f7fc f8b6 	bl	8000dc4 <HAL_GetTick>
 8004c58:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c5c:	f7fc f8b2 	bl	8000dc4 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e012      	b.n	8004c94 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCC_ClockConfig+0x278>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d1ef      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c7c:	f000 f87c 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004c80:	4602      	mov	r2, r0
 8004c82:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <HAL_RCC_ClockConfig+0x27c>)
 8004c84:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004c86:	f7fc f8a9 	bl	8000ddc <HAL_GetTickPrio>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fc f84b 	bl	8000d28 <HAL_InitTick>
 8004c92:	4603      	mov	r3, r0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	58004000 	.word	0x58004000
 8004ca0:	20000004 	.word	0x20000004

08004ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca4:	b590      	push	{r4, r7, lr}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004caa:	f7ff f9e2 	bl	8004072 <LL_RCC_GetSysClkSource>
 8004cae:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004cb6:	f7ff f99e 	bl	8003ff6 <LL_RCC_MSI_GetRange>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	e04a      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d102      	bne.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cd2:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e044      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d10a      	bne.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004cde:	f7fe ffb7 	bl	8003c50 <LL_RCC_HSE_IsEnabledDiv2>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d102      	bne.n	8004cee <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004ce8:	4b21      	ldr	r3, [pc, #132]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e039      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004cee:	4b21      	ldr	r3, [pc, #132]	; (8004d74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e036      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004cf4:	f7ff faa1 	bl	800423a <LL_RCC_PLL_GetMainSource>
 8004cf8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d002      	beq.n	8004d06 <HAL_RCC_GetSysClockFreq+0x62>
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d003      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x68>
 8004d04:	e00d      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004d06:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d08:	60bb      	str	r3, [r7, #8]
        break;
 8004d0a:	e015      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d0c:	f7fe ffa0 	bl	8003c50 <LL_RCC_HSE_IsEnabledDiv2>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d102      	bne.n	8004d1c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004d16:	4b16      	ldr	r3, [pc, #88]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d18:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004d1a:	e00d      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8004d1c:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d1e:	60bb      	str	r3, [r7, #8]
        break;
 8004d20:	e00a      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004d22:	f7ff f968 	bl	8003ff6 <LL_RCC_MSI_GetRange>
 8004d26:	4603      	mov	r3, r0
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	4a0f      	ldr	r2, [pc, #60]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d34:	60bb      	str	r3, [r7, #8]
        break;
 8004d36:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004d38:	f7ff fa5a 	bl	80041f0 <LL_RCC_PLL_GetN>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	fb03 f402 	mul.w	r4, r3, r2
 8004d44:	f7ff fa6d 	bl	8004222 <LL_RCC_PLL_GetDivider>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	091b      	lsrs	r3, r3, #4
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	fbb4 f4f3 	udiv	r4, r4, r3
 8004d52:	f7ff fa5a 	bl	800420a <LL_RCC_PLL_GetR>
 8004d56:	4603      	mov	r3, r0
 8004d58:	0f5b      	lsrs	r3, r3, #29
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	fbb4 f3f3 	udiv	r3, r4, r3
 8004d60:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004d62:	68fb      	ldr	r3, [r7, #12]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd90      	pop	{r4, r7, pc}
 8004d6c:	0800a15c 	.word	0x0800a15c
 8004d70:	00f42400 	.word	0x00f42400
 8004d74:	01e84800 	.word	0x01e84800

08004d78 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d78:	b598      	push	{r3, r4, r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004d7c:	f7ff ff92 	bl	8004ca4 <HAL_RCC_GetSysClockFreq>
 8004d80:	4604      	mov	r4, r0
 8004d82:	f7ff f9eb 	bl	800415c <LL_RCC_GetAHBPrescaler>
 8004d86:	4603      	mov	r3, r0
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	4a03      	ldr	r2, [pc, #12]	; (8004d9c <HAL_RCC_GetHCLKFreq+0x24>)
 8004d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d94:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	bd98      	pop	{r3, r4, r7, pc}
 8004d9c:	0800a11c 	.word	0x0800a11c

08004da0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004da0:	b590      	push	{r4, r7, lr}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2bb0      	cmp	r3, #176	; 0xb0
 8004dac:	d903      	bls.n	8004db6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004dae:	4b15      	ldr	r3, [pc, #84]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e007      	b.n	8004dc6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004dc6:	f7ff f9d5 	bl	8004174 <LL_RCC_GetAHB4Prescaler>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	4a0d      	ldr	r2, [pc, #52]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dde:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	0c9c      	lsrs	r4, r3, #18
 8004dea:	f7fe ff13 	bl	8003c14 <HAL_PWREx_GetVoltageRange>
 8004dee:	4603      	mov	r3, r0
 8004df0:	4619      	mov	r1, r3
 8004df2:	4620      	mov	r0, r4
 8004df4:	f000 f80c 	bl	8004e10 <RCC_SetFlashLatency>
 8004df8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd90      	pop	{r4, r7, pc}
 8004e02:	bf00      	nop
 8004e04:	0800a15c 	.word	0x0800a15c
 8004e08:	0800a11c 	.word	0x0800a11c
 8004e0c:	431bde83 	.word	0x431bde83

08004e10 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b093      	sub	sp, #76	; 0x4c
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004e1a:	4b39      	ldr	r3, [pc, #228]	; (8004f00 <RCC_SetFlashLatency+0xf0>)
 8004e1c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004e20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004e26:	4a37      	ldr	r2, [pc, #220]	; (8004f04 <RCC_SetFlashLatency+0xf4>)
 8004e28:	f107 031c 	add.w	r3, r7, #28
 8004e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004e32:	4b35      	ldr	r3, [pc, #212]	; (8004f08 <RCC_SetFlashLatency+0xf8>)
 8004e34:	f107 040c 	add.w	r4, r7, #12
 8004e38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004e3e:	2300      	movs	r3, #0
 8004e40:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e48:	d11c      	bne.n	8004e84 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e4e:	e015      	b.n	8004e7c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e58:	4413      	add	r3, r2
 8004e5a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d808      	bhi.n	8004e76 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004e72:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004e74:	e022      	b.n	8004ebc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e78:	3301      	adds	r3, #1
 8004e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d9e6      	bls.n	8004e50 <RCC_SetFlashLatency+0x40>
 8004e82:	e01b      	b.n	8004ebc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e84:	2300      	movs	r3, #0
 8004e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e88:	e015      	b.n	8004eb6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e92:	4413      	add	r3, r2
 8004e94:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d808      	bhi.n	8004eb0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004eac:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004eae:	e005      	b.n	8004ebc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d9e6      	bls.n	8004e8a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004ebc:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <RCC_SetFlashLatency+0xfc>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f023 0207 	bic.w	r2, r3, #7
 8004ec4:	4911      	ldr	r1, [pc, #68]	; (8004f0c <RCC_SetFlashLatency+0xfc>)
 8004ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ecc:	f7fb ff7a 	bl	8000dc4 <HAL_GetTick>
 8004ed0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004ed2:	e008      	b.n	8004ee6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ed4:	f7fb ff76 	bl	8000dc4 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e007      	b.n	8004ef6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <RCC_SetFlashLatency+0xfc>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d1ef      	bne.n	8004ed4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	374c      	adds	r7, #76	; 0x4c
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd90      	pop	{r4, r7, pc}
 8004efe:	bf00      	nop
 8004f00:	0800a0c0 	.word	0x0800a0c0
 8004f04:	0800a0d0 	.word	0x0800a0d0
 8004f08:	0800a0dc 	.word	0x0800a0dc
 8004f0c:	58004000 	.word	0x58004000

08004f10 <LL_RCC_LSE_IsEnabled>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <LL_RCC_LSE_IsEnabled+0x18>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <LL_RCC_LSE_IsEnabled+0x1a>
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <LL_RCC_LSE_IsReady>:
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d101      	bne.n	8004f4c <LL_RCC_LSE_IsReady+0x18>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e000      	b.n	8004f4e <LL_RCC_LSE_IsReady+0x1a>
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <LL_RCC_SetRFWKPClockSource>:
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <LL_RCC_SetSMPSClockSource>:
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	f023 0203 	bic.w	r2, r3, #3
 8004f96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <LL_RCC_SetSMPSPrescaler>:
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <LL_RCC_SetUSARTClockSource>:
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe4:	f023 0203 	bic.w	r2, r3, #3
 8004fe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <LL_RCC_SetLPUARTClockSource>:
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <LL_RCC_SetI2CClockSource>:
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005038:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	091b      	lsrs	r3, r3, #4
 8005040:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005044:	43db      	mvns	r3, r3
 8005046:	401a      	ands	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <LL_RCC_SetLPTIMClockSource>:
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800506e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005072:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	0c1b      	lsrs	r3, r3, #16
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	43db      	mvns	r3, r3
 800507e:	401a      	ands	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	041b      	lsls	r3, r3, #16
 8005084:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <LL_RCC_SetSAIClockSource>:
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80050a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <LL_RCC_SetRNGClockSource>:
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80050ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80050da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <LL_RCC_SetCLK48ClockSource>:
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80050fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <LL_RCC_SetUSBClockSource>:
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff ffe3 	bl	80050f2 <LL_RCC_SetCLK48ClockSource>
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <LL_RCC_SetADCClockSource>:
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800513c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005144:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005148:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <LL_RCC_SetRTCClockSource>:
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <LL_RCC_GetRTCClockSource>:
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005198:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800519c:	4618      	mov	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <LL_RCC_ForceBackupDomainReset>:
{
 80051a6:	b480      	push	{r7}
 80051a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80051aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051be:	bf00      	nop
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80051cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051e0:	bf00      	nop
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <LL_RCC_PLLSAI1_Enable>:
{
 80051ea:	b480      	push	{r7}
 80051ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80051ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051fc:	6013      	str	r3, [r2, #0]
}
 80051fe:	bf00      	nop
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <LL_RCC_PLLSAI1_Disable>:
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800520c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005216:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800521a:	6013      	str	r3, [r2, #0]
}
 800521c:	bf00      	nop
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <LL_RCC_PLLSAI1_IsReady>:
{
 8005226:	b480      	push	{r7}
 8005228:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800522a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005238:	d101      	bne.n	800523e <LL_RCC_PLLSAI1_IsReady+0x18>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b088      	sub	sp, #32
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005252:	2300      	movs	r3, #0
 8005254:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005256:	2300      	movs	r3, #0
 8005258:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d033      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800526e:	d00c      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005274:	d802      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d010      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x52>
 800527a:	e017      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x62>
 800527c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005280:	d017      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005282:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005286:	d016      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005288:	e010      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800528a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005298:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800529a:	e00d      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 f947 	bl	8005534 <RCCEx_PLLSAI1_ConfigNP>
 80052a6:	4603      	mov	r3, r0
 80052a8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052aa:	e005      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	77fb      	strb	r3, [r7, #31]
        break;
 80052b0:	e002      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80052b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b8:	7ffb      	ldrb	r3, [r7, #31]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d105      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff fee9 	bl	800509a <LL_RCC_SetSAIClockSource>
 80052c8:	e001      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ca:	7ffb      	ldrb	r3, [r7, #31]
 80052cc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d046      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80052da:	f7ff ff57 	bl	800518c <LL_RCC_GetRTCClockSource>
 80052de:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d03c      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80052ea:	f7fe fc83 	bl	8003bf4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d105      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff ff31 	bl	8005160 <LL_RCC_SetRTCClockSource>
 80052fe:	e02e      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005308:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800530a:	f7ff ff4c 	bl	80051a6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800530e:	f7ff ff5b 	bl	80051c8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800532a:	f7ff fdf1 	bl	8004f10 <LL_RCC_LSE_IsEnabled>
 800532e:	4603      	mov	r3, r0
 8005330:	2b01      	cmp	r3, #1
 8005332:	d114      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005334:	f7fb fd46 	bl	8000dc4 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800533a:	e00b      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533c:	f7fb fd42 	bl	8000dc4 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	f241 3288 	movw	r2, #5000	; 0x1388
 800534a:	4293      	cmp	r3, r2
 800534c:	d902      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	77fb      	strb	r3, [r7, #31]
              break;
 8005352:	e004      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005354:	f7ff fdee 	bl	8004f34 <LL_RCC_LSE_IsReady>
 8005358:	4603      	mov	r3, r0
 800535a:	2b01      	cmp	r3, #1
 800535c:	d1ee      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800535e:	7ffb      	ldrb	r3, [r7, #31]
 8005360:	77bb      	strb	r3, [r7, #30]
 8005362:	e001      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005364:	7ffb      	ldrb	r3, [r7, #31]
 8005366:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d004      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fe2b 	bl	8004fd4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fe36 	bl	8005000 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b00      	cmp	r3, #0
 800539e:	d004      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff fe5e 	bl	8005066 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff fe53 	bl	8005066 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fe2b 	bl	800502c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff fe20 	bl	800502c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d022      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff fe8e 	bl	800511e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800540a:	d107      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800540c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800541a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005420:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005424:	d10b      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f8dd 	bl	80055ea <RCCEx_PLLSAI1_ConfigNQ>
 8005430:	4603      	mov	r3, r0
 8005432:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005434:	7ffb      	ldrb	r3, [r7, #31]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800543a:	7ffb      	ldrb	r3, [r7, #31]
 800543c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005446:	2b00      	cmp	r3, #0
 8005448:	d02b      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005452:	d008      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800545c:	d003      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	2b00      	cmp	r3, #0
 8005464:	d105      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff fe2b 	bl	80050c6 <LL_RCC_SetRNGClockSource>
 8005470:	e00a      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	2000      	movs	r0, #0
 800547e:	f7ff fe22 	bl	80050c6 <LL_RCC_SetRNGClockSource>
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7ff fe35 	bl	80050f2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005490:	d107      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800549c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054a0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d022      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fe3e 	bl	8005134 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c0:	d107      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054da:	d10b      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 f8dd 	bl	80056a0 <RCCEx_PLLSAI1_ConfigNR>
 80054e6:	4603      	mov	r3, r0
 80054e8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80054ea:	7ffb      	ldrb	r3, [r7, #31]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80054f0:	7ffb      	ldrb	r3, [r7, #31]
 80054f2:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff fd27 	bl	8004f58 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fd46 	bl	8004fac <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fd2d 	bl	8004f84 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800552a:	7fbb      	ldrb	r3, [r7, #30]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005540:	f7ff fe62 	bl	8005208 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005544:	f7fb fc3e 	bl	8000dc4 <HAL_GetTick>
 8005548:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800554a:	e009      	b.n	8005560 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800554c:	f7fb fc3a 	bl	8000dc4 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d902      	bls.n	8005560 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	73fb      	strb	r3, [r7, #15]
      break;
 800555e:	e004      	b.n	800556a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005560:	f7ff fe61 	bl	8005226 <LL_RCC_PLLSAI1_IsReady>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f0      	bne.n	800554c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d137      	bne.n	80055e0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005584:	4313      	orrs	r3, r2
 8005586:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800559a:	4313      	orrs	r3, r2
 800559c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800559e:	f7ff fe24 	bl	80051ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a2:	f7fb fc0f 	bl	8000dc4 <HAL_GetTick>
 80055a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055a8:	e009      	b.n	80055be <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055aa:	f7fb fc0b 	bl	8000dc4 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d902      	bls.n	80055be <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	73fb      	strb	r3, [r7, #15]
        break;
 80055bc:	e004      	b.n	80055c8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055be:	f7ff fe32 	bl	8005226 <LL_RCC_PLLSAI1_IsReady>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d1f0      	bne.n	80055aa <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d108      	bne.n	80055e0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80055ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055dc:	4313      	orrs	r3, r2
 80055de:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80055f6:	f7ff fe07 	bl	8005208 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055fa:	f7fb fbe3 	bl	8000dc4 <HAL_GetTick>
 80055fe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005600:	e009      	b.n	8005616 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005602:	f7fb fbdf 	bl	8000dc4 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d902      	bls.n	8005616 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	73fb      	strb	r3, [r7, #15]
      break;
 8005614:	e004      	b.n	8005620 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005616:	f7ff fe06 	bl	8005226 <LL_RCC_PLLSAI1_IsReady>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f0      	bne.n	8005602 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d137      	bne.n	8005696 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800563a:	4313      	orrs	r3, r2
 800563c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800563e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005650:	4313      	orrs	r3, r2
 8005652:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005654:	f7ff fdc9 	bl	80051ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005658:	f7fb fbb4 	bl	8000dc4 <HAL_GetTick>
 800565c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800565e:	e009      	b.n	8005674 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005660:	f7fb fbb0 	bl	8000dc4 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d902      	bls.n	8005674 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	73fb      	strb	r3, [r7, #15]
        break;
 8005672:	e004      	b.n	800567e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005674:	f7ff fdd7 	bl	8005226 <LL_RCC_PLLSAI1_IsReady>
 8005678:	4603      	mov	r3, r0
 800567a:	2b01      	cmp	r3, #1
 800567c:	d1f0      	bne.n	8005660 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d108      	bne.n	8005696 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005692:	4313      	orrs	r3, r2
 8005694:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005696:	7bfb      	ldrb	r3, [r7, #15]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80056ac:	f7ff fdac 	bl	8005208 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056b0:	f7fb fb88 	bl	8000dc4 <HAL_GetTick>
 80056b4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056b6:	e009      	b.n	80056cc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056b8:	f7fb fb84 	bl	8000dc4 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d902      	bls.n	80056cc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	73fb      	strb	r3, [r7, #15]
      break;
 80056ca:	e004      	b.n	80056d6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056cc:	f7ff fdab 	bl	8005226 <LL_RCC_PLLSAI1_IsReady>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d137      	bne.n	800574c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80056dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056f0:	4313      	orrs	r3, r2
 80056f2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80056f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005706:	4313      	orrs	r3, r2
 8005708:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800570a:	f7ff fd6e 	bl	80051ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800570e:	f7fb fb59 	bl	8000dc4 <HAL_GetTick>
 8005712:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005714:	e009      	b.n	800572a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005716:	f7fb fb55 	bl	8000dc4 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d902      	bls.n	800572a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	73fb      	strb	r3, [r7, #15]
        break;
 8005728:	e004      	b.n	8005734 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800572a:	f7ff fd7c 	bl	8005226 <LL_RCC_PLLSAI1_IsReady>
 800572e:	4603      	mov	r3, r0
 8005730:	2b01      	cmp	r3, #1
 8005732:	d1f0      	bne.n	8005716 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d108      	bne.n	800574c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800573a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005748:	4313      	orrs	r3, r2
 800574a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e049      	b.n	80057fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d106      	bne.n	8005782 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7fb fa31 	bl	8000be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2202      	movs	r2, #2
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3304      	adds	r3, #4
 8005792:	4619      	mov	r1, r3
 8005794:	4610      	mov	r0, r2
 8005796:	f000 fbcf 	bl	8005f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d001      	beq.n	800581c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e02e      	b.n	800587a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a17      	ldr	r2, [pc, #92]	; (8005888 <HAL_TIM_Base_Start+0x84>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_TIM_Base_Start+0x34>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005836:	d115      	bne.n	8005864 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	4b13      	ldr	r3, [pc, #76]	; (800588c <HAL_TIM_Base_Start+0x88>)
 8005840:	4013      	ands	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b06      	cmp	r3, #6
 8005848:	d015      	beq.n	8005876 <HAL_TIM_Base_Start+0x72>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005850:	d011      	beq.n	8005876 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0201 	orr.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005862:	e008      	b.n	8005876 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e000      	b.n	8005878 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005876:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40012c00 	.word	0x40012c00
 800588c:	00010007 	.word	0x00010007

08005890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d001      	beq.n	80058a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e036      	b.n	8005916 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a17      	ldr	r2, [pc, #92]	; (8005924 <HAL_TIM_Base_Start_IT+0x94>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d004      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x44>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d2:	d115      	bne.n	8005900 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	4b13      	ldr	r3, [pc, #76]	; (8005928 <HAL_TIM_Base_Start_IT+0x98>)
 80058dc:	4013      	ands	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b06      	cmp	r3, #6
 80058e4:	d015      	beq.n	8005912 <HAL_TIM_Base_Start_IT+0x82>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ec:	d011      	beq.n	8005912 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0201 	orr.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fe:	e008      	b.n	8005912 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	e000      	b.n	8005914 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005912:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40012c00 	.word	0x40012c00
 8005928:	00010007 	.word	0x00010007

0800592c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e049      	b.n	80059d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f841 	bl	80059da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f000 fae4 	bl	8005f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <HAL_TIM_PWM_Start+0x24>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	bf14      	ite	ne
 8005a0c:	2301      	movne	r3, #1
 8005a0e:	2300      	moveq	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	e03c      	b.n	8005a8e <HAL_TIM_PWM_Start+0x9e>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d109      	bne.n	8005a2e <HAL_TIM_PWM_Start+0x3e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	bf14      	ite	ne
 8005a26:	2301      	movne	r3, #1
 8005a28:	2300      	moveq	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	e02f      	b.n	8005a8e <HAL_TIM_PWM_Start+0x9e>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d109      	bne.n	8005a48 <HAL_TIM_PWM_Start+0x58>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	bf14      	ite	ne
 8005a40:	2301      	movne	r3, #1
 8005a42:	2300      	moveq	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	e022      	b.n	8005a8e <HAL_TIM_PWM_Start+0x9e>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b0c      	cmp	r3, #12
 8005a4c:	d109      	bne.n	8005a62 <HAL_TIM_PWM_Start+0x72>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	bf14      	ite	ne
 8005a5a:	2301      	movne	r3, #1
 8005a5c:	2300      	moveq	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	e015      	b.n	8005a8e <HAL_TIM_PWM_Start+0x9e>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d109      	bne.n	8005a7c <HAL_TIM_PWM_Start+0x8c>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	bf14      	ite	ne
 8005a74:	2301      	movne	r3, #1
 8005a76:	2300      	moveq	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	e008      	b.n	8005a8e <HAL_TIM_PWM_Start+0x9e>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	bf14      	ite	ne
 8005a88:	2301      	movne	r3, #1
 8005a8a:	2300      	moveq	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e079      	b.n	8005b8a <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0xb6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa4:	e023      	b.n	8005aee <HAL_TIM_PWM_Start+0xfe>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0xc6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab4:	e01b      	b.n	8005aee <HAL_TIM_PWM_Start+0xfe>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d104      	bne.n	8005ac6 <HAL_TIM_PWM_Start+0xd6>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ac4:	e013      	b.n	8005aee <HAL_TIM_PWM_Start+0xfe>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b0c      	cmp	r3, #12
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0xe6>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ad4:	e00b      	b.n	8005aee <HAL_TIM_PWM_Start+0xfe>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_PWM_Start+0xf6>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae4:	e003      	b.n	8005aee <HAL_TIM_PWM_Start+0xfe>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2201      	movs	r2, #1
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fd9c 	bl	8006634 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a24      	ldr	r2, [pc, #144]	; (8005b94 <HAL_TIM_PWM_Start+0x1a4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d009      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x12a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a23      	ldr	r2, [pc, #140]	; (8005b98 <HAL_TIM_PWM_Start+0x1a8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d004      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x12a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a21      	ldr	r2, [pc, #132]	; (8005b9c <HAL_TIM_PWM_Start+0x1ac>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d101      	bne.n	8005b1e <HAL_TIM_PWM_Start+0x12e>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <HAL_TIM_PWM_Start+0x130>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d007      	beq.n	8005b34 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <HAL_TIM_PWM_Start+0x1a4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <HAL_TIM_PWM_Start+0x158>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b46:	d115      	bne.n	8005b74 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <HAL_TIM_PWM_Start+0x1b0>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b06      	cmp	r3, #6
 8005b58:	d015      	beq.n	8005b86 <HAL_TIM_PWM_Start+0x196>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b60:	d011      	beq.n	8005b86 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0201 	orr.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b72:	e008      	b.n	8005b86 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e000      	b.n	8005b88 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40012c00 	.word	0x40012c00
 8005b98:	40014400 	.word	0x40014400
 8005b9c:	40014800 	.word	0x40014800
 8005ba0:	00010007 	.word	0x00010007

08005ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e0fd      	b.n	8005dba <HAL_TIM_PWM_ConfigChannel+0x216>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b14      	cmp	r3, #20
 8005bca:	f200 80f0 	bhi.w	8005dae <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005c29 	.word	0x08005c29
 8005bd8:	08005daf 	.word	0x08005daf
 8005bdc:	08005daf 	.word	0x08005daf
 8005be0:	08005daf 	.word	0x08005daf
 8005be4:	08005c69 	.word	0x08005c69
 8005be8:	08005daf 	.word	0x08005daf
 8005bec:	08005daf 	.word	0x08005daf
 8005bf0:	08005daf 	.word	0x08005daf
 8005bf4:	08005cab 	.word	0x08005cab
 8005bf8:	08005daf 	.word	0x08005daf
 8005bfc:	08005daf 	.word	0x08005daf
 8005c00:	08005daf 	.word	0x08005daf
 8005c04:	08005ceb 	.word	0x08005ceb
 8005c08:	08005daf 	.word	0x08005daf
 8005c0c:	08005daf 	.word	0x08005daf
 8005c10:	08005daf 	.word	0x08005daf
 8005c14:	08005d2d 	.word	0x08005d2d
 8005c18:	08005daf 	.word	0x08005daf
 8005c1c:	08005daf 	.word	0x08005daf
 8005c20:	08005daf 	.word	0x08005daf
 8005c24:	08005d6d 	.word	0x08005d6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 f9e6 	bl	8006000 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0208 	orr.w	r2, r2, #8
 8005c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0204 	bic.w	r2, r2, #4
 8005c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6999      	ldr	r1, [r3, #24]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	619a      	str	r2, [r3, #24]
      break;
 8005c66:	e0a3      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fa42 	bl	80060f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699a      	ldr	r2, [r3, #24]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6999      	ldr	r1, [r3, #24]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	021a      	lsls	r2, r3, #8
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	619a      	str	r2, [r3, #24]
      break;
 8005ca8:	e082      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fa9b 	bl	80061ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69da      	ldr	r2, [r3, #28]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0208 	orr.w	r2, r2, #8
 8005cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0204 	bic.w	r2, r2, #4
 8005cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69d9      	ldr	r1, [r3, #28]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	61da      	str	r2, [r3, #28]
      break;
 8005ce8:	e062      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 faf3 	bl	80062dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69da      	ldr	r2, [r3, #28]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69d9      	ldr	r1, [r3, #28]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	021a      	lsls	r2, r3, #8
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	61da      	str	r2, [r3, #28]
      break;
 8005d2a:	e041      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fb30 	bl	8006398 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0208 	orr.w	r2, r2, #8
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0204 	bic.w	r2, r2, #4
 8005d56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	691a      	ldr	r2, [r3, #16]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d6a:	e021      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fb68 	bl	8006448 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	021a      	lsls	r2, r3, #8
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dac:	e000      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005dae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop

08005dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_TIM_ConfigClockSource+0x18>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e0a8      	b.n	8005f2e <HAL_TIM_ConfigClockSource+0x16a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005dfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b40      	cmp	r3, #64	; 0x40
 8005e16:	d067      	beq.n	8005ee8 <HAL_TIM_ConfigClockSource+0x124>
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	d80b      	bhi.n	8005e34 <HAL_TIM_ConfigClockSource+0x70>
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	d073      	beq.n	8005f08 <HAL_TIM_ConfigClockSource+0x144>
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d802      	bhi.n	8005e2a <HAL_TIM_ConfigClockSource+0x66>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d06f      	beq.n	8005f08 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005e28:	e078      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005e2a:	2b20      	cmp	r3, #32
 8005e2c:	d06c      	beq.n	8005f08 <HAL_TIM_ConfigClockSource+0x144>
 8005e2e:	2b30      	cmp	r3, #48	; 0x30
 8005e30:	d06a      	beq.n	8005f08 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005e32:	e073      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005e34:	2b70      	cmp	r3, #112	; 0x70
 8005e36:	d00d      	beq.n	8005e54 <HAL_TIM_ConfigClockSource+0x90>
 8005e38:	2b70      	cmp	r3, #112	; 0x70
 8005e3a:	d804      	bhi.n	8005e46 <HAL_TIM_ConfigClockSource+0x82>
 8005e3c:	2b50      	cmp	r3, #80	; 0x50
 8005e3e:	d033      	beq.n	8005ea8 <HAL_TIM_ConfigClockSource+0xe4>
 8005e40:	2b60      	cmp	r3, #96	; 0x60
 8005e42:	d041      	beq.n	8005ec8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005e44:	e06a      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4a:	d066      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0x156>
 8005e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e50:	d017      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005e52:	e063      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	6899      	ldr	r1, [r3, #8]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f000 fbc6 	bl	80065f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	609a      	str	r2, [r3, #8]
      break;
 8005e80:	e04c      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	6899      	ldr	r1, [r3, #8]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f000 fbaf 	bl	80065f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ea4:	609a      	str	r2, [r3, #8]
      break;
 8005ea6:	e039      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	6859      	ldr	r1, [r3, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f000 fb21 	bl	80064fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2150      	movs	r1, #80	; 0x50
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 fb7a 	bl	80065ba <TIM_ITRx_SetConfig>
      break;
 8005ec6:	e029      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	6859      	ldr	r1, [r3, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f000 fb40 	bl	800655a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2160      	movs	r1, #96	; 0x60
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fb6a 	bl	80065ba <TIM_ITRx_SetConfig>
      break;
 8005ee6:	e019      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6818      	ldr	r0, [r3, #0]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	6859      	ldr	r1, [r3, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f000 fb01 	bl	80064fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2140      	movs	r1, #64	; 0x40
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 fb5a 	bl	80065ba <TIM_ITRx_SetConfig>
      break;
 8005f06:	e009      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4619      	mov	r1, r3
 8005f12:	4610      	mov	r0, r2
 8005f14:	f000 fb51 	bl	80065ba <TIM_ITRx_SetConfig>
        break;
 8005f18:	e000      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005f1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a2a      	ldr	r2, [pc, #168]	; (8005ff4 <TIM_Base_SetConfig+0xbc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_Base_SetConfig+0x20>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f56:	d108      	bne.n	8005f6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a21      	ldr	r2, [pc, #132]	; (8005ff4 <TIM_Base_SetConfig+0xbc>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00b      	beq.n	8005f8a <TIM_Base_SetConfig+0x52>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f78:	d007      	beq.n	8005f8a <TIM_Base_SetConfig+0x52>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a1e      	ldr	r2, [pc, #120]	; (8005ff8 <TIM_Base_SetConfig+0xc0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <TIM_Base_SetConfig+0x52>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1d      	ldr	r2, [pc, #116]	; (8005ffc <TIM_Base_SetConfig+0xc4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d108      	bne.n	8005f9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a0c      	ldr	r2, [pc, #48]	; (8005ff4 <TIM_Base_SetConfig+0xbc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d007      	beq.n	8005fd8 <TIM_Base_SetConfig+0xa0>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a0b      	ldr	r2, [pc, #44]	; (8005ff8 <TIM_Base_SetConfig+0xc0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <TIM_Base_SetConfig+0xa0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <TIM_Base_SetConfig+0xc4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d103      	bne.n	8005fe0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	615a      	str	r2, [r3, #20]
}
 8005fe6:	bf00      	nop
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40012c00 	.word	0x40012c00
 8005ff8:	40014400 	.word	0x40014400
 8005ffc:	40014800 	.word	0x40014800

08006000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	f023 0201 	bic.w	r2, r3, #1
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0303 	bic.w	r3, r3, #3
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f023 0302 	bic.w	r3, r3, #2
 800604c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a24      	ldr	r2, [pc, #144]	; (80060ec <TIM_OC1_SetConfig+0xec>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d007      	beq.n	8006070 <TIM_OC1_SetConfig+0x70>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a23      	ldr	r2, [pc, #140]	; (80060f0 <TIM_OC1_SetConfig+0xf0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d003      	beq.n	8006070 <TIM_OC1_SetConfig+0x70>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a22      	ldr	r2, [pc, #136]	; (80060f4 <TIM_OC1_SetConfig+0xf4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d10c      	bne.n	800608a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f023 0308 	bic.w	r3, r3, #8
 8006076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f023 0304 	bic.w	r3, r3, #4
 8006088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a17      	ldr	r2, [pc, #92]	; (80060ec <TIM_OC1_SetConfig+0xec>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d007      	beq.n	80060a2 <TIM_OC1_SetConfig+0xa2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a17      	ldr	r2, [pc, #92]	; (80060f4 <TIM_OC1_SetConfig+0xf4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_OC1_SetConfig+0xa2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a14      	ldr	r2, [pc, #80]	; (80060f0 <TIM_OC1_SetConfig+0xf0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d111      	bne.n	80060c6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	621a      	str	r2, [r3, #32]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	40012c00 	.word	0x40012c00
 80060f0:	40014800 	.word	0x40014800
 80060f4:	40014400 	.word	0x40014400

080060f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f023 0210 	bic.w	r2, r3, #16
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f023 0320 	bic.w	r3, r3, #32
 8006146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a22      	ldr	r2, [pc, #136]	; (80061e0 <TIM_OC2_SetConfig+0xe8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d10d      	bne.n	8006178 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a19      	ldr	r2, [pc, #100]	; (80061e0 <TIM_OC2_SetConfig+0xe8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d007      	beq.n	8006190 <TIM_OC2_SetConfig+0x98>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a18      	ldr	r2, [pc, #96]	; (80061e4 <TIM_OC2_SetConfig+0xec>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC2_SetConfig+0x98>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a17      	ldr	r2, [pc, #92]	; (80061e8 <TIM_OC2_SetConfig+0xf0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d113      	bne.n	80061b8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800619e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40014400 	.word	0x40014400
 80061e8:	40014800 	.word	0x40014800

080061ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a21      	ldr	r2, [pc, #132]	; (80062d0 <TIM_OC3_SetConfig+0xe4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d10d      	bne.n	800626a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a18      	ldr	r2, [pc, #96]	; (80062d0 <TIM_OC3_SetConfig+0xe4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_OC3_SetConfig+0x96>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a17      	ldr	r2, [pc, #92]	; (80062d4 <TIM_OC3_SetConfig+0xe8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_OC3_SetConfig+0x96>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a16      	ldr	r2, [pc, #88]	; (80062d8 <TIM_OC3_SetConfig+0xec>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d113      	bne.n	80062aa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	621a      	str	r2, [r3, #32]
}
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	40014400 	.word	0x40014400
 80062d8:	40014800 	.word	0x40014800

080062dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800630a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4313      	orrs	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800632a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	031b      	lsls	r3, r3, #12
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a14      	ldr	r2, [pc, #80]	; (800638c <TIM_OC4_SetConfig+0xb0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d007      	beq.n	8006350 <TIM_OC4_SetConfig+0x74>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a13      	ldr	r2, [pc, #76]	; (8006390 <TIM_OC4_SetConfig+0xb4>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d003      	beq.n	8006350 <TIM_OC4_SetConfig+0x74>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a12      	ldr	r2, [pc, #72]	; (8006394 <TIM_OC4_SetConfig+0xb8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d109      	bne.n	8006364 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	019b      	lsls	r3, r3, #6
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	bf00      	nop
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40012c00 	.word	0x40012c00
 8006390:	40014400 	.word	0x40014400
 8006394:	40014800 	.word	0x40014800

08006398 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	041b      	lsls	r3, r3, #16
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a13      	ldr	r2, [pc, #76]	; (800643c <TIM_OC5_SetConfig+0xa4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d007      	beq.n	8006402 <TIM_OC5_SetConfig+0x6a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a12      	ldr	r2, [pc, #72]	; (8006440 <TIM_OC5_SetConfig+0xa8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d003      	beq.n	8006402 <TIM_OC5_SetConfig+0x6a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a11      	ldr	r2, [pc, #68]	; (8006444 <TIM_OC5_SetConfig+0xac>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d109      	bne.n	8006416 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006408:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	621a      	str	r2, [r3, #32]
}
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	40012c00 	.word	0x40012c00
 8006440:	40014400 	.word	0x40014400
 8006444:	40014800 	.word	0x40014800

08006448 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	021b      	lsls	r3, r3, #8
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800648e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	051b      	lsls	r3, r3, #20
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a14      	ldr	r2, [pc, #80]	; (80064f0 <TIM_OC6_SetConfig+0xa8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d007      	beq.n	80064b4 <TIM_OC6_SetConfig+0x6c>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a13      	ldr	r2, [pc, #76]	; (80064f4 <TIM_OC6_SetConfig+0xac>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d003      	beq.n	80064b4 <TIM_OC6_SetConfig+0x6c>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a12      	ldr	r2, [pc, #72]	; (80064f8 <TIM_OC6_SetConfig+0xb0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d109      	bne.n	80064c8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	029b      	lsls	r3, r3, #10
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	621a      	str	r2, [r3, #32]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40014400 	.word	0x40014400
 80064f8:	40014800 	.word	0x40014800

080064fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f023 0201 	bic.w	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f023 030a 	bic.w	r3, r3, #10
 8006538:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800655a:	b480      	push	{r7}
 800655c:	b087      	sub	sp, #28
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	60b9      	str	r1, [r7, #8]
 8006564:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f023 0210 	bic.w	r2, r3, #16
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006584:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	031b      	lsls	r3, r3, #12
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006596:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80065d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	f043 0307 	orr.w	r3, r3, #7
 80065e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	609a      	str	r2, [r3, #8]
}
 80065e8:	bf00      	nop
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800660e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	021a      	lsls	r2, r3, #8
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	431a      	orrs	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4313      	orrs	r3, r2
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	609a      	str	r2, [r3, #8]
}
 8006628:	bf00      	nop
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f003 031f 	and.w	r3, r3, #31
 8006646:	2201      	movs	r2, #1
 8006648:	fa02 f303 	lsl.w	r3, r2, r3
 800664c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1a      	ldr	r2, [r3, #32]
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	43db      	mvns	r3, r3
 8006656:	401a      	ands	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1a      	ldr	r2, [r3, #32]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f003 031f 	and.w	r3, r3, #31
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	fa01 f303 	lsl.w	r3, r1, r3
 800666c:	431a      	orrs	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	621a      	str	r2, [r3, #32]
}
 8006672:	bf00      	nop
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
	...

08006680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006694:	2302      	movs	r3, #2
 8006696:	e04a      	b.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a1f      	ldr	r2, [pc, #124]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d108      	bne.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a12      	ldr	r2, [pc, #72]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d004      	beq.n	8006702 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006700:	d10c      	bne.n	800671c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	4313      	orrs	r3, r2
 8006712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40012c00 	.word	0x40012c00

08006740 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006758:	2302      	movs	r3, #2
 800675a:	e078      	b.n	800684e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	041b      	lsls	r3, r3, #16
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a20      	ldr	r2, [pc, #128]	; (800685c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d106      	bne.n	80067ee <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a1a      	ldr	r2, [pc, #104]	; (800685c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d121      	bne.n	800683c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	051b      	lsls	r3, r3, #20
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a0c      	ldr	r2, [pc, #48]	; (800685c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d106      	bne.n	800683c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40012c00 	.word	0x40012c00

08006860 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006868:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800686c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	b29b      	uxth	r3, r3
 800687a:	4313      	orrs	r3, r2
 800687c:	b29a      	uxth	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006892:	b480      	push	{r7}
 8006894:	b085      	sub	sp, #20
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800689a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800689e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	43db      	mvns	r3, r3
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	4013      	ands	r3, r2
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80068c8:	b084      	sub	sp, #16
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	f107 0014 	add.w	r0, r7, #20
 80068d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff ffb0 	bl	8006860 <USB_EnableGlobalInt>

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800690c:	b004      	add	sp, #16
 800690e:	4770      	bx	lr

08006910 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006910:	b480      	push	{r7}
 8006912:	b09d      	sub	sp, #116	; 0x74
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006936:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	78db      	ldrb	r3, [r3, #3]
 800693e:	2b03      	cmp	r3, #3
 8006940:	d81f      	bhi.n	8006982 <USB_ActivateEndpoint+0x72>
 8006942:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <USB_ActivateEndpoint+0x38>)
 8006944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006948:	08006959 	.word	0x08006959
 800694c:	08006975 	.word	0x08006975
 8006950:	0800698b 	.word	0x0800698b
 8006954:	08006967 	.word	0x08006967
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006958:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800695c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006960:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006964:	e012      	b.n	800698c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006966:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800696a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800696e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006972:	e00b      	b.n	800698c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006974:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006978:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800697c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006980:	e004      	b.n	800698c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006988:	e000      	b.n	800698c <USB_ActivateEndpoint+0x7c>
      break;
 800698a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	441a      	add	r2, r3
 8006996:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800699a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	b21b      	sxth	r3, r3
 80069be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c6:	b21a      	sxth	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	b21b      	sxth	r3, r3
 80069ce:	4313      	orrs	r3, r2
 80069d0:	b21b      	sxth	r3, r3
 80069d2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	441a      	add	r2, r3
 80069e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80069e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	7b1b      	ldrb	r3, [r3, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f040 8149 	bne.w	8006c94 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	785b      	ldrb	r3, [r3, #1]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 8084 	beq.w	8006b14 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	61bb      	str	r3, [r7, #24]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	00da      	lsls	r2, r3, #3
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	88db      	ldrh	r3, [r3, #6]
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	827b      	strh	r3, [r7, #18]
 8006a4e:	8a7b      	ldrh	r3, [r7, #18]
 8006a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01b      	beq.n	8006a90 <USB_ActivateEndpoint+0x180>
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6e:	823b      	strh	r3, [r7, #16]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	441a      	add	r2, r3
 8006a7a:	8a3b      	ldrh	r3, [r7, #16]
 8006a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	78db      	ldrb	r3, [r3, #3]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d020      	beq.n	8006ada <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aae:	81bb      	strh	r3, [r7, #12]
 8006ab0:	89bb      	ldrh	r3, [r7, #12]
 8006ab2:	f083 0320 	eor.w	r3, r3, #32
 8006ab6:	81bb      	strh	r3, [r7, #12]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	441a      	add	r2, r3
 8006ac2:	89bb      	ldrh	r3, [r7, #12]
 8006ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	8013      	strh	r3, [r2, #0]
 8006ad8:	e2bf      	b.n	800705a <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af0:	81fb      	strh	r3, [r7, #14]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	441a      	add	r2, r3
 8006afc:	89fb      	ldrh	r3, [r7, #14]
 8006afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	8013      	strh	r3, [r2, #0]
 8006b12:	e2a2      	b.n	800705a <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	633b      	str	r3, [r7, #48]	; 0x30
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	461a      	mov	r2, r3
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	4413      	add	r3, r2
 8006b26:	633b      	str	r3, [r7, #48]	; 0x30
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	00da      	lsls	r2, r3, #3
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	4413      	add	r3, r2
 8006b32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	88db      	ldrh	r3, [r3, #6]
 8006b3c:	085b      	lsrs	r3, r3, #1
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	4413      	add	r3, r2
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	00da      	lsls	r2, r3, #3
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	4413      	add	r3, r2
 8006b66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d112      	bne.n	8006b9a <USB_ActivateEndpoint+0x28a>
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	801a      	strh	r2, [r3, #0]
 8006b98:	e02f      	b.n	8006bfa <USB_ActivateEndpoint+0x2ea>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	2b3e      	cmp	r3, #62	; 0x3e
 8006ba0:	d813      	bhi.n	8006bca <USB_ActivateEndpoint+0x2ba>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	085b      	lsrs	r3, r3, #1
 8006ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <USB_ActivateEndpoint+0x2ac>
 8006bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bb8:	3301      	adds	r3, #1
 8006bba:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	029b      	lsls	r3, r3, #10
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	e017      	b.n	8006bfa <USB_ActivateEndpoint+0x2ea>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <USB_ActivateEndpoint+0x2d4>
 8006bde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006be0:	3b01      	subs	r3, #1
 8006be2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	029b      	lsls	r3, r3, #10
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	847b      	strh	r3, [r7, #34]	; 0x22
 8006c08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01b      	beq.n	8006c4a <USB_ActivateEndpoint+0x33a>
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c28:	843b      	strh	r3, [r7, #32]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	441a      	add	r2, r3
 8006c34:	8c3b      	ldrh	r3, [r7, #32]
 8006c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c60:	83fb      	strh	r3, [r7, #30]
 8006c62:	8bfb      	ldrh	r3, [r7, #30]
 8006c64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c68:	83fb      	strh	r3, [r7, #30]
 8006c6a:	8bfb      	ldrh	r3, [r7, #30]
 8006c6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c70:	83fb      	strh	r3, [r7, #30]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	441a      	add	r2, r3
 8006c7c:	8bfb      	ldrh	r3, [r7, #30]
 8006c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	8013      	strh	r3, [r2, #0]
 8006c92:	e1e2      	b.n	800705a <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006caa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	441a      	add	r2, r3
 8006cb8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	663b      	str	r3, [r7, #96]	; 0x60
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ce0:	4413      	add	r3, r2
 8006ce2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	00da      	lsls	r2, r3, #3
 8006cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	891b      	ldrh	r3, [r3, #8]
 8006cf8:	085b      	lsrs	r3, r3, #1
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d02:	801a      	strh	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d14:	4413      	add	r3, r2
 8006d16:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	00da      	lsls	r2, r3, #3
 8006d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d20:	4413      	add	r3, r2
 8006d22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d26:	657b      	str	r3, [r7, #84]	; 0x54
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	895b      	ldrh	r3, [r3, #10]
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d36:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f040 80b1 	bne.w	8006ea4 <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006d52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d01d      	beq.n	8006d9a <USB_ActivateEndpoint+0x48a>
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d74:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006da8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d01b      	beq.n	8006dea <USB_ActivateEndpoint+0x4da>
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	441a      	add	r2, r3
 8006dd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006de2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e00:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	441a      	add	r2, r3
 8006e0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e38:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e3a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e40:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e48:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	441a      	add	r2, r3
 8006e54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e80:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	441a      	add	r2, r3
 8006e8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	8013      	strh	r3, [r2, #0]
 8006ea2:	e0da      	b.n	800705a <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006eb4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01d      	beq.n	8006efc <USB_ActivateEndpoint+0x5ec>
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01d      	beq.n	8006f54 <USB_ActivateEndpoint+0x644>
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	441a      	add	r2, r3
 8006f3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	78db      	ldrb	r3, [r3, #3]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d024      	beq.n	8006fe2 <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006fb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006fb6:	f083 0320 	eor.w	r3, r3, #32
 8006fba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	441a      	add	r2, r3
 8006fc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	8013      	strh	r3, [r2, #0]
 8006fe0:	e01d      	b.n	800701e <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	441a      	add	r2, r3
 8007006:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800700a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701a:	b29b      	uxth	r3, r3
 800701c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007034:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	441a      	add	r2, r3
 8007042:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800704a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007056:	b29b      	uxth	r3, r3
 8007058:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800705a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800705e:	4618      	mov	r0, r3
 8007060:	3774      	adds	r7, #116	; 0x74
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop

0800706c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800706c:	b480      	push	{r7}
 800706e:	b08d      	sub	sp, #52	; 0x34
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	7b1b      	ldrb	r3, [r3, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f040 808e 	bne.w	800719c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	785b      	ldrb	r3, [r3, #1]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d044      	beq.n	8007112 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	81bb      	strh	r3, [r7, #12]
 8007096:	89bb      	ldrh	r3, [r7, #12]
 8007098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01b      	beq.n	80070d8 <USB_DeactivateEndpoint+0x6c>
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	817b      	strh	r3, [r7, #10]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	441a      	add	r2, r3
 80070c2:	897b      	ldrh	r3, [r7, #10]
 80070c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ee:	813b      	strh	r3, [r7, #8]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	441a      	add	r2, r3
 80070fa:	893b      	ldrh	r3, [r7, #8]
 80070fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800710c:	b29b      	uxth	r3, r3
 800710e:	8013      	strh	r3, [r2, #0]
 8007110:	e192      	b.n	8007438 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	827b      	strh	r3, [r7, #18]
 8007120:	8a7b      	ldrh	r3, [r7, #18]
 8007122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d01b      	beq.n	8007162 <USB_DeactivateEndpoint+0xf6>
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800713c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007140:	823b      	strh	r3, [r7, #16]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	441a      	add	r2, r3
 800714c:	8a3b      	ldrh	r3, [r7, #16]
 800714e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007156:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800715a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800715e:	b29b      	uxth	r3, r3
 8007160:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007178:	81fb      	strh	r3, [r7, #14]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	441a      	add	r2, r3
 8007184:	89fb      	ldrh	r3, [r7, #14]
 8007186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007196:	b29b      	uxth	r3, r3
 8007198:	8013      	strh	r3, [r2, #0]
 800719a:	e14d      	b.n	8007438 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	785b      	ldrb	r3, [r3, #1]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f040 80a5 	bne.w	80072f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	843b      	strh	r3, [r7, #32]
 80071b4:	8c3b      	ldrh	r3, [r7, #32]
 80071b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d01b      	beq.n	80071f6 <USB_DeactivateEndpoint+0x18a>
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d4:	83fb      	strh	r3, [r7, #30]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	441a      	add	r2, r3
 80071e0:	8bfb      	ldrh	r3, [r7, #30]
 80071e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	83bb      	strh	r3, [r7, #28]
 8007204:	8bbb      	ldrh	r3, [r7, #28]
 8007206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01b      	beq.n	8007246 <USB_DeactivateEndpoint+0x1da>
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007224:	837b      	strh	r3, [r7, #26]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	441a      	add	r2, r3
 8007230:	8b7b      	ldrh	r3, [r7, #26]
 8007232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800723a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800723e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007242:	b29b      	uxth	r3, r3
 8007244:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725c:	833b      	strh	r3, [r7, #24]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	441a      	add	r2, r3
 8007268:	8b3b      	ldrh	r3, [r7, #24]
 800726a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007276:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800727a:	b29b      	uxth	r3, r3
 800727c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007294:	82fb      	strh	r3, [r7, #22]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	441a      	add	r2, r3
 80072a0:	8afb      	ldrh	r3, [r7, #22]
 80072a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072cc:	82bb      	strh	r3, [r7, #20]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	441a      	add	r2, r3
 80072d8:	8abb      	ldrh	r3, [r7, #20]
 80072da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	8013      	strh	r3, [r2, #0]
 80072ee:	e0a3      	b.n	8007438 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80072fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01b      	beq.n	8007340 <USB_DeactivateEndpoint+0x2d4>
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	b29b      	uxth	r3, r3
 8007316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800731a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	441a      	add	r2, r3
 800732a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800732c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733c:	b29b      	uxth	r3, r3
 800733e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800734e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d01b      	beq.n	8007390 <USB_DeactivateEndpoint+0x324>
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	b29b      	uxth	r3, r3
 8007366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	441a      	add	r2, r3
 800737a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800737c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007388:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800738c:	b29b      	uxth	r3, r3
 800738e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	b29b      	uxth	r3, r3
 800739e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	441a      	add	r2, r3
 80073b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	441a      	add	r2, r3
 80073ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	b29b      	uxth	r3, r3
 800740e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007416:	847b      	strh	r3, [r7, #34]	; 0x22
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	441a      	add	r2, r3
 8007422:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800742c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007434:	b29b      	uxth	r3, r3
 8007436:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3734      	adds	r7, #52	; 0x34
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b0a0      	sub	sp, #128	; 0x80
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	2b01      	cmp	r3, #1
 8007456:	f040 81a1 	bne.w	800779c <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	429a      	cmp	r2, r3
 8007464:	d909      	bls.n	800747a <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	699a      	ldr	r2, [r3, #24]
 8007470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007472:	1ad2      	subs	r2, r2, r3
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	619a      	str	r2, [r3, #24]
 8007478:	e005      	b.n	8007486 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2200      	movs	r2, #0
 8007484:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	7b1b      	ldrb	r3, [r3, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d11f      	bne.n	80074ce <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6959      	ldr	r1, [r3, #20]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	88da      	ldrh	r2, [r3, #6]
 8007496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007498:	b29b      	uxth	r3, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fc3f 	bl	8007d1e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	461a      	mov	r2, r3
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	4413      	add	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	00da      	lsls	r2, r3, #3
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	4413      	add	r3, r2
 80074be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	801a      	strh	r2, [r3, #0]
 80074cc:	e141      	b.n	8007752 <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	b29b      	uxth	r3, r3
 80074dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d076      	beq.n	80075d2 <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	785b      	ldrb	r3, [r3, #1]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d153      	bne.n	8007598 <USB_EPStartXfer+0x152>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	61fb      	str	r3, [r7, #28]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	461a      	mov	r2, r3
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	4413      	add	r3, r2
 8007502:	61fb      	str	r3, [r7, #28]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	00da      	lsls	r2, r3, #3
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	4413      	add	r3, r2
 800750e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007512:	61bb      	str	r3, [r7, #24]
 8007514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007516:	2b00      	cmp	r3, #0
 8007518:	d112      	bne.n	8007540 <USB_EPStartXfer+0xfa>
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007524:	b29a      	uxth	r2, r3
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007538:	b29a      	uxth	r2, r3
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	801a      	strh	r2, [r3, #0]
 800753e:	e043      	b.n	80075c8 <USB_EPStartXfer+0x182>
 8007540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007542:	2b3e      	cmp	r3, #62	; 0x3e
 8007544:	d811      	bhi.n	800756a <USB_EPStartXfer+0x124>
 8007546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007548:	085b      	lsrs	r3, r3, #1
 800754a:	677b      	str	r3, [r7, #116]	; 0x74
 800754c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d002      	beq.n	800755c <USB_EPStartXfer+0x116>
 8007556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007558:	3301      	adds	r3, #1
 800755a:	677b      	str	r3, [r7, #116]	; 0x74
 800755c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800755e:	b29b      	uxth	r3, r3
 8007560:	029b      	lsls	r3, r3, #10
 8007562:	b29a      	uxth	r2, r3
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	801a      	strh	r2, [r3, #0]
 8007568:	e02e      	b.n	80075c8 <USB_EPStartXfer+0x182>
 800756a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800756c:	095b      	lsrs	r3, r3, #5
 800756e:	677b      	str	r3, [r7, #116]	; 0x74
 8007570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007572:	f003 031f 	and.w	r3, r3, #31
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <USB_EPStartXfer+0x13a>
 800757a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800757c:	3b01      	subs	r3, #1
 800757e:	677b      	str	r3, [r7, #116]	; 0x74
 8007580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007582:	b29b      	uxth	r3, r3
 8007584:	029b      	lsls	r3, r3, #10
 8007586:	b29b      	uxth	r3, r3
 8007588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800758c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007590:	b29a      	uxth	r2, r3
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	801a      	strh	r2, [r3, #0]
 8007596:	e017      	b.n	80075c8 <USB_EPStartXfer+0x182>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d113      	bne.n	80075c8 <USB_EPStartXfer+0x182>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	4413      	add	r3, r2
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	00da      	lsls	r2, r3, #3
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b8:	4413      	add	r3, r2
 80075ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075be:	623b      	str	r3, [r7, #32]
 80075c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	895b      	ldrh	r3, [r3, #10]
 80075cc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80075d0:	e075      	b.n	80076be <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	785b      	ldrb	r3, [r3, #1]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d153      	bne.n	8007682 <USB_EPStartXfer+0x23c>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	4413      	add	r3, r2
 80075ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	00da      	lsls	r2, r3, #3
 80075f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f6:	4413      	add	r3, r2
 80075f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80075fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007600:	2b00      	cmp	r3, #0
 8007602:	d112      	bne.n	800762a <USB_EPStartXfer+0x1e4>
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	b29b      	uxth	r3, r3
 800760a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800760e:	b29a      	uxth	r2, r3
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	801a      	strh	r2, [r3, #0]
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	b29b      	uxth	r3, r3
 800761a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007622:	b29a      	uxth	r2, r3
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	e045      	b.n	80076b6 <USB_EPStartXfer+0x270>
 800762a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800762c:	2b3e      	cmp	r3, #62	; 0x3e
 800762e:	d811      	bhi.n	8007654 <USB_EPStartXfer+0x20e>
 8007630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007632:	085b      	lsrs	r3, r3, #1
 8007634:	673b      	str	r3, [r7, #112]	; 0x70
 8007636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <USB_EPStartXfer+0x200>
 8007640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007642:	3301      	adds	r3, #1
 8007644:	673b      	str	r3, [r7, #112]	; 0x70
 8007646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007648:	b29b      	uxth	r3, r3
 800764a:	029b      	lsls	r3, r3, #10
 800764c:	b29a      	uxth	r2, r3
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	e030      	b.n	80076b6 <USB_EPStartXfer+0x270>
 8007654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007656:	095b      	lsrs	r3, r3, #5
 8007658:	673b      	str	r3, [r7, #112]	; 0x70
 800765a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800765c:	f003 031f 	and.w	r3, r3, #31
 8007660:	2b00      	cmp	r3, #0
 8007662:	d102      	bne.n	800766a <USB_EPStartXfer+0x224>
 8007664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007666:	3b01      	subs	r3, #1
 8007668:	673b      	str	r3, [r7, #112]	; 0x70
 800766a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800766c:	b29b      	uxth	r3, r3
 800766e:	029b      	lsls	r3, r3, #10
 8007670:	b29b      	uxth	r3, r3
 8007672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800767a:	b29a      	uxth	r2, r3
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	801a      	strh	r2, [r3, #0]
 8007680:	e019      	b.n	80076b6 <USB_EPStartXfer+0x270>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	785b      	ldrb	r3, [r3, #1]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d115      	bne.n	80076b6 <USB_EPStartXfer+0x270>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007694:	b29b      	uxth	r3, r3
 8007696:	461a      	mov	r2, r3
 8007698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769a:	4413      	add	r3, r2
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	00da      	lsls	r2, r3, #3
 80076a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a6:	4413      	add	r3, r2
 80076a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076ac:	633b      	str	r3, [r7, #48]	; 0x30
 80076ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	891b      	ldrh	r3, [r3, #8]
 80076ba:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	6959      	ldr	r1, [r3, #20]
 80076c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fb27 	bl	8007d1e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d11c      	bne.n	8007712 <USB_EPStartXfer+0x2cc>
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ee:	82bb      	strh	r3, [r7, #20]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	441a      	add	r2, r3
 80076fa:	8abb      	ldrh	r3, [r7, #20]
 80076fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007708:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800770c:	b29b      	uxth	r3, r3
 800770e:	8013      	strh	r3, [r2, #0]
 8007710:	e01f      	b.n	8007752 <USB_EPStartXfer+0x30c>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	785b      	ldrb	r3, [r3, #1]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d11b      	bne.n	8007752 <USB_EPStartXfer+0x30c>
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	b29b      	uxth	r3, r3
 8007728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800772c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007730:	82fb      	strh	r3, [r7, #22]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	441a      	add	r2, r3
 800773c:	8afb      	ldrh	r3, [r7, #22]
 800773e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800774a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774e:	b29b      	uxth	r3, r3
 8007750:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007768:	817b      	strh	r3, [r7, #10]
 800776a:	897b      	ldrh	r3, [r7, #10]
 800776c:	f083 0310 	eor.w	r3, r3, #16
 8007770:	817b      	strh	r3, [r7, #10]
 8007772:	897b      	ldrh	r3, [r7, #10]
 8007774:	f083 0320 	eor.w	r3, r3, #32
 8007778:	817b      	strh	r3, [r7, #10]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	441a      	add	r2, r3
 8007784:	897b      	ldrh	r3, [r7, #10]
 8007786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800778a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007796:	b29b      	uxth	r3, r3
 8007798:	8013      	strh	r3, [r2, #0]
 800779a:	e175      	b.n	8007a88 <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	699a      	ldr	r2, [r3, #24]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d909      	bls.n	80077bc <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	699a      	ldr	r2, [r3, #24]
 80077b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077b4:	1ad2      	subs	r2, r2, r3
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	619a      	str	r2, [r3, #24]
 80077ba:	e005      	b.n	80077c8 <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2200      	movs	r2, #0
 80077c6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	7b1b      	ldrb	r3, [r3, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d153      	bne.n	8007878 <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	643b      	str	r3, [r7, #64]	; 0x40
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077da:	b29b      	uxth	r3, r3
 80077dc:	461a      	mov	r2, r3
 80077de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e0:	4413      	add	r3, r2
 80077e2:	643b      	str	r3, [r7, #64]	; 0x40
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	00da      	lsls	r2, r3, #3
 80077ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077ec:	4413      	add	r3, r2
 80077ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d112      	bne.n	8007820 <USB_EPStartXfer+0x3da>
 80077fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007804:	b29a      	uxth	r2, r3
 8007806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	b29b      	uxth	r3, r3
 8007810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007818:	b29a      	uxth	r2, r3
 800781a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800781c:	801a      	strh	r2, [r3, #0]
 800781e:	e10f      	b.n	8007a40 <USB_EPStartXfer+0x5fa>
 8007820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007822:	2b3e      	cmp	r3, #62	; 0x3e
 8007824:	d811      	bhi.n	800784a <USB_EPStartXfer+0x404>
 8007826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007828:	085b      	lsrs	r3, r3, #1
 800782a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800782c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <USB_EPStartXfer+0x3f6>
 8007836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007838:	3301      	adds	r3, #1
 800783a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800783c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800783e:	b29b      	uxth	r3, r3
 8007840:	029b      	lsls	r3, r3, #10
 8007842:	b29a      	uxth	r2, r3
 8007844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007846:	801a      	strh	r2, [r3, #0]
 8007848:	e0fa      	b.n	8007a40 <USB_EPStartXfer+0x5fa>
 800784a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007852:	f003 031f 	and.w	r3, r3, #31
 8007856:	2b00      	cmp	r3, #0
 8007858:	d102      	bne.n	8007860 <USB_EPStartXfer+0x41a>
 800785a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800785c:	3b01      	subs	r3, #1
 800785e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007862:	b29b      	uxth	r3, r3
 8007864:	029b      	lsls	r3, r3, #10
 8007866:	b29b      	uxth	r3, r3
 8007868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800786c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007870:	b29a      	uxth	r2, r3
 8007872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007874:	801a      	strh	r2, [r3, #0]
 8007876:	e0e3      	b.n	8007a40 <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d153      	bne.n	8007928 <USB_EPStartXfer+0x4e2>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	65bb      	str	r3, [r7, #88]	; 0x58
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800788a:	b29b      	uxth	r3, r3
 800788c:	461a      	mov	r2, r3
 800788e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007890:	4413      	add	r3, r2
 8007892:	65bb      	str	r3, [r7, #88]	; 0x58
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	00da      	lsls	r2, r3, #3
 800789a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800789c:	4413      	add	r3, r2
 800789e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078a2:	657b      	str	r3, [r7, #84]	; 0x54
 80078a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d112      	bne.n	80078d0 <USB_EPStartXfer+0x48a>
 80078aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b8:	801a      	strh	r2, [r3, #0]
 80078ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	e045      	b.n	800795c <USB_EPStartXfer+0x516>
 80078d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d2:	2b3e      	cmp	r3, #62	; 0x3e
 80078d4:	d811      	bhi.n	80078fa <USB_EPStartXfer+0x4b4>
 80078d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d8:	085b      	lsrs	r3, r3, #1
 80078da:	66bb      	str	r3, [r7, #104]	; 0x68
 80078dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <USB_EPStartXfer+0x4a6>
 80078e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078e8:	3301      	adds	r3, #1
 80078ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80078ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	029b      	lsls	r3, r3, #10
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078f6:	801a      	strh	r2, [r3, #0]
 80078f8:	e030      	b.n	800795c <USB_EPStartXfer+0x516>
 80078fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078fc:	095b      	lsrs	r3, r3, #5
 80078fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007902:	f003 031f 	and.w	r3, r3, #31
 8007906:	2b00      	cmp	r3, #0
 8007908:	d102      	bne.n	8007910 <USB_EPStartXfer+0x4ca>
 800790a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800790c:	3b01      	subs	r3, #1
 800790e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007912:	b29b      	uxth	r3, r3
 8007914:	029b      	lsls	r3, r3, #10
 8007916:	b29b      	uxth	r3, r3
 8007918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800791c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007920:	b29a      	uxth	r2, r3
 8007922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007924:	801a      	strh	r2, [r3, #0]
 8007926:	e019      	b.n	800795c <USB_EPStartXfer+0x516>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d115      	bne.n	800795c <USB_EPStartXfer+0x516>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	663b      	str	r3, [r7, #96]	; 0x60
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800793a:	b29b      	uxth	r3, r3
 800793c:	461a      	mov	r2, r3
 800793e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007940:	4413      	add	r3, r2
 8007942:	663b      	str	r3, [r7, #96]	; 0x60
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	00da      	lsls	r2, r3, #3
 800794a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800794c:	4413      	add	r3, r2
 800794e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007952:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007956:	b29a      	uxth	r2, r3
 8007958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800795a:	801a      	strh	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	653b      	str	r3, [r7, #80]	; 0x50
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d153      	bne.n	8007a10 <USB_EPStartXfer+0x5ca>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	64bb      	str	r3, [r7, #72]	; 0x48
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007972:	b29b      	uxth	r3, r3
 8007974:	461a      	mov	r2, r3
 8007976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007978:	4413      	add	r3, r2
 800797a:	64bb      	str	r3, [r7, #72]	; 0x48
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	00da      	lsls	r2, r3, #3
 8007982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007984:	4413      	add	r3, r2
 8007986:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800798a:	647b      	str	r3, [r7, #68]	; 0x44
 800798c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800798e:	2b00      	cmp	r3, #0
 8007990:	d112      	bne.n	80079b8 <USB_EPStartXfer+0x572>
 8007992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800799c:	b29a      	uxth	r2, r3
 800799e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079a0:	801a      	strh	r2, [r3, #0]
 80079a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079b4:	801a      	strh	r2, [r3, #0]
 80079b6:	e043      	b.n	8007a40 <USB_EPStartXfer+0x5fa>
 80079b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079ba:	2b3e      	cmp	r3, #62	; 0x3e
 80079bc:	d811      	bhi.n	80079e2 <USB_EPStartXfer+0x59c>
 80079be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	667b      	str	r3, [r7, #100]	; 0x64
 80079c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <USB_EPStartXfer+0x58e>
 80079ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079d0:	3301      	adds	r3, #1
 80079d2:	667b      	str	r3, [r7, #100]	; 0x64
 80079d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	029b      	lsls	r3, r3, #10
 80079da:	b29a      	uxth	r2, r3
 80079dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079de:	801a      	strh	r2, [r3, #0]
 80079e0:	e02e      	b.n	8007a40 <USB_EPStartXfer+0x5fa>
 80079e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079e4:	095b      	lsrs	r3, r3, #5
 80079e6:	667b      	str	r3, [r7, #100]	; 0x64
 80079e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079ea:	f003 031f 	and.w	r3, r3, #31
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d102      	bne.n	80079f8 <USB_EPStartXfer+0x5b2>
 80079f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079f4:	3b01      	subs	r3, #1
 80079f6:	667b      	str	r3, [r7, #100]	; 0x64
 80079f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	029b      	lsls	r3, r3, #10
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a0c:	801a      	strh	r2, [r3, #0]
 8007a0e:	e017      	b.n	8007a40 <USB_EPStartXfer+0x5fa>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	785b      	ldrb	r3, [r3, #1]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d113      	bne.n	8007a40 <USB_EPStartXfer+0x5fa>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a24:	4413      	add	r3, r2
 8007a26:	653b      	str	r3, [r7, #80]	; 0x50
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	00da      	lsls	r2, r3, #3
 8007a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a30:	4413      	add	r3, r2
 8007a32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a3e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007a58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007a5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a5e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007a60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007a62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a66:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	441a      	add	r2, r3
 8007a72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3780      	adds	r7, #128	; 0x80
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b085      	sub	sp, #20
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	785b      	ldrb	r3, [r3, #1]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d020      	beq.n	8007ae6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aba:	81bb      	strh	r3, [r7, #12]
 8007abc:	89bb      	ldrh	r3, [r7, #12]
 8007abe:	f083 0310 	eor.w	r3, r3, #16
 8007ac2:	81bb      	strh	r3, [r7, #12]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	441a      	add	r2, r3
 8007ace:	89bb      	ldrh	r3, [r7, #12]
 8007ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	8013      	strh	r3, [r2, #0]
 8007ae4:	e01f      	b.n	8007b26 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afc:	81fb      	strh	r3, [r7, #14]
 8007afe:	89fb      	ldrh	r3, [r7, #14]
 8007b00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b04:	81fb      	strh	r3, [r7, #14]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	441a      	add	r2, r3
 8007b10:	89fb      	ldrh	r3, [r7, #14]
 8007b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	7b1b      	ldrb	r3, [r3, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f040 809d 	bne.w	8007c82 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	785b      	ldrb	r3, [r3, #1]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d04c      	beq.n	8007bea <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	823b      	strh	r3, [r7, #16]
 8007b5e:	8a3b      	ldrh	r3, [r7, #16]
 8007b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d01b      	beq.n	8007ba0 <USB_EPClearStall+0x6c>
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7e:	81fb      	strh	r3, [r7, #14]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	441a      	add	r2, r3
 8007b8a:	89fb      	ldrh	r3, [r7, #14]
 8007b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	78db      	ldrb	r3, [r3, #3]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d06c      	beq.n	8007c82 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bbe:	81bb      	strh	r3, [r7, #12]
 8007bc0:	89bb      	ldrh	r3, [r7, #12]
 8007bc2:	f083 0320 	eor.w	r3, r3, #32
 8007bc6:	81bb      	strh	r3, [r7, #12]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	441a      	add	r2, r3
 8007bd2:	89bb      	ldrh	r3, [r7, #12]
 8007bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	8013      	strh	r3, [r2, #0]
 8007be8:	e04b      	b.n	8007c82 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	82fb      	strh	r3, [r7, #22]
 8007bf8:	8afb      	ldrh	r3, [r7, #22]
 8007bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d01b      	beq.n	8007c3a <USB_EPClearStall+0x106>
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c18:	82bb      	strh	r3, [r7, #20]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	441a      	add	r2, r3
 8007c24:	8abb      	ldrh	r3, [r7, #20]
 8007c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c50:	827b      	strh	r3, [r7, #18]
 8007c52:	8a7b      	ldrh	r3, [r7, #18]
 8007c54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c58:	827b      	strh	r3, [r7, #18]
 8007c5a:	8a7b      	ldrh	r3, [r7, #18]
 8007c5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c60:	827b      	strh	r3, [r7, #18]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	441a      	add	r2, r3
 8007c6c:	8a7b      	ldrh	r3, [r7, #18]
 8007c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	371c      	adds	r7, #28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c9c:	78fb      	ldrb	r3, [r7, #3]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d103      	bne.n	8007caa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2280      	movs	r2, #128	; 0x80
 8007ca6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b08d      	sub	sp, #52	; 0x34
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	4611      	mov	r1, r2
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	80fb      	strh	r3, [r7, #6]
 8007d30:	4613      	mov	r3, r2
 8007d32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d34:	88bb      	ldrh	r3, [r7, #4]
 8007d36:	3301      	adds	r3, #1
 8007d38:	085b      	lsrs	r3, r3, #1
 8007d3a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d44:	88fa      	ldrh	r2, [r7, #6]
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d54:	e01b      	b.n	8007d8e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	3301      	adds	r3, #1
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	021b      	lsls	r3, r3, #8
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	3302      	adds	r3, #2
 8007d80:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	3301      	adds	r3, #1
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e0      	bne.n	8007d56 <USB_WritePMA+0x38>
  }
}
 8007d94:	bf00      	nop
 8007d96:	3734      	adds	r7, #52	; 0x34
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b08b      	sub	sp, #44	; 0x2c
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	4611      	mov	r1, r2
 8007dac:	461a      	mov	r2, r3
 8007dae:	460b      	mov	r3, r1
 8007db0:	80fb      	strh	r3, [r7, #6]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007db6:	88bb      	ldrh	r3, [r7, #4]
 8007db8:	085b      	lsrs	r3, r3, #1
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dc6:	88fa      	ldrh	r2, [r7, #6]
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dd0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd6:	e018      	b.n	8007e0a <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	3302      	adds	r3, #2
 8007de4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	3301      	adds	r3, #1
 8007df2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	0a1b      	lsrs	r3, r3, #8
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	3301      	adds	r3, #1
 8007e02:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	3b01      	subs	r3, #1
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e3      	bne.n	8007dd8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007e10:	88bb      	ldrh	r3, [r7, #4]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d007      	beq.n	8007e2c <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	701a      	strb	r2, [r3, #0]
  }
}
 8007e2c:	bf00      	nop
 8007e2e:	372c      	adds	r7, #44	; 0x2c
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007e48:	f002 f8b6 	bl	8009fb8 <USBD_static_malloc>
 8007e4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d105      	bne.n	8007e60 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e066      	b.n	8007f2e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	7c1b      	ldrb	r3, [r3, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d119      	bne.n	8007ea4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e74:	2202      	movs	r2, #2
 8007e76:	2181      	movs	r1, #129	; 0x81
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 ff4a 	bl	8009d12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e88:	2202      	movs	r2, #2
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 ff40 	bl	8009d12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2210      	movs	r2, #16
 8007e9e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007ea2:	e016      	b.n	8007ed2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ea4:	2340      	movs	r3, #64	; 0x40
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	2181      	movs	r1, #129	; 0x81
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f001 ff31 	bl	8009d12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007eb6:	2340      	movs	r3, #64	; 0x40
 8007eb8:	2202      	movs	r2, #2
 8007eba:	2101      	movs	r1, #1
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 ff28 	bl	8009d12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2210      	movs	r2, #16
 8007ece:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ed2:	2308      	movs	r3, #8
 8007ed4:	2203      	movs	r2, #3
 8007ed6:	2182      	movs	r1, #130	; 0x82
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 ff1a 	bl	8009d12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7c1b      	ldrb	r3, [r3, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d109      	bne.n	8007f1c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f12:	2101      	movs	r1, #1
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 ffe5 	bl	8009ee4 <USBD_LL_PrepareReceive>
 8007f1a:	e007      	b.n	8007f2c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f22:	2340      	movs	r3, #64	; 0x40
 8007f24:	2101      	movs	r1, #1
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 ffdc 	bl	8009ee4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b082      	sub	sp, #8
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007f42:	2181      	movs	r1, #129	; 0x81
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 ff0a 	bl	8009d5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f50:	2101      	movs	r1, #1
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 ff03 	bl	8009d5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f60:	2182      	movs	r1, #130	; 0x82
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 fefb 	bl	8009d5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00e      	beq.n	8007fa0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f92:	4618      	mov	r0, r3
 8007f94:	f002 f81e 	bl	8009fd4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fbc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e0af      	b.n	8008134 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d03f      	beq.n	8008060 <USBD_CDC_Setup+0xb4>
 8007fe0:	2b20      	cmp	r3, #32
 8007fe2:	f040 809f 	bne.w	8008124 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	88db      	ldrh	r3, [r3, #6]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d02e      	beq.n	800804c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	b25b      	sxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	da16      	bge.n	8008026 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008004:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	88d2      	ldrh	r2, [r2, #6]
 800800a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	88db      	ldrh	r3, [r3, #6]
 8008010:	2b07      	cmp	r3, #7
 8008012:	bf28      	it	cs
 8008014:	2307      	movcs	r3, #7
 8008016:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	89fa      	ldrh	r2, [r7, #14]
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 fa8e 	bl	8009540 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008024:	e085      	b.n	8008132 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	785a      	ldrb	r2, [r3, #1]
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	88db      	ldrh	r3, [r3, #6]
 8008034:	b2da      	uxtb	r2, r3
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800803c:	6939      	ldr	r1, [r7, #16]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	88db      	ldrh	r3, [r3, #6]
 8008042:	461a      	mov	r2, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 faa7 	bl	8009598 <USBD_CtlPrepareRx>
      break;
 800804a:	e072      	b.n	8008132 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	7850      	ldrb	r0, [r2, #1]
 8008058:	2200      	movs	r2, #0
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	4798      	blx	r3
      break;
 800805e:	e068      	b.n	8008132 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	785b      	ldrb	r3, [r3, #1]
 8008064:	2b0b      	cmp	r3, #11
 8008066:	d852      	bhi.n	800810e <USBD_CDC_Setup+0x162>
 8008068:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <USBD_CDC_Setup+0xc4>)
 800806a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806e:	bf00      	nop
 8008070:	080080a1 	.word	0x080080a1
 8008074:	0800811d 	.word	0x0800811d
 8008078:	0800810f 	.word	0x0800810f
 800807c:	0800810f 	.word	0x0800810f
 8008080:	0800810f 	.word	0x0800810f
 8008084:	0800810f 	.word	0x0800810f
 8008088:	0800810f 	.word	0x0800810f
 800808c:	0800810f 	.word	0x0800810f
 8008090:	0800810f 	.word	0x0800810f
 8008094:	0800810f 	.word	0x0800810f
 8008098:	080080cb 	.word	0x080080cb
 800809c:	080080f5 	.word	0x080080f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d107      	bne.n	80080bc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80080ac:	f107 030a 	add.w	r3, r7, #10
 80080b0:	2202      	movs	r2, #2
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 fa43 	bl	8009540 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080ba:	e032      	b.n	8008122 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 f9cd 	bl	800945e <USBD_CtlError>
            ret = USBD_FAIL;
 80080c4:	2303      	movs	r3, #3
 80080c6:	75fb      	strb	r3, [r7, #23]
          break;
 80080c8:	e02b      	b.n	8008122 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d107      	bne.n	80080e6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80080d6:	f107 030d 	add.w	r3, r7, #13
 80080da:	2201      	movs	r2, #1
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 fa2e 	bl	8009540 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080e4:	e01d      	b.n	8008122 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 f9b8 	bl	800945e <USBD_CtlError>
            ret = USBD_FAIL;
 80080ee:	2303      	movs	r3, #3
 80080f0:	75fb      	strb	r3, [r7, #23]
          break;
 80080f2:	e016      	b.n	8008122 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d00f      	beq.n	8008120 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f001 f9ab 	bl	800945e <USBD_CtlError>
            ret = USBD_FAIL;
 8008108:	2303      	movs	r3, #3
 800810a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800810c:	e008      	b.n	8008120 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f001 f9a4 	bl	800945e <USBD_CtlError>
          ret = USBD_FAIL;
 8008116:	2303      	movs	r3, #3
 8008118:	75fb      	strb	r3, [r7, #23]
          break;
 800811a:	e002      	b.n	8008122 <USBD_CDC_Setup+0x176>
          break;
 800811c:	bf00      	nop
 800811e:	e008      	b.n	8008132 <USBD_CDC_Setup+0x186>
          break;
 8008120:	bf00      	nop
      }
      break;
 8008122:	e006      	b.n	8008132 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 f999 	bl	800945e <USBD_CtlError>
      ret = USBD_FAIL;
 800812c:	2303      	movs	r3, #3
 800812e:	75fb      	strb	r3, [r7, #23]
      break;
 8008130:	bf00      	nop
  }

  return (uint8_t)ret;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800814e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800815a:	2303      	movs	r3, #3
 800815c:	e04c      	b.n	80081f8 <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008164:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	440b      	add	r3, r1
 8008174:	3318      	adds	r3, #24
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d026      	beq.n	80081ca <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800817c:	78fa      	ldrb	r2, [r7, #3]
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	3318      	adds	r3, #24
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	78fa      	ldrb	r2, [r7, #3]
 8008190:	68f9      	ldr	r1, [r7, #12]
 8008192:	0152      	lsls	r2, r2, #5
 8008194:	440a      	add	r2, r1
 8008196:	3238      	adds	r2, #56	; 0x38
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	fbb3 f1f2 	udiv	r1, r3, r2
 800819e:	fb02 f201 	mul.w	r2, r2, r1
 80081a2:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d110      	bne.n	80081ca <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80081a8:	78fa      	ldrb	r2, [r7, #3]
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	4613      	mov	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	440b      	add	r3, r1
 80081b6:	3318      	adds	r3, #24
 80081b8:	2200      	movs	r2, #0
 80081ba:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80081bc:	78f9      	ldrb	r1, [r7, #3]
 80081be:	2300      	movs	r3, #0
 80081c0:	2200      	movs	r2, #0
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f001 fe6d 	bl	8009ea2 <USBD_LL_Transmit>
 80081c8:	e015      	b.n	80081f6 <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80081f2:	78fa      	ldrb	r2, [r7, #3]
 80081f4:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008212:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800821e:	2303      	movs	r3, #3
 8008220:	e015      	b.n	800824e <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008222:	78fb      	ldrb	r3, [r7, #3]
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 fe7d 	bl	8009f26 <USBD_LL_GetRxDataSize>
 800822c:	4602      	mov	r2, r0
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008248:	4611      	mov	r1, r2
 800824a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008264:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800826c:	2303      	movs	r3, #3
 800826e:	e01b      	b.n	80082a8 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d015      	beq.n	80082a6 <USBD_CDC_EP0_RxReady+0x50>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008280:	2bff      	cmp	r3, #255	; 0xff
 8008282:	d010      	beq.n	80082a6 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008292:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800829a:	b292      	uxth	r2, r2
 800829c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	22ff      	movs	r2, #255	; 0xff
 80082a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2243      	movs	r2, #67	; 0x43
 80082bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80082be:	4b03      	ldr	r3, [pc, #12]	; (80082cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	20000098 	.word	0x20000098

080082d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2243      	movs	r2, #67	; 0x43
 80082dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80082de:	4b03      	ldr	r3, [pc, #12]	; (80082ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	20000054 	.word	0x20000054

080082f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2243      	movs	r2, #67	; 0x43
 80082fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80082fe:	4b03      	ldr	r3, [pc, #12]	; (800830c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	200000dc 	.word	0x200000dc

08008310 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	220a      	movs	r2, #10
 800831c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800831e:	4b03      	ldr	r3, [pc, #12]	; (800832c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	20000010 	.word	0x20000010

08008330 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008340:	2303      	movs	r3, #3
 8008342:	e004      	b.n	800834e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800835a:	b480      	push	{r7}
 800835c:	b087      	sub	sp, #28
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800836c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008374:	2303      	movs	r3, #3
 8008376:	e008      	b.n	800838a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	371c      	adds	r7, #28
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008396:	b480      	push	{r7}
 8008398:	b085      	sub	sp, #20
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e004      	b.n	80083bc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e016      	b.n	8008414 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	7c1b      	ldrb	r3, [r3, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d109      	bne.n	8008402 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083f8:	2101      	movs	r1, #1
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 fd72 	bl	8009ee4 <USBD_LL_PrepareReceive>
 8008400:	e007      	b.n	8008412 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008408:	2340      	movs	r3, #64	; 0x40
 800840a:	2101      	movs	r1, #1
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 fd69 	bl	8009ee4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008430:	2303      	movs	r3, #3
 8008432:	e01f      	b.n	8008474 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	79fa      	ldrb	r2, [r7, #7]
 8008466:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f001 fbd5 	bl	8009c18 <USBD_LL_Init>
 800846e:	4603      	mov	r3, r0
 8008470:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008472:	7dfb      	ldrb	r3, [r7, #23]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008490:	2303      	movs	r3, #3
 8008492:	e016      	b.n	80084c2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	f107 020e 	add.w	r2, r7, #14
 80084b4:	4610      	mov	r0, r2
 80084b6:	4798      	blx	r3
 80084b8:	4602      	mov	r2, r0
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 fc02 	bl	8009cdc <USBD_LL_Start>
 80084d8:	4603      	mov	r3, r0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008504:	2303      	movs	r3, #3
 8008506:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850e:	2b00      	cmp	r3, #0
 8008510:	d009      	beq.n	8008526 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	78fa      	ldrb	r2, [r7, #3]
 800851c:	4611      	mov	r1, r2
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008526:	7bfb      	ldrb	r3, [r7, #15]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	4611      	mov	r1, r2
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
  }

  return USBD_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 ff39 	bl	80093ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008594:	f003 031f 	and.w	r3, r3, #31
 8008598:	2b01      	cmp	r3, #1
 800859a:	d00e      	beq.n	80085ba <USBD_LL_SetupStage+0x5a>
 800859c:	2b01      	cmp	r3, #1
 800859e:	d302      	bcc.n	80085a6 <USBD_LL_SetupStage+0x46>
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d014      	beq.n	80085ce <USBD_LL_SetupStage+0x6e>
 80085a4:	e01d      	b.n	80085e2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f9ee 	bl	8008990 <USBD_StdDevReq>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]
      break;
 80085b8:	e020      	b.n	80085fc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa52 	bl	8008a6c <USBD_StdItfReq>
 80085c8:	4603      	mov	r3, r0
 80085ca:	73fb      	strb	r3, [r7, #15]
      break;
 80085cc:	e016      	b.n	80085fc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fa8f 	bl	8008afa <USBD_StdEPReq>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]
      break;
 80085e0:	e00c      	b.n	80085fc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 fbd3 	bl	8009d9c <USBD_LL_StallEP>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73fb      	strb	r3, [r7, #15]
      break;
 80085fa:	bf00      	nop
  }

  return ret;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b086      	sub	sp, #24
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	460b      	mov	r3, r1
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008614:	7afb      	ldrb	r3, [r7, #11]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d138      	bne.n	800868c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008620:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008628:	2b03      	cmp	r3, #3
 800862a:	d14a      	bne.n	80086c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	429a      	cmp	r2, r3
 8008636:	d913      	bls.n	8008660 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	1ad2      	subs	r2, r2, r3
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	4293      	cmp	r3, r2
 8008650:	bf28      	it	cs
 8008652:	4613      	movcs	r3, r2
 8008654:	461a      	mov	r2, r3
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 ffba 	bl	80095d2 <USBD_CtlContinueRx>
 800865e:	e030      	b.n	80086c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b03      	cmp	r3, #3
 800866a:	d10b      	bne.n	8008684 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 ffb5 	bl	80095f4 <USBD_CtlSendStatus>
 800868a:	e01a      	b.n	80086c2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b03      	cmp	r3, #3
 8008696:	d114      	bne.n	80086c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00e      	beq.n	80086c2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	7afa      	ldrb	r2, [r7, #11]
 80086ae:	4611      	mov	r1, r2
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	4798      	blx	r3
 80086b4:	4603      	mov	r3, r0
 80086b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	e000      	b.n	80086c4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3718      	adds	r7, #24
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	460b      	mov	r3, r1
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80086da:	7afb      	ldrb	r3, [r7, #11]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d16b      	bne.n	80087b8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3314      	adds	r3, #20
 80086e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d156      	bne.n	800879e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d914      	bls.n	8008726 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	1ad2      	subs	r2, r2, r3
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	461a      	mov	r2, r3
 8008710:	6879      	ldr	r1, [r7, #4]
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f000 ff2f 	bl	8009576 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008718:	2300      	movs	r3, #0
 800871a:	2200      	movs	r2, #0
 800871c:	2100      	movs	r1, #0
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f001 fbe0 	bl	8009ee4 <USBD_LL_PrepareReceive>
 8008724:	e03b      	b.n	800879e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	429a      	cmp	r2, r3
 8008730:	d11c      	bne.n	800876c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800873a:	429a      	cmp	r2, r3
 800873c:	d316      	bcc.n	800876c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008748:	429a      	cmp	r2, r3
 800874a:	d20f      	bcs.n	800876c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800874c:	2200      	movs	r2, #0
 800874e:	2100      	movs	r1, #0
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 ff10 	bl	8009576 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800875e:	2300      	movs	r3, #0
 8008760:	2200      	movs	r2, #0
 8008762:	2100      	movs	r1, #0
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f001 fbbd 	bl	8009ee4 <USBD_LL_PrepareReceive>
 800876a:	e018      	b.n	800879e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b03      	cmp	r3, #3
 8008776:	d10b      	bne.n	8008790 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d005      	beq.n	8008790 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008790:	2180      	movs	r1, #128	; 0x80
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f001 fb02 	bl	8009d9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 ff3e 	bl	800961a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d122      	bne.n	80087ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f7ff fe9a 	bl	80084e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80087b6:	e01a      	b.n	80087ee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d114      	bne.n	80087ee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00e      	beq.n	80087ee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	7afa      	ldrb	r2, [r7, #11]
 80087da:	4611      	mov	r1, r2
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	4798      	blx	r3
 80087e0:	4603      	mov	r3, r0
 80087e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80087e4:	7dfb      	ldrb	r3, [r7, #23]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
 80087ec:	e000      	b.n	80087f0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008828:	2303      	movs	r3, #3
 800882a:	e02f      	b.n	800888c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00f      	beq.n	8008856 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d009      	beq.n	8008856 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	6852      	ldr	r2, [r2, #4]
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	4611      	mov	r1, r2
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008856:	2340      	movs	r3, #64	; 0x40
 8008858:	2200      	movs	r2, #0
 800885a:	2100      	movs	r1, #0
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 fa58 	bl	8009d12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2240      	movs	r2, #64	; 0x40
 800886e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008872:	2340      	movs	r3, #64	; 0x40
 8008874:	2200      	movs	r2, #0
 8008876:	2180      	movs	r1, #128	; 0x80
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f001 fa4a 	bl	8009d12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2240      	movs	r2, #64	; 0x40
 8008888:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2204      	movs	r2, #4
 80088ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b04      	cmp	r3, #4
 80088f2:	d106      	bne.n	8008902 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008922:	2303      	movs	r3, #3
 8008924:	e012      	b.n	800894c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b03      	cmp	r3, #3
 8008930:	d10b      	bne.n	800894a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d005      	beq.n	800894a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	3301      	adds	r3, #1
 800896a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008972:	8a3b      	ldrh	r3, [r7, #16]
 8008974:	021b      	lsls	r3, r3, #8
 8008976:	b21a      	sxth	r2, r3
 8008978:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800897c:	4313      	orrs	r3, r2
 800897e:	b21b      	sxth	r3, r3
 8008980:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008982:	89fb      	ldrh	r3, [r7, #14]
}
 8008984:	4618      	mov	r0, r3
 8008986:	371c      	adds	r7, #28
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	d004      	beq.n	80089b4 <USBD_StdDevReq+0x24>
 80089aa:	2b40      	cmp	r3, #64	; 0x40
 80089ac:	d002      	beq.n	80089b4 <USBD_StdDevReq+0x24>
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <USBD_StdDevReq+0x38>
 80089b2:	e050      	b.n	8008a56 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	4798      	blx	r3
 80089c2:	4603      	mov	r3, r0
 80089c4:	73fb      	strb	r3, [r7, #15]
      break;
 80089c6:	e04b      	b.n	8008a60 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	785b      	ldrb	r3, [r3, #1]
 80089cc:	2b09      	cmp	r3, #9
 80089ce:	d83c      	bhi.n	8008a4a <USBD_StdDevReq+0xba>
 80089d0:	a201      	add	r2, pc, #4	; (adr r2, 80089d8 <USBD_StdDevReq+0x48>)
 80089d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d6:	bf00      	nop
 80089d8:	08008a2d 	.word	0x08008a2d
 80089dc:	08008a41 	.word	0x08008a41
 80089e0:	08008a4b 	.word	0x08008a4b
 80089e4:	08008a37 	.word	0x08008a37
 80089e8:	08008a4b 	.word	0x08008a4b
 80089ec:	08008a0b 	.word	0x08008a0b
 80089f0:	08008a01 	.word	0x08008a01
 80089f4:	08008a4b 	.word	0x08008a4b
 80089f8:	08008a23 	.word	0x08008a23
 80089fc:	08008a15 	.word	0x08008a15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f9d4 	bl	8008db0 <USBD_GetDescriptor>
          break;
 8008a08:	e024      	b.n	8008a54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fb63 	bl	80090d8 <USBD_SetAddress>
          break;
 8008a12:	e01f      	b.n	8008a54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fba2 	bl	8009160 <USBD_SetConfig>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
          break;
 8008a20:	e018      	b.n	8008a54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fc41 	bl	80092ac <USBD_GetConfig>
          break;
 8008a2a:	e013      	b.n	8008a54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fc71 	bl	8009316 <USBD_GetStatus>
          break;
 8008a34:	e00e      	b.n	8008a54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fca0 	bl	800937e <USBD_SetFeature>
          break;
 8008a3e:	e009      	b.n	8008a54 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fcaf 	bl	80093a6 <USBD_ClrFeature>
          break;
 8008a48:	e004      	b.n	8008a54 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fd06 	bl	800945e <USBD_CtlError>
          break;
 8008a52:	bf00      	nop
      }
      break;
 8008a54:	e004      	b.n	8008a60 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fd00 	bl	800945e <USBD_CtlError>
      break;
 8008a5e:	bf00      	nop
  }

  return ret;
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop

08008a6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a82:	2b20      	cmp	r3, #32
 8008a84:	d003      	beq.n	8008a8e <USBD_StdItfReq+0x22>
 8008a86:	2b40      	cmp	r3, #64	; 0x40
 8008a88:	d001      	beq.n	8008a8e <USBD_StdItfReq+0x22>
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d12b      	bne.n	8008ae6 <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	3b01      	subs	r3, #1
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d81d      	bhi.n	8008ad8 <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	889b      	ldrh	r3, [r3, #4]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d813      	bhi.n	8008ace <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	4798      	blx	r3
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	88db      	ldrh	r3, [r3, #6]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d110      	bne.n	8008ae2 <USBD_StdItfReq+0x76>
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10d      	bne.n	8008ae2 <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fd94 	bl	80095f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008acc:	e009      	b.n	8008ae2 <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fcc4 	bl	800945e <USBD_CtlError>
          break;
 8008ad6:	e004      	b.n	8008ae2 <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fcbf 	bl	800945e <USBD_CtlError>
          break;
 8008ae0:	e000      	b.n	8008ae4 <USBD_StdItfReq+0x78>
          break;
 8008ae2:	bf00      	nop
      }
      break;
 8008ae4:	e004      	b.n	8008af0 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fcb8 	bl	800945e <USBD_CtlError>
      break;
 8008aee:	bf00      	nop
  }

  return ret;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b084      	sub	sp, #16
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	889b      	ldrh	r3, [r3, #4]
 8008b0c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	d004      	beq.n	8008b24 <USBD_StdEPReq+0x2a>
 8008b1a:	2b40      	cmp	r3, #64	; 0x40
 8008b1c:	d002      	beq.n	8008b24 <USBD_StdEPReq+0x2a>
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00a      	beq.n	8008b38 <USBD_StdEPReq+0x3e>
 8008b22:	e13a      	b.n	8008d9a <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	4798      	blx	r3
 8008b32:	4603      	mov	r3, r0
 8008b34:	73fb      	strb	r3, [r7, #15]
      break;
 8008b36:	e135      	b.n	8008da4 <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	785b      	ldrb	r3, [r3, #1]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d03f      	beq.n	8008bc0 <USBD_StdEPReq+0xc6>
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d002      	beq.n	8008b4a <USBD_StdEPReq+0x50>
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d07b      	beq.n	8008c40 <USBD_StdEPReq+0x146>
 8008b48:	e121      	b.n	8008d8e <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d002      	beq.n	8008b5c <USBD_StdEPReq+0x62>
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d015      	beq.n	8008b86 <USBD_StdEPReq+0x8c>
 8008b5a:	e02b      	b.n	8008bb4 <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00c      	beq.n	8008b7c <USBD_StdEPReq+0x82>
 8008b62:	7bbb      	ldrb	r3, [r7, #14]
 8008b64:	2b80      	cmp	r3, #128	; 0x80
 8008b66:	d009      	beq.n	8008b7c <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 f915 	bl	8009d9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b72:	2180      	movs	r1, #128	; 0x80
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 f911 	bl	8009d9c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b7a:	e020      	b.n	8008bbe <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fc6d 	bl	800945e <USBD_CtlError>
              break;
 8008b84:	e01b      	b.n	8008bbe <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	885b      	ldrh	r3, [r3, #2]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10e      	bne.n	8008bac <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b8e:	7bbb      	ldrb	r3, [r7, #14]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <USBD_StdEPReq+0xb2>
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	2b80      	cmp	r3, #128	; 0x80
 8008b98:	d008      	beq.n	8008bac <USBD_StdEPReq+0xb2>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	88db      	ldrh	r3, [r3, #6]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d104      	bne.n	8008bac <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 f8f8 	bl	8009d9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fd21 	bl	80095f4 <USBD_CtlSendStatus>

              break;
 8008bb2:	e004      	b.n	8008bbe <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fc51 	bl	800945e <USBD_CtlError>
              break;
 8008bbc:	bf00      	nop
          }
          break;
 8008bbe:	e0eb      	b.n	8008d98 <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d002      	beq.n	8008bd2 <USBD_StdEPReq+0xd8>
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d015      	beq.n	8008bfc <USBD_StdEPReq+0x102>
 8008bd0:	e02f      	b.n	8008c32 <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00c      	beq.n	8008bf2 <USBD_StdEPReq+0xf8>
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	2b80      	cmp	r3, #128	; 0x80
 8008bdc:	d009      	beq.n	8008bf2 <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f001 f8da 	bl	8009d9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008be8:	2180      	movs	r1, #128	; 0x80
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 f8d6 	bl	8009d9c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bf0:	e025      	b.n	8008c3e <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fc32 	bl	800945e <USBD_CtlError>
              break;
 8008bfa:	e020      	b.n	8008c3e <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	885b      	ldrh	r3, [r3, #2]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d11b      	bne.n	8008c3c <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d004      	beq.n	8008c18 <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f001 f8e1 	bl	8009dda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fceb 	bl	80095f4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	4798      	blx	r3
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008c30:	e004      	b.n	8008c3c <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fc12 	bl	800945e <USBD_CtlError>
              break;
 8008c3a:	e000      	b.n	8008c3e <USBD_StdEPReq+0x144>
              break;
 8008c3c:	bf00      	nop
          }
          break;
 8008c3e:	e0ab      	b.n	8008d98 <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d002      	beq.n	8008c52 <USBD_StdEPReq+0x158>
 8008c4c:	2b03      	cmp	r3, #3
 8008c4e:	d032      	beq.n	8008cb6 <USBD_StdEPReq+0x1bc>
 8008c50:	e097      	b.n	8008d82 <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d007      	beq.n	8008c68 <USBD_StdEPReq+0x16e>
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
 8008c5a:	2b80      	cmp	r3, #128	; 0x80
 8008c5c:	d004      	beq.n	8008c68 <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fbfc 	bl	800945e <USBD_CtlError>
                break;
 8008c66:	e091      	b.n	8008d8c <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	da0b      	bge.n	8008c88 <USBD_StdEPReq+0x18e>
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
 8008c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c76:	4613      	mov	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	3310      	adds	r3, #16
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	4413      	add	r3, r2
 8008c84:	3304      	adds	r3, #4
 8008c86:	e00b      	b.n	8008ca0 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
 8008c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c8e:	4613      	mov	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2202      	movs	r2, #2
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fc46 	bl	8009540 <USBD_CtlSendData>
              break;
 8008cb4:	e06a      	b.n	8008d8c <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	da11      	bge.n	8008ce2 <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	f003 020f 	and.w	r2, r3, #15
 8008cc4:	6879      	ldr	r1, [r7, #4]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	440b      	add	r3, r1
 8008cd0:	3324      	adds	r3, #36	; 0x24
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d117      	bne.n	8008d08 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fbbf 	bl	800945e <USBD_CtlError>
                  break;
 8008ce0:	e054      	b.n	8008d8c <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	f003 020f 	and.w	r2, r3, #15
 8008ce8:	6879      	ldr	r1, [r7, #4]
 8008cea:	4613      	mov	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	440b      	add	r3, r1
 8008cf4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d104      	bne.n	8008d08 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fbac 	bl	800945e <USBD_CtlError>
                  break;
 8008d06:	e041      	b.n	8008d8c <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	da0b      	bge.n	8008d28 <USBD_StdEPReq+0x22e>
 8008d10:	7bbb      	ldrb	r3, [r7, #14]
 8008d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d16:	4613      	mov	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	3310      	adds	r3, #16
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	4413      	add	r3, r2
 8008d24:	3304      	adds	r3, #4
 8008d26:	e00b      	b.n	8008d40 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
 8008d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d2e:	4613      	mov	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	3304      	adds	r3, #4
 8008d40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <USBD_StdEPReq+0x254>
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	2b80      	cmp	r3, #128	; 0x80
 8008d4c:	d103      	bne.n	8008d56 <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	2200      	movs	r2, #0
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	e00e      	b.n	8008d74 <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f001 f85c 	bl	8009e18 <USBD_LL_IsStallEP>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d003      	beq.n	8008d6e <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	e002      	b.n	8008d74 <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2200      	movs	r2, #0
 8008d72:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2202      	movs	r2, #2
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fbe0 	bl	8009540 <USBD_CtlSendData>
              break;
 8008d80:	e004      	b.n	8008d8c <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fb6a 	bl	800945e <USBD_CtlError>
              break;
 8008d8a:	bf00      	nop
          }
          break;
 8008d8c:	e004      	b.n	8008d98 <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fb64 	bl	800945e <USBD_CtlError>
          break;
 8008d96:	bf00      	nop
      }
      break;
 8008d98:	e004      	b.n	8008da4 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fb5e 	bl	800945e <USBD_CtlError>
      break;
 8008da2:	bf00      	nop
  }

  return ret;
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	885b      	ldrh	r3, [r3, #2]
 8008dca:	0a1b      	lsrs	r3, r3, #8
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	2b0e      	cmp	r3, #14
 8008dd2:	f200 8152 	bhi.w	800907a <USBD_GetDescriptor+0x2ca>
 8008dd6:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <USBD_GetDescriptor+0x2c>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008e4d 	.word	0x08008e4d
 8008de0:	08008e65 	.word	0x08008e65
 8008de4:	08008ea5 	.word	0x08008ea5
 8008de8:	0800907b 	.word	0x0800907b
 8008dec:	0800907b 	.word	0x0800907b
 8008df0:	0800901b 	.word	0x0800901b
 8008df4:	08009047 	.word	0x08009047
 8008df8:	0800907b 	.word	0x0800907b
 8008dfc:	0800907b 	.word	0x0800907b
 8008e00:	0800907b 	.word	0x0800907b
 8008e04:	0800907b 	.word	0x0800907b
 8008e08:	0800907b 	.word	0x0800907b
 8008e0c:	0800907b 	.word	0x0800907b
 8008e10:	0800907b 	.word	0x0800907b
 8008e14:	08008e19 	.word	0x08008e19
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e1e:	69db      	ldr	r3, [r3, #28]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00b      	beq.n	8008e3c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	7c12      	ldrb	r2, [r2, #16]
 8008e30:	f107 0108 	add.w	r1, r7, #8
 8008e34:	4610      	mov	r0, r2
 8008e36:	4798      	blx	r3
 8008e38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e3a:	e126      	b.n	800908a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fb0d 	bl	800945e <USBD_CtlError>
        err++;
 8008e44:	7afb      	ldrb	r3, [r7, #11]
 8008e46:	3301      	adds	r3, #1
 8008e48:	72fb      	strb	r3, [r7, #11]
      break;
 8008e4a:	e11e      	b.n	800908a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	7c12      	ldrb	r2, [r2, #16]
 8008e58:	f107 0108 	add.w	r1, r7, #8
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4798      	blx	r3
 8008e60:	60f8      	str	r0, [r7, #12]
      break;
 8008e62:	e112      	b.n	800908a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	7c1b      	ldrb	r3, [r3, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10d      	bne.n	8008e88 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e74:	f107 0208 	add.w	r2, r7, #8
 8008e78:	4610      	mov	r0, r2
 8008e7a:	4798      	blx	r3
 8008e7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3301      	adds	r3, #1
 8008e82:	2202      	movs	r2, #2
 8008e84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e86:	e100      	b.n	800908a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e90:	f107 0208 	add.w	r2, r7, #8
 8008e94:	4610      	mov	r0, r2
 8008e96:	4798      	blx	r3
 8008e98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	701a      	strb	r2, [r3, #0]
      break;
 8008ea2:	e0f2      	b.n	800908a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	885b      	ldrh	r3, [r3, #2]
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	f200 80ac 	bhi.w	8009008 <USBD_GetDescriptor+0x258>
 8008eb0:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <USBD_GetDescriptor+0x108>)
 8008eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb6:	bf00      	nop
 8008eb8:	08008ed1 	.word	0x08008ed1
 8008ebc:	08008f05 	.word	0x08008f05
 8008ec0:	08008f39 	.word	0x08008f39
 8008ec4:	08008f6d 	.word	0x08008f6d
 8008ec8:	08008fa1 	.word	0x08008fa1
 8008ecc:	08008fd5 	.word	0x08008fd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00b      	beq.n	8008ef4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	7c12      	ldrb	r2, [r2, #16]
 8008ee8:	f107 0108 	add.w	r1, r7, #8
 8008eec:	4610      	mov	r0, r2
 8008eee:	4798      	blx	r3
 8008ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ef2:	e091      	b.n	8009018 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fab1 	bl	800945e <USBD_CtlError>
            err++;
 8008efc:	7afb      	ldrb	r3, [r7, #11]
 8008efe:	3301      	adds	r3, #1
 8008f00:	72fb      	strb	r3, [r7, #11]
          break;
 8008f02:	e089      	b.n	8009018 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00b      	beq.n	8008f28 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	7c12      	ldrb	r2, [r2, #16]
 8008f1c:	f107 0108 	add.w	r1, r7, #8
 8008f20:	4610      	mov	r0, r2
 8008f22:	4798      	blx	r3
 8008f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f26:	e077      	b.n	8009018 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fa97 	bl	800945e <USBD_CtlError>
            err++;
 8008f30:	7afb      	ldrb	r3, [r7, #11]
 8008f32:	3301      	adds	r3, #1
 8008f34:	72fb      	strb	r3, [r7, #11]
          break;
 8008f36:	e06f      	b.n	8009018 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00b      	beq.n	8008f5c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	7c12      	ldrb	r2, [r2, #16]
 8008f50:	f107 0108 	add.w	r1, r7, #8
 8008f54:	4610      	mov	r0, r2
 8008f56:	4798      	blx	r3
 8008f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f5a:	e05d      	b.n	8009018 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fa7d 	bl	800945e <USBD_CtlError>
            err++;
 8008f64:	7afb      	ldrb	r3, [r7, #11]
 8008f66:	3301      	adds	r3, #1
 8008f68:	72fb      	strb	r3, [r7, #11]
          break;
 8008f6a:	e055      	b.n	8009018 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00b      	beq.n	8008f90 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	7c12      	ldrb	r2, [r2, #16]
 8008f84:	f107 0108 	add.w	r1, r7, #8
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4798      	blx	r3
 8008f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f8e:	e043      	b.n	8009018 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fa63 	bl	800945e <USBD_CtlError>
            err++;
 8008f98:	7afb      	ldrb	r3, [r7, #11]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f9e:	e03b      	b.n	8009018 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00b      	beq.n	8008fc4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	7c12      	ldrb	r2, [r2, #16]
 8008fb8:	f107 0108 	add.w	r1, r7, #8
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4798      	blx	r3
 8008fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fc2:	e029      	b.n	8009018 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fa49 	bl	800945e <USBD_CtlError>
            err++;
 8008fcc:	7afb      	ldrb	r3, [r7, #11]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fd2:	e021      	b.n	8009018 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	7c12      	ldrb	r2, [r2, #16]
 8008fec:	f107 0108 	add.w	r1, r7, #8
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4798      	blx	r3
 8008ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ff6:	e00f      	b.n	8009018 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa2f 	bl	800945e <USBD_CtlError>
            err++;
 8009000:	7afb      	ldrb	r3, [r7, #11]
 8009002:	3301      	adds	r3, #1
 8009004:	72fb      	strb	r3, [r7, #11]
          break;
 8009006:	e007      	b.n	8009018 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fa27 	bl	800945e <USBD_CtlError>
          err++;
 8009010:	7afb      	ldrb	r3, [r7, #11]
 8009012:	3301      	adds	r3, #1
 8009014:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009016:	bf00      	nop
      }
      break;
 8009018:	e037      	b.n	800908a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	7c1b      	ldrb	r3, [r3, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d109      	bne.n	8009036 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902a:	f107 0208 	add.w	r2, r7, #8
 800902e:	4610      	mov	r0, r2
 8009030:	4798      	blx	r3
 8009032:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009034:	e029      	b.n	800908a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fa10 	bl	800945e <USBD_CtlError>
        err++;
 800903e:	7afb      	ldrb	r3, [r7, #11]
 8009040:	3301      	adds	r3, #1
 8009042:	72fb      	strb	r3, [r7, #11]
      break;
 8009044:	e021      	b.n	800908a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	7c1b      	ldrb	r3, [r3, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10d      	bne.n	800906a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009056:	f107 0208 	add.w	r2, r7, #8
 800905a:	4610      	mov	r0, r2
 800905c:	4798      	blx	r3
 800905e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3301      	adds	r3, #1
 8009064:	2207      	movs	r2, #7
 8009066:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009068:	e00f      	b.n	800908a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f9f6 	bl	800945e <USBD_CtlError>
        err++;
 8009072:	7afb      	ldrb	r3, [r7, #11]
 8009074:	3301      	adds	r3, #1
 8009076:	72fb      	strb	r3, [r7, #11]
      break;
 8009078:	e007      	b.n	800908a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f9ee 	bl	800945e <USBD_CtlError>
      err++;
 8009082:	7afb      	ldrb	r3, [r7, #11]
 8009084:	3301      	adds	r3, #1
 8009086:	72fb      	strb	r3, [r7, #11]
      break;
 8009088:	bf00      	nop
  }

  if (err != 0U)
 800908a:	7afb      	ldrb	r3, [r7, #11]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d11e      	bne.n	80090ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	88db      	ldrh	r3, [r3, #6]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d016      	beq.n	80090c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009098:	893b      	ldrh	r3, [r7, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00e      	beq.n	80090bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	88da      	ldrh	r2, [r3, #6]
 80090a2:	893b      	ldrh	r3, [r7, #8]
 80090a4:	4293      	cmp	r3, r2
 80090a6:	bf28      	it	cs
 80090a8:	4613      	movcs	r3, r2
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090ae:	893b      	ldrh	r3, [r7, #8]
 80090b0:	461a      	mov	r2, r3
 80090b2:	68f9      	ldr	r1, [r7, #12]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fa43 	bl	8009540 <USBD_CtlSendData>
 80090ba:	e009      	b.n	80090d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f9cd 	bl	800945e <USBD_CtlError>
 80090c4:	e004      	b.n	80090d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa94 	bl	80095f4 <USBD_CtlSendStatus>
 80090cc:	e000      	b.n	80090d0 <USBD_GetDescriptor+0x320>
    return;
 80090ce:	bf00      	nop
  }
}
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop

080090d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	889b      	ldrh	r3, [r3, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d131      	bne.n	800914e <USBD_SetAddress+0x76>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	88db      	ldrh	r3, [r3, #6]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d12d      	bne.n	800914e <USBD_SetAddress+0x76>
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	885b      	ldrh	r3, [r3, #2]
 80090f6:	2b7f      	cmp	r3, #127	; 0x7f
 80090f8:	d829      	bhi.n	800914e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	885b      	ldrh	r3, [r3, #2]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009104:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b03      	cmp	r3, #3
 8009110:	d104      	bne.n	800911c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f9a2 	bl	800945e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800911a:	e01c      	b.n	8009156 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	7bfa      	ldrb	r2, [r7, #15]
 8009120:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fe9b 	bl	8009e64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fa60 	bl	80095f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009134:	7bfb      	ldrb	r3, [r7, #15]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d004      	beq.n	8009144 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2202      	movs	r2, #2
 800913e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009142:	e008      	b.n	8009156 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800914c:	e003      	b.n	8009156 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f984 	bl	800945e <USBD_CtlError>
  }
}
 8009156:	bf00      	nop
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	885b      	ldrh	r3, [r3, #2]
 8009172:	b2da      	uxtb	r2, r3
 8009174:	4b4c      	ldr	r3, [pc, #304]	; (80092a8 <USBD_SetConfig+0x148>)
 8009176:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009178:	4b4b      	ldr	r3, [pc, #300]	; (80092a8 <USBD_SetConfig+0x148>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d905      	bls.n	800918c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f96b 	bl	800945e <USBD_CtlError>
    return USBD_FAIL;
 8009188:	2303      	movs	r3, #3
 800918a:	e088      	b.n	800929e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b02      	cmp	r3, #2
 8009196:	d002      	beq.n	800919e <USBD_SetConfig+0x3e>
 8009198:	2b03      	cmp	r3, #3
 800919a:	d025      	beq.n	80091e8 <USBD_SetConfig+0x88>
 800919c:	e071      	b.n	8009282 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800919e:	4b42      	ldr	r3, [pc, #264]	; (80092a8 <USBD_SetConfig+0x148>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d01c      	beq.n	80091e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80091a6:	4b40      	ldr	r3, [pc, #256]	; (80092a8 <USBD_SetConfig+0x148>)
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091b0:	4b3d      	ldr	r3, [pc, #244]	; (80092a8 <USBD_SetConfig+0x148>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff f99e 	bl	80084f8 <USBD_SetClassConfig>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d004      	beq.n	80091d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f948 	bl	800945e <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091ce:	e065      	b.n	800929c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fa0f 	bl	80095f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2203      	movs	r2, #3
 80091da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091de:	e05d      	b.n	800929c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fa07 	bl	80095f4 <USBD_CtlSendStatus>
      break;
 80091e6:	e059      	b.n	800929c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80091e8:	4b2f      	ldr	r3, [pc, #188]	; (80092a8 <USBD_SetConfig+0x148>)
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d112      	bne.n	8009216 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80091f8:	4b2b      	ldr	r3, [pc, #172]	; (80092a8 <USBD_SetConfig+0x148>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	461a      	mov	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009202:	4b29      	ldr	r3, [pc, #164]	; (80092a8 <USBD_SetConfig+0x148>)
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff f991 	bl	8008530 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f9f0 	bl	80095f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009214:	e042      	b.n	800929c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009216:	4b24      	ldr	r3, [pc, #144]	; (80092a8 <USBD_SetConfig+0x148>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	429a      	cmp	r2, r3
 8009222:	d02a      	beq.n	800927a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	b2db      	uxtb	r3, r3
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff f97f 	bl	8008530 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009232:	4b1d      	ldr	r3, [pc, #116]	; (80092a8 <USBD_SetConfig+0x148>)
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800923c:	4b1a      	ldr	r3, [pc, #104]	; (80092a8 <USBD_SetConfig+0x148>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff f958 	bl	80084f8 <USBD_SetClassConfig>
 8009248:	4603      	mov	r3, r0
 800924a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800924c:	7bfb      	ldrb	r3, [r7, #15]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00f      	beq.n	8009272 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f902 	bl	800945e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	b2db      	uxtb	r3, r3
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff f964 	bl	8008530 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009270:	e014      	b.n	800929c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f9be 	bl	80095f4 <USBD_CtlSendStatus>
      break;
 8009278:	e010      	b.n	800929c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f9ba 	bl	80095f4 <USBD_CtlSendStatus>
      break;
 8009280:	e00c      	b.n	800929c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f8ea 	bl	800945e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800928a:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <USBD_SetConfig+0x148>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7ff f94d 	bl	8008530 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009296:	2303      	movs	r3, #3
 8009298:	73fb      	strb	r3, [r7, #15]
      break;
 800929a:	bf00      	nop
  }

  return ret;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	200001ac 	.word	0x200001ac

080092ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	88db      	ldrh	r3, [r3, #6]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d004      	beq.n	80092c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f8cc 	bl	800945e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092c6:	e022      	b.n	800930e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	db17      	blt.n	8009304 <USBD_GetConfig+0x58>
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	dd02      	ble.n	80092de <USBD_GetConfig+0x32>
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d00b      	beq.n	80092f4 <USBD_GetConfig+0x48>
 80092dc:	e012      	b.n	8009304 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3308      	adds	r3, #8
 80092e8:	2201      	movs	r2, #1
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f927 	bl	8009540 <USBD_CtlSendData>
        break;
 80092f2:	e00c      	b.n	800930e <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	3304      	adds	r3, #4
 80092f8:	2201      	movs	r2, #1
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f91f 	bl	8009540 <USBD_CtlSendData>
        break;
 8009302:	e004      	b.n	800930e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009304:	6839      	ldr	r1, [r7, #0]
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f8a9 	bl	800945e <USBD_CtlError>
        break;
 800930c:	bf00      	nop
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b082      	sub	sp, #8
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009326:	b2db      	uxtb	r3, r3
 8009328:	3b01      	subs	r3, #1
 800932a:	2b02      	cmp	r3, #2
 800932c:	d81e      	bhi.n	800936c <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	88db      	ldrh	r3, [r3, #6]
 8009332:	2b02      	cmp	r3, #2
 8009334:	d004      	beq.n	8009340 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f890 	bl	800945e <USBD_CtlError>
        break;
 800933e:	e01a      	b.n	8009376 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d005      	beq.n	800935c <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f043 0202 	orr.w	r2, r3, #2
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	330c      	adds	r3, #12
 8009360:	2202      	movs	r2, #2
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f8eb 	bl	8009540 <USBD_CtlSendData>
      break;
 800936a:	e004      	b.n	8009376 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f875 	bl	800945e <USBD_CtlError>
      break;
 8009374:	bf00      	nop
  }
}
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	885b      	ldrh	r3, [r3, #2]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d106      	bne.n	800939e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f92b 	bl	80095f4 <USBD_CtlSendStatus>
  }
}
 800939e:	bf00      	nop
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	3b01      	subs	r3, #1
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d80b      	bhi.n	80093d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	885b      	ldrh	r3, [r3, #2]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d10c      	bne.n	80093e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f910 	bl	80095f4 <USBD_CtlSendStatus>
      }
      break;
 80093d4:	e004      	b.n	80093e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f840 	bl	800945e <USBD_CtlError>
      break;
 80093de:	e000      	b.n	80093e2 <USBD_ClrFeature+0x3c>
      break;
 80093e0:	bf00      	nop
  }
}
 80093e2:	bf00      	nop
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	781a      	ldrb	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	3301      	adds	r3, #1
 8009404:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	781a      	ldrb	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3301      	adds	r3, #1
 8009412:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7ff fa9d 	bl	8008954 <SWAPBYTE>
 800941a:	4603      	mov	r3, r0
 800941c:	461a      	mov	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3301      	adds	r3, #1
 8009426:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3301      	adds	r3, #1
 800942c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f7ff fa90 	bl	8008954 <SWAPBYTE>
 8009434:	4603      	mov	r3, r0
 8009436:	461a      	mov	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	3301      	adds	r3, #1
 8009440:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3301      	adds	r3, #1
 8009446:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f7ff fa83 	bl	8008954 <SWAPBYTE>
 800944e:	4603      	mov	r3, r0
 8009450:	461a      	mov	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	80da      	strh	r2, [r3, #6]
}
 8009456:	bf00      	nop
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b082      	sub	sp, #8
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009468:	2180      	movs	r1, #128	; 0x80
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fc96 	bl	8009d9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009470:	2100      	movs	r1, #0
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fc92 	bl	8009d9c <USBD_LL_StallEP>
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800948c:	2300      	movs	r3, #0
 800948e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d036      	beq.n	8009504 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800949a:	6938      	ldr	r0, [r7, #16]
 800949c:	f000 f836 	bl	800950c <USBD_GetLen>
 80094a0:	4603      	mov	r3, r0
 80094a2:	3301      	adds	r3, #1
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	005b      	lsls	r3, r3, #1
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80094ae:	7dfb      	ldrb	r3, [r7, #23]
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	4413      	add	r3, r2
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	7812      	ldrb	r2, [r2, #0]
 80094b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	3301      	adds	r3, #1
 80094be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	4413      	add	r3, r2
 80094c6:	2203      	movs	r2, #3
 80094c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	3301      	adds	r3, #1
 80094ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80094d0:	e013      	b.n	80094fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	4413      	add	r3, r2
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	7812      	ldrb	r2, [r2, #0]
 80094dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	3301      	adds	r3, #1
 80094e2:	613b      	str	r3, [r7, #16]
    idx++;
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
 80094e6:	3301      	adds	r3, #1
 80094e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	4413      	add	r3, r2
 80094f0:	2200      	movs	r2, #0
 80094f2:	701a      	strb	r2, [r3, #0]
    idx++;
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
 80094f6:	3301      	adds	r3, #1
 80094f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1e7      	bne.n	80094d2 <USBD_GetString+0x52>
 8009502:	e000      	b.n	8009506 <USBD_GetString+0x86>
    return;
 8009504:	bf00      	nop
  }
}
 8009506:	3718      	adds	r7, #24
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800951c:	e005      	b.n	800952a <USBD_GetLen+0x1e>
  {
    len++;
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	3301      	adds	r3, #1
 8009522:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	3301      	adds	r3, #1
 8009528:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1f5      	bne.n	800951e <USBD_GetLen+0x12>
  }

  return len;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2202      	movs	r2, #2
 8009550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	2100      	movs	r1, #0
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f000 fc9b 	bl	8009ea2 <USBD_LL_Transmit>

  return USBD_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	60f8      	str	r0, [r7, #12]
 800957e:	60b9      	str	r1, [r7, #8]
 8009580:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	2100      	movs	r1, #0
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fc8a 	bl	8009ea2 <USBD_LL_Transmit>

  return USBD_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2203      	movs	r2, #3
 80095a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	2100      	movs	r1, #0
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f000 fc8e 	bl	8009ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	60f8      	str	r0, [r7, #12]
 80095da:	60b9      	str	r1, [r7, #8]
 80095dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	2100      	movs	r1, #0
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 fc7d 	bl	8009ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2204      	movs	r2, #4
 8009600:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009604:	2300      	movs	r3, #0
 8009606:	2200      	movs	r2, #0
 8009608:	2100      	movs	r1, #0
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fc49 	bl	8009ea2 <USBD_LL_Transmit>

  return USBD_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b082      	sub	sp, #8
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2205      	movs	r2, #5
 8009626:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800962a:	2300      	movs	r3, #0
 800962c:	2200      	movs	r2, #0
 800962e:	2100      	movs	r1, #0
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fc57 	bl	8009ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009644:	2200      	movs	r2, #0
 8009646:	4912      	ldr	r1, [pc, #72]	; (8009690 <MX_USB_Device_Init+0x50>)
 8009648:	4812      	ldr	r0, [pc, #72]	; (8009694 <MX_USB_Device_Init+0x54>)
 800964a:	f7fe fee7 	bl	800841c <USBD_Init>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009654:	f7f7 f886 	bl	8000764 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009658:	490f      	ldr	r1, [pc, #60]	; (8009698 <MX_USB_Device_Init+0x58>)
 800965a:	480e      	ldr	r0, [pc, #56]	; (8009694 <MX_USB_Device_Init+0x54>)
 800965c:	f7fe ff0e 	bl	800847c <USBD_RegisterClass>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009666:	f7f7 f87d 	bl	8000764 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800966a:	490c      	ldr	r1, [pc, #48]	; (800969c <MX_USB_Device_Init+0x5c>)
 800966c:	4809      	ldr	r0, [pc, #36]	; (8009694 <MX_USB_Device_Init+0x54>)
 800966e:	f7fe fe5f 	bl	8008330 <USBD_CDC_RegisterInterface>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009678:	f7f7 f874 	bl	8000764 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800967c:	4805      	ldr	r0, [pc, #20]	; (8009694 <MX_USB_Device_Init+0x54>)
 800967e:	f7fe ff24 	bl	80084ca <USBD_Start>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009688:	f7f7 f86c 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800968c:	bf00      	nop
 800968e:	bd80      	pop	{r7, pc}
 8009690:	20000134 	.word	0x20000134
 8009694:	20000530 	.word	0x20000530
 8009698:	2000001c 	.word	0x2000001c
 800969c:	20000120 	.word	0x20000120

080096a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80096a4:	2200      	movs	r2, #0
 80096a6:	4905      	ldr	r1, [pc, #20]	; (80096bc <CDC_Init_FS+0x1c>)
 80096a8:	4805      	ldr	r0, [pc, #20]	; (80096c0 <CDC_Init_FS+0x20>)
 80096aa:	f7fe fe56 	bl	800835a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80096ae:	4905      	ldr	r1, [pc, #20]	; (80096c4 <CDC_Init_FS+0x24>)
 80096b0:	4803      	ldr	r0, [pc, #12]	; (80096c0 <CDC_Init_FS+0x20>)
 80096b2:	f7fe fe70 	bl	8008396 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80096b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20001000 	.word	0x20001000
 80096c0:	20000530 	.word	0x20000530
 80096c4:	20000800 	.word	0x20000800

080096c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	6039      	str	r1, [r7, #0]
 80096e2:	71fb      	strb	r3, [r7, #7]
 80096e4:	4613      	mov	r3, r2
 80096e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80096e8:	79fb      	ldrb	r3, [r7, #7]
 80096ea:	2b23      	cmp	r3, #35	; 0x23
 80096ec:	d84a      	bhi.n	8009784 <CDC_Control_FS+0xac>
 80096ee:	a201      	add	r2, pc, #4	; (adr r2, 80096f4 <CDC_Control_FS+0x1c>)
 80096f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f4:	08009785 	.word	0x08009785
 80096f8:	08009785 	.word	0x08009785
 80096fc:	08009785 	.word	0x08009785
 8009700:	08009785 	.word	0x08009785
 8009704:	08009785 	.word	0x08009785
 8009708:	08009785 	.word	0x08009785
 800970c:	08009785 	.word	0x08009785
 8009710:	08009785 	.word	0x08009785
 8009714:	08009785 	.word	0x08009785
 8009718:	08009785 	.word	0x08009785
 800971c:	08009785 	.word	0x08009785
 8009720:	08009785 	.word	0x08009785
 8009724:	08009785 	.word	0x08009785
 8009728:	08009785 	.word	0x08009785
 800972c:	08009785 	.word	0x08009785
 8009730:	08009785 	.word	0x08009785
 8009734:	08009785 	.word	0x08009785
 8009738:	08009785 	.word	0x08009785
 800973c:	08009785 	.word	0x08009785
 8009740:	08009785 	.word	0x08009785
 8009744:	08009785 	.word	0x08009785
 8009748:	08009785 	.word	0x08009785
 800974c:	08009785 	.word	0x08009785
 8009750:	08009785 	.word	0x08009785
 8009754:	08009785 	.word	0x08009785
 8009758:	08009785 	.word	0x08009785
 800975c:	08009785 	.word	0x08009785
 8009760:	08009785 	.word	0x08009785
 8009764:	08009785 	.word	0x08009785
 8009768:	08009785 	.word	0x08009785
 800976c:	08009785 	.word	0x08009785
 8009770:	08009785 	.word	0x08009785
 8009774:	08009785 	.word	0x08009785
 8009778:	08009785 	.word	0x08009785
 800977c:	08009785 	.word	0x08009785
 8009780:	08009785 	.word	0x08009785
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009784:	bf00      	nop
  }

  return (USBD_OK);
 8009786:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800979e:	6879      	ldr	r1, [r7, #4]
 80097a0:	4805      	ldr	r0, [pc, #20]	; (80097b8 <CDC_Receive_FS+0x24>)
 80097a2:	f7fe fdf8 	bl	8008396 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097a6:	4804      	ldr	r0, [pc, #16]	; (80097b8 <CDC_Receive_FS+0x24>)
 80097a8:	f7fe fe0e 	bl	80083c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80097ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	20000530 	.word	0x20000530

080097bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	4613      	mov	r3, r2
 80097c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80097ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
	...

080097e0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	6039      	str	r1, [r7, #0]
 80097ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2212      	movs	r2, #18
 80097f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80097f2:	4b03      	ldr	r3, [pc, #12]	; (8009800 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	20000154 	.word	0x20000154

08009804 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	6039      	str	r1, [r7, #0]
 800980e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	2204      	movs	r2, #4
 8009814:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009816:	4b03      	ldr	r3, [pc, #12]	; (8009824 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	20000168 	.word	0x20000168

08009828 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	6039      	str	r1, [r7, #0]
 8009832:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d105      	bne.n	8009846 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	4907      	ldr	r1, [pc, #28]	; (800985c <USBD_CDC_ProductStrDescriptor+0x34>)
 800983e:	4808      	ldr	r0, [pc, #32]	; (8009860 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009840:	f7ff fe1e 	bl	8009480 <USBD_GetString>
 8009844:	e004      	b.n	8009850 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4904      	ldr	r1, [pc, #16]	; (800985c <USBD_CDC_ProductStrDescriptor+0x34>)
 800984a:	4805      	ldr	r0, [pc, #20]	; (8009860 <USBD_CDC_ProductStrDescriptor+0x38>)
 800984c:	f7ff fe18 	bl	8009480 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009850:	4b02      	ldr	r3, [pc, #8]	; (800985c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20001800 	.word	0x20001800
 8009860:	0800a0ec 	.word	0x0800a0ec

08009864 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	4603      	mov	r3, r0
 800986c:	6039      	str	r1, [r7, #0]
 800986e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	4904      	ldr	r1, [pc, #16]	; (8009884 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009874:	4804      	ldr	r0, [pc, #16]	; (8009888 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009876:	f7ff fe03 	bl	8009480 <USBD_GetString>
  return USBD_StrDesc;
 800987a:	4b02      	ldr	r3, [pc, #8]	; (8009884 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800987c:	4618      	mov	r0, r3
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20001800 	.word	0x20001800
 8009888:	0800a0f8 	.word	0x0800a0f8

0800988c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	6039      	str	r1, [r7, #0]
 8009896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	221a      	movs	r2, #26
 800989c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800989e:	f000 f843 	bl	8009928 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80098a2:	4b02      	ldr	r3, [pc, #8]	; (80098ac <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	2000016c 	.word	0x2000016c

080098b0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	6039      	str	r1, [r7, #0]
 80098ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098bc:	79fb      	ldrb	r3, [r7, #7]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d105      	bne.n	80098ce <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	4907      	ldr	r1, [pc, #28]	; (80098e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80098c6:	4808      	ldr	r0, [pc, #32]	; (80098e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80098c8:	f7ff fdda 	bl	8009480 <USBD_GetString>
 80098cc:	e004      	b.n	80098d8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	4904      	ldr	r1, [pc, #16]	; (80098e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80098d2:	4805      	ldr	r0, [pc, #20]	; (80098e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80098d4:	f7ff fdd4 	bl	8009480 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098d8:	4b02      	ldr	r3, [pc, #8]	; (80098e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20001800 	.word	0x20001800
 80098e8:	0800a100 	.word	0x0800a100

080098ec <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	6039      	str	r1, [r7, #0]
 80098f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098f8:	79fb      	ldrb	r3, [r7, #7]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d105      	bne.n	800990a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	4907      	ldr	r1, [pc, #28]	; (8009920 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009902:	4808      	ldr	r0, [pc, #32]	; (8009924 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009904:	f7ff fdbc 	bl	8009480 <USBD_GetString>
 8009908:	e004      	b.n	8009914 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	4904      	ldr	r1, [pc, #16]	; (8009920 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800990e:	4805      	ldr	r0, [pc, #20]	; (8009924 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009910:	f7ff fdb6 	bl	8009480 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009914:	4b02      	ldr	r3, [pc, #8]	; (8009920 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	20001800 	.word	0x20001800
 8009924:	0800a10c 	.word	0x0800a10c

08009928 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800992e:	4b0f      	ldr	r3, [pc, #60]	; (800996c <Get_SerialNum+0x44>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009934:	4b0e      	ldr	r3, [pc, #56]	; (8009970 <Get_SerialNum+0x48>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800993a:	4b0e      	ldr	r3, [pc, #56]	; (8009974 <Get_SerialNum+0x4c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4413      	add	r3, r2
 8009946:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d009      	beq.n	8009962 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800994e:	2208      	movs	r2, #8
 8009950:	4909      	ldr	r1, [pc, #36]	; (8009978 <Get_SerialNum+0x50>)
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 f814 	bl	8009980 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009958:	2204      	movs	r2, #4
 800995a:	4908      	ldr	r1, [pc, #32]	; (800997c <Get_SerialNum+0x54>)
 800995c:	68b8      	ldr	r0, [r7, #8]
 800995e:	f000 f80f 	bl	8009980 <IntToUnicode>
  }
}
 8009962:	bf00      	nop
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	1fff7590 	.word	0x1fff7590
 8009970:	1fff7594 	.word	0x1fff7594
 8009974:	1fff7598 	.word	0x1fff7598
 8009978:	2000016e 	.word	0x2000016e
 800997c:	2000017e 	.word	0x2000017e

08009980 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	4613      	mov	r3, r2
 800998c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800998e:	2300      	movs	r3, #0
 8009990:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009992:	2300      	movs	r3, #0
 8009994:	75fb      	strb	r3, [r7, #23]
 8009996:	e027      	b.n	80099e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	0f1b      	lsrs	r3, r3, #28
 800999c:	2b09      	cmp	r3, #9
 800999e:	d80b      	bhi.n	80099b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	0f1b      	lsrs	r3, r3, #28
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	4619      	mov	r1, r3
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	440b      	add	r3, r1
 80099b0:	3230      	adds	r2, #48	; 0x30
 80099b2:	b2d2      	uxtb	r2, r2
 80099b4:	701a      	strb	r2, [r3, #0]
 80099b6:	e00a      	b.n	80099ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	0f1b      	lsrs	r3, r3, #28
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	7dfb      	ldrb	r3, [r7, #23]
 80099c0:	005b      	lsls	r3, r3, #1
 80099c2:	4619      	mov	r1, r3
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	440b      	add	r3, r1
 80099c8:	3237      	adds	r2, #55	; 0x37
 80099ca:	b2d2      	uxtb	r2, r2
 80099cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	011b      	lsls	r3, r3, #4
 80099d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	005b      	lsls	r3, r3, #1
 80099d8:	3301      	adds	r3, #1
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	4413      	add	r3, r2
 80099de:	2200      	movs	r2, #0
 80099e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
 80099e4:	3301      	adds	r3, #1
 80099e6:	75fb      	strb	r3, [r7, #23]
 80099e8:	7dfa      	ldrb	r2, [r7, #23]
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d3d3      	bcc.n	8009998 <IntToUnicode+0x18>
  }
}
 80099f0:	bf00      	nop
 80099f2:	371c      	adds	r7, #28
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <LL_AHB2_GRP1_EnableClock>:
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009a20:	68fb      	ldr	r3, [r7, #12]
}
 8009a22:	bf00      	nop
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <LL_APB1_GRP1_EnableClock>:
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b085      	sub	sp, #20
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4013      	ands	r3, r2
 8009a50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009a52:	68fb      	ldr	r3, [r7, #12]
}
 8009a54:	bf00      	nop
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a68:	f107 030c 	add.w	r3, r7, #12
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	605a      	str	r2, [r3, #4]
 8009a72:	609a      	str	r2, [r3, #8]
 8009a74:	60da      	str	r2, [r3, #12]
 8009a76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a13      	ldr	r2, [pc, #76]	; (8009acc <HAL_PCD_MspInit+0x6c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d120      	bne.n	8009ac4 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a82:	2001      	movs	r0, #1
 8009a84:	f7ff ffba 	bl	80099fc <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009a88:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a8e:	2302      	movs	r3, #2
 8009a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a92:	2300      	movs	r3, #0
 8009a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a96:	2300      	movs	r3, #0
 8009a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8009a9a:	230a      	movs	r3, #10
 8009a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a9e:	f107 030c 	add.w	r3, r7, #12
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009aa8:	f7f8 ffe2 	bl	8002a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009aac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009ab0:	f7ff ffbd 	bl	8009a2e <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	2014      	movs	r0, #20
 8009aba:	f7f8 fd30 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009abe:	2014      	movs	r0, #20
 8009ac0:	f7f8 fd47 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009ac4:	bf00      	nop
 8009ac6:	3720      	adds	r7, #32
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	40006800 	.word	0x40006800

08009ad0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	f7fe fd3a 	bl	8008560 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	460b      	mov	r3, r1
 8009afe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8009b06:	78fb      	ldrb	r3, [r7, #3]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	015b      	lsls	r3, r3, #5
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	78fb      	ldrb	r3, [r7, #3]
 8009b16:	4619      	mov	r1, r3
 8009b18:	f7fe fd75 	bl	8008606 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009b1c:	bf00      	nop
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8009b36:	78fb      	ldrb	r3, [r7, #3]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	015b      	lsls	r3, r3, #5
 8009b3c:	4413      	add	r3, r2
 8009b3e:	333c      	adds	r3, #60	; 0x3c
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	78fb      	ldrb	r3, [r7, #3]
 8009b44:	4619      	mov	r1, r3
 8009b46:	f7fe fdc1 	bl	80086cc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b082      	sub	sp, #8
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fe fed5 	bl	8008910 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009b66:	bf00      	nop
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b76:	2301      	movs	r3, #1
 8009b78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d001      	beq.n	8009b86 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b82:	f7f6 fdef 	bl	8000764 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009b8c:	7bfa      	ldrb	r2, [r7, #15]
 8009b8e:	4611      	mov	r1, r2
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe fe7f 	bl	8008894 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fe fe2b 	bl	80087f8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009ba2:	bf00      	nop
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
	...

08009bac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe fe7a 	bl	80088b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d005      	beq.n	8009bd4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bc8:	4b04      	ldr	r3, [pc, #16]	; (8009bdc <HAL_PCD_SuspendCallback+0x30>)
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	4a03      	ldr	r2, [pc, #12]	; (8009bdc <HAL_PCD_SuspendCallback+0x30>)
 8009bce:	f043 0306 	orr.w	r3, r3, #6
 8009bd2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009bd4:	bf00      	nop
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	e000ed00 	.word	0xe000ed00

08009be0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d007      	beq.n	8009c00 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bf0:	4b08      	ldr	r3, [pc, #32]	; (8009c14 <HAL_PCD_ResumeCallback+0x34>)
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	4a07      	ldr	r2, [pc, #28]	; (8009c14 <HAL_PCD_ResumeCallback+0x34>)
 8009bf6:	f023 0306 	bic.w	r3, r3, #6
 8009bfa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009bfc:	f000 f9f4 	bl	8009fe8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fe fe6a 	bl	80088e0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009c0c:	bf00      	nop
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	e000ed00 	.word	0xe000ed00

08009c18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009c20:	4a2c      	ldr	r2, [pc, #176]	; (8009cd4 <USBD_LL_Init+0xbc>)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a2a      	ldr	r2, [pc, #168]	; (8009cd4 <USBD_LL_Init+0xbc>)
 8009c2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009c30:	f7f9 fffe 	bl	8003c30 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009c34:	4b27      	ldr	r3, [pc, #156]	; (8009cd4 <USBD_LL_Init+0xbc>)
 8009c36:	4a28      	ldr	r2, [pc, #160]	; (8009cd8 <USBD_LL_Init+0xc0>)
 8009c38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009c3a:	4b26      	ldr	r3, [pc, #152]	; (8009cd4 <USBD_LL_Init+0xbc>)
 8009c3c:	2208      	movs	r2, #8
 8009c3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009c40:	4b24      	ldr	r3, [pc, #144]	; (8009cd4 <USBD_LL_Init+0xbc>)
 8009c42:	2202      	movs	r2, #2
 8009c44:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c46:	4b23      	ldr	r3, [pc, #140]	; (8009cd4 <USBD_LL_Init+0xbc>)
 8009c48:	2202      	movs	r2, #2
 8009c4a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009c4c:	4b21      	ldr	r3, [pc, #132]	; (8009cd4 <USBD_LL_Init+0xbc>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009c52:	4b20      	ldr	r3, [pc, #128]	; (8009cd4 <USBD_LL_Init+0xbc>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009c58:	4b1e      	ldr	r3, [pc, #120]	; (8009cd4 <USBD_LL_Init+0xbc>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009c5e:	4b1d      	ldr	r3, [pc, #116]	; (8009cd4 <USBD_LL_Init+0xbc>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009c64:	481b      	ldr	r0, [pc, #108]	; (8009cd4 <USBD_LL_Init+0xbc>)
 8009c66:	f7f9 f88b 	bl	8002d80 <HAL_PCD_Init>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009c70:	f7f6 fd78 	bl	8000764 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c7a:	2318      	movs	r3, #24
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2100      	movs	r1, #0
 8009c80:	f7f9 ff50 	bl	8003b24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c8a:	2358      	movs	r3, #88	; 0x58
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	2180      	movs	r1, #128	; 0x80
 8009c90:	f7f9 ff48 	bl	8003b24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c9a:	23c0      	movs	r3, #192	; 0xc0
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2181      	movs	r1, #129	; 0x81
 8009ca0:	f7f9 ff40 	bl	8003b24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009caa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009cae:	2200      	movs	r2, #0
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	f7f9 ff37 	bl	8003b24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	2182      	movs	r1, #130	; 0x82
 8009cc4:	f7f9 ff2e 	bl	8003b24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20001a00 	.word	0x20001a00
 8009cd8:	40006800 	.word	0x40006800

08009cdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7f9 f8ff 	bl	8002ef6 <HAL_PCD_Start>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 f97a 	bl	8009ff8 <USBD_Get_USB_Status>
 8009d04:	4603      	mov	r3, r0
 8009d06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d08:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	4608      	mov	r0, r1
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	461a      	mov	r2, r3
 8009d20:	4603      	mov	r3, r0
 8009d22:	70fb      	strb	r3, [r7, #3]
 8009d24:	460b      	mov	r3, r1
 8009d26:	70bb      	strb	r3, [r7, #2]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d3a:	78bb      	ldrb	r3, [r7, #2]
 8009d3c:	883a      	ldrh	r2, [r7, #0]
 8009d3e:	78f9      	ldrb	r1, [r7, #3]
 8009d40:	f7f9 fa6e 	bl	8003220 <HAL_PCD_EP_Open>
 8009d44:	4603      	mov	r3, r0
 8009d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 f954 	bl	8009ff8 <USBD_Get_USB_Status>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	460b      	mov	r3, r1
 8009d68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d78:	78fa      	ldrb	r2, [r7, #3]
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7f9 faaf 	bl	80032e0 <HAL_PCD_EP_Close>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d86:	7bfb      	ldrb	r3, [r7, #15]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 f935 	bl	8009ff8 <USBD_Get_USB_Status>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d92:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009db6:	78fa      	ldrb	r2, [r7, #3]
 8009db8:	4611      	mov	r1, r2
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7f9 fb5a 	bl	8003474 <HAL_PCD_EP_SetStall>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 f916 	bl	8009ff8 <USBD_Get_USB_Status>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	460b      	mov	r3, r1
 8009de4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009df4:	78fa      	ldrb	r2, [r7, #3]
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7f9 fb95 	bl	8003528 <HAL_PCD_EP_ClrStall>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 f8f7 	bl	8009ff8 <USBD_Get_USB_Status>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	da08      	bge.n	8009e46 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	015b      	lsls	r3, r3, #5
 8009e3e:	4413      	add	r3, r2
 8009e40:	332a      	adds	r3, #42	; 0x2a
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	e008      	b.n	8009e58 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e46:	78fb      	ldrb	r3, [r7, #3]
 8009e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	015b      	lsls	r3, r3, #5
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009e56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e7e:	78fa      	ldrb	r2, [r7, #3]
 8009e80:	4611      	mov	r1, r2
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7f9 f9a7 	bl	80031d6 <HAL_PCD_SetAddress>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 f8b2 	bl	8009ff8 <USBD_Get_USB_Status>
 8009e94:	4603      	mov	r3, r0
 8009e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b086      	sub	sp, #24
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	60f8      	str	r0, [r7, #12]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	603b      	str	r3, [r7, #0]
 8009eae:	460b      	mov	r3, r1
 8009eb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ec0:	7af9      	ldrb	r1, [r7, #11]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	f7f9 fa9c 	bl	8003402 <HAL_PCD_EP_Transmit>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f000 f891 	bl	8009ff8 <USBD_Get_USB_Status>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009eda:	7dbb      	ldrb	r3, [r7, #22]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	607a      	str	r2, [r7, #4]
 8009eee:	603b      	str	r3, [r7, #0]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f02:	7af9      	ldrb	r1, [r7, #11]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	f7f9 fa2c 	bl	8003364 <HAL_PCD_EP_Receive>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f10:	7dfb      	ldrb	r3, [r7, #23]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 f870 	bl	8009ff8 <USBD_Get_USB_Status>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3718      	adds	r7, #24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b082      	sub	sp, #8
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	460b      	mov	r3, r1
 8009f30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f38:	78fa      	ldrb	r2, [r7, #3]
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7f9 fa4b 	bl	80033d8 <HAL_PCD_EP_GetRxCount>
 8009f42:	4603      	mov	r3, r0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	460b      	mov	r3, r1
 8009f56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009f58:	78fb      	ldrb	r3, [r7, #3]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d002      	beq.n	8009f64 <HAL_PCDEx_LPM_Callback+0x18>
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d013      	beq.n	8009f8a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009f62:	e023      	b.n	8009fac <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d007      	beq.n	8009f7c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009f6c:	f000 f83c 	bl	8009fe8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f70:	4b10      	ldr	r3, [pc, #64]	; (8009fb4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	4a0f      	ldr	r2, [pc, #60]	; (8009fb4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009f76:	f023 0306 	bic.w	r3, r3, #6
 8009f7a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fcac 	bl	80088e0 <USBD_LL_Resume>
    break;
 8009f88:	e010      	b.n	8009fac <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fe fc8f 	bl	80088b4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d005      	beq.n	8009faa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f9e:	4b05      	ldr	r3, [pc, #20]	; (8009fb4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	4a04      	ldr	r2, [pc, #16]	; (8009fb4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009fa4:	f043 0306 	orr.w	r3, r3, #6
 8009fa8:	6113      	str	r3, [r2, #16]
    break;
 8009faa:	bf00      	nop
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	e000ed00 	.word	0xe000ed00

08009fb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009fc0:	4b03      	ldr	r3, [pc, #12]	; (8009fd0 <USBD_static_malloc+0x18>)
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	370c      	adds	r7, #12
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	200001b0 	.word	0x200001b0

08009fd4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]

}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 8009fec:	bf00      	nop
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
	...

08009ff8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a006:	79fb      	ldrb	r3, [r7, #7]
 800a008:	2b03      	cmp	r3, #3
 800a00a:	d817      	bhi.n	800a03c <USBD_Get_USB_Status+0x44>
 800a00c:	a201      	add	r2, pc, #4	; (adr r2, 800a014 <USBD_Get_USB_Status+0x1c>)
 800a00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a012:	bf00      	nop
 800a014:	0800a025 	.word	0x0800a025
 800a018:	0800a02b 	.word	0x0800a02b
 800a01c:	0800a031 	.word	0x0800a031
 800a020:	0800a037 	.word	0x0800a037
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a024:	2300      	movs	r3, #0
 800a026:	73fb      	strb	r3, [r7, #15]
    break;
 800a028:	e00b      	b.n	800a042 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a02a:	2303      	movs	r3, #3
 800a02c:	73fb      	strb	r3, [r7, #15]
    break;
 800a02e:	e008      	b.n	800a042 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a030:	2301      	movs	r3, #1
 800a032:	73fb      	strb	r3, [r7, #15]
    break;
 800a034:	e005      	b.n	800a042 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a036:	2303      	movs	r3, #3
 800a038:	73fb      	strb	r3, [r7, #15]
    break;
 800a03a:	e002      	b.n	800a042 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a03c:	2303      	movs	r3, #3
 800a03e:	73fb      	strb	r3, [r7, #15]
    break;
 800a040:	bf00      	nop
  }
  return usb_status;
 800a042:	7bfb      	ldrb	r3, [r7, #15]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <__libc_init_array>:
 800a050:	b570      	push	{r4, r5, r6, lr}
 800a052:	4e0d      	ldr	r6, [pc, #52]	; (800a088 <__libc_init_array+0x38>)
 800a054:	4c0d      	ldr	r4, [pc, #52]	; (800a08c <__libc_init_array+0x3c>)
 800a056:	1ba4      	subs	r4, r4, r6
 800a058:	10a4      	asrs	r4, r4, #2
 800a05a:	2500      	movs	r5, #0
 800a05c:	42a5      	cmp	r5, r4
 800a05e:	d109      	bne.n	800a074 <__libc_init_array+0x24>
 800a060:	4e0b      	ldr	r6, [pc, #44]	; (800a090 <__libc_init_array+0x40>)
 800a062:	4c0c      	ldr	r4, [pc, #48]	; (800a094 <__libc_init_array+0x44>)
 800a064:	f000 f820 	bl	800a0a8 <_init>
 800a068:	1ba4      	subs	r4, r4, r6
 800a06a:	10a4      	asrs	r4, r4, #2
 800a06c:	2500      	movs	r5, #0
 800a06e:	42a5      	cmp	r5, r4
 800a070:	d105      	bne.n	800a07e <__libc_init_array+0x2e>
 800a072:	bd70      	pop	{r4, r5, r6, pc}
 800a074:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a078:	4798      	blx	r3
 800a07a:	3501      	adds	r5, #1
 800a07c:	e7ee      	b.n	800a05c <__libc_init_array+0xc>
 800a07e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a082:	4798      	blx	r3
 800a084:	3501      	adds	r5, #1
 800a086:	e7f2      	b.n	800a06e <__libc_init_array+0x1e>
 800a088:	0800a19c 	.word	0x0800a19c
 800a08c:	0800a19c 	.word	0x0800a19c
 800a090:	0800a19c 	.word	0x0800a19c
 800a094:	0800a1a0 	.word	0x0800a1a0

0800a098 <memset>:
 800a098:	4402      	add	r2, r0
 800a09a:	4603      	mov	r3, r0
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d100      	bne.n	800a0a2 <memset+0xa>
 800a0a0:	4770      	bx	lr
 800a0a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a0a6:	e7f9      	b.n	800a09c <memset+0x4>

0800a0a8 <_init>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	bf00      	nop
 800a0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ae:	bc08      	pop	{r3}
 800a0b0:	469e      	mov	lr, r3
 800a0b2:	4770      	bx	lr

0800a0b4 <_fini>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	bf00      	nop
 800a0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ba:	bc08      	pop	{r3}
 800a0bc:	469e      	mov	lr, r3
 800a0be:	4770      	bx	lr

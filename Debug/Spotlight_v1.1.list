
Spotlight_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013734  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08013874  08013874  00023874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013dc8  08013dc8  00023dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013dcc  08013dcc  00023dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001bc  20000004  08013dd0  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  200001c0  08013f8c  000301c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000025c  08014025  0003025c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00006518  20000270  08014036  00030270  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20006788  08014036  00036788  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003026d  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000000b8  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000a77  200300e0  200300e0  00040000  2**2
                  ALLOC
 14 .debug_info   0005cac9  00000000  00000000  0003029d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000a402  00000000  00000000  0008cd66  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000038a0  00000000  00000000  00097168  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003448  00000000  00000000  0009aa08  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038b93  00000000  00000000  0009de50  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0003a9a1  00000000  00000000  000d69e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00116619  00000000  00000000  00111384  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0022799d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e774  00000000  00000000  00227a18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000270 	.word	0x20000270
 800015c:	00000000 	.word	0x00000000
 8000160:	0801385c 	.word	0x0801385c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000274 	.word	0x20000274
 800017c:	0801385c 	.word	0x0801385c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>:
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
//Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
//                                      int motor_pin_3, int motor_pin_4)
Stepper::Stepper(int32_t number_of_steps, 	GPIO_TypeDef* motor_pin_1_port, uint16_t motor_pin_1,
 8000194:	b480      	push	{r7}
 8000196:	b085      	sub	sp, #20
 8000198:	af00      	add	r7, sp, #0
 800019a:	60f8      	str	r0, [r7, #12]
 800019c:	60b9      	str	r1, [r7, #8]
 800019e:	607a      	str	r2, [r7, #4]
 80001a0:	807b      	strh	r3, [r7, #2]
											GPIO_TypeDef* motor_pin_2_port, uint16_t motor_pin_2,
											GPIO_TypeDef* motor_pin_3_port, uint16_t motor_pin_3,
											GPIO_TypeDef* motor_pin_4_port, uint16_t motor_pin_4,
											volatile uint16_t* stop_sensor, uint8_t motor_direction)
{
  this->step_number = 0;    // which step the motor is on
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	2200      	movs	r2, #0
 80001a6:	611a      	str	r2, [r3, #16]
  this->direction = 0;      // motor direction
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	2200      	movs	r2, #0
 80001b2:	649a      	str	r2, [r3, #72]	; 0x48
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	68ba      	ldr	r2, [r7, #8]
 80001b8:	609a      	str	r2, [r3, #8]

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	887a      	ldrh	r2, [r7, #2]
 80001be:	841a      	strh	r2, [r3, #32]
  this->motor_pin_2 = motor_pin_2;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	8bba      	ldrh	r2, [r7, #28]
 80001c4:	845a      	strh	r2, [r3, #34]	; 0x22
  this->motor_pin_3 = motor_pin_3;
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80001ca:	849a      	strh	r2, [r3, #36]	; 0x24
  this->motor_pin_4 = motor_pin_4;
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80001d0:	84da      	strh	r2, [r3, #38]	; 0x26

  // Arduino ports for the motor control pin connection:
  this->motor_pin_1_port = motor_pin_1_port;
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	62da      	str	r2, [r3, #44]	; 0x2c
  this->motor_pin_2_port = motor_pin_2_port;
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	69ba      	ldr	r2, [r7, #24]
 80001dc:	631a      	str	r2, [r3, #48]	; 0x30
  this->motor_pin_3_port = motor_pin_3_port;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	6a3a      	ldr	r2, [r7, #32]
 80001e2:	635a      	str	r2, [r3, #52]	; 0x34
  this->motor_pin_4_port = motor_pin_4_port;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80001e8:	639a      	str	r2, [r3, #56]	; 0x38

  this->motor_dir = motor_direction;
 80001ea:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
//  pinMode(this->motor_pin_2, OUTPUT);
//  pinMode(this->motor_pin_3, OUTPUT);
//  pinMode(this->motor_pin_4, OUTPUT);

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	2200      	movs	r2, #0
 80001f8:	851a      	strh	r2, [r3, #40]	; 0x28

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	2204      	movs	r2, #4
 80001fe:	60da      	str	r2, [r3, #12]

  // pin that is continously updated via DMA on the magnetic end stop value (0 means the magnet is directly aligned with the sensor)
  this->end_stop = stop_sensor;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000204:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	4618      	mov	r0, r3
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <_ZN7Stepper8setSpeedEl>:

/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	4a07      	ldr	r2, [pc, #28]	; (8000240 <_ZN7Stepper8setSpeedEl+0x2c>)
 8000224:	fb92 f2f3 	sdiv	r2, r2, r3
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	fb92 f3f3 	sdiv	r3, r2, r3
 800022e:	461a      	mov	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	605a      	str	r2, [r3, #4]
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	03938700 	.word	0x03938700

08000244 <_ZN7Stepper12setStepBoundEl>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */

void Stepper::setStepBound(int32_t max_step){
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
	this->max_step = max_step;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	615a      	str	r2, [r3, #20]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr

08000260 <_ZN7Stepper4stepEi>:

uint32_t Stepper::step(int steps_to_move)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
	// break if requested steps exceed maximum range
	if( ((this->step_tracker + steps_to_move) > this->max_step) || (this->step_tracker - steps_to_move) < 0 ){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	699a      	ldr	r2, [r3, #24]
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	4413      	add	r3, r2
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	6952      	ldr	r2, [r2, #20]
 8000276:	4293      	cmp	r3, r2
 8000278:	d901      	bls.n	800027e <_ZN7Stepper4stepEi+0x1e>
		return 0;
 800027a:	2300      	movs	r3, #0
 800027c:	e07f      	b.n	800037e <_ZN7Stepper4stepEi+0x11e>
	}

	this->step_tracker += steps_to_move;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	699a      	ldr	r2, [r3, #24]
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	441a      	add	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	619a      	str	r2, [r3, #24]

	// compensate in case motor direction is flipped
	steps_to_move = steps_to_move * this->motor_dir;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8000290:	461a      	mov	r2, r3
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	fb02 f303 	mul.w	r3, r2, r3
 8000298:	603b      	str	r3, [r7, #0]

	// if requesting to go to 0th position, hone axis to limit drift
	if(this->step_tracker == 0){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d103      	bne.n	80002aa <_ZN7Stepper4stepEi+0x4a>
		honeAxis();
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f000 fb26 	bl	80008f4 <_ZN7Stepper8honeAxisEv>
 80002a8:	e068      	b.n	800037c <_ZN7Stepper4stepEi+0x11c>
	}
	else{
		uint32_t steps_left = abs(steps_to_move);  // how many steps to take
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	bfb8      	it	lt
 80002b0:	425b      	neglt	r3, r3
 80002b2:	60fb      	str	r3, [r7, #12]
	//	uint32_t steps_left;
	  // determine direction based on whether steps_to_mode is + or -:
	  if (steps_to_move > 0) { this->direction = 1; }
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	dd02      	ble.n	80002c0 <_ZN7Stepper4stepEi+0x60>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2201      	movs	r2, #1
 80002be:	601a      	str	r2, [r3, #0]
	  if (steps_to_move < 0) { this->direction = 0; }
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	da02      	bge.n	80002cc <_ZN7Stepper4stepEi+0x6c>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]


	  // decrement the number of steps, moving one step each time:
	  while (steps_left > 0)
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d054      	beq.n	800037c <_ZN7Stepper4stepEi+0x11c>
	  {
			  //    unsigned long now = micros();
		  uint32_t now = __HAL_TIM_GET_COUNTER(&htim2);
 80002d2:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <_ZN7Stepper4stepEi+0x128>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d8:	60bb      	str	r3, [r7, #8]
		// move only if the appropriate delay has passed:
		 if (now - this->last_step_time >= this->step_delay)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	1ad2      	subs	r2, r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d3f0      	bcc.n	80002cc <_ZN7Stepper4stepEi+0x6c>
		{
		  // get the timeStamp of when you stepped:
		  this->last_step_time = now;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	649a      	str	r2, [r3, #72]	; 0x48
		  // increment or decrement the step number,
		  // depending on direction:
		  if (this->direction == 1)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d10e      	bne.n	8000316 <_ZN7Stepper4stepEi+0xb6>
		  {
			this->step_number++;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	1c5a      	adds	r2, r3, #1
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	611a      	str	r2, [r3, #16]
			if (this->step_number == this->number_of_steps) {
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	691a      	ldr	r2, [r3, #16]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	429a      	cmp	r2, r3
 800030c:	d110      	bne.n	8000330 <_ZN7Stepper4stepEi+0xd0>
			  this->step_number = 0;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
 8000314:	e00c      	b.n	8000330 <_ZN7Stepper4stepEi+0xd0>
			}
		  }
		  else
		  {
			if (this->step_number == 0) {
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d103      	bne.n	8000326 <_ZN7Stepper4stepEi+0xc6>
			  this->step_number = this->number_of_steps;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689a      	ldr	r2, [r3, #8]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	611a      	str	r2, [r3, #16]
			}
			this->step_number--;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	691b      	ldr	r3, [r3, #16]
 800032a:	1e5a      	subs	r2, r3, #1
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	611a      	str	r2, [r3, #16]
		  }
		  // decrement the steps left:
		  steps_left--;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	3b01      	subs	r3, #1
 8000334:	60fb      	str	r3, [r7, #12]
		  // step the motor to step number 0, 1, ..., {3 or 10}
		  if (this->pin_count == 5)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	2b05      	cmp	r3, #5
 800033c:	d110      	bne.n	8000360 <_ZN7Stepper4stepEi+0x100>
			stepMotor(this->step_number % 10);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	691a      	ldr	r2, [r3, #16]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <_ZN7Stepper4stepEi+0x12c>)
 8000344:	fb83 1302 	smull	r1, r3, r3, r2
 8000348:	1099      	asrs	r1, r3, #2
 800034a:	17d3      	asrs	r3, r2, #31
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	460b      	mov	r3, r1
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	440b      	add	r3, r1
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	1ad1      	subs	r1, r2, r3
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f000 f819 	bl	8000390 <_ZN7Stepper9stepMotorEi>
 800035e:	e7b5      	b.n	80002cc <_ZN7Stepper4stepEi+0x6c>
		  else
			stepMotor(this->step_number % 4);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	425a      	negs	r2, r3
 8000366:	f003 0303 	and.w	r3, r3, #3
 800036a:	f002 0203 	and.w	r2, r2, #3
 800036e:	bf58      	it	pl
 8000370:	4253      	negpl	r3, r2
 8000372:	4619      	mov	r1, r3
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 f80b 	bl	8000390 <_ZN7Stepper9stepMotorEi>
	  while (steps_left > 0)
 800037a:	e7a7      	b.n	80002cc <_ZN7Stepper4stepEi+0x6c>
		}
	  }
	}
  return 1;
 800037c:	2301      	movs	r3, #1
}
 800037e:	4618      	mov	r0, r3
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20004f6c 	.word	0x20004f6c
 800038c:	66666667 	.word	0x66666667

08000390 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  if (this->pin_count == 2) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d152      	bne.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
    switch (thisStep) {
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	2b03      	cmp	r3, #3
 80003a6:	d84f      	bhi.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
 80003a8:	a201      	add	r2, pc, #4	; (adr r2, 80003b0 <_ZN7Stepper9stepMotorEi+0x20>)
 80003aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ae:	bf00      	nop
 80003b0:	080003c1 	.word	0x080003c1
 80003b4:	080003e3 	.word	0x080003e3
 80003b8:	08000405 	.word	0x08000405
 80003bc:	08000427 	.word	0x08000427
      case 0:  // 01
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	8c1b      	ldrh	r3, [r3, #32]
 80003c8:	2200      	movs	r2, #0
 80003ca:	4619      	mov	r1, r3
 80003cc:	f004 fd48 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80003d8:	2201      	movs	r2, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	f004 fd40 	bl	8004e60 <HAL_GPIO_WritePin>
      break;
 80003e0:	e032      	b.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
      case 1:  // 11
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	8c1b      	ldrh	r3, [r3, #32]
 80003ea:	2201      	movs	r2, #1
 80003ec:	4619      	mov	r1, r3
 80003ee:	f004 fd37 	bl	8004e60 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80003fa:	2201      	movs	r2, #1
 80003fc:	4619      	mov	r1, r3
 80003fe:	f004 fd2f 	bl	8004e60 <HAL_GPIO_WritePin>
      break;
 8000402:	e021      	b.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
      case 2:  // 10
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	8c1b      	ldrh	r3, [r3, #32]
 800040c:	2201      	movs	r2, #1
 800040e:	4619      	mov	r1, r3
 8000410:	f004 fd26 	bl	8004e60 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800041c:	2200      	movs	r2, #0
 800041e:	4619      	mov	r1, r3
 8000420:	f004 fd1e 	bl	8004e60 <HAL_GPIO_WritePin>
      break;
 8000424:	e010      	b.n	8000448 <_ZN7Stepper9stepMotorEi+0xb8>
      case 3:  // 00
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	8c1b      	ldrh	r3, [r3, #32]
 800042e:	2200      	movs	r2, #0
 8000430:	4619      	mov	r1, r3
 8000432:	f004 fd15 	bl	8004e60 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800043e:	2200      	movs	r2, #0
 8000440:	4619      	mov	r1, r3
 8000442:	f004 fd0d 	bl	8004e60 <HAL_GPIO_WritePin>
      break;
 8000446:	bf00      	nop
    }
  }
  if (this->pin_count == 4) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	2b04      	cmp	r3, #4
 800044e:	f040 8093 	bne.w	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
    switch (thisStep) {
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2b03      	cmp	r3, #3
 8000456:	f200 808f 	bhi.w	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
 800045a:	a201      	add	r2, pc, #4	; (adr r2, 8000460 <_ZN7Stepper9stepMotorEi+0xd0>)
 800045c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000460:	08000471 	.word	0x08000471
 8000464:	080004b3 	.word	0x080004b3
 8000468:	080004f5 	.word	0x080004f5
 800046c:	08000537 	.word	0x08000537
      case 0:  // 1010
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	8c1b      	ldrh	r3, [r3, #32]
 8000478:	2201      	movs	r2, #1
 800047a:	4619      	mov	r1, r3
 800047c:	f004 fcf0 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000488:	2200      	movs	r2, #0
 800048a:	4619      	mov	r1, r3
 800048c:	f004 fce8 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000498:	2201      	movs	r2, #1
 800049a:	4619      	mov	r1, r3
 800049c:	f004 fce0 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80004a8:	2200      	movs	r2, #0
 80004aa:	4619      	mov	r1, r3
 80004ac:	f004 fcd8 	bl	8004e60 <HAL_GPIO_WritePin>
      break;
 80004b0:	e062      	b.n	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 1:  // 0110
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	8c1b      	ldrh	r3, [r3, #32]
 80004ba:	2200      	movs	r2, #0
 80004bc:	4619      	mov	r1, r3
 80004be:	f004 fccf 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80004ca:	2201      	movs	r2, #1
 80004cc:	4619      	mov	r1, r3
 80004ce:	f004 fcc7 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80004da:	2201      	movs	r2, #1
 80004dc:	4619      	mov	r1, r3
 80004de:	f004 fcbf 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80004ea:	2200      	movs	r2, #0
 80004ec:	4619      	mov	r1, r3
 80004ee:	f004 fcb7 	bl	8004e60 <HAL_GPIO_WritePin>
      break;
 80004f2:	e041      	b.n	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 2:  //0101
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	8c1b      	ldrh	r3, [r3, #32]
 80004fc:	2200      	movs	r2, #0
 80004fe:	4619      	mov	r1, r3
 8000500:	f004 fcae 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800050c:	2201      	movs	r2, #1
 800050e:	4619      	mov	r1, r3
 8000510:	f004 fca6 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800051c:	2200      	movs	r2, #0
 800051e:	4619      	mov	r1, r3
 8000520:	f004 fc9e 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800052c:	2201      	movs	r2, #1
 800052e:	4619      	mov	r1, r3
 8000530:	f004 fc96 	bl	8004e60 <HAL_GPIO_WritePin>
      break;
 8000534:	e020      	b.n	8000578 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 3:  //1001
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	8c1b      	ldrh	r3, [r3, #32]
 800053e:	2201      	movs	r2, #1
 8000540:	4619      	mov	r1, r3
 8000542:	f004 fc8d 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f004 fc85 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800055e:	2200      	movs	r2, #0
 8000560:	4619      	mov	r1, r3
 8000562:	f004 fc7d 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f004 fc75 	bl	8004e60 <HAL_GPIO_WritePin>
      break;
 8000576:	bf00      	nop
    }
  }

  if (this->pin_count == 5) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	2b05      	cmp	r3, #5
 800057e:	f040 81b5 	bne.w	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
    switch (thisStep) {
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	2b09      	cmp	r3, #9
 8000586:	f200 81b1 	bhi.w	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
 800058a:	a201      	add	r2, pc, #4	; (adr r2, 8000590 <_ZN7Stepper9stepMotorEi+0x200>)
 800058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000590:	080005b9 	.word	0x080005b9
 8000594:	0800060b 	.word	0x0800060b
 8000598:	0800065d 	.word	0x0800065d
 800059c:	080006af 	.word	0x080006af
 80005a0:	08000701 	.word	0x08000701
 80005a4:	08000753 	.word	0x08000753
 80005a8:	080007a5 	.word	0x080007a5
 80005ac:	080007f7 	.word	0x080007f7
 80005b0:	08000849 	.word	0x08000849
 80005b4:	0800089b 	.word	0x0800089b
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	8c1b      	ldrh	r3, [r3, #32]
 80005c0:	2200      	movs	r2, #0
 80005c2:	4619      	mov	r1, r3
 80005c4:	f004 fc4c 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f004 fc44 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	f004 fc3c 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80005f0:	2200      	movs	r2, #0
 80005f2:	4619      	mov	r1, r3
 80005f4:	f004 fc34 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	f004 fc2c 	bl	8004e60 <HAL_GPIO_WritePin>
        break;
 8000608:	e170      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	8c1b      	ldrh	r3, [r3, #32]
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	f004 fc23 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	f004 fc1b 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	f004 fc13 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000642:	2200      	movs	r2, #0
 8000644:	4619      	mov	r1, r3
 8000646:	f004 fc0b 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000652:	2201      	movs	r2, #1
 8000654:	4619      	mov	r1, r3
 8000656:	f004 fc03 	bl	8004e60 <HAL_GPIO_WritePin>
        break;
 800065a:	e147      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	8c1b      	ldrh	r3, [r3, #32]
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	f004 fbfa 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000674:	2201      	movs	r2, #1
 8000676:	4619      	mov	r1, r3
 8000678:	f004 fbf2 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000684:	2200      	movs	r2, #0
 8000686:	4619      	mov	r1, r3
 8000688:	f004 fbea 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	f004 fbe2 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	f004 fbda 	bl	8004e60 <HAL_GPIO_WritePin>
        break;
 80006ac:	e11e      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	8c1b      	ldrh	r3, [r3, #32]
 80006b6:	2200      	movs	r2, #0
 80006b8:	4619      	mov	r1, r3
 80006ba:	f004 fbd1 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80006c6:	2201      	movs	r2, #1
 80006c8:	4619      	mov	r1, r3
 80006ca:	f004 fbc9 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80006d6:	2200      	movs	r2, #0
 80006d8:	4619      	mov	r1, r3
 80006da:	f004 fbc1 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	f004 fbb9 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	f004 fbb1 	bl	8004e60 <HAL_GPIO_WritePin>
        break;
 80006fe:	e0f5      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	8c1b      	ldrh	r3, [r3, #32]
 8000708:	2201      	movs	r2, #1
 800070a:	4619      	mov	r1, r3
 800070c:	f004 fba8 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000718:	2201      	movs	r2, #1
 800071a:	4619      	mov	r1, r3
 800071c:	f004 fba0 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f004 fb98 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	f004 fb90 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000748:	2200      	movs	r2, #0
 800074a:	4619      	mov	r1, r3
 800074c:	f004 fb88 	bl	8004e60 <HAL_GPIO_WritePin>
        break;
 8000750:	e0cc      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	8c1b      	ldrh	r3, [r3, #32]
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	f004 fb7f 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f004 fb77 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800077a:	2200      	movs	r2, #0
 800077c:	4619      	mov	r1, r3
 800077e:	f004 fb6f 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800078a:	2201      	movs	r2, #1
 800078c:	4619      	mov	r1, r3
 800078e:	f004 fb67 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	f004 fb5f 	bl	8004e60 <HAL_GPIO_WritePin>
        break;
 80007a2:	e0a3      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	8c1b      	ldrh	r3, [r3, #32]
 80007ac:	2201      	movs	r2, #1
 80007ae:	4619      	mov	r1, r3
 80007b0:	f004 fb56 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	f004 fb4e 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	f004 fb46 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80007dc:	2201      	movs	r2, #1
 80007de:	4619      	mov	r1, r3
 80007e0:	f004 fb3e 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80007ec:	2200      	movs	r2, #0
 80007ee:	4619      	mov	r1, r3
 80007f0:	f004 fb36 	bl	8004e60 <HAL_GPIO_WritePin>
        break;
 80007f4:	e07a      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	8c1b      	ldrh	r3, [r3, #32]
 80007fe:	2201      	movs	r2, #1
 8000800:	4619      	mov	r1, r3
 8000802:	f004 fb2d 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	f004 fb25 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800081e:	2201      	movs	r2, #1
 8000820:	4619      	mov	r1, r3
 8000822:	f004 fb1d 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f004 fb15 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800083e:	2200      	movs	r2, #0
 8000840:	4619      	mov	r1, r3
 8000842:	f004 fb0d 	bl	8004e60 <HAL_GPIO_WritePin>
        break;
 8000846:	e051      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	8c1b      	ldrh	r3, [r3, #32]
 8000850:	2201      	movs	r2, #1
 8000852:	4619      	mov	r1, r3
 8000854:	f004 fb04 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	f004 fafc 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000870:	2201      	movs	r2, #1
 8000872:	4619      	mov	r1, r3
 8000874:	f004 faf4 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	f004 faec 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000890:	2201      	movs	r2, #1
 8000892:	4619      	mov	r1, r3
 8000894:	f004 fae4 	bl	8004e60 <HAL_GPIO_WritePin>
        break;
 8000898:	e028      	b.n	80008ec <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	8c1b      	ldrh	r3, [r3, #32]
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	f004 fadb 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80008b2:	2200      	movs	r2, #0
 80008b4:	4619      	mov	r1, r3
 80008b6:	f004 fad3 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008c2:	2201      	movs	r2, #1
 80008c4:	4619      	mov	r1, r3
 80008c6:	f004 facb 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	f004 fac3 	bl	8004e60 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80008e2:	2201      	movs	r2, #1
 80008e4:	4619      	mov	r1, r3
 80008e6:	f004 fabb 	bl	8004e60 <HAL_GPIO_WritePin>
        break;
 80008ea:	bf00      	nop
    }
  }
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_ZN7Stepper8honeAxisEv>:

void Stepper::honeAxis(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

	// set step tracker to max step to bypass over step protection in step()
	this->step_tracker = this->max_step;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	461a      	mov	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	619a      	str	r2, [r3, #24]

	while(*(this->end_stop) != 0){
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	b29b      	uxth	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf14      	ite	ne
 8000912:	2301      	movne	r3, #1
 8000914:	2300      	moveq	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d008      	beq.n	800092e <_ZN7Stepper8honeAxisEv+0x3a>
		// give time for the end stop value to be updated by the ADC via DMA
		//todo: optimize this to make this quicker (i.e., increase ADC sample frequency)
		HAL_Delay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f002 fa7f 	bl	8002e20 <HAL_Delay>



		step(-1);
 8000922:	f04f 31ff 	mov.w	r1, #4294967295
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fc9a 	bl	8000260 <_ZN7Stepper4stepEi>
	while(*(this->end_stop) != 0){
 800092c:	e7eb      	b.n	8000906 <_ZN7Stepper8honeAxisEv+0x12>
	}

	step_tracker = 0;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <_ZN7Stepper9setAbsPosEl>:

void Stepper::setAbsPos(int32_t step_cnt){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	this->steps_to_move = step_cnt - this->step_tracker;
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	1ad2      	subs	r2, r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	61da      	str	r2, [r3, #28]
	step(this->steps_to_move);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4619      	mov	r1, r3
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fc81 	bl	8000260 <_ZN7Stepper4stepEi>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000966:	b480      	push	{r7}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800096e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4313      	orrs	r3, r2
 800097c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800097e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4013      	ands	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009ae:	4b3f      	ldr	r3, [pc, #252]	; (8000aac <MX_ADC1_Init+0x114>)
 80009b0:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <MX_ADC1_Init+0x118>)
 80009b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80009b4:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <MX_ADC1_Init+0x114>)
 80009b6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80009ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009bc:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <MX_ADC1_Init+0x114>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c2:	4b3a      	ldr	r3, [pc, #232]	; (8000aac <MX_ADC1_Init+0x114>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009c8:	4b38      	ldr	r3, [pc, #224]	; (8000aac <MX_ADC1_Init+0x114>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009ce:	4b37      	ldr	r3, [pc, #220]	; (8000aac <MX_ADC1_Init+0x114>)
 80009d0:	2208      	movs	r2, #8
 80009d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009d4:	4b35      	ldr	r3, [pc, #212]	; (8000aac <MX_ADC1_Init+0x114>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009da:	4b34      	ldr	r3, [pc, #208]	; (8000aac <MX_ADC1_Init+0x114>)
 80009dc:	2201      	movs	r2, #1
 80009de:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <MX_ADC1_Init+0x114>)
 80009e2:	2204      	movs	r2, #4
 80009e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e6:	4b31      	ldr	r3, [pc, #196]	; (8000aac <MX_ADC1_Init+0x114>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ee:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <MX_ADC1_Init+0x114>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f4:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <MX_ADC1_Init+0x114>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009fa:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <MX_ADC1_Init+0x114>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a0a:	4b28      	ldr	r3, [pc, #160]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a12:	4826      	ldr	r0, [pc, #152]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a14:	f002 fc0e 	bl	8003234 <HAL_ADC_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a1e:	f001 fbf9 	bl	8002214 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a22:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <MX_ADC1_Init+0x11c>)
 8000a24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a26:	2306      	movs	r3, #6
 8000a28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a2e:	237f      	movs	r3, #127	; 0x7f
 8000a30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a32:	2304      	movs	r3, #4
 8000a34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481b      	ldr	r0, [pc, #108]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a40:	f002 ffa4 	bl	800398c <HAL_ADC_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a4a:	f001 fbe3 	bl	8002214 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_ADC1_Init+0x120>)
 8000a50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a52:	230c      	movs	r3, #12
 8000a54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4814      	ldr	r0, [pc, #80]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a5c:	f002 ff96 	bl	800398c <HAL_ADC_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000a66:	f001 fbd5 	bl	8002214 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_ADC1_Init+0x124>)
 8000a6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a6e:	2312      	movs	r3, #18
 8000a70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a72:	463b      	mov	r3, r7
 8000a74:	4619      	mov	r1, r3
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a78:	f002 ff88 	bl	800398c <HAL_ADC_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000a82:	f001 fbc7 	bl	8002214 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_ADC1_Init+0x128>)
 8000a88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a8a:	2318      	movs	r3, #24
 8000a8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8e:	463b      	mov	r3, r7
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_ADC1_Init+0x114>)
 8000a94:	f002 ff7a 	bl	800398c <HAL_ADC_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000a9e:	f001 fbb9 	bl	8002214 <Error_Handler>
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20004de0 	.word	0x20004de0
 8000ab0:	50040000 	.word	0x50040000
 8000ab4:	04300002 	.word	0x04300002
 8000ab8:	08600004 	.word	0x08600004
 8000abc:	0c900008 	.word	0x0c900008
 8000ac0:	1d500080 	.word	0x1d500080

08000ac4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a2e      	ldr	r2, [pc, #184]	; (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d155      	bne.n	8000b92 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ae6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000aea:	f7ff ff3c 	bl	8000966 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	2004      	movs	r0, #4
 8000af0:	f7ff ff39 	bl	8000966 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff ff36 	bl	8000966 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MAG_BASE_Pin|MAG_LIGHT_Pin|MAIN_BOARD_TEMP_Pin;
 8000afa:	2307      	movs	r3, #7
 8000afc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afe:	2303      	movs	r3, #3
 8000b00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4824      	ldr	r0, [pc, #144]	; (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000b0e:	f004 f837 	bl	8004b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_TEMP_Pin;
 8000b12:	2304      	movs	r3, #4
 8000b14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b16:	2303      	movs	r3, #3
 8000b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	4619      	mov	r1, r3
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f004 f82a 	bl	8004b80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <HAL_ADC_MspInit+0xe4>)
 8000b30:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b34:	2205      	movs	r2, #5
 8000b36:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b66:	480f      	ldr	r0, [pc, #60]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b68:	f003 fd96 	bl	8004698 <HAL_DMA_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000b72:	f001 fb4f 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b7c:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <HAL_ADC_MspInit+0xe0>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2105      	movs	r1, #5
 8000b86:	2012      	movs	r0, #18
 8000b88:	f003 fd2f 	bl	80045ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000b8c:	2012      	movs	r0, #18
 8000b8e:	f003 fd46 	bl	800461e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	50040000 	.word	0x50040000
 8000ba0:	48000800 	.word	0x48000800
 8000ba4:	20004e44 	.word	0x20004e44
 8000ba8:	40020008 	.word	0x40020008

08000bac <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bba:	f023 0207 	bic.w	r2, r3, #7
 8000bbe:	4905      	ldr	r1, [pc, #20]	; (8000bd4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	58000400 	.word	0x58000400

08000bd8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	608b      	str	r3, [r1, #8]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000c04:	f000 f80a 	bl	8000c1c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000c08:	4903      	ldr	r1, [pc, #12]	; (8000c18 <APPE_Init+0x18>)
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 ff70 	bl	8001af0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000c10:	f000 f812 	bl	8000c38 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000c14:	bf00      	nop
}
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20004eb0 	.word	0x20004eb0

08000c1c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000c20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c24:	f7ff ffd8 	bl	8000bd8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000c28:	f012 fda0 	bl	801376c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000c2c:	2004      	movs	r0, #4
 8000c2e:	f7ff ffbd 	bl	8000bac <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000c32:	bf00      	nop
}
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000c3e:	f00b fa91 	bl	800c164 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8000c42:	2000      	movs	r0, #0
 8000c44:	f00d f93a 	bl	800debc <osMutexNew>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <appe_Tl_Init+0x70>)
 8000c4c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2001      	movs	r0, #1
 8000c54:	f00d fa7a 	bl	800e14c <osSemaphoreNew>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <appe_Tl_Init+0x74>)
 8000c5c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000c5e:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <appe_Tl_Init+0x78>)
 8000c60:	2100      	movs	r1, #0
 8000c62:	4814      	ldr	r0, [pc, #80]	; (8000cb4 <appe_Tl_Init+0x7c>)
 8000c64:	f00c ff60 	bl	800db28 <osThreadNew>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <appe_Tl_Init+0x80>)
 8000c6c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <appe_Tl_Init+0x84>)
 8000c70:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <appe_Tl_Init+0x88>)
 8000c74:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c76:	463b      	mov	r3, r7
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <appe_Tl_Init+0x8c>)
 8000c7c:	f00b f938 	bl	800bef0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <appe_Tl_Init+0x90>)
 8000c86:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <appe_Tl_Init+0x94>)
 8000c8a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c8c:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c90:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4618      	mov	r0, r3
 8000c98:	f00b fbce 	bl	800c438 <TL_MM_Init>

  TL_Enable();
 8000c9c:	f00b fa5c 	bl	800c158 <TL_Enable>

  return;
 8000ca0:	bf00      	nop
}
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20004ea4 	.word	0x20004ea4
 8000cac:	20004eac 	.word	0x20004eac
 8000cb0:	08013c38 	.word	0x08013c38
 8000cb4:	08000db9 	.word	0x08000db9
 8000cb8:	20004ea8 	.word	0x20004ea8
 8000cbc:	2003061c 	.word	0x2003061c
 8000cc0:	08000cd1 	.word	0x08000cd1
 8000cc4:	08000d11 	.word	0x08000d11
 8000cc8:	20030728 	.word	0x20030728
 8000ccc:	200300e0 	.word	0x200300e0

08000cd0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <APPE_SysStatusNot+0x16>
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d008      	beq.n	8000cf6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8000ce4:	e00d      	b.n	8000d02 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <APPE_SysStatusNot+0x3c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f04f 31ff 	mov.w	r1, #4294967295
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f00d f97e 	bl	800dff0 <osMutexAcquire>
      break;
 8000cf4:	e005      	b.n	8000d02 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <APPE_SysStatusNot+0x3c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f00d f9d6 	bl	800e0ac <osMutexRelease>
      break;
 8000d00:	bf00      	nop
  }
  return;
 8000d02:	bf00      	nop
}
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20004ea4 	.word	0x20004ea4

08000d10 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	330b      	adds	r3, #11
 8000d1e:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000d2a:	d004      	beq.n	8000d36 <APPE_SysUserEvtRx+0x26>
 8000d2c:	f249 2201 	movw	r2, #37377	; 0x9201
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d003      	beq.n	8000d3c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8000d34:	e008      	b.n	8000d48 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8000d36:	f000 f833 	bl	8000da0 <APPE_SysEvtReadyProcessing>
         break;
 8000d3a:	e005      	b.n	8000d48 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	789b      	ldrb	r3, [r3, #2]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 f805 	bl	8000d50 <APPE_SysEvtError>
         break;
 8000d46:	bf00      	nop
  }
  return;
 8000d48:	bf00      	nop
}
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	2b7d      	cmp	r3, #125	; 0x7d
 8000d5e:	d002      	beq.n	8000d66 <APPE_SysEvtError+0x16>
 8000d60:	2b7e      	cmp	r3, #126	; 0x7e
 8000d62:	d006      	beq.n	8000d72 <APPE_SysEvtError+0x22>
 8000d64:	e00b      	b.n	8000d7e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <APPE_SysEvtError+0x44>)
 8000d68:	2101      	movs	r1, #1
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f001 fe10 	bl	8002990 <logApplication>
       break;
 8000d70:	e00c      	b.n	8000d8c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <APPE_SysEvtError+0x48>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	2000      	movs	r0, #0
 8000d78:	f001 fe0a 	bl	8002990 <logApplication>
       break;
 8000d7c:	e006      	b.n	8000d8c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <APPE_SysEvtError+0x4c>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	2000      	movs	r0, #0
 8000d86:	f001 fe03 	bl	8002990 <logApplication>
       break;
 8000d8a:	bf00      	nop
  }
  return;
 8000d8c:	bf00      	nop
}
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	0801388c 	.word	0x0801388c
 8000d98:	080138b0 	.word	0x080138b0
 8000d9c:	080138d0 	.word	0x080138d0

08000da0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000da4:	f00b fbbc 	bl	800c520 <TL_TRACES_Init>

  APP_THREAD_Init();
 8000da8:	f010 ffb8 	bl	8011d1c <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000dac:	2100      	movs	r1, #0
 8000dae:	2001      	movs	r0, #1
 8000db0:	f012 fcee 	bl	8013790 <UTIL_LPM_SetOffMode>
  return;
 8000db4:	bf00      	nop
}
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f00c ffb6 	bl	800dd38 <osThreadFlagsWait>
     shci_user_evt_proc();
 8000dcc:	f00b f8ac 	bl	800bf28 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000dd0:	e7f6      	b.n	8000dc0 <ShciUserEvtProcess+0x8>
	...

08000dd4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <shci_notify_asynch_evt+0x1c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	4618      	mov	r0, r3
 8000de4:	f00c ff46 	bl	800dc74 <osThreadFlagsSet>
  return;
 8000de8:	bf00      	nop
}
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20004ea8 	.word	0x20004ea8

08000df4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <shci_cmd_resp_release+0x1c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f00d faa7 	bl	800e354 <osSemaphoreRelease>
  return;
 8000e06:	bf00      	nop
}
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20004eac 	.word	0x20004eac

08000e14 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <shci_cmd_resp_wait+0x20>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00d fa2f 	bl	800e288 <osSemaphoreAcquire>
  return;
 8000e2a:	bf00      	nop
}
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20004eac 	.word	0x20004eac

08000e38 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f00b fb35 	bl	800c4b0 <TL_MM_EvtDone>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <_Z16MX_FREERTOS_Initv+0x3c>)
 8000e56:	2100      	movs	r1, #0
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <_Z16MX_FREERTOS_Initv+0x40>)
 8000e5a:	f00c fe65 	bl	800db28 <osThreadNew>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <_Z16MX_FREERTOS_Initv+0x44>)
 8000e62:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
#ifndef SOLAR_SENSOR_NODE
  msgTaskHandle = osThreadNew(MsgTask, NULL, &msgTask_attributes);
 8000e64:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <_Z16MX_FREERTOS_Initv+0x48>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <_Z16MX_FREERTOS_Initv+0x4c>)
 8000e6a:	f00c fe5d 	bl	800db28 <osThreadNew>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <_Z16MX_FREERTOS_Initv+0x50>)
 8000e72:	601a      	str	r2, [r3, #0]

  msgQueueHandle = osMessageQueueNew (10, sizeof(struct MeasMsg), &msgQueue_attributes);
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <_Z16MX_FREERTOS_Initv+0x54>)
 8000e76:	2114      	movs	r1, #20
 8000e78:	200a      	movs	r0, #10
 8000e7a:	f00d fac3 	bl	800e404 <osMessageQueueNew>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <_Z16MX_FREERTOS_Initv+0x58>)
 8000e82:	601a      	str	r2, [r3, #0]
#endif

  APPE_Init();
 8000e84:	f7ff febc 	bl	8000c00 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	08013c5c 	.word	0x08013c5c
 8000e90:	08000ead 	.word	0x08000ead
 8000e94:	2000028c 	.word	0x2000028c
 8000e98:	08013c80 	.word	0x08013c80
 8000e9c:	0800271d 	.word	0x0800271d
 8000ea0:	20000290 	.word	0x20000290
 8000ea4:	08013ca4 	.word	0x08013ca4
 8000ea8:	20000294 	.word	0x20000294

08000eac <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	osDelay(100);
 8000eb4:	2064      	movs	r0, #100	; 0x64
 8000eb6:	f00c ffd3 	bl	800de60 <osDelay>
	myMain();
 8000eba:	f001 fab7 	bl	800242c <_Z6myMainv>
  for(;;)
  {
	  osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8000ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f00c ff37 	bl	800dd38 <osThreadFlagsWait>
 8000eca:	e7f8      	b.n	8000ebe <_Z16StartDefaultTaskPv+0x12>

08000ecc <startCal>:
 */
#ifndef SOLAR_SENSOR_NODE

void startCal(float angle_base_min, float angle_base_max,
		float angle_led_min, float angle_led_max,
				Stepper& motor_base, Stepper& motor_led){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	ed87 0a05 	vstr	s0, [r7, #20]
 8000ed6:	edc7 0a04 	vstr	s1, [r7, #16]
 8000eda:	ed87 1a03 	vstr	s2, [r7, #12]
 8000ede:	edc7 1a02 	vstr	s3, [r7, #8]
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]

	// configure calMsg packet
	calMsg.UID = SPOTLIGHT_UID;
 8000ee6:	4b58      	ldr	r3, [pc, #352]	; (8001048 <startCal+0x17c>)
 8000ee8:	2218      	movs	r2, #24
 8000eea:	701a      	strb	r2, [r3, #0]
	calMsg.cal_code = CALIBRATION_START_COMMAND;
 8000eec:	4b56      	ldr	r3, [pc, #344]	; (8001048 <startCal+0x17c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	705a      	strb	r2, [r3, #1]

	/* (1) hone axis */
	motor_base.honeAxis();
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fcfe 	bl	80008f4 <_ZN7Stepper8honeAxisEv>
	motor_led.honeAxis();
 8000ef8:	6838      	ldr	r0, [r7, #0]
 8000efa:	f7ff fcfb 	bl	80008f4 <_ZN7Stepper8honeAxisEv>

	/* (2) multicast that calibration will begin */

	// clear current calibration table
	memset(calibration_table,0,sizeof(calibration_table));
 8000efe:	2250      	movs	r2, #80	; 0x50
 8000f00:	2100      	movs	r1, #0
 8000f02:	4852      	ldr	r0, [pc, #328]	; (800104c <startCal+0x180>)
 8000f04:	f012 fca1 	bl	801384a <memset>

	broadcastCalStart(&calMsg); //TODO: implement
 8000f08:	484f      	ldr	r0, [pc, #316]	; (8001048 <startCal+0x17c>)
 8000f0a:	f000 f8a9 	bl	8001060 <broadcastCalStart>
	/* (3) wait for nodes to ACK and populate a table with the UIDs */

	// note: nodes will be replying to a Coap server (code exists in app_thread.c for populating of table)

	// wait for nodes to reply with their IDs
	osDelay(CAL_INIT_CAL_TIMEOUT);
 8000f0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f12:	f00c ffa5 	bl	800de60 <osDelay>
	/* (4) Run through each position, sending an msg to each node indicating the angle is set
	 * and waiting for said nodes to respond with their solar power measurements. If node does
	 * not reply within CAL_POS_TIMEOUT, re-send msg and wait one more cycle before continuing.
	 */
		// calculate step bounds for each axis
		int32_t min_led_axis_step = (((angle_led_min) * LED_STEP_RANGE));
 8000f16:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f1a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001050 <startCal+0x184>
 8000f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f26:	ee17 3a90 	vmov	r3, s15
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
		int32_t max_led_axis_step = (((angle_led_max) * LED_STEP_RANGE));
 8000f2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f30:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001050 <startCal+0x184>
 8000f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3c:	ee17 3a90 	vmov	r3, s15
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
		int32_t min_base_axis_step = (((angle_led_min) * BASE_STEP_RANGE));
 8000f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f46:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001054 <startCal+0x188>
 8000f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f52:	ee17 3a90 	vmov	r3, s15
 8000f56:	623b      	str	r3, [r7, #32]
		int32_t max_base_axis_step = (((angle_led_max) * BASE_STEP_RANGE));
 8000f58:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f5c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001054 <startCal+0x188>
 8000f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f68:	ee17 3a90 	vmov	r3, s15
 8000f6c:	61fb      	str	r3, [r7, #28]

		// move to desired angle
		uint8_t flip_dir = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 8000f74:	4a38      	ldr	r2, [pc, #224]	; (8001058 <startCal+0x18c>)
 8000f76:	6a3b      	ldr	r3, [r7, #32]
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b37      	ldr	r3, [pc, #220]	; (8001058 <startCal+0x18c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	db5a      	blt.n	800103a <startCal+0x16e>
			motor_base.setAbsPos(base_step);
 8000f84:	4b34      	ldr	r3, [pc, #208]	; (8001058 <startCal+0x18c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fcd6 	bl	800093c <_ZN7Stepper9setAbsPosEl>

			if(flip_dir == 0){
 8000f90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d125      	bne.n	8000fe4 <startCal+0x118>
				for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000f98:	4a30      	ldr	r2, [pc, #192]	; (800105c <startCal+0x190>)
 8000f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <startCal+0x190>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	db19      	blt.n	8000fdc <startCal+0x110>
					motor_led.setAbsPos(led_step);
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	; (800105c <startCal+0x190>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	6838      	ldr	r0, [r7, #0]
 8000fb0:	f7ff fcc4 	bl	800093c <_ZN7Stepper9setAbsPosEl>
					getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <startCal+0x18c>)
 8000fb6:	6819      	ldr	r1, [r3, #0]
 8000fb8:	4b28      	ldr	r3, [pc, #160]	; (800105c <startCal+0x190>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4822      	ldr	r0, [pc, #136]	; (8001048 <startCal+0x17c>)
 8000fc0:	f000 f892 	bl	80010e8 <getMeasurementsFromNodes>

					// wait CAL_POS_TIMEOUT milliseconds for nodes to reply with power values
#ifndef DEBUG_SERIAL
					osThreadFlagsWait (CAL_THREAD_FLAG, osFlagsWaitAny, CAL_POS_TIMEOUT);
 8000fc4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f00c feb4 	bl	800dd38 <osThreadFlagsWait>
				for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <startCal+0x190>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	331e      	adds	r3, #30
 8000fd6:	4a21      	ldr	r2, [pc, #132]	; (800105c <startCal+0x190>)
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e7e0      	b.n	8000f9e <startCal+0xd2>
#else
					osDelay(100);
#endif
				}
				flip_dir = 1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000fe2:	e024      	b.n	800102e <startCal+0x162>
			}
			else{
				for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000fe4:	4a1d      	ldr	r2, [pc, #116]	; (800105c <startCal+0x190>)
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <startCal+0x190>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dc19      	bgt.n	8001028 <startCal+0x15c>
					motor_led.setAbsPos(led_step);
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <startCal+0x190>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6838      	ldr	r0, [r7, #0]
 8000ffc:	f7ff fc9e 	bl	800093c <_ZN7Stepper9setAbsPosEl>
					getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <startCal+0x18c>)
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <startCal+0x190>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	480f      	ldr	r0, [pc, #60]	; (8001048 <startCal+0x17c>)
 800100c:	f000 f86c 	bl	80010e8 <getMeasurementsFromNodes>

					// wait CAL_POS_TIMEOUT milliseconds for nodes to reply with power values
#ifndef DEBUG_SERIAL
					osThreadFlagsWait (CAL_THREAD_FLAG, osFlagsWaitAny, CAL_POS_TIMEOUT);
 8001010:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001014:	2100      	movs	r1, #0
 8001016:	2003      	movs	r0, #3
 8001018:	f00c fe8e 	bl	800dd38 <osThreadFlagsWait>
				for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <startCal+0x190>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3b1e      	subs	r3, #30
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <startCal+0x190>)
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e7e0      	b.n	8000fea <startCal+0x11e>
#else
					osDelay(100);
#endif
				}
				flip_dir = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <startCal+0x18c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	330a      	adds	r3, #10
 8001034:	4a08      	ldr	r2, [pc, #32]	; (8001058 <startCal+0x18c>)
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	e79f      	b.n	8000f7a <startCal+0xae>
			}
		}


//	/* (5) send calibration complete message to all nodes */
		broadcastCalComplete(&calMsg);
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <startCal+0x17c>)
 800103c:	f000 f832 	bl	80010a4 <broadcastCalComplete>

}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200002e8 	.word	0x200002e8
 800104c:	20000298 	.word	0x20000298
 8001050:	46f24600 	.word	0x46f24600
 8001054:	45c06000 	.word	0x45c06000
 8001058:	200002f8 	.word	0x200002f8
 800105c:	200002f4 	.word	0x200002f4

08001060 <broadcastCalStart>:
#endif


void broadcastCalStart(CalMsg* msg){
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af04      	add	r7, sp, #16
 8001066:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
	msg->angle_2 = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 800107a:	2301      	movs	r3, #1
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2303      	movs	r3, #3
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	2301      	movs	r3, #1
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <broadcastCalStart+0x3c>)
 8001088:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <broadcastCalStart+0x40>)
 800108a:	210c      	movs	r1, #12
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f011 f91d 	bl	80122cc <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 8001092:	bf00      	nop
}
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	08013db8 	.word	0x08013db8
 80010a0:	20005010 	.word	0x20005010

080010a4 <broadcastCalComplete>:

void broadcastCalComplete(CalMsg* msg){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af04      	add	r7, sp, #16
 80010aa:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
	msg->angle_2 = 0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 80010be:	2301      	movs	r3, #1
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2303      	movs	r3, #3
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <broadcastCalComplete+0x3c>)
 80010cc:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <broadcastCalComplete+0x40>)
 80010ce:	210c      	movs	r1, #12
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f011 f8fb 	bl	80122cc <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 80010d6:	bf00      	nop
}
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	08013db8 	.word	0x08013db8
 80010e4:	20005010 	.word	0x20005010

080010e8 <getMeasurementsFromNodes>:

void getMeasurementsFromNodes(CalMsg* msg, int32_t angle_1, int32_t angle_2){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]

	msg->cal_fcn = CALIBRATION_GET_MEAS;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2202      	movs	r2, #2
 80010f8:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = angle_1;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	605a      	str	r2, [r3, #4]
	msg->angle_2 = angle_2;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	609a      	str	r2, [r3, #8]

#ifndef DEBUG_SERIAL
	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 8001106:	2301      	movs	r3, #1
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	2301      	movs	r3, #1
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	2301      	movs	r3, #1
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <getMeasurementsFromNodes+0x40>)
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <getMeasurementsFromNodes+0x44>)
 8001116:	210c      	movs	r1, #12
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f011 f8d7 	bl	80122cc <APP_THREAD_SendCoapMsg>
#else
	// TODO REMOVE!!!
	measMsgReceivedFromNode(&measMsg);
#endif

	return;
 800111e:	bf00      	nop
}
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	08013db8 	.word	0x08013db8
 800112c:	20005010 	.word	0x20005010

08001130 <LL_AHB1_GRP1_EnableClock>:
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800113e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4313      	orrs	r3, r2
 8001146:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4013      	ands	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001154:	68fb      	ldr	r3, [r7, #12]
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001166:	2004      	movs	r0, #4
 8001168:	f7ff ffe2 	bl	8001130 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff ffdf 	bl	8001130 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2105      	movs	r1, #5
 8001176:	200b      	movs	r0, #11
 8001178:	f003 fa37 	bl	80045ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800117c:	200b      	movs	r0, #11
 800117e:	f003 fa4e 	bl	800461e <HAL_NVIC_EnableIRQ>

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}

08001186 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <LL_AHB2_GRP1_EnableClock>:
{
 800119a:	b480      	push	{r7}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4013      	ands	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e0:	2004      	movs	r0, #4
 80011e2:	f7ff ffda 	bl	800119a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2002      	movs	r0, #2
 80011e8:	f7ff ffd7 	bl	800119a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff ffd4 	bl	800119a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f2:	2010      	movs	r0, #16
 80011f4:	f7ff ffd1 	bl	800119a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 80011f8:	2200      	movs	r2, #0
 80011fa:	f240 3193 	movw	r1, #915	; 0x393
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001202:	f003 fe2d 	bl	8004e60 <HAL_GPIO_WritePin>
                          |AIN1_1_Pin|BIN1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN1_2_Pin|BIN2_2_Pin|BIN2_1_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 800120c:	4823      	ldr	r0, [pc, #140]	; (800129c <MX_GPIO_Init+0xd0>)
 800120e:	f003 fe27 	bl	8004e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	2103      	movs	r1, #3
 8001216:	4821      	ldr	r0, [pc, #132]	; (800129c <MX_GPIO_Init+0xd0>)
 8001218:	f003 fe22 	bl	8004e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	2110      	movs	r1, #16
 8001220:	481f      	ldr	r0, [pc, #124]	; (80012a0 <MX_GPIO_Init+0xd4>)
 8001222:	f003 fe1d 	bl	8004e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 8001226:	f240 3393 	movw	r3, #915	; 0x393
 800122a:	607b      	str	r3, [r7, #4]
                          |AIN1_1_Pin|BIN1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f003 fc9e 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_LED_DISC_Pin;
 8001244:	2308      	movs	r3, #8
 8001246:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT_LED_DISC_GPIO_Port, &GPIO_InitStruct);
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001258:	f003 fc92 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BIN1_2_Pin|BIN2_2_Pin|BLUE_LED_Pin|GREEN_LED_Pin
 800125c:	f644 4303 	movw	r3, #19459	; 0x4c03
 8001260:	607b      	str	r3, [r7, #4]
                          |BIN2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4619      	mov	r1, r3
 8001272:	480a      	ldr	r0, [pc, #40]	; (800129c <MX_GPIO_Init+0xd0>)
 8001274:	f003 fc84 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8001278:	2310      	movs	r3, #16
 800127a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4619      	mov	r1, r3
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_GPIO_Init+0xd4>)
 800128e:	f003 fc77 	bl	8004b80 <HAL_GPIO_Init>

}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	48000400 	.word	0x48000400
 80012a0:	48001000 	.word	0x48001000

080012a4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80012ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80012b2:	4905      	ldr	r1, [pc, #20]	; (80012c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	58000800 	.word	0x58000800

080012cc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4904      	ldr	r1, [pc, #16]	; (80012ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]

}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	58000800 	.word	0x58000800

080012f0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <ReadRtcSsrValue+0x3c>)
 80012f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <ReadRtcSsrValue+0x3c>)
 8001300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001302:	b29b      	uxth	r3, r3
 8001304:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001306:	e005      	b.n	8001314 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <ReadRtcSsrValue+0x3c>)
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	b29b      	uxth	r3, r3
 8001312:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d1f5      	bne.n	8001308 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800131c:	683b      	ldr	r3, [r7, #0]
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40002800 	.word	0x40002800

08001330 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	460a      	mov	r2, r1
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	4613      	mov	r3, r2
 800133e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001340:	79ba      	ldrb	r2, [r7, #6]
 8001342:	491d      	ldr	r1, [pc, #116]	; (80013b8 <LinkTimerAfter+0x88>)
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	3315      	adds	r3, #21
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	2b06      	cmp	r3, #6
 8001358:	d009      	beq.n	800136e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	4916      	ldr	r1, [pc, #88]	; (80013b8 <LinkTimerAfter+0x88>)
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	3314      	adds	r3, #20
 800136a:	79fa      	ldrb	r2, [r7, #7]
 800136c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800136e:	79fa      	ldrb	r2, [r7, #7]
 8001370:	4911      	ldr	r1, [pc, #68]	; (80013b8 <LinkTimerAfter+0x88>)
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	440b      	add	r3, r1
 800137c:	3315      	adds	r3, #21
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001382:	79fa      	ldrb	r2, [r7, #7]
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <LinkTimerAfter+0x88>)
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	440b      	add	r3, r1
 8001390:	3314      	adds	r3, #20
 8001392:	79ba      	ldrb	r2, [r7, #6]
 8001394:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001396:	79ba      	ldrb	r2, [r7, #6]
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <LinkTimerAfter+0x88>)
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	3315      	adds	r3, #21
 80013a6:	79fa      	ldrb	r2, [r7, #7]
 80013a8:	701a      	strb	r2, [r3, #0]

  return;
 80013aa:	bf00      	nop
}
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	200001c0 	.word	0x200001c0

080013bc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	71fb      	strb	r3, [r7, #7]
 80013c8:	4613      	mov	r3, r2
 80013ca:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80013cc:	4b29      	ldr	r3, [pc, #164]	; (8001474 <LinkTimerBefore+0xb8>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	79ba      	ldrb	r2, [r7, #6]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d032      	beq.n	800143e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	4927      	ldr	r1, [pc, #156]	; (8001478 <LinkTimerBefore+0xbc>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3314      	adds	r3, #20
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	4922      	ldr	r1, [pc, #136]	; (8001478 <LinkTimerBefore+0xbc>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3315      	adds	r3, #21
 80013fc:	79fa      	ldrb	r2, [r7, #7]
 80013fe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001400:	79fa      	ldrb	r2, [r7, #7]
 8001402:	491d      	ldr	r1, [pc, #116]	; (8001478 <LinkTimerBefore+0xbc>)
 8001404:	4613      	mov	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3315      	adds	r3, #21
 8001410:	79ba      	ldrb	r2, [r7, #6]
 8001412:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001414:	79fa      	ldrb	r2, [r7, #7]
 8001416:	4918      	ldr	r1, [pc, #96]	; (8001478 <LinkTimerBefore+0xbc>)
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3314      	adds	r3, #20
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001428:	79ba      	ldrb	r2, [r7, #6]
 800142a:	4913      	ldr	r1, [pc, #76]	; (8001478 <LinkTimerBefore+0xbc>)
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	440b      	add	r3, r1
 8001436:	3314      	adds	r3, #20
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800143c:	e014      	b.n	8001468 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800143e:	79fa      	ldrb	r2, [r7, #7]
 8001440:	490d      	ldr	r1, [pc, #52]	; (8001478 <LinkTimerBefore+0xbc>)
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	3315      	adds	r3, #21
 800144e:	79ba      	ldrb	r2, [r7, #6]
 8001450:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001452:	79ba      	ldrb	r2, [r7, #6]
 8001454:	4908      	ldr	r1, [pc, #32]	; (8001478 <LinkTimerBefore+0xbc>)
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	3314      	adds	r3, #20
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	701a      	strb	r2, [r3, #0]
  return;
 8001466:	bf00      	nop
}
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000250 	.word	0x20000250
 8001478:	200001c0 	.word	0x200001c0

0800147c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001486:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <linkTimer+0x144>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b06      	cmp	r3, #6
 800148e:	d118      	bne.n	80014c2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001490:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <linkTimer+0x144>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b4b      	ldr	r3, [pc, #300]	; (80015c4 <linkTimer+0x148>)
 8001498:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800149a:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <linkTimer+0x144>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	4949      	ldr	r1, [pc, #292]	; (80015c8 <linkTimer+0x14c>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3315      	adds	r3, #21
 80014b0:	2206      	movs	r2, #6
 80014b2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80014b4:	4b45      	ldr	r3, [pc, #276]	; (80015cc <linkTimer+0x150>)
 80014b6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ba:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	81fb      	strh	r3, [r7, #14]
 80014c0:	e078      	b.n	80015b4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80014c2:	f000 f909 	bl	80016d8 <ReturnTimeElapsed>
 80014c6:	4603      	mov	r3, r0
 80014c8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80014ca:	79fa      	ldrb	r2, [r7, #7]
 80014cc:	493e      	ldr	r1, [pc, #248]	; (80015c8 <linkTimer+0x14c>)
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	3308      	adds	r3, #8
 80014da:	6819      	ldr	r1, [r3, #0]
 80014dc:	89fb      	ldrh	r3, [r7, #14]
 80014de:	79fa      	ldrb	r2, [r7, #7]
 80014e0:	4419      	add	r1, r3
 80014e2:	4839      	ldr	r0, [pc, #228]	; (80015c8 <linkTimer+0x14c>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4403      	add	r3, r0
 80014ee:	3308      	adds	r3, #8
 80014f0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80014f2:	79fa      	ldrb	r2, [r7, #7]
 80014f4:	4934      	ldr	r1, [pc, #208]	; (80015c8 <linkTimer+0x14c>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	3308      	adds	r3, #8
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <linkTimer+0x144>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4619      	mov	r1, r3
 800150e:	4a2e      	ldr	r2, [pc, #184]	; (80015c8 <linkTimer+0x14c>)
 8001510:	460b      	mov	r3, r1
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	440b      	add	r3, r1
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4413      	add	r3, r2
 800151a:	3308      	adds	r3, #8
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	429a      	cmp	r2, r3
 8001522:	d337      	bcc.n	8001594 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <linkTimer+0x144>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800152a:	7b7a      	ldrb	r2, [r7, #13]
 800152c:	4926      	ldr	r1, [pc, #152]	; (80015c8 <linkTimer+0x14c>)
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	3315      	adds	r3, #21
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800153e:	e013      	b.n	8001568 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001540:	7b7a      	ldrb	r2, [r7, #13]
 8001542:	4921      	ldr	r1, [pc, #132]	; (80015c8 <linkTimer+0x14c>)
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3315      	adds	r3, #21
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001554:	7b7a      	ldrb	r2, [r7, #13]
 8001556:	491c      	ldr	r1, [pc, #112]	; (80015c8 <linkTimer+0x14c>)
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	3315      	adds	r3, #21
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001568:	7b3b      	ldrb	r3, [r7, #12]
 800156a:	2b06      	cmp	r3, #6
 800156c:	d00b      	beq.n	8001586 <linkTimer+0x10a>
 800156e:	7b3a      	ldrb	r2, [r7, #12]
 8001570:	4915      	ldr	r1, [pc, #84]	; (80015c8 <linkTimer+0x14c>)
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	3308      	adds	r3, #8
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	429a      	cmp	r2, r3
 8001584:	d2dc      	bcs.n	8001540 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001586:	7b7a      	ldrb	r2, [r7, #13]
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fecf 	bl	8001330 <LinkTimerAfter>
 8001592:	e00f      	b.n	80015b4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <linkTimer+0x144>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff0c 	bl	80013bc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <linkTimer+0x144>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <linkTimer+0x148>)
 80015ac:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <linkTimer+0x144>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80015b4:	89fb      	ldrh	r3, [r7, #14]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000250 	.word	0x20000250
 80015c4:	20000251 	.word	0x20000251
 80015c8:	200001c0 	.word	0x200001c0
 80015cc:	20000254 	.word	0x20000254

080015d0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	460a      	mov	r2, r1
 80015da:	71fb      	strb	r3, [r7, #7]
 80015dc:	4613      	mov	r3, r2
 80015de:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80015e0:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <UnlinkTimer+0xf8>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	79fa      	ldrb	r2, [r7, #7]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d111      	bne.n	8001610 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80015ec:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <UnlinkTimer+0xf8>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <UnlinkTimer+0xfc>)
 80015f4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	4935      	ldr	r1, [pc, #212]	; (80016d0 <UnlinkTimer+0x100>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	3315      	adds	r3, #21
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <UnlinkTimer+0xf8>)
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e03e      	b.n	800168e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001610:	79fa      	ldrb	r2, [r7, #7]
 8001612:	492f      	ldr	r1, [pc, #188]	; (80016d0 <UnlinkTimer+0x100>)
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	3314      	adds	r3, #20
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001624:	79fa      	ldrb	r2, [r7, #7]
 8001626:	492a      	ldr	r1, [pc, #168]	; (80016d0 <UnlinkTimer+0x100>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	3315      	adds	r3, #21
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001638:	79f9      	ldrb	r1, [r7, #7]
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	4824      	ldr	r0, [pc, #144]	; (80016d0 <UnlinkTimer+0x100>)
 800163e:	460b      	mov	r3, r1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	440b      	add	r3, r1
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4403      	add	r3, r0
 8001648:	3315      	adds	r3, #21
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b2d8      	uxtb	r0, r3
 800164e:	4920      	ldr	r1, [pc, #128]	; (80016d0 <UnlinkTimer+0x100>)
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	3315      	adds	r3, #21
 800165c:	4602      	mov	r2, r0
 800165e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001660:	7bbb      	ldrb	r3, [r7, #14]
 8001662:	2b06      	cmp	r3, #6
 8001664:	d013      	beq.n	800168e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001666:	79f9      	ldrb	r1, [r7, #7]
 8001668:	7bba      	ldrb	r2, [r7, #14]
 800166a:	4819      	ldr	r0, [pc, #100]	; (80016d0 <UnlinkTimer+0x100>)
 800166c:	460b      	mov	r3, r1
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	440b      	add	r3, r1
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4403      	add	r3, r0
 8001676:	3314      	adds	r3, #20
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b2d8      	uxtb	r0, r3
 800167c:	4914      	ldr	r1, [pc, #80]	; (80016d0 <UnlinkTimer+0x100>)
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	3314      	adds	r3, #20
 800168a:	4602      	mov	r2, r0
 800168c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800168e:	79fa      	ldrb	r2, [r7, #7]
 8001690:	490f      	ldr	r1, [pc, #60]	; (80016d0 <UnlinkTimer+0x100>)
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	440b      	add	r3, r1
 800169c:	330c      	adds	r3, #12
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <UnlinkTimer+0xf8>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b06      	cmp	r3, #6
 80016aa:	d107      	bne.n	80016bc <UnlinkTimer+0xec>
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d104      	bne.n	80016bc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <UnlinkTimer+0x104>)
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	601a      	str	r2, [r3, #0]
  }

  return;
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
}
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	20000250 	.word	0x20000250
 80016cc:	20000251 	.word	0x20000251
 80016d0:	200001c0 	.word	0x200001c0
 80016d4:	20000254 	.word	0x20000254

080016d8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <ReturnTimeElapsed+0x70>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e6:	d026      	beq.n	8001736 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80016e8:	f7ff fe02 	bl	80012f0 <ReadRtcSsrValue>
 80016ec:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <ReturnTimeElapsed+0x70>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d805      	bhi.n	8001704 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <ReturnTimeElapsed+0x70>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	e00a      	b.n	800171a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <ReturnTimeElapsed+0x74>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <ReturnTimeElapsed+0x70>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	4413      	add	r3, r2
 8001718:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <ReturnTimeElapsed+0x78>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <ReturnTimeElapsed+0x7c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	40d3      	lsrs	r3, r2
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	e001      	b.n	800173a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	b29b      	uxth	r3, r3
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000254 	.word	0x20000254
 800174c:	20000302 	.word	0x20000302
 8001750:	20000301 	.word	0x20000301
 8001754:	20000300 	.word	0x20000300

08001758 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d108      	bne.n	800177a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001768:	f7ff fdc2 	bl	80012f0 <ReadRtcSsrValue>
 800176c:	4602      	mov	r2, r0
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <RestartWakeupCounter+0xa8>)
 8001770:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001772:	2003      	movs	r0, #3
 8001774:	f002 ff73 	bl	800465e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001778:	e03e      	b.n	80017f8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d803      	bhi.n	8001788 <RestartWakeupCounter+0x30>
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <RestartWakeupCounter+0xac>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d002      	beq.n	800178e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	3b01      	subs	r3, #1
 800178c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800178e:	bf00      	nop
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <RestartWakeupCounter+0xb0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f7      	beq.n	8001790 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <RestartWakeupCounter+0xb0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <RestartWakeupCounter+0xb0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80017b4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <RestartWakeupCounter+0xb4>)
 80017b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017bc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80017be:	2003      	movs	r0, #3
 80017c0:	f002 ff5b 	bl	800467a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <RestartWakeupCounter+0xb8>)
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	0c1b      	lsrs	r3, r3, #16
 80017ca:	041b      	lsls	r3, r3, #16
 80017cc:	88fa      	ldrh	r2, [r7, #6]
 80017ce:	4910      	ldr	r1, [pc, #64]	; (8001810 <RestartWakeupCounter+0xb8>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80017d4:	f7ff fd8c 	bl	80012f0 <ReadRtcSsrValue>
 80017d8:	4602      	mov	r2, r0
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <RestartWakeupCounter+0xa8>)
 80017dc:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <RestartWakeupCounter+0xb0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <RestartWakeupCounter+0xb0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017f0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80017f2:	f3af 8000 	nop.w
  return ;
 80017f6:	bf00      	nop
}
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000254 	.word	0x20000254
 8001804:	20000300 	.word	0x20000300
 8001808:	200002fc 	.word	0x200002fc
 800180c:	58000800 	.word	0x58000800
 8001810:	40002800 	.word	0x40002800

08001814 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <RescheduleTimerList+0x124>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001826:	d108      	bne.n	800183a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001828:	bf00      	nop
 800182a:	4b44      	ldr	r3, [pc, #272]	; (800193c <RescheduleTimerList+0x128>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f7      	bne.n	800182a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800183a:	4b40      	ldr	r3, [pc, #256]	; (800193c <RescheduleTimerList+0x128>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	4b3e      	ldr	r3, [pc, #248]	; (800193c <RescheduleTimerList+0x128>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800184c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800184e:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <RescheduleTimerList+0x12c>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	493b      	ldr	r1, [pc, #236]	; (8001944 <RescheduleTimerList+0x130>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	3308      	adds	r3, #8
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001868:	f7ff ff36 	bl	80016d8 <ReturnTimeElapsed>
 800186c:	4603      	mov	r3, r0
 800186e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	429a      	cmp	r2, r3
 8001876:	d205      	bcs.n	8001884 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <RescheduleTimerList+0x134>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e04d      	b.n	8001920 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	4a31      	ldr	r2, [pc, #196]	; (800194c <RescheduleTimerList+0x138>)
 8001888:	8812      	ldrh	r2, [r2, #0]
 800188a:	b292      	uxth	r2, r2
 800188c:	4413      	add	r3, r2
 800188e:	461a      	mov	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4293      	cmp	r3, r2
 8001894:	d906      	bls.n	80018a4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <RescheduleTimerList+0x138>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <RescheduleTimerList+0x134>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	e03d      	b.n	8001920 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <RescheduleTimerList+0x134>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018b4:	e034      	b.n	8001920 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	4922      	ldr	r1, [pc, #136]	; (8001944 <RescheduleTimerList+0x130>)
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	3308      	adds	r3, #8
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d20a      	bcs.n	80018e4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	491c      	ldr	r1, [pc, #112]	; (8001944 <RescheduleTimerList+0x130>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	440b      	add	r3, r1
 80018dc:	3308      	adds	r3, #8
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e013      	b.n	800190c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	4917      	ldr	r1, [pc, #92]	; (8001944 <RescheduleTimerList+0x130>)
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	3308      	adds	r3, #8
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	1ac9      	subs	r1, r1, r3
 80018fc:	4811      	ldr	r0, [pc, #68]	; (8001944 <RescheduleTimerList+0x130>)
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4403      	add	r3, r0
 8001908:	3308      	adds	r3, #8
 800190a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	490d      	ldr	r1, [pc, #52]	; (8001944 <RescheduleTimerList+0x130>)
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	3315      	adds	r3, #21
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b06      	cmp	r3, #6
 8001924:	d1c7      	bne.n	80018b6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001926:	89bb      	ldrh	r3, [r7, #12]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff15 	bl	8001758 <RestartWakeupCounter>

  return ;
 800192e:	bf00      	nop
}
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40002800 	.word	0x40002800
 800193c:	200002fc 	.word	0x200002fc
 8001940:	20000250 	.word	0x20000250
 8001944:	200001c0 	.word	0x200001c0
 8001948:	20000258 	.word	0x20000258
 800194c:	20000304 	.word	0x20000304

08001950 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001956:	f3ef 8310 	mrs	r3, PRIMASK
 800195a:	617b      	str	r3, [r7, #20]
  return(result);
 800195c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001962:	4b5e      	ldr	r3, [pc, #376]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	22ca      	movs	r2, #202	; 0xca
 800196a:	625a      	str	r2, [r3, #36]	; 0x24
 800196c:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2253      	movs	r2, #83	; 0x53
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001976:	4b59      	ldr	r3, [pc, #356]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	4b57      	ldr	r3, [pc, #348]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001988:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800198a:	4b55      	ldr	r3, [pc, #340]	; (8001ae0 <HW_TS_RTC_Wakeup_Handler+0x190>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001992:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001996:	4953      	ldr	r1, [pc, #332]	; (8001ae4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	330c      	adds	r3, #12
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d170      	bne.n	8001a8e <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80019ac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019b0:	494c      	ldr	r1, [pc, #304]	; (8001ae4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	440b      	add	r3, r1
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80019c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019c4:	4947      	ldr	r1, [pc, #284]	; (8001ae4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	3310      	adds	r3, #16
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80019d6:	4b44      	ldr	r3, [pc, #272]	; (8001ae8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d04e      	beq.n	8001a7e <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80019e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019e4:	493f      	ldr	r1, [pc, #252]	; (8001ae4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	440b      	add	r3, r1
 80019f0:	330d      	adds	r3, #13
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d125      	bne.n	8001a46 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80019fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019fe:	2101      	movs	r1, #1
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fde5 	bl	80015d0 <UnlinkTimer>
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001a10:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a14:	4933      	ldr	r1, [pc, #204]	; (8001ae4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	3304      	adds	r3, #4
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f9d0 	bl	8001dd0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a30:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	22ca      	movs	r2, #202	; 0xca
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
 8001a3a:	4b28      	ldr	r3, [pc, #160]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2253      	movs	r2, #83	; 0x53
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
 8001a44:	e013      	b.n	8001a6e <HW_TS_RTC_Wakeup_Handler+0x11e>
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001a50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f931 	bl	8001cbc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	22ca      	movs	r2, #202	; 0xca
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
 8001a64:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2253      	movs	r2, #83	; 0x53
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001a6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	4619      	mov	r1, r3
 8001a76:	69b8      	ldr	r0, [r7, #24]
 8001a78:	f000 fa30 	bl	8001edc <HW_TS_RTC_Int_AppNot>
 8001a7c:	e024      	b.n	8001ac8 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8001a7e:	f7ff fec9 	bl	8001814 <RescheduleTimerList>
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f383 8810 	msr	PRIMASK, r3
 8001a8c:	e01c      	b.n	8001ac8 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001a8e:	bf00      	nop
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f7      	beq.n	8001a90 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001ab4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001ab8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	22ff      	movs	r2, #255	; 0xff
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001ad2:	bf00      	nop
}
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200002fc 	.word	0x200002fc
 8001ae0:	20000250 	.word	0x20000250
 8001ae4:	200001c0 	.word	0x200001c0
 8001ae8:	20000258 	.word	0x20000258
 8001aec:	58000800 	.word	0x58000800

08001af0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001afc:	4a64      	ldr	r2, [pc, #400]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	22ca      	movs	r2, #202	; 0xca
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24
 8001b0c:	4b60      	ldr	r3, [pc, #384]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2253      	movs	r2, #83	; 0x53
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001b16:	4b5f      	ldr	r3, [pc, #380]	; (8001c94 <HW_TS_Init+0x1a4>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4a5e      	ldr	r2, [pc, #376]	; (8001c94 <HW_TS_Init+0x1a4>)
 8001b1c:	f043 0320 	orr.w	r3, r3, #32
 8001b20:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001b22:	4b5c      	ldr	r3, [pc, #368]	; (8001c94 <HW_TS_Init+0x1a4>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f1c3 0304 	rsb	r3, r3, #4
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <HW_TS_Init+0x1a8>)
 8001b36:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001b38:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <HW_TS_Init+0x1a4>)
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b40:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001b44:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	fa92 f2a2 	rbit	r2, r2
 8001b4c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	2a00      	cmp	r2, #0
 8001b56:	d101      	bne.n	8001b5c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001b58:	2220      	movs	r2, #32
 8001b5a:	e003      	b.n	8001b64 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	fab2 f282 	clz	r2, r2
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	40d3      	lsrs	r3, r2
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <HW_TS_Init+0x1ac>)
 8001b6e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001b70:	4b48      	ldr	r3, [pc, #288]	; (8001c94 <HW_TS_Init+0x1a4>)
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HW_TS_Init+0x1b0>)
 8001b82:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001b84:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <HW_TS_Init+0x1b0>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	4a44      	ldr	r2, [pc, #272]	; (8001c9c <HW_TS_Init+0x1ac>)
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b96:	4a40      	ldr	r2, [pc, #256]	; (8001c98 <HW_TS_Init+0x1a8>)
 8001b98:	7812      	ldrb	r2, [r2, #0]
 8001b9a:	40d3      	lsrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d904      	bls.n	8001bb2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <HW_TS_Init+0x1b4>)
 8001baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bae:	801a      	strh	r2, [r3, #0]
 8001bb0:	e003      	b.n	8001bba <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <HW_TS_Init+0x1b4>)
 8001bb8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001bba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001bbe:	f7ff fb85 	bl	80012cc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001bc2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001bc6:	f7ff fb6d 	bl	80012a4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d143      	bne.n	8001c58 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001bd0:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <HW_TS_Init+0x1b8>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001bd6:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HW_TS_Init+0x1bc>)
 8001bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bdc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	77fb      	strb	r3, [r7, #31]
 8001be2:	e00c      	b.n	8001bfe <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001be4:	7ffa      	ldrb	r2, [r7, #31]
 8001be6:	4932      	ldr	r1, [pc, #200]	; (8001cb0 <HW_TS_Init+0x1c0>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	330c      	adds	r3, #12
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001bf8:	7ffb      	ldrb	r3, [r7, #31]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	77fb      	strb	r3, [r7, #31]
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	2b05      	cmp	r3, #5
 8001c02:	d9ef      	bls.n	8001be4 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HW_TS_Init+0x1c4>)
 8001c06:	2206      	movs	r2, #6
 8001c08:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001c0a:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c32:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001c34:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HW_TS_Init+0x1c8>)
 8001c36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c3a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f002 fd1c 	bl	800467a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	e00a      	b.n	8001c6e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001c58:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f002 fcf8 	bl	800465e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HW_TS_Init+0x1a0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	22ff      	movs	r2, #255	; 0xff
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2106      	movs	r1, #6
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f002 fcb4 	bl	80045ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c82:	2003      	movs	r0, #3
 8001c84:	f002 fccb 	bl	800461e <HAL_NVIC_EnableIRQ>

  return;
 8001c88:	bf00      	nop
}
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200002fc 	.word	0x200002fc
 8001c94:	40002800 	.word	0x40002800
 8001c98:	20000300 	.word	0x20000300
 8001c9c:	20000301 	.word	0x20000301
 8001ca0:	20000302 	.word	0x20000302
 8001ca4:	20000304 	.word	0x20000304
 8001ca8:	20000258 	.word	0x20000258
 8001cac:	20000254 	.word	0x20000254
 8001cb0:	200001c0 	.word	0x200001c0
 8001cb4:	20000250 	.word	0x20000250
 8001cb8:	58000800 	.word	0x58000800

08001cbc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8001cca:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001cce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f002 fcb1 	bl	800463a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001cd8:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	22ca      	movs	r2, #202	; 0xca
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
 8001ce2:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2253      	movs	r2, #83	; 0x53
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001cec:	79fa      	ldrb	r2, [r7, #7]
 8001cee:	4933      	ldr	r1, [pc, #204]	; (8001dbc <HW_TS_Stop+0x100>)
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4413      	add	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	440b      	add	r3, r1
 8001cfa:	330c      	adds	r3, #12
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d148      	bne.n	8001d96 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fc61 	bl	80015d0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001d0e:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <HW_TS_Stop+0x104>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d135      	bne.n	8001d86 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <HW_TS_Stop+0x108>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d26:	d108      	bne.n	8001d3a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001d28:	bf00      	nop
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f7      	bne.n	8001d2a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001d4e:	bf00      	nop
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f7      	beq.n	8001d50 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d74:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HW_TS_Stop+0x10c>)
 8001d78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d7c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d7e:	2003      	movs	r0, #3
 8001d80:	f002 fc7b 	bl	800467a <HAL_NVIC_ClearPendingIRQ>
 8001d84:	e007      	b.n	8001d96 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HW_TS_Stop+0x110>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	7cfa      	ldrb	r2, [r7, #19]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d001      	beq.n	8001d96 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001d92:	f7ff fd3f 	bl	8001814 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HW_TS_Stop+0xfc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	22ff      	movs	r2, #255	; 0xff
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001da0:	2003      	movs	r0, #3
 8001da2:	f002 fc3c 	bl	800461e <HAL_NVIC_EnableIRQ>
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001db0:	bf00      	nop
}
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200002fc 	.word	0x200002fc
 8001dbc:	200001c0 	.word	0x200001c0
 8001dc0:	20000250 	.word	0x20000250
 8001dc4:	40002800 	.word	0x40002800
 8001dc8:	58000800 	.word	0x58000800
 8001dcc:	20000251 	.word	0x20000251

08001dd0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001ddc:	79fa      	ldrb	r2, [r7, #7]
 8001dde:	493b      	ldr	r1, [pc, #236]	; (8001ecc <HW_TS_Start+0xfc>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	440b      	add	r3, r1
 8001dea:	330c      	adds	r3, #12
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d103      	bne.n	8001dfc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff60 	bl	8001cbc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8001e00:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e02:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e06:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001e08:	2003      	movs	r0, #3
 8001e0a:	f002 fc16 	bl	800463a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001e0e:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <HW_TS_Start+0x100>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	22ca      	movs	r2, #202	; 0xca
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
 8001e18:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HW_TS_Start+0x100>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2253      	movs	r2, #83	; 0x53
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001e22:	79fa      	ldrb	r2, [r7, #7]
 8001e24:	4929      	ldr	r1, [pc, #164]	; (8001ecc <HW_TS_Start+0xfc>)
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	330c      	adds	r3, #12
 8001e32:	2202      	movs	r2, #2
 8001e34:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001e36:	79fa      	ldrb	r2, [r7, #7]
 8001e38:	4924      	ldr	r1, [pc, #144]	; (8001ecc <HW_TS_Start+0xfc>)
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	3308      	adds	r3, #8
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001e4a:	79fa      	ldrb	r2, [r7, #7]
 8001e4c:	491f      	ldr	r1, [pc, #124]	; (8001ecc <HW_TS_Start+0xfc>)
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	3304      	adds	r3, #4
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fb0b 	bl	800147c <linkTimer>
 8001e66:	4603      	mov	r3, r0
 8001e68:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HW_TS_Start+0x104>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HW_TS_Start+0x108>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	7c7a      	ldrb	r2, [r7, #17]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d002      	beq.n	8001e82 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001e7c:	f7ff fcca 	bl	8001814 <RescheduleTimerList>
 8001e80:	e013      	b.n	8001eaa <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001e82:	79fa      	ldrb	r2, [r7, #7]
 8001e84:	4911      	ldr	r1, [pc, #68]	; (8001ecc <HW_TS_Start+0xfc>)
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	440b      	add	r3, r1
 8001e90:	3308      	adds	r3, #8
 8001e92:	6819      	ldr	r1, [r3, #0]
 8001e94:	8a7b      	ldrh	r3, [r7, #18]
 8001e96:	79fa      	ldrb	r2, [r7, #7]
 8001e98:	1ac9      	subs	r1, r1, r3
 8001e9a:	480c      	ldr	r0, [pc, #48]	; (8001ecc <HW_TS_Start+0xfc>)
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4403      	add	r3, r0
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HW_TS_Start+0x100>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	22ff      	movs	r2, #255	; 0xff
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f002 fbb2 	bl	800461e <HAL_NVIC_EnableIRQ>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001ec4:	bf00      	nop
}
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200001c0 	.word	0x200001c0
 8001ed0:	200002fc 	.word	0x200002fc
 8001ed4:	20000250 	.word	0x20000250
 8001ed8:	20000251 	.word	0x20000251

08001edc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4798      	blx	r3

  return;
 8001eee:	bf00      	nop
}
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <toggleLed>:
 *      Author: patrick
 */

#include "led.h"

void toggleLed(uint8_t red, uint8_t green, uint8_t blue){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	460b      	mov	r3, r1
 8001f04:	71bb      	strb	r3, [r7, #6]
 8001f06:	4613      	mov	r3, r2
 8001f08:	717b      	strb	r3, [r7, #5]
	if(red){
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <toggleLed+0x24>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2110      	movs	r1, #16
 8001f14:	4814      	ldr	r0, [pc, #80]	; (8001f68 <toggleLed+0x70>)
 8001f16:	f002 ffa3 	bl	8004e60 <HAL_GPIO_WritePin>
 8001f1a:	e004      	b.n	8001f26 <toggleLed+0x2e>
	}
	else{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	2110      	movs	r1, #16
 8001f20:	4811      	ldr	r0, [pc, #68]	; (8001f68 <toggleLed+0x70>)
 8001f22:	f002 ff9d 	bl	8004e60 <HAL_GPIO_WritePin>
	}

	if(blue){
 8001f26:	797b      	ldrb	r3, [r7, #5]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <toggleLed+0x40>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2101      	movs	r1, #1
 8001f30:	480e      	ldr	r0, [pc, #56]	; (8001f6c <toggleLed+0x74>)
 8001f32:	f002 ff95 	bl	8004e60 <HAL_GPIO_WritePin>
 8001f36:	e004      	b.n	8001f42 <toggleLed+0x4a>
		}
		else{
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	480b      	ldr	r0, [pc, #44]	; (8001f6c <toggleLed+0x74>)
 8001f3e:	f002 ff8f 	bl	8004e60 <HAL_GPIO_WritePin>
		}

	if(green){
 8001f42:	79bb      	ldrb	r3, [r7, #6]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <toggleLed+0x5c>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	4807      	ldr	r0, [pc, #28]	; (8001f6c <toggleLed+0x74>)
 8001f4e:	f002 ff87 	bl	8004e60 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
		}
}
 8001f52:	e004      	b.n	8001f5e <toggleLed+0x66>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001f54:	2201      	movs	r2, #1
 8001f56:	2102      	movs	r1, #2
 8001f58:	4804      	ldr	r0, [pc, #16]	; (8001f6c <toggleLed+0x74>)
 8001f5a:	f002 ff81 	bl	8004e60 <HAL_GPIO_WritePin>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	48001000 	.word	0x48001000
 8001f6c:	48000400 	.word	0x48000400

08001f70 <LL_RCC_HSI48_Enable>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_RCC_HSI48_IsReady>:
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d101      	bne.n	8001faa <LL_RCC_HSI48_IsReady+0x18>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_RCC_HSI48_IsReady+0x1a>
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_RCC_LSE_SetDriveCapability>:
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	f023 0218 	bic.w	r2, r3, #24
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	3220      	adds	r2, #32
 8001ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff8:	4a05      	ldr	r2, [pc, #20]	; (8002010 <LL_HSEM_1StepLock+0x2c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d001      	beq.n	8002002 <LL_HSEM_1StepLock+0x1e>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <LL_HSEM_1StepLock+0x20>
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	80000400 	.word	0x80000400

08002014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  /**
	   * The OPTVERR flag is wrongly set at power on
	   * It shall be cleared before using any HAL_FLASH_xxx() api
	   */
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <main+0x50>)
 800201a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800201e:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002020:	f000 feb2 	bl	8002d88 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8002024:	f000 fab6 	bl	8002594 <_Z12Reset_Devicev>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002028:	f000 f81e 	bl	8002068 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  Init_Exti( );
 800202c:	f000 fadc 	bl	80025e8 <_Z9Init_Extiv>
  initClk();
 8002030:	f000 fae6 	bl	8002600 <_Z7initClkv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002034:	f7ff f8ca 	bl	80011cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002038:	f7ff f893 	bl	8001162 <MX_DMA_Init>
  MX_TIM2_Init();
 800203c:	f000 fd5a 	bl	8002af4 <MX_TIM2_Init>
  MX_TIM17_Init();
 8002040:	f000 fda6 	bl	8002b90 <MX_TIM17_Init>
  MX_ADC1_Init();
 8002044:	f7fe fca8 	bl	8000998 <MX_ADC1_Init>
  MX_USB_Device_Init();
 8002048:	f010 fe98 	bl	8012d7c <MX_USB_Device_Init>
  MX_RF_Init();
 800204c:	f000 faf4 	bl	8002638 <MX_RF_Init>
  MX_RTC_Init();
 8002050:	f000 fb24 	bl	800269c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002054:	f00b fcfe 	bl	800da54 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002058:	f7fe fefa 	bl	8000e50 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 800205c:	f00b fd2e 	bl	800dabc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002060:	e7fe      	b.n	8002060 <main+0x4c>
 8002062:	bf00      	nop
 8002064:	58004000 	.word	0x58004000

08002068 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b0ae      	sub	sp, #184	; 0xb8
 800206c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800206e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002072:	2248      	movs	r2, #72	; 0x48
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f011 fbe7 	bl	801384a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800207c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
 800208c:	615a      	str	r2, [r3, #20]
 800208e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	2250      	movs	r2, #80	; 0x50
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f011 fbd7 	bl	801384a <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ba:	f043 0303 	orr.w	r3, r3, #3
 80020be:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020c0:	f003 fe50 	bl	8005d64 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff ff76 	bl	8001fb6 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <_Z18SystemClock_Configv+0x180>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020d2:	4a45      	ldr	r2, [pc, #276]	; (80021e8 <_Z18SystemClock_Configv+0x180>)
 80020d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <_Z18SystemClock_Configv+0x180>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80020e6:	2307      	movs	r3, #7
 80020e8:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020f0:	2301      	movs	r3, #1
 80020f2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020fa:	2340      	movs	r3, #64	; 0x40
 80020fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002106:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800210a:	4618      	mov	r0, r3
 800210c:	f004 f9da 	bl	80064c4 <HAL_RCC_OscConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf14      	ite	ne
 8002116:	2301      	movne	r3, #1
 8002118:	2300      	moveq	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8002120:	f000 f878 	bl	8002214 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002124:	236f      	movs	r3, #111	; 0x6f
 8002126:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002128:	2302      	movs	r3, #2
 800212a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800212c:	2300      	movs	r3, #0
 800212e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002130:	2300      	movs	r3, #0
 8002132:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002134:	2300      	movs	r3, #0
 8002136:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002144:	2101      	movs	r1, #1
 8002146:	4618      	mov	r0, r3
 8002148:	f004 fd48 	bl	8006bdc <HAL_RCC_ClockConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf14      	ite	ne
 8002152:	2301      	movne	r3, #1
 8002154:	2300      	moveq	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 800215c:	f000 f85a 	bl	8002214 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002160:	f44f 5374 	mov.w	r3, #15616	; 0x3d00
 8002164:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002166:	2306      	movs	r3, #6
 8002168:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800216a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002170:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002174:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002176:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800217a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800217c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002180:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002182:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002188:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800218c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800218e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002192:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002194:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002198:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800219a:	2300      	movs	r3, #0
 800219c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800219e:	2310      	movs	r3, #16
 80021a0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	4618      	mov	r0, r3
 80021a6:	f005 f974 	bl	8007492 <HAL_RCCEx_PeriphCLKConfig>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <_Z18SystemClock_Configv+0x156>
  {
    Error_Handler();
 80021ba:	f000 f82b 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  //https://community.st.com/s/question/0D50X0000C0wdqe/stm32wb55-ble-hid?t=1591239574627
  LL_HSEM_1StepLock(HSEM, 5 );
 80021be:	2105      	movs	r1, #5
 80021c0:	480a      	ldr	r0, [pc, #40]	; (80021ec <_Z18SystemClock_Configv+0x184>)
 80021c2:	f7ff ff0f 	bl	8001fe4 <LL_HSEM_1StepLock>
  LL_RCC_HSI48_Enable();
 80021c6:	f7ff fed3 	bl	8001f70 <LL_RCC_HSI48_Enable>
  while(!LL_RCC_HSI48_IsReady());
 80021ca:	f7ff fee2 	bl	8001f92 <LL_RCC_HSI48_IsReady>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d000      	beq.n	80021e0 <_Z18SystemClock_Configv+0x178>
 80021de:	e7f4      	b.n	80021ca <_Z18SystemClock_Configv+0x162>
  /* USER CODE END Smps */
}
 80021e0:	bf00      	nop
 80021e2:	37b8      	adds	r7, #184	; 0xb8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	58000400 	.word	0x58000400
 80021ec:	58001400 	.word	0x58001400

080021f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002202:	f000 fde1 	bl	8002dc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40012c00 	.word	0x40012c00

08002214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800221a:	e7fe      	b.n	800221a <Error_Handler+0x6>

0800221c <LL_EXTI_DisableIT_0_31>:
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <LL_EXTI_DisableIT_0_31+0x28>)
 8002226:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	43db      	mvns	r3, r3
 800222e:	4905      	ldr	r1, [pc, #20]	; (8002244 <LL_EXTI_DisableIT_0_31+0x28>)
 8002230:	4013      	ands	r3, r2
 8002232:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	58000800 	.word	0x58000800

08002248 <LL_EXTI_DisableIT_32_63>:
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <LL_EXTI_DisableIT_32_63+0x28>)
 8002252:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	43db      	mvns	r3, r3
 800225a:	4905      	ldr	r1, [pc, #20]	; (8002270 <LL_EXTI_DisableIT_32_63+0x28>)
 800225c:	4013      	ands	r3, r2
 800225e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	58000800 	.word	0x58000800

08002274 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800229a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80022bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022cc:	d101      	bne.n	80022d2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80022e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022f2:	d101      	bne.n	80022f8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800230c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002318:	4313      	orrs	r3, r2
 800231a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800231c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002328:	68fb      	ldr	r3, [r7, #12]
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	605a      	str	r2, [r3, #4]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	605a      	str	r2, [r3, #4]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	615a      	str	r2, [r3, #20]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	615a      	str	r2, [r3, #20]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	609a      	str	r2, [r3, #8]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	619a      	str	r2, [r3, #24]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <LL_HSEM_1StepLock>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	3220      	adds	r2, #32
 800240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002410:	4a05      	ldr	r2, [pc, #20]	; (8002428 <LL_HSEM_1StepLock+0x2c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d001      	beq.n	800241a <LL_HSEM_1StepLock+0x1e>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <LL_HSEM_1StepLock+0x20>
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	80000400 	.word	0x80000400

0800242c <_Z6myMainv>:

struct ADC_DATA adc_data;

//uint16_t adc_data[4];

int myMain(void){
 800242c:	b580      	push	{r7, lr}
 800242e:	b0b0      	sub	sp, #192	; 0xc0
 8002430:	af08      	add	r7, sp, #32
		powerMeasSetup();
		HAL_Delay(100);

	#endif
#else
	HAL_TIM_Base_Start_IT(&htim2);
 8002432:	4840      	ldr	r0, [pc, #256]	; (8002534 <_Z6myMainv+0x108>)
 8002434:	f005 fc3e 	bl	8007cb4 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_SET);
 8002438:	2201      	movs	r2, #1
 800243a:	2110      	movs	r1, #16
 800243c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002440:	f002 fd0e 	bl	8004e60 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim17);
 8002444:	483c      	ldr	r0, [pc, #240]	; (8002538 <_Z6myMainv+0x10c>)
 8002446:	f005 fbef 	bl	8007c28 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800244a:	2100      	movs	r1, #0
 800244c:	483a      	ldr	r0, [pc, #232]	; (8002538 <_Z6myMainv+0x10c>)
 800244e:	f005 fce1 	bl	8007e14 <HAL_TIM_PWM_Start>

	Stepper motor_base(STEPS, AIN1_1_GPIO_Port, AIN1_1_Pin,
			AIN2_1_GPIO_Port, AIN2_1_Pin,
			BIN1_1_GPIO_Port, BIN1_1_Pin,
			BIN2_1_GPIO_Port, BIN2_1_Pin, &adc_data.mag_base, NON_INVERTED);
 8002452:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002456:	2301      	movs	r3, #1
 8002458:	9307      	str	r3, [sp, #28]
 800245a:	4b38      	ldr	r3, [pc, #224]	; (800253c <_Z6myMainv+0x110>)
 800245c:	9306      	str	r3, [sp, #24]
 800245e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002462:	9305      	str	r3, [sp, #20]
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <_Z6myMainv+0x114>)
 8002466:	9304      	str	r3, [sp, #16]
 8002468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246c:	9303      	str	r3, [sp, #12]
 800246e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002472:	9302      	str	r3, [sp, #8]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002482:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002486:	f640 0104 	movw	r1, #2052	; 0x804
 800248a:	f7fd fe83 	bl	8000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_base.setSpeed(12);
 800248e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002492:	210c      	movs	r1, #12
 8002494:	4618      	mov	r0, r3
 8002496:	f7fd febd 	bl	8000214 <_ZN7Stepper8setSpeedEl>
	motor_base.setStepBound(BASE_STEP_RANGE);
 800249a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800249e:	f641 010c 	movw	r1, #6156	; 0x180c
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd fece 	bl	8000244 <_ZN7Stepper12setStepBoundEl>

	Stepper motor_led(STEPS, AIN1_2_GPIO_Port, AIN1_2_Pin,
				AIN2_2_GPIO_Port, AIN2_2_Pin,
				BIN1_2_GPIO_Port, BIN1_2_Pin,
				BIN2_2_GPIO_Port, BIN2_2_Pin,  &adc_data.mag_led, INVERTED);
 80024a8:	1d38      	adds	r0, r7, #4
 80024aa:	23ff      	movs	r3, #255	; 0xff
 80024ac:	9307      	str	r3, [sp, #28]
 80024ae:	4b25      	ldr	r3, [pc, #148]	; (8002544 <_Z6myMainv+0x118>)
 80024b0:	9306      	str	r3, [sp, #24]
 80024b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b6:	9305      	str	r3, [sp, #20]
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <_Z6myMainv+0x114>)
 80024ba:	9304      	str	r3, [sp, #16]
 80024bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c0:	9303      	str	r3, [sp, #12]
 80024c2:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <_Z6myMainv+0x114>)
 80024c4:	9302      	str	r3, [sp, #8]
 80024c6:	2301      	movs	r3, #1
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2302      	movs	r3, #2
 80024d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024d6:	f640 0104 	movw	r1, #2052	; 0x804
 80024da:	f7fd fe5b 	bl	8000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_led.setSpeed(16);
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	2110      	movs	r1, #16
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fd fe96 	bl	8000214 <_ZN7Stepper8setSpeedEl>
	motor_led.setStepBound(LED_STEP_RANGE);
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	f647 1123 	movw	r1, #31011	; 0x7923
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fd fea8 	bl	8000244 <_ZN7Stepper12setStepBoundEl>

	uint32_t counter = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_data, 4);
 80024fa:	2204      	movs	r2, #4
 80024fc:	490f      	ldr	r1, [pc, #60]	; (800253c <_Z6myMainv+0x110>)
 80024fe:	4812      	ldr	r0, [pc, #72]	; (8002548 <_Z6myMainv+0x11c>)
 8002500:	f000 ffe2 	bl	80034c8 <HAL_ADC_Start_DMA>
	HAL_Delay(100);
 8002504:	2064      	movs	r0, #100	; 0x64
 8002506:	f000 fc8b 	bl	8002e20 <HAL_Delay>

	while (1)
		  {
			counter += 1;
 800250a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800250e:	3301      	adds	r3, #1
 8002510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
//			while(1){
//				motor_base.honeAxis();
//				motor_base.step(-3078);
//				motor_base.step(-3078);
//			}
			startCal(0.0, 0.15, 0.05, 0.2, motor_base, motor_led);
 8002514:	1d3a      	adds	r2, r7, #4
 8002516:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	eddf 1a0b 	vldr	s3, [pc, #44]	; 800254c <_Z6myMainv+0x120>
 8002522:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8002550 <_Z6myMainv+0x124>
 8002526:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002554 <_Z6myMainv+0x128>
 800252a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002558 <_Z6myMainv+0x12c>
 800252e:	f7fe fccd 	bl	8000ecc <startCal>

			while(1){};
 8002532:	e7fe      	b.n	8002532 <_Z6myMainv+0x106>
 8002534:	20004f6c 	.word	0x20004f6c
 8002538:	20004f20 	.word	0x20004f20
 800253c:	20000308 	.word	0x20000308
 8002540:	48000400 	.word	0x48000400
 8002544:	2000030a 	.word	0x2000030a
 8002548:	20004de0 	.word	0x20004de0
 800254c:	3e4ccccd 	.word	0x3e4ccccd
 8002550:	3d4ccccd 	.word	0x3d4ccccd
 8002554:	3e19999a 	.word	0x3e19999a
 8002558:	00000000 	.word	0x00000000

0800255c <_Z18Reset_BackupDomainv>:




void Reset_BackupDomain( void )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8002560:	f7ff feaa 	bl	80022b8 <LL_RCC_IsActiveFlag_PINRST>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d006      	beq.n	8002578 <_Z18Reset_BackupDomainv+0x1c>
 800256a:	f7ff feb8 	bl	80022de <LL_RCC_IsActiveFlag_SFTRST>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <_Z18Reset_BackupDomainv+0x1c>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <_Z18Reset_BackupDomainv+0x1e>
 8002578:	2300      	movs	r3, #0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d008      	beq.n	8002590 <_Z18Reset_BackupDomainv+0x34>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800257e:	f003 fbf1 	bl	8005d64 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8002582:	f003 fbef 	bl	8005d64 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8002586:	f7ff fe75 	bl	8002274 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800258a:	f7ff fe84 	bl	8002296 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800258e:	bf00      	nop
 8002590:	bf00      	nop
}
 8002592:	bd80      	pop	{r7, pc}

08002594 <_Z12Reset_Devicev>:

void Reset_Device( void )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8002598:	f7ff ffe0 	bl	800255c <_Z18Reset_BackupDomainv>

  Reset_IPCC();
 800259c:	f000 f802 	bl	80025a4 <_Z10Reset_IPCCv>
#endif

  return;
 80025a0:	bf00      	nop
}
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <_Z10Reset_IPCCv>:

void Reset_IPCC( void )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80025a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80025ac:	f7ff feaa 	bl	8002304 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80025b0:	213f      	movs	r1, #63	; 0x3f
 80025b2:	480c      	ldr	r0, [pc, #48]	; (80025e4 <_Z10Reset_IPCCv+0x40>)
 80025b4:	f7ff ff05 	bl	80023c2 <LL_C1_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80025b8:	213f      	movs	r1, #63	; 0x3f
 80025ba:	480a      	ldr	r0, [pc, #40]	; (80025e4 <_Z10Reset_IPCCv+0x40>)
 80025bc:	f7ff ff0f 	bl	80023de <LL_C2_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80025c0:	213f      	movs	r1, #63	; 0x3f
 80025c2:	4808      	ldr	r0, [pc, #32]	; (80025e4 <_Z10Reset_IPCCv+0x40>)
 80025c4:	f7ff feb7 	bl	8002336 <LL_C1_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80025c8:	213f      	movs	r1, #63	; 0x3f
 80025ca:	4806      	ldr	r0, [pc, #24]	; (80025e4 <_Z10Reset_IPCCv+0x40>)
 80025cc:	f7ff fed6 	bl	800237c <LL_C2_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80025d0:	213f      	movs	r1, #63	; 0x3f
 80025d2:	4804      	ldr	r0, [pc, #16]	; (80025e4 <_Z10Reset_IPCCv+0x40>)
 80025d4:	f7ff fec1 	bl	800235a <LL_C1_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80025d8:	213f      	movs	r1, #63	; 0x3f
 80025da:	4802      	ldr	r0, [pc, #8]	; (80025e4 <_Z10Reset_IPCCv+0x40>)
 80025dc:	f7ff fee0 	bl	80023a0 <LL_C2_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80025e0:	bf00      	nop
}
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	58000c00 	.word	0x58000c00

080025e8 <_Z9Init_Extiv>:

void Init_Exti( void )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	f7ff fe14 	bl	800221c <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80025f4:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80025f8:	f7ff fe26 	bl	8002248 <LL_EXTI_DisableIT_32_63>

  return;
 80025fc:	bf00      	nop
}
 80025fe:	bd80      	pop	{r7, pc}

08002600 <_Z7initClkv>:

  return;
}

void initClk (void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b092      	sub	sp, #72	; 0x48
 8002604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef st_oscInit = {0};
 8002606:	463b      	mov	r3, r7
 8002608:	2248      	movs	r2, #72	; 0x48
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f011 f91c 	bl	801384a <memset>

  /* Get mutex */
  LL_HSEM_1StepLock(HSEM, 5);
 8002612:	2105      	movs	r1, #5
 8002614:	4807      	ldr	r0, [pc, #28]	; (8002634 <_Z7initClkv+0x34>)
 8002616:	f7ff fef1 	bl	80023fc <LL_HSEM_1StepLock>

  st_oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800261a:	2340      	movs	r3, #64	; 0x40
 800261c:	603b      	str	r3, [r7, #0]
  st_oscInit.HSI48State     = RCC_HSI48_ON; /* Used by USB */
 800261e:	2301      	movs	r3, #1
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_RCC_OscConfig(&st_oscInit);
 8002622:	463b      	mov	r3, r7
 8002624:	4618      	mov	r0, r3
 8002626:	f003 ff4d 	bl	80064c4 <HAL_RCC_OscConfig>
}
 800262a:	bf00      	nop
 800262c:	3748      	adds	r7, #72	; 0x48
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	58001400 	.word	0x58001400

08002638 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_RCC_EnableRTC>:
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002674:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4313      	orrs	r3, r2
 800267e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002684:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800268c:	68fb      	ldr	r3, [r7, #12]
}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_RTC_Init+0x4c>)
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <MX_RTC_Init+0x50>)
 80026a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <MX_RTC_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_RTC_Init+0x4c>)
 80026ae:	220f      	movs	r2, #15
 80026b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <MX_RTC_Init+0x4c>)
 80026b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80026b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_RTC_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_RTC_Init+0x4c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_RTC_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_RTC_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_RTC_Init+0x4c>)
 80026d4:	f005 f963 	bl	800799e <HAL_RTC_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80026de:	f7ff fd99 	bl	8002214 <Error_Handler>
  }

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20004eb0 	.word	0x20004eb0
 80026ec:	40002800 	.word	0x40002800

080026f0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a06      	ldr	r2, [pc, #24]	; (8002718 <HAL_RTC_MspInit+0x28>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d105      	bne.n	800270e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002702:	f7ff ffa0 	bl	8002646 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002706:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800270a:	f7ff ffad 	bl	8002668 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40002800 	.word	0x40002800

0800271c <MsgTask>:

char* endOfLine = "\n\r";

#ifndef SOLAR_SENSOR_NODE
void MsgTask(void *argument)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	struct MeasMsg msg;

	while(1){
		// grab message from queue
		osMessageQueueGet (msgQueueHandle, &msg, NULL, osWaitForever);
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <MsgTask+0x28>)
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	f107 010c 	add.w	r1, r7, #12
 800272c:	f04f 33ff 	mov.w	r3, #4294967295
 8002730:	2200      	movs	r2, #0
 8002732:	f00b ff61 	bl	800e5f8 <osMessageQueueGet>

		// operate on said message
		measMsgReceivedFromNode(&msg);
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f804 	bl	8002748 <measMsgReceivedFromNode>
		osMessageQueueGet (msgQueueHandle, &msg, NULL, osWaitForever);
 8002740:	e7f0      	b.n	8002724 <MsgTask+0x8>
 8002742:	bf00      	nop
 8002744:	20000294 	.word	0x20000294

08002748 <measMsgReceivedFromNode>:
	}
}
#endif

void measMsgReceivedFromNode(struct MeasMsg* msg){
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

	// send over UART if USB UART active
#if USB_UART_ACTIVE
	int8_t retry = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	73fb      	strb	r3, [r7, #15]

	memcpy((struct MeasMsg*) &serialMsg.measMsg, msg, sizeof(struct MeasMsg));
 8002754:	2214      	movs	r2, #20
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4811      	ldr	r0, [pc, #68]	; (80027a0 <measMsgReceivedFromNode+0x58>)
 800275a:	f011 f86b 	bl	8013834 <memcpy>

	/* the "-2" in the size is a hack-ish way of removing the byte padding for the python
	 	 data ingester doesn't screw up*/
	while(CDC_Transmit_FS((uint8_t* ) &serialMsg, sizeof(serialMsg)-2) != USBD_OK){
 800275e:	e00d      	b.n	800277c <measMsgReceivedFromNode+0x34>
			if(retry == 5){
 8002760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002764:	2b05      	cmp	r3, #5
 8002766:	d102      	bne.n	800276e <measMsgReceivedFromNode+0x26>
				retry = -1;
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	73fb      	strb	r3, [r7, #15]
				break;
 800276c:	e00d      	b.n	800278a <measMsgReceivedFromNode+0x42>
			}
			HAL_Delay(1);
 800276e:	2001      	movs	r0, #1
 8002770:	f000 fb56 	bl	8002e20 <HAL_Delay>
			retry+=1;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	3301      	adds	r3, #1
 8002778:	b2db      	uxtb	r3, r3
 800277a:	73fb      	strb	r3, [r7, #15]
	while(CDC_Transmit_FS((uint8_t* ) &serialMsg, sizeof(serialMsg)-2) != USBD_OK){
 800277c:	2116      	movs	r1, #22
 800277e:	4808      	ldr	r0, [pc, #32]	; (80027a0 <measMsgReceivedFromNode+0x58>)
 8002780:	f010 fbba 	bl	8012ef8 <CDC_Transmit_FS>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1ea      	bne.n	8002760 <measMsgReceivedFromNode+0x18>

	// TODO check if power rating in table is lower than current one
	//		if so, replace and record current angle measurements

	// TODO if all expected nodes have replied, move to next Spotlight position
	osThreadFlagsSet (defaultTaskHandle, CAL_THREAD_FLAG);
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <measMsgReceivedFromNode+0x5c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2103      	movs	r1, #3
 8002790:	4618      	mov	r0, r3
 8002792:	f00b fa6f 	bl	800dc74 <osThreadFlagsSet>
}
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000004 	.word	0x20000004
 80027a4:	2000028c 	.word	0x2000028c

080027a8 <LL_AHB3_GRP1_EnableClock>:
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4313      	orrs	r3, r2
 80027be:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80027c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027cc:	68fb      	ldr	r3, [r7, #12]
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80027de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80027e2:	f7ff ffe1 	bl	80027a8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	210f      	movs	r1, #15
 80027ea:	f06f 0001 	mvn.w	r0, #1
 80027ee:	f001 fefc 	bl	80045ea <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2105      	movs	r1, #5
 80027f6:	202e      	movs	r0, #46	; 0x2e
 80027f8:	f001 fef7 	bl	80045ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80027fc:	202e      	movs	r0, #46	; 0x2e
 80027fe:	f001 ff0e 	bl	800461e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	210f      	movs	r1, #15
 8002806:	202c      	movs	r0, #44	; 0x2c
 8002808:	f001 feef 	bl	80045ea <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	210f      	movs	r1, #15
 8002810:	202d      	movs	r0, #45	; 0x2d
 8002812:	f001 feea 	bl	80045ea <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}

0800281a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002826:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4313      	orrs	r3, r2
 8002830:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002836:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4013      	ands	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800283e:	68fb      	ldr	r3, [r7, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08c      	sub	sp, #48	; 0x30
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800285c:	2200      	movs	r2, #0
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	2019      	movs	r0, #25
 8002862:	f001 fec2 	bl	80045ea <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002866:	2019      	movs	r0, #25
 8002868:	f001 fed9 	bl	800461e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800286c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002870:	f7ff ffd3 	bl	800281a <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002874:	f107 0208 	add.w	r2, r7, #8
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f004 fb80 	bl	8006f84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002884:	f004 fb68 	bl	8006f58 <HAL_RCC_GetPCLK2Freq>
 8002888:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <HAL_InitTick+0x8c>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0c9b      	lsrs	r3, r3, #18
 8002894:	3b01      	subs	r3, #1
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002898:	4b10      	ldr	r3, [pc, #64]	; (80028dc <HAL_InitTick+0x90>)
 800289a:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <HAL_InitTick+0x94>)
 800289c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <HAL_InitTick+0x90>)
 80028a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80028a6:	4a0d      	ldr	r2, [pc, #52]	; (80028dc <HAL_InitTick+0x90>)
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_InitTick+0x90>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_InitTick+0x90>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80028b8:	4808      	ldr	r0, [pc, #32]	; (80028dc <HAL_InitTick+0x90>)
 80028ba:	f005 f95e 	bl	8007b7a <HAL_TIM_Base_Init>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d104      	bne.n	80028ce <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80028c4:	4805      	ldr	r0, [pc, #20]	; (80028dc <HAL_InitTick+0x90>)
 80028c6:	f005 f9f5 	bl	8007cb4 <HAL_TIM_Base_Start_IT>
 80028ca:	4603      	mov	r3, r0
 80028cc:	e000      	b.n	80028d0 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3730      	adds	r7, #48	; 0x30
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	431bde83 	.word	0x431bde83
 80028dc:	20004ed4 	.word	0x20004ed4
 80028e0:	40012c00 	.word	0x40012c00

080028e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <NMI_Handler+0x4>

080028ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ee:	e7fe      	b.n	80028ee <HardFault_Handler+0x4>

080028f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <MemManage_Handler+0x4>

080028f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <BusFault_Handler+0x4>

080028fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002900:	e7fe      	b.n	8002900 <UsageFault_Handler+0x4>

08002902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002914:	4802      	ldr	r0, [pc, #8]	; (8002920 <DMA1_Channel1_IRQHandler+0x10>)
 8002916:	f001 ffe2 	bl	80048de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20004e44 	.word	0x20004e44

08002924 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <ADC1_IRQHandler+0x10>)
 800292a:	f000 fe51 	bl	80035d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20004de0 	.word	0x20004de0

08002938 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <USB_LP_IRQHandler+0x10>)
 800293e:	f002 fba8 	bl	8005092 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20006514 	.word	0x20006514

0800294c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002950:	4802      	ldr	r0, [pc, #8]	; (800295c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002952:	f005 fb39 	bl	8007fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20004ed4 	.word	0x20004ed4

08002960 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002964:	f002 fa94 	bl	8004e90 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}

0800296c <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002970:	f7fe ffee 	bl	8001950 <HW_TS_RTC_Wakeup_Handler>
}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}

08002978 <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 800297c:	f010 f87e 	bl	8012a7c <HW_IPCC_Tx_Handler>
  return;
 8002980:	bf00      	nop
}
 8002982:	bd80      	pop	{r7, pc}

08002984 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8002988:	f010 f81e 	bl	80129c8 <HW_IPCC_Rx_Handler>
  return;
 800298c:	bf00      	nop
}
 800298e:	bd80      	pop	{r7, pc}

08002990 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8002990:	b40c      	push	{r2, r3}
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	460a      	mov	r2, r1
 800299c:	71fb      	strb	r3, [r7, #7]
 800299e:	4613      	mov	r3, r2
 80029a0:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	b002      	add	sp, #8
 80029ae:	4770      	bx	lr

080029b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80029b4:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <SystemInit+0xa0>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80029ba:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <SystemInit+0xa0>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c0:	4a23      	ldr	r2, [pc, #140]	; (8002a50 <SystemInit+0xa0>)
 80029c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80029da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029de:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80029e2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80029e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <SystemInit+0xa4>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80029f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a00:	f023 0305 	bic.w	r3, r3, #5
 8002a04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a20:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <SystemInit+0xa8>)
 8002a22:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a28:	4a0b      	ldr	r2, [pc, #44]	; (8002a58 <SystemInit+0xa8>)
 8002a2a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000ed00 	.word	0xe000ed00
 8002a54:	faf6fefb 	.word	0xfaf6fefb
 8002a58:	22041000 	.word	0x22041000

08002a5c <LL_AHB2_GRP1_EnableClock>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a80:	68fb      	ldr	r3, [r7, #12]
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_APB1_GRP1_EnableClock>:
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_APB2_GRP1_EnableClock>:
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002acc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002adc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <MX_TIM2_Init+0x98>)
 8002b14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8002b1a:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <MX_TIM2_Init+0x98>)
 8002b1c:	221f      	movs	r2, #31
 8002b1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b20:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <MX_TIM2_Init+0x98>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002b26:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <MX_TIM2_Init+0x98>)
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b2e:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <MX_TIM2_Init+0x98>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b34:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <MX_TIM2_Init+0x98>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b3a:	4814      	ldr	r0, [pc, #80]	; (8002b8c <MX_TIM2_Init+0x98>)
 8002b3c:	f005 f81d 	bl	8007b7a <HAL_TIM_Base_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002b46:	f7ff fb65 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b50:	f107 0310 	add.w	r3, r7, #16
 8002b54:	4619      	mov	r1, r3
 8002b56:	480d      	ldr	r0, [pc, #52]	; (8002b8c <MX_TIM2_Init+0x98>)
 8002b58:	f005 fc66 	bl	8008428 <HAL_TIM_ConfigClockSource>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b62:	f7ff fb57 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4806      	ldr	r0, [pc, #24]	; (8002b8c <MX_TIM2_Init+0x98>)
 8002b74:	f006 f8de 	bl	8008d34 <HAL_TIMEx_MasterConfigSynchronization>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b7e:	f7ff fb49 	bl	8002214 <Error_Handler>
  }

}
 8002b82:	bf00      	nop
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20004f6c 	.word	0x20004f6c

08002b90 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b094      	sub	sp, #80	; 0x50
 8002b94:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	60da      	str	r2, [r3, #12]
 8002ba4:	611a      	str	r2, [r3, #16]
 8002ba6:	615a      	str	r2, [r3, #20]
 8002ba8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002baa:	463b      	mov	r3, r7
 8002bac:	2234      	movs	r2, #52	; 0x34
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f010 fe4a 	bl	801384a <memset>

  htim17.Instance = TIM17;
 8002bb6:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <MX_TIM17_Init+0xec>)
 8002bb8:	4a31      	ldr	r2, [pc, #196]	; (8002c80 <MX_TIM17_Init+0xf0>)
 8002bba:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3199;
 8002bbc:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <MX_TIM17_Init+0xec>)
 8002bbe:	f640 427f 	movw	r2, #3199	; 0xc7f
 8002bc2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc4:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <MX_TIM17_Init+0xec>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8002bca:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <MX_TIM17_Init+0xec>)
 8002bcc:	2264      	movs	r2, #100	; 0x64
 8002bce:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <MX_TIM17_Init+0xec>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002bd6:	4b29      	ldr	r3, [pc, #164]	; (8002c7c <MX_TIM17_Init+0xec>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bdc:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <MX_TIM17_Init+0xec>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002be2:	4826      	ldr	r0, [pc, #152]	; (8002c7c <MX_TIM17_Init+0xec>)
 8002be4:	f004 ffc9 	bl	8007b7a <HAL_TIM_Base_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002bee:	f7ff fb11 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002bf2:	4822      	ldr	r0, [pc, #136]	; (8002c7c <MX_TIM17_Init+0xec>)
 8002bf4:	f005 f8ac 	bl	8007d50 <HAL_TIM_PWM_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002bfe:	f7ff fb09 	bl	8002214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c02:	2360      	movs	r3, #96	; 0x60
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 100;
 8002c06:	2364      	movs	r3, #100	; 0x64
 8002c08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c16:	2300      	movs	r3, #0
 8002c18:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c22:	2200      	movs	r2, #0
 8002c24:	4619      	mov	r1, r3
 8002c26:	4815      	ldr	r0, [pc, #84]	; (8002c7c <MX_TIM17_Init+0xec>)
 8002c28:	f005 faee 	bl	8008208 <HAL_TIM_PWM_ConfigChannel>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002c32:	f7ff faef 	bl	8002214 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002c58:	463b      	mov	r3, r7
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4807      	ldr	r0, [pc, #28]	; (8002c7c <MX_TIM17_Init+0xec>)
 8002c5e:	f006 f8c9 	bl	8008df4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002c68:	f7ff fad4 	bl	8002214 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8002c6c:	4803      	ldr	r0, [pc, #12]	; (8002c7c <MX_TIM17_Init+0xec>)
 8002c6e:	f000 f825 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 8002c72:	bf00      	nop
 8002c74:	3750      	adds	r7, #80	; 0x50
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20004f20 	.word	0x20004f20
 8002c80:	40014800 	.word	0x40014800

08002c84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d103      	bne.n	8002c9e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c96:	2001      	movs	r0, #1
 8002c98:	f7ff fef9 	bl	8002a8e <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002c9c:	e008      	b.n	8002cb0 <HAL_TIM_Base_MspInit+0x2c>
  else if(tim_baseHandle->Instance==TIM17)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a05      	ldr	r2, [pc, #20]	; (8002cb8 <HAL_TIM_Base_MspInit+0x34>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d103      	bne.n	8002cb0 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002ca8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002cac:	f7ff ff08 	bl	8002ac0 <LL_APB2_GRP1_EnableClock>
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40014800 	.word	0x40014800

08002cbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM17)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <HAL_TIM_MspPostInit+0x54>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d113      	bne.n	8002d06 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	2002      	movs	r0, #2
 8002ce0:	f7ff febc 	bl	8002a5c <LL_AHB2_GRP1_EnableClock>
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8002ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8002cf6:	230e      	movs	r3, #14
 8002cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4804      	ldr	r0, [pc, #16]	; (8002d14 <HAL_TIM_MspPostInit+0x58>)
 8002d02:	f001 ff3d 	bl	8004b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002d06:	bf00      	nop
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40014800 	.word	0x40014800
 8002d14:	48000400 	.word	0x48000400

08002d18 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002d18:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d1a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d1c:	3304      	adds	r3, #4

08002d1e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d1e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d20:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002d22:	d3f9      	bcc.n	8002d18 <CopyDataInit>
  bx lr
 8002d24:	4770      	bx	lr

08002d26 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002d26:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002d28:	3004      	adds	r0, #4

08002d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002d2a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002d2c:	d3fb      	bcc.n	8002d26 <FillZerobss>
  bx lr
 8002d2e:	4770      	bx	lr

08002d30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d30:	480c      	ldr	r0, [pc, #48]	; (8002d64 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002d32:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d34:	f7ff fe3c 	bl	80029b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002d38:	480b      	ldr	r0, [pc, #44]	; (8002d68 <LoopForever+0x8>)
 8002d3a:	490c      	ldr	r1, [pc, #48]	; (8002d6c <LoopForever+0xc>)
 8002d3c:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <LoopForever+0x10>)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f7ff ffed 	bl	8002d1e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002d44:	480b      	ldr	r0, [pc, #44]	; (8002d74 <LoopForever+0x14>)
 8002d46:	490c      	ldr	r1, [pc, #48]	; (8002d78 <LoopForever+0x18>)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f7ff ffee 	bl	8002d2a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002d4e:	480b      	ldr	r0, [pc, #44]	; (8002d7c <LoopForever+0x1c>)
 8002d50:	490b      	ldr	r1, [pc, #44]	; (8002d80 <LoopForever+0x20>)
 8002d52:	2300      	movs	r3, #0
 8002d54:	f7ff ffe9 	bl	8002d2a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d58:	f010 fd48 	bl	80137ec <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002d5c:	f7ff f95a 	bl	8002014 <main>

08002d60 <LoopForever>:

LoopForever:
  b LoopForever
 8002d60:	e7fe      	b.n	8002d60 <LoopForever>
 8002d62:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002d64:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002d68:	20000004 	.word	0x20000004
 8002d6c:	200001c0 	.word	0x200001c0
 8002d70:	08013dd0 	.word	0x08013dd0
  INIT_BSS _sbss, _ebss
 8002d74:	20000270 	.word	0x20000270
 8002d78:	20006788 	.word	0x20006788
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002d7c:	200300e0 	.word	0x200300e0
 8002d80:	20030b57 	.word	0x20030b57

08002d84 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d84:	e7fe      	b.n	8002d84 <AES1_IRQHandler>
	...

08002d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d92:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_Init+0x3c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <HAL_Init+0x3c>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9e:	2003      	movs	r0, #3
 8002da0:	f001 fc18 	bl	80045d4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7ff fd51 	bl	800284c <HAL_InitTick>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	71fb      	strb	r3, [r7, #7]
 8002db4:	e001      	b.n	8002dba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002db6:	f7ff fd10 	bl	80027da <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dba:	79fb      	ldrb	r3, [r7, #7]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	58004000 	.word	0x58004000

08002dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_IncTick+0x20>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_IncTick+0x24>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <HAL_IncTick+0x24>)
 8002dda:	6013      	str	r3, [r2, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000024 	.word	0x20000024
 8002dec:	20004fb8 	.word	0x20004fb8

08002df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return uwTick;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_GetTick+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20004fb8 	.word	0x20004fb8

08002e08 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_GetTickPrio+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000020 	.word	0x20000020

08002e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff ffe2 	bl	8002df0 <HAL_GetTick>
 8002e2c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d005      	beq.n	8002e46 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_Delay+0x40>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8002e46:	bf00      	nop
 8002e48:	f7ff ffd2 	bl	8002df0 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d8f7      	bhi.n	8002e48 <HAL_Delay+0x28>
    {
    }
  }
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000024 	.word	0x20000024

08002e64 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
#endif
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3360      	adds	r3, #96	; 0x60
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <LL_ADC_SetOffset+0x44>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f04:	bf00      	nop
 8002f06:	371c      	adds	r7, #28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	03fff000 	.word	0x03fff000

08002f14 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3360      	adds	r3, #96	; 0x60
 8002f22:	461a      	mov	r2, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3360      	adds	r3, #96	; 0x60
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f8e:	2300      	movs	r3, #0
#endif
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3330      	adds	r3, #48	; 0x30
 8002fac:	461a      	mov	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	4413      	add	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	211f      	movs	r1, #31
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0e9b      	lsrs	r3, r3, #26
 8002fd4:	f003 011f 	and.w	r1, r3, #31
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0303 	and.w	r3, r3, #3
#endif
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003036:	b480      	push	{r7}
 8003038:	b087      	sub	sp, #28
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3314      	adds	r3, #20
 8003046:	461a      	mov	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	0e5b      	lsrs	r3, r3, #25
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	4413      	add	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	0d1b      	lsrs	r3, r3, #20
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	2107      	movs	r1, #7
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	401a      	ands	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	0d1b      	lsrs	r3, r3, #20
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	fa01 f303 	lsl.w	r3, r1, r3
 800307a:	431a      	orrs	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a4:	43db      	mvns	r3, r3
 80030a6:	401a      	ands	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0318 	and.w	r3, r3, #24
 80030ae:	4908      	ldr	r1, [pc, #32]	; (80030d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	400b      	ands	r3, r1
 80030b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ba:	431a      	orrs	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	0007ffff 	.word	0x0007ffff

080030d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80030e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6093      	str	r3, [r2, #8]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800310c:	d101      	bne.n	8003112 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003134:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800315c:	d101      	bne.n	8003162 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003184:	f043 0201 	orr.w	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <LL_ADC_IsEnabled+0x18>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <LL_ADC_IsEnabled+0x1a>
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031d2:	f043 0204 	orr.w	r2, r3, #4
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d101      	bne.n	80031fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b08      	cmp	r3, #8
 800321e:	d101      	bne.n	8003224 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8003240:	2300      	movs	r3, #0
 8003242:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e12c      	b.n	80034ac <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	2b00      	cmp	r3, #0
 800325e:	d109      	bne.n	8003274 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7fd fc2f 	bl	8000ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff3d 	bl	80030f8 <LL_ADC_IsDeepPowerDownEnabled>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff23 	bl	80030d4 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ff58 	bl	8003148 <LL_ADC_IsInternalRegulatorEnabled>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d113      	bne.n	80032c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff ff3c 	bl	8003120 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80032a8:	4b82      	ldr	r3, [pc, #520]	; (80034b4 <HAL_ADC_Init+0x280>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	4a82      	ldr	r2, [pc, #520]	; (80034b8 <HAL_ADC_Init+0x284>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032b8:	e002      	b.n	80032c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	3b01      	subs	r3, #1
 80032be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f9      	bne.n	80032ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff ff3c 	bl	8003148 <LL_ADC_IsInternalRegulatorEnabled>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f043 0210 	orr.w	r2, r3, #16
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	f043 0201 	orr.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff ff75 	bl	80031e6 <LL_ADC_REG_IsConversionOngoing>
 80032fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	f040 80c7 	bne.w	800349a <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f040 80c3 	bne.w	800349a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800331c:	f043 0202 	orr.w	r2, r3, #2
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff35 	bl	8003198 <LL_ADC_IsEnabled>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003334:	4861      	ldr	r0, [pc, #388]	; (80034bc <HAL_ADC_Init+0x288>)
 8003336:	f7ff ff2f 	bl	8003198 <LL_ADC_IsEnabled>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d105      	bne.n	800334c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4619      	mov	r1, r3
 8003346:	485e      	ldr	r0, [pc, #376]	; (80034c0 <HAL_ADC_Init+0x28c>)
 8003348:	f7ff fd8c 	bl	8002e64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	7e5b      	ldrb	r3, [r3, #25]
 8003350:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003356:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800335c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003362:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800336a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800336c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d106      	bne.n	800338c <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	3b01      	subs	r3, #1
 8003384:	045b      	lsls	r3, r3, #17
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	4b45      	ldr	r3, [pc, #276]	; (80034c4 <HAL_ADC_Init+0x290>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	69b9      	ldr	r1, [r7, #24]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff10 	bl	80031e6 <LL_ADC_REG_IsConversionOngoing>
 80033c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff1d 	bl	800320c <LL_ADC_INJ_IsConversionOngoing>
 80033d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d13d      	bne.n	8003456 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d13a      	bne.n	8003456 <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033e4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033ec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033fc:	f023 0302 	bic.w	r3, r3, #2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	69b9      	ldr	r1, [r7, #24]
 8003406:	430b      	orrs	r3, r1
 8003408:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003410:	2b01      	cmp	r3, #1
 8003412:	d118      	bne.n	8003446 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800341e:	f023 0304 	bic.w	r3, r3, #4
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800342a:	4311      	orrs	r1, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003430:	4311      	orrs	r1, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003436:	430a      	orrs	r2, r1
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	611a      	str	r2, [r3, #16]
 8003444:	e007      	b.n	8003456 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0201 	bic.w	r2, r2, #1
 8003454:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d10c      	bne.n	8003478 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	f023 010f 	bic.w	r1, r3, #15
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	1e5a      	subs	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
 8003476:	e007      	b.n	8003488 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 020f 	bic.w	r2, r2, #15
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	f023 0303 	bic.w	r3, r3, #3
 8003490:	f043 0201 	orr.w	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
 8003498:	e007      	b.n	80034aa <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f043 0210 	orr.w	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3720      	adds	r7, #32
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	2000001c 	.word	0x2000001c
 80034b8:	053e2d63 	.word	0x053e2d63
 80034bc:	50040000 	.word	0x50040000
 80034c0:	50040300 	.word	0x50040300
 80034c4:	fff0c007 	.word	0xfff0c007

080034c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fe84 	bl	80031e6 <LL_ADC_REG_IsConversionOngoing>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d167      	bne.n	80035b4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_Start_DMA+0x2a>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e063      	b.n	80035ba <HAL_ADC_Start_DMA+0xf2>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fe0a 	bl	8004114 <ADC_Enable>
 8003500:	4603      	mov	r3, r0
 8003502:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003504:	7dfb      	ldrb	r3, [r7, #23]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d14f      	bne.n	80035aa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	f023 0206 	bic.w	r2, r3, #6
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	659a      	str	r2, [r3, #88]	; 0x58
 8003536:	e002      	b.n	800353e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	4a20      	ldr	r2, [pc, #128]	; (80035c4 <HAL_ADC_Start_DMA+0xfc>)
 8003544:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354a:	4a1f      	ldr	r2, [pc, #124]	; (80035c8 <HAL_ADC_Start_DMA+0x100>)
 800354c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003552:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <HAL_ADC_Start_DMA+0x104>)
 8003554:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	221c      	movs	r2, #28
 800355c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0210 	orr.w	r2, r2, #16
 8003574:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3340      	adds	r3, #64	; 0x40
 8003590:	4619      	mov	r1, r3
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f001 f927 	bl	80047e8 <HAL_DMA_Start_IT>
 800359a:	4603      	mov	r3, r0
 800359c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fe0b 	bl	80031be <LL_ADC_REG_StartConversion>
 80035a8:	e006      	b.n	80035b8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035b2:	e001      	b.n	80035b8 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
 80035b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	08004209 	.word	0x08004209
 80035c8:	080042e1 	.word	0x080042e1
 80035cc:	080042fd 	.word	0x080042fd

080035d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d017      	beq.n	8003626 <HAL_ADC_IRQHandler+0x56>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d012      	beq.n	8003626 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	d105      	bne.n	8003618 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 feb1 	bl	8004380 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2202      	movs	r2, #2
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <HAL_ADC_IRQHandler+0x6a>
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003640:	2b00      	cmp	r3, #0
 8003642:	d05d      	beq.n	8003700 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d058      	beq.n	8003700 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fc83 	bl	8002f76 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d03d      	beq.n	80036f2 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if defined (ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003684:	d035      	beq.n	80036f2 <HAL_ADC_IRQHandler+0x122>
#endif
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b08      	cmp	r3, #8
 8003692:	d12e      	bne.n	80036f2 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fda4 	bl	80031e6 <LL_ADC_REG_IsConversionOngoing>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d11a      	bne.n	80036da <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 020c 	bic.w	r2, r2, #12
 80036b2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d112      	bne.n	80036f2 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d0:	f043 0201 	orr.w	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54
 80036d8:	e00b      	b.n	80036f2 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	f043 0210 	orr.w	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	f043 0201 	orr.w	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f922 	bl	800393c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	220c      	movs	r2, #12
 80036fe:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <HAL_ADC_IRQHandler+0x144>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d109      	bne.n	8003728 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800371a:	2b00      	cmp	r3, #0
 800371c:	d074      	beq.n	8003808 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	d06f      	beq.n	8003808 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b00      	cmp	r3, #0
 8003732:	d105      	bne.n	8003740 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fc63 	bl	8003010 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800374a:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fc10 	bl	8002f76 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003756:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d049      	beq.n	80037fa <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <HAL_ADC_IRQHandler+0x1b0>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d041      	beq.n	80037fa <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800377c:	2b00      	cmp	r3, #0
 800377e:	d13c      	bne.n	80037fa <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378a:	2b40      	cmp	r3, #64	; 0x40
 800378c:	d135      	bne.n	80037fa <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d12e      	bne.n	80037fa <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fd33 	bl	800320c <LL_ADC_INJ_IsConversionOngoing>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d11a      	bne.n	80037e2 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ba:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d112      	bne.n	80037fa <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	f043 0201 	orr.w	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
 80037e0:	e00b      	b.n	80037fa <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	f043 0210 	orr.w	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f2:	f043 0201 	orr.w	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fd98 	bl	8004330 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2260      	movs	r2, #96	; 0x60
 8003806:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380e:	2b00      	cmp	r3, #0
 8003810:	d011      	beq.n	8003836 <HAL_ADC_IRQHandler+0x266>
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00c      	beq.n	8003836 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f89b 	bl	8003964 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2280      	movs	r2, #128	; 0x80
 8003834:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d012      	beq.n	8003866 <HAL_ADC_IRQHandler+0x296>
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00d      	beq.n	8003866 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fd7e 	bl	8004358 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003864:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386c:	2b00      	cmp	r3, #0
 800386e:	d012      	beq.n	8003896 <HAL_ADC_IRQHandler+0x2c6>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00d      	beq.n	8003896 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fd70 	bl	800436c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003894:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d02b      	beq.n	80038f8 <HAL_ADC_IRQHandler+0x328>
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d026      	beq.n	80038f8 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d102      	bne.n	80038b8 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80038b2:	2301      	movs	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	e009      	b.n	80038cc <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fb99 	bl	8002ff4 <LL_ADC_REG_GetDMATransfer>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80038c8:	2301      	movs	r3, #1
 80038ca:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d10e      	bne.n	80038f0 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f844 	bl	8003978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2210      	movs	r2, #16
 80038f6:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d018      	beq.n	8003934 <HAL_ADC_IRQHandler+0x364>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	f043 0208 	orr.w	r2, r3, #8
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800392c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fd08 	bl	8004344 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8003934:	bf00      	nop
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b0b6      	sub	sp, #216	; 0xd8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x22>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e39e      	b.n	80040ec <HAL_ADC_ConfigChannel+0x760>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fc13 	bl	80031e6 <LL_ADC_REG_IsConversionOngoing>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f040 8383 	bne.w	80040ce <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	f7ff fae1 	bl	8002f9c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fc01 	bl	80031e6 <LL_ADC_REG_IsConversionOngoing>
 80039e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fc0d 	bl	800320c <LL_ADC_INJ_IsConversionOngoing>
 80039f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f040 81a6 	bne.w	8003d4c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f040 81a1 	bne.w	8003d4c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	461a      	mov	r2, r3
 8003a18:	f7ff fb0d 	bl	8003036 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	08db      	lsrs	r3, r3, #3
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d00a      	beq.n	8003a54 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6919      	ldr	r1, [r3, #16]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a4e:	f7ff fa3d 	bl	8002ecc <LL_ADC_SetOffset>
 8003a52:	e17b      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fa5a 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0xf4>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fa4f 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003a76:	4603      	mov	r3, r0
 8003a78:	0e9b      	lsrs	r3, r3, #26
 8003a7a:	f003 021f 	and.w	r2, r3, #31
 8003a7e:	e01e      	b.n	8003abe <HAL_ADC_ConfigChannel+0x132>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fa44 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8003a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003aa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003aa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003aae:	2320      	movs	r3, #32
 8003ab0:	e004      	b.n	8003abc <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003ab2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ab6:	fab3 f383 	clz	r3, r3
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d105      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x14a>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	0e9b      	lsrs	r3, r3, #26
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	e018      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x17c>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003aee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003af2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003afa:	2320      	movs	r3, #32
 8003afc:	e004      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003afe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d106      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2200      	movs	r2, #0
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fa13 	bl	8002f40 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2101      	movs	r1, #1
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff f9f7 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x1ba>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2101      	movs	r1, #1
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff f9ec 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	0e9b      	lsrs	r3, r3, #26
 8003b40:	f003 021f 	and.w	r2, r3, #31
 8003b44:	e01e      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x1f8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff f9e1 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b5c:	fa93 f3a3 	rbit	r3, r3
 8003b60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003b64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003b6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003b74:	2320      	movs	r3, #32
 8003b76:	e004      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003b78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x210>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	0e9b      	lsrs	r3, r3, #26
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	e018      	b.n	8003bce <HAL_ADC_ConfigChannel+0x242>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ba8:	fa93 f3a3 	rbit	r3, r3
 8003bac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003bb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003bb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	e004      	b.n	8003bce <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bc8:	fab3 f383 	clz	r3, r3
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d106      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff f9b0 	bl	8002f40 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2102      	movs	r1, #2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff f994 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x280>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2102      	movs	r1, #2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff f989 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003c02:	4603      	mov	r3, r0
 8003c04:	0e9b      	lsrs	r3, r3, #26
 8003c06:	f003 021f 	and.w	r2, r3, #31
 8003c0a:	e01e      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x2be>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2102      	movs	r1, #2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff f97e 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003c2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003c32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003c3a:	2320      	movs	r3, #32
 8003c3c:	e004      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003c3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d105      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x2d6>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	0e9b      	lsrs	r3, r3, #26
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	e016      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x304>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c6e:	fa93 f3a3 	rbit	r3, r3
 8003c72:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003c74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003c82:	2320      	movs	r3, #32
 8003c84:	e004      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c8a:	fab3 f383 	clz	r3, r3
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d106      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff f94f 	bl	8002f40 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2103      	movs	r1, #3
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff f933 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x342>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2103      	movs	r1, #3
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff f928 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	0e9b      	lsrs	r3, r3, #26
 8003cc8:	f003 021f 	and.w	r2, r3, #31
 8003ccc:	e017      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x372>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2103      	movs	r1, #3
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff f91d 	bl	8002f14 <LL_ADC_GetOffsetChannel>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ce0:	fa93 f3a3 	rbit	r3, r3
 8003ce4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ce8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003cea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003cf0:	2320      	movs	r3, #32
 8003cf2:	e003      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d105      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x38a>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	0e9b      	lsrs	r3, r3, #26
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	e011      	b.n	8003d3a <HAL_ADC_ConfigChannel+0x3ae>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d26:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003d2e:	2320      	movs	r3, #32
 8003d30:	e003      	b.n	8003d3a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	fab3 f383 	clz	r3, r3
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d106      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2200      	movs	r2, #0
 8003d44:	2103      	movs	r1, #3
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff f8fa 	bl	8002f40 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fa21 	bl	8003198 <LL_ADC_IsEnabled>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f040 81c1 	bne.w	80040e0 <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6819      	ldr	r1, [r3, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f7ff f98e 	bl	800308c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a8e      	ldr	r2, [pc, #568]	; (8003fb0 <HAL_ADC_ConfigChannel+0x624>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	f040 8130 	bne.w	8003fdc <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x418>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	0e9b      	lsrs	r3, r3, #26
 8003d92:	3301      	adds	r3, #1
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2b09      	cmp	r3, #9
 8003d9a:	bf94      	ite	ls
 8003d9c:	2301      	movls	r3, #1
 8003d9e:	2300      	movhi	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	e019      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x44c>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dac:	fa93 f3a3 	rbit	r3, r3
 8003db0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003db2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003db4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003dbc:	2320      	movs	r3, #32
 8003dbe:	e003      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dc2:	fab3 f383 	clz	r3, r3
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	3301      	adds	r3, #1
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	2b09      	cmp	r3, #9
 8003dd0:	bf94      	ite	ls
 8003dd2:	2301      	movls	r3, #1
 8003dd4:	2300      	movhi	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d079      	beq.n	8003ed0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d107      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x46c>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	0e9b      	lsrs	r3, r3, #26
 8003dee:	3301      	adds	r3, #1
 8003df0:	069b      	lsls	r3, r3, #26
 8003df2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003df6:	e015      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x498>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e00:	fa93 f3a3 	rbit	r3, r3
 8003e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e08:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003e10:	2320      	movs	r3, #32
 8003e12:	e003      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	069b      	lsls	r3, r3, #26
 8003e20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x4b8>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	0e9b      	lsrs	r3, r3, #26
 8003e36:	3301      	adds	r3, #1
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e42:	e017      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x4e8>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4c:	fa93 f3a3 	rbit	r3, r3
 8003e50:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e54:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003e5c:	2320      	movs	r3, #32
 8003e5e:	e003      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	2101      	movs	r1, #1
 8003e70:	fa01 f303 	lsl.w	r3, r1, r3
 8003e74:	ea42 0103 	orr.w	r1, r2, r3
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x50e>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	0e9b      	lsrs	r3, r3, #26
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	f003 021f 	and.w	r2, r3, #31
 8003e90:	4613      	mov	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4413      	add	r3, r2
 8003e96:	051b      	lsls	r3, r3, #20
 8003e98:	e018      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x540>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea2:	fa93 f3a3 	rbit	r3, r3
 8003ea6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	e003      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb8:	fab3 f383 	clz	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f003 021f 	and.w	r2, r3, #31
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	4413      	add	r3, r2
 8003eca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	e080      	b.n	8003fd2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d107      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x560>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	0e9b      	lsrs	r3, r3, #26
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	069b      	lsls	r3, r3, #26
 8003ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eea:	e015      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x58c>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003f04:	2320      	movs	r3, #32
 8003f06:	e003      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	3301      	adds	r3, #1
 8003f12:	069b      	lsls	r3, r3, #26
 8003f14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x5ac>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0e9b      	lsrs	r3, r3, #26
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	2101      	movs	r1, #1
 8003f32:	fa01 f303 	lsl.w	r3, r1, r3
 8003f36:	e017      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x5dc>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	fa93 f3a3 	rbit	r3, r3
 8003f44:	61fb      	str	r3, [r7, #28]
  return result;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003f50:	2320      	movs	r3, #32
 8003f52:	e003      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	2101      	movs	r1, #1
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	ea42 0103 	orr.w	r1, r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x608>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	0e9b      	lsrs	r3, r3, #26
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f003 021f 	and.w	r2, r3, #31
 8003f84:	4613      	mov	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
 8003f8a:	3b1e      	subs	r3, #30
 8003f8c:	051b      	lsls	r3, r3, #20
 8003f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f92:	e01d      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x644>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	fa93 f3a3 	rbit	r3, r3
 8003fa0:	613b      	str	r3, [r7, #16]
  return result;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d103      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003fac:	2320      	movs	r3, #32
 8003fae:	e005      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x630>
 8003fb0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	fab3 f383 	clz	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	f003 021f 	and.w	r2, r3, #31
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3b1e      	subs	r3, #30
 8003fca:	051b      	lsls	r3, r3, #20
 8003fcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	6892      	ldr	r2, [r2, #8]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f7ff f82d 	bl	8003036 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4b44      	ldr	r3, [pc, #272]	; (80040f4 <HAL_ADC_ConfigChannel+0x768>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d07b      	beq.n	80040e0 <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fe8:	4843      	ldr	r0, [pc, #268]	; (80040f8 <HAL_ADC_ConfigChannel+0x76c>)
 8003fea:	f7fe ff61 	bl	8002eb0 <LL_ADC_GetCommonPathInternalCh>
 8003fee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ff2:	4842      	ldr	r0, [pc, #264]	; (80040fc <HAL_ADC_ConfigChannel+0x770>)
 8003ff4:	f7ff f8d0 	bl	8003198 <LL_ADC_IsEnabled>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d15d      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a3f      	ldr	r2, [pc, #252]	; (8004100 <HAL_ADC_ConfigChannel+0x774>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d126      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x6ca>
 8004008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800400c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d120      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a38      	ldr	r2, [pc, #224]	; (80040fc <HAL_ADC_ConfigChannel+0x770>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d160      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800401e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004022:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004026:	4619      	mov	r1, r3
 8004028:	4833      	ldr	r0, [pc, #204]	; (80040f8 <HAL_ADC_ConfigChannel+0x76c>)
 800402a:	f7fe ff2e 	bl	8002e8a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800402e:	4b35      	ldr	r3, [pc, #212]	; (8004104 <HAL_ADC_ConfigChannel+0x778>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	099b      	lsrs	r3, r3, #6
 8004034:	4a34      	ldr	r2, [pc, #208]	; (8004108 <HAL_ADC_ConfigChannel+0x77c>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	099a      	lsrs	r2, r3, #6
 800403c:	4613      	mov	r3, r2
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004046:	e002      	b.n	800404e <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3b01      	subs	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f9      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004054:	e044      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2c      	ldr	r2, [pc, #176]	; (800410c <HAL_ADC_ConfigChannel+0x780>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d113      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x6fc>
 8004060:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10d      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a22      	ldr	r2, [pc, #136]	; (80040fc <HAL_ADC_ConfigChannel+0x770>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d134      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800407a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800407e:	4619      	mov	r1, r3
 8004080:	481d      	ldr	r0, [pc, #116]	; (80040f8 <HAL_ADC_ConfigChannel+0x76c>)
 8004082:	f7fe ff02 	bl	8002e8a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004086:	e02b      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a20      	ldr	r2, [pc, #128]	; (8004110 <HAL_ADC_ConfigChannel+0x784>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d126      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x754>
 8004092:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d120      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a16      	ldr	r2, [pc, #88]	; (80040fc <HAL_ADC_ConfigChannel+0x770>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d11b      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80040a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040b0:	4619      	mov	r1, r3
 80040b2:	4811      	ldr	r0, [pc, #68]	; (80040f8 <HAL_ADC_ConfigChannel+0x76c>)
 80040b4:	f7fe fee9 	bl	8002e8a <LL_ADC_SetCommonPathInternalCh>
 80040b8:	e012      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	f043 0220 	orr.w	r2, r3, #32
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80040cc:	e008      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	f043 0220 	orr.w	r2, r3, #32
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80040e8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	37d8      	adds	r7, #216	; 0xd8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	80080000 	.word	0x80080000
 80040f8:	50040300 	.word	0x50040300
 80040fc:	50040000 	.word	0x50040000
 8004100:	c7520000 	.word	0xc7520000
 8004104:	2000001c 	.word	0x2000001c
 8004108:	053e2d63 	.word	0x053e2d63
 800410c:	cb840000 	.word	0xcb840000
 8004110:	80000001 	.word	0x80000001

08004114 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800411c:	2300      	movs	r3, #0
 800411e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff f837 	bl	8003198 <LL_ADC_IsEnabled>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d15e      	bne.n	80041ee <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	4b30      	ldr	r3, [pc, #192]	; (80041f8 <ADC_Enable+0xe4>)
 8004138:	4013      	ands	r3, r2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00d      	beq.n	800415a <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004142:	f043 0210 	orr.w	r2, r3, #16
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	f043 0201 	orr.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e04a      	b.n	80041f0 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff f806 	bl	8003170 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004164:	4825      	ldr	r0, [pc, #148]	; (80041fc <ADC_Enable+0xe8>)
 8004166:	f7fe fea3 	bl	8002eb0 <LL_ADC_GetCommonPathInternalCh>
 800416a:	4603      	mov	r3, r0
 800416c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00f      	beq.n	8004194 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8004174:	4b22      	ldr	r3, [pc, #136]	; (8004200 <ADC_Enable+0xec>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	099b      	lsrs	r3, r3, #6
 800417a:	4a22      	ldr	r2, [pc, #136]	; (8004204 <ADC_Enable+0xf0>)
 800417c:	fba2 2303 	umull	r2, r3, r2, r3
 8004180:	099b      	lsrs	r3, r3, #6
 8004182:	3301      	adds	r3, #1
 8004184:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004186:	e002      	b.n	800418e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	3b01      	subs	r3, #1
 800418c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f9      	bne.n	8004188 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004194:	f7fe fe2c 	bl	8002df0 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800419a:	e021      	b.n	80041e0 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe fff9 	bl	8003198 <LL_ADC_IsEnabled>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d104      	bne.n	80041b6 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe ffdd 	bl	8003170 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041b6:	f7fe fe1b 	bl	8002df0 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d90d      	bls.n	80041e0 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c8:	f043 0210 	orr.w	r2, r3, #16
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f043 0201 	orr.w	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e007      	b.n	80041f0 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d1d6      	bne.n	800419c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	8000003f 	.word	0x8000003f
 80041fc:	50040300 	.word	0x50040300
 8004200:	2000001c 	.word	0x2000001c
 8004204:	053e2d63 	.word	0x053e2d63

08004208 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800421e:	2b00      	cmp	r3, #0
 8004220:	d14b      	bne.n	80042ba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d021      	beq.n	8004280 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe fe98 	bl	8002f76 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d032      	beq.n	80042b2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d12b      	bne.n	80042b2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11f      	bne.n	80042b2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
 800427e:	e018      	b.n	80042b2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d111      	bne.n	80042b2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d105      	bne.n	80042b2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	f043 0201 	orr.w	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7ff fb42 	bl	800393c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80042b8:	e00e      	b.n	80042d8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f7ff fb56 	bl	8003978 <HAL_ADC_ErrorCallback>
}
 80042cc:	e004      	b.n	80042d8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f7ff fb2e 	bl	8003950 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042f4:	bf00      	nop
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	f043 0204 	orr.w	r2, r3, #4
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff fb28 	bl	8003978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043b0:	4013      	ands	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043c6:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	60d3      	str	r3, [r2, #12]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043e0:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <__NVIC_GetPriorityGrouping+0x18>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	f003 0307 	and.w	r3, r3, #7
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	2b00      	cmp	r3, #0
 8004408:	db0b      	blt.n	8004422 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	f003 021f 	and.w	r2, r3, #31
 8004410:	4907      	ldr	r1, [pc, #28]	; (8004430 <__NVIC_EnableIRQ+0x38>)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2001      	movs	r0, #1
 800441a:	fa00 f202 	lsl.w	r2, r0, r2
 800441e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	e000e100 	.word	0xe000e100

08004434 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800443e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004442:	2b00      	cmp	r3, #0
 8004444:	db10      	blt.n	8004468 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	f003 021f 	and.w	r2, r3, #31
 800444c:	4909      	ldr	r1, [pc, #36]	; (8004474 <__NVIC_DisableIRQ+0x40>)
 800444e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2001      	movs	r0, #1
 8004456:	fa00 f202 	lsl.w	r2, r0, r2
 800445a:	3320      	adds	r3, #32
 800445c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004460:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004464:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	e000e100 	.word	0xe000e100

08004478 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	2b00      	cmp	r3, #0
 8004488:	db0c      	blt.n	80044a4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	f003 021f 	and.w	r2, r3, #31
 8004490:	4907      	ldr	r1, [pc, #28]	; (80044b0 <__NVIC_SetPendingIRQ+0x38>)
 8004492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2001      	movs	r0, #1
 800449a:	fa00 f202 	lsl.w	r2, r0, r2
 800449e:	3340      	adds	r3, #64	; 0x40
 80044a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	e000e100 	.word	0xe000e100

080044b4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	db0c      	blt.n	80044e0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	f003 021f 	and.w	r2, r3, #31
 80044cc:	4907      	ldr	r1, [pc, #28]	; (80044ec <__NVIC_ClearPendingIRQ+0x38>)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	2001      	movs	r0, #1
 80044d6:	fa00 f202 	lsl.w	r2, r0, r2
 80044da:	3360      	adds	r3, #96	; 0x60
 80044dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000e100 	.word	0xe000e100

080044f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	6039      	str	r1, [r7, #0]
 80044fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004500:	2b00      	cmp	r3, #0
 8004502:	db0a      	blt.n	800451a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	490c      	ldr	r1, [pc, #48]	; (800453c <__NVIC_SetPriority+0x4c>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	0112      	lsls	r2, r2, #4
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	440b      	add	r3, r1
 8004514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004518:	e00a      	b.n	8004530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4908      	ldr	r1, [pc, #32]	; (8004540 <__NVIC_SetPriority+0x50>)
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	3b04      	subs	r3, #4
 8004528:	0112      	lsls	r2, r2, #4
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	440b      	add	r3, r1
 800452e:	761a      	strb	r2, [r3, #24]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	e000e100 	.word	0xe000e100
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004544:	b480      	push	{r7}
 8004546:	b089      	sub	sp, #36	; 0x24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f1c3 0307 	rsb	r3, r3, #7
 800455e:	2b04      	cmp	r3, #4
 8004560:	bf28      	it	cs
 8004562:	2304      	movcs	r3, #4
 8004564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3304      	adds	r3, #4
 800456a:	2b06      	cmp	r3, #6
 800456c:	d902      	bls.n	8004574 <NVIC_EncodePriority+0x30>
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3b03      	subs	r3, #3
 8004572:	e000      	b.n	8004576 <NVIC_EncodePriority+0x32>
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004578:	f04f 32ff 	mov.w	r2, #4294967295
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43da      	mvns	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	401a      	ands	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800458c:	f04f 31ff 	mov.w	r1, #4294967295
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	43d9      	mvns	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800459c:	4313      	orrs	r3, r2
         );
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3724      	adds	r7, #36	; 0x24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80045b0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <__NVIC_SystemReset+0x20>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80045bc:	4903      	ldr	r1, [pc, #12]	; (80045cc <__NVIC_SystemReset+0x20>)
 80045be:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <__NVIC_SystemReset+0x24>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60cb      	str	r3, [r1, #12]
 80045c4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <__NVIC_SystemReset+0x1c>
 80045cc:	e000ed00 	.word	0xe000ed00
 80045d0:	05fa0004 	.word	0x05fa0004

080045d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff fed9 	bl	8004394 <__NVIC_SetPriorityGrouping>
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b086      	sub	sp, #24
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	4603      	mov	r3, r0
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
 80045f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045f8:	f7ff fef0 	bl	80043dc <__NVIC_GetPriorityGrouping>
 80045fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	6978      	ldr	r0, [r7, #20]
 8004604:	f7ff ff9e 	bl	8004544 <NVIC_EncodePriority>
 8004608:	4602      	mov	r2, r0
 800460a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800460e:	4611      	mov	r1, r2
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff ff6d 	bl	80044f0 <__NVIC_SetPriority>
}
 8004616:	bf00      	nop
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	4603      	mov	r3, r0
 8004626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fee3 	bl	80043f8 <__NVIC_EnableIRQ>
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	4603      	mov	r3, r0
 8004642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff fef3 	bl	8004434 <__NVIC_DisableIRQ>
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800465a:	f7ff ffa7 	bl	80045ac <__NVIC_SystemReset>

0800465e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff ff03 	bl	8004478 <__NVIC_SetPendingIRQ>
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	4603      	mov	r3, r0
 8004682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ff13 	bl	80044b4 <__NVIC_ClearPendingIRQ>
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e08e      	b.n	80047c8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	4b47      	ldr	r3, [pc, #284]	; (80047d0 <HAL_DMA_Init+0x138>)
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d80f      	bhi.n	80046d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	4b45      	ldr	r3, [pc, #276]	; (80047d4 <HAL_DMA_Init+0x13c>)
 80046be:	4413      	add	r3, r2
 80046c0:	4a45      	ldr	r2, [pc, #276]	; (80047d8 <HAL_DMA_Init+0x140>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	091b      	lsrs	r3, r3, #4
 80046c8:	009a      	lsls	r2, r3, #2
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a42      	ldr	r2, [pc, #264]	; (80047dc <HAL_DMA_Init+0x144>)
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40
 80046d4:	e00e      	b.n	80046f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	4b40      	ldr	r3, [pc, #256]	; (80047e0 <HAL_DMA_Init+0x148>)
 80046de:	4413      	add	r3, r2
 80046e0:	4a3d      	ldr	r2, [pc, #244]	; (80047d8 <HAL_DMA_Init+0x140>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	009a      	lsls	r2, r3, #2
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a3c      	ldr	r2, [pc, #240]	; (80047e4 <HAL_DMA_Init+0x14c>)
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f9b6 	bl	8004ab8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004754:	d102      	bne.n	800475c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004764:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004768:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004772:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d010      	beq.n	800479e <HAL_DMA_Init+0x106>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b04      	cmp	r3, #4
 8004782:	d80c      	bhi.n	800479e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f9d5 	bl	8004b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800479a:	605a      	str	r2, [r3, #4]
 800479c:	e008      	b.n	80047b0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40020407 	.word	0x40020407
 80047d4:	bffdfff8 	.word	0xbffdfff8
 80047d8:	cccccccd 	.word	0xcccccccd
 80047dc:	40020000 	.word	0x40020000
 80047e0:	bffdfbf8 	.word	0xbffdfbf8
 80047e4:	40020400 	.word	0x40020400

080047e8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_DMA_Start_IT+0x20>
 8004804:	2302      	movs	r3, #2
 8004806:	e066      	b.n	80048d6 <HAL_DMA_Start_IT+0xee>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d155      	bne.n	80048c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f8fb 	bl	8004a3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 020e 	orr.w	r2, r2, #14
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e00f      	b.n	8004880 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0204 	bic.w	r2, r2, #4
 800486e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 020a 	orr.w	r2, r2, #10
 800487e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800489c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0201 	orr.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e005      	b.n	80048d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80048d0:	2302      	movs	r3, #2
 80048d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	f003 031c 	and.w	r3, r3, #28
 80048fe:	2204      	movs	r2, #4
 8004900:	409a      	lsls	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d026      	beq.n	8004958 <HAL_DMA_IRQHandler+0x7a>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d021      	beq.n	8004958 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d107      	bne.n	8004932 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0204 	bic.w	r2, r2, #4
 8004930:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	f003 021c 	and.w	r2, r3, #28
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	2104      	movs	r1, #4
 8004940:	fa01 f202 	lsl.w	r2, r1, r2
 8004944:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	2b00      	cmp	r3, #0
 800494c:	d071      	beq.n	8004a32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004956:	e06c      	b.n	8004a32 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495c:	f003 031c 	and.w	r3, r3, #28
 8004960:	2202      	movs	r2, #2
 8004962:	409a      	lsls	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4013      	ands	r3, r2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02e      	beq.n	80049ca <HAL_DMA_IRQHandler+0xec>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d029      	beq.n	80049ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10b      	bne.n	800499c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 020a 	bic.w	r2, r2, #10
 8004992:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a0:	f003 021c 	and.w	r2, r3, #28
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	2102      	movs	r1, #2
 80049aa:	fa01 f202 	lsl.w	r2, r1, r2
 80049ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d038      	beq.n	8004a32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80049c8:	e033      	b.n	8004a32 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f003 031c 	and.w	r3, r3, #28
 80049d2:	2208      	movs	r2, #8
 80049d4:	409a      	lsls	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4013      	ands	r3, r2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d02a      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x156>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d025      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 020e 	bic.w	r2, r2, #14
 80049f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	f003 021c 	and.w	r2, r3, #28
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	2101      	movs	r1, #1
 8004a06:	fa01 f202 	lsl.w	r2, r1, r2
 8004a0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d004      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
}
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a52:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d004      	beq.n	8004a66 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a64:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	f003 021c 	and.w	r2, r3, #28
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2101      	movs	r1, #1
 8004a74:	fa01 f202 	lsl.w	r2, r1, r2
 8004a78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	2b10      	cmp	r3, #16
 8004a88:	d108      	bne.n	8004a9c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a9a:	e007      	b.n	8004aac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	60da      	str	r2, [r3, #12]
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d80a      	bhi.n	8004ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad0:	089b      	lsrs	r3, r3, #2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ad8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6493      	str	r3, [r2, #72]	; 0x48
 8004ae0:	e007      	b.n	8004af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	089b      	lsrs	r3, r3, #2
 8004ae8:	009a      	lsls	r2, r3, #2
 8004aea:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004aec:	4413      	add	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	3b08      	subs	r3, #8
 8004afa:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a0a      	ldr	r2, [pc, #40]	; (8004b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b08:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	2201      	movs	r2, #1
 8004b12:	409a      	lsls	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b18:	bf00      	nop
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	40020407 	.word	0x40020407
 8004b28:	4002081c 	.word	0x4002081c
 8004b2c:	cccccccd 	.word	0xcccccccd
 8004b30:	40020880 	.word	0x40020880

08004b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b44:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	461a      	mov	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a09      	ldr	r2, [pc, #36]	; (8004b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004b58:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2201      	movs	r2, #1
 8004b64:	409a      	lsls	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004b6a:	bf00      	nop
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	1000823f 	.word	0x1000823f
 8004b7c:	40020940 	.word	0x40020940

08004b80 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b8e:	e14c      	b.n	8004e2a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	2101      	movs	r1, #1
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 813e 	beq.w	8004e24 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d00b      	beq.n	8004bc8 <HAL_GPIO_Init+0x48>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d007      	beq.n	8004bc8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bbc:	2b11      	cmp	r3, #17
 8004bbe:	d003      	beq.n	8004bc8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b12      	cmp	r3, #18
 8004bc6:	d130      	bne.n	8004c2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	2203      	movs	r2, #3
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bfe:	2201      	movs	r2, #1
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43db      	mvns	r3, r3
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	091b      	lsrs	r3, r3, #4
 8004c14:	f003 0201 	and.w	r2, r3, #1
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	2203      	movs	r2, #3
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d003      	beq.n	8004c6a <HAL_GPIO_Init+0xea>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b12      	cmp	r3, #18
 8004c68:	d123      	bne.n	8004cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	08da      	lsrs	r2, r3, #3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3208      	adds	r2, #8
 8004c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	220f      	movs	r2, #15
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43db      	mvns	r3, r3
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	08da      	lsrs	r2, r3, #3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3208      	adds	r2, #8
 8004cac:	6939      	ldr	r1, [r7, #16]
 8004cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f003 0203 	and.w	r2, r3, #3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 8098 	beq.w	8004e24 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004cf4:	4a54      	ldr	r2, [pc, #336]	; (8004e48 <HAL_GPIO_Init+0x2c8>)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	089b      	lsrs	r3, r3, #2
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	220f      	movs	r2, #15
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	43db      	mvns	r3, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4013      	ands	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d1e:	d019      	beq.n	8004d54 <HAL_GPIO_Init+0x1d4>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a4a      	ldr	r2, [pc, #296]	; (8004e4c <HAL_GPIO_Init+0x2cc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d013      	beq.n	8004d50 <HAL_GPIO_Init+0x1d0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a49      	ldr	r2, [pc, #292]	; (8004e50 <HAL_GPIO_Init+0x2d0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00d      	beq.n	8004d4c <HAL_GPIO_Init+0x1cc>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a48      	ldr	r2, [pc, #288]	; (8004e54 <HAL_GPIO_Init+0x2d4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <HAL_GPIO_Init+0x1c8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a47      	ldr	r2, [pc, #284]	; (8004e58 <HAL_GPIO_Init+0x2d8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d101      	bne.n	8004d44 <HAL_GPIO_Init+0x1c4>
 8004d40:	2304      	movs	r3, #4
 8004d42:	e008      	b.n	8004d56 <HAL_GPIO_Init+0x1d6>
 8004d44:	2307      	movs	r3, #7
 8004d46:	e006      	b.n	8004d56 <HAL_GPIO_Init+0x1d6>
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e004      	b.n	8004d56 <HAL_GPIO_Init+0x1d6>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e002      	b.n	8004d56 <HAL_GPIO_Init+0x1d6>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <HAL_GPIO_Init+0x1d6>
 8004d54:	2300      	movs	r3, #0
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	f002 0203 	and.w	r2, r2, #3
 8004d5c:	0092      	lsls	r2, r2, #2
 8004d5e:	4093      	lsls	r3, r2
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d66:	4938      	ldr	r1, [pc, #224]	; (8004e48 <HAL_GPIO_Init+0x2c8>)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d74:	4b39      	ldr	r3, [pc, #228]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4013      	ands	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d9a:	4a30      	ldr	r2, [pc, #192]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004da2:	4b2e      	ldr	r3, [pc, #184]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	43db      	mvns	r3, r3
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4013      	ands	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004dc8:	4a24      	ldr	r2, [pc, #144]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dd0:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004df4:	4a19      	ldr	r2, [pc, #100]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004dfa:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	43db      	mvns	r3, r3
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4013      	ands	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e1e:	4a0f      	ldr	r2, [pc, #60]	; (8004e5c <HAL_GPIO_Init+0x2dc>)
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	3301      	adds	r3, #1
 8004e28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f47f aeab 	bne.w	8004b90 <HAL_GPIO_Init+0x10>
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40010000 	.word	0x40010000
 8004e4c:	48000400 	.word	0x48000400
 8004e50:	48000800 	.word	0x48000800
 8004e54:	48000c00 	.word	0x48000c00
 8004e58:	48001000 	.word	0x48001000
 8004e5c:	58000800 	.word	0x58000800

08004e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	807b      	strh	r3, [r7, #2]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e70:	787b      	ldrb	r3, [r7, #1]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e76:	887a      	ldrh	r2, [r7, #2]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e7c:	e002      	b.n	8004e84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e7e:	887a      	ldrh	r2, [r7, #2]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004e96:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <HAL_HSEM_IRQHandler+0x30>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004e9c:	4b08      	ldr	r3, [pc, #32]	; (8004ec0 <HAL_HSEM_IRQHandler+0x30>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	4906      	ldr	r1, [pc, #24]	; (8004ec0 <HAL_HSEM_IRQHandler+0x30>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004eaa:	4a05      	ldr	r2, [pc, #20]	; (8004ec0 <HAL_HSEM_IRQHandler+0x30>)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f807 	bl	8004ec4 <HAL_HSEM_FreeCallback>
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	58001500 	.word	0x58001500

08004ec4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eda:	b08b      	sub	sp, #44	; 0x2c
 8004edc:	af06      	add	r7, sp, #24
 8004ede:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0ad      	b.n	8005046 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f00e f972 	bl	80131e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2203      	movs	r2, #3
 8004f08:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f004 f836 	bl	8008f82 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	73fb      	strb	r3, [r7, #15]
 8004f1a:	e035      	b.n	8004f88 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	015b      	lsls	r3, r3, #5
 8004f22:	4413      	add	r3, r2
 8004f24:	3329      	adds	r3, #41	; 0x29
 8004f26:	2201      	movs	r2, #1
 8004f28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	015b      	lsls	r3, r3, #5
 8004f30:	4413      	add	r3, r2
 8004f32:	3328      	adds	r3, #40	; 0x28
 8004f34:	7bfa      	ldrb	r2, [r7, #15]
 8004f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	7bfa      	ldrb	r2, [r7, #15]
 8004f3c:	b291      	uxth	r1, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	015b      	lsls	r3, r3, #5
 8004f42:	4413      	add	r3, r2
 8004f44:	3336      	adds	r3, #54	; 0x36
 8004f46:	460a      	mov	r2, r1
 8004f48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	015b      	lsls	r3, r3, #5
 8004f50:	4413      	add	r3, r2
 8004f52:	332b      	adds	r3, #43	; 0x2b
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	015b      	lsls	r3, r3, #5
 8004f5e:	4413      	add	r3, r2
 8004f60:	3338      	adds	r3, #56	; 0x38
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	015b      	lsls	r3, r3, #5
 8004f6c:	4413      	add	r3, r2
 8004f6e:	333c      	adds	r3, #60	; 0x3c
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	3302      	adds	r3, #2
 8004f7a:	015b      	lsls	r3, r3, #5
 8004f7c:	4413      	add	r3, r2
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	3301      	adds	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	7bfa      	ldrb	r2, [r7, #15]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d3c4      	bcc.n	8004f1c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
 8004f96:	e031      	b.n	8004ffc <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	015b      	lsls	r3, r3, #5
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f203 1329 	addw	r3, r3, #297	; 0x129
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	015b      	lsls	r3, r3, #5
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004fb4:	7bfa      	ldrb	r2, [r7, #15]
 8004fb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	015b      	lsls	r3, r3, #5
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	015b      	lsls	r3, r3, #5
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	015b      	lsls	r3, r3, #5
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	330a      	adds	r3, #10
 8004fee:	015b      	lsls	r3, r3, #5
 8004ff0:	4413      	add	r3, r2
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
 8004ffc:	7bfa      	ldrb	r2, [r7, #15]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	429a      	cmp	r2, r3
 8005004:	d3c8      	bcc.n	8004f98 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	687e      	ldr	r6, [r7, #4]
 800500e:	466d      	mov	r5, sp
 8005010:	f106 0410 	add.w	r4, r6, #16
 8005014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	602b      	str	r3, [r5, #0]
 800501c:	1d33      	adds	r3, r6, #4
 800501e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005020:	6838      	ldr	r0, [r7, #0]
 8005022:	f003 ffc9 	bl	8008fb8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d102      	bne.n	8005044 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fe59 	bl	8005cf6 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800504e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_PCD_Start+0x16>
 8005060:	2302      	movs	r3, #2
 8005062:	e012      	b.n	800508a <HAL_PCD_Start+0x3c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f005 f999 	bl	800a3a8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f003 ff68 	bl	8008f50 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f005 f999 	bl	800a3d6 <USB_ReadInterrupts>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ae:	d102      	bne.n	80050b6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fb33 	bl	800571c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f005 f98b 	bl	800a3d6 <USB_ReadInterrupts>
 80050c0:	4603      	mov	r3, r0
 80050c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ca:	d112      	bne.n	80050f2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050de:	b292      	uxth	r2, r2
 80050e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f00e f906 	bl	80132f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80050ea:	2100      	movs	r1, #0
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f91e 	bl	800532e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f005 f96d 	bl	800a3d6 <USB_ReadInterrupts>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005106:	d10b      	bne.n	8005120 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005110:	b29a      	uxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800511a:	b292      	uxth	r2, r2
 800511c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f005 f956 	bl	800a3d6 <USB_ReadInterrupts>
 800512a:	4603      	mov	r3, r0
 800512c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005134:	d10b      	bne.n	800514e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800513e:	b29a      	uxth	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005148:	b292      	uxth	r2, r2
 800514a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f005 f93f 	bl	800a3d6 <USB_ReadInterrupts>
 8005158:	4603      	mov	r3, r0
 800515a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005162:	d133      	bne.n	80051cc <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800516c:	b29a      	uxth	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0204 	bic.w	r2, r2, #4
 8005176:	b292      	uxth	r2, r2
 8005178:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005184:	b29a      	uxth	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0208 	bic.w	r2, r2, #8
 800518e:	b292      	uxth	r2, r2
 8005190:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800519a:	2b01      	cmp	r3, #1
 800519c:	d107      	bne.n	80051ae <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051a6:	2100      	movs	r1, #0
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fdce 	bl	8005d4a <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f00e f8da 	bl	8013368 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051bc:	b29a      	uxth	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051c6:	b292      	uxth	r2, r2
 80051c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f005 f900 	bl	800a3d6 <USB_ReadInterrupts>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e0:	d126      	bne.n	8005230 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0208 	orr.w	r2, r2, #8
 80051f4:	b292      	uxth	r2, r2
 80051f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005202:	b29a      	uxth	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800520c:	b292      	uxth	r2, r2
 800520e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800521a:	b29a      	uxth	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0204 	orr.w	r2, r2, #4
 8005224:	b292      	uxth	r2, r2
 8005226:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f00e f882 	bl	8013334 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f005 f8ce 	bl	800a3d6 <USB_ReadInterrupts>
 800523a:	4603      	mov	r3, r0
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005240:	2b80      	cmp	r3, #128	; 0x80
 8005242:	d13f      	bne.n	80052c4 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800524c:	b29a      	uxth	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005256:	b292      	uxth	r2, r2
 8005258:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005262:	2b00      	cmp	r3, #0
 8005264:	d12b      	bne.n	80052be <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0204 	orr.w	r2, r2, #4
 8005278:	b292      	uxth	r2, r2
 800527a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005286:	b29a      	uxth	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0208 	orr.w	r2, r2, #8
 8005290:	b292      	uxth	r2, r2
 8005292:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	089b      	lsrs	r3, r3, #2
 80052aa:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80052b4:	2101      	movs	r1, #1
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fd47 	bl	8005d4a <HAL_PCDEx_LPM_Callback>
 80052bc:	e002      	b.n	80052c4 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f00e f838 	bl	8013334 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f005 f884 	bl	800a3d6 <USB_ReadInterrupts>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d8:	d10e      	bne.n	80052f8 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052ec:	b292      	uxth	r2, r2
 80052ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f00d fff1 	bl	80132da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f005 f86a 	bl	800a3d6 <USB_ReadInterrupts>
 8005302:	4603      	mov	r3, r0
 8005304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800530c:	d10b      	bne.n	8005326 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005316:	b29a      	uxth	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005320:	b292      	uxth	r2, r2
 8005322:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b082      	sub	sp, #8
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	460b      	mov	r3, r1
 8005338:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_PCD_SetAddress+0x1a>
 8005344:	2302      	movs	r3, #2
 8005346:	e013      	b.n	8005370 <HAL_PCD_SetAddress+0x42>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	78fa      	ldrb	r2, [r7, #3]
 8005354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	4611      	mov	r1, r2
 8005360:	4618      	mov	r0, r3
 8005362:	f005 f80d 	bl	800a380 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	4608      	mov	r0, r1
 8005382:	4611      	mov	r1, r2
 8005384:	461a      	mov	r2, r3
 8005386:	4603      	mov	r3, r0
 8005388:	70fb      	strb	r3, [r7, #3]
 800538a:	460b      	mov	r3, r1
 800538c:	803b      	strh	r3, [r7, #0]
 800538e:	4613      	mov	r3, r2
 8005390:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800539a:	2b00      	cmp	r3, #0
 800539c:	da0b      	bge.n	80053b6 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	015b      	lsls	r3, r3, #5
 80053a6:	3328      	adds	r3, #40	; 0x28
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	4413      	add	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	705a      	strb	r2, [r3, #1]
 80053b4:	e00b      	b.n	80053ce <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053b6:	78fb      	ldrb	r3, [r7, #3]
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	015b      	lsls	r3, r3, #5
 80053be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	4413      	add	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80053ce:	78fb      	ldrb	r3, [r7, #3]
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80053da:	883a      	ldrh	r2, [r7, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	78ba      	ldrb	r2, [r7, #2]
 80053e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	785b      	ldrb	r3, [r3, #1]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d004      	beq.n	80053f8 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053f8:	78bb      	ldrb	r3, [r7, #2]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d102      	bne.n	8005404 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_PCD_EP_Open+0x9a>
 800540e:	2302      	movs	r3, #2
 8005410:	e00e      	b.n	8005430 <HAL_PCD_EP_Open+0xb8>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	4618      	mov	r0, r3
 8005422:	f003 fded 	bl	8009000 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800542e:	7afb      	ldrb	r3, [r7, #11]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005448:	2b00      	cmp	r3, #0
 800544a:	da0b      	bge.n	8005464 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	015b      	lsls	r3, r3, #5
 8005454:	3328      	adds	r3, #40	; 0x28
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	4413      	add	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	705a      	strb	r2, [r3, #1]
 8005462:	e00b      	b.n	800547c <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	015b      	lsls	r3, r3, #5
 800546c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	4413      	add	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	b2da      	uxtb	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_PCD_EP_Close+0x5e>
 8005492:	2302      	movs	r3, #2
 8005494:	e00e      	b.n	80054b4 <HAL_PCD_EP_Close+0x7c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68f9      	ldr	r1, [r7, #12]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f004 f959 	bl	800975c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	607a      	str	r2, [r7, #4]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	460b      	mov	r3, r1
 80054ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054cc:	7afb      	ldrb	r3, [r7, #11]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	015b      	lsls	r3, r3, #5
 80054d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2200      	movs	r2, #0
 80054ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2200      	movs	r2, #0
 80054f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054f6:	7afb      	ldrb	r3, [r7, #11]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005502:	7afb      	ldrb	r3, [r7, #11]
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6979      	ldr	r1, [r7, #20]
 8005512:	4618      	mov	r0, r3
 8005514:	f004 fb0f 	bl	8009b36 <USB_EPStartXfer>
 8005518:	e005      	b.n	8005526 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6979      	ldr	r1, [r7, #20]
 8005520:	4618      	mov	r0, r3
 8005522:	f004 fb08 	bl	8009b36 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	330a      	adds	r3, #10
 8005546:	015b      	lsls	r3, r3, #5
 8005548:	4413      	add	r3, r2
 800554a:	3304      	adds	r3, #4
 800554c:	681b      	ldr	r3, [r3, #0]
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b086      	sub	sp, #24
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	460b      	mov	r3, r1
 8005568:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800556a:	7afb      	ldrb	r3, [r7, #11]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	015b      	lsls	r3, r3, #5
 8005572:	3328      	adds	r3, #40	; 0x28
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2200      	movs	r2, #0
 800558a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2201      	movs	r2, #1
 8005590:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005592:	7afb      	ldrb	r3, [r7, #11]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	b2da      	uxtb	r2, r3
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800559e:	7afb      	ldrb	r3, [r7, #11]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6979      	ldr	r1, [r7, #20]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f004 fac1 	bl	8009b36 <USB_EPStartXfer>
 80055b4:	e005      	b.n	80055c2 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6979      	ldr	r1, [r7, #20]
 80055bc:	4618      	mov	r0, r3
 80055be:	f004 faba 	bl	8009b36 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	f003 0207 	and.w	r2, r3, #7
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d901      	bls.n	80055ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e046      	b.n	8005678 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	da0b      	bge.n	800560a <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	015b      	lsls	r3, r3, #5
 80055fa:	3328      	adds	r3, #40	; 0x28
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	4413      	add	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	705a      	strb	r2, [r3, #1]
 8005608:	e009      	b.n	800561e <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	015b      	lsls	r3, r3, #5
 800560e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4413      	add	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005624:	78fb      	ldrb	r3, [r7, #3]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	b2da      	uxtb	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_PCD_EP_SetStall+0x72>
 800563a:	2302      	movs	r3, #2
 800563c:	e01c      	b.n	8005678 <HAL_PCD_EP_SetStall+0xac>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	4618      	mov	r0, r3
 800564e:	f004 fd98 	bl	800a182 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005652:	78fb      	ldrb	r3, [r7, #3]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	2b00      	cmp	r3, #0
 800565a:	d108      	bne.n	800566e <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f004 fec4 	bl	800a3f6 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	f003 020f 	and.w	r2, r3, #15
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	429a      	cmp	r2, r3
 8005698:	d901      	bls.n	800569e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e03a      	b.n	8005714 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800569e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	da0b      	bge.n	80056be <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	015b      	lsls	r3, r3, #5
 80056ae:	3328      	adds	r3, #40	; 0x28
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	4413      	add	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	705a      	strb	r2, [r3, #1]
 80056bc:	e00b      	b.n	80056d6 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056be:	78fb      	ldrb	r3, [r7, #3]
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	015b      	lsls	r3, r3, #5
 80056c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_PCD_EP_ClrStall+0x76>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e00e      	b.n	8005714 <HAL_PCD_EP_ClrStall+0x94>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68f9      	ldr	r1, [r7, #12]
 8005704:	4618      	mov	r0, r3
 8005706:	f004 fd8d 	bl	800a224 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08e      	sub	sp, #56	; 0x38
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005724:	e29c      	b.n	8005c60 <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800572e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005730:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800573c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005740:	2b00      	cmp	r3, #0
 8005742:	f040 8152 	bne.w	80059ea <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005746:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b00      	cmp	r3, #0
 800574e:	d150      	bne.n	80057f2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29b      	uxth	r3, r3
 8005758:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800575c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005760:	81fb      	strh	r3, [r7, #14]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	89fb      	ldrh	r3, [r7, #14]
 8005768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800576c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005770:	b29b      	uxth	r3, r3
 8005772:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3328      	adds	r3, #40	; 0x28
 8005778:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005782:	b29b      	uxth	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4413      	add	r3, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	4413      	add	r3, r2
 8005794:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	695a      	ldr	r2, [r3, #20]
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	441a      	add	r2, r3
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80057b0:	2100      	movs	r1, #0
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f00d fd7a 	bl	80132ac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 824d 	beq.w	8005c60 <PCD_EP_ISR_Handler+0x544>
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f040 8248 	bne.w	8005c60 <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	b292      	uxth	r2, r2
 80057e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057f0:	e236      	b.n	8005c60 <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005802:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005808:	2b00      	cmp	r3, #0
 800580a:	d032      	beq.n	8005872 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005814:	b29b      	uxth	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	4413      	add	r3, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	4413      	add	r3, r2
 8005826:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005846:	b29b      	uxth	r3, r3
 8005848:	f004 fe22 	bl	800a490 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29a      	uxth	r2, r3
 8005854:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005858:	4013      	ands	r3, r2
 800585a:	823b      	strh	r3, [r7, #16]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	8a3a      	ldrh	r2, [r7, #16]
 8005862:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005866:	b292      	uxth	r2, r2
 8005868:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f00d fcf4 	bl	8013258 <HAL_PCD_SetupStageCallback>
 8005870:	e1f6      	b.n	8005c60 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005872:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005876:	2b00      	cmp	r3, #0
 8005878:	f280 81f2 	bge.w	8005c60 <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29a      	uxth	r2, r3
 8005884:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005888:	4013      	ands	r3, r2
 800588a:	83fb      	strh	r3, [r7, #30]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	8bfa      	ldrh	r2, [r7, #30]
 8005892:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005896:	b292      	uxth	r2, r2
 8005898:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	4413      	add	r3, r2
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	4413      	add	r3, r2
 80058b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d019      	beq.n	80058fe <PCD_EP_ISR_Handler+0x1e2>
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d015      	beq.n	80058fe <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	6959      	ldr	r1, [r3, #20]
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f004 fdd4 	bl	800a490 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	695a      	ldr	r2, [r3, #20]
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	441a      	add	r2, r3
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80058f6:	2100      	movs	r1, #0
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f00d fcbf 	bl	801327c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590c:	b29b      	uxth	r3, r3
 800590e:	461a      	mov	r2, r3
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	4413      	add	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d112      	bne.n	800594c <PCD_EP_ISR_Handler+0x230>
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005930:	b29a      	uxth	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005944:	b29a      	uxth	r2, r3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	e02f      	b.n	80059ac <PCD_EP_ISR_Handler+0x290>
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b3e      	cmp	r3, #62	; 0x3e
 8005952:	d813      	bhi.n	800597c <PCD_EP_ISR_Handler+0x260>
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	633b      	str	r3, [r7, #48]	; 0x30
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <PCD_EP_ISR_Handler+0x252>
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	3301      	adds	r3, #1
 800596c:	633b      	str	r3, [r7, #48]	; 0x30
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	b29b      	uxth	r3, r3
 8005972:	029b      	lsls	r3, r3, #10
 8005974:	b29a      	uxth	r2, r3
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	801a      	strh	r2, [r3, #0]
 800597a:	e017      	b.n	80059ac <PCD_EP_ISR_Handler+0x290>
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	633b      	str	r3, [r7, #48]	; 0x30
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f003 031f 	and.w	r3, r3, #31
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <PCD_EP_ISR_Handler+0x27a>
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	3b01      	subs	r3, #1
 8005994:	633b      	str	r3, [r7, #48]	; 0x30
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	b29b      	uxth	r3, r3
 800599a:	029b      	lsls	r3, r3, #10
 800599c:	b29b      	uxth	r3, r3
 800599e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059bc:	827b      	strh	r3, [r7, #18]
 80059be:	8a7b      	ldrh	r3, [r7, #18]
 80059c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059c4:	827b      	strh	r3, [r7, #18]
 80059c6:	8a7b      	ldrh	r3, [r7, #18]
 80059c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059cc:	827b      	strh	r3, [r7, #18]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	8a7b      	ldrh	r3, [r7, #18]
 80059d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	8013      	strh	r3, [r2, #0]
 80059e8:	e13a      	b.n	8005c60 <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80059fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f280 80d6 	bge.w	8005bb2 <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a34:	b292      	uxth	r2, r2
 8005a36:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005a38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a3c:	015b      	lsls	r3, r3, #5
 8005a3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4413      	add	r3, r2
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	7b1b      	ldrb	r3, [r3, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d11f      	bne.n	8005a90 <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6812      	ldr	r2, [r2, #0]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a74:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 8005a76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d075      	beq.n	8005b68 <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	6959      	ldr	r1, [r3, #20]
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	88da      	ldrh	r2, [r3, #6]
 8005a88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a8a:	f004 fd01 	bl	800a490 <USB_ReadPMA>
 8005a8e:	e06b      	b.n	8005b68 <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	847b      	strh	r3, [r7, #34]	; 0x22
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	441a      	add	r2, r3
 8005aba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01f      	beq.n	8005b2a <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4413      	add	r3, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6812      	ldr	r2, [r2, #0]
 8005b02:	4413      	add	r3, r2
 8005b04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b0e:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8005b10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d028      	beq.n	8005b68 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	6959      	ldr	r1, [r3, #20]
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	891a      	ldrh	r2, [r3, #8]
 8005b22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b24:	f004 fcb4 	bl	800a490 <USB_ReadPMA>
 8005b28:	e01e      	b.n	8005b68 <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	4413      	add	r3, r2
 8005b44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b4e:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8005b50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d008      	beq.n	8005b68 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	6959      	ldr	r1, [r3, #20]
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	895a      	ldrh	r2, [r3, #10]
 8005b62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b64:	f004 fc94 	bl	800a490 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b6e:	441a      	add	r2, r3
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b7a:	441a      	add	r2, r3
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <PCD_EP_ISR_Handler+0x476>
 8005b88:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d206      	bcs.n	8005ba0 <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	4619      	mov	r1, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f00d fb6f 	bl	801327c <HAL_PCD_DataOutStageCallback>
 8005b9e:	e008      	b.n	8005bb2 <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	7819      	ldrb	r1, [r3, #0]
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	695a      	ldr	r2, [r3, #20]
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff fc85 	bl	80054bc <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005bb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d051      	beq.n	8005c60 <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 8005bbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005bc0:	015b      	lsls	r3, r3, #5
 8005bc2:	3328      	adds	r3, #40	; 0x28
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be4:	843b      	strh	r3, [r7, #32]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	441a      	add	r2, r3
 8005bf4:	8c3b      	ldrh	r3, [r7, #32]
 8005bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	441a      	add	r2, r3
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d106      	bne.n	8005c4e <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f00d fb30 	bl	80132ac <HAL_PCD_DataInStageCallback>
 8005c4c:	e008      	b.n	8005c60 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	7819      	ldrb	r1, [r3, #0]
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff fc7d 	bl	800555a <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	b21b      	sxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f6ff ad5a 	blt.w	8005726 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3738      	adds	r7, #56	; 0x38
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	607b      	str	r3, [r7, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	817b      	strh	r3, [r7, #10]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c8e:	897b      	ldrh	r3, [r7, #10]
 8005c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c9a:	897b      	ldrh	r3, [r7, #10]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	015b      	lsls	r3, r3, #5
 8005ca2:	3328      	adds	r3, #40	; 0x28
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	e006      	b.n	8005cba <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cac:	897b      	ldrh	r3, [r7, #10]
 8005cae:	015b      	lsls	r3, r3, #5
 8005cb0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005cba:	893b      	ldrh	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d107      	bne.n	8005cd0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	80da      	strh	r2, [r3, #6]
 8005cce:	e00b      	b.n	8005ce8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	0c1b      	lsrs	r3, r3, #16
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f043 0301 	orr.w	r3, r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f043 0302 	orr.w	r3, r3, #2
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
	...

08005d64 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d68:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a04      	ldr	r2, [pc, #16]	; (8005d80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d72:	6013      	str	r3, [r2, #0]
}
 8005d74:	bf00      	nop
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	58000400 	.word	0x58000400

08005d84 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d88:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <HAL_PWREx_GetVoltageRange+0x18>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	58000400 	.word	0x58000400

08005da0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <HAL_PWREx_EnableVddUSB+0x1c>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <HAL_PWREx_EnableVddUSB+0x1c>)
 8005daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dae:	6053      	str	r3, [r2, #4]
}
 8005db0:	bf00      	nop
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	58000400 	.word	0x58000400

08005dc0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd2:	d101      	bne.n	8005dd8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <LL_RCC_HSE_Enable>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df6:	6013      	str	r3, [r2, #0]
}
 8005df8:	bf00      	nop
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <LL_RCC_HSE_Disable>:
{
 8005e02:	b480      	push	{r7}
 8005e04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e14:	6013      	str	r3, [r2, #0]
}
 8005e16:	bf00      	nop
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <LL_RCC_HSE_IsReady>:
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e32:	d101      	bne.n	8005e38 <LL_RCC_HSE_IsReady+0x18>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <LL_RCC_HSE_IsReady+0x1a>
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <LL_RCC_HSI_Enable>:
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e56:	6013      	str	r3, [r2, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <LL_RCC_HSI_Disable>:
{
 8005e62:	b480      	push	{r7}
 8005e64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e74:	6013      	str	r3, [r2, #0]
}
 8005e76:	bf00      	nop
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <LL_RCC_HSI_IsReady>:
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e92:	d101      	bne.n	8005e98 <LL_RCC_HSI_IsReady+0x18>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <LL_RCC_HSI_IsReady+0x1a>
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	061b      	lsls	r3, r3, #24
 8005eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	604b      	str	r3, [r1, #4]
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <LL_RCC_HSI48_Enable>:
{
 8005ece:	b480      	push	{r7}
 8005ed0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ede:	f043 0301 	orr.w	r3, r3, #1
 8005ee2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005ee6:	bf00      	nop
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <LL_RCC_HSI48_Disable>:
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005efc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f00:	f023 0301 	bic.w	r3, r3, #1
 8005f04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005f08:	bf00      	nop
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <LL_RCC_HSI48_IsReady>:
{
 8005f12:	b480      	push	{r7}
 8005f14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d101      	bne.n	8005f2a <LL_RCC_HSI48_IsReady+0x18>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <LL_RCC_HSI48_IsReady+0x1a>
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <LL_RCC_LSE_Enable>:
{
 8005f36:	b480      	push	{r7}
 8005f38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f46:	f043 0301 	orr.w	r3, r3, #1
 8005f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f4e:	bf00      	nop
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <LL_RCC_LSE_Disable>:
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f68:	f023 0301 	bic.w	r3, r3, #1
 8005f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f70:	bf00      	nop
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <LL_RCC_LSE_EnableBypass>:
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f8a:	f043 0304 	orr.w	r3, r3, #4
 8005f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f92:	bf00      	nop
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <LL_RCC_LSE_DisableBypass>:
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fac:	f023 0304 	bic.w	r3, r3, #4
 8005fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005fb4:	bf00      	nop
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <LL_RCC_LSE_IsReady>:
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d101      	bne.n	8005fd6 <LL_RCC_LSE_IsReady+0x18>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <LL_RCC_LSE_IsReady+0x1a>
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <LL_RCC_LSI1_Enable>:
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005ffa:	bf00      	nop
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <LL_RCC_LSI1_Disable>:
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006014:	f023 0301 	bic.w	r3, r3, #1
 8006018:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800601c:	bf00      	nop
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <LL_RCC_LSI1_IsReady>:
{
 8006026:	b480      	push	{r7}
 8006028:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800602a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800602e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b02      	cmp	r3, #2
 8006038:	d101      	bne.n	800603e <LL_RCC_LSI1_IsReady+0x18>
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <LL_RCC_LSI1_IsReady+0x1a>
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <LL_RCC_LSI2_Enable>:
{
 800604a:	b480      	push	{r7}
 800604c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800604e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800605a:	f043 0304 	orr.w	r3, r3, #4
 800605e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006062:	bf00      	nop
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <LL_RCC_LSI2_Disable>:
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800607c:	f023 0304 	bic.w	r3, r3, #4
 8006080:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006084:	bf00      	nop
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <LL_RCC_LSI2_IsReady>:
{
 800608e:	b480      	push	{r7}
 8006090:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800609a:	f003 0308 	and.w	r3, r3, #8
 800609e:	2b08      	cmp	r3, #8
 80060a0:	d101      	bne.n	80060a6 <LL_RCC_LSI2_IsReady+0x18>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <LL_RCC_LSI2_IsReady+0x1a>
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <LL_RCC_LSI2_SetTrimming>:
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80060ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <LL_RCC_MSI_Enable>:
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80060e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	6013      	str	r3, [r2, #0]
}
 80060f4:	bf00      	nop
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <LL_RCC_MSI_Disable>:
{
 80060fe:	b480      	push	{r7}
 8006100:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800610c:	f023 0301 	bic.w	r3, r3, #1
 8006110:	6013      	str	r3, [r2, #0]
}
 8006112:	bf00      	nop
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <LL_RCC_MSI_IsReady>:
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b02      	cmp	r3, #2
 800612c:	d101      	bne.n	8006132 <LL_RCC_MSI_IsReady+0x16>
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <LL_RCC_MSI_IsReady+0x18>
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <LL_RCC_MSI_SetRange>:
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4313      	orrs	r3, r2
 8006158:	600b      	str	r3, [r1, #0]
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <LL_RCC_MSI_GetRange>:
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800616c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006176:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2bb0      	cmp	r3, #176	; 0xb0
 800617c:	d901      	bls.n	8006182 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800617e:	23b0      	movs	r3, #176	; 0xb0
 8006180:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006182:	687b      	ldr	r3, [r7, #4]
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061aa:	4313      	orrs	r3, r2
 80061ac:	604b      	str	r3, [r1, #4]
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <LL_RCC_SetSysClkSource>:
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80061c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f023 0203 	bic.w	r2, r3, #3
 80061cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	608b      	str	r3, [r1, #8]
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <LL_RCC_GetSysClkSource>:
{
 80061e2:	b480      	push	{r7}
 80061e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80061e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 030c 	and.w	r3, r3, #12
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <LL_RCC_SetAHBPrescaler>:
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800620c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4313      	orrs	r3, r2
 8006214:	608b      	str	r3, [r1, #8]
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <LL_C2_RCC_SetAHBPrescaler>:
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800622a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800622e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <LL_RCC_SetAHB4Prescaler>:
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800625a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800625e:	f023 020f 	bic.w	r2, r3, #15
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	091b      	lsrs	r3, r3, #4
 8006266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <LL_RCC_SetAPB1Prescaler>:
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800628e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4313      	orrs	r3, r2
 8006296:	608b      	str	r3, [r1, #8]
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <LL_RCC_SetAPB2Prescaler>:
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80062ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4313      	orrs	r3, r2
 80062be:	608b      	str	r3, [r1, #8]
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <LL_RCC_GetAHBPrescaler>:
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80062d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <LL_C2_RCC_GetAHBPrescaler>:
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80062e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80062f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <LL_RCC_GetAHB4Prescaler>:
{
 80062fe:	b480      	push	{r7}
 8006300:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006306:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006310:	4618      	mov	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <LL_RCC_GetAPB1Prescaler>:
{
 800631a:	b480      	push	{r7}
 800631c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800631e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006328:	4618      	mov	r0, r3
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <LL_RCC_GetAPB2Prescaler>:
{
 8006332:	b480      	push	{r7}
 8006334:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006340:	4618      	mov	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <LL_RCC_PLL_Enable>:
{
 800634a:	b480      	push	{r7}
 800634c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800634e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800635c:	6013      	str	r3, [r2, #0]
}
 800635e:	bf00      	nop
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <LL_RCC_PLL_Disable>:
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800636c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800637a:	6013      	str	r3, [r2, #0]
}
 800637c:	bf00      	nop
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <LL_RCC_PLL_IsReady>:
{
 8006386:	b480      	push	{r7}
 8006388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800638a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006394:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006398:	d101      	bne.n	800639e <LL_RCC_PLL_IsReady+0x18>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <LL_RCC_PLL_IsReady+0x1a>
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <LL_RCC_PLL_GetN>:
{
 80063aa:	b480      	push	{r7}
 80063ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80063ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	0a1b      	lsrs	r3, r3, #8
 80063b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <LL_RCC_PLL_GetR>:
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80063c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <LL_RCC_PLL_GetDivider>:
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80063e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <LL_RCC_PLL_GetMainSource>:
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80063f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f003 0303 	and.w	r3, r3, #3
}
 8006402:	4618      	mov	r0, r3
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <LL_RCC_IsActiveFlag_HPRE>:
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800641a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641e:	d101      	bne.n	8006424 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006438:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800643c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006444:	d101      	bne.n	800644a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8006456:	b480      	push	{r7}
 8006458:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800645a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800645e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800646a:	d101      	bne.n	8006470 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <LL_RCC_IsActiveFlag_PPRE1>:
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800648e:	d101      	bne.n	8006494 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80064a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064b2:	d101      	bne.n	80064b8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80064b4:	2301      	movs	r3, #1
 80064b6:	e000      	b.n	80064ba <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064c4:	b590      	push	{r4, r7, lr}
 80064c6:	b08d      	sub	sp, #52	; 0x34
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e37e      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 8092 	beq.w	8006608 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064e4:	f7ff fe7d 	bl	80061e2 <LL_RCC_GetSysClkSource>
 80064e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064ea:	f7ff ff83 	bl	80063f4 <LL_RCC_PLL_GetMainSource>
 80064ee:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d005      	beq.n	8006502 <HAL_RCC_OscConfig+0x3e>
 80064f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f8:	2b0c      	cmp	r3, #12
 80064fa:	d14c      	bne.n	8006596 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d149      	bne.n	8006596 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006502:	f7ff fe0b 	bl	800611c <LL_RCC_MSI_IsReady>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <HAL_RCC_OscConfig+0x54>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e35d      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800651c:	f7ff fe23 	bl	8006166 <LL_RCC_MSI_GetRange>
 8006520:	4603      	mov	r3, r0
 8006522:	429c      	cmp	r4, r3
 8006524:	d914      	bls.n	8006550 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fd5c 	bl	8006fe8 <RCC_SetFlashLatencyFromMSIRange>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e34c      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	4618      	mov	r0, r3
 8006540:	f7ff fdfd 	bl	800613e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff fe21 	bl	8006190 <LL_RCC_MSI_SetCalibTrimming>
 800654e:	e013      	b.n	8006578 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff fdf2 	bl	800613e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fe16 	bl	8006190 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fd3d 	bl	8006fe8 <RCC_SetFlashLatencyFromMSIRange>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e32d      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006578:	f000 fcda 	bl	8006f30 <HAL_RCC_GetHCLKFreq>
 800657c:	4602      	mov	r2, r0
 800657e:	4bb3      	ldr	r3, [pc, #716]	; (800684c <HAL_RCC_OscConfig+0x388>)
 8006580:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006582:	4bb3      	ldr	r3, [pc, #716]	; (8006850 <HAL_RCC_OscConfig+0x38c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f7fc f960 	bl	800284c <HAL_InitTick>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d039      	beq.n	8006606 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e31e      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d01e      	beq.n	80065dc <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800659e:	f7ff fd9f 	bl	80060e0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065a2:	f7fc fc25 	bl	8002df0 <HAL_GetTick>
 80065a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80065a8:	e008      	b.n	80065bc <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065aa:	f7fc fc21 	bl	8002df0 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e30b      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80065bc:	f7ff fdae 	bl	800611c <LL_RCC_MSI_IsReady>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f1      	beq.n	80065aa <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fdb7 	bl	800613e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff fddb 	bl	8006190 <LL_RCC_MSI_SetCalibTrimming>
 80065da:	e015      	b.n	8006608 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80065dc:	f7ff fd8f 	bl	80060fe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065e0:	f7fc fc06 	bl	8002df0 <HAL_GetTick>
 80065e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065e8:	f7fc fc02 	bl	8002df0 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e2ec      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80065fa:	f7ff fd8f 	bl	800611c <LL_RCC_MSI_IsReady>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f1      	bne.n	80065e8 <HAL_RCC_OscConfig+0x124>
 8006604:	e000      	b.n	8006608 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006606:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d04e      	beq.n	80066b2 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006614:	f7ff fde5 	bl	80061e2 <LL_RCC_GetSysClkSource>
 8006618:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800661a:	f7ff feeb 	bl	80063f4 <LL_RCC_PLL_GetMainSource>
 800661e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	2b08      	cmp	r3, #8
 8006624:	d005      	beq.n	8006632 <HAL_RCC_OscConfig+0x16e>
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	2b0c      	cmp	r3, #12
 800662a:	d10d      	bne.n	8006648 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	2b03      	cmp	r3, #3
 8006630:	d10a      	bne.n	8006648 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006632:	f7ff fbf5 	bl	8005e20 <LL_RCC_HSE_IsReady>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d039      	beq.n	80066b0 <HAL_RCC_OscConfig+0x1ec>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d135      	bne.n	80066b0 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e2c5      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006650:	d102      	bne.n	8006658 <HAL_RCC_OscConfig+0x194>
 8006652:	f7ff fbc7 	bl	8005de4 <LL_RCC_HSE_Enable>
 8006656:	e001      	b.n	800665c <HAL_RCC_OscConfig+0x198>
 8006658:	f7ff fbd3 	bl	8005e02 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d012      	beq.n	800668a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006664:	f7fc fbc4 	bl	8002df0 <HAL_GetTick>
 8006668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800666c:	f7fc fbc0 	bl	8002df0 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b64      	cmp	r3, #100	; 0x64
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e2aa      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800667e:	f7ff fbcf 	bl	8005e20 <LL_RCC_HSE_IsReady>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0f1      	beq.n	800666c <HAL_RCC_OscConfig+0x1a8>
 8006688:	e013      	b.n	80066b2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668a:	f7fc fbb1 	bl	8002df0 <HAL_GetTick>
 800668e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006690:	e008      	b.n	80066a4 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006692:	f7fc fbad 	bl	8002df0 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b64      	cmp	r3, #100	; 0x64
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e297      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80066a4:	f7ff fbbc 	bl	8005e20 <LL_RCC_HSE_IsReady>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f1      	bne.n	8006692 <HAL_RCC_OscConfig+0x1ce>
 80066ae:	e000      	b.n	80066b2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d051      	beq.n	8006762 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066be:	f7ff fd90 	bl	80061e2 <LL_RCC_GetSysClkSource>
 80066c2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066c4:	f7ff fe96 	bl	80063f4 <LL_RCC_PLL_GetMainSource>
 80066c8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d005      	beq.n	80066dc <HAL_RCC_OscConfig+0x218>
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b0c      	cmp	r3, #12
 80066d4:	d113      	bne.n	80066fe <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d110      	bne.n	80066fe <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066dc:	f7ff fbd0 	bl	8005e80 <LL_RCC_HSI_IsReady>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <HAL_RCC_OscConfig+0x22e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e270      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fbd4 	bl	8005ea4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066fc:	e031      	b.n	8006762 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d019      	beq.n	800673a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006706:	f7ff fb9d 	bl	8005e44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670a:	f7fc fb71 	bl	8002df0 <HAL_GetTick>
 800670e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006710:	e008      	b.n	8006724 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006712:	f7fc fb6d 	bl	8002df0 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e257      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006724:	f7ff fbac 	bl	8005e80 <LL_RCC_HSI_IsReady>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f1      	beq.n	8006712 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff fbb6 	bl	8005ea4 <LL_RCC_HSI_SetCalibTrimming>
 8006738:	e013      	b.n	8006762 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800673a:	f7ff fb92 	bl	8005e62 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673e:	f7fc fb57 	bl	8002df0 <HAL_GetTick>
 8006742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006746:	f7fc fb53 	bl	8002df0 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e23d      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006758:	f7ff fb92 	bl	8005e80 <LL_RCC_HSI_IsReady>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f1      	bne.n	8006746 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 80a3 	beq.w	80068c2 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d076      	beq.n	8006872 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0310 	and.w	r3, r3, #16
 800678c:	2b00      	cmp	r3, #0
 800678e:	d046      	beq.n	800681e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006790:	f7ff fc49 	bl	8006026 <LL_RCC_LSI1_IsReady>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d113      	bne.n	80067c2 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800679a:	f7ff fc22 	bl	8005fe2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800679e:	f7fc fb27 	bl	8002df0 <HAL_GetTick>
 80067a2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80067a6:	f7fc fb23 	bl	8002df0 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e20d      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80067b8:	f7ff fc35 	bl	8006026 <LL_RCC_LSI1_IsReady>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0f1      	beq.n	80067a6 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80067c2:	f7ff fc42 	bl	800604a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c6:	f7fc fb13 	bl	8002df0 <HAL_GetTick>
 80067ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80067ce:	f7fc fb0f 	bl	8002df0 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e1f9      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80067e0:	f7ff fc55 	bl	800608e <LL_RCC_LSI2_IsReady>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0f1      	beq.n	80067ce <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fc5f 	bl	80060b2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80067f4:	f7ff fc06 	bl	8006004 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f8:	f7fc fafa 	bl	8002df0 <HAL_GetTick>
 80067fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006800:	f7fc faf6 	bl	8002df0 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e1e0      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006812:	f7ff fc08 	bl	8006026 <LL_RCC_LSI1_IsReady>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1f1      	bne.n	8006800 <HAL_RCC_OscConfig+0x33c>
 800681c:	e051      	b.n	80068c2 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800681e:	f7ff fbe0 	bl	8005fe2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006822:	f7fc fae5 	bl	8002df0 <HAL_GetTick>
 8006826:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800682a:	f7fc fae1 	bl	8002df0 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e1cb      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800683c:	f7ff fbf3 	bl	8006026 <LL_RCC_LSI1_IsReady>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0f1      	beq.n	800682a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006846:	f7ff fc11 	bl	800606c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800684a:	e00c      	b.n	8006866 <HAL_RCC_OscConfig+0x3a2>
 800684c:	2000001c 	.word	0x2000001c
 8006850:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006854:	f7fc facc 	bl	8002df0 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b03      	cmp	r3, #3
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e1b6      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006866:	f7ff fc12 	bl	800608e <LL_RCC_LSI2_IsReady>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1f1      	bne.n	8006854 <HAL_RCC_OscConfig+0x390>
 8006870:	e027      	b.n	80068c2 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006872:	f7ff fbfb 	bl	800606c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006876:	f7fc fabb 	bl	8002df0 <HAL_GetTick>
 800687a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800687c:	e008      	b.n	8006890 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800687e:	f7fc fab7 	bl	8002df0 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b03      	cmp	r3, #3
 800688a:	d901      	bls.n	8006890 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e1a1      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006890:	f7ff fbfd 	bl	800608e <LL_RCC_LSI2_IsReady>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f1      	bne.n	800687e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800689a:	f7ff fbb3 	bl	8006004 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689e:	f7fc faa7 	bl	8002df0 <HAL_GetTick>
 80068a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80068a4:	e008      	b.n	80068b8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80068a6:	f7fc faa3 	bl	8002df0 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e18d      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80068b8:	f7ff fbb5 	bl	8006026 <LL_RCC_LSI1_IsReady>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1f1      	bne.n	80068a6 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d05b      	beq.n	8006986 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ce:	4bb5      	ldr	r3, [pc, #724]	; (8006ba4 <HAL_RCC_OscConfig+0x6e0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d114      	bne.n	8006904 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80068da:	f7ff fa43 	bl	8005d64 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068de:	f7fc fa87 	bl	8002df0 <HAL_GetTick>
 80068e2:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e6:	f7fc fa83 	bl	8002df0 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e16d      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068f8:	4baa      	ldr	r3, [pc, #680]	; (8006ba4 <HAL_RCC_OscConfig+0x6e0>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0f0      	beq.n	80068e6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d102      	bne.n	8006912 <HAL_RCC_OscConfig+0x44e>
 800690c:	f7ff fb13 	bl	8005f36 <LL_RCC_LSE_Enable>
 8006910:	e00c      	b.n	800692c <HAL_RCC_OscConfig+0x468>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	2b05      	cmp	r3, #5
 8006918:	d104      	bne.n	8006924 <HAL_RCC_OscConfig+0x460>
 800691a:	f7ff fb2e 	bl	8005f7a <LL_RCC_LSE_EnableBypass>
 800691e:	f7ff fb0a 	bl	8005f36 <LL_RCC_LSE_Enable>
 8006922:	e003      	b.n	800692c <HAL_RCC_OscConfig+0x468>
 8006924:	f7ff fb18 	bl	8005f58 <LL_RCC_LSE_Disable>
 8006928:	f7ff fb38 	bl	8005f9c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d014      	beq.n	800695e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006934:	f7fc fa5c 	bl	8002df0 <HAL_GetTick>
 8006938:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800693a:	e00a      	b.n	8006952 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800693c:	f7fc fa58 	bl	8002df0 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	f241 3288 	movw	r2, #5000	; 0x1388
 800694a:	4293      	cmp	r3, r2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e140      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006952:	f7ff fb34 	bl	8005fbe <LL_RCC_LSE_IsReady>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0ef      	beq.n	800693c <HAL_RCC_OscConfig+0x478>
 800695c:	e013      	b.n	8006986 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695e:	f7fc fa47 	bl	8002df0 <HAL_GetTick>
 8006962:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006964:	e00a      	b.n	800697c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006966:	f7fc fa43 	bl	8002df0 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	f241 3288 	movw	r2, #5000	; 0x1388
 8006974:	4293      	cmp	r3, r2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e12b      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 800697c:	f7ff fb1f 	bl	8005fbe <LL_RCC_LSE_IsReady>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1ef      	bne.n	8006966 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	d02c      	beq.n	80069ec <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	2b00      	cmp	r3, #0
 8006998:	d014      	beq.n	80069c4 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800699a:	f7ff fa98 	bl	8005ece <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699e:	f7fc fa27 	bl	8002df0 <HAL_GetTick>
 80069a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80069a4:	e008      	b.n	80069b8 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069a6:	f7fc fa23 	bl	8002df0 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d901      	bls.n	80069b8 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e10d      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80069b8:	f7ff faab 	bl	8005f12 <LL_RCC_HSI48_IsReady>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0f1      	beq.n	80069a6 <HAL_RCC_OscConfig+0x4e2>
 80069c2:	e013      	b.n	80069ec <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069c4:	f7ff fa94 	bl	8005ef0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c8:	f7fc fa12 	bl	8002df0 <HAL_GetTick>
 80069cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069d0:	f7fc fa0e 	bl	8002df0 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e0f8      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80069e2:	f7ff fa96 	bl	8005f12 <LL_RCC_HSI48_IsReady>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1f1      	bne.n	80069d0 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80ee 	beq.w	8006bd2 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069f6:	f7ff fbf4 	bl	80061e2 <LL_RCC_GetSysClkSource>
 80069fa:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80069fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	f040 80af 	bne.w	8006b6c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f003 0203 	and.w	r2, r3, #3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d123      	bne.n	8006a64 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d11c      	bne.n	8006a64 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	0a1b      	lsrs	r3, r3, #8
 8006a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d114      	bne.n	8006a64 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d10d      	bne.n	8006a64 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d106      	bne.n	8006a64 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d05d      	beq.n	8006b20 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b0c      	cmp	r3, #12
 8006a68:	d058      	beq.n	8006b1c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e0ab      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a7c:	f7ff fc74 	bl	8006368 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a80:	f7fc f9b6 	bl	8002df0 <HAL_GetTick>
 8006a84:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fc f9b2 	bl	8002df0 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e09c      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1ef      	bne.n	8006a88 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	4b3e      	ldr	r3, [pc, #248]	; (8006ba8 <HAL_RCC_OscConfig+0x6e4>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006aba:	4311      	orrs	r1, r2
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ac0:	0212      	lsls	r2, r2, #8
 8006ac2:	4311      	orrs	r1, r2
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ac8:	4311      	orrs	r1, r2
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006ace:	4311      	orrs	r1, r2
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ade:	f7ff fc34 	bl	800634a <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006af2:	f7fc f97d 	bl	8002df0 <HAL_GetTick>
 8006af6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006af8:	e008      	b.n	8006b0c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006afa:	f7fc f979 	bl	8002df0 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d901      	bls.n	8006b0c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e063      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0ef      	beq.n	8006afa <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b1a:	e05a      	b.n	8006bd2 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e059      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d151      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b2e:	f7ff fc0c 	bl	800634a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b40:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b42:	f7fc f955 	bl	8002df0 <HAL_GetTick>
 8006b46:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b48:	e008      	b.n	8006b5c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b4a:	f7fc f951 	bl	8002df0 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e03b      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0ef      	beq.n	8006b4a <HAL_RCC_OscConfig+0x686>
 8006b6a:	e032      	b.n	8006bd2 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2b0c      	cmp	r3, #12
 8006b70:	d02d      	beq.n	8006bce <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b72:	f7ff fbf9 	bl	8006368 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b80:	f023 0303 	bic.w	r3, r3, #3
 8006b84:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8006b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b90:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b98:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9a:	f7fc f929 	bl	8002df0 <HAL_GetTick>
 8006b9e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ba0:	e00d      	b.n	8006bbe <HAL_RCC_OscConfig+0x6fa>
 8006ba2:	bf00      	nop
 8006ba4:	58000400 	.word	0x58000400
 8006ba8:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bac:	f7fc f920 	bl	8002df0 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e00a      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1ef      	bne.n	8006bac <HAL_RCC_OscConfig+0x6e8>
 8006bcc:	e001      	b.n	8006bd2 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3734      	adds	r7, #52	; 0x34
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd90      	pop	{r4, r7, pc}

08006bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e12d      	b.n	8006e4c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bf0:	4b98      	ldr	r3, [pc, #608]	; (8006e54 <HAL_RCC_ClockConfig+0x278>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0307 	and.w	r3, r3, #7
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d91b      	bls.n	8006c36 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bfe:	4b95      	ldr	r3, [pc, #596]	; (8006e54 <HAL_RCC_ClockConfig+0x278>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f023 0207 	bic.w	r2, r3, #7
 8006c06:	4993      	ldr	r1, [pc, #588]	; (8006e54 <HAL_RCC_ClockConfig+0x278>)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c0e:	f7fc f8ef 	bl	8002df0 <HAL_GetTick>
 8006c12:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c14:	e008      	b.n	8006c28 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006c16:	f7fc f8eb 	bl	8002df0 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e111      	b.n	8006e4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c28:	4b8a      	ldr	r3, [pc, #552]	; (8006e54 <HAL_RCC_ClockConfig+0x278>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0307 	and.w	r3, r3, #7
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d1ef      	bne.n	8006c16 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d016      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff fad7 	bl	80061fa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c4c:	f7fc f8d0 	bl	8002df0 <HAL_GetTick>
 8006c50:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c54:	f7fc f8cc 	bl	8002df0 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e0f2      	b.n	8006e4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006c66:	f7ff fbd1 	bl	800640c <LL_RCC_IsActiveFlag_HPRE>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0f1      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0320 	and.w	r3, r3, #32
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d016      	beq.n	8006caa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff face 	bl	8006222 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c86:	f7fc f8b3 	bl	8002df0 <HAL_GetTick>
 8006c8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c8e:	f7fc f8af 	bl	8002df0 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e0d5      	b.n	8006e4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006ca0:	f7ff fbc6 	bl	8006430 <LL_RCC_IsActiveFlag_C2HPRE>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f1      	beq.n	8006c8e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d016      	beq.n	8006ce4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff fac7 	bl	800624e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cc0:	f7fc f896 	bl	8002df0 <HAL_GetTick>
 8006cc4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cc8:	f7fc f892 	bl	8002df0 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e0b8      	b.n	8006e4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006cda:	f7ff fbbc 	bl	8006456 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0f1      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d016      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff fac1 	bl	800627c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cfa:	f7fc f879 	bl	8002df0 <HAL_GetTick>
 8006cfe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006d00:	e008      	b.n	8006d14 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d02:	f7fc f875 	bl	8002df0 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d901      	bls.n	8006d14 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e09b      	b.n	8006e4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006d14:	f7ff fbb2 	bl	800647c <LL_RCC_IsActiveFlag_PPRE1>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0f1      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d017      	beq.n	8006d5a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fab7 	bl	80062a4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d36:	f7fc f85b 	bl	8002df0 <HAL_GetTick>
 8006d3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006d3c:	e008      	b.n	8006d50 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d3e:	f7fc f857 	bl	8002df0 <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d901      	bls.n	8006d50 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e07d      	b.n	8006e4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006d50:	f7ff fba6 	bl	80064a0 <LL_RCC_IsActiveFlag_PPRE2>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f1      	beq.n	8006d3e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d043      	beq.n	8006dee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d106      	bne.n	8006d7c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006d6e:	f7ff f857 	bl	8005e20 <LL_RCC_HSE_IsReady>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d11e      	bne.n	8006db6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e067      	b.n	8006e4c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d106      	bne.n	8006d92 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006d84:	f7ff faff 	bl	8006386 <LL_RCC_PLL_IsReady>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d113      	bne.n	8006db6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e05c      	b.n	8006e4c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006d9a:	f7ff f9bf 	bl	800611c <LL_RCC_MSI_IsReady>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d108      	bne.n	8006db6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e051      	b.n	8006e4c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006da8:	f7ff f86a 	bl	8005e80 <LL_RCC_HSI_IsReady>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e04a      	b.n	8006e4c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff f9fd 	bl	80061ba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc0:	f7fc f816 	bl	8002df0 <HAL_GetTick>
 8006dc4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc6:	e00a      	b.n	8006dde <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc8:	f7fc f812 	bl	8002df0 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e036      	b.n	8006e4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dde:	f7ff fa00 	bl	80061e2 <LL_RCC_GetSysClkSource>
 8006de2:	4602      	mov	r2, r0
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d1ec      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dee:	4b19      	ldr	r3, [pc, #100]	; (8006e54 <HAL_RCC_ClockConfig+0x278>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d21b      	bcs.n	8006e34 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dfc:	4b15      	ldr	r3, [pc, #84]	; (8006e54 <HAL_RCC_ClockConfig+0x278>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f023 0207 	bic.w	r2, r3, #7
 8006e04:	4913      	ldr	r1, [pc, #76]	; (8006e54 <HAL_RCC_ClockConfig+0x278>)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e0c:	f7fb fff0 	bl	8002df0 <HAL_GetTick>
 8006e10:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e14:	f7fb ffec 	bl	8002df0 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e012      	b.n	8006e4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e26:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <HAL_RCC_ClockConfig+0x278>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d1ef      	bne.n	8006e14 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006e34:	f000 f87c 	bl	8006f30 <HAL_RCC_GetHCLKFreq>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <HAL_RCC_ClockConfig+0x27c>)
 8006e3c:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006e3e:	f7fb ffe3 	bl	8002e08 <HAL_GetTickPrio>
 8006e42:	4603      	mov	r3, r0
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fb fd01 	bl	800284c <HAL_InitTick>
 8006e4a:	4603      	mov	r3, r0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	58004000 	.word	0x58004000
 8006e58:	2000001c 	.word	0x2000001c

08006e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e5c:	b590      	push	{r4, r7, lr}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e62:	f7ff f9be 	bl	80061e2 <LL_RCC_GetSysClkSource>
 8006e66:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006e6e:	f7ff f97a 	bl	8006166 <LL_RCC_MSI_GetRange>
 8006e72:	4603      	mov	r3, r0
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	4a2a      	ldr	r2, [pc, #168]	; (8006f24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	e04a      	b.n	8006f1a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d102      	bne.n	8006e90 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e8a:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	e044      	b.n	8006f1a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b08      	cmp	r3, #8
 8006e94:	d10a      	bne.n	8006eac <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006e96:	f7fe ff93 	bl	8005dc0 <LL_RCC_HSE_IsEnabledDiv2>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d102      	bne.n	8006ea6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006ea0:	4b21      	ldr	r3, [pc, #132]	; (8006f28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	e039      	b.n	8006f1a <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006ea6:	4b21      	ldr	r3, [pc, #132]	; (8006f2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	e036      	b.n	8006f1a <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006eac:	f7ff faa2 	bl	80063f4 <LL_RCC_PLL_GetMainSource>
 8006eb0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d002      	beq.n	8006ebe <HAL_RCC_GetSysClockFreq+0x62>
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d003      	beq.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x68>
 8006ebc:	e00d      	b.n	8006eda <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006ebe:	4b1a      	ldr	r3, [pc, #104]	; (8006f28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ec0:	60bb      	str	r3, [r7, #8]
        break;
 8006ec2:	e015      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006ec4:	f7fe ff7c 	bl	8005dc0 <LL_RCC_HSE_IsEnabledDiv2>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d102      	bne.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006ece:	4b16      	ldr	r3, [pc, #88]	; (8006f28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ed0:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006ed2:	e00d      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8006ed4:	4b15      	ldr	r3, [pc, #84]	; (8006f2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006ed6:	60bb      	str	r3, [r7, #8]
        break;
 8006ed8:	e00a      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006eda:	f7ff f944 	bl	8006166 <LL_RCC_MSI_GetRange>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	091b      	lsrs	r3, r3, #4
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	4a0f      	ldr	r2, [pc, #60]	; (8006f24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eec:	60bb      	str	r3, [r7, #8]
        break;
 8006eee:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006ef0:	f7ff fa5b 	bl	80063aa <LL_RCC_PLL_GetN>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	fb03 f402 	mul.w	r4, r3, r2
 8006efc:	f7ff fa6e 	bl	80063dc <LL_RCC_PLL_GetDivider>
 8006f00:	4603      	mov	r3, r0
 8006f02:	091b      	lsrs	r3, r3, #4
 8006f04:	3301      	adds	r3, #1
 8006f06:	fbb4 f4f3 	udiv	r4, r4, r3
 8006f0a:	f7ff fa5b 	bl	80063c4 <LL_RCC_PLL_GetR>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	0f5b      	lsrs	r3, r3, #29
 8006f12:	3301      	adds	r3, #1
 8006f14:	fbb4 f3f3 	udiv	r3, r4, r3
 8006f18:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd90      	pop	{r4, r7, pc}
 8006f24:	08013d1c 	.word	0x08013d1c
 8006f28:	00f42400 	.word	0x00f42400
 8006f2c:	01e84800 	.word	0x01e84800

08006f30 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f30:	b598      	push	{r3, r4, r7, lr}
 8006f32:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006f34:	f7ff ff92 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 8006f38:	4604      	mov	r4, r0
 8006f3a:	f7ff f9c7 	bl	80062cc <LL_RCC_GetAHBPrescaler>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	091b      	lsrs	r3, r3, #4
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	4a03      	ldr	r2, [pc, #12]	; (8006f54 <HAL_RCC_GetHCLKFreq+0x24>)
 8006f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	bd98      	pop	{r3, r4, r7, pc}
 8006f54:	08013cbc 	.word	0x08013cbc

08006f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f58:	b598      	push	{r3, r4, r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006f5c:	f7ff ffe8 	bl	8006f30 <HAL_RCC_GetHCLKFreq>
 8006f60:	4604      	mov	r4, r0
 8006f62:	f7ff f9e6 	bl	8006332 <LL_RCC_GetAPB2Prescaler>
 8006f66:	4603      	mov	r3, r0
 8006f68:	0adb      	lsrs	r3, r3, #11
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	4a04      	ldr	r2, [pc, #16]	; (8006f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f74:	f003 031f 	and.w	r3, r3, #31
 8006f78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	bd98      	pop	{r3, r4, r7, pc}
 8006f80:	08013cfc 	.word	0x08013cfc

08006f84 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	226f      	movs	r2, #111	; 0x6f
 8006f92:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8006f94:	f7ff f925 	bl	80061e2 <LL_RCC_GetSysClkSource>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8006f9e:	f7ff f995 	bl	80062cc <LL_RCC_GetAHBPrescaler>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8006fa8:	f7ff f9b7 	bl	800631a <LL_RCC_GetAPB1Prescaler>
 8006fac:	4602      	mov	r2, r0
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8006fb2:	f7ff f9be 	bl	8006332 <LL_RCC_GetAPB2Prescaler>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006fbc:	f7ff f992 	bl	80062e4 <LL_C2_RCC_GetAHBPrescaler>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8006fc6:	f7ff f99a 	bl	80062fe <LL_RCC_GetAHB4Prescaler>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006fd0:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <HAL_RCC_GetClockConfig+0x60>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0207 	and.w	r2, r3, #7
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	601a      	str	r2, [r3, #0]
}
 8006fdc:	bf00      	nop
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	58004000 	.word	0x58004000

08006fe8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006fe8:	b590      	push	{r4, r7, lr}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2bb0      	cmp	r3, #176	; 0xb0
 8006ff4:	d903      	bls.n	8006ffe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006ff6:	4b15      	ldr	r3, [pc, #84]	; (800704c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	e007      	b.n	800700e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	091b      	lsrs	r3, r3, #4
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	4a11      	ldr	r2, [pc, #68]	; (800704c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800700c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800700e:	f7ff f976 	bl	80062fe <LL_RCC_GetAHB4Prescaler>
 8007012:	4603      	mov	r3, r0
 8007014:	091b      	lsrs	r3, r3, #4
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	4a0d      	ldr	r2, [pc, #52]	; (8007050 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800701c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	fbb2 f3f3 	udiv	r3, r2, r3
 8007026:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4a0a      	ldr	r2, [pc, #40]	; (8007054 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800702c:	fba2 2303 	umull	r2, r3, r2, r3
 8007030:	0c9c      	lsrs	r4, r3, #18
 8007032:	f7fe fea7 	bl	8005d84 <HAL_PWREx_GetVoltageRange>
 8007036:	4603      	mov	r3, r0
 8007038:	4619      	mov	r1, r3
 800703a:	4620      	mov	r0, r4
 800703c:	f000 f80c 	bl	8007058 <RCC_SetFlashLatency>
 8007040:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	bd90      	pop	{r4, r7, pc}
 800704a:	bf00      	nop
 800704c:	08013d1c 	.word	0x08013d1c
 8007050:	08013cbc 	.word	0x08013cbc
 8007054:	431bde83 	.word	0x431bde83

08007058 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007058:	b590      	push	{r4, r7, lr}
 800705a:	b093      	sub	sp, #76	; 0x4c
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007062:	4b39      	ldr	r3, [pc, #228]	; (8007148 <RCC_SetFlashLatency+0xf0>)
 8007064:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007068:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800706a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800706e:	4a37      	ldr	r2, [pc, #220]	; (800714c <RCC_SetFlashLatency+0xf4>)
 8007070:	f107 031c 	add.w	r3, r7, #28
 8007074:	ca07      	ldmia	r2, {r0, r1, r2}
 8007076:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800707a:	4b35      	ldr	r3, [pc, #212]	; (8007150 <RCC_SetFlashLatency+0xf8>)
 800707c:	f107 040c 	add.w	r4, r7, #12
 8007080:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007086:	2300      	movs	r3, #0
 8007088:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007090:	d11c      	bne.n	80070cc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007092:	2300      	movs	r3, #0
 8007094:	643b      	str	r3, [r7, #64]	; 0x40
 8007096:	e015      	b.n	80070c4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80070a0:	4413      	add	r3, r2
 80070a2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d808      	bhi.n	80070be <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80070ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80070b4:	4413      	add	r3, r2
 80070b6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80070ba:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80070bc:	e022      	b.n	8007104 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80070be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c0:	3301      	adds	r3, #1
 80070c2:	643b      	str	r3, [r7, #64]	; 0x40
 80070c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d9e6      	bls.n	8007098 <RCC_SetFlashLatency+0x40>
 80070ca:	e01b      	b.n	8007104 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80070cc:	2300      	movs	r3, #0
 80070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070d0:	e015      	b.n	80070fe <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80070d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80070da:	4413      	add	r3, r2
 80070dc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d808      	bhi.n	80070f8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80070e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80070ee:	4413      	add	r3, r2
 80070f0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80070f4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80070f6:	e005      	b.n	8007104 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80070f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fa:	3301      	adds	r3, #1
 80070fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007100:	2b02      	cmp	r3, #2
 8007102:	d9e6      	bls.n	80070d2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8007104:	4b13      	ldr	r3, [pc, #76]	; (8007154 <RCC_SetFlashLatency+0xfc>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f023 0207 	bic.w	r2, r3, #7
 800710c:	4911      	ldr	r1, [pc, #68]	; (8007154 <RCC_SetFlashLatency+0xfc>)
 800710e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007110:	4313      	orrs	r3, r2
 8007112:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007114:	f7fb fe6c 	bl	8002df0 <HAL_GetTick>
 8007118:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800711a:	e008      	b.n	800712e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800711c:	f7fb fe68 	bl	8002df0 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b02      	cmp	r3, #2
 8007128:	d901      	bls.n	800712e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e007      	b.n	800713e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800712e:	4b09      	ldr	r3, [pc, #36]	; (8007154 <RCC_SetFlashLatency+0xfc>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007138:	429a      	cmp	r2, r3
 800713a:	d1ef      	bne.n	800711c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	374c      	adds	r7, #76	; 0x4c
 8007142:	46bd      	mov	sp, r7
 8007144:	bd90      	pop	{r4, r7, pc}
 8007146:	bf00      	nop
 8007148:	08013910 	.word	0x08013910
 800714c:	08013920 	.word	0x08013920
 8007150:	0801392c 	.word	0x0801392c
 8007154:	58004000 	.word	0x58004000

08007158 <LL_RCC_LSE_IsEnabled>:
{
 8007158:	b480      	push	{r7}
 800715a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800715c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b01      	cmp	r3, #1
 800716a:	d101      	bne.n	8007170 <LL_RCC_LSE_IsEnabled+0x18>
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <LL_RCC_LSE_IsEnabled+0x1a>
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <LL_RCC_LSE_IsReady>:
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b02      	cmp	r3, #2
 800718e:	d101      	bne.n	8007194 <LL_RCC_LSE_IsReady+0x18>
 8007190:	2301      	movs	r3, #1
 8007192:	e000      	b.n	8007196 <LL_RCC_LSE_IsReady+0x1a>
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <LL_RCC_SetRFWKPClockSource>:
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80071a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <LL_RCC_SetSMPSClockSource>:
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80071d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	f023 0203 	bic.w	r2, r3, #3
 80071de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <LL_RCC_SetSMPSPrescaler>:
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80071fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4313      	orrs	r3, r2
 800720e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <LL_RCC_SetUSARTClockSource>:
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800722c:	f023 0203 	bic.w	r2, r3, #3
 8007230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4313      	orrs	r3, r2
 8007238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <LL_RCC_SetLPUARTClockSource>:
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007258:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800725c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <LL_RCC_SetI2CClockSource>:
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800727c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007280:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	091b      	lsrs	r3, r3, #4
 8007288:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800728c:	43db      	mvns	r3, r3
 800728e:	401a      	ands	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800729c:	4313      	orrs	r3, r2
 800729e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <LL_RCC_SetLPTIMClockSource>:
{
 80072ae:	b480      	push	{r7}
 80072b0:	b083      	sub	sp, #12
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80072b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	0c1b      	lsrs	r3, r3, #16
 80072c2:	041b      	lsls	r3, r3, #16
 80072c4:	43db      	mvns	r3, r3
 80072c6:	401a      	ands	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	041b      	lsls	r3, r3, #16
 80072cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072d0:	4313      	orrs	r3, r2
 80072d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <LL_RCC_SetSAIClockSource>:
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80072ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <LL_RCC_SetRNGClockSource>:
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800731a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800731e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4313      	orrs	r3, r2
 800732a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <LL_RCC_SetCLK48ClockSource>:
{
 800733a:	b480      	push	{r7}
 800733c:	b083      	sub	sp, #12
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800734e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4313      	orrs	r3, r2
 8007356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <LL_RCC_SetUSBClockSource>:
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff ffe3 	bl	800733a <LL_RCC_SetCLK48ClockSource>
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <LL_RCC_SetADCClockSource>:
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800738c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <LL_RCC_SetRTCClockSource>:
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80073b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <LL_RCC_GetRTCClockSource>:
{
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80073d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <LL_RCC_ForceBackupDomainReset>:
{
 80073ee:	b480      	push	{r7}
 80073f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80073f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007406:	bf00      	nop
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007428:	bf00      	nop
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <LL_RCC_PLLSAI1_Enable>:
{
 8007432:	b480      	push	{r7}
 8007434:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007440:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007444:	6013      	str	r3, [r2, #0]
}
 8007446:	bf00      	nop
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <LL_RCC_PLLSAI1_Disable>:
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800745e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007462:	6013      	str	r3, [r2, #0]
}
 8007464:	bf00      	nop
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <LL_RCC_PLLSAI1_IsReady>:
{
 800746e:	b480      	push	{r7}
 8007470:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800747c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007480:	d101      	bne.n	8007486 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007482:	2301      	movs	r3, #1
 8007484:	e000      	b.n	8007488 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b088      	sub	sp, #32
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800749a:	2300      	movs	r3, #0
 800749c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800749e:	2300      	movs	r3, #0
 80074a0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d033      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074b6:	d00c      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80074b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074bc:	d802      	bhi.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d010      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80074c2:	e017      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80074c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074c8:	d017      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x68>
 80074ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80074ce:	d016      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80074d0:	e010      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80074d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80074e2:	e00d      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3304      	adds	r3, #4
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 f947 	bl	800777c <RCCEx_PLLSAI1_ConfigNP>
 80074ee:	4603      	mov	r3, r0
 80074f0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80074f2:	e005      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	77fb      	strb	r3, [r7, #31]
        break;
 80074f8:	e002      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80074fa:	bf00      	nop
 80074fc:	e000      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80074fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007500:	7ffb      	ldrb	r3, [r7, #31]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d105      	bne.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff fee9 	bl	80072e2 <LL_RCC_SetSAIClockSource>
 8007510:	e001      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007512:	7ffb      	ldrb	r3, [r7, #31]
 8007514:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800751e:	2b00      	cmp	r3, #0
 8007520:	d046      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007522:	f7ff ff57 	bl	80073d4 <LL_RCC_GetRTCClockSource>
 8007526:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	429a      	cmp	r2, r3
 8007530:	d03c      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007532:	f7fe fc17 	bl	8005d64 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d105      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff ff31 	bl	80073a8 <LL_RCC_SetRTCClockSource>
 8007546:	e02e      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800754c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007550:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007552:	f7ff ff4c 	bl	80073ee <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007556:	f7ff ff5b 	bl	8007410 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007572:	f7ff fdf1 	bl	8007158 <LL_RCC_LSE_IsEnabled>
 8007576:	4603      	mov	r3, r0
 8007578:	2b01      	cmp	r3, #1
 800757a:	d114      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800757c:	f7fb fc38 	bl	8002df0 <HAL_GetTick>
 8007580:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007582:	e00b      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007584:	f7fb fc34 	bl	8002df0 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007592:	4293      	cmp	r3, r2
 8007594:	d902      	bls.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	77fb      	strb	r3, [r7, #31]
              break;
 800759a:	e004      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800759c:	f7ff fdee 	bl	800717c <LL_RCC_LSE_IsReady>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d1ee      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80075a6:	7ffb      	ldrb	r3, [r7, #31]
 80075a8:	77bb      	strb	r3, [r7, #30]
 80075aa:	e001      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ac:	7ffb      	ldrb	r3, [r7, #31]
 80075ae:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d004      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff fe2b 	bl	800721c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fe36 	bl	8007248 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0310 	and.w	r3, r3, #16
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d004      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff fe5e 	bl	80072ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0320 	and.w	r3, r3, #32
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d004      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	4618      	mov	r0, r3
 8007604:	f7ff fe53 	bl	80072ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff fe2b 	bl	8007274 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d004      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff fe20 	bl	8007274 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763c:	2b00      	cmp	r3, #0
 800763e:	d022      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff fe8e 	bl	8007366 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007652:	d107      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800765e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007662:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800766c:	d10b      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3304      	adds	r3, #4
 8007672:	4618      	mov	r0, r3
 8007674:	f000 f8dd 	bl	8007832 <RCCEx_PLLSAI1_ConfigNQ>
 8007678:	4603      	mov	r3, r0
 800767a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800767c:	7ffb      	ldrb	r3, [r7, #31]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8007682:	7ffb      	ldrb	r3, [r7, #31]
 8007684:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800768e:	2b00      	cmp	r3, #0
 8007690:	d02b      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769a:	d008      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076a4:	d003      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d105      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x228>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff fe2b 	bl	800730e <LL_RCC_SetRNGClockSource>
 80076b8:	e00a      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	2000      	movs	r0, #0
 80076c6:	f7ff fe22 	bl	800730e <LL_RCC_SetRNGClockSource>
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f7ff fe35 	bl	800733a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80076d8:	d107      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80076da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076e8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d022      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff fe3e 	bl	800737c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007708:	d107      	bne.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800770a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007718:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007722:	d10b      	bne.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3304      	adds	r3, #4
 8007728:	4618      	mov	r0, r3
 800772a:	f000 f8dd 	bl	80078e8 <RCCEx_PLLSAI1_ConfigNR>
 800772e:	4603      	mov	r3, r0
 8007730:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007732:	7ffb      	ldrb	r3, [r7, #31]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8007738:	7ffb      	ldrb	r3, [r7, #31]
 800773a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d004      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff fd27 	bl	80071a0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d009      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fd46 	bl	80071f4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff fd2d 	bl	80071cc <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8007772:	7fbb      	ldrb	r3, [r7, #30]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3720      	adds	r7, #32
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007788:	f7ff fe62 	bl	8007450 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800778c:	f7fb fb30 	bl	8002df0 <HAL_GetTick>
 8007790:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007792:	e009      	b.n	80077a8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007794:	f7fb fb2c 	bl	8002df0 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d902      	bls.n	80077a8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	73fb      	strb	r3, [r7, #15]
      break;
 80077a6:	e004      	b.n	80077b2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80077a8:	f7ff fe61 	bl	800746e <LL_RCC_PLLSAI1_IsReady>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1f0      	bne.n	8007794 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d137      	bne.n	8007828 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80077b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077cc:	4313      	orrs	r3, r2
 80077ce:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80077d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077e2:	4313      	orrs	r3, r2
 80077e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80077e6:	f7ff fe24 	bl	8007432 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ea:	f7fb fb01 	bl	8002df0 <HAL_GetTick>
 80077ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80077f0:	e009      	b.n	8007806 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077f2:	f7fb fafd 	bl	8002df0 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d902      	bls.n	8007806 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	73fb      	strb	r3, [r7, #15]
        break;
 8007804:	e004      	b.n	8007810 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007806:	f7ff fe32 	bl	800746e <LL_RCC_PLLSAI1_IsReady>
 800780a:	4603      	mov	r3, r0
 800780c:	2b01      	cmp	r3, #1
 800780e:	d1f0      	bne.n	80077f2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d108      	bne.n	8007828 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007824:	4313      	orrs	r3, r2
 8007826:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800783e:	f7ff fe07 	bl	8007450 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007842:	f7fb fad5 	bl	8002df0 <HAL_GetTick>
 8007846:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007848:	e009      	b.n	800785e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800784a:	f7fb fad1 	bl	8002df0 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	2b02      	cmp	r3, #2
 8007856:	d902      	bls.n	800785e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	73fb      	strb	r3, [r7, #15]
      break;
 800785c:	e004      	b.n	8007868 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800785e:	f7ff fe06 	bl	800746e <LL_RCC_PLLSAI1_IsReady>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1f0      	bne.n	800784a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d137      	bne.n	80078de <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800786e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007882:	4313      	orrs	r3, r2
 8007884:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007898:	4313      	orrs	r3, r2
 800789a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800789c:	f7ff fdc9 	bl	8007432 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078a0:	f7fb faa6 	bl	8002df0 <HAL_GetTick>
 80078a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80078a6:	e009      	b.n	80078bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078a8:	f7fb faa2 	bl	8002df0 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d902      	bls.n	80078bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	73fb      	strb	r3, [r7, #15]
        break;
 80078ba:	e004      	b.n	80078c6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80078bc:	f7ff fdd7 	bl	800746e <LL_RCC_PLLSAI1_IsReady>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d1f0      	bne.n	80078a8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d108      	bne.n	80078de <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80078cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078d0:	691a      	ldr	r2, [r3, #16]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078da:	4313      	orrs	r3, r2
 80078dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80078de:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80078f4:	f7ff fdac 	bl	8007450 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078f8:	f7fb fa7a 	bl	8002df0 <HAL_GetTick>
 80078fc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078fe:	e009      	b.n	8007914 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007900:	f7fb fa76 	bl	8002df0 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d902      	bls.n	8007914 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	73fb      	strb	r3, [r7, #15]
      break;
 8007912:	e004      	b.n	800791e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007914:	f7ff fdab 	bl	800746e <LL_RCC_PLLSAI1_IsReady>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1f0      	bne.n	8007900 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800791e:	7bfb      	ldrb	r3, [r7, #15]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d137      	bne.n	8007994 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007938:	4313      	orrs	r3, r2
 800793a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800793c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800794e:	4313      	orrs	r3, r2
 8007950:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007952:	f7ff fd6e 	bl	8007432 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007956:	f7fb fa4b 	bl	8002df0 <HAL_GetTick>
 800795a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800795c:	e009      	b.n	8007972 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800795e:	f7fb fa47 	bl	8002df0 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d902      	bls.n	8007972 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	73fb      	strb	r3, [r7, #15]
        break;
 8007970:	e004      	b.n	800797c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007972:	f7ff fd7c 	bl	800746e <LL_RCC_PLLSAI1_IsReady>
 8007976:	4603      	mov	r3, r0
 8007978:	2b01      	cmp	r3, #1
 800797a:	d1f0      	bne.n	800795e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800797c:	7bfb      	ldrb	r3, [r7, #15]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d108      	bne.n	8007994 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007986:	691a      	ldr	r2, [r3, #16]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007990:	4313      	orrs	r3, r2
 8007992:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007994:	7bfb      	ldrb	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e090      	b.n	8007ad2 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d106      	bne.n	80079ca <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7fa fe93 	bl	80026f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2202      	movs	r2, #2
 80079ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	22ca      	movs	r2, #202	; 0xca
 80079d8:	625a      	str	r2, [r3, #36]	; 0x24
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2253      	movs	r2, #83	; 0x53
 80079e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f89f 	bl	8007b26 <RTC_EnterInitMode>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d009      	beq.n	8007a02 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	22ff      	movs	r2, #255	; 0xff
 80079f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2204      	movs	r2, #4
 80079fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e067      	b.n	8007ad2 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6812      	ldr	r2, [r2, #0]
 8007a0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a14:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6899      	ldr	r1, [r3, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	68d2      	ldr	r2, [r2, #12]
 8007a3c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6919      	ldr	r1, [r3, #16]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	041a      	lsls	r2, r3, #16
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68da      	ldr	r2, [r3, #12]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a60:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 0203 	bic.w	r2, r2, #3
 8007a70:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	69da      	ldr	r2, [r3, #28]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	431a      	orrs	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d113      	bne.n	8007ac0 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f81e 	bl	8007ada <HAL_RTC_WaitForSynchro>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00d      	beq.n	8007ac0 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	22ff      	movs	r2, #255	; 0xff
 8007aaa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2204      	movs	r2, #4
 8007ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e008      	b.n	8007ad2 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	22ff      	movs	r2, #255	; 0xff
 8007ac6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
  }
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007af0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007af2:	f7fb f97d 	bl	8002df0 <HAL_GetTick>
 8007af6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007af8:	e009      	b.n	8007b0e <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007afa:	f7fb f979 	bl	8002df0 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b08:	d901      	bls.n	8007b0e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e007      	b.n	8007b1e <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f003 0320 	and.w	r3, r3, #32
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0ee      	beq.n	8007afa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d119      	bne.n	8007b70 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f04f 32ff 	mov.w	r2, #4294967295
 8007b44:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007b46:	f7fb f953 	bl	8002df0 <HAL_GetTick>
 8007b4a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b4c:	e009      	b.n	8007b62 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007b4e:	f7fb f94f 	bl	8002df0 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b5c:	d901      	bls.n	8007b62 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e007      	b.n	8007b72 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0ee      	beq.n	8007b4e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e049      	b.n	8007c20 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d106      	bne.n	8007ba6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7fb f86f 	bl	8002c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4610      	mov	r0, r2
 8007bba:	f000 fd17 	bl	80085ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d001      	beq.n	8007c40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e02e      	b.n	8007c9e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a17      	ldr	r2, [pc, #92]	; (8007cac <HAL_TIM_Base_Start+0x84>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d004      	beq.n	8007c5c <HAL_TIM_Base_Start+0x34>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c5a:	d115      	bne.n	8007c88 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689a      	ldr	r2, [r3, #8]
 8007c62:	4b13      	ldr	r3, [pc, #76]	; (8007cb0 <HAL_TIM_Base_Start+0x88>)
 8007c64:	4013      	ands	r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b06      	cmp	r3, #6
 8007c6c:	d015      	beq.n	8007c9a <HAL_TIM_Base_Start+0x72>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c74:	d011      	beq.n	8007c9a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f042 0201 	orr.w	r2, r2, #1
 8007c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c86:	e008      	b.n	8007c9a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0201 	orr.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	e000      	b.n	8007c9c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40012c00 	.word	0x40012c00
 8007cb0:	00010007 	.word	0x00010007

08007cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d001      	beq.n	8007ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e036      	b.n	8007d3a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0201 	orr.w	r2, r2, #1
 8007ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a17      	ldr	r2, [pc, #92]	; (8007d48 <HAL_TIM_Base_Start_IT+0x94>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d004      	beq.n	8007cf8 <HAL_TIM_Base_Start_IT+0x44>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf6:	d115      	bne.n	8007d24 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689a      	ldr	r2, [r3, #8]
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <HAL_TIM_Base_Start_IT+0x98>)
 8007d00:	4013      	ands	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b06      	cmp	r3, #6
 8007d08:	d015      	beq.n	8007d36 <HAL_TIM_Base_Start_IT+0x82>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d10:	d011      	beq.n	8007d36 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f042 0201 	orr.w	r2, r2, #1
 8007d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d22:	e008      	b.n	8007d36 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0201 	orr.w	r2, r2, #1
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	e000      	b.n	8007d38 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	40012c00 	.word	0x40012c00
 8007d4c:	00010007 	.word	0x00010007

08007d50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e049      	b.n	8007df6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d106      	bne.n	8007d7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f841 	bl	8007dfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	f000 fc2c 	bl	80085ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
	...

08007e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d109      	bne.n	8007e38 <HAL_TIM_PWM_Start+0x24>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	bf14      	ite	ne
 8007e30:	2301      	movne	r3, #1
 8007e32:	2300      	moveq	r3, #0
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	e03c      	b.n	8007eb2 <HAL_TIM_PWM_Start+0x9e>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	d109      	bne.n	8007e52 <HAL_TIM_PWM_Start+0x3e>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	bf14      	ite	ne
 8007e4a:	2301      	movne	r3, #1
 8007e4c:	2300      	moveq	r3, #0
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	e02f      	b.n	8007eb2 <HAL_TIM_PWM_Start+0x9e>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d109      	bne.n	8007e6c <HAL_TIM_PWM_Start+0x58>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	bf14      	ite	ne
 8007e64:	2301      	movne	r3, #1
 8007e66:	2300      	moveq	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	e022      	b.n	8007eb2 <HAL_TIM_PWM_Start+0x9e>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2b0c      	cmp	r3, #12
 8007e70:	d109      	bne.n	8007e86 <HAL_TIM_PWM_Start+0x72>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	bf14      	ite	ne
 8007e7e:	2301      	movne	r3, #1
 8007e80:	2300      	moveq	r3, #0
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	e015      	b.n	8007eb2 <HAL_TIM_PWM_Start+0x9e>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b10      	cmp	r3, #16
 8007e8a:	d109      	bne.n	8007ea0 <HAL_TIM_PWM_Start+0x8c>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	bf14      	ite	ne
 8007e98:	2301      	movne	r3, #1
 8007e9a:	2300      	moveq	r3, #0
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	e008      	b.n	8007eb2 <HAL_TIM_PWM_Start+0x9e>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	bf14      	ite	ne
 8007eac:	2301      	movne	r3, #1
 8007eae:	2300      	moveq	r3, #0
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e079      	b.n	8007fae <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d104      	bne.n	8007eca <HAL_TIM_PWM_Start+0xb6>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ec8:	e023      	b.n	8007f12 <HAL_TIM_PWM_Start+0xfe>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d104      	bne.n	8007eda <HAL_TIM_PWM_Start+0xc6>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ed8:	e01b      	b.n	8007f12 <HAL_TIM_PWM_Start+0xfe>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	d104      	bne.n	8007eea <HAL_TIM_PWM_Start+0xd6>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ee8:	e013      	b.n	8007f12 <HAL_TIM_PWM_Start+0xfe>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b0c      	cmp	r3, #12
 8007eee:	d104      	bne.n	8007efa <HAL_TIM_PWM_Start+0xe6>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ef8:	e00b      	b.n	8007f12 <HAL_TIM_PWM_Start+0xfe>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b10      	cmp	r3, #16
 8007efe:	d104      	bne.n	8007f0a <HAL_TIM_PWM_Start+0xf6>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f08:	e003      	b.n	8007f12 <HAL_TIM_PWM_Start+0xfe>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2201      	movs	r2, #1
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fee4 	bl	8008ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a24      	ldr	r2, [pc, #144]	; (8007fb8 <HAL_TIM_PWM_Start+0x1a4>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d009      	beq.n	8007f3e <HAL_TIM_PWM_Start+0x12a>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a23      	ldr	r2, [pc, #140]	; (8007fbc <HAL_TIM_PWM_Start+0x1a8>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d004      	beq.n	8007f3e <HAL_TIM_PWM_Start+0x12a>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a21      	ldr	r2, [pc, #132]	; (8007fc0 <HAL_TIM_PWM_Start+0x1ac>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d101      	bne.n	8007f42 <HAL_TIM_PWM_Start+0x12e>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e000      	b.n	8007f44 <HAL_TIM_PWM_Start+0x130>
 8007f42:	2300      	movs	r3, #0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a16      	ldr	r2, [pc, #88]	; (8007fb8 <HAL_TIM_PWM_Start+0x1a4>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d004      	beq.n	8007f6c <HAL_TIM_PWM_Start+0x158>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6a:	d115      	bne.n	8007f98 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	4b14      	ldr	r3, [pc, #80]	; (8007fc4 <HAL_TIM_PWM_Start+0x1b0>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b06      	cmp	r3, #6
 8007f7c:	d015      	beq.n	8007faa <HAL_TIM_PWM_Start+0x196>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f84:	d011      	beq.n	8007faa <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f042 0201 	orr.w	r2, r2, #1
 8007f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f96:	e008      	b.n	8007faa <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	e000      	b.n	8007fac <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007faa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	40012c00 	.word	0x40012c00
 8007fbc:	40014400 	.word	0x40014400
 8007fc0:	40014800 	.word	0x40014800
 8007fc4:	00010007 	.word	0x00010007

08007fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d122      	bne.n	8008024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d11b      	bne.n	8008024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0202 	mvn.w	r2, #2
 8007ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 facf 	bl	80085ae <HAL_TIM_IC_CaptureCallback>
 8008010:	e005      	b.n	800801e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fac1 	bl	800859a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fad2 	bl	80085c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b04      	cmp	r3, #4
 8008030:	d122      	bne.n	8008078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b04      	cmp	r3, #4
 800803e:	d11b      	bne.n	8008078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f06f 0204 	mvn.w	r2, #4
 8008048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2202      	movs	r2, #2
 800804e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 faa5 	bl	80085ae <HAL_TIM_IC_CaptureCallback>
 8008064:	e005      	b.n	8008072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fa97 	bl	800859a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 faa8 	bl	80085c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f003 0308 	and.w	r3, r3, #8
 8008082:	2b08      	cmp	r3, #8
 8008084:	d122      	bne.n	80080cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b08      	cmp	r3, #8
 8008092:	d11b      	bne.n	80080cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0208 	mvn.w	r2, #8
 800809c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2204      	movs	r2, #4
 80080a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fa7b 	bl	80085ae <HAL_TIM_IC_CaptureCallback>
 80080b8:	e005      	b.n	80080c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fa6d 	bl	800859a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fa7e 	bl	80085c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d122      	bne.n	8008120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	2b10      	cmp	r3, #16
 80080e6:	d11b      	bne.n	8008120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0210 	mvn.w	r2, #16
 80080f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2208      	movs	r2, #8
 80080f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa51 	bl	80085ae <HAL_TIM_IC_CaptureCallback>
 800810c:	e005      	b.n	800811a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fa43 	bl	800859a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fa54 	bl	80085c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b01      	cmp	r3, #1
 800812c:	d10e      	bne.n	800814c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b01      	cmp	r3, #1
 800813a:	d107      	bne.n	800814c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0201 	mvn.w	r2, #1
 8008144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fa f852 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008156:	2b80      	cmp	r3, #128	; 0x80
 8008158:	d10e      	bne.n	8008178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008164:	2b80      	cmp	r3, #128	; 0x80
 8008166:	d107      	bne.n	8008178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fed8 	bl	8008f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008186:	d10e      	bne.n	80081a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008192:	2b80      	cmp	r3, #128	; 0x80
 8008194:	d107      	bne.n	80081a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800819e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fecb 	bl	8008f3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b0:	2b40      	cmp	r3, #64	; 0x40
 80081b2:	d10e      	bne.n	80081d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081be:	2b40      	cmp	r3, #64	; 0x40
 80081c0:	d107      	bne.n	80081d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fa02 	bl	80085d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f003 0320 	and.w	r3, r3, #32
 80081dc:	2b20      	cmp	r3, #32
 80081de:	d10e      	bne.n	80081fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b20      	cmp	r3, #32
 80081ec:	d107      	bne.n	80081fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f06f 0220 	mvn.w	r2, #32
 80081f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fe8b 	bl	8008f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800821a:	2b01      	cmp	r3, #1
 800821c:	d101      	bne.n	8008222 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800821e:	2302      	movs	r3, #2
 8008220:	e0fd      	b.n	800841e <HAL_TIM_PWM_ConfigChannel+0x216>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b14      	cmp	r3, #20
 800822e:	f200 80f0 	bhi.w	8008412 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008232:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	0800828d 	.word	0x0800828d
 800823c:	08008413 	.word	0x08008413
 8008240:	08008413 	.word	0x08008413
 8008244:	08008413 	.word	0x08008413
 8008248:	080082cd 	.word	0x080082cd
 800824c:	08008413 	.word	0x08008413
 8008250:	08008413 	.word	0x08008413
 8008254:	08008413 	.word	0x08008413
 8008258:	0800830f 	.word	0x0800830f
 800825c:	08008413 	.word	0x08008413
 8008260:	08008413 	.word	0x08008413
 8008264:	08008413 	.word	0x08008413
 8008268:	0800834f 	.word	0x0800834f
 800826c:	08008413 	.word	0x08008413
 8008270:	08008413 	.word	0x08008413
 8008274:	08008413 	.word	0x08008413
 8008278:	08008391 	.word	0x08008391
 800827c:	08008413 	.word	0x08008413
 8008280:	08008413 	.word	0x08008413
 8008284:	08008413 	.word	0x08008413
 8008288:	080083d1 	.word	0x080083d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68b9      	ldr	r1, [r7, #8]
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fa0e 	bl	80086b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	699a      	ldr	r2, [r3, #24]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0208 	orr.w	r2, r2, #8
 80082a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	699a      	ldr	r2, [r3, #24]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0204 	bic.w	r2, r2, #4
 80082b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6999      	ldr	r1, [r3, #24]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	691a      	ldr	r2, [r3, #16]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	619a      	str	r2, [r3, #24]
      break;
 80082ca:	e0a3      	b.n	8008414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68b9      	ldr	r1, [r7, #8]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fa6a 	bl	80087ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	699a      	ldr	r2, [r3, #24]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699a      	ldr	r2, [r3, #24]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6999      	ldr	r1, [r3, #24]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	021a      	lsls	r2, r3, #8
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	619a      	str	r2, [r3, #24]
      break;
 800830c:	e082      	b.n	8008414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68b9      	ldr	r1, [r7, #8]
 8008314:	4618      	mov	r0, r3
 8008316:	f000 fac3 	bl	80088a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	69da      	ldr	r2, [r3, #28]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f042 0208 	orr.w	r2, r2, #8
 8008328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69da      	ldr	r2, [r3, #28]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0204 	bic.w	r2, r2, #4
 8008338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69d9      	ldr	r1, [r3, #28]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	691a      	ldr	r2, [r3, #16]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	430a      	orrs	r2, r1
 800834a:	61da      	str	r2, [r3, #28]
      break;
 800834c:	e062      	b.n	8008414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68b9      	ldr	r1, [r7, #8]
 8008354:	4618      	mov	r0, r3
 8008356:	f000 fb1b 	bl	8008990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69da      	ldr	r2, [r3, #28]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69da      	ldr	r2, [r3, #28]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69d9      	ldr	r1, [r3, #28]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	021a      	lsls	r2, r3, #8
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	61da      	str	r2, [r3, #28]
      break;
 800838e:	e041      	b.n	8008414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68b9      	ldr	r1, [r7, #8]
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fb58 	bl	8008a4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0208 	orr.w	r2, r2, #8
 80083aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 0204 	bic.w	r2, r2, #4
 80083ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	691a      	ldr	r2, [r3, #16]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083ce:	e021      	b.n	8008414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68b9      	ldr	r1, [r7, #8]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fb90 	bl	8008afc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	021a      	lsls	r2, r3, #8
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	430a      	orrs	r2, r1
 800840e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008410:	e000      	b.n	8008414 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008412:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop

08008428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008438:	2b01      	cmp	r3, #1
 800843a:	d101      	bne.n	8008440 <HAL_TIM_ConfigClockSource+0x18>
 800843c:	2302      	movs	r3, #2
 800843e:	e0a8      	b.n	8008592 <HAL_TIM_ConfigClockSource+0x16a>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800845e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008462:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800846a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b40      	cmp	r3, #64	; 0x40
 800847a:	d067      	beq.n	800854c <HAL_TIM_ConfigClockSource+0x124>
 800847c:	2b40      	cmp	r3, #64	; 0x40
 800847e:	d80b      	bhi.n	8008498 <HAL_TIM_ConfigClockSource+0x70>
 8008480:	2b10      	cmp	r3, #16
 8008482:	d073      	beq.n	800856c <HAL_TIM_ConfigClockSource+0x144>
 8008484:	2b10      	cmp	r3, #16
 8008486:	d802      	bhi.n	800848e <HAL_TIM_ConfigClockSource+0x66>
 8008488:	2b00      	cmp	r3, #0
 800848a:	d06f      	beq.n	800856c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800848c:	e078      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800848e:	2b20      	cmp	r3, #32
 8008490:	d06c      	beq.n	800856c <HAL_TIM_ConfigClockSource+0x144>
 8008492:	2b30      	cmp	r3, #48	; 0x30
 8008494:	d06a      	beq.n	800856c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8008496:	e073      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008498:	2b70      	cmp	r3, #112	; 0x70
 800849a:	d00d      	beq.n	80084b8 <HAL_TIM_ConfigClockSource+0x90>
 800849c:	2b70      	cmp	r3, #112	; 0x70
 800849e:	d804      	bhi.n	80084aa <HAL_TIM_ConfigClockSource+0x82>
 80084a0:	2b50      	cmp	r3, #80	; 0x50
 80084a2:	d033      	beq.n	800850c <HAL_TIM_ConfigClockSource+0xe4>
 80084a4:	2b60      	cmp	r3, #96	; 0x60
 80084a6:	d041      	beq.n	800852c <HAL_TIM_ConfigClockSource+0x104>
      break;
 80084a8:	e06a      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80084aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ae:	d066      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x156>
 80084b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084b4:	d017      	beq.n	80084e6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80084b6:	e063      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	6899      	ldr	r1, [r3, #8]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f000 fbee 	bl	8008ca8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	609a      	str	r2, [r3, #8]
      break;
 80084e4:	e04c      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6818      	ldr	r0, [r3, #0]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	6899      	ldr	r1, [r3, #8]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f000 fbd7 	bl	8008ca8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008508:	609a      	str	r2, [r3, #8]
      break;
 800850a:	e039      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	6859      	ldr	r1, [r3, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	461a      	mov	r2, r3
 800851a:	f000 fb49 	bl	8008bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2150      	movs	r1, #80	; 0x50
 8008524:	4618      	mov	r0, r3
 8008526:	f000 fba2 	bl	8008c6e <TIM_ITRx_SetConfig>
      break;
 800852a:	e029      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6818      	ldr	r0, [r3, #0]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	6859      	ldr	r1, [r3, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	461a      	mov	r2, r3
 800853a:	f000 fb68 	bl	8008c0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2160      	movs	r1, #96	; 0x60
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fb92 	bl	8008c6e <TIM_ITRx_SetConfig>
      break;
 800854a:	e019      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	6859      	ldr	r1, [r3, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	461a      	mov	r2, r3
 800855a:	f000 fb29 	bl	8008bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2140      	movs	r1, #64	; 0x40
 8008564:	4618      	mov	r0, r3
 8008566:	f000 fb82 	bl	8008c6e <TIM_ITRx_SetConfig>
      break;
 800856a:	e009      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4619      	mov	r1, r3
 8008576:	4610      	mov	r0, r2
 8008578:	f000 fb79 	bl	8008c6e <TIM_ITRx_SetConfig>
        break;
 800857c:	e000      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800857e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085a2:	bf00      	nop
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085b6:	bf00      	nop
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b083      	sub	sp, #12
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085ca:	bf00      	nop
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
	...

080085ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a2a      	ldr	r2, [pc, #168]	; (80086a8 <TIM_Base_SetConfig+0xbc>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d003      	beq.n	800860c <TIM_Base_SetConfig+0x20>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800860a:	d108      	bne.n	800861e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	4313      	orrs	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a21      	ldr	r2, [pc, #132]	; (80086a8 <TIM_Base_SetConfig+0xbc>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d00b      	beq.n	800863e <TIM_Base_SetConfig+0x52>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800862c:	d007      	beq.n	800863e <TIM_Base_SetConfig+0x52>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a1e      	ldr	r2, [pc, #120]	; (80086ac <TIM_Base_SetConfig+0xc0>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d003      	beq.n	800863e <TIM_Base_SetConfig+0x52>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a1d      	ldr	r2, [pc, #116]	; (80086b0 <TIM_Base_SetConfig+0xc4>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d108      	bne.n	8008650 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	4313      	orrs	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	689a      	ldr	r2, [r3, #8]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a0c      	ldr	r2, [pc, #48]	; (80086a8 <TIM_Base_SetConfig+0xbc>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d007      	beq.n	800868c <TIM_Base_SetConfig+0xa0>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a0b      	ldr	r2, [pc, #44]	; (80086ac <TIM_Base_SetConfig+0xc0>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d003      	beq.n	800868c <TIM_Base_SetConfig+0xa0>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a0a      	ldr	r2, [pc, #40]	; (80086b0 <TIM_Base_SetConfig+0xc4>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d103      	bne.n	8008694 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	691a      	ldr	r2, [r3, #16]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	615a      	str	r2, [r3, #20]
}
 800869a:	bf00      	nop
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	40012c00 	.word	0x40012c00
 80086ac:	40014400 	.word	0x40014400
 80086b0:	40014800 	.word	0x40014800

080086b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	f023 0201 	bic.w	r2, r3, #1
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f023 0303 	bic.w	r3, r3, #3
 80086ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f023 0302 	bic.w	r3, r3, #2
 8008700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	4313      	orrs	r3, r2
 800870a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a24      	ldr	r2, [pc, #144]	; (80087a0 <TIM_OC1_SetConfig+0xec>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d007      	beq.n	8008724 <TIM_OC1_SetConfig+0x70>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a23      	ldr	r2, [pc, #140]	; (80087a4 <TIM_OC1_SetConfig+0xf0>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d003      	beq.n	8008724 <TIM_OC1_SetConfig+0x70>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a22      	ldr	r2, [pc, #136]	; (80087a8 <TIM_OC1_SetConfig+0xf4>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d10c      	bne.n	800873e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f023 0308 	bic.w	r3, r3, #8
 800872a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f023 0304 	bic.w	r3, r3, #4
 800873c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a17      	ldr	r2, [pc, #92]	; (80087a0 <TIM_OC1_SetConfig+0xec>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d007      	beq.n	8008756 <TIM_OC1_SetConfig+0xa2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a17      	ldr	r2, [pc, #92]	; (80087a8 <TIM_OC1_SetConfig+0xf4>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d003      	beq.n	8008756 <TIM_OC1_SetConfig+0xa2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a14      	ldr	r2, [pc, #80]	; (80087a4 <TIM_OC1_SetConfig+0xf0>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d111      	bne.n	800877a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800875c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	4313      	orrs	r3, r2
 800876e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	4313      	orrs	r3, r2
 8008778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	621a      	str	r2, [r3, #32]
}
 8008794:	bf00      	nop
 8008796:	371c      	adds	r7, #28
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	40012c00 	.word	0x40012c00
 80087a4:	40014800 	.word	0x40014800
 80087a8:	40014400 	.word	0x40014400

080087ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	f023 0210 	bic.w	r2, r3, #16
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	021b      	lsls	r3, r3, #8
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f023 0320 	bic.w	r3, r3, #32
 80087fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	011b      	lsls	r3, r3, #4
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	4313      	orrs	r3, r2
 8008806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a22      	ldr	r2, [pc, #136]	; (8008894 <TIM_OC2_SetConfig+0xe8>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d10d      	bne.n	800882c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	011b      	lsls	r3, r3, #4
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	4313      	orrs	r3, r2
 8008822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800882a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a19      	ldr	r2, [pc, #100]	; (8008894 <TIM_OC2_SetConfig+0xe8>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d007      	beq.n	8008844 <TIM_OC2_SetConfig+0x98>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a18      	ldr	r2, [pc, #96]	; (8008898 <TIM_OC2_SetConfig+0xec>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_OC2_SetConfig+0x98>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a17      	ldr	r2, [pc, #92]	; (800889c <TIM_OC2_SetConfig+0xf0>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d113      	bne.n	800886c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800884a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	4313      	orrs	r3, r2
 800885e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	4313      	orrs	r3, r2
 800886a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	621a      	str	r2, [r3, #32]
}
 8008886:	bf00      	nop
 8008888:	371c      	adds	r7, #28
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	40012c00 	.word	0x40012c00
 8008898:	40014400 	.word	0x40014400
 800889c:	40014800 	.word	0x40014800

080088a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	69db      	ldr	r3, [r3, #28]
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f023 0303 	bic.w	r3, r3, #3
 80088da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	021b      	lsls	r3, r3, #8
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a21      	ldr	r2, [pc, #132]	; (8008984 <TIM_OC3_SetConfig+0xe4>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d10d      	bne.n	800891e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	021b      	lsls	r3, r3, #8
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	4313      	orrs	r3, r2
 8008914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800891c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a18      	ldr	r2, [pc, #96]	; (8008984 <TIM_OC3_SetConfig+0xe4>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d007      	beq.n	8008936 <TIM_OC3_SetConfig+0x96>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a17      	ldr	r2, [pc, #92]	; (8008988 <TIM_OC3_SetConfig+0xe8>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d003      	beq.n	8008936 <TIM_OC3_SetConfig+0x96>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a16      	ldr	r2, [pc, #88]	; (800898c <TIM_OC3_SetConfig+0xec>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d113      	bne.n	800895e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800893c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	4313      	orrs	r3, r2
 8008950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	011b      	lsls	r3, r3, #4
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	4313      	orrs	r3, r2
 800895c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	621a      	str	r2, [r3, #32]
}
 8008978:	bf00      	nop
 800897a:	371c      	adds	r7, #28
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	40012c00 	.word	0x40012c00
 8008988:	40014400 	.word	0x40014400
 800898c:	40014800 	.word	0x40014800

08008990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	021b      	lsls	r3, r3, #8
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	031b      	lsls	r3, r3, #12
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a14      	ldr	r2, [pc, #80]	; (8008a40 <TIM_OC4_SetConfig+0xb0>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d007      	beq.n	8008a04 <TIM_OC4_SetConfig+0x74>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a13      	ldr	r2, [pc, #76]	; (8008a44 <TIM_OC4_SetConfig+0xb4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d003      	beq.n	8008a04 <TIM_OC4_SetConfig+0x74>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a12      	ldr	r2, [pc, #72]	; (8008a48 <TIM_OC4_SetConfig+0xb8>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d109      	bne.n	8008a18 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	019b      	lsls	r3, r3, #6
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	621a      	str	r2, [r3, #32]
}
 8008a32:	bf00      	nop
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	40012c00 	.word	0x40012c00
 8008a44:	40014400 	.word	0x40014400
 8008a48:	40014800 	.word	0x40014800

08008a4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	041b      	lsls	r3, r3, #16
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a13      	ldr	r2, [pc, #76]	; (8008af0 <TIM_OC5_SetConfig+0xa4>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d007      	beq.n	8008ab6 <TIM_OC5_SetConfig+0x6a>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a12      	ldr	r2, [pc, #72]	; (8008af4 <TIM_OC5_SetConfig+0xa8>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d003      	beq.n	8008ab6 <TIM_OC5_SetConfig+0x6a>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a11      	ldr	r2, [pc, #68]	; (8008af8 <TIM_OC5_SetConfig+0xac>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d109      	bne.n	8008aca <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008abc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	021b      	lsls	r3, r3, #8
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	621a      	str	r2, [r3, #32]
}
 8008ae4:	bf00      	nop
 8008ae6:	371c      	adds	r7, #28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	40012c00 	.word	0x40012c00
 8008af4:	40014400 	.word	0x40014400
 8008af8:	40014800 	.word	0x40014800

08008afc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a1b      	ldr	r3, [r3, #32]
 8008b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	021b      	lsls	r3, r3, #8
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	051b      	lsls	r3, r3, #20
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a14      	ldr	r2, [pc, #80]	; (8008ba4 <TIM_OC6_SetConfig+0xa8>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d007      	beq.n	8008b68 <TIM_OC6_SetConfig+0x6c>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a13      	ldr	r2, [pc, #76]	; (8008ba8 <TIM_OC6_SetConfig+0xac>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d003      	beq.n	8008b68 <TIM_OC6_SetConfig+0x6c>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a12      	ldr	r2, [pc, #72]	; (8008bac <TIM_OC6_SetConfig+0xb0>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d109      	bne.n	8008b7c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	029b      	lsls	r3, r3, #10
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	621a      	str	r2, [r3, #32]
}
 8008b96:	bf00      	nop
 8008b98:	371c      	adds	r7, #28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	40012c00 	.word	0x40012c00
 8008ba8:	40014400 	.word	0x40014400
 8008bac:	40014800 	.word	0x40014800

08008bb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	f023 0201 	bic.w	r2, r3, #1
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	011b      	lsls	r3, r3, #4
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f023 030a 	bic.w	r3, r3, #10
 8008bec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	621a      	str	r2, [r3, #32]
}
 8008c02:	bf00      	nop
 8008c04:	371c      	adds	r7, #28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b087      	sub	sp, #28
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	f023 0210 	bic.w	r2, r3, #16
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	031b      	lsls	r3, r3, #12
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	621a      	str	r2, [r3, #32]
}
 8008c62:	bf00      	nop
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b085      	sub	sp, #20
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	f043 0307 	orr.w	r3, r3, #7
 8008c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	609a      	str	r2, [r3, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	021a      	lsls	r2, r3, #8
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	609a      	str	r2, [r3, #8]
}
 8008cdc:	bf00      	nop
 8008cde:	371c      	adds	r7, #28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f003 031f 	and.w	r3, r3, #31
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a1a      	ldr	r2, [r3, #32]
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	43db      	mvns	r3, r3
 8008d0a:	401a      	ands	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a1a      	ldr	r2, [r3, #32]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f003 031f 	and.w	r3, r3, #31
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d20:	431a      	orrs	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	621a      	str	r2, [r3, #32]
}
 8008d26:	bf00      	nop
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d101      	bne.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e04a      	b.n	8008de2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a1f      	ldr	r2, [pc, #124]	; (8008df0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d108      	bne.n	8008d88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a12      	ldr	r2, [pc, #72]	; (8008df0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d004      	beq.n	8008db6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db4:	d10c      	bne.n	8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	40012c00 	.word	0x40012c00

08008df4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d101      	bne.n	8008e10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	e078      	b.n	8008f02 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	695b      	ldr	r3, [r3, #20]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e76:	4313      	orrs	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	041b      	lsls	r3, r3, #16
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a20      	ldr	r2, [pc, #128]	; (8008f10 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d106      	bne.n	8008ea2 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a1a      	ldr	r2, [pc, #104]	; (8008f10 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d121      	bne.n	8008ef0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb6:	051b      	lsls	r3, r3, #20
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a0c      	ldr	r2, [pc, #48]	; (8008f10 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d106      	bne.n	8008ef0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	4313      	orrs	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	40012c00 	.word	0x40012c00

08008f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f58:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008f5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b085      	sub	sp, #20
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f8a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008f8e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	43db      	mvns	r3, r3
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008fb8:	b084      	sub	sp, #16
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	f107 0014 	add.w	r0, r7, #20
 8008fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff ffb0 	bl	8008f50 <USB_EnableGlobalInt>

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ffc:	b004      	add	sp, #16
 8008ffe:	4770      	bx	lr

08009000 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009000:	b480      	push	{r7}
 8009002:	b09d      	sub	sp, #116	; 0x74
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	b29b      	uxth	r3, r3
 800901e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009026:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	78db      	ldrb	r3, [r3, #3]
 800902e:	2b03      	cmp	r3, #3
 8009030:	d81f      	bhi.n	8009072 <USB_ActivateEndpoint+0x72>
 8009032:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <USB_ActivateEndpoint+0x38>)
 8009034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009038:	08009049 	.word	0x08009049
 800903c:	08009065 	.word	0x08009065
 8009040:	0800907b 	.word	0x0800907b
 8009044:	08009057 	.word	0x08009057
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009048:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800904c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009050:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009054:	e012      	b.n	800907c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009056:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800905a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800905e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009062:	e00b      	b.n	800907c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009064:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009068:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800906c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009070:	e004      	b.n	800907c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009078:	e000      	b.n	800907c <USB_ActivateEndpoint+0x7c>
      break;
 800907a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	441a      	add	r2, r3
 8009086:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800908a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800908e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800909a:	b29b      	uxth	r3, r3
 800909c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	b21b      	sxth	r3, r3
 80090ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b6:	b21a      	sxth	r2, r3
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	b21b      	sxth	r3, r3
 80090be:	4313      	orrs	r3, r2
 80090c0:	b21b      	sxth	r3, r3
 80090c2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	441a      	add	r2, r3
 80090d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80090d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	7b1b      	ldrb	r3, [r3, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f040 8149 	bne.w	8009384 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	785b      	ldrb	r3, [r3, #1]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 8084 	beq.w	8009204 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	61bb      	str	r3, [r7, #24]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009106:	b29b      	uxth	r3, r3
 8009108:	461a      	mov	r2, r3
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	4413      	add	r3, r2
 800910e:	61bb      	str	r3, [r7, #24]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	00da      	lsls	r2, r3, #3
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	88db      	ldrh	r3, [r3, #6]
 8009124:	085b      	lsrs	r3, r3, #1
 8009126:	b29b      	uxth	r3, r3
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	827b      	strh	r3, [r7, #18]
 800913e:	8a7b      	ldrh	r3, [r7, #18]
 8009140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009144:	2b00      	cmp	r3, #0
 8009146:	d01b      	beq.n	8009180 <USB_ActivateEndpoint+0x180>
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	b29b      	uxth	r3, r3
 8009156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800915a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800915e:	823b      	strh	r3, [r7, #16]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	441a      	add	r2, r3
 800916a:	8a3b      	ldrh	r3, [r7, #16]
 800916c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009178:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800917c:	b29b      	uxth	r3, r3
 800917e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	78db      	ldrb	r3, [r3, #3]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d020      	beq.n	80091ca <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	b29b      	uxth	r3, r3
 8009196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800919a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800919e:	81bb      	strh	r3, [r7, #12]
 80091a0:	89bb      	ldrh	r3, [r7, #12]
 80091a2:	f083 0320 	eor.w	r3, r3, #32
 80091a6:	81bb      	strh	r3, [r7, #12]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	441a      	add	r2, r3
 80091b2:	89bb      	ldrh	r3, [r7, #12]
 80091b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	8013      	strh	r3, [r2, #0]
 80091c8:	e2bf      	b.n	800974a <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091e0:	81fb      	strh	r3, [r7, #14]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	441a      	add	r2, r3
 80091ec:	89fb      	ldrh	r3, [r7, #14]
 80091ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091fe:	b29b      	uxth	r3, r3
 8009200:	8013      	strh	r3, [r2, #0]
 8009202:	e2a2      	b.n	800974a <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	633b      	str	r3, [r7, #48]	; 0x30
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800920e:	b29b      	uxth	r3, r3
 8009210:	461a      	mov	r2, r3
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	4413      	add	r3, r2
 8009216:	633b      	str	r3, [r7, #48]	; 0x30
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	00da      	lsls	r2, r3, #3
 800921e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009220:	4413      	add	r3, r2
 8009222:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	88db      	ldrh	r3, [r3, #6]
 800922c:	085b      	lsrs	r3, r3, #1
 800922e:	b29b      	uxth	r3, r3
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	b29a      	uxth	r2, r3
 8009234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009236:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	62bb      	str	r3, [r7, #40]	; 0x28
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009242:	b29b      	uxth	r3, r3
 8009244:	461a      	mov	r2, r3
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	4413      	add	r3, r2
 800924a:	62bb      	str	r3, [r7, #40]	; 0x28
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	00da      	lsls	r2, r3, #3
 8009252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009254:	4413      	add	r3, r2
 8009256:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d112      	bne.n	800928a <USB_ActivateEndpoint+0x28a>
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	b29b      	uxth	r3, r3
 800926a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800926e:	b29a      	uxth	r2, r3
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	801a      	strh	r2, [r3, #0]
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29b      	uxth	r3, r3
 800927a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800927e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009282:	b29a      	uxth	r2, r3
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	801a      	strh	r2, [r3, #0]
 8009288:	e02f      	b.n	80092ea <USB_ActivateEndpoint+0x2ea>
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	2b3e      	cmp	r3, #62	; 0x3e
 8009290:	d813      	bhi.n	80092ba <USB_ActivateEndpoint+0x2ba>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	085b      	lsrs	r3, r3, #1
 8009298:	66bb      	str	r3, [r7, #104]	; 0x68
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d002      	beq.n	80092ac <USB_ActivateEndpoint+0x2ac>
 80092a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092a8:	3301      	adds	r3, #1
 80092aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80092ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	029b      	lsls	r3, r3, #10
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	801a      	strh	r2, [r3, #0]
 80092b8:	e017      	b.n	80092ea <USB_ActivateEndpoint+0x2ea>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	095b      	lsrs	r3, r3, #5
 80092c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	f003 031f 	and.w	r3, r3, #31
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d102      	bne.n	80092d4 <USB_ActivateEndpoint+0x2d4>
 80092ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092d0:	3b01      	subs	r3, #1
 80092d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80092d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	029b      	lsls	r3, r3, #10
 80092da:	b29b      	uxth	r3, r3
 80092dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80092f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d01b      	beq.n	800933a <USB_ActivateEndpoint+0x33a>
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4413      	add	r3, r2
 800930c:	881b      	ldrh	r3, [r3, #0]
 800930e:	b29b      	uxth	r3, r3
 8009310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009318:	843b      	strh	r3, [r7, #32]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	441a      	add	r2, r3
 8009324:	8c3b      	ldrh	r3, [r7, #32]
 8009326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800932a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800932e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009336:	b29b      	uxth	r3, r3
 8009338:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4413      	add	r3, r2
 8009344:	881b      	ldrh	r3, [r3, #0]
 8009346:	b29b      	uxth	r3, r3
 8009348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800934c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009350:	83fb      	strh	r3, [r7, #30]
 8009352:	8bfb      	ldrh	r3, [r7, #30]
 8009354:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009358:	83fb      	strh	r3, [r7, #30]
 800935a:	8bfb      	ldrh	r3, [r7, #30]
 800935c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009360:	83fb      	strh	r3, [r7, #30]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	441a      	add	r2, r3
 800936c:	8bfb      	ldrh	r3, [r7, #30]
 800936e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800937a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800937e:	b29b      	uxth	r3, r3
 8009380:	8013      	strh	r3, [r2, #0]
 8009382:	e1e2      	b.n	800974a <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	881b      	ldrh	r3, [r3, #0]
 8009390:	b29b      	uxth	r3, r3
 8009392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800939a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	441a      	add	r2, r3
 80093a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80093ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093b4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80093b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093bc:	b29b      	uxth	r3, r3
 80093be:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	663b      	str	r3, [r7, #96]	; 0x60
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	461a      	mov	r2, r3
 80093ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093d0:	4413      	add	r3, r2
 80093d2:	663b      	str	r3, [r7, #96]	; 0x60
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	00da      	lsls	r2, r3, #3
 80093da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093dc:	4413      	add	r3, r2
 80093de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	891b      	ldrh	r3, [r3, #8]
 80093e8:	085b      	lsrs	r3, r3, #1
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	005b      	lsls	r3, r3, #1
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093f2:	801a      	strh	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093fe:	b29b      	uxth	r3, r3
 8009400:	461a      	mov	r2, r3
 8009402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009404:	4413      	add	r3, r2
 8009406:	65bb      	str	r3, [r7, #88]	; 0x58
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	00da      	lsls	r2, r3, #3
 800940e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009410:	4413      	add	r3, r2
 8009412:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009416:	657b      	str	r3, [r7, #84]	; 0x54
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	895b      	ldrh	r3, [r3, #10]
 800941c:	085b      	lsrs	r3, r3, #1
 800941e:	b29b      	uxth	r3, r3
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	b29a      	uxth	r2, r3
 8009424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009426:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f040 80b1 	bne.w	8009594 <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009442:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d01d      	beq.n	800948a <USB_ActivateEndpoint+0x48a>
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	881b      	ldrh	r3, [r3, #0]
 800945a:	b29b      	uxth	r3, r3
 800945c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009464:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	441a      	add	r2, r3
 8009472:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800947a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800947e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009486:	b29b      	uxth	r3, r3
 8009488:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	881b      	ldrh	r3, [r3, #0]
 8009496:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009498:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800949a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d01b      	beq.n	80094da <USB_ActivateEndpoint+0x4da>
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	441a      	add	r2, r3
 80094c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80094c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094f0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	441a      	add	r2, r3
 80094fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80094fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800950a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800950e:	b29b      	uxth	r3, r3
 8009510:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	b29b      	uxth	r3, r3
 8009520:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009528:	873b      	strh	r3, [r7, #56]	; 0x38
 800952a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800952c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009530:	873b      	strh	r3, [r7, #56]	; 0x38
 8009532:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009534:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009538:	873b      	strh	r3, [r7, #56]	; 0x38
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	441a      	add	r2, r3
 8009544:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800954a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800954e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009556:	b29b      	uxth	r3, r3
 8009558:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	b29b      	uxth	r3, r3
 8009568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800956c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009570:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	441a      	add	r2, r3
 800957c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800957e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800958a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800958e:	b29b      	uxth	r3, r3
 8009590:	8013      	strh	r3, [r2, #0]
 8009592:	e0da      	b.n	800974a <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80095a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80095a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d01d      	beq.n	80095ec <USB_ActivateEndpoint+0x5ec>
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	b29b      	uxth	r3, r3
 80095be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	441a      	add	r2, r3
 80095d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80095d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4413      	add	r3, r2
 80095f6:	881b      	ldrh	r3, [r3, #0]
 80095f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80095fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d01d      	beq.n	8009644 <USB_ActivateEndpoint+0x644>
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	b29b      	uxth	r3, r3
 8009616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800961a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800961e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	441a      	add	r2, r3
 800962c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800963c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009640:	b29b      	uxth	r3, r3
 8009642:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	881b      	ldrh	r3, [r3, #0]
 8009650:	b29b      	uxth	r3, r3
 8009652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800965a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	441a      	add	r2, r3
 8009668:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800966c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800967c:	b29b      	uxth	r3, r3
 800967e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	78db      	ldrb	r3, [r3, #3]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d024      	beq.n	80096d2 <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800969a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800969e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80096a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80096a6:	f083 0320 	eor.w	r3, r3, #32
 80096aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	441a      	add	r2, r3
 80096b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80096bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	8013      	strh	r3, [r2, #0]
 80096d0:	e01d      	b.n	800970e <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	441a      	add	r2, r3
 80096f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80096fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800970a:	b29b      	uxth	r3, r3
 800970c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	b29b      	uxth	r3, r3
 800971c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009724:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	441a      	add	r2, r3
 8009732:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800973a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800973e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009746:	b29b      	uxth	r3, r3
 8009748:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800974a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800974e:	4618      	mov	r0, r3
 8009750:	3774      	adds	r7, #116	; 0x74
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop

0800975c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800975c:	b480      	push	{r7}
 800975e:	b08d      	sub	sp, #52	; 0x34
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	7b1b      	ldrb	r3, [r3, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	f040 808e 	bne.w	800988c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	785b      	ldrb	r3, [r3, #1]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d044      	beq.n	8009802 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4413      	add	r3, r2
 8009782:	881b      	ldrh	r3, [r3, #0]
 8009784:	81bb      	strh	r3, [r7, #12]
 8009786:	89bb      	ldrh	r3, [r7, #12]
 8009788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978c:	2b00      	cmp	r3, #0
 800978e:	d01b      	beq.n	80097c8 <USB_DeactivateEndpoint+0x6c>
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	b29b      	uxth	r3, r3
 800979e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a6:	817b      	strh	r3, [r7, #10]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	441a      	add	r2, r3
 80097b2:	897b      	ldrh	r3, [r7, #10]
 80097b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097de:	813b      	strh	r3, [r7, #8]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	441a      	add	r2, r3
 80097ea:	893b      	ldrh	r3, [r7, #8]
 80097ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	8013      	strh	r3, [r2, #0]
 8009800:	e192      	b.n	8009b28 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	827b      	strh	r3, [r7, #18]
 8009810:	8a7b      	ldrh	r3, [r7, #18]
 8009812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d01b      	beq.n	8009852 <USB_DeactivateEndpoint+0xf6>
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	881b      	ldrh	r3, [r3, #0]
 8009826:	b29b      	uxth	r3, r3
 8009828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800982c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009830:	823b      	strh	r3, [r7, #16]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	441a      	add	r2, r3
 800983c:	8a3b      	ldrh	r3, [r7, #16]
 800983e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800984a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800984e:	b29b      	uxth	r3, r3
 8009850:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	881b      	ldrh	r3, [r3, #0]
 800985e:	b29b      	uxth	r3, r3
 8009860:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009868:	81fb      	strh	r3, [r7, #14]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	441a      	add	r2, r3
 8009874:	89fb      	ldrh	r3, [r7, #14]
 8009876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800987a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800987e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009886:	b29b      	uxth	r3, r3
 8009888:	8013      	strh	r3, [r2, #0]
 800988a:	e14d      	b.n	8009b28 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	2b00      	cmp	r3, #0
 8009892:	f040 80a5 	bne.w	80099e0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	843b      	strh	r3, [r7, #32]
 80098a4:	8c3b      	ldrh	r3, [r7, #32]
 80098a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d01b      	beq.n	80098e6 <USB_DeactivateEndpoint+0x18a>
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c4:	83fb      	strh	r3, [r7, #30]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	441a      	add	r2, r3
 80098d0:	8bfb      	ldrh	r3, [r7, #30]
 80098d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	83bb      	strh	r3, [r7, #28]
 80098f4:	8bbb      	ldrh	r3, [r7, #28]
 80098f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d01b      	beq.n	8009936 <USB_DeactivateEndpoint+0x1da>
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	881b      	ldrh	r3, [r3, #0]
 800990a:	b29b      	uxth	r3, r3
 800990c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009914:	837b      	strh	r3, [r7, #26]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	441a      	add	r2, r3
 8009920:	8b7b      	ldrh	r3, [r7, #26]
 8009922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800992a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800992e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009932:	b29b      	uxth	r3, r3
 8009934:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	b29b      	uxth	r3, r3
 8009944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800994c:	833b      	strh	r3, [r7, #24]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	441a      	add	r2, r3
 8009958:	8b3b      	ldrh	r3, [r7, #24]
 800995a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800995e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009966:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800996a:	b29b      	uxth	r3, r3
 800996c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	b29b      	uxth	r3, r3
 800997c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009984:	82fb      	strh	r3, [r7, #22]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	441a      	add	r2, r3
 8009990:	8afb      	ldrh	r3, [r7, #22]
 8009992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800999a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800999e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099bc:	82bb      	strh	r3, [r7, #20]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	441a      	add	r2, r3
 80099c8:	8abb      	ldrh	r3, [r7, #20]
 80099ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099da:	b29b      	uxth	r3, r3
 80099dc:	8013      	strh	r3, [r2, #0]
 80099de:	e0a3      	b.n	8009b28 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80099ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d01b      	beq.n	8009a30 <USB_DeactivateEndpoint+0x2d4>
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	441a      	add	r2, r3
 8009a1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009a3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d01b      	beq.n	8009a80 <USB_DeactivateEndpoint+0x324>
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a5e:	853b      	strh	r3, [r7, #40]	; 0x28
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	441a      	add	r2, r3
 8009a6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	441a      	add	r2, r3
 8009aa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ace:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	441a      	add	r2, r3
 8009ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b06:	847b      	strh	r3, [r7, #34]	; 0x22
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	441a      	add	r2, r3
 8009b12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3734      	adds	r7, #52	; 0x34
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b0a0      	sub	sp, #128	; 0x80
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	f040 81a1 	bne.w	8009e8c <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	699a      	ldr	r2, [r3, #24]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d909      	bls.n	8009b6a <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	699a      	ldr	r2, [r3, #24]
 8009b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b62:	1ad2      	subs	r2, r2, r3
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	619a      	str	r2, [r3, #24]
 8009b68:	e005      	b.n	8009b76 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2200      	movs	r2, #0
 8009b74:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	7b1b      	ldrb	r3, [r3, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d11f      	bne.n	8009bbe <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	6959      	ldr	r1, [r3, #20]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	88da      	ldrh	r2, [r3, #6]
 8009b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fc3f 	bl	800a40e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	613b      	str	r3, [r7, #16]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	613b      	str	r3, [r7, #16]
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	00da      	lsls	r2, r3, #3
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	4413      	add	r3, r2
 8009bae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	801a      	strh	r2, [r3, #0]
 8009bbc:	e141      	b.n	8009e42 <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	881b      	ldrh	r3, [r3, #0]
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d076      	beq.n	8009cc2 <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	785b      	ldrb	r3, [r3, #1]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d153      	bne.n	8009c88 <USB_EPStartXfer+0x152>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	61fb      	str	r3, [r7, #28]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	461a      	mov	r2, r3
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	61fb      	str	r3, [r7, #28]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	00da      	lsls	r2, r3, #3
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c02:	61bb      	str	r3, [r7, #24]
 8009c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d112      	bne.n	8009c30 <USB_EPStartXfer+0xfa>
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	801a      	strh	r2, [r3, #0]
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	881b      	ldrh	r3, [r3, #0]
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	801a      	strh	r2, [r3, #0]
 8009c2e:	e043      	b.n	8009cb8 <USB_EPStartXfer+0x182>
 8009c30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c32:	2b3e      	cmp	r3, #62	; 0x3e
 8009c34:	d811      	bhi.n	8009c5a <USB_EPStartXfer+0x124>
 8009c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c38:	085b      	lsrs	r3, r3, #1
 8009c3a:	677b      	str	r3, [r7, #116]	; 0x74
 8009c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <USB_EPStartXfer+0x116>
 8009c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c48:	3301      	adds	r3, #1
 8009c4a:	677b      	str	r3, [r7, #116]	; 0x74
 8009c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	029b      	lsls	r3, r3, #10
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	801a      	strh	r2, [r3, #0]
 8009c58:	e02e      	b.n	8009cb8 <USB_EPStartXfer+0x182>
 8009c5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c5c:	095b      	lsrs	r3, r3, #5
 8009c5e:	677b      	str	r3, [r7, #116]	; 0x74
 8009c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c62:	f003 031f 	and.w	r3, r3, #31
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d102      	bne.n	8009c70 <USB_EPStartXfer+0x13a>
 8009c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	677b      	str	r3, [r7, #116]	; 0x74
 8009c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	029b      	lsls	r3, r3, #10
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	801a      	strh	r2, [r3, #0]
 8009c86:	e017      	b.n	8009cb8 <USB_EPStartXfer+0x182>
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	785b      	ldrb	r3, [r3, #1]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d113      	bne.n	8009cb8 <USB_EPStartXfer+0x182>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	461a      	mov	r2, r3
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	4413      	add	r3, r2
 8009c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	00da      	lsls	r2, r3, #3
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	4413      	add	r3, r2
 8009caa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009cae:	623b      	str	r3, [r7, #32]
 8009cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	895b      	ldrh	r3, [r3, #10]
 8009cbc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8009cc0:	e075      	b.n	8009dae <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	785b      	ldrb	r3, [r3, #1]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d153      	bne.n	8009d72 <USB_EPStartXfer+0x23c>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cda:	4413      	add	r3, r2
 8009cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	00da      	lsls	r2, r3, #3
 8009ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d112      	bne.n	8009d1a <USB_EPStartXfer+0x1e4>
 8009cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d02:	801a      	strh	r2, [r3, #0]
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	881b      	ldrh	r3, [r3, #0]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d16:	801a      	strh	r2, [r3, #0]
 8009d18:	e045      	b.n	8009da6 <USB_EPStartXfer+0x270>
 8009d1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d1c:	2b3e      	cmp	r3, #62	; 0x3e
 8009d1e:	d811      	bhi.n	8009d44 <USB_EPStartXfer+0x20e>
 8009d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d22:	085b      	lsrs	r3, r3, #1
 8009d24:	673b      	str	r3, [r7, #112]	; 0x70
 8009d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d28:	f003 0301 	and.w	r3, r3, #1
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <USB_EPStartXfer+0x200>
 8009d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d32:	3301      	adds	r3, #1
 8009d34:	673b      	str	r3, [r7, #112]	; 0x70
 8009d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	029b      	lsls	r3, r3, #10
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	801a      	strh	r2, [r3, #0]
 8009d42:	e030      	b.n	8009da6 <USB_EPStartXfer+0x270>
 8009d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d46:	095b      	lsrs	r3, r3, #5
 8009d48:	673b      	str	r3, [r7, #112]	; 0x70
 8009d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d4c:	f003 031f 	and.w	r3, r3, #31
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <USB_EPStartXfer+0x224>
 8009d54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d56:	3b01      	subs	r3, #1
 8009d58:	673b      	str	r3, [r7, #112]	; 0x70
 8009d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	029b      	lsls	r3, r3, #10
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	801a      	strh	r2, [r3, #0]
 8009d70:	e019      	b.n	8009da6 <USB_EPStartXfer+0x270>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	785b      	ldrb	r3, [r3, #1]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d115      	bne.n	8009da6 <USB_EPStartXfer+0x270>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	461a      	mov	r2, r3
 8009d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8a:	4413      	add	r3, r2
 8009d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	00da      	lsls	r2, r3, #3
 8009d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d96:	4413      	add	r3, r2
 8009d98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8009d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	891b      	ldrh	r3, [r3, #8]
 8009daa:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	6959      	ldr	r1, [r3, #20]
 8009db2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fb27 	bl	800a40e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	785b      	ldrb	r3, [r3, #1]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d11c      	bne.n	8009e02 <USB_EPStartXfer+0x2cc>
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dde:	82bb      	strh	r3, [r7, #20]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	441a      	add	r2, r3
 8009dea:	8abb      	ldrh	r3, [r7, #20]
 8009dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009df8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	8013      	strh	r3, [r2, #0]
 8009e00:	e01f      	b.n	8009e42 <USB_EPStartXfer+0x30c>
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	785b      	ldrb	r3, [r3, #1]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d11b      	bne.n	8009e42 <USB_EPStartXfer+0x30c>
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e20:	82fb      	strh	r3, [r7, #22]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	441a      	add	r2, r3
 8009e2c:	8afb      	ldrh	r3, [r7, #22]
 8009e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	4413      	add	r3, r2
 8009e4c:	881b      	ldrh	r3, [r3, #0]
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e58:	817b      	strh	r3, [r7, #10]
 8009e5a:	897b      	ldrh	r3, [r7, #10]
 8009e5c:	f083 0310 	eor.w	r3, r3, #16
 8009e60:	817b      	strh	r3, [r7, #10]
 8009e62:	897b      	ldrh	r3, [r7, #10]
 8009e64:	f083 0320 	eor.w	r3, r3, #32
 8009e68:	817b      	strh	r3, [r7, #10]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	441a      	add	r2, r3
 8009e74:	897b      	ldrh	r3, [r7, #10]
 8009e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	8013      	strh	r3, [r2, #0]
 8009e8a:	e175      	b.n	800a178 <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	699a      	ldr	r2, [r3, #24]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d909      	bls.n	8009eac <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	699a      	ldr	r2, [r3, #24]
 8009ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ea4:	1ad2      	subs	r2, r2, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	619a      	str	r2, [r3, #24]
 8009eaa:	e005      	b.n	8009eb8 <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	7b1b      	ldrb	r3, [r3, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d153      	bne.n	8009f68 <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	461a      	mov	r2, r3
 8009ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ed0:	4413      	add	r3, r2
 8009ed2:	643b      	str	r3, [r7, #64]	; 0x40
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	00da      	lsls	r2, r3, #3
 8009eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009edc:	4413      	add	r3, r2
 8009ede:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d112      	bne.n	8009f10 <USB_EPStartXfer+0x3da>
 8009eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef8:	801a      	strh	r2, [r3, #0]
 8009efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009efc:	881b      	ldrh	r3, [r3, #0]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0c:	801a      	strh	r2, [r3, #0]
 8009f0e:	e10f      	b.n	800a130 <USB_EPStartXfer+0x5fa>
 8009f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f12:	2b3e      	cmp	r3, #62	; 0x3e
 8009f14:	d811      	bhi.n	8009f3a <USB_EPStartXfer+0x404>
 8009f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f18:	085b      	lsrs	r3, r3, #1
 8009f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d002      	beq.n	8009f2c <USB_EPStartXfer+0x3f6>
 8009f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f28:	3301      	adds	r3, #1
 8009f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	029b      	lsls	r3, r3, #10
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f36:	801a      	strh	r2, [r3, #0]
 8009f38:	e0fa      	b.n	800a130 <USB_EPStartXfer+0x5fa>
 8009f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f3c:	095b      	lsrs	r3, r3, #5
 8009f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f42:	f003 031f 	and.w	r3, r3, #31
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d102      	bne.n	8009f50 <USB_EPStartXfer+0x41a>
 8009f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	029b      	lsls	r3, r3, #10
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f64:	801a      	strh	r2, [r3, #0]
 8009f66:	e0e3      	b.n	800a130 <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	785b      	ldrb	r3, [r3, #1]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d153      	bne.n	800a018 <USB_EPStartXfer+0x4e2>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f80:	4413      	add	r3, r2
 8009f82:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	00da      	lsls	r2, r3, #3
 8009f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f92:	657b      	str	r3, [r7, #84]	; 0x54
 8009f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d112      	bne.n	8009fc0 <USB_EPStartXfer+0x48a>
 8009f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fa8:	801a      	strh	r2, [r3, #0]
 8009faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fac:	881b      	ldrh	r3, [r3, #0]
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fbc:	801a      	strh	r2, [r3, #0]
 8009fbe:	e045      	b.n	800a04c <USB_EPStartXfer+0x516>
 8009fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8009fc4:	d811      	bhi.n	8009fea <USB_EPStartXfer+0x4b4>
 8009fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fc8:	085b      	lsrs	r3, r3, #1
 8009fca:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d002      	beq.n	8009fdc <USB_EPStartXfer+0x4a6>
 8009fd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fd8:	3301      	adds	r3, #1
 8009fda:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	029b      	lsls	r3, r3, #10
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fe6:	801a      	strh	r2, [r3, #0]
 8009fe8:	e030      	b.n	800a04c <USB_EPStartXfer+0x516>
 8009fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fec:	095b      	lsrs	r3, r3, #5
 8009fee:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ff2:	f003 031f 	and.w	r3, r3, #31
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d102      	bne.n	800a000 <USB_EPStartXfer+0x4ca>
 8009ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 800a000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a002:	b29b      	uxth	r3, r3
 800a004:	029b      	lsls	r3, r3, #10
 800a006:	b29b      	uxth	r3, r3
 800a008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a00c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a010:	b29a      	uxth	r2, r3
 800a012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a014:	801a      	strh	r2, [r3, #0]
 800a016:	e019      	b.n	800a04c <USB_EPStartXfer+0x516>
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	785b      	ldrb	r3, [r3, #1]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d115      	bne.n	800a04c <USB_EPStartXfer+0x516>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	663b      	str	r3, [r7, #96]	; 0x60
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	461a      	mov	r2, r3
 800a02e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a030:	4413      	add	r3, r2
 800a032:	663b      	str	r3, [r7, #96]	; 0x60
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	00da      	lsls	r2, r3, #3
 800a03a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a03c:	4413      	add	r3, r2
 800a03e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a042:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a046:	b29a      	uxth	r2, r3
 800a048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a04a:	801a      	strh	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	653b      	str	r3, [r7, #80]	; 0x50
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	785b      	ldrb	r3, [r3, #1]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d153      	bne.n	800a100 <USB_EPStartXfer+0x5ca>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a062:	b29b      	uxth	r3, r3
 800a064:	461a      	mov	r2, r3
 800a066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a068:	4413      	add	r3, r2
 800a06a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	00da      	lsls	r2, r3, #3
 800a072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a074:	4413      	add	r3, r2
 800a076:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a07a:	647b      	str	r3, [r7, #68]	; 0x44
 800a07c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d112      	bne.n	800a0a8 <USB_EPStartXfer+0x572>
 800a082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a084:	881b      	ldrh	r3, [r3, #0]
 800a086:	b29b      	uxth	r3, r3
 800a088:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a090:	801a      	strh	r2, [r3, #0]
 800a092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a094:	881b      	ldrh	r3, [r3, #0]
 800a096:	b29b      	uxth	r3, r3
 800a098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a09c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0a4:	801a      	strh	r2, [r3, #0]
 800a0a6:	e043      	b.n	800a130 <USB_EPStartXfer+0x5fa>
 800a0a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0aa:	2b3e      	cmp	r3, #62	; 0x3e
 800a0ac:	d811      	bhi.n	800a0d2 <USB_EPStartXfer+0x59c>
 800a0ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0b0:	085b      	lsrs	r3, r3, #1
 800a0b2:	667b      	str	r3, [r7, #100]	; 0x64
 800a0b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0b6:	f003 0301 	and.w	r3, r3, #1
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <USB_EPStartXfer+0x58e>
 800a0be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	667b      	str	r3, [r7, #100]	; 0x64
 800a0c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	029b      	lsls	r3, r3, #10
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ce:	801a      	strh	r2, [r3, #0]
 800a0d0:	e02e      	b.n	800a130 <USB_EPStartXfer+0x5fa>
 800a0d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0d4:	095b      	lsrs	r3, r3, #5
 800a0d6:	667b      	str	r3, [r7, #100]	; 0x64
 800a0d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0da:	f003 031f 	and.w	r3, r3, #31
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d102      	bne.n	800a0e8 <USB_EPStartXfer+0x5b2>
 800a0e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	667b      	str	r3, [r7, #100]	; 0x64
 800a0e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	029b      	lsls	r3, r3, #10
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0fc:	801a      	strh	r2, [r3, #0]
 800a0fe:	e017      	b.n	800a130 <USB_EPStartXfer+0x5fa>
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	785b      	ldrb	r3, [r3, #1]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d113      	bne.n	800a130 <USB_EPStartXfer+0x5fa>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a10e:	b29b      	uxth	r3, r3
 800a110:	461a      	mov	r2, r3
 800a112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a114:	4413      	add	r3, r2
 800a116:	653b      	str	r3, [r7, #80]	; 0x50
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	00da      	lsls	r2, r3, #3
 800a11e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a120:	4413      	add	r3, r2
 800a122:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a126:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a12e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	881b      	ldrh	r3, [r3, #0]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a146:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a148:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a14a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a14e:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a150:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a152:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a156:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	441a      	add	r2, r3
 800a162:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a16c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a174:	b29b      	uxth	r3, r3
 800a176:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3780      	adds	r7, #128	; 0x80
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a182:	b480      	push	{r7}
 800a184:	b085      	sub	sp, #20
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	785b      	ldrb	r3, [r3, #1]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d020      	beq.n	800a1d6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4413      	add	r3, r2
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1aa:	81bb      	strh	r3, [r7, #12]
 800a1ac:	89bb      	ldrh	r3, [r7, #12]
 800a1ae:	f083 0310 	eor.w	r3, r3, #16
 800a1b2:	81bb      	strh	r3, [r7, #12]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	441a      	add	r2, r3
 800a1be:	89bb      	ldrh	r3, [r7, #12]
 800a1c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	8013      	strh	r3, [r2, #0]
 800a1d4:	e01f      	b.n	800a216 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	881b      	ldrh	r3, [r3, #0]
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ec:	81fb      	strh	r3, [r7, #14]
 800a1ee:	89fb      	ldrh	r3, [r7, #14]
 800a1f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1f4:	81fb      	strh	r3, [r7, #14]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	441a      	add	r2, r3
 800a200:	89fb      	ldrh	r3, [r7, #14]
 800a202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a20a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a20e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a212:	b29b      	uxth	r3, r3
 800a214:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a224:	b480      	push	{r7}
 800a226:	b087      	sub	sp, #28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	7b1b      	ldrb	r3, [r3, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	f040 809d 	bne.w	800a372 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	785b      	ldrb	r3, [r3, #1]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d04c      	beq.n	800a2da <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	881b      	ldrh	r3, [r3, #0]
 800a24c:	823b      	strh	r3, [r7, #16]
 800a24e:	8a3b      	ldrh	r3, [r7, #16]
 800a250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a254:	2b00      	cmp	r3, #0
 800a256:	d01b      	beq.n	800a290 <USB_EPClearStall+0x6c>
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	4413      	add	r3, r2
 800a262:	881b      	ldrh	r3, [r3, #0]
 800a264:	b29b      	uxth	r3, r3
 800a266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a26a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a26e:	81fb      	strh	r3, [r7, #14]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	441a      	add	r2, r3
 800a27a:	89fb      	ldrh	r3, [r7, #14]
 800a27c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	78db      	ldrb	r3, [r3, #3]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d06c      	beq.n	800a372 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	881b      	ldrh	r3, [r3, #0]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ae:	81bb      	strh	r3, [r7, #12]
 800a2b0:	89bb      	ldrh	r3, [r7, #12]
 800a2b2:	f083 0320 	eor.w	r3, r3, #32
 800a2b6:	81bb      	strh	r3, [r7, #12]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	441a      	add	r2, r3
 800a2c2:	89bb      	ldrh	r3, [r7, #12]
 800a2c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	8013      	strh	r3, [r2, #0]
 800a2d8:	e04b      	b.n	800a372 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	82fb      	strh	r3, [r7, #22]
 800a2e8:	8afb      	ldrh	r3, [r7, #22]
 800a2ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d01b      	beq.n	800a32a <USB_EPClearStall+0x106>
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a308:	82bb      	strh	r3, [r7, #20]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	441a      	add	r2, r3
 800a314:	8abb      	ldrh	r3, [r7, #20]
 800a316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a31a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a31e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a326:	b29b      	uxth	r3, r3
 800a328:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	881b      	ldrh	r3, [r3, #0]
 800a336:	b29b      	uxth	r3, r3
 800a338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a33c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a340:	827b      	strh	r3, [r7, #18]
 800a342:	8a7b      	ldrh	r3, [r7, #18]
 800a344:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a348:	827b      	strh	r3, [r7, #18]
 800a34a:	8a7b      	ldrh	r3, [r7, #18]
 800a34c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a350:	827b      	strh	r3, [r7, #18]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	441a      	add	r2, r3
 800a35c:	8a7b      	ldrh	r3, [r7, #18]
 800a35e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a36a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a36e:	b29b      	uxth	r3, r3
 800a370:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	371c      	adds	r7, #28
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a38c:	78fb      	ldrb	r3, [r7, #3]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d103      	bne.n	800a39a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2280      	movs	r2, #128	; 0x80
 800a396:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	370c      	adds	r7, #12
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b085      	sub	sp, #20
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3714      	adds	r7, #20
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b083      	sub	sp, #12
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a40e:	b480      	push	{r7}
 800a410:	b08d      	sub	sp, #52	; 0x34
 800a412:	af00      	add	r7, sp, #0
 800a414:	60f8      	str	r0, [r7, #12]
 800a416:	60b9      	str	r1, [r7, #8]
 800a418:	4611      	mov	r1, r2
 800a41a:	461a      	mov	r2, r3
 800a41c:	460b      	mov	r3, r1
 800a41e:	80fb      	strh	r3, [r7, #6]
 800a420:	4613      	mov	r3, r2
 800a422:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a424:	88bb      	ldrh	r3, [r7, #4]
 800a426:	3301      	adds	r3, #1
 800a428:	085b      	lsrs	r3, r3, #1
 800a42a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a434:	88fa      	ldrh	r2, [r7, #6]
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a43e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a444:	e01b      	b.n	800a47e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800a446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	3301      	adds	r3, #1
 800a450:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	b29b      	uxth	r3, r3
 800a458:	021b      	lsls	r3, r3, #8
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	461a      	mov	r2, r3
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	4313      	orrs	r3, r2
 800a462:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	b29a      	uxth	r2, r3
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	3302      	adds	r3, #2
 800a470:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	3301      	adds	r3, #1
 800a476:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47a:	3b01      	subs	r3, #1
 800a47c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1e0      	bne.n	800a446 <USB_WritePMA+0x38>
  }
}
 800a484:	bf00      	nop
 800a486:	3734      	adds	r7, #52	; 0x34
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a490:	b480      	push	{r7}
 800a492:	b08b      	sub	sp, #44	; 0x2c
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	4611      	mov	r1, r2
 800a49c:	461a      	mov	r2, r3
 800a49e:	460b      	mov	r3, r1
 800a4a0:	80fb      	strh	r3, [r7, #6]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a4a6:	88bb      	ldrh	r3, [r7, #4]
 800a4a8:	085b      	lsrs	r3, r3, #1
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a4b6:	88fa      	ldrh	r2, [r7, #6]
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4c0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4c6:	e018      	b.n	800a4fa <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a4d0:	6a3b      	ldr	r3, [r7, #32]
 800a4d2:	3302      	adds	r3, #2
 800a4d4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	0a1b      	lsrs	r3, r3, #8
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1e3      	bne.n	800a4c8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a500:	88bb      	ldrh	r3, [r7, #4]
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	b29b      	uxth	r3, r3
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d007      	beq.n	800a51c <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800a50c:	6a3b      	ldr	r3, [r7, #32]
 800a50e:	881b      	ldrh	r3, [r3, #0]
 800a510:	b29b      	uxth	r3, r3
 800a512:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	b2da      	uxtb	r2, r3
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	701a      	strb	r2, [r3, #0]
  }
}
 800a51c:	bf00      	nop
 800a51e:	372c      	adds	r7, #44	; 0x2c
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	460b      	mov	r3, r1
 800a532:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a534:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a538:	f009 f8cc 	bl	80136d4 <USBD_static_malloc>
 800a53c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d105      	bne.n	800a550 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a54c:	2302      	movs	r3, #2
 800a54e:	e066      	b.n	800a61e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	7c1b      	ldrb	r3, [r3, #16]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d119      	bne.n	800a594 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a560:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a564:	2202      	movs	r2, #2
 800a566:	2181      	movs	r1, #129	; 0x81
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f008 ff96 	bl	801349a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a574:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a578:	2202      	movs	r2, #2
 800a57a:	2101      	movs	r1, #1
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f008 ff8c 	bl	801349a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2210      	movs	r2, #16
 800a58e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a592:	e016      	b.n	800a5c2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a594:	2340      	movs	r3, #64	; 0x40
 800a596:	2202      	movs	r2, #2
 800a598:	2181      	movs	r1, #129	; 0x81
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f008 ff7d 	bl	801349a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a5a6:	2340      	movs	r3, #64	; 0x40
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f008 ff74 	bl	801349a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2210      	movs	r2, #16
 800a5be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a5c2:	2308      	movs	r3, #8
 800a5c4:	2203      	movs	r2, #3
 800a5c6:	2182      	movs	r1, #130	; 0x82
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f008 ff66 	bl	801349a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	7c1b      	ldrb	r3, [r3, #16]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d109      	bne.n	800a60c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a602:	2101      	movs	r1, #1
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f009 f831 	bl	801366c <USBD_LL_PrepareReceive>
 800a60a:	e007      	b.n	800a61c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a612:	2340      	movs	r3, #64	; 0x40
 800a614:	2101      	movs	r1, #1
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f009 f828 	bl	801366c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b082      	sub	sp, #8
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	460b      	mov	r3, r1
 800a630:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a632:	2181      	movs	r1, #129	; 0x81
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f008 ff56 	bl	80134e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a640:	2101      	movs	r1, #1
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f008 ff4f 	bl	80134e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a650:	2182      	movs	r1, #130	; 0x82
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f008 ff47 	bl	80134e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00e      	beq.n	800a690 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a682:	4618      	mov	r0, r3
 800a684:	f009 f834 	bl	80136f0 <USBD_static_free>
    pdev->pClassData = NULL;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
	...

0800a69c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d101      	bne.n	800a6c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e0af      	b.n	800a824 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d03f      	beq.n	800a750 <USBD_CDC_Setup+0xb4>
 800a6d0:	2b20      	cmp	r3, #32
 800a6d2:	f040 809f 	bne.w	800a814 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	88db      	ldrh	r3, [r3, #6]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d02e      	beq.n	800a73c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	b25b      	sxtb	r3, r3
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	da16      	bge.n	800a716 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a6f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	88d2      	ldrh	r2, [r2, #6]
 800a6fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	88db      	ldrh	r3, [r3, #6]
 800a700:	2b07      	cmp	r3, #7
 800a702:	bf28      	it	cs
 800a704:	2307      	movcs	r3, #7
 800a706:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	89fa      	ldrh	r2, [r7, #14]
 800a70c:	4619      	mov	r1, r3
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f001 fa94 	bl	800bc3c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a714:	e085      	b.n	800a822 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	785a      	ldrb	r2, [r3, #1]
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	88db      	ldrh	r3, [r3, #6]
 800a724:	b2da      	uxtb	r2, r3
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a72c:	6939      	ldr	r1, [r7, #16]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	88db      	ldrh	r3, [r3, #6]
 800a732:	461a      	mov	r2, r3
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f001 faad 	bl	800bc94 <USBD_CtlPrepareRx>
      break;
 800a73a:	e072      	b.n	800a822 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	7850      	ldrb	r0, [r2, #1]
 800a748:	2200      	movs	r2, #0
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	4798      	blx	r3
      break;
 800a74e:	e068      	b.n	800a822 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	785b      	ldrb	r3, [r3, #1]
 800a754:	2b0b      	cmp	r3, #11
 800a756:	d852      	bhi.n	800a7fe <USBD_CDC_Setup+0x162>
 800a758:	a201      	add	r2, pc, #4	; (adr r2, 800a760 <USBD_CDC_Setup+0xc4>)
 800a75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75e:	bf00      	nop
 800a760:	0800a791 	.word	0x0800a791
 800a764:	0800a80d 	.word	0x0800a80d
 800a768:	0800a7ff 	.word	0x0800a7ff
 800a76c:	0800a7ff 	.word	0x0800a7ff
 800a770:	0800a7ff 	.word	0x0800a7ff
 800a774:	0800a7ff 	.word	0x0800a7ff
 800a778:	0800a7ff 	.word	0x0800a7ff
 800a77c:	0800a7ff 	.word	0x0800a7ff
 800a780:	0800a7ff 	.word	0x0800a7ff
 800a784:	0800a7ff 	.word	0x0800a7ff
 800a788:	0800a7bb 	.word	0x0800a7bb
 800a78c:	0800a7e5 	.word	0x0800a7e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d107      	bne.n	800a7ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a79c:	f107 030a 	add.w	r3, r7, #10
 800a7a0:	2202      	movs	r2, #2
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 fa49 	bl	800bc3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7aa:	e032      	b.n	800a812 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f001 f9d3 	bl	800bb5a <USBD_CtlError>
            ret = USBD_FAIL;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	75fb      	strb	r3, [r7, #23]
          break;
 800a7b8:	e02b      	b.n	800a812 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	d107      	bne.n	800a7d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a7c6:	f107 030d 	add.w	r3, r7, #13
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f001 fa34 	bl	800bc3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7d4:	e01d      	b.n	800a812 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 f9be 	bl	800bb5a <USBD_CtlError>
            ret = USBD_FAIL;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	75fb      	strb	r3, [r7, #23]
          break;
 800a7e2:	e016      	b.n	800a812 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b03      	cmp	r3, #3
 800a7ee:	d00f      	beq.n	800a810 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f001 f9b1 	bl	800bb5a <USBD_CtlError>
            ret = USBD_FAIL;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a7fc:	e008      	b.n	800a810 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f001 f9aa 	bl	800bb5a <USBD_CtlError>
          ret = USBD_FAIL;
 800a806:	2303      	movs	r3, #3
 800a808:	75fb      	strb	r3, [r7, #23]
          break;
 800a80a:	e002      	b.n	800a812 <USBD_CDC_Setup+0x176>
          break;
 800a80c:	bf00      	nop
 800a80e:	e008      	b.n	800a822 <USBD_CDC_Setup+0x186>
          break;
 800a810:	bf00      	nop
      }
      break;
 800a812:	e006      	b.n	800a822 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f001 f99f 	bl	800bb5a <USBD_CtlError>
      ret = USBD_FAIL;
 800a81c:	2303      	movs	r3, #3
 800a81e:	75fb      	strb	r3, [r7, #23]
      break;
 800a820:	bf00      	nop
  }

  return (uint8_t)ret;
 800a822:	7dfb      	ldrb	r3, [r7, #23]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a83e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e04c      	b.n	800a8e8 <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a854:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a856:	78fa      	ldrb	r2, [r7, #3]
 800a858:	6879      	ldr	r1, [r7, #4]
 800a85a:	4613      	mov	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	440b      	add	r3, r1
 800a864:	3318      	adds	r3, #24
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d026      	beq.n	800a8ba <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a86c:	78fa      	ldrb	r2, [r7, #3]
 800a86e:	6879      	ldr	r1, [r7, #4]
 800a870:	4613      	mov	r3, r2
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4413      	add	r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	440b      	add	r3, r1
 800a87a:	3318      	adds	r3, #24
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	78fa      	ldrb	r2, [r7, #3]
 800a880:	68f9      	ldr	r1, [r7, #12]
 800a882:	0152      	lsls	r2, r2, #5
 800a884:	440a      	add	r2, r1
 800a886:	3238      	adds	r2, #56	; 0x38
 800a888:	6812      	ldr	r2, [r2, #0]
 800a88a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a88e:	fb02 f201 	mul.w	r2, r2, r1
 800a892:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a894:	2b00      	cmp	r3, #0
 800a896:	d110      	bne.n	800a8ba <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a898:	78fa      	ldrb	r2, [r7, #3]
 800a89a:	6879      	ldr	r1, [r7, #4]
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	440b      	add	r3, r1
 800a8a6:	3318      	adds	r3, #24
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a8ac:	78f9      	ldrb	r1, [r7, #3]
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f008 feb9 	bl	801362a <USBD_LL_Transmit>
 800a8b8:	e015      	b.n	800a8e6 <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00b      	beq.n	800a8e6 <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a8e2:	78fa      	ldrb	r2, [r7, #3]
 800a8e4:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a902:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d101      	bne.n	800a912 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a90e:	2303      	movs	r3, #3
 800a910:	e015      	b.n	800a93e <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a912:	78fb      	ldrb	r3, [r7, #3]
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f008 fec9 	bl	80136ae <USBD_LL_GetRxDataSize>
 800a91c:	4602      	mov	r2, r0
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a938:	4611      	mov	r1, r2
 800a93a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b084      	sub	sp, #16
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a954:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e01b      	b.n	800a998 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d015      	beq.n	800a996 <USBD_CDC_EP0_RxReady+0x50>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a970:	2bff      	cmp	r3, #255	; 0xff
 800a972:	d010      	beq.n	800a996 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a982:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a98a:	b292      	uxth	r2, r2
 800a98c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	22ff      	movs	r2, #255	; 0xff
 800a992:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2243      	movs	r2, #67	; 0x43
 800a9ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a9ae:	4b03      	ldr	r3, [pc, #12]	; (800a9bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	200000b0 	.word	0x200000b0

0800a9c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2243      	movs	r2, #67	; 0x43
 800a9cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a9ce:	4b03      	ldr	r3, [pc, #12]	; (800a9dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	2000006c 	.word	0x2000006c

0800a9e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2243      	movs	r2, #67	; 0x43
 800a9ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a9ee:	4b03      	ldr	r3, [pc, #12]	; (800a9fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	200000f4 	.word	0x200000f4

0800aa00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	220a      	movs	r2, #10
 800aa0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aa0e:	4b03      	ldr	r3, [pc, #12]	; (800aa1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	20000028 	.word	0x20000028

0800aa20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d101      	bne.n	800aa34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aa30:	2303      	movs	r3, #3
 800aa32:	e004      	b.n	800aa3e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	370c      	adds	r7, #12
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b087      	sub	sp, #28
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	60b9      	str	r1, [r7, #8]
 800aa54:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa5c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800aa64:	2303      	movs	r3, #3
 800aa66:	e008      	b.n	800aa7a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	371c      	adds	r7, #28
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b085      	sub	sp, #20
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa96:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d101      	bne.n	800aaa2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e004      	b.n	800aaac <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aac6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800aac8:	2301      	movs	r3, #1
 800aaca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aad6:	2303      	movs	r3, #3
 800aad8:	e01a      	b.n	800ab10 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d114      	bne.n	800ab0e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ab02:	2181      	movs	r1, #129	; 0x81
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f008 fd90 	bl	801362a <USBD_LL_Transmit>

    ret = USBD_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ab0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ab32:	2303      	movs	r3, #3
 800ab34:	e016      	b.n	800ab64 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	7c1b      	ldrb	r3, [r3, #16]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d109      	bne.n	800ab52 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab48:	2101      	movs	r1, #1
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f008 fd8e 	bl	801366c <USBD_LL_PrepareReceive>
 800ab50:	e007      	b.n	800ab62 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab58:	2340      	movs	r3, #64	; 0x40
 800ab5a:	2101      	movs	r1, #1
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f008 fd85 	bl	801366c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b086      	sub	sp, #24
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	4613      	mov	r3, r2
 800ab78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ab80:	2303      	movs	r3, #3
 800ab82:	e01f      	b.n	800abc4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2201      	movs	r2, #1
 800abae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	79fa      	ldrb	r2, [r7, #7]
 800abb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f008 fbf1 	bl	80133a0 <USBD_LL_Init>
 800abbe:	4603      	mov	r3, r0
 800abc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800abc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abd6:	2300      	movs	r3, #0
 800abd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d101      	bne.n	800abe4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e016      	b.n	800ac12 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00b      	beq.n	800ac10 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac00:	f107 020e 	add.w	r2, r7, #14
 800ac04:	4610      	mov	r0, r2
 800ac06:	4798      	blx	r3
 800ac08:	4602      	mov	r2, r0
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f008 fc1e 	bl	8013464 <USBD_LL_Start>
 800ac28:	4603      	mov	r3, r0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b083      	sub	sp, #12
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ac54:	2303      	movs	r3, #3
 800ac56:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d009      	beq.n	800ac76 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	78fa      	ldrb	r2, [r7, #3]
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	4798      	blx	r3
 800ac72:	4603      	mov	r3, r0
 800ac74:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d007      	beq.n	800aca6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	78fa      	ldrb	r2, [r7, #3]
 800aca0:	4611      	mov	r1, r2
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	4798      	blx	r3
  }

  return USBD_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 ff0f 	bl	800bae6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800acd6:	461a      	mov	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ace4:	f003 031f 	and.w	r3, r3, #31
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d00e      	beq.n	800ad0a <USBD_LL_SetupStage+0x5a>
 800acec:	2b01      	cmp	r3, #1
 800acee:	d302      	bcc.n	800acf6 <USBD_LL_SetupStage+0x46>
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d014      	beq.n	800ad1e <USBD_LL_SetupStage+0x6e>
 800acf4:	e01d      	b.n	800ad32 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acfc:	4619      	mov	r1, r3
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f9ee 	bl	800b0e0 <USBD_StdDevReq>
 800ad04:	4603      	mov	r3, r0
 800ad06:	73fb      	strb	r3, [r7, #15]
      break;
 800ad08:	e020      	b.n	800ad4c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad10:	4619      	mov	r1, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fa52 	bl	800b1bc <USBD_StdItfReq>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad1c:	e016      	b.n	800ad4c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad24:	4619      	mov	r1, r3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fa8f 	bl	800b24a <USBD_StdEPReq>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad30:	e00c      	b.n	800ad4c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ad38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	4619      	mov	r1, r3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f008 fbef 	bl	8013524 <USBD_LL_StallEP>
 800ad46:	4603      	mov	r3, r0
 800ad48:	73fb      	strb	r3, [r7, #15]
      break;
 800ad4a:	bf00      	nop
  }

  return ret;
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b086      	sub	sp, #24
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	460b      	mov	r3, r1
 800ad60:	607a      	str	r2, [r7, #4]
 800ad62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ad64:	7afb      	ldrb	r3, [r7, #11]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d138      	bne.n	800addc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ad70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad78:	2b03      	cmp	r3, #3
 800ad7a:	d14a      	bne.n	800ae12 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	689a      	ldr	r2, [r3, #8]
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d913      	bls.n	800adb0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	689a      	ldr	r2, [r3, #8]
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	1ad2      	subs	r2, r2, r3
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	68da      	ldr	r2, [r3, #12]
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	bf28      	it	cs
 800ada2:	4613      	movcs	r3, r2
 800ada4:	461a      	mov	r2, r3
 800ada6:	6879      	ldr	r1, [r7, #4]
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 ff90 	bl	800bcce <USBD_CtlContinueRx>
 800adae:	e030      	b.n	800ae12 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d10b      	bne.n	800add4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d005      	beq.n	800add4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 ff8b 	bl	800bcf0 <USBD_CtlSendStatus>
 800adda:	e01a      	b.n	800ae12 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	2b03      	cmp	r3, #3
 800ade6:	d114      	bne.n	800ae12 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00e      	beq.n	800ae12 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	7afa      	ldrb	r2, [r7, #11]
 800adfe:	4611      	mov	r1, r2
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	4798      	blx	r3
 800ae04:	4603      	mov	r3, r0
 800ae06:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ae08:	7dfb      	ldrb	r3, [r7, #23]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ae0e:	7dfb      	ldrb	r3, [r7, #23]
 800ae10:	e000      	b.n	800ae14 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	460b      	mov	r3, r1
 800ae26:	607a      	str	r2, [r7, #4]
 800ae28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ae2a:	7afb      	ldrb	r3, [r7, #11]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d16b      	bne.n	800af08 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	3314      	adds	r3, #20
 800ae34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d156      	bne.n	800aeee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	689a      	ldr	r2, [r3, #8]
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d914      	bls.n	800ae76 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	689a      	ldr	r2, [r3, #8]
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	1ad2      	subs	r2, r2, r3
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	6879      	ldr	r1, [r7, #4]
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 ff05 	bl	800bc72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae68:	2300      	movs	r3, #0
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f008 fbfc 	bl	801366c <USBD_LL_PrepareReceive>
 800ae74:	e03b      	b.n	800aeee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	68da      	ldr	r2, [r3, #12]
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d11c      	bne.n	800aebc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d316      	bcc.n	800aebc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	685a      	ldr	r2, [r3, #4]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d20f      	bcs.n	800aebc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	2100      	movs	r1, #0
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f000 fee6 	bl	800bc72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aeae:	2300      	movs	r3, #0
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f008 fbd9 	bl	801366c <USBD_LL_PrepareReceive>
 800aeba:	e018      	b.n	800aeee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b03      	cmp	r3, #3
 800aec6:	d10b      	bne.n	800aee0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d005      	beq.n	800aee0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aee0:	2180      	movs	r1, #128	; 0x80
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f008 fb1e 	bl	8013524 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f000 ff14 	bl	800bd16 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d122      	bne.n	800af3e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aef8:	68f8      	ldr	r0, [r7, #12]
 800aefa:	f7ff fe9a 	bl	800ac32 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800af06:	e01a      	b.n	800af3e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2b03      	cmp	r3, #3
 800af12:	d114      	bne.n	800af3e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af1a:	695b      	ldr	r3, [r3, #20]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00e      	beq.n	800af3e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	7afa      	ldrb	r2, [r7, #11]
 800af2a:	4611      	mov	r1, r2
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	4798      	blx	r3
 800af30:	4603      	mov	r3, r0
 800af32:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800af34:	7dfb      	ldrb	r3, [r7, #23]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d001      	beq.n	800af3e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800af3a:	7dfb      	ldrb	r3, [r7, #23]
 800af3c:	e000      	b.n	800af40 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af74:	2b00      	cmp	r3, #0
 800af76:	d101      	bne.n	800af7c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800af78:	2303      	movs	r3, #3
 800af7a:	e02f      	b.n	800afdc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00f      	beq.n	800afa6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d009      	beq.n	800afa6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	6852      	ldr	r2, [r2, #4]
 800af9e:	b2d2      	uxtb	r2, r2
 800afa0:	4611      	mov	r1, r2
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afa6:	2340      	movs	r3, #64	; 0x40
 800afa8:	2200      	movs	r2, #0
 800afaa:	2100      	movs	r1, #0
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f008 fa74 	bl	801349a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2240      	movs	r2, #64	; 0x40
 800afbe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afc2:	2340      	movs	r3, #64	; 0x40
 800afc4:	2200      	movs	r2, #0
 800afc6:	2180      	movs	r1, #128	; 0x80
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f008 fa66 	bl	801349a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2201      	movs	r2, #1
 800afd2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2240      	movs	r2, #64	; 0x40
 800afd8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	460b      	mov	r3, r1
 800afee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	78fa      	ldrb	r2, [r7, #3]
 800aff4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b012:	b2da      	uxtb	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2204      	movs	r2, #4
 800b01e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b04      	cmp	r3, #4
 800b042:	d106      	bne.n	800b052 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b072:	2303      	movs	r3, #3
 800b074:	e012      	b.n	800b09c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b03      	cmp	r3, #3
 800b080:	d10b      	bne.n	800b09a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b088:	69db      	ldr	r3, [r3, #28]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d005      	beq.n	800b09a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b087      	sub	sp, #28
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b0c2:	8a3b      	ldrh	r3, [r7, #16]
 800b0c4:	021b      	lsls	r3, r3, #8
 800b0c6:	b21a      	sxth	r2, r3
 800b0c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	b21b      	sxth	r3, r3
 800b0d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b0d2:	89fb      	ldrh	r3, [r7, #14]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	371c      	adds	r7, #28
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0f6:	2b20      	cmp	r3, #32
 800b0f8:	d004      	beq.n	800b104 <USBD_StdDevReq+0x24>
 800b0fa:	2b40      	cmp	r3, #64	; 0x40
 800b0fc:	d002      	beq.n	800b104 <USBD_StdDevReq+0x24>
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00a      	beq.n	800b118 <USBD_StdDevReq+0x38>
 800b102:	e050      	b.n	800b1a6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	4798      	blx	r3
 800b112:	4603      	mov	r3, r0
 800b114:	73fb      	strb	r3, [r7, #15]
      break;
 800b116:	e04b      	b.n	800b1b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	785b      	ldrb	r3, [r3, #1]
 800b11c:	2b09      	cmp	r3, #9
 800b11e:	d83c      	bhi.n	800b19a <USBD_StdDevReq+0xba>
 800b120:	a201      	add	r2, pc, #4	; (adr r2, 800b128 <USBD_StdDevReq+0x48>)
 800b122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b126:	bf00      	nop
 800b128:	0800b17d 	.word	0x0800b17d
 800b12c:	0800b191 	.word	0x0800b191
 800b130:	0800b19b 	.word	0x0800b19b
 800b134:	0800b187 	.word	0x0800b187
 800b138:	0800b19b 	.word	0x0800b19b
 800b13c:	0800b15b 	.word	0x0800b15b
 800b140:	0800b151 	.word	0x0800b151
 800b144:	0800b19b 	.word	0x0800b19b
 800b148:	0800b173 	.word	0x0800b173
 800b14c:	0800b165 	.word	0x0800b165
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f9d4 	bl	800b500 <USBD_GetDescriptor>
          break;
 800b158:	e024      	b.n	800b1a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b15a:	6839      	ldr	r1, [r7, #0]
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fb39 	bl	800b7d4 <USBD_SetAddress>
          break;
 800b162:	e01f      	b.n	800b1a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fb78 	bl	800b85c <USBD_SetConfig>
 800b16c:	4603      	mov	r3, r0
 800b16e:	73fb      	strb	r3, [r7, #15]
          break;
 800b170:	e018      	b.n	800b1a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fc17 	bl	800b9a8 <USBD_GetConfig>
          break;
 800b17a:	e013      	b.n	800b1a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fc47 	bl	800ba12 <USBD_GetStatus>
          break;
 800b184:	e00e      	b.n	800b1a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b186:	6839      	ldr	r1, [r7, #0]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fc76 	bl	800ba7a <USBD_SetFeature>
          break;
 800b18e:	e009      	b.n	800b1a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fc85 	bl	800baa2 <USBD_ClrFeature>
          break;
 800b198:	e004      	b.n	800b1a4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fcdc 	bl	800bb5a <USBD_CtlError>
          break;
 800b1a2:	bf00      	nop
      }
      break;
 800b1a4:	e004      	b.n	800b1b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b1a6:	6839      	ldr	r1, [r7, #0]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fcd6 	bl	800bb5a <USBD_CtlError>
      break;
 800b1ae:	bf00      	nop
  }

  return ret;
 800b1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop

0800b1bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1d2:	2b20      	cmp	r3, #32
 800b1d4:	d003      	beq.n	800b1de <USBD_StdItfReq+0x22>
 800b1d6:	2b40      	cmp	r3, #64	; 0x40
 800b1d8:	d001      	beq.n	800b1de <USBD_StdItfReq+0x22>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d12b      	bne.n	800b236 <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d81d      	bhi.n	800b228 <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	889b      	ldrh	r3, [r3, #4]
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d813      	bhi.n	800b21e <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	4798      	blx	r3
 800b204:	4603      	mov	r3, r0
 800b206:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	88db      	ldrh	r3, [r3, #6]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d110      	bne.n	800b232 <USBD_StdItfReq+0x76>
 800b210:	7bfb      	ldrb	r3, [r7, #15]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d10d      	bne.n	800b232 <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 fd6a 	bl	800bcf0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b21c:	e009      	b.n	800b232 <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 800b21e:	6839      	ldr	r1, [r7, #0]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fc9a 	bl	800bb5a <USBD_CtlError>
          break;
 800b226:	e004      	b.n	800b232 <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 800b228:	6839      	ldr	r1, [r7, #0]
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fc95 	bl	800bb5a <USBD_CtlError>
          break;
 800b230:	e000      	b.n	800b234 <USBD_StdItfReq+0x78>
          break;
 800b232:	bf00      	nop
      }
      break;
 800b234:	e004      	b.n	800b240 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fc8e 	bl	800bb5a <USBD_CtlError>
      break;
 800b23e:	bf00      	nop
  }

  return ret;
 800b240:	7bfb      	ldrb	r3, [r7, #15]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b084      	sub	sp, #16
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	889b      	ldrh	r3, [r3, #4]
 800b25c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b266:	2b20      	cmp	r3, #32
 800b268:	d004      	beq.n	800b274 <USBD_StdEPReq+0x2a>
 800b26a:	2b40      	cmp	r3, #64	; 0x40
 800b26c:	d002      	beq.n	800b274 <USBD_StdEPReq+0x2a>
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00a      	beq.n	800b288 <USBD_StdEPReq+0x3e>
 800b272:	e13a      	b.n	800b4ea <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	4798      	blx	r3
 800b282:	4603      	mov	r3, r0
 800b284:	73fb      	strb	r3, [r7, #15]
      break;
 800b286:	e135      	b.n	800b4f4 <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	785b      	ldrb	r3, [r3, #1]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d03f      	beq.n	800b310 <USBD_StdEPReq+0xc6>
 800b290:	2b03      	cmp	r3, #3
 800b292:	d002      	beq.n	800b29a <USBD_StdEPReq+0x50>
 800b294:	2b00      	cmp	r3, #0
 800b296:	d07b      	beq.n	800b390 <USBD_StdEPReq+0x146>
 800b298:	e121      	b.n	800b4de <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	d002      	beq.n	800b2ac <USBD_StdEPReq+0x62>
 800b2a6:	2b03      	cmp	r3, #3
 800b2a8:	d015      	beq.n	800b2d6 <USBD_StdEPReq+0x8c>
 800b2aa:	e02b      	b.n	800b304 <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2ac:	7bbb      	ldrb	r3, [r7, #14]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00c      	beq.n	800b2cc <USBD_StdEPReq+0x82>
 800b2b2:	7bbb      	ldrb	r3, [r7, #14]
 800b2b4:	2b80      	cmp	r3, #128	; 0x80
 800b2b6:	d009      	beq.n	800b2cc <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2b8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f008 f931 	bl	8013524 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2c2:	2180      	movs	r1, #128	; 0x80
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f008 f92d 	bl	8013524 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2ca:	e020      	b.n	800b30e <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fc43 	bl	800bb5a <USBD_CtlError>
              break;
 800b2d4:	e01b      	b.n	800b30e <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	885b      	ldrh	r3, [r3, #2]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10e      	bne.n	800b2fc <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b2de:	7bbb      	ldrb	r3, [r7, #14]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00b      	beq.n	800b2fc <USBD_StdEPReq+0xb2>
 800b2e4:	7bbb      	ldrb	r3, [r7, #14]
 800b2e6:	2b80      	cmp	r3, #128	; 0x80
 800b2e8:	d008      	beq.n	800b2fc <USBD_StdEPReq+0xb2>
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	88db      	ldrh	r3, [r3, #6]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d104      	bne.n	800b2fc <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2f2:	7bbb      	ldrb	r3, [r7, #14]
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f008 f914 	bl	8013524 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fcf7 	bl	800bcf0 <USBD_CtlSendStatus>

              break;
 800b302:	e004      	b.n	800b30e <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fc27 	bl	800bb5a <USBD_CtlError>
              break;
 800b30c:	bf00      	nop
          }
          break;
 800b30e:	e0eb      	b.n	800b4e8 <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b316:	b2db      	uxtb	r3, r3
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d002      	beq.n	800b322 <USBD_StdEPReq+0xd8>
 800b31c:	2b03      	cmp	r3, #3
 800b31e:	d015      	beq.n	800b34c <USBD_StdEPReq+0x102>
 800b320:	e02f      	b.n	800b382 <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b322:	7bbb      	ldrb	r3, [r7, #14]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00c      	beq.n	800b342 <USBD_StdEPReq+0xf8>
 800b328:	7bbb      	ldrb	r3, [r7, #14]
 800b32a:	2b80      	cmp	r3, #128	; 0x80
 800b32c:	d009      	beq.n	800b342 <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b32e:	7bbb      	ldrb	r3, [r7, #14]
 800b330:	4619      	mov	r1, r3
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f008 f8f6 	bl	8013524 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b338:	2180      	movs	r1, #128	; 0x80
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f008 f8f2 	bl	8013524 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b340:	e025      	b.n	800b38e <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 fc08 	bl	800bb5a <USBD_CtlError>
              break;
 800b34a:	e020      	b.n	800b38e <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	885b      	ldrh	r3, [r3, #2]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d11b      	bne.n	800b38c <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b354:	7bbb      	ldrb	r3, [r7, #14]
 800b356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d004      	beq.n	800b368 <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b35e:	7bbb      	ldrb	r3, [r7, #14]
 800b360:	4619      	mov	r1, r3
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f008 f8fd 	bl	8013562 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 fcc1 	bl	800bcf0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	6839      	ldr	r1, [r7, #0]
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	4798      	blx	r3
 800b37c:	4603      	mov	r3, r0
 800b37e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b380:	e004      	b.n	800b38c <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fbe8 	bl	800bb5a <USBD_CtlError>
              break;
 800b38a:	e000      	b.n	800b38e <USBD_StdEPReq+0x144>
              break;
 800b38c:	bf00      	nop
          }
          break;
 800b38e:	e0ab      	b.n	800b4e8 <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b396:	b2db      	uxtb	r3, r3
 800b398:	2b02      	cmp	r3, #2
 800b39a:	d002      	beq.n	800b3a2 <USBD_StdEPReq+0x158>
 800b39c:	2b03      	cmp	r3, #3
 800b39e:	d032      	beq.n	800b406 <USBD_StdEPReq+0x1bc>
 800b3a0:	e097      	b.n	800b4d2 <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3a2:	7bbb      	ldrb	r3, [r7, #14]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d007      	beq.n	800b3b8 <USBD_StdEPReq+0x16e>
 800b3a8:	7bbb      	ldrb	r3, [r7, #14]
 800b3aa:	2b80      	cmp	r3, #128	; 0x80
 800b3ac:	d004      	beq.n	800b3b8 <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fbd2 	bl	800bb5a <USBD_CtlError>
                break;
 800b3b6:	e091      	b.n	800b4dc <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	da0b      	bge.n	800b3d8 <USBD_StdEPReq+0x18e>
 800b3c0:	7bbb      	ldrb	r3, [r7, #14]
 800b3c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	4413      	add	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	3310      	adds	r3, #16
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	3304      	adds	r3, #4
 800b3d6:	e00b      	b.n	800b3f0 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3d8:	7bbb      	ldrb	r3, [r7, #14]
 800b3da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3de:	4613      	mov	r3, r2
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	4413      	add	r3, r2
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2202      	movs	r2, #2
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fc1c 	bl	800bc3c <USBD_CtlSendData>
              break;
 800b404:	e06a      	b.n	800b4dc <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	da11      	bge.n	800b432 <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b40e:	7bbb      	ldrb	r3, [r7, #14]
 800b410:	f003 020f 	and.w	r2, r3, #15
 800b414:	6879      	ldr	r1, [r7, #4]
 800b416:	4613      	mov	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4413      	add	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	440b      	add	r3, r1
 800b420:	3324      	adds	r3, #36	; 0x24
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d117      	bne.n	800b458 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800b428:	6839      	ldr	r1, [r7, #0]
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 fb95 	bl	800bb5a <USBD_CtlError>
                  break;
 800b430:	e054      	b.n	800b4dc <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b432:	7bbb      	ldrb	r3, [r7, #14]
 800b434:	f003 020f 	and.w	r2, r3, #15
 800b438:	6879      	ldr	r1, [r7, #4]
 800b43a:	4613      	mov	r3, r2
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4413      	add	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	440b      	add	r3, r1
 800b444:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b448:	881b      	ldrh	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d104      	bne.n	800b458 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800b44e:	6839      	ldr	r1, [r7, #0]
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fb82 	bl	800bb5a <USBD_CtlError>
                  break;
 800b456:	e041      	b.n	800b4dc <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	da0b      	bge.n	800b478 <USBD_StdEPReq+0x22e>
 800b460:	7bbb      	ldrb	r3, [r7, #14]
 800b462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b466:	4613      	mov	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	3310      	adds	r3, #16
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	4413      	add	r3, r2
 800b474:	3304      	adds	r3, #4
 800b476:	e00b      	b.n	800b490 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b478:	7bbb      	ldrb	r3, [r7, #14]
 800b47a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b47e:	4613      	mov	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	4413      	add	r3, r2
 800b48e:	3304      	adds	r3, #4
 800b490:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b492:	7bbb      	ldrb	r3, [r7, #14]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <USBD_StdEPReq+0x254>
 800b498:	7bbb      	ldrb	r3, [r7, #14]
 800b49a:	2b80      	cmp	r3, #128	; 0x80
 800b49c:	d103      	bne.n	800b4a6 <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	601a      	str	r2, [r3, #0]
 800b4a4:	e00e      	b.n	800b4c4 <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b4a6:	7bbb      	ldrb	r3, [r7, #14]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f008 f878 	bl	80135a0 <USBD_LL_IsStallEP>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	e002      	b.n	800b4c4 <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fbb6 	bl	800bc3c <USBD_CtlSendData>
              break;
 800b4d0:	e004      	b.n	800b4dc <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fb40 	bl	800bb5a <USBD_CtlError>
              break;
 800b4da:	bf00      	nop
          }
          break;
 800b4dc:	e004      	b.n	800b4e8 <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fb3a 	bl	800bb5a <USBD_CtlError>
          break;
 800b4e6:	bf00      	nop
      }
      break;
 800b4e8:	e004      	b.n	800b4f4 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fb34 	bl	800bb5a <USBD_CtlError>
      break;
 800b4f2:	bf00      	nop
  }

  return ret;
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
	...

0800b500 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b50a:	2300      	movs	r3, #0
 800b50c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b50e:	2300      	movs	r3, #0
 800b510:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b512:	2300      	movs	r3, #0
 800b514:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	885b      	ldrh	r3, [r3, #2]
 800b51a:	0a1b      	lsrs	r3, r3, #8
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	3b01      	subs	r3, #1
 800b520:	2b06      	cmp	r3, #6
 800b522:	f200 8128 	bhi.w	800b776 <USBD_GetDescriptor+0x276>
 800b526:	a201      	add	r2, pc, #4	; (adr r2, 800b52c <USBD_GetDescriptor+0x2c>)
 800b528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52c:	0800b549 	.word	0x0800b549
 800b530:	0800b561 	.word	0x0800b561
 800b534:	0800b5a1 	.word	0x0800b5a1
 800b538:	0800b777 	.word	0x0800b777
 800b53c:	0800b777 	.word	0x0800b777
 800b540:	0800b717 	.word	0x0800b717
 800b544:	0800b743 	.word	0x0800b743
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	7c12      	ldrb	r2, [r2, #16]
 800b554:	f107 0108 	add.w	r1, r7, #8
 800b558:	4610      	mov	r0, r2
 800b55a:	4798      	blx	r3
 800b55c:	60f8      	str	r0, [r7, #12]
      break;
 800b55e:	e112      	b.n	800b786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	7c1b      	ldrb	r3, [r3, #16]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10d      	bne.n	800b584 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b570:	f107 0208 	add.w	r2, r7, #8
 800b574:	4610      	mov	r0, r2
 800b576:	4798      	blx	r3
 800b578:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	3301      	adds	r3, #1
 800b57e:	2202      	movs	r2, #2
 800b580:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b582:	e100      	b.n	800b786 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58c:	f107 0208 	add.w	r2, r7, #8
 800b590:	4610      	mov	r0, r2
 800b592:	4798      	blx	r3
 800b594:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	3301      	adds	r3, #1
 800b59a:	2202      	movs	r2, #2
 800b59c:	701a      	strb	r2, [r3, #0]
      break;
 800b59e:	e0f2      	b.n	800b786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	885b      	ldrh	r3, [r3, #2]
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b05      	cmp	r3, #5
 800b5a8:	f200 80ac 	bhi.w	800b704 <USBD_GetDescriptor+0x204>
 800b5ac:	a201      	add	r2, pc, #4	; (adr r2, 800b5b4 <USBD_GetDescriptor+0xb4>)
 800b5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b2:	bf00      	nop
 800b5b4:	0800b5cd 	.word	0x0800b5cd
 800b5b8:	0800b601 	.word	0x0800b601
 800b5bc:	0800b635 	.word	0x0800b635
 800b5c0:	0800b669 	.word	0x0800b669
 800b5c4:	0800b69d 	.word	0x0800b69d
 800b5c8:	0800b6d1 	.word	0x0800b6d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00b      	beq.n	800b5f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	7c12      	ldrb	r2, [r2, #16]
 800b5e4:	f107 0108 	add.w	r1, r7, #8
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	4798      	blx	r3
 800b5ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5ee:	e091      	b.n	800b714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5f0:	6839      	ldr	r1, [r7, #0]
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fab1 	bl	800bb5a <USBD_CtlError>
            err++;
 800b5f8:	7afb      	ldrb	r3, [r7, #11]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b5fe:	e089      	b.n	800b714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00b      	beq.n	800b624 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	7c12      	ldrb	r2, [r2, #16]
 800b618:	f107 0108 	add.w	r1, r7, #8
 800b61c:	4610      	mov	r0, r2
 800b61e:	4798      	blx	r3
 800b620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b622:	e077      	b.n	800b714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fa97 	bl	800bb5a <USBD_CtlError>
            err++;
 800b62c:	7afb      	ldrb	r3, [r7, #11]
 800b62e:	3301      	adds	r3, #1
 800b630:	72fb      	strb	r3, [r7, #11]
          break;
 800b632:	e06f      	b.n	800b714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00b      	beq.n	800b658 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	7c12      	ldrb	r2, [r2, #16]
 800b64c:	f107 0108 	add.w	r1, r7, #8
 800b650:	4610      	mov	r0, r2
 800b652:	4798      	blx	r3
 800b654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b656:	e05d      	b.n	800b714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b658:	6839      	ldr	r1, [r7, #0]
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 fa7d 	bl	800bb5a <USBD_CtlError>
            err++;
 800b660:	7afb      	ldrb	r3, [r7, #11]
 800b662:	3301      	adds	r3, #1
 800b664:	72fb      	strb	r3, [r7, #11]
          break;
 800b666:	e055      	b.n	800b714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00b      	beq.n	800b68c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	7c12      	ldrb	r2, [r2, #16]
 800b680:	f107 0108 	add.w	r1, r7, #8
 800b684:	4610      	mov	r0, r2
 800b686:	4798      	blx	r3
 800b688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b68a:	e043      	b.n	800b714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fa63 	bl	800bb5a <USBD_CtlError>
            err++;
 800b694:	7afb      	ldrb	r3, [r7, #11]
 800b696:	3301      	adds	r3, #1
 800b698:	72fb      	strb	r3, [r7, #11]
          break;
 800b69a:	e03b      	b.n	800b714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00b      	beq.n	800b6c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	7c12      	ldrb	r2, [r2, #16]
 800b6b4:	f107 0108 	add.w	r1, r7, #8
 800b6b8:	4610      	mov	r0, r2
 800b6ba:	4798      	blx	r3
 800b6bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6be:	e029      	b.n	800b714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6c0:	6839      	ldr	r1, [r7, #0]
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 fa49 	bl	800bb5a <USBD_CtlError>
            err++;
 800b6c8:	7afb      	ldrb	r3, [r7, #11]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b6ce:	e021      	b.n	800b714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6d6:	699b      	ldr	r3, [r3, #24]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00b      	beq.n	800b6f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	7c12      	ldrb	r2, [r2, #16]
 800b6e8:	f107 0108 	add.w	r1, r7, #8
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	4798      	blx	r3
 800b6f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6f2:	e00f      	b.n	800b714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fa2f 	bl	800bb5a <USBD_CtlError>
            err++;
 800b6fc:	7afb      	ldrb	r3, [r7, #11]
 800b6fe:	3301      	adds	r3, #1
 800b700:	72fb      	strb	r3, [r7, #11]
          break;
 800b702:	e007      	b.n	800b714 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b704:	6839      	ldr	r1, [r7, #0]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fa27 	bl	800bb5a <USBD_CtlError>
          err++;
 800b70c:	7afb      	ldrb	r3, [r7, #11]
 800b70e:	3301      	adds	r3, #1
 800b710:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b712:	bf00      	nop
      }
      break;
 800b714:	e037      	b.n	800b786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	7c1b      	ldrb	r3, [r3, #16]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d109      	bne.n	800b732 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b726:	f107 0208 	add.w	r2, r7, #8
 800b72a:	4610      	mov	r0, r2
 800b72c:	4798      	blx	r3
 800b72e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b730:	e029      	b.n	800b786 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b732:	6839      	ldr	r1, [r7, #0]
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 fa10 	bl	800bb5a <USBD_CtlError>
        err++;
 800b73a:	7afb      	ldrb	r3, [r7, #11]
 800b73c:	3301      	adds	r3, #1
 800b73e:	72fb      	strb	r3, [r7, #11]
      break;
 800b740:	e021      	b.n	800b786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	7c1b      	ldrb	r3, [r3, #16]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10d      	bne.n	800b766 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b752:	f107 0208 	add.w	r2, r7, #8
 800b756:	4610      	mov	r0, r2
 800b758:	4798      	blx	r3
 800b75a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	3301      	adds	r3, #1
 800b760:	2207      	movs	r2, #7
 800b762:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b764:	e00f      	b.n	800b786 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f9f6 	bl	800bb5a <USBD_CtlError>
        err++;
 800b76e:	7afb      	ldrb	r3, [r7, #11]
 800b770:	3301      	adds	r3, #1
 800b772:	72fb      	strb	r3, [r7, #11]
      break;
 800b774:	e007      	b.n	800b786 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 f9ee 	bl	800bb5a <USBD_CtlError>
      err++;
 800b77e:	7afb      	ldrb	r3, [r7, #11]
 800b780:	3301      	adds	r3, #1
 800b782:	72fb      	strb	r3, [r7, #11]
      break;
 800b784:	bf00      	nop
  }

  if (err != 0U)
 800b786:	7afb      	ldrb	r3, [r7, #11]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d11e      	bne.n	800b7ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	88db      	ldrh	r3, [r3, #6]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d016      	beq.n	800b7c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b794:	893b      	ldrh	r3, [r7, #8]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00e      	beq.n	800b7b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	88da      	ldrh	r2, [r3, #6]
 800b79e:	893b      	ldrh	r3, [r7, #8]
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	bf28      	it	cs
 800b7a4:	4613      	movcs	r3, r2
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b7aa:	893b      	ldrh	r3, [r7, #8]
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	68f9      	ldr	r1, [r7, #12]
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fa43 	bl	800bc3c <USBD_CtlSendData>
 800b7b6:	e009      	b.n	800b7cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f9cd 	bl	800bb5a <USBD_CtlError>
 800b7c0:	e004      	b.n	800b7cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 fa94 	bl	800bcf0 <USBD_CtlSendStatus>
 800b7c8:	e000      	b.n	800b7cc <USBD_GetDescriptor+0x2cc>
    return;
 800b7ca:	bf00      	nop
  }
}
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop

0800b7d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	889b      	ldrh	r3, [r3, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d131      	bne.n	800b84a <USBD_SetAddress+0x76>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	88db      	ldrh	r3, [r3, #6]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d12d      	bne.n	800b84a <USBD_SetAddress+0x76>
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	885b      	ldrh	r3, [r3, #2]
 800b7f2:	2b7f      	cmp	r3, #127	; 0x7f
 800b7f4:	d829      	bhi.n	800b84a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	885b      	ldrh	r3, [r3, #2]
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b800:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	2b03      	cmp	r3, #3
 800b80c:	d104      	bne.n	800b818 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b80e:	6839      	ldr	r1, [r7, #0]
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f9a2 	bl	800bb5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b816:	e01c      	b.n	800b852 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	7bfa      	ldrb	r2, [r7, #15]
 800b81c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b820:	7bfb      	ldrb	r3, [r7, #15]
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f007 fee1 	bl	80135ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fa60 	bl	800bcf0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b830:	7bfb      	ldrb	r3, [r7, #15]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d004      	beq.n	800b840 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2202      	movs	r2, #2
 800b83a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b83e:	e008      	b.n	800b852 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b848:	e003      	b.n	800b852 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f984 	bl	800bb5a <USBD_CtlError>
  }
}
 800b852:	bf00      	nop
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
	...

0800b85c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b866:	2300      	movs	r3, #0
 800b868:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	885b      	ldrh	r3, [r3, #2]
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	4b4c      	ldr	r3, [pc, #304]	; (800b9a4 <USBD_SetConfig+0x148>)
 800b872:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b874:	4b4b      	ldr	r3, [pc, #300]	; (800b9a4 <USBD_SetConfig+0x148>)
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d905      	bls.n	800b888 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f96b 	bl	800bb5a <USBD_CtlError>
    return USBD_FAIL;
 800b884:	2303      	movs	r3, #3
 800b886:	e088      	b.n	800b99a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	2b02      	cmp	r3, #2
 800b892:	d002      	beq.n	800b89a <USBD_SetConfig+0x3e>
 800b894:	2b03      	cmp	r3, #3
 800b896:	d025      	beq.n	800b8e4 <USBD_SetConfig+0x88>
 800b898:	e071      	b.n	800b97e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b89a:	4b42      	ldr	r3, [pc, #264]	; (800b9a4 <USBD_SetConfig+0x148>)
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d01c      	beq.n	800b8dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b8a2:	4b40      	ldr	r3, [pc, #256]	; (800b9a4 <USBD_SetConfig+0x148>)
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8ac:	4b3d      	ldr	r3, [pc, #244]	; (800b9a4 <USBD_SetConfig+0x148>)
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7ff f9c8 	bl	800ac48 <USBD_SetClassConfig>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b8bc:	7bfb      	ldrb	r3, [r7, #15]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d004      	beq.n	800b8cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b8c2:	6839      	ldr	r1, [r7, #0]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 f948 	bl	800bb5a <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b8ca:	e065      	b.n	800b998 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fa0f 	bl	800bcf0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2203      	movs	r2, #3
 800b8d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b8da:	e05d      	b.n	800b998 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fa07 	bl	800bcf0 <USBD_CtlSendStatus>
      break;
 800b8e2:	e059      	b.n	800b998 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b8e4:	4b2f      	ldr	r3, [pc, #188]	; (800b9a4 <USBD_SetConfig+0x148>)
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d112      	bne.n	800b912 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b8f4:	4b2b      	ldr	r3, [pc, #172]	; (800b9a4 <USBD_SetConfig+0x148>)
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8fe:	4b29      	ldr	r3, [pc, #164]	; (800b9a4 <USBD_SetConfig+0x148>)
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	4619      	mov	r1, r3
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff f9bb 	bl	800ac80 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f9f0 	bl	800bcf0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b910:	e042      	b.n	800b998 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b912:	4b24      	ldr	r3, [pc, #144]	; (800b9a4 <USBD_SetConfig+0x148>)
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d02a      	beq.n	800b976 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	b2db      	uxtb	r3, r3
 800b926:	4619      	mov	r1, r3
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7ff f9a9 	bl	800ac80 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b92e:	4b1d      	ldr	r3, [pc, #116]	; (800b9a4 <USBD_SetConfig+0x148>)
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	461a      	mov	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b938:	4b1a      	ldr	r3, [pc, #104]	; (800b9a4 <USBD_SetConfig+0x148>)
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	4619      	mov	r1, r3
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7ff f982 	bl	800ac48 <USBD_SetClassConfig>
 800b944:	4603      	mov	r3, r0
 800b946:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b948:	7bfb      	ldrb	r3, [r7, #15]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00f      	beq.n	800b96e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f902 	bl	800bb5a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff f98e 	bl	800ac80 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2202      	movs	r2, #2
 800b968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b96c:	e014      	b.n	800b998 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f9be 	bl	800bcf0 <USBD_CtlSendStatus>
      break;
 800b974:	e010      	b.n	800b998 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f9ba 	bl	800bcf0 <USBD_CtlSendStatus>
      break;
 800b97c:	e00c      	b.n	800b998 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 f8ea 	bl	800bb5a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b986:	4b07      	ldr	r3, [pc, #28]	; (800b9a4 <USBD_SetConfig+0x148>)
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7ff f977 	bl	800ac80 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b992:	2303      	movs	r3, #3
 800b994:	73fb      	strb	r3, [r7, #15]
      break;
 800b996:	bf00      	nop
  }

  return ret;
 800b998:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	20000310 	.word	0x20000310

0800b9a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	88db      	ldrh	r3, [r3, #6]
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d004      	beq.n	800b9c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b9ba:	6839      	ldr	r1, [r7, #0]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f8cc 	bl	800bb5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b9c2:	e022      	b.n	800ba0a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	db17      	blt.n	800ba00 <USBD_GetConfig+0x58>
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	dd02      	ble.n	800b9da <USBD_GetConfig+0x32>
 800b9d4:	2b03      	cmp	r3, #3
 800b9d6:	d00b      	beq.n	800b9f0 <USBD_GetConfig+0x48>
 800b9d8:	e012      	b.n	800ba00 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f927 	bl	800bc3c <USBD_CtlSendData>
        break;
 800b9ee:	e00c      	b.n	800ba0a <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	3304      	adds	r3, #4
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 f91f 	bl	800bc3c <USBD_CtlSendData>
        break;
 800b9fe:	e004      	b.n	800ba0a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f8a9 	bl	800bb5a <USBD_CtlError>
        break;
 800ba08:	bf00      	nop
}
 800ba0a:	bf00      	nop
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b082      	sub	sp, #8
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
 800ba1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	3b01      	subs	r3, #1
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d81e      	bhi.n	800ba68 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	88db      	ldrh	r3, [r3, #6]
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d004      	beq.n	800ba3c <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f890 	bl	800bb5a <USBD_CtlError>
        break;
 800ba3a:	e01a      	b.n	800ba72 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d005      	beq.n	800ba58 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	f043 0202 	orr.w	r2, r3, #2
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	330c      	adds	r3, #12
 800ba5c:	2202      	movs	r2, #2
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 f8eb 	bl	800bc3c <USBD_CtlSendData>
      break;
 800ba66:	e004      	b.n	800ba72 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ba68:	6839      	ldr	r1, [r7, #0]
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f875 	bl	800bb5a <USBD_CtlError>
      break;
 800ba70:	bf00      	nop
  }
}
 800ba72:	bf00      	nop
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b082      	sub	sp, #8
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	885b      	ldrh	r3, [r3, #2]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d106      	bne.n	800ba9a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f92b 	bl	800bcf0 <USBD_CtlSendStatus>
  }
}
 800ba9a:	bf00      	nop
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b082      	sub	sp, #8
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	3b01      	subs	r3, #1
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d80b      	bhi.n	800bad2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	885b      	ldrh	r3, [r3, #2]
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d10c      	bne.n	800badc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f910 	bl	800bcf0 <USBD_CtlSendStatus>
      }
      break;
 800bad0:	e004      	b.n	800badc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f840 	bl	800bb5a <USBD_CtlError>
      break;
 800bada:	e000      	b.n	800bade <USBD_ClrFeature+0x3c>
      break;
 800badc:	bf00      	nop
  }
}
 800bade:	bf00      	nop
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b084      	sub	sp, #16
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
 800baee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	781a      	ldrb	r2, [r3, #0]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	3301      	adds	r3, #1
 800bb00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	781a      	ldrb	r2, [r3, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f7ff fac7 	bl	800b0a4 <SWAPBYTE>
 800bb16:	4603      	mov	r3, r0
 800bb18:	461a      	mov	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	3301      	adds	r3, #1
 800bb22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	3301      	adds	r3, #1
 800bb28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f7ff faba 	bl	800b0a4 <SWAPBYTE>
 800bb30:	4603      	mov	r3, r0
 800bb32:	461a      	mov	r2, r3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	3301      	adds	r3, #1
 800bb42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f7ff faad 	bl	800b0a4 <SWAPBYTE>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	80da      	strh	r2, [r3, #6]
}
 800bb52:	bf00      	nop
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b082      	sub	sp, #8
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb64:	2180      	movs	r1, #128	; 0x80
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f007 fcdc 	bl	8013524 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bb6c:	2100      	movs	r1, #0
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f007 fcd8 	bl	8013524 <USBD_LL_StallEP>
}
 800bb74:	bf00      	nop
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d036      	beq.n	800bc00 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb96:	6938      	ldr	r0, [r7, #16]
 800bb98:	f000 f836 	bl	800bc08 <USBD_GetLen>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	3301      	adds	r3, #1
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	005b      	lsls	r3, r3, #1
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bbaa:	7dfb      	ldrb	r3, [r7, #23]
 800bbac:	68ba      	ldr	r2, [r7, #8]
 800bbae:	4413      	add	r3, r2
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	7812      	ldrb	r2, [r2, #0]
 800bbb4:	701a      	strb	r2, [r3, #0]
  idx++;
 800bbb6:	7dfb      	ldrb	r3, [r7, #23]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bbbc:	7dfb      	ldrb	r3, [r7, #23]
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	2203      	movs	r2, #3
 800bbc4:	701a      	strb	r2, [r3, #0]
  idx++;
 800bbc6:	7dfb      	ldrb	r3, [r7, #23]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bbcc:	e013      	b.n	800bbf6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bbce:	7dfb      	ldrb	r3, [r7, #23]
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	7812      	ldrb	r2, [r2, #0]
 800bbd8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	613b      	str	r3, [r7, #16]
    idx++;
 800bbe0:	7dfb      	ldrb	r3, [r7, #23]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bbe6:	7dfb      	ldrb	r3, [r7, #23]
 800bbe8:	68ba      	ldr	r2, [r7, #8]
 800bbea:	4413      	add	r3, r2
 800bbec:	2200      	movs	r2, #0
 800bbee:	701a      	strb	r2, [r3, #0]
    idx++;
 800bbf0:	7dfb      	ldrb	r3, [r7, #23]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1e7      	bne.n	800bbce <USBD_GetString+0x52>
 800bbfe:	e000      	b.n	800bc02 <USBD_GetString+0x86>
    return;
 800bc00:	bf00      	nop
  }
}
 800bc02:	3718      	adds	r7, #24
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bc10:	2300      	movs	r3, #0
 800bc12:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bc18:	e005      	b.n	800bc26 <USBD_GetLen+0x1e>
  {
    len++;
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	3301      	adds	r3, #1
 800bc24:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1f5      	bne.n	800bc1a <USBD_GetLen+0x12>
  }

  return len;
 800bc2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2202      	movs	r2, #2
 800bc4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	2100      	movs	r1, #0
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f007 fce1 	bl	801362a <USBD_LL_Transmit>

  return USBD_OK;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b084      	sub	sp, #16
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	60f8      	str	r0, [r7, #12]
 800bc7a:	60b9      	str	r1, [r7, #8]
 800bc7c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68ba      	ldr	r2, [r7, #8]
 800bc82:	2100      	movs	r1, #0
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f007 fcd0 	bl	801362a <USBD_LL_Transmit>

  return USBD_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2203      	movs	r2, #3
 800bca4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f007 fcd4 	bl	801366c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b084      	sub	sp, #16
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	60f8      	str	r0, [r7, #12]
 800bcd6:	60b9      	str	r1, [r7, #8]
 800bcd8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	2100      	movs	r1, #0
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f007 fcc3 	bl	801366c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2204      	movs	r2, #4
 800bcfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bd00:	2300      	movs	r3, #0
 800bd02:	2200      	movs	r2, #0
 800bd04:	2100      	movs	r1, #0
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f007 fc8f 	bl	801362a <USBD_LL_Transmit>

  return USBD_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b082      	sub	sp, #8
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2205      	movs	r2, #5
 800bd22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd26:	2300      	movs	r3, #0
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f007 fc9d 	bl	801366c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bd42:	1d3b      	adds	r3, r7, #4
 800bd44:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800bd50:	f000 f938 	bl	800bfc4 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	330b      	adds	r3, #11
 800bd58:	78db      	ldrb	r3, [r3, #3]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3718      	adds	r7, #24
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b088      	sub	sp, #32
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	4603      	mov	r3, r0
 800bd6a:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bd6c:	f107 030c 	add.w	r3, r7, #12
 800bd70:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800bd72:	79fb      	ldrb	r3, [r7, #7]
 800bd74:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800bd76:	f107 020c 	add.w	r2, r7, #12
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800bd82:	f000 f91f 	bl	800bfc4 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	330b      	adds	r3, #11
 800bd8a:	78db      	ldrb	r3, [r3, #3]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3720      	adds	r7, #32
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800bd94:	b480      	push	{r7}
 800bd96:	b08b      	sub	sp, #44	; 0x2c
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800bda0:	2300      	movs	r3, #0
 800bda2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800bda4:	2300      	movs	r3, #0
 800bda6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800bdac:	2300      	movs	r3, #0
 800bdae:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800bdbc:	4b4a      	ldr	r3, [pc, #296]	; (800bee8 <SHCI_GetWirelessFwInfo+0x154>)
 800bdbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdc0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bdc4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bdce:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a44      	ldr	r2, [pc, #272]	; (800beec <SHCI_GetWirelessFwInfo+0x158>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d10f      	bne.n	800be00 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	69db      	ldr	r3, [r3, #28]
 800bdf0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	617b      	str	r3, [r7, #20]
 800bdfe:	e01a      	b.n	800be36 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800be08:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800be0c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	691b      	ldr	r3, [r3, #16]
 800be14:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	695b      	ldr	r3, [r3, #20]
 800be1c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	699b      	ldr	r3, [r3, #24]
 800be24:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800be36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be38:	0e1b      	lsrs	r3, r3, #24
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800be40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be42:	0c1b      	lsrs	r3, r3, #16
 800be44:	b2da      	uxtb	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	0a1b      	lsrs	r3, r3, #8
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800be54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be56:	091b      	lsrs	r3, r3, #4
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	f003 030f 	and.w	r3, r3, #15
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be66:	b2db      	uxtb	r3, r3
 800be68:	f003 030f 	and.w	r3, r3, #15
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800be72:	6a3b      	ldr	r3, [r7, #32]
 800be74:	0e1b      	lsrs	r3, r3, #24
 800be76:	b2da      	uxtb	r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800be7c:	6a3b      	ldr	r3, [r7, #32]
 800be7e:	0c1b      	lsrs	r3, r3, #16
 800be80:	b2da      	uxtb	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800be86:	6a3b      	ldr	r3, [r7, #32]
 800be88:	0a1b      	lsrs	r3, r3, #8
 800be8a:	b2da      	uxtb	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800be90:	6a3b      	ldr	r3, [r7, #32]
 800be92:	b2da      	uxtb	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	0e1b      	lsrs	r3, r3, #24
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	0c1b      	lsrs	r3, r3, #16
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	0a1b      	lsrs	r3, r3, #8
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	0e1b      	lsrs	r3, r3, #24
 800bec2:	b2da      	uxtb	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	0c1b      	lsrs	r3, r3, #16
 800becc:	b2da      	uxtb	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	372c      	adds	r7, #44	; 0x2c
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr
 800bee8:	58004000 	.word	0x58004000
 800beec:	a94656b9 	.word	0xa94656b9

0800bef0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	4a08      	ldr	r2, [pc, #32]	; (800bf20 <shci_init+0x30>)
 800bf00:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800bf02:	4a08      	ldr	r2, [pc, #32]	; (800bf24 <shci_init+0x34>)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800bf08:	4806      	ldr	r0, [pc, #24]	; (800bf24 <shci_init+0x34>)
 800bf0a:	f000 f911 	bl	800c130 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 f894 	bl	800c040 <TlInit>

  return;
 800bf18:	bf00      	nop
}
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	20000334 	.word	0x20000334
 800bf24:	20000314 	.word	0x20000314

0800bf28 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bf2e:	4822      	ldr	r0, [pc, #136]	; (800bfb8 <shci_user_evt_proc+0x90>)
 800bf30:	f001 fce4 	bl	800d8fc <LST_is_empty>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d12b      	bne.n	800bf92 <shci_user_evt_proc+0x6a>
 800bf3a:	4b20      	ldr	r3, [pc, #128]	; (800bfbc <shci_user_evt_proc+0x94>)
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d027      	beq.n	800bf92 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bf42:	f107 030c 	add.w	r3, r7, #12
 800bf46:	4619      	mov	r1, r3
 800bf48:	481b      	ldr	r0, [pc, #108]	; (800bfb8 <shci_user_evt_proc+0x90>)
 800bf4a:	f001 fd5e 	bl	800da0a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800bf4e:	4b1c      	ldr	r3, [pc, #112]	; (800bfc0 <shci_user_evt_proc+0x98>)
 800bf50:	69db      	ldr	r3, [r3, #28]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00c      	beq.n	800bf70 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bf5e:	4b18      	ldr	r3, [pc, #96]	; (800bfc0 <shci_user_evt_proc+0x98>)
 800bf60:	69db      	ldr	r3, [r3, #28]
 800bf62:	1d3a      	adds	r2, r7, #4
 800bf64:	4610      	mov	r0, r2
 800bf66:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800bf68:	793a      	ldrb	r2, [r7, #4]
 800bf6a:	4b14      	ldr	r3, [pc, #80]	; (800bfbc <shci_user_evt_proc+0x94>)
 800bf6c:	701a      	strb	r2, [r3, #0]
 800bf6e:	e002      	b.n	800bf76 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bf70:	4b12      	ldr	r3, [pc, #72]	; (800bfbc <shci_user_evt_proc+0x94>)
 800bf72:	2201      	movs	r2, #1
 800bf74:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800bf76:	4b11      	ldr	r3, [pc, #68]	; (800bfbc <shci_user_evt_proc+0x94>)
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d004      	beq.n	800bf88 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 fa95 	bl	800c4b0 <TL_MM_EvtDone>
 800bf86:	e004      	b.n	800bf92 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	480a      	ldr	r0, [pc, #40]	; (800bfb8 <shci_user_evt_proc+0x90>)
 800bf8e:	f001 fcd5 	bl	800d93c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bf92:	4809      	ldr	r0, [pc, #36]	; (800bfb8 <shci_user_evt_proc+0x90>)
 800bf94:	f001 fcb2 	bl	800d8fc <LST_is_empty>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d107      	bne.n	800bfae <shci_user_evt_proc+0x86>
 800bf9e:	4b07      	ldr	r3, [pc, #28]	; (800bfbc <shci_user_evt_proc+0x94>)
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d003      	beq.n	800bfae <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800bfa6:	4804      	ldr	r0, [pc, #16]	; (800bfb8 <shci_user_evt_proc+0x90>)
 800bfa8:	f7f4 ff14 	bl	8000dd4 <shci_notify_asynch_evt>
  }


  return;
 800bfac:	bf00      	nop
 800bfae:	bf00      	nop
}
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	2000025c 	.word	0x2000025c
 800bfbc:	2000026c 	.word	0x2000026c
 800bfc0:	20000314 	.word	0x20000314

0800bfc4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60ba      	str	r2, [r7, #8]
 800bfcc:	607b      	str	r3, [r7, #4]
 800bfce:	4603      	mov	r3, r0
 800bfd0:	81fb      	strh	r3, [r7, #14]
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	f000 f864 	bl	800c0a4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800bfdc:	4b16      	ldr	r3, [pc, #88]	; (800c038 <shci_send+0x74>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	89fa      	ldrh	r2, [r7, #14]
 800bfe2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800bfe6:	4b14      	ldr	r3, [pc, #80]	; (800c038 <shci_send+0x74>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	7b7a      	ldrb	r2, [r7, #13]
 800bfec:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800bfee:	4b12      	ldr	r3, [pc, #72]	; (800c038 <shci_send+0x74>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	330c      	adds	r3, #12
 800bff4:	7b7a      	ldrb	r2, [r7, #13]
 800bff6:	68b9      	ldr	r1, [r7, #8]
 800bff8:	4618      	mov	r0, r3
 800bffa:	f007 fc1b 	bl	8013834 <memcpy>

  shciContext.io.Send(0,0);
 800bffe:	4b0f      	ldr	r3, [pc, #60]	; (800c03c <shci_send+0x78>)
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	2100      	movs	r1, #0
 800c004:	2000      	movs	r0, #0
 800c006:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c008:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c00c:	f7f4 ff02 	bl	8000e14 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f103 0008 	add.w	r0, r3, #8
 800c016:	4b08      	ldr	r3, [pc, #32]	; (800c038 <shci_send+0x74>)
 800c018:	6819      	ldr	r1, [r3, #0]
 800c01a:	4b07      	ldr	r3, [pc, #28]	; (800c038 <shci_send+0x74>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	789b      	ldrb	r3, [r3, #2]
 800c020:	3303      	adds	r3, #3
 800c022:	461a      	mov	r2, r3
 800c024:	f007 fc06 	bl	8013834 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c028:	2001      	movs	r0, #1
 800c02a:	f000 f83b 	bl	800c0a4 <Cmd_SetStatus>

  return;
 800c02e:	bf00      	nop
}
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	20000268 	.word	0x20000268
 800c03c:	20000314 	.word	0x20000314

0800c040 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c048:	4a10      	ldr	r2, [pc, #64]	; (800c08c <TlInit+0x4c>)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c04e:	4810      	ldr	r0, [pc, #64]	; (800c090 <TlInit+0x50>)
 800c050:	f001 fc44 	bl	800d8dc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c054:	2001      	movs	r0, #1
 800c056:	f000 f825 	bl	800c0a4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c05a:	4b0e      	ldr	r3, [pc, #56]	; (800c094 <TlInit+0x54>)
 800c05c:	2201      	movs	r2, #1
 800c05e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c060:	4b0d      	ldr	r3, [pc, #52]	; (800c098 <TlInit+0x58>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00c      	beq.n	800c082 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c06c:	4b0b      	ldr	r3, [pc, #44]	; (800c09c <TlInit+0x5c>)
 800c06e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c070:	4b0b      	ldr	r3, [pc, #44]	; (800c0a0 <TlInit+0x60>)
 800c072:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c074:	4b08      	ldr	r3, [pc, #32]	; (800c098 <TlInit+0x58>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f107 020c 	add.w	r2, r7, #12
 800c07c:	4610      	mov	r0, r2
 800c07e:	4798      	blx	r3
  }

  return;
 800c080:	bf00      	nop
 800c082:	bf00      	nop
}
 800c084:	3718      	adds	r7, #24
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	20000268 	.word	0x20000268
 800c090:	2000025c 	.word	0x2000025c
 800c094:	2000026c 	.word	0x2000026c
 800c098:	20000314 	.word	0x20000314
 800c09c:	0800c0f5 	.word	0x0800c0f5
 800c0a0:	0800c10d 	.word	0x0800c10d

0800c0a4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10b      	bne.n	800c0cc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c0b4:	4b0d      	ldr	r3, [pc, #52]	; (800c0ec <Cmd_SetStatus+0x48>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d003      	beq.n	800c0c4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c0bc:	4b0b      	ldr	r3, [pc, #44]	; (800c0ec <Cmd_SetStatus+0x48>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c0c4:	4b0a      	ldr	r3, [pc, #40]	; (800c0f0 <Cmd_SetStatus+0x4c>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c0ca:	e00b      	b.n	800c0e4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c0cc:	4b08      	ldr	r3, [pc, #32]	; (800c0f0 <Cmd_SetStatus+0x4c>)
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c0d2:	4b06      	ldr	r3, [pc, #24]	; (800c0ec <Cmd_SetStatus+0x48>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d004      	beq.n	800c0e4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c0da:	4b04      	ldr	r3, [pc, #16]	; (800c0ec <Cmd_SetStatus+0x48>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2001      	movs	r0, #1
 800c0e0:	4798      	blx	r3
  return;
 800c0e2:	bf00      	nop
 800c0e4:	bf00      	nop
}
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	20000334 	.word	0x20000334
 800c0f0:	20000264 	.word	0x20000264

0800c0f4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	f7f4 fe79 	bl	8000df4 <shci_cmd_resp_release>

  return;
 800c102:	bf00      	nop
}
 800c104:	3708      	adds	r7, #8
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
	...

0800c10c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c114:	6879      	ldr	r1, [r7, #4]
 800c116:	4805      	ldr	r0, [pc, #20]	; (800c12c <TlUserEvtReceived+0x20>)
 800c118:	f001 fc34 	bl	800d984 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c11c:	4803      	ldr	r0, [pc, #12]	; (800c12c <TlUserEvtReceived+0x20>)
 800c11e:	f7f4 fe59 	bl	8000dd4 <shci_notify_asynch_evt>

  return;
 800c122:	bf00      	nop
}
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	2000025c 	.word	0x2000025c

0800c130 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a05      	ldr	r2, [pc, #20]	; (800c150 <shci_register_io_bus+0x20>)
 800c13c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a04      	ldr	r2, [pc, #16]	; (800c154 <shci_register_io_bus+0x24>)
 800c142:	611a      	str	r2, [r3, #16]

  return;
 800c144:	bf00      	nop
}
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	0800c24d 	.word	0x0800c24d
 800c154:	0800c2a1 	.word	0x0800c2a1

0800c158 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c15c:	f006 fcea 	bl	8012b34 <HW_IPCC_Enable>

  return;
 800c160:	bf00      	nop
}
 800c162:	bd80      	pop	{r7, pc}

0800c164 <TL_Init>:


void TL_Init( void )
{
 800c164:	b580      	push	{r7, lr}
 800c166:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c168:	4b10      	ldr	r3, [pc, #64]	; (800c1ac <TL_Init+0x48>)
 800c16a:	4a11      	ldr	r2, [pc, #68]	; (800c1b0 <TL_Init+0x4c>)
 800c16c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c16e:	4b0f      	ldr	r3, [pc, #60]	; (800c1ac <TL_Init+0x48>)
 800c170:	4a10      	ldr	r2, [pc, #64]	; (800c1b4 <TL_Init+0x50>)
 800c172:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c174:	4b0d      	ldr	r3, [pc, #52]	; (800c1ac <TL_Init+0x48>)
 800c176:	4a10      	ldr	r2, [pc, #64]	; (800c1b8 <TL_Init+0x54>)
 800c178:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c17a:	4b0c      	ldr	r3, [pc, #48]	; (800c1ac <TL_Init+0x48>)
 800c17c:	4a0f      	ldr	r2, [pc, #60]	; (800c1bc <TL_Init+0x58>)
 800c17e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800c180:	4b0a      	ldr	r3, [pc, #40]	; (800c1ac <TL_Init+0x48>)
 800c182:	4a0f      	ldr	r2, [pc, #60]	; (800c1c0 <TL_Init+0x5c>)
 800c184:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c186:	4b09      	ldr	r3, [pc, #36]	; (800c1ac <TL_Init+0x48>)
 800c188:	4a0e      	ldr	r2, [pc, #56]	; (800c1c4 <TL_Init+0x60>)
 800c18a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c18c:	4b07      	ldr	r3, [pc, #28]	; (800c1ac <TL_Init+0x48>)
 800c18e:	4a0e      	ldr	r2, [pc, #56]	; (800c1c8 <TL_Init+0x64>)
 800c190:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c192:	4b06      	ldr	r3, [pc, #24]	; (800c1ac <TL_Init+0x48>)
 800c194:	4a0d      	ldr	r2, [pc, #52]	; (800c1cc <TL_Init+0x68>)
 800c196:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c198:	4b04      	ldr	r3, [pc, #16]	; (800c1ac <TL_Init+0x48>)
 800c19a:	4a0d      	ldr	r2, [pc, #52]	; (800c1d0 <TL_Init+0x6c>)
 800c19c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c19e:	4b03      	ldr	r3, [pc, #12]	; (800c1ac <TL_Init+0x48>)
 800c1a0:	4a0c      	ldr	r2, [pc, #48]	; (800c1d4 <TL_Init+0x70>)
 800c1a2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c1a4:	f006 fcda 	bl	8012b5c <HW_IPCC_Init>

  return;
 800c1a8:	bf00      	nop
}
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	20030000 	.word	0x20030000
 800c1b0:	20030028 	.word	0x20030028
 800c1b4:	20030048 	.word	0x20030048
 800c1b8:	20030058 	.word	0x20030058
 800c1bc:	20030064 	.word	0x20030064
 800c1c0:	2003006c 	.word	0x2003006c
 800c1c4:	20030074 	.word	0x20030074
 800c1c8:	2003007c 	.word	0x2003007c
 800c1cc:	20030098 	.word	0x20030098
 800c1d0:	2003009c 	.word	0x2003009c
 800c1d4:	200300a8 	.word	0x200300a8

0800c1d8 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c1de:	e01c      	b.n	800c21a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c1e0:	1d3b      	adds	r3, r7, #4
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	4812      	ldr	r0, [pc, #72]	; (800c230 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c1e6:	f001 fc10 	bl	800da0a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	7a5b      	ldrb	r3, [r3, #9]
 800c1ee:	2b0f      	cmp	r3, #15
 800c1f0:	d003      	beq.n	800c1fa <HW_IPCC_BLE_RxEvtNot+0x22>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	7a5b      	ldrb	r3, [r3, #9]
 800c1f6:	2b0e      	cmp	r3, #14
 800c1f8:	d105      	bne.n	800c206 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	2002      	movs	r0, #2
 800c200:	f000 f9ba 	bl	800c578 <OutputDbgTrace>
 800c204:	e004      	b.n	800c210 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4619      	mov	r1, r3
 800c20a:	2003      	movs	r0, #3
 800c20c:	f000 f9b4 	bl	800c578 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c210:	4b08      	ldr	r3, [pc, #32]	; (800c234 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	4610      	mov	r0, r2
 800c218:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c21a:	4805      	ldr	r0, [pc, #20]	; (800c230 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c21c:	f001 fb6e 	bl	800d8fc <LST_is_empty>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0dc      	beq.n	800c1e0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c226:	bf00      	nop
}
 800c228:	3708      	adds	r7, #8
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	200300c4 	.word	0x200300c4
 800c234:	20000340 	.word	0x20000340

0800c238 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c23c:	4b02      	ldr	r3, [pc, #8]	; (800c248 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4798      	blx	r3

  return;
 800c242:	bf00      	nop
}
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	20000344 	.word	0x20000344

0800c24c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c258:	480d      	ldr	r0, [pc, #52]	; (800c290 <TL_SYS_Init+0x44>)
 800c25a:	f001 fb3f 	bl	800d8dc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c25e:	4b0d      	ldr	r3, [pc, #52]	; (800c294 <TL_SYS_Init+0x48>)
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	689a      	ldr	r2, [r3, #8]
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	4a08      	ldr	r2, [pc, #32]	; (800c290 <TL_SYS_Init+0x44>)
 800c270:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c272:	f006 fca1 	bl	8012bb8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a07      	ldr	r2, [pc, #28]	; (800c298 <TL_SYS_Init+0x4c>)
 800c27c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	4a06      	ldr	r2, [pc, #24]	; (800c29c <TL_SYS_Init+0x50>)
 800c284:	6013      	str	r3, [r2, #0]

  return 0;
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	200300cc 	.word	0x200300cc
 800c294:	20030000 	.word	0x20030000
 800c298:	20000348 	.word	0x20000348
 800c29c:	2000034c 	.word	0x2000034c

0800c2a0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c2ac:	4b09      	ldr	r3, [pc, #36]	; (800c2d4 <TL_SYS_SendCmd+0x34>)
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2210      	movs	r2, #16
 800c2b4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c2b6:	4b07      	ldr	r3, [pc, #28]	; (800c2d4 <TL_SYS_SendCmd+0x34>)
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4619      	mov	r1, r3
 800c2be:	2004      	movs	r0, #4
 800c2c0:	f000 f95a 	bl	800c578 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c2c4:	f006 fc82 	bl	8012bcc <HW_IPCC_SYS_SendCmd>

  return 0;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	20030000 	.word	0x20030000

0800c2d8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c2dc:	4b07      	ldr	r3, [pc, #28]	; (800c2fc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	2005      	movs	r0, #5
 800c2e6:	f000 f947 	bl	800c578 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c2ea:	4b05      	ldr	r3, [pc, #20]	; (800c300 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a03      	ldr	r2, [pc, #12]	; (800c2fc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c2f0:	68d2      	ldr	r2, [r2, #12]
 800c2f2:	6812      	ldr	r2, [r2, #0]
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	4798      	blx	r3

  return;
 800c2f8:	bf00      	nop
}
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	20030000 	.word	0x20030000
 800c300:	20000348 	.word	0x20000348

0800c304 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c30a:	e00e      	b.n	800c32a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c30c:	1d3b      	adds	r3, r7, #4
 800c30e:	4619      	mov	r1, r3
 800c310:	480b      	ldr	r0, [pc, #44]	; (800c340 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c312:	f001 fb7a 	bl	800da0a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4619      	mov	r1, r3
 800c31a:	2006      	movs	r0, #6
 800c31c:	f000 f92c 	bl	800c578 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c320:	4b08      	ldr	r3, [pc, #32]	; (800c344 <HW_IPCC_SYS_EvtNot+0x40>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	4610      	mov	r0, r2
 800c328:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c32a:	4805      	ldr	r0, [pc, #20]	; (800c340 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c32c:	f001 fae6 	bl	800d8fc <LST_is_empty>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d0ea      	beq.n	800c30c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c336:	bf00      	nop
}
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	200300cc 	.word	0x200300cc
 800c344:	2000034c 	.word	0x2000034c

0800c348 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800c350:	4b0a      	ldr	r3, [pc, #40]	; (800c37c <TL_THREAD_Init+0x34>)
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	689a      	ldr	r2, [r3, #8]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 800c36e:	f006 fc53 	bl	8012c18 <HW_IPCC_THREAD_Init>

  return;
 800c372:	bf00      	nop
}
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20030000 	.word	0x20030000

0800c380 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800c384:	4b04      	ldr	r3, [pc, #16]	; (800c398 <TL_OT_SendCmd+0x18>)
 800c386:	689b      	ldr	r3, [r3, #8]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	2208      	movs	r2, #8
 800c38c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800c38e:	f006 fc51 	bl	8012c34 <HW_IPCC_OT_SendCmd>

  return;
 800c392:	bf00      	nop
}
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	20030000 	.word	0x20030000

0800c39c <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800c3a0:	4b04      	ldr	r3, [pc, #16]	; (800c3b4 <TL_CLI_SendCmd+0x18>)
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	220a      	movs	r2, #10
 800c3a8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800c3aa:	f006 fc51 	bl	8012c50 <HW_IPCC_CLI_SendCmd>

  return;
 800c3ae:	bf00      	nop
}
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	20030000 	.word	0x20030000

0800c3b8 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c3bc:	4b04      	ldr	r3, [pc, #16]	; (800c3d0 <TL_THREAD_SendAck+0x18>)
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	220d      	movs	r2, #13
 800c3c4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800c3c6:	f006 fc4d 	bl	8012c64 <HW_IPCC_THREAD_SendAck>

  return;
 800c3ca:	bf00      	nop
}
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	20030000 	.word	0x20030000

0800c3d4 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c3d8:	4b04      	ldr	r3, [pc, #16]	; (800c3ec <TL_THREAD_CliSendAck+0x18>)
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	220d      	movs	r2, #13
 800c3e0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800c3e2:	f006 fc4d 	bl	8012c80 <HW_IPCC_THREAD_CliSendAck>

  return;
 800c3e6:	bf00      	nop
}
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20030000 	.word	0x20030000

0800c3f0 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800c3f4:	4b03      	ldr	r3, [pc, #12]	; (800c404 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f006 f8e0 	bl	80125c0 <TL_OT_CmdEvtReceived>

  return;
 800c400:	bf00      	nop
}
 800c402:	bd80      	pop	{r7, pc}
 800c404:	20030000 	.word	0x20030000

0800c408 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800c40c:	4b03      	ldr	r3, [pc, #12]	; (800c41c <HW_IPCC_THREAD_EvtNot+0x14>)
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4618      	mov	r0, r3
 800c414:	f006 f8de 	bl	80125d4 <TL_THREAD_NotReceived>

  return;
 800c418:	bf00      	nop
}
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	20030000 	.word	0x20030000

0800c420 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800c424:	4b03      	ldr	r3, [pc, #12]	; (800c434 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	4618      	mov	r0, r3
 800c42c:	f006 f980 	bl	8012730 <TL_THREAD_CliNotReceived>

  return;
 800c430:	bf00      	nop
}
 800c432:	bd80      	pop	{r7, pc}
 800c434:	20030000 	.word	0x20030000

0800c438 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c440:	4817      	ldr	r0, [pc, #92]	; (800c4a0 <TL_MM_Init+0x68>)
 800c442:	f001 fa4b 	bl	800d8dc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c446:	4817      	ldr	r0, [pc, #92]	; (800c4a4 <TL_MM_Init+0x6c>)
 800c448:	f001 fa48 	bl	800d8dc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c44c:	4b16      	ldr	r3, [pc, #88]	; (800c4a8 <TL_MM_Init+0x70>)
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	4a16      	ldr	r2, [pc, #88]	; (800c4ac <TL_MM_Init+0x74>)
 800c452:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c454:	4b15      	ldr	r3, [pc, #84]	; (800c4ac <TL_MM_Init+0x74>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	6892      	ldr	r2, [r2, #8]
 800c45c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c45e:	4b13      	ldr	r3, [pc, #76]	; (800c4ac <TL_MM_Init+0x74>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	68d2      	ldr	r2, [r2, #12]
 800c466:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c468:	4b10      	ldr	r3, [pc, #64]	; (800c4ac <TL_MM_Init+0x74>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a0c      	ldr	r2, [pc, #48]	; (800c4a0 <TL_MM_Init+0x68>)
 800c46e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c470:	4b0e      	ldr	r3, [pc, #56]	; (800c4ac <TL_MM_Init+0x74>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	6812      	ldr	r2, [r2, #0]
 800c478:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c47a:	4b0c      	ldr	r3, [pc, #48]	; (800c4ac <TL_MM_Init+0x74>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	6852      	ldr	r2, [r2, #4]
 800c482:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c484:	4b09      	ldr	r3, [pc, #36]	; (800c4ac <TL_MM_Init+0x74>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	6912      	ldr	r2, [r2, #16]
 800c48c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c48e:	4b07      	ldr	r3, [pc, #28]	; (800c4ac <TL_MM_Init+0x74>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	6952      	ldr	r2, [r2, #20]
 800c496:	619a      	str	r2, [r3, #24]

  return;
 800c498:	bf00      	nop
}
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	200300b4 	.word	0x200300b4
 800c4a4:	20000338 	.word	0x20000338
 800c4a8:	20030000 	.word	0x20030000
 800c4ac:	20000350 	.word	0x20000350

0800c4b0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c4b8:	6879      	ldr	r1, [r7, #4]
 800c4ba:	4807      	ldr	r0, [pc, #28]	; (800c4d8 <TL_MM_EvtDone+0x28>)
 800c4bc:	f001 fa62 	bl	800d984 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c4c0:	6879      	ldr	r1, [r7, #4]
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	f000 f858 	bl	800c578 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c4c8:	4804      	ldr	r0, [pc, #16]	; (800c4dc <TL_MM_EvtDone+0x2c>)
 800c4ca:	f006 fc0b 	bl	8012ce4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c4ce:	bf00      	nop
}
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	20000338 	.word	0x20000338
 800c4dc:	0800c4e1 	.word	0x0800c4e1

0800c4e0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c4e6:	e00c      	b.n	800c502 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c4e8:	1d3b      	adds	r3, r7, #4
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	480a      	ldr	r0, [pc, #40]	; (800c518 <SendFreeBuf+0x38>)
 800c4ee:	f001 fa8c 	bl	800da0a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c4f2:	4b0a      	ldr	r3, [pc, #40]	; (800c51c <SendFreeBuf+0x3c>)
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	691b      	ldr	r3, [r3, #16]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	4611      	mov	r1, r2
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f001 fa41 	bl	800d984 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c502:	4805      	ldr	r0, [pc, #20]	; (800c518 <SendFreeBuf+0x38>)
 800c504:	f001 f9fa 	bl	800d8fc <LST_is_empty>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d0ec      	beq.n	800c4e8 <SendFreeBuf+0x8>
  }

  return;
 800c50e:	bf00      	nop
}
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	20000338 	.word	0x20000338
 800c51c:	20030000 	.word	0x20030000

0800c520 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c524:	4805      	ldr	r0, [pc, #20]	; (800c53c <TL_TRACES_Init+0x1c>)
 800c526:	f001 f9d9 	bl	800d8dc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c52a:	4b05      	ldr	r3, [pc, #20]	; (800c540 <TL_TRACES_Init+0x20>)
 800c52c:	695b      	ldr	r3, [r3, #20]
 800c52e:	4a03      	ldr	r2, [pc, #12]	; (800c53c <TL_TRACES_Init+0x1c>)
 800c530:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c532:	f006 fc0d 	bl	8012d50 <HW_IPCC_TRACES_Init>

  return;
 800c536:	bf00      	nop
}
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	200300bc 	.word	0x200300bc
 800c540:	20030000 	.word	0x20030000

0800c544 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c54a:	e008      	b.n	800c55e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c54c:	1d3b      	adds	r3, r7, #4
 800c54e:	4619      	mov	r1, r3
 800c550:	4808      	ldr	r0, [pc, #32]	; (800c574 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c552:	f001 fa5a 	bl	800da0a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4618      	mov	r0, r3
 800c55a:	f7f4 fc6d 	bl	8000e38 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c55e:	4805      	ldr	r0, [pc, #20]	; (800c574 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c560:	f001 f9cc 	bl	800d8fc <LST_is_empty>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d0f0      	beq.n	800c54c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c56a:	bf00      	nop
}
 800c56c:	3708      	adds	r7, #8
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	200300bc 	.word	0x200300bc

0800c578 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	4603      	mov	r3, r0
 800c580:	6039      	str	r1, [r7, #0]
 800c582:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c584:	79fb      	ldrb	r3, [r7, #7]
 800c586:	2b06      	cmp	r3, #6
 800c588:	d849      	bhi.n	800c61e <OutputDbgTrace+0xa6>
 800c58a:	a201      	add	r2, pc, #4	; (adr r2, 800c590 <OutputDbgTrace+0x18>)
 800c58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c590:	0800c5ad 	.word	0x0800c5ad
 800c594:	0800c5cf 	.word	0x0800c5cf
 800c598:	0800c5d5 	.word	0x0800c5d5
 800c59c:	0800c5ef 	.word	0x0800c5ef
 800c5a0:	0800c5fb 	.word	0x0800c5fb
 800c5a4:	0800c601 	.word	0x0800c601
 800c5a8:	0800c613 	.word	0x0800c613
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	7a5b      	ldrb	r3, [r3, #9]
 800c5b4:	2b0f      	cmp	r3, #15
 800c5b6:	d004      	beq.n	800c5c2 <OutputDbgTrace+0x4a>
 800c5b8:	2bff      	cmp	r3, #255	; 0xff
 800c5ba:	d004      	beq.n	800c5c6 <OutputDbgTrace+0x4e>
 800c5bc:	2b0e      	cmp	r3, #14
 800c5be:	d004      	beq.n	800c5ca <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c5c0:	e004      	b.n	800c5cc <OutputDbgTrace+0x54>
          break;
 800c5c2:	bf00      	nop
 800c5c4:	e02c      	b.n	800c620 <OutputDbgTrace+0xa8>
          break;
 800c5c6:	bf00      	nop
 800c5c8:	e02a      	b.n	800c620 <OutputDbgTrace+0xa8>
          break;
 800c5ca:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c5cc:	e028      	b.n	800c620 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c5d2:	e025      	b.n	800c620 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	7a5b      	ldrb	r3, [r3, #9]
 800c5dc:	2b0e      	cmp	r3, #14
 800c5de:	d002      	beq.n	800c5e6 <OutputDbgTrace+0x6e>
 800c5e0:	2b0f      	cmp	r3, #15
 800c5e2:	d002      	beq.n	800c5ea <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c5e4:	e002      	b.n	800c5ec <OutputDbgTrace+0x74>
          break;
 800c5e6:	bf00      	nop
 800c5e8:	e01a      	b.n	800c620 <OutputDbgTrace+0xa8>
          break;
 800c5ea:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c5ec:	e018      	b.n	800c620 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	7a5b      	ldrb	r3, [r3, #9]
 800c5f6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c5f8:	e012      	b.n	800c620 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c5fe:	e00f      	b.n	800c620 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	7a5b      	ldrb	r3, [r3, #9]
 800c608:	2b0e      	cmp	r3, #14
 800c60a:	d000      	beq.n	800c60e <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c60c:	e000      	b.n	800c610 <OutputDbgTrace+0x98>
          break;
 800c60e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c610:	e006      	b.n	800c620 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	7a5b      	ldrb	r3, [r3, #9]
 800c61a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c61c:	e000      	b.n	800c620 <OutputDbgTrace+0xa8>

    default:
      break;
 800c61e:	bf00      	nop
  }

  return;
 800c620:	bf00      	nop
}
 800c622:	3714      	adds	r7, #20
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <otCoapHeaderInit>:
extern otCoapRequestHandler defaultCoapRequestHandlerCb;

#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	460b      	mov	r3, r1
 800c636:	70fb      	strb	r3, [r7, #3]
 800c638:	4613      	mov	r3, r2
 800c63a:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800c63c:	f005 ffda 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c640:	f005 ff76 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c644:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2200      	movs	r2, #0
 800c64a:	f062 0260 	orn	r2, r2, #96	; 0x60
 800c64e:	701a      	strb	r2, [r3, #0]
 800c650:	2200      	movs	r2, #0
 800c652:	705a      	strb	r2, [r3, #1]
 800c654:	2200      	movs	r2, #0
 800c656:	709a      	strb	r2, [r3, #2]
 800c658:	2200      	movs	r2, #0
 800c65a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	f042 0203 	orr.w	r2, r2, #3
 800c664:	711a      	strb	r2, [r3, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	715a      	strb	r2, [r3, #5]
 800c66a:	2200      	movs	r2, #0
 800c66c:	719a      	strb	r2, [r3, #6]
 800c66e:	2200      	movs	r2, #0
 800c670:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 800c678:	78fa      	ldrb	r2, [r7, #3]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 800c67e:	78ba      	ldrb	r2, [r7, #2]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800c684:	f005 ff78 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c688:	f005 ff5e 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c68c:	60f8      	str	r0, [r7, #12]
}
 800c68e:	bf00      	nop
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b086      	sub	sp, #24
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	60f8      	str	r0, [r7, #12]
 800c69e:	60b9      	str	r1, [r7, #8]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 800c6a4:	f005 ffa6 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c6a8:	f005 ff42 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c6ac:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f062 025f 	orn	r2, r2, #95	; 0x5f
 800c6b6:	701a      	strb	r2, [r3, #0]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	705a      	strb	r2, [r3, #1]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	709a      	strb	r2, [r3, #2]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f042 0203 	orr.w	r2, r2, #3
 800c6cc:	711a      	strb	r2, [r3, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	715a      	strb	r2, [r3, #5]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	719a      	strb	r2, [r3, #6]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 800c6e6:	79fa      	ldrb	r2, [r7, #7]
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800c6ec:	f005 ff44 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c6f0:	f005 ff2a 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c6f4:	6178      	str	r0, [r7, #20]
}
 800c6f6:	bf00      	nop
 800c6f8:	3718      	adds	r7, #24
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b084      	sub	sp, #16
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	460b      	mov	r3, r1
 800c708:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800c70a:	f005 ff73 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c70e:	f005 ff0f 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c712:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2200      	movs	r2, #0
 800c718:	f062 025e 	orn	r2, r2, #94	; 0x5e
 800c71c:	701a      	strb	r2, [r3, #0]
 800c71e:	2200      	movs	r2, #0
 800c720:	705a      	strb	r2, [r3, #1]
 800c722:	2200      	movs	r2, #0
 800c724:	709a      	strb	r2, [r3, #2]
 800c726:	2200      	movs	r2, #0
 800c728:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2200      	movs	r2, #0
 800c72e:	f042 0202 	orr.w	r2, r2, #2
 800c732:	711a      	strb	r2, [r3, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	715a      	strb	r2, [r3, #5]
 800c738:	2200      	movs	r2, #0
 800c73a:	719a      	strb	r2, [r3, #6]
 800c73c:	2200      	movs	r2, #0
 800c73e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800c746:	78fa      	ldrb	r2, [r7, #3]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c74c:	f005 ff14 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c750:	f005 fefa 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c754:	60f8      	str	r0, [r7, #12]
}
 800c756:	bf00      	nop
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b084      	sub	sp, #16
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	460b      	mov	r3, r1
 800c768:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800c76a:	f005 ff43 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c76e:	f005 fedf 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c772:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2200      	movs	r2, #0
 800c778:	f062 025d 	orn	r2, r2, #93	; 0x5d
 800c77c:	701a      	strb	r2, [r3, #0]
 800c77e:	2200      	movs	r2, #0
 800c780:	705a      	strb	r2, [r3, #1]
 800c782:	2200      	movs	r2, #0
 800c784:	709a      	strb	r2, [r3, #2]
 800c786:	2200      	movs	r2, #0
 800c788:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2200      	movs	r2, #0
 800c78e:	f042 0202 	orr.w	r2, r2, #2
 800c792:	711a      	strb	r2, [r3, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	715a      	strb	r2, [r3, #5]
 800c798:	2200      	movs	r2, #0
 800c79a:	719a      	strb	r2, [r3, #6]
 800c79c:	2200      	movs	r2, #0
 800c79e:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 800c7a6:	78fa      	ldrb	r2, [r7, #3]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c7ac:	f005 fee4 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c7b0:	f005 feca 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c7b4:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	b2db      	uxtb	r3, r3
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800c7ce:	f005 ff11 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c7d2:	f005 fead 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c7d6:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f062 0250 	orn	r2, r2, #80	; 0x50
 800c7e0:	701a      	strb	r2, [r3, #0]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	705a      	strb	r2, [r3, #1]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	709a      	strb	r2, [r3, #2]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f042 0202 	orr.w	r2, r2, #2
 800c7f6:	711a      	strb	r2, [r3, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	715a      	strb	r2, [r3, #5]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	719a      	strb	r2, [r3, #6]
 800c800:	2200      	movs	r2, #0
 800c802:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 800c80a:	683a      	ldr	r2, [r7, #0]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c810:	f005 feb2 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c814:	f005 fe98 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c818:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	b2db      	uxtb	r3, r3
}
 800c820:	4618      	mov	r0, r3
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c830:	f005 fee0 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c834:	f005 fe7c 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c838:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2200      	movs	r2, #0
 800c83e:	f062 024d 	orn	r2, r2, #77	; 0x4d
 800c842:	701a      	strb	r2, [r3, #0]
 800c844:	2200      	movs	r2, #0
 800c846:	705a      	strb	r2, [r3, #1]
 800c848:	2200      	movs	r2, #0
 800c84a:	709a      	strb	r2, [r3, #2]
 800c84c:	2200      	movs	r2, #0
 800c84e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	f042 0201 	orr.w	r2, r2, #1
 800c858:	711a      	strb	r2, [r3, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	715a      	strb	r2, [r3, #5]
 800c85e:	2200      	movs	r2, #0
 800c860:	719a      	strb	r2, [r3, #6]
 800c862:	2200      	movs	r2, #0
 800c864:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c86c:	f005 fe84 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c870:	f005 fe6a 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c874:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	b2db      	uxtb	r3, r3
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	460b      	mov	r3, r1
 800c88e:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800c890:	f005 feb0 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c894:	f005 fe4c 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c898:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2200      	movs	r2, #0
 800c89e:	f062 0256 	orn	r2, r2, #86	; 0x56
 800c8a2:	701a      	strb	r2, [r3, #0]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	705a      	strb	r2, [r3, #1]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	709a      	strb	r2, [r3, #2]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f042 0202 	orr.w	r2, r2, #2
 800c8b8:	711a      	strb	r2, [r3, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	715a      	strb	r2, [r3, #5]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	719a      	strb	r2, [r3, #6]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 800c8cc:	887a      	ldrh	r2, [r7, #2]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c8d2:	f005 fe51 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c8d6:	f005 fe37 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c8da:	60f8      	str	r0, [r7, #12]
}
 800c8dc:	bf00      	nop
 800c8de:	3710      	adds	r7, #16
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c8ec:	f005 fe82 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c8f0:	f005 fe1e 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c8f4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f062 0261 	orn	r2, r2, #97	; 0x61
 800c8fe:	701a      	strb	r2, [r3, #0]
 800c900:	2200      	movs	r2, #0
 800c902:	705a      	strb	r2, [r3, #1]
 800c904:	2200      	movs	r2, #0
 800c906:	709a      	strb	r2, [r3, #2]
 800c908:	2200      	movs	r2, #0
 800c90a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2200      	movs	r2, #0
 800c910:	f042 0201 	orr.w	r2, r2, #1
 800c914:	711a      	strb	r2, [r3, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	715a      	strb	r2, [r3, #5]
 800c91a:	2200      	movs	r2, #0
 800c91c:	719a      	strb	r2, [r3, #6]
 800c91e:	2200      	movs	r2, #0
 800c920:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c928:	f005 fe26 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c92c:	f005 fe0c 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c930:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	b2db      	uxtb	r3, r3
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c948:	f005 fe54 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c94c:	f005 fdf0 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c950:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2200      	movs	r2, #0
 800c956:	f062 024c 	orn	r2, r2, #76	; 0x4c
 800c95a:	701a      	strb	r2, [r3, #0]
 800c95c:	2200      	movs	r2, #0
 800c95e:	705a      	strb	r2, [r3, #1]
 800c960:	2200      	movs	r2, #0
 800c962:	709a      	strb	r2, [r3, #2]
 800c964:	2200      	movs	r2, #0
 800c966:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f042 0201 	orr.w	r2, r2, #1
 800c970:	711a      	strb	r2, [r3, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	715a      	strb	r2, [r3, #5]
 800c976:	2200      	movs	r2, #0
 800c978:	719a      	strb	r2, [r3, #6]
 800c97a:	2200      	movs	r2, #0
 800c97c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c984:	f005 fdf8 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c988:	f005 fdde 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c98c:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	b2db      	uxtb	r3, r3
}
 800c994:	4618      	mov	r0, r3
 800c996:	3710      	adds	r7, #16
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c9a4:	f005 fe26 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c9a8:	f005 fdc2 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800c9ac:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	f062 0255 	orn	r2, r2, #85	; 0x55
 800c9b6:	701a      	strb	r2, [r3, #0]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	705a      	strb	r2, [r3, #1]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	709a      	strb	r2, [r3, #2]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f042 0201 	orr.w	r2, r2, #1
 800c9cc:	711a      	strb	r2, [r3, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	715a      	strb	r2, [r3, #5]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	719a      	strb	r2, [r3, #6]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c9e0:	f005 fdca 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c9e4:	f005 fdb0 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c9e8:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	b29b      	uxth	r3, r3
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ca00:	f005 fdf8 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ca04:	f005 fd94 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800ca08:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f062 0254 	orn	r2, r2, #84	; 0x54
 800ca12:	701a      	strb	r2, [r3, #0]
 800ca14:	2200      	movs	r2, #0
 800ca16:	705a      	strb	r2, [r3, #1]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	709a      	strb	r2, [r3, #2]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f042 0201 	orr.w	r2, r2, #1
 800ca28:	711a      	strb	r2, [r3, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	715a      	strb	r2, [r3, #5]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	719a      	strb	r2, [r3, #6]
 800ca32:	2200      	movs	r2, #0
 800ca34:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ca3c:	f005 fd9c 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ca40:	f005 fd82 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ca44:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	b2db      	uxtb	r3, r3
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ca5c:	f005 fdca 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ca60:	f005 fd66 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800ca64:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f062 0253 	orn	r2, r2, #83	; 0x53
 800ca6e:	701a      	strb	r2, [r3, #0]
 800ca70:	2200      	movs	r2, #0
 800ca72:	705a      	strb	r2, [r3, #1]
 800ca74:	2200      	movs	r2, #0
 800ca76:	709a      	strb	r2, [r3, #2]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f042 0201 	orr.w	r2, r2, #1
 800ca84:	711a      	strb	r2, [r3, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	715a      	strb	r2, [r3, #5]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	719a      	strb	r2, [r3, #6]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ca98:	f005 fd6e 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ca9c:	f005 fd54 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800caa0:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	689b      	ldr	r3, [r3, #8]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b084      	sub	sp, #16
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
 800cab6:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800cab8:	f005 fd9c 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cabc:	f005 fd38 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cac0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f062 0259 	orn	r2, r2, #89	; 0x59
 800caca:	701a      	strb	r2, [r3, #0]
 800cacc:	2200      	movs	r2, #0
 800cace:	705a      	strb	r2, [r3, #1]
 800cad0:	2200      	movs	r2, #0
 800cad2:	709a      	strb	r2, [r3, #2]
 800cad4:	2200      	movs	r2, #0
 800cad6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	f042 0201 	orr.w	r2, r2, #1
 800cae0:	711a      	strb	r2, [r3, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	715a      	strb	r2, [r3, #5]
 800cae6:	2200      	movs	r2, #0
 800cae8:	719a      	strb	r2, [r3, #6]
 800caea:	2200      	movs	r2, #0
 800caec:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800caf4:	f005 fd40 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800caf8:	f005 fd26 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cafc:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	689b      	ldr	r3, [r3, #8]

}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b086      	sub	sp, #24
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	60f8      	str	r0, [r7, #12]
 800cb12:	60b9      	str	r1, [r7, #8]
 800cb14:	607a      	str	r2, [r7, #4]
 800cb16:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 800cb18:	f005 fd6c 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cb1c:	f005 fd08 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cb20:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f062 0258 	orn	r2, r2, #88	; 0x58
 800cb2a:	701a      	strb	r2, [r3, #0]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	705a      	strb	r2, [r3, #1]
 800cb30:	2200      	movs	r2, #0
 800cb32:	709a      	strb	r2, [r3, #2]
 800cb34:	2200      	movs	r2, #0
 800cb36:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f042 0203 	orr.w	r2, r2, #3
 800cb40:	711a      	strb	r2, [r3, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	715a      	strb	r2, [r3, #5]
 800cb46:	2200      	movs	r2, #0
 800cb48:	719a      	strb	r2, [r3, #6]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 800cb60:	6a3a      	ldr	r2, [r7, #32]
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800cb66:	f005 fd07 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cb6a:	f005 fced 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cb6e:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	b2db      	uxtb	r3, r3
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b084      	sub	sp, #16
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	460b      	mov	r3, r1
 800cb88:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800cb8a:	f005 fd33 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cb8e:	f005 fccf 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cb92:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2200      	movs	r2, #0
 800cb98:	f062 024b 	orn	r2, r2, #75	; 0x4b
 800cb9c:	701a      	strb	r2, [r3, #0]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	705a      	strb	r2, [r3, #1]
 800cba2:	2200      	movs	r2, #0
 800cba4:	709a      	strb	r2, [r3, #2]
 800cba6:	2200      	movs	r2, #0
 800cba8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2200      	movs	r2, #0
 800cbae:	f042 0201 	orr.w	r2, r2, #1
 800cbb2:	711a      	strb	r2, [r3, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	715a      	strb	r2, [r3, #5]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	719a      	strb	r2, [r3, #6]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 800cbc0:	887a      	ldrh	r2, [r7, #2]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cbc6:	f005 fcd7 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cbca:	f005 fcbd 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cbce:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	b2db      	uxtb	r3, r3
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b084      	sub	sp, #16
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800cbe8:	f005 fd04 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cbec:	f005 fca0 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cbf0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f062 0249 	orn	r2, r2, #73	; 0x49
 800cbfa:	701a      	strb	r2, [r3, #0]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	705a      	strb	r2, [r3, #1]
 800cc00:	2200      	movs	r2, #0
 800cc02:	709a      	strb	r2, [r3, #2]
 800cc04:	2200      	movs	r2, #0
 800cc06:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f042 0201 	orr.w	r2, r2, #1
 800cc10:	711a      	strb	r2, [r3, #4]
 800cc12:	2200      	movs	r2, #0
 800cc14:	715a      	strb	r2, [r3, #5]
 800cc16:	2200      	movs	r2, #0
 800cc18:	719a      	strb	r2, [r3, #6]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 800cc1e:	683a      	ldr	r2, [r7, #0]
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cc24:	f005 fca8 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cc28:	f005 fc8e 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cc2c:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	689b      	ldr	r3, [r3, #8]
 800cc32:	b2db      	uxtb	r3, r3
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b086      	sub	sp, #24
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800cc48:	f005 fcd4 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cc4c:	f005 fc70 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cc50:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f062 0257 	orn	r2, r2, #87	; 0x57
 800cc5a:	701a      	strb	r2, [r3, #0]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	705a      	strb	r2, [r3, #1]
 800cc60:	2200      	movs	r2, #0
 800cc62:	709a      	strb	r2, [r3, #2]
 800cc64:	2200      	movs	r2, #0
 800cc66:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f042 0202 	orr.w	r2, r2, #2
 800cc70:	711a      	strb	r2, [r3, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	715a      	strb	r2, [r3, #5]
 800cc76:	2200      	movs	r2, #0
 800cc78:	719a      	strb	r2, [r3, #6]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800cc7e:	68ba      	ldr	r2, [r7, #8]
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800cc8a:	f005 fc75 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cc8e:	f005 fc5b 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cc92:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	b2db      	uxtb	r3, r3
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b082      	sub	sp, #8
 800cca6:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 800cca8:	f005 fca4 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ccac:	f005 fc40 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800ccb0:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f062 026b 	orn	r2, r2, #107	; 0x6b
 800ccba:	701a      	strb	r2, [r3, #0]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	705a      	strb	r2, [r3, #1]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	709a      	strb	r2, [r3, #2]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	711a      	strb	r2, [r3, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	715a      	strb	r2, [r3, #5]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	719a      	strb	r2, [r3, #6]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800ccda:	f005 fc4d 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ccde:	f005 fc33 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cce2:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	689b      	ldr	r3, [r3, #8]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3708      	adds	r7, #8
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ccf8:	f005 fc7c 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ccfc:	f005 fc18 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cd00:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f062 0269 	orn	r2, r2, #105	; 0x69
 800cd0a:	701a      	strb	r2, [r3, #0]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	705a      	strb	r2, [r3, #1]
 800cd10:	2200      	movs	r2, #0
 800cd12:	709a      	strb	r2, [r3, #2]
 800cd14:	2200      	movs	r2, #0
 800cd16:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	711a      	strb	r2, [r3, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	715a      	strb	r2, [r3, #5]
 800cd22:	2200      	movs	r2, #0
 800cd24:	719a      	strb	r2, [r3, #6]
 800cd26:	2200      	movs	r2, #0
 800cd28:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800cd2a:	f005 fc25 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cd2e:	f005 fc0b 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cd32:	60f8      	str	r0, [r7, #12]
}
 800cd34:	bf00      	nop
 800cd36:	3710      	adds	r7, #16
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800cd48:	f005 fc54 	bl	80125f4 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 800cd4c:	4a15      	ldr	r2, [pc, #84]	; (800cda4 <otSetStateChangedCallback+0x68>)
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cd52:	f005 fbed 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cd56:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f062 0268 	orn	r2, r2, #104	; 0x68
 800cd60:	701a      	strb	r2, [r3, #0]
 800cd62:	2200      	movs	r2, #0
 800cd64:	705a      	strb	r2, [r3, #1]
 800cd66:	2200      	movs	r2, #0
 800cd68:	709a      	strb	r2, [r3, #2]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f042 0201 	orr.w	r2, r2, #1
 800cd76:	711a      	strb	r2, [r3, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	715a      	strb	r2, [r3, #5]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	719a      	strb	r2, [r3, #6]
 800cd80:	2200      	movs	r2, #0
 800cd82:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cd8a:	f005 fbf5 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cd8e:	f005 fbdb 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cd92:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	b2db      	uxtb	r3, r3
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3718      	adds	r7, #24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	20000354 	.word	0x20000354

0800cda8 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800cdb0:	f005 fc20 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cdb4:	f005 fbbc 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cdb8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f062 0264 	orn	r2, r2, #100	; 0x64
 800cdc2:	701a      	strb	r2, [r3, #0]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	705a      	strb	r2, [r3, #1]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	709a      	strb	r2, [r3, #2]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	711a      	strb	r2, [r3, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	715a      	strb	r2, [r3, #5]
 800cdda:	2200      	movs	r2, #0
 800cddc:	719a      	strb	r2, [r3, #6]
 800cdde:	2200      	movs	r2, #0
 800cde0:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800cde2:	f005 fbc9 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cde6:	f005 fbaf 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cdea:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	689b      	ldr	r3, [r3, #8]
 800cdf0:	b2db      	uxtb	r3, r3
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b084      	sub	sp, #16
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	460b      	mov	r3, r1
 800ce04:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800ce06:	f005 fbf5 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ce0a:	f005 fb91 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800ce0e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800ce18:	701a      	strb	r2, [r3, #0]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	705a      	strb	r2, [r3, #1]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	709a      	strb	r2, [r3, #2]
 800ce22:	2200      	movs	r2, #0
 800ce24:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f042 0201 	orr.w	r2, r2, #1
 800ce2e:	711a      	strb	r2, [r3, #4]
 800ce30:	2200      	movs	r2, #0
 800ce32:	715a      	strb	r2, [r3, #5]
 800ce34:	2200      	movs	r2, #0
 800ce36:	719a      	strb	r2, [r3, #6]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800ce3c:	78fa      	ldrb	r2, [r7, #3]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800ce42:	f005 fb99 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ce46:	f005 fb7f 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ce4a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	b2db      	uxtb	r3, r3
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b084      	sub	sp, #16
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ce62:	f005 fbc7 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ce66:	f005 fb63 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800ce6a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800ce74:	701a      	strb	r2, [r3, #0]
 800ce76:	2200      	movs	r2, #0
 800ce78:	705a      	strb	r2, [r3, #1]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	709a      	strb	r2, [r3, #2]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2200      	movs	r2, #0
 800ce86:	711a      	strb	r2, [r3, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	715a      	strb	r2, [r3, #5]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	719a      	strb	r2, [r3, #6]
 800ce90:	2200      	movs	r2, #0
 800ce92:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800ce94:	f005 fb70 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ce98:	f005 fb56 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ce9c:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	bf14      	ite	ne
 800cea6:	2301      	movne	r3, #1
 800cea8:	2300      	moveq	r3, #0
 800ceaa:	b2db      	uxtb	r3, r3
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800cebc:	f005 fb9a 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cec0:	f005 fb36 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cec4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 800cece:	701a      	strb	r2, [r3, #0]
 800ced0:	2200      	movs	r2, #0
 800ced2:	705a      	strb	r2, [r3, #1]
 800ced4:	2200      	movs	r2, #0
 800ced6:	709a      	strb	r2, [r3, #2]
 800ced8:	2200      	movs	r2, #0
 800ceda:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2200      	movs	r2, #0
 800cee0:	711a      	strb	r2, [r3, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	715a      	strb	r2, [r3, #5]
 800cee6:	2200      	movs	r2, #0
 800cee8:	719a      	strb	r2, [r3, #6]
 800ceea:	2200      	movs	r2, #0
 800ceec:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800ceee:	f005 fb43 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cef2:	f005 fb29 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cef6:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	689b      	ldr	r3, [r3, #8]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <otIp6GetMulticastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifMulticastAddress *otIp6GetMulticastAddresses(otInstance *aInstance)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800cf0c:	f005 fb72 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cf10:	f005 fb0e 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cf14:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_MULTICAST_ADDRESSES;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 800cf1e:	701a      	strb	r2, [r3, #0]
 800cf20:	2200      	movs	r2, #0
 800cf22:	705a      	strb	r2, [r3, #1]
 800cf24:	2200      	movs	r2, #0
 800cf26:	709a      	strb	r2, [r3, #2]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	711a      	strb	r2, [r3, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	715a      	strb	r2, [r3, #5]
 800cf36:	2200      	movs	r2, #0
 800cf38:	719a      	strb	r2, [r3, #6]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800cf3e:	f005 fb1b 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cf42:	f005 fb01 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cf46:	60f8      	str	r0, [r7, #12]
  return (otNetifMulticastAddress *)p_ot_req->Data[0];
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	689b      	ldr	r3, [r3, #8]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800cf5e:	f005 fb49 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cf62:	f005 fae5 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cf66:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800cf70:	701a      	strb	r2, [r3, #0]
 800cf72:	2200      	movs	r2, #0
 800cf74:	705a      	strb	r2, [r3, #1]
 800cf76:	2200      	movs	r2, #0
 800cf78:	709a      	strb	r2, [r3, #2]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f042 0202 	orr.w	r2, r2, #2
 800cf86:	711a      	strb	r2, [r3, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	715a      	strb	r2, [r3, #5]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	719a      	strb	r2, [r3, #6]
 800cf90:	2200      	movs	r2, #0
 800cf92:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800cf9a:	683a      	ldr	r2, [r7, #0]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800cfa0:	f005 faea 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cfa4:	f005 fad0 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cfa8:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	b2db      	uxtb	r3, r3
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800cfc4:	f005 fb16 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cfc8:	f005 fab2 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800cfcc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f042 0208 	orr.w	r2, r2, #8
 800cfd6:	701a      	strb	r2, [r3, #0]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	705a      	strb	r2, [r3, #1]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	709a      	strb	r2, [r3, #2]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f042 0201 	orr.w	r2, r2, #1
 800cfec:	711a      	strb	r2, [r3, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	715a      	strb	r2, [r3, #5]
 800cff2:	2200      	movs	r2, #0
 800cff4:	719a      	strb	r2, [r3, #6]
 800cff6:	2200      	movs	r2, #0
 800cff8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800cffa:	78fa      	ldrb	r2, [r7, #3]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d000:	f005 faba 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d004:	f005 faa0 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d008:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	b2db      	uxtb	r3, r3
}
 800d010:	4618      	mov	r0, r3
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	460b      	mov	r3, r1
 800d022:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800d024:	f005 fae6 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d028:	f005 fa82 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d02c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2200      	movs	r2, #0
 800d032:	f042 020f 	orr.w	r2, r2, #15
 800d036:	701a      	strb	r2, [r3, #0]
 800d038:	2200      	movs	r2, #0
 800d03a:	705a      	strb	r2, [r3, #1]
 800d03c:	2200      	movs	r2, #0
 800d03e:	709a      	strb	r2, [r3, #2]
 800d040:	2200      	movs	r2, #0
 800d042:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2200      	movs	r2, #0
 800d048:	f042 0201 	orr.w	r2, r2, #1
 800d04c:	711a      	strb	r2, [r3, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	715a      	strb	r2, [r3, #5]
 800d052:	2200      	movs	r2, #0
 800d054:	719a      	strb	r2, [r3, #6]
 800d056:	2200      	movs	r2, #0
 800d058:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800d05a:	887a      	ldrh	r2, [r7, #2]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d060:	f005 fa8a 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d064:	f005 fa70 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d068:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	b2db      	uxtb	r3, r3
}
 800d070:	4618      	mov	r0, r3
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800d080:	f005 fab8 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d084:	f005 fa54 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d088:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2200      	movs	r2, #0
 800d08e:	f062 0246 	orn	r2, r2, #70	; 0x46
 800d092:	701a      	strb	r2, [r3, #0]
 800d094:	2200      	movs	r2, #0
 800d096:	705a      	strb	r2, [r3, #1]
 800d098:	2200      	movs	r2, #0
 800d09a:	709a      	strb	r2, [r3, #2]
 800d09c:	2200      	movs	r2, #0
 800d09e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f042 0201 	orr.w	r2, r2, #1
 800d0a8:	711a      	strb	r2, [r3, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	715a      	strb	r2, [r3, #5]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	719a      	strb	r2, [r3, #6]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d0bc:	f005 fa5c 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d0c0:	f005 fa42 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d0c4:	60f8      	str	r0, [r7, #12]
}
 800d0c6:	bf00      	nop
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b084      	sub	sp, #16
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800d0d6:	f005 fa8d 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d0da:	f005 fa29 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d0de:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f062 0243 	orn	r2, r2, #67	; 0x43
 800d0e8:	701a      	strb	r2, [r3, #0]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	705a      	strb	r2, [r3, #1]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	709a      	strb	r2, [r3, #2]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f042 0201 	orr.w	r2, r2, #1
 800d0fe:	711a      	strb	r2, [r3, #4]
 800d100:	2200      	movs	r2, #0
 800d102:	715a      	strb	r2, [r3, #5]
 800d104:	2200      	movs	r2, #0
 800d106:	719a      	strb	r2, [r3, #6]
 800d108:	2200      	movs	r2, #0
 800d10a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d112:	f005 fa31 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d116:	f005 fa17 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d11a:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	b29b      	uxth	r3, r3
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b086      	sub	sp, #24
 800d12e:	af00      	add	r7, sp, #0
 800d130:	60f8      	str	r0, [r7, #12]
 800d132:	60b9      	str	r1, [r7, #8]
 800d134:	4613      	mov	r3, r2
 800d136:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 800d138:	f005 fa5c 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d13c:	f005 f9f8 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d140:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	2200      	movs	r2, #0
 800d146:	f062 023e 	orn	r2, r2, #62	; 0x3e
 800d14a:	701a      	strb	r2, [r3, #0]
 800d14c:	2200      	movs	r2, #0
 800d14e:	705a      	strb	r2, [r3, #1]
 800d150:	2200      	movs	r2, #0
 800d152:	709a      	strb	r2, [r3, #2]
 800d154:	2200      	movs	r2, #0
 800d156:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f042 0203 	orr.w	r2, r2, #3
 800d160:	711a      	strb	r2, [r3, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	715a      	strb	r2, [r3, #5]
 800d166:	2200      	movs	r2, #0
 800d168:	719a      	strb	r2, [r3, #6]
 800d16a:	2200      	movs	r2, #0
 800d16c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800d174:	68ba      	ldr	r2, [r7, #8]
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800d17a:	88fa      	ldrh	r2, [r7, #6]
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800d180:	f005 f9fa 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d184:	f005 f9e0 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d188:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	b2db      	uxtb	r3, r3
}
 800d190:	4618      	mov	r0, r3
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	607a      	str	r2, [r7, #4]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	817b      	strh	r3, [r7, #10]
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 800d1ac:	f005 fa22 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d1b0:	f005 f9be 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d1b4:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f062 023d 	orn	r2, r2, #61	; 0x3d
 800d1be:	701a      	strb	r2, [r3, #0]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	705a      	strb	r2, [r3, #1]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	709a      	strb	r2, [r3, #2]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f042 0204 	orr.w	r2, r2, #4
 800d1d4:	711a      	strb	r2, [r3, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	715a      	strb	r2, [r3, #5]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	719a      	strb	r2, [r3, #6]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 800d1e8:	897a      	ldrh	r2, [r7, #10]
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 800d1f4:	893a      	ldrh	r2, [r7, #8]
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800d1fa:	f005 f9bd 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d1fe:	f005 f9a3 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d202:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	689b      	ldr	r3, [r3, #8]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3718      	adds	r7, #24
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800d210:	b5b0      	push	{r4, r5, r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800d216:	2300      	movs	r3, #0
 800d218:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800d21a:	f005 f9a1 	bl	8012560 <THREAD_Get_NotificationPayloadBuffer>
 800d21e:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	3b01      	subs	r3, #1
 800d226:	2b17      	cmp	r3, #23
 800d228:	f200 81c3 	bhi.w	800d5b2 <OpenThread_CallBack_Processing+0x3a2>
 800d22c:	a201      	add	r2, pc, #4	; (adr r2, 800d234 <OpenThread_CallBack_Processing+0x24>)
 800d22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d232:	bf00      	nop
 800d234:	0800d295 	.word	0x0800d295
 800d238:	0800d2b1 	.word	0x0800d2b1
 800d23c:	0800d315 	.word	0x0800d315
 800d240:	0800d35d 	.word	0x0800d35d
 800d244:	0800d369 	.word	0x0800d369
 800d248:	0800d387 	.word	0x0800d387
 800d24c:	0800d3a5 	.word	0x0800d3a5
 800d250:	0800d3c3 	.word	0x0800d3c3
 800d254:	0800d3e1 	.word	0x0800d3e1
 800d258:	0800d3ff 	.word	0x0800d3ff
 800d25c:	0800d421 	.word	0x0800d421
 800d260:	0800d43f 	.word	0x0800d43f
 800d264:	0800d5b3 	.word	0x0800d5b3
 800d268:	0800d465 	.word	0x0800d465
 800d26c:	0800d499 	.word	0x0800d499
 800d270:	0800d4c1 	.word	0x0800d4c1
 800d274:	0800d4df 	.word	0x0800d4df
 800d278:	0800d54d 	.word	0x0800d54d
 800d27c:	0800d575 	.word	0x0800d575
 800d280:	0800d5b3 	.word	0x0800d5b3
 800d284:	0800d593 	.word	0x0800d593
 800d288:	0800d5b3 	.word	0x0800d5b3
 800d28c:	0800d5b3 	.word	0x0800d5b3
 800d290:	0800d2ed 	.word	0x0800d2ed
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800d294:	4b9b      	ldr	r3, [pc, #620]	; (800d504 <OpenThread_CallBack_Processing+0x2f4>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 818d 	beq.w	800d5b8 <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800d29e:	4b99      	ldr	r3, [pc, #612]	; (800d504 <OpenThread_CallBack_Processing+0x2f4>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	683a      	ldr	r2, [r7, #0]
 800d2a4:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 800d2a6:	683a      	ldr	r2, [r7, #0]
 800d2a8:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800d2aa:	4611      	mov	r1, r2
 800d2ac:	4798      	blx	r3
        }
        break;
 800d2ae:	e183      	b.n	800d5b8 <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	4b94      	ldr	r3, [pc, #592]	; (800d508 <OpenThread_CallBack_Processing+0x2f8>)
 800d2b8:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 800d2ba:	4b93      	ldr	r3, [pc, #588]	; (800d508 <OpenThread_CallBack_Processing+0x2f8>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	4a92      	ldr	r2, [pc, #584]	; (800d50c <OpenThread_CallBack_Processing+0x2fc>)
 800d2c2:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 800d2c4:	4b91      	ldr	r3, [pc, #580]	; (800d50c <OpenThread_CallBack_Processing+0x2fc>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f000 8177 	beq.w	800d5bc <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d2ce:	4b8f      	ldr	r3, [pc, #572]	; (800d50c <OpenThread_CallBack_Processing+0x2fc>)
 800d2d0:	681c      	ldr	r4, [r3, #0]
 800d2d2:	4b8d      	ldr	r3, [pc, #564]	; (800d508 <OpenThread_CallBack_Processing+0x2f8>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d2dc:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d2e2:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d2e8:	47a0      	blx	r4
        }
        break;
 800d2ea:	e167      	b.n	800d5bc <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 800d2ec:	4b88      	ldr	r3, [pc, #544]	; (800d510 <OpenThread_CallBack_Processing+0x300>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f000 8165 	beq.w	800d5c0 <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d2f6:	4b86      	ldr	r3, [pc, #536]	; (800d510 <OpenThread_CallBack_Processing+0x300>)
 800d2f8:	681c      	ldr	r4, [r3, #0]
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d304:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d30a:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d310:	47a0      	blx	r4
        }
        break;
 800d312:	e155      	b.n	800d5c0 <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	461a      	mov	r2, r3
 800d31a:	4b7e      	ldr	r3, [pc, #504]	; (800d514 <OpenThread_CallBack_Processing+0x304>)
 800d31c:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800d31e:	4b7d      	ldr	r3, [pc, #500]	; (800d514 <OpenThread_CallBack_Processing+0x304>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	4a7c      	ldr	r2, [pc, #496]	; (800d518 <OpenThread_CallBack_Processing+0x308>)
 800d326:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 800d328:	4b7b      	ldr	r3, [pc, #492]	; (800d518 <OpenThread_CallBack_Processing+0x308>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f000 8149 	beq.w	800d5c4 <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d332:	4b79      	ldr	r3, [pc, #484]	; (800d518 <OpenThread_CallBack_Processing+0x308>)
 800d334:	681c      	ldr	r4, [r3, #0]
 800d336:	4b77      	ldr	r3, [pc, #476]	; (800d514 <OpenThread_CallBack_Processing+0x304>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d340:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d346:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d34c:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d352:	b2db      	uxtb	r3, r3
 800d354:	9300      	str	r3, [sp, #0]
 800d356:	462b      	mov	r3, r5
 800d358:	47a0      	blx	r4
        }
        break;
 800d35a:	e133      	b.n	800d5c4 <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800d35c:	2001      	movs	r0, #1
 800d35e:	f7fe fd00 	bl	800bd62 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800d362:	f7f7 f978 	bl	8004656 <HAL_NVIC_SystemReset>
        break;
 800d366:	e14c      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 800d368:	4b6c      	ldr	r3, [pc, #432]	; (800d51c <OpenThread_CallBack_Processing+0x30c>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f000 812b 	beq.w	800d5c8 <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800d372:	4b6a      	ldr	r3, [pc, #424]	; (800d51c <OpenThread_CallBack_Processing+0x30c>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	683a      	ldr	r2, [r7, #0]
 800d378:	6892      	ldr	r2, [r2, #8]
 800d37a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d37c:	683a      	ldr	r2, [r7, #0]
 800d37e:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800d380:	4611      	mov	r1, r2
 800d382:	4798      	blx	r3
        }
        break;
 800d384:	e120      	b.n	800d5c8 <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 800d386:	4b66      	ldr	r3, [pc, #408]	; (800d520 <OpenThread_CallBack_Processing+0x310>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f000 811e 	beq.w	800d5cc <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800d390:	4b63      	ldr	r3, [pc, #396]	; (800d520 <OpenThread_CallBack_Processing+0x310>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	683a      	ldr	r2, [r7, #0]
 800d396:	6892      	ldr	r2, [r2, #8]
 800d398:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800d39e:	2000      	movs	r0, #0
 800d3a0:	4798      	blx	r3
        }
        break;
 800d3a2:	e113      	b.n	800d5cc <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 800d3a4:	4b5f      	ldr	r3, [pc, #380]	; (800d524 <OpenThread_CallBack_Processing+0x314>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f000 8111 	beq.w	800d5d0 <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800d3ae:	4b5d      	ldr	r3, [pc, #372]	; (800d524 <OpenThread_CallBack_Processing+0x314>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	683a      	ldr	r2, [r7, #0]
 800d3b4:	6892      	ldr	r2, [r2, #8]
 800d3b6:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d3b8:	683a      	ldr	r2, [r7, #0]
 800d3ba:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800d3bc:	4611      	mov	r1, r2
 800d3be:	4798      	blx	r3
        }
        break;
 800d3c0:	e106      	b.n	800d5d0 <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 800d3c2:	4b59      	ldr	r3, [pc, #356]	; (800d528 <OpenThread_CallBack_Processing+0x318>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f000 8104 	beq.w	800d5d4 <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800d3cc:	4b56      	ldr	r3, [pc, #344]	; (800d528 <OpenThread_CallBack_Processing+0x318>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	683a      	ldr	r2, [r7, #0]
 800d3d2:	6892      	ldr	r2, [r2, #8]
 800d3d4:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d3d6:	683a      	ldr	r2, [r7, #0]
 800d3d8:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800d3da:	4611      	mov	r1, r2
 800d3dc:	4798      	blx	r3
        }
        break;
 800d3de:	e0f9      	b.n	800d5d4 <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 800d3e0:	4b52      	ldr	r3, [pc, #328]	; (800d52c <OpenThread_CallBack_Processing+0x31c>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f000 80f7 	beq.w	800d5d8 <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800d3ea:	4b50      	ldr	r3, [pc, #320]	; (800d52c <OpenThread_CallBack_Processing+0x31c>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	683a      	ldr	r2, [r7, #0]
 800d3f0:	6892      	ldr	r2, [r2, #8]
 800d3f2:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d3f4:	683a      	ldr	r2, [r7, #0]
 800d3f6:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	4798      	blx	r3
        }
        break;
 800d3fc:	e0ec      	b.n	800d5d8 <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800d3fe:	4b4c      	ldr	r3, [pc, #304]	; (800d530 <OpenThread_CallBack_Processing+0x320>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	f000 80ea 	beq.w	800d5dc <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d408:	4b49      	ldr	r3, [pc, #292]	; (800d530 <OpenThread_CallBack_Processing+0x320>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	683a      	ldr	r2, [r7, #0]
 800d40e:	6892      	ldr	r2, [r2, #8]
 800d410:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d416:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 800d418:	683a      	ldr	r2, [r7, #0]
 800d41a:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d41c:	4798      	blx	r3
        }
        break;
 800d41e:	e0dd      	b.n	800d5dc <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800d420:	4b44      	ldr	r3, [pc, #272]	; (800d534 <OpenThread_CallBack_Processing+0x324>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2b00      	cmp	r3, #0
 800d426:	f000 80db 	beq.w	800d5e0 <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800d42a:	4b42      	ldr	r3, [pc, #264]	; (800d534 <OpenThread_CallBack_Processing+0x324>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	683a      	ldr	r2, [r7, #0]
 800d430:	6892      	ldr	r2, [r2, #8]
 800d432:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 800d434:	683a      	ldr	r2, [r7, #0]
 800d436:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800d438:	4611      	mov	r1, r2
 800d43a:	4798      	blx	r3
        }
        break;
 800d43c:	e0d0      	b.n	800d5e0 <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800d43e:	4b3e      	ldr	r3, [pc, #248]	; (800d538 <OpenThread_CallBack_Processing+0x328>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	f000 80ce 	beq.w	800d5e4 <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d448:	4b3b      	ldr	r3, [pc, #236]	; (800d538 <OpenThread_CallBack_Processing+0x328>)
 800d44a:	681c      	ldr	r4, [r3, #0]
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d454:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d45a:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d460:	47a0      	blx	r4
        }
        break;
 800d462:	e0bf      	b.n	800d5e4 <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 800d464:	4b35      	ldr	r3, [pc, #212]	; (800d53c <OpenThread_CallBack_Processing+0x32c>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f000 80bd 	beq.w	800d5e8 <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d46e:	4b33      	ldr	r3, [pc, #204]	; (800d53c <OpenThread_CallBack_Processing+0x32c>)
 800d470:	681c      	ldr	r4, [r3, #0]
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d47c:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d482:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	4613      	mov	r3, r2
 800d492:	462a      	mov	r2, r5
 800d494:	47a0      	blx	r4
        }
        break;
 800d496:	e0a7      	b.n	800d5e8 <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 800d498:	4b29      	ldr	r3, [pc, #164]	; (800d540 <OpenThread_CallBack_Processing+0x330>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f000 80a5 	beq.w	800d5ec <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d4a2:	4b27      	ldr	r3, [pc, #156]	; (800d540 <OpenThread_CallBack_Processing+0x330>)
 800d4a4:	681c      	ldr	r4, [r3, #0]
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d4b0:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d4b6:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d4bc:	47a0      	blx	r4
        }
        break;
 800d4be:	e095      	b.n	800d5ec <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 800d4c0:	4b20      	ldr	r3, [pc, #128]	; (800d544 <OpenThread_CallBack_Processing+0x334>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f000 8093 	beq.w	800d5f0 <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 800d4ca:	4b1e      	ldr	r3, [pc, #120]	; (800d544 <OpenThread_CallBack_Processing+0x334>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	683a      	ldr	r2, [r7, #0]
 800d4d0:	6892      	ldr	r2, [r2, #8]
 800d4d2:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 800d4d4:	683a      	ldr	r2, [r7, #0]
 800d4d6:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 800d4d8:	4611      	mov	r1, r2
 800d4da:	4798      	blx	r3
        }
        break;
 800d4dc:	e088      	b.n	800d5f0 <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 800d4de:	4b1a      	ldr	r3, [pc, #104]	; (800d548 <OpenThread_CallBack_Processing+0x338>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f000 8086 	beq.w	800d5f4 <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d4e8:	4b17      	ldr	r3, [pc, #92]	; (800d548 <OpenThread_CallBack_Processing+0x338>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	683a      	ldr	r2, [r7, #0]
 800d4ee:	6892      	ldr	r2, [r2, #8]
 800d4f0:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 800d4f2:	683a      	ldr	r2, [r7, #0]
 800d4f4:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d4f6:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 800d4f8:	683a      	ldr	r2, [r7, #0]
 800d4fa:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d4fc:	b2d2      	uxtb	r2, r2
 800d4fe:	4798      	blx	r3
        }
        break;
 800d500:	e078      	b.n	800d5f4 <OpenThread_CallBack_Processing+0x3e4>
 800d502:	bf00      	nop
 800d504:	20000354 	.word	0x20000354
 800d508:	20004fc0 	.word	0x20004fc0
 800d50c:	20000394 	.word	0x20000394
 800d510:	20000398 	.word	0x20000398
 800d514:	20004fbc 	.word	0x20004fbc
 800d518:	2000039c 	.word	0x2000039c
 800d51c:	2000035c 	.word	0x2000035c
 800d520:	20000358 	.word	0x20000358
 800d524:	20000360 	.word	0x20000360
 800d528:	20000364 	.word	0x20000364
 800d52c:	20000368 	.word	0x20000368
 800d530:	2000036c 	.word	0x2000036c
 800d534:	20000370 	.word	0x20000370
 800d538:	20000374 	.word	0x20000374
 800d53c:	20000378 	.word	0x20000378
 800d540:	2000037c 	.word	0x2000037c
 800d544:	20000380 	.word	0x20000380
 800d548:	20000384 	.word	0x20000384
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800d54c:	4b30      	ldr	r3, [pc, #192]	; (800d610 <OpenThread_CallBack_Processing+0x400>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d051      	beq.n	800d5f8 <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d554:	4b2e      	ldr	r3, [pc, #184]	; (800d610 <OpenThread_CallBack_Processing+0x400>)
 800d556:	681c      	ldr	r4, [r3, #0]
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d562:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d568:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	47a0      	blx	r4
        }
        break;
 800d572:	e041      	b.n	800d5f8 <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 800d574:	4b27      	ldr	r3, [pc, #156]	; (800d614 <OpenThread_CallBack_Processing+0x404>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d03f      	beq.n	800d5fc <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800d57c:	4b25      	ldr	r3, [pc, #148]	; (800d614 <OpenThread_CallBack_Processing+0x404>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	683a      	ldr	r2, [r7, #0]
 800d582:	6892      	ldr	r2, [r2, #8]
 800d584:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 800d586:	683a      	ldr	r2, [r7, #0]
 800d588:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800d58a:	b252      	sxtb	r2, r2
 800d58c:	4611      	mov	r1, r2
 800d58e:	4798      	blx	r3
        }
        break;
 800d590:	e034      	b.n	800d5fc <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800d592:	4b21      	ldr	r3, [pc, #132]	; (800d618 <OpenThread_CallBack_Processing+0x408>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d032      	beq.n	800d600 <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d59a:	4b1f      	ldr	r3, [pc, #124]	; (800d618 <OpenThread_CallBack_Processing+0x408>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	6892      	ldr	r2, [r2, #8]
 800d5a2:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 800d5a4:	683a      	ldr	r2, [r7, #0]
 800d5a6:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d5a8:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 800d5aa:	683a      	ldr	r2, [r7, #0]
 800d5ac:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d5ae:	4798      	blx	r3
        }
        break;
 800d5b0:	e026      	b.n	800d600 <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	71fb      	strb	r3, [r7, #7]
        break;
 800d5b6:	e024      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5b8:	bf00      	nop
 800d5ba:	e022      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5bc:	bf00      	nop
 800d5be:	e020      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5c0:	bf00      	nop
 800d5c2:	e01e      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5c4:	bf00      	nop
 800d5c6:	e01c      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5c8:	bf00      	nop
 800d5ca:	e01a      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5cc:	bf00      	nop
 800d5ce:	e018      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5d0:	bf00      	nop
 800d5d2:	e016      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5d4:	bf00      	nop
 800d5d6:	e014      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5d8:	bf00      	nop
 800d5da:	e012      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5dc:	bf00      	nop
 800d5de:	e010      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5e0:	bf00      	nop
 800d5e2:	e00e      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5e4:	bf00      	nop
 800d5e6:	e00c      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5e8:	bf00      	nop
 800d5ea:	e00a      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5ec:	bf00      	nop
 800d5ee:	e008      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5f0:	bf00      	nop
 800d5f2:	e006      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5f4:	bf00      	nop
 800d5f6:	e004      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5f8:	bf00      	nop
 800d5fa:	e002      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5fc:	bf00      	nop
 800d5fe:	e000      	b.n	800d602 <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d600:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800d602:	f7fe fed9 	bl	800c3b8 <TL_THREAD_SendAck>
    return status;
 800d606:	79fb      	ldrb	r3, [r7, #7]

}
 800d608:	4618      	mov	r0, r3
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bdb0      	pop	{r4, r5, r7, pc}
 800d610:	20000388 	.word	0x20000388
 800d614:	2000038c 	.word	0x2000038c
 800d618:	20000390 	.word	0x20000390

0800d61c <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	460b      	mov	r3, r1
 800d626:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800d628:	f004 ffe4 	bl	80125f4 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d62c:	f004 ff80 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d630:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2200      	movs	r2, #0
 800d636:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 800d63a:	701a      	strb	r2, [r3, #0]
 800d63c:	2200      	movs	r2, #0
 800d63e:	f042 0201 	orr.w	r2, r2, #1
 800d642:	705a      	strb	r2, [r3, #1]
 800d644:	2200      	movs	r2, #0
 800d646:	709a      	strb	r2, [r3, #2]
 800d648:	2200      	movs	r2, #0
 800d64a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2200      	movs	r2, #0
 800d650:	f042 0201 	orr.w	r2, r2, #1
 800d654:	711a      	strb	r2, [r3, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	715a      	strb	r2, [r3, #5]
 800d65a:	2200      	movs	r2, #0
 800d65c:	719a      	strb	r2, [r3, #6]
 800d65e:	2200      	movs	r2, #0
 800d660:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800d662:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d66a:	f004 ff85 	bl	8012578 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d66e:	f004 ff6b 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d672:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	b2db      	uxtb	r3, r3
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b084      	sub	sp, #16
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
 800d68a:	460b      	mov	r3, r1
 800d68c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800d68e:	f004 ffb1 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d692:	f004 ff4d 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d696:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800d6a0:	701a      	strb	r2, [r3, #0]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	705a      	strb	r2, [r3, #1]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	709a      	strb	r2, [r3, #2]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f042 0201 	orr.w	r2, r2, #1
 800d6b6:	711a      	strb	r2, [r3, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	715a      	strb	r2, [r3, #5]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	719a      	strb	r2, [r3, #6]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800d6c4:	78fa      	ldrb	r2, [r7, #3]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d6ca:	f004 ff55 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d6ce:	f004 ff3b 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d6d2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	689b      	ldr	r3, [r3, #8]
 800d6d8:	b2db      	uxtb	r3, r3
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <otThreadSetChildTimeout>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI void OTCALL otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b084      	sub	sp, #16
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
 800d6ea:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d6ec:	f004 ff82 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d6f0:	f004 ff1e 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d6f4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_CHILD_TIMEOUT;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 800d6fe:	701a      	strb	r2, [r3, #0]
 800d700:	2200      	movs	r2, #0
 800d702:	705a      	strb	r2, [r3, #1]
 800d704:	2200      	movs	r2, #0
 800d706:	709a      	strb	r2, [r3, #2]
 800d708:	2200      	movs	r2, #0
 800d70a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2200      	movs	r2, #0
 800d710:	f042 0201 	orr.w	r2, r2, #1
 800d714:	711a      	strb	r2, [r3, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	715a      	strb	r2, [r3, #5]
 800d71a:	2200      	movs	r2, #0
 800d71c:	719a      	strb	r2, [r3, #6]
 800d71e:	2200      	movs	r2, #0
 800d720:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aTimeout;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	683a      	ldr	r2, [r7, #0]
 800d726:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d728:	f004 ff26 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d72c:	f004 ff0c 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d730:	60f8      	str	r0, [r7, #12]
}
 800d732:	bf00      	nop
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <otThreadGetMeshLocalEid>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b084      	sub	sp, #16
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d742:	f004 ff57 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d746:	f004 fef3 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d74a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2200      	movs	r2, #0
 800d750:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 800d754:	701a      	strb	r2, [r3, #0]
 800d756:	2200      	movs	r2, #0
 800d758:	705a      	strb	r2, [r3, #1]
 800d75a:	2200      	movs	r2, #0
 800d75c:	709a      	strb	r2, [r3, #2]
 800d75e:	2200      	movs	r2, #0
 800d760:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2200      	movs	r2, #0
 800d766:	711a      	strb	r2, [r3, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	715a      	strb	r2, [r3, #5]
 800d76c:	2200      	movs	r2, #0
 800d76e:	719a      	strb	r2, [r3, #6]
 800d770:	2200      	movs	r2, #0
 800d772:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d774:	f004 ff00 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d778:	f004 fee6 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d77c:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	689b      	ldr	r3, [r3, #8]
}
 800d782:	4618      	mov	r0, r3
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <otThreadGetLinkLocalIp6Address>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otIp6Address *otThreadGetLinkLocalIp6Address(otInstance *aInstance)
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b084      	sub	sp, #16
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d792:	f004 ff2f 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d796:	f004 fecb 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d79a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_LINK_LOCAL_IP6_ADDRESS;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 800d7a4:	701a      	strb	r2, [r3, #0]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	705a      	strb	r2, [r3, #1]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	709a      	strb	r2, [r3, #2]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	711a      	strb	r2, [r3, #4]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	715a      	strb	r2, [r3, #5]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	719a      	strb	r2, [r3, #6]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d7c4:	f004 fed8 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d7c8:	f004 febe 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d7cc:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	689b      	ldr	r3, [r3, #8]
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b084      	sub	sp, #16
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d7e4:	f004 ff06 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d7e8:	f004 fea2 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d7ec:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 800d7f6:	701a      	strb	r2, [r3, #0]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	705a      	strb	r2, [r3, #1]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	709a      	strb	r2, [r3, #2]
 800d800:	2200      	movs	r2, #0
 800d802:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2200      	movs	r2, #0
 800d808:	f042 0201 	orr.w	r2, r2, #1
 800d80c:	711a      	strb	r2, [r3, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	715a      	strb	r2, [r3, #5]
 800d812:	2200      	movs	r2, #0
 800d814:	719a      	strb	r2, [r3, #6]
 800d816:	2200      	movs	r2, #0
 800d818:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 800d81a:	683a      	ldr	r2, [r7, #0]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d820:	f004 feaa 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d824:	f004 fe90 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d828:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	b2db      	uxtb	r3, r3
}
 800d830:	4618      	mov	r0, r3
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d840:	f004 fed8 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d844:	f004 fe74 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d848:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2200      	movs	r2, #0
 800d84e:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 800d852:	701a      	strb	r2, [r3, #0]
 800d854:	2200      	movs	r2, #0
 800d856:	705a      	strb	r2, [r3, #1]
 800d858:	2200      	movs	r2, #0
 800d85a:	709a      	strb	r2, [r3, #2]
 800d85c:	2200      	movs	r2, #0
 800d85e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2200      	movs	r2, #0
 800d864:	711a      	strb	r2, [r3, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	715a      	strb	r2, [r3, #5]
 800d86a:	2200      	movs	r2, #0
 800d86c:	719a      	strb	r2, [r3, #6]
 800d86e:	2200      	movs	r2, #0
 800d870:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d872:	f004 fe81 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d876:	f004 fe67 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d87a:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	b2db      	uxtb	r3, r3
}
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b084      	sub	sp, #16
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d892:	f004 feaf 	bl	80125f4 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d896:	f004 fe4b 	bl	8012530 <THREAD_Get_OTCmdPayloadBuffer>
 800d89a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d8a4:	701a      	strb	r2, [r3, #0]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	705a      	strb	r2, [r3, #1]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	709a      	strb	r2, [r3, #2]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	711a      	strb	r2, [r3, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	715a      	strb	r2, [r3, #5]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	719a      	strb	r2, [r3, #6]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d8c4:	f004 fe58 	bl	8012578 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d8c8:	f004 fe3e 	bl	8012548 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d8cc:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	b29b      	uxth	r3, r3
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3710      	adds	r7, #16
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	605a      	str	r2, [r3, #4]
}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b087      	sub	sp, #28
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d904:	f3ef 8310 	mrs	r3, PRIMASK
 800d908:	60fb      	str	r3, [r7, #12]
  return(result);
 800d90a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d90c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d90e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	429a      	cmp	r2, r3
 800d918:	d102      	bne.n	800d920 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800d91a:	2301      	movs	r3, #1
 800d91c:	75fb      	strb	r3, [r7, #23]
 800d91e:	e001      	b.n	800d924 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800d920:	2300      	movs	r3, #0
 800d922:	75fb      	strb	r3, [r7, #23]
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800d92e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d930:	4618      	mov	r0, r3
 800d932:	371c      	adds	r7, #28
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b087      	sub	sp, #28
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d946:	f3ef 8310 	mrs	r3, PRIMASK
 800d94a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d94c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d94e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d950:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	683a      	ldr	r2, [r7, #0]
 800d96c:	605a      	str	r2, [r3, #4]
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d978:	bf00      	nop
 800d97a:	371c      	adds	r7, #28
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800d984:	b480      	push	{r7}
 800d986:	b087      	sub	sp, #28
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d98e:	f3ef 8310 	mrs	r3, PRIMASK
 800d992:	60fb      	str	r3, [r7, #12]
  return(result);
 800d994:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d996:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d998:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	685a      	ldr	r2, [r3, #4]
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	601a      	str	r2, [r3, #0]
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d9c0:	bf00      	nop
 800d9c2:	371c      	adds	r7, #28
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b087      	sub	sp, #28
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9d4:	f3ef 8310 	mrs	r3, PRIMASK
 800d9d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d9dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d9de:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	6812      	ldr	r2, [r2, #0]
 800d9e8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	6852      	ldr	r2, [r2, #4]
 800d9f2:	605a      	str	r2, [r3, #4]
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d9fe:	bf00      	nop
 800da00:	371c      	adds	r7, #28
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr

0800da0a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800da0a:	b580      	push	{r7, lr}
 800da0c:	b086      	sub	sp, #24
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
 800da12:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da14:	f3ef 8310 	mrs	r3, PRIMASK
 800da18:	60fb      	str	r3, [r7, #12]
  return(result);
 800da1a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800da1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800da1e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7ff ffcd 	bl	800d9cc <LST_remove_node>
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800da3c:	bf00      	nop
 800da3e:	3718      	adds	r7, #24
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800da44:	b480      	push	{r7}
 800da46:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800da48:	bf00      	nop
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
	...

0800da54 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da5a:	f3ef 8305 	mrs	r3, IPSR
 800da5e:	60bb      	str	r3, [r7, #8]
  return(result);
 800da60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da62:	2b00      	cmp	r3, #0
 800da64:	d10f      	bne.n	800da86 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da66:	f3ef 8310 	mrs	r3, PRIMASK
 800da6a:	607b      	str	r3, [r7, #4]
  return(result);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d105      	bne.n	800da7e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da72:	f3ef 8311 	mrs	r3, BASEPRI
 800da76:	603b      	str	r3, [r7, #0]
  return(result);
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d007      	beq.n	800da8e <osKernelInitialize+0x3a>
 800da7e:	4b0e      	ldr	r3, [pc, #56]	; (800dab8 <osKernelInitialize+0x64>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2b02      	cmp	r3, #2
 800da84:	d103      	bne.n	800da8e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800da86:	f06f 0305 	mvn.w	r3, #5
 800da8a:	60fb      	str	r3, [r7, #12]
 800da8c:	e00c      	b.n	800daa8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800da8e:	4b0a      	ldr	r3, [pc, #40]	; (800dab8 <osKernelInitialize+0x64>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d105      	bne.n	800daa2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800da96:	4b08      	ldr	r3, [pc, #32]	; (800dab8 <osKernelInitialize+0x64>)
 800da98:	2201      	movs	r2, #1
 800da9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da9c:	2300      	movs	r3, #0
 800da9e:	60fb      	str	r3, [r7, #12]
 800daa0:	e002      	b.n	800daa8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800daa2:	f04f 33ff 	mov.w	r3, #4294967295
 800daa6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800daa8:	68fb      	ldr	r3, [r7, #12]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3714      	adds	r7, #20
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop
 800dab8:	200003a0 	.word	0x200003a0

0800dabc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dac2:	f3ef 8305 	mrs	r3, IPSR
 800dac6:	60bb      	str	r3, [r7, #8]
  return(result);
 800dac8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d10f      	bne.n	800daee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dace:	f3ef 8310 	mrs	r3, PRIMASK
 800dad2:	607b      	str	r3, [r7, #4]
  return(result);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d105      	bne.n	800dae6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dada:	f3ef 8311 	mrs	r3, BASEPRI
 800dade:	603b      	str	r3, [r7, #0]
  return(result);
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d007      	beq.n	800daf6 <osKernelStart+0x3a>
 800dae6:	4b0f      	ldr	r3, [pc, #60]	; (800db24 <osKernelStart+0x68>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b02      	cmp	r3, #2
 800daec:	d103      	bne.n	800daf6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800daee:	f06f 0305 	mvn.w	r3, #5
 800daf2:	60fb      	str	r3, [r7, #12]
 800daf4:	e010      	b.n	800db18 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800daf6:	4b0b      	ldr	r3, [pc, #44]	; (800db24 <osKernelStart+0x68>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d109      	bne.n	800db12 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dafe:	f7ff ffa1 	bl	800da44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800db02:	4b08      	ldr	r3, [pc, #32]	; (800db24 <osKernelStart+0x68>)
 800db04:	2202      	movs	r2, #2
 800db06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800db08:	f002 f944 	bl	800fd94 <vTaskStartScheduler>
      stat = osOK;
 800db0c:	2300      	movs	r3, #0
 800db0e:	60fb      	str	r3, [r7, #12]
 800db10:	e002      	b.n	800db18 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800db12:	f04f 33ff 	mov.w	r3, #4294967295
 800db16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800db18:	68fb      	ldr	r3, [r7, #12]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	200003a0 	.word	0x200003a0

0800db28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800db28:	b580      	push	{r7, lr}
 800db2a:	b090      	sub	sp, #64	; 0x40
 800db2c:	af04      	add	r7, sp, #16
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800db34:	2300      	movs	r3, #0
 800db36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db38:	f3ef 8305 	mrs	r3, IPSR
 800db3c:	61fb      	str	r3, [r7, #28]
  return(result);
 800db3e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800db40:	2b00      	cmp	r3, #0
 800db42:	f040 8090 	bne.w	800dc66 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db46:	f3ef 8310 	mrs	r3, PRIMASK
 800db4a:	61bb      	str	r3, [r7, #24]
  return(result);
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d105      	bne.n	800db5e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db52:	f3ef 8311 	mrs	r3, BASEPRI
 800db56:	617b      	str	r3, [r7, #20]
  return(result);
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d003      	beq.n	800db66 <osThreadNew+0x3e>
 800db5e:	4b44      	ldr	r3, [pc, #272]	; (800dc70 <osThreadNew+0x148>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2b02      	cmp	r3, #2
 800db64:	d07f      	beq.n	800dc66 <osThreadNew+0x13e>
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d07c      	beq.n	800dc66 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800db6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db70:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800db72:	2318      	movs	r3, #24
 800db74:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800db76:	2300      	movs	r3, #0
 800db78:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800db7a:	f04f 33ff 	mov.w	r3, #4294967295
 800db7e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d045      	beq.n	800dc12 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d002      	beq.n	800db94 <osThreadNew+0x6c>
        name = attr->name;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	699b      	ldr	r3, [r3, #24]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d002      	beq.n	800dba2 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	699b      	ldr	r3, [r3, #24]
 800dba0:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d008      	beq.n	800dbba <osThreadNew+0x92>
 800dba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbaa:	2b38      	cmp	r3, #56	; 0x38
 800dbac:	d805      	bhi.n	800dbba <osThreadNew+0x92>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	f003 0301 	and.w	r3, r3, #1
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d001      	beq.n	800dbbe <osThreadNew+0x96>
        return (NULL);
 800dbba:	2300      	movs	r3, #0
 800dbbc:	e054      	b.n	800dc68 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	695b      	ldr	r3, [r3, #20]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d003      	beq.n	800dbce <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	695b      	ldr	r3, [r3, #20]
 800dbca:	089b      	lsrs	r3, r3, #2
 800dbcc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00e      	beq.n	800dbf4 <osThreadNew+0xcc>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	2b5b      	cmp	r3, #91	; 0x5b
 800dbdc:	d90a      	bls.n	800dbf4 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d006      	beq.n	800dbf4 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	695b      	ldr	r3, [r3, #20]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d002      	beq.n	800dbf4 <osThreadNew+0xcc>
        mem = 1;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	623b      	str	r3, [r7, #32]
 800dbf2:	e010      	b.n	800dc16 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10c      	bne.n	800dc16 <osThreadNew+0xee>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	68db      	ldr	r3, [r3, #12]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d108      	bne.n	800dc16 <osThreadNew+0xee>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	691b      	ldr	r3, [r3, #16]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d104      	bne.n	800dc16 <osThreadNew+0xee>
          mem = 0;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	623b      	str	r3, [r7, #32]
 800dc10:	e001      	b.n	800dc16 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800dc16:	6a3b      	ldr	r3, [r7, #32]
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d110      	bne.n	800dc3e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dc24:	9202      	str	r2, [sp, #8]
 800dc26:	9301      	str	r3, [sp, #4]
 800dc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2a:	9300      	str	r3, [sp, #0]
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc32:	68f8      	ldr	r0, [r7, #12]
 800dc34:	f001 fedc 	bl	800f9f0 <xTaskCreateStatic>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	613b      	str	r3, [r7, #16]
 800dc3c:	e013      	b.n	800dc66 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800dc3e:	6a3b      	ldr	r3, [r7, #32]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d110      	bne.n	800dc66 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	f107 0310 	add.w	r3, r7, #16
 800dc4c:	9301      	str	r3, [sp, #4]
 800dc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f001 ff24 	bl	800faa4 <xTaskCreate>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d001      	beq.n	800dc66 <osThreadNew+0x13e>
          hTask = NULL;
 800dc62:	2300      	movs	r3, #0
 800dc64:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dc66:	693b      	ldr	r3, [r7, #16]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3730      	adds	r7, #48	; 0x30
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	200003a0 	.word	0x200003a0

0800dc74 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b08a      	sub	sp, #40	; 0x28
 800dc78:	af02      	add	r7, sp, #8
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800dc82:	69fb      	ldr	r3, [r7, #28]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d002      	beq.n	800dc8e <osThreadFlagsSet+0x1a>
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	da03      	bge.n	800dc96 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800dc8e:	f06f 0303 	mvn.w	r3, #3
 800dc92:	60fb      	str	r3, [r7, #12]
 800dc94:	e046      	b.n	800dd24 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800dc96:	f04f 33ff 	mov.w	r3, #4294967295
 800dc9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc9c:	f3ef 8305 	mrs	r3, IPSR
 800dca0:	61bb      	str	r3, [r7, #24]
  return(result);
 800dca2:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10f      	bne.n	800dcc8 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dca8:	f3ef 8310 	mrs	r3, PRIMASK
 800dcac:	617b      	str	r3, [r7, #20]
  return(result);
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d105      	bne.n	800dcc0 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dcb4:	f3ef 8311 	mrs	r3, BASEPRI
 800dcb8:	613b      	str	r3, [r7, #16]
  return(result);
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d024      	beq.n	800dd0a <osThreadFlagsSet+0x96>
 800dcc0:	4b1b      	ldr	r3, [pc, #108]	; (800dd30 <osThreadFlagsSet+0xbc>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	2b02      	cmp	r3, #2
 800dcc6:	d120      	bne.n	800dd0a <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800dccc:	f107 0308 	add.w	r3, r7, #8
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	6839      	ldr	r1, [r7, #0]
 800dcd8:	69f8      	ldr	r0, [r7, #28]
 800dcda:	f002 ff97 	bl	8010c0c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800dcde:	f107 020c 	add.w	r2, r7, #12
 800dce2:	2300      	movs	r3, #0
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	4613      	mov	r3, r2
 800dce8:	2200      	movs	r2, #0
 800dcea:	2100      	movs	r1, #0
 800dcec:	69f8      	ldr	r0, [r7, #28]
 800dcee:	f002 ff8d 	bl	8010c0c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d015      	beq.n	800dd24 <osThreadFlagsSet+0xb0>
 800dcf8:	4b0e      	ldr	r3, [pc, #56]	; (800dd34 <osThreadFlagsSet+0xc0>)
 800dcfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcfe:	601a      	str	r2, [r3, #0]
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	f3bf 8f6f 	isb	sy
 800dd08:	e00c      	b.n	800dd24 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	6839      	ldr	r1, [r7, #0]
 800dd10:	69f8      	ldr	r0, [r7, #28]
 800dd12:	f002 fec5 	bl	8010aa0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800dd16:	f107 030c 	add.w	r3, r7, #12
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	69f8      	ldr	r0, [r7, #28]
 800dd20:	f002 febe 	bl	8010aa0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800dd24:	68fb      	ldr	r3, [r7, #12]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3720      	adds	r7, #32
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	200003a0 	.word	0x200003a0
 800dd34:	e000ed04 	.word	0xe000ed04

0800dd38 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b08e      	sub	sp, #56	; 0x38
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd44:	f3ef 8305 	mrs	r3, IPSR
 800dd48:	61fb      	str	r3, [r7, #28]
  return(result);
 800dd4a:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d10f      	bne.n	800dd70 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd50:	f3ef 8310 	mrs	r3, PRIMASK
 800dd54:	61bb      	str	r3, [r7, #24]
  return(result);
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d105      	bne.n	800dd68 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd5c:	f3ef 8311 	mrs	r3, BASEPRI
 800dd60:	617b      	str	r3, [r7, #20]
  return(result);
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d007      	beq.n	800dd78 <osThreadFlagsWait+0x40>
 800dd68:	4b3c      	ldr	r3, [pc, #240]	; (800de5c <osThreadFlagsWait+0x124>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	d103      	bne.n	800dd78 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800dd70:	f06f 0305 	mvn.w	r3, #5
 800dd74:	637b      	str	r3, [r7, #52]	; 0x34
 800dd76:	e06b      	b.n	800de50 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	da03      	bge.n	800dd86 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800dd7e:	f06f 0303 	mvn.w	r3, #3
 800dd82:	637b      	str	r3, [r7, #52]	; 0x34
 800dd84:	e064      	b.n	800de50 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	f003 0302 	and.w	r3, r3, #2
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <osThreadFlagsWait+0x5e>
      clear = 0U;
 800dd90:	2300      	movs	r3, #0
 800dd92:	633b      	str	r3, [r7, #48]	; 0x30
 800dd94:	e001      	b.n	800dd9a <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800dda2:	f002 f93d 	bl	8010020 <xTaskGetTickCount>
 800dda6:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800dda8:	f107 0210 	add.w	r2, r7, #16
 800ddac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	f002 fe1b 	bl	80109ec <xTaskNotifyWait>
 800ddb6:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d137      	bne.n	800de2e <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800ddbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	4013      	ands	r3, r2
 800ddc4:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	f003 0301 	and.w	r3, r3, #1
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00c      	beq.n	800ddf2 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dddc:	4013      	ands	r3, r2
 800ddde:	68fa      	ldr	r2, [r7, #12]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d032      	beq.n	800de4a <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d10f      	bne.n	800de0a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800ddea:	f06f 0302 	mvn.w	r3, #2
 800ddee:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800ddf0:	e02e      	b.n	800de50 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800ddf2:	68fa      	ldr	r2, [r7, #12]
 800ddf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddf6:	4013      	ands	r3, r2
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d128      	bne.n	800de4e <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d103      	bne.n	800de0a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800de02:	f06f 0302 	mvn.w	r3, #2
 800de06:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800de08:	e022      	b.n	800de50 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800de0a:	f002 f909 	bl	8010020 <xTaskGetTickCount>
 800de0e:	4602      	mov	r2, r0
 800de10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de12:	1ad3      	subs	r3, r2, r3
 800de14:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800de16:	6a3a      	ldr	r2, [r7, #32]
 800de18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d902      	bls.n	800de24 <osThreadFlagsWait+0xec>
          tout  = 0;
 800de1e:	2300      	movs	r3, #0
 800de20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de22:	e00e      	b.n	800de42 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800de24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de26:	6a3b      	ldr	r3, [r7, #32]
 800de28:	1ad3      	subs	r3, r2, r3
 800de2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de2c:	e009      	b.n	800de42 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d103      	bne.n	800de3c <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800de34:	f06f 0302 	mvn.w	r3, #2
 800de38:	637b      	str	r3, [r7, #52]	; 0x34
 800de3a:	e002      	b.n	800de42 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800de3c:	f06f 0301 	mvn.w	r3, #1
 800de40:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800de42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1af      	bne.n	800dda8 <osThreadFlagsWait+0x70>
 800de48:	e002      	b.n	800de50 <osThreadFlagsWait+0x118>
            break;
 800de4a:	bf00      	nop
 800de4c:	e000      	b.n	800de50 <osThreadFlagsWait+0x118>
            break;
 800de4e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800de50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800de52:	4618      	mov	r0, r3
 800de54:	3738      	adds	r7, #56	; 0x38
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	200003a0 	.word	0x200003a0

0800de60 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800de60:	b580      	push	{r7, lr}
 800de62:	b086      	sub	sp, #24
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de68:	f3ef 8305 	mrs	r3, IPSR
 800de6c:	613b      	str	r3, [r7, #16]
  return(result);
 800de6e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de70:	2b00      	cmp	r3, #0
 800de72:	d10f      	bne.n	800de94 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de74:	f3ef 8310 	mrs	r3, PRIMASK
 800de78:	60fb      	str	r3, [r7, #12]
  return(result);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d105      	bne.n	800de8c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de80:	f3ef 8311 	mrs	r3, BASEPRI
 800de84:	60bb      	str	r3, [r7, #8]
  return(result);
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d007      	beq.n	800de9c <osDelay+0x3c>
 800de8c:	4b0a      	ldr	r3, [pc, #40]	; (800deb8 <osDelay+0x58>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2b02      	cmp	r3, #2
 800de92:	d103      	bne.n	800de9c <osDelay+0x3c>
    stat = osErrorISR;
 800de94:	f06f 0305 	mvn.w	r3, #5
 800de98:	617b      	str	r3, [r7, #20]
 800de9a:	e007      	b.n	800deac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800de9c:	2300      	movs	r3, #0
 800de9e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d002      	beq.n	800deac <osDelay+0x4c>
      vTaskDelay(ticks);
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f001 ff40 	bl	800fd2c <vTaskDelay>
    }
  }

  return (stat);
 800deac:	697b      	ldr	r3, [r7, #20]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3718      	adds	r7, #24
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	200003a0 	.word	0x200003a0

0800debc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800debc:	b580      	push	{r7, lr}
 800debe:	b08a      	sub	sp, #40	; 0x28
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dec4:	2300      	movs	r3, #0
 800dec6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dec8:	f3ef 8305 	mrs	r3, IPSR
 800decc:	613b      	str	r3, [r7, #16]
  return(result);
 800dece:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f040 8085 	bne.w	800dfe0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ded6:	f3ef 8310 	mrs	r3, PRIMASK
 800deda:	60fb      	str	r3, [r7, #12]
  return(result);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d105      	bne.n	800deee <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dee2:	f3ef 8311 	mrs	r3, BASEPRI
 800dee6:	60bb      	str	r3, [r7, #8]
  return(result);
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d003      	beq.n	800def6 <osMutexNew+0x3a>
 800deee:	4b3f      	ldr	r3, [pc, #252]	; (800dfec <osMutexNew+0x130>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b02      	cmp	r3, #2
 800def4:	d074      	beq.n	800dfe0 <osMutexNew+0x124>
    if (attr != NULL) {
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d003      	beq.n	800df04 <osMutexNew+0x48>
      type = attr->attr_bits;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	623b      	str	r3, [r7, #32]
 800df02:	e001      	b.n	800df08 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800df04:	2300      	movs	r3, #0
 800df06:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800df08:	6a3b      	ldr	r3, [r7, #32]
 800df0a:	f003 0301 	and.w	r3, r3, #1
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d002      	beq.n	800df18 <osMutexNew+0x5c>
      rmtx = 1U;
 800df12:	2301      	movs	r3, #1
 800df14:	61fb      	str	r3, [r7, #28]
 800df16:	e001      	b.n	800df1c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800df18:	2300      	movs	r3, #0
 800df1a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800df1c:	6a3b      	ldr	r3, [r7, #32]
 800df1e:	f003 0308 	and.w	r3, r3, #8
 800df22:	2b00      	cmp	r3, #0
 800df24:	d15c      	bne.n	800dfe0 <osMutexNew+0x124>
      mem = -1;
 800df26:	f04f 33ff 	mov.w	r3, #4294967295
 800df2a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d015      	beq.n	800df5e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d006      	beq.n	800df48 <osMutexNew+0x8c>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	2b4f      	cmp	r3, #79	; 0x4f
 800df40:	d902      	bls.n	800df48 <osMutexNew+0x8c>
          mem = 1;
 800df42:	2301      	movs	r3, #1
 800df44:	61bb      	str	r3, [r7, #24]
 800df46:	e00c      	b.n	800df62 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	689b      	ldr	r3, [r3, #8]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d108      	bne.n	800df62 <osMutexNew+0xa6>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d104      	bne.n	800df62 <osMutexNew+0xa6>
            mem = 0;
 800df58:	2300      	movs	r3, #0
 800df5a:	61bb      	str	r3, [r7, #24]
 800df5c:	e001      	b.n	800df62 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d112      	bne.n	800df8e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d007      	beq.n	800df7e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	4619      	mov	r1, r3
 800df74:	2004      	movs	r0, #4
 800df76:	f000 fe08 	bl	800eb8a <xQueueCreateMutexStatic>
 800df7a:	6278      	str	r0, [r7, #36]	; 0x24
 800df7c:	e016      	b.n	800dfac <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	4619      	mov	r1, r3
 800df84:	2001      	movs	r0, #1
 800df86:	f000 fe00 	bl	800eb8a <xQueueCreateMutexStatic>
 800df8a:	6278      	str	r0, [r7, #36]	; 0x24
 800df8c:	e00e      	b.n	800dfac <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10b      	bne.n	800dfac <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d004      	beq.n	800dfa4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800df9a:	2004      	movs	r0, #4
 800df9c:	f000 fddd 	bl	800eb5a <xQueueCreateMutex>
 800dfa0:	6278      	str	r0, [r7, #36]	; 0x24
 800dfa2:	e003      	b.n	800dfac <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800dfa4:	2001      	movs	r0, #1
 800dfa6:	f000 fdd8 	bl	800eb5a <xQueueCreateMutex>
 800dfaa:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800dfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d00c      	beq.n	800dfcc <osMutexNew+0x110>
        if (attr != NULL) {
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d003      	beq.n	800dfc0 <osMutexNew+0x104>
          name = attr->name;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	617b      	str	r3, [r7, #20]
 800dfbe:	e001      	b.n	800dfc4 <osMutexNew+0x108>
        } else {
          name = NULL;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800dfc4:	6979      	ldr	r1, [r7, #20]
 800dfc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfc8:	f001 fc8c 	bl	800f8e4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800dfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d006      	beq.n	800dfe0 <osMutexNew+0x124>
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d003      	beq.n	800dfe0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfda:	f043 0301 	orr.w	r3, r3, #1
 800dfde:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800dfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3728      	adds	r7, #40	; 0x28
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	200003a0 	.word	0x200003a0

0800dff0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b088      	sub	sp, #32
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f023 0301 	bic.w	r3, r3, #1
 800e000:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f003 0301 	and.w	r3, r3, #1
 800e008:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e00a:	2300      	movs	r3, #0
 800e00c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e00e:	f3ef 8305 	mrs	r3, IPSR
 800e012:	613b      	str	r3, [r7, #16]
  return(result);
 800e014:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e016:	2b00      	cmp	r3, #0
 800e018:	d10f      	bne.n	800e03a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e01a:	f3ef 8310 	mrs	r3, PRIMASK
 800e01e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d105      	bne.n	800e032 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e026:	f3ef 8311 	mrs	r3, BASEPRI
 800e02a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d007      	beq.n	800e042 <osMutexAcquire+0x52>
 800e032:	4b1d      	ldr	r3, [pc, #116]	; (800e0a8 <osMutexAcquire+0xb8>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b02      	cmp	r3, #2
 800e038:	d103      	bne.n	800e042 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800e03a:	f06f 0305 	mvn.w	r3, #5
 800e03e:	61fb      	str	r3, [r7, #28]
 800e040:	e02c      	b.n	800e09c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800e042:	69bb      	ldr	r3, [r7, #24]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d103      	bne.n	800e050 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800e048:	f06f 0303 	mvn.w	r3, #3
 800e04c:	61fb      	str	r3, [r7, #28]
 800e04e:	e025      	b.n	800e09c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d011      	beq.n	800e07a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e056:	6839      	ldr	r1, [r7, #0]
 800e058:	69b8      	ldr	r0, [r7, #24]
 800e05a:	f000 fde4 	bl	800ec26 <xQueueTakeMutexRecursive>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b01      	cmp	r3, #1
 800e062:	d01b      	beq.n	800e09c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d003      	beq.n	800e072 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800e06a:	f06f 0301 	mvn.w	r3, #1
 800e06e:	61fb      	str	r3, [r7, #28]
 800e070:	e014      	b.n	800e09c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e072:	f06f 0302 	mvn.w	r3, #2
 800e076:	61fb      	str	r3, [r7, #28]
 800e078:	e010      	b.n	800e09c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e07a:	6839      	ldr	r1, [r7, #0]
 800e07c:	69b8      	ldr	r0, [r7, #24]
 800e07e:	f001 f961 	bl	800f344 <xQueueSemaphoreTake>
 800e082:	4603      	mov	r3, r0
 800e084:	2b01      	cmp	r3, #1
 800e086:	d009      	beq.n	800e09c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d003      	beq.n	800e096 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800e08e:	f06f 0301 	mvn.w	r3, #1
 800e092:	61fb      	str	r3, [r7, #28]
 800e094:	e002      	b.n	800e09c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e096:	f06f 0302 	mvn.w	r3, #2
 800e09a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e09c:	69fb      	ldr	r3, [r7, #28]
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3720      	adds	r7, #32
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	200003a0 	.word	0x200003a0

0800e0ac <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b088      	sub	sp, #32
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f023 0301 	bic.w	r3, r3, #1
 800e0ba:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f003 0301 	and.w	r3, r3, #1
 800e0c2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0c8:	f3ef 8305 	mrs	r3, IPSR
 800e0cc:	613b      	str	r3, [r7, #16]
  return(result);
 800e0ce:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d10f      	bne.n	800e0f4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0d4:	f3ef 8310 	mrs	r3, PRIMASK
 800e0d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d105      	bne.n	800e0ec <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e0e0:	f3ef 8311 	mrs	r3, BASEPRI
 800e0e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d007      	beq.n	800e0fc <osMutexRelease+0x50>
 800e0ec:	4b16      	ldr	r3, [pc, #88]	; (800e148 <osMutexRelease+0x9c>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2b02      	cmp	r3, #2
 800e0f2:	d103      	bne.n	800e0fc <osMutexRelease+0x50>
    stat = osErrorISR;
 800e0f4:	f06f 0305 	mvn.w	r3, #5
 800e0f8:	61fb      	str	r3, [r7, #28]
 800e0fa:	e01f      	b.n	800e13c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d103      	bne.n	800e10a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800e102:	f06f 0303 	mvn.w	r3, #3
 800e106:	61fb      	str	r3, [r7, #28]
 800e108:	e018      	b.n	800e13c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d009      	beq.n	800e124 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e110:	69b8      	ldr	r0, [r7, #24]
 800e112:	f000 fd55 	bl	800ebc0 <xQueueGiveMutexRecursive>
 800e116:	4603      	mov	r3, r0
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d00f      	beq.n	800e13c <osMutexRelease+0x90>
        stat = osErrorResource;
 800e11c:	f06f 0302 	mvn.w	r3, #2
 800e120:	61fb      	str	r3, [r7, #28]
 800e122:	e00b      	b.n	800e13c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e124:	2300      	movs	r3, #0
 800e126:	2200      	movs	r2, #0
 800e128:	2100      	movs	r1, #0
 800e12a:	69b8      	ldr	r0, [r7, #24]
 800e12c:	f000 fe16 	bl	800ed5c <xQueueGenericSend>
 800e130:	4603      	mov	r3, r0
 800e132:	2b01      	cmp	r3, #1
 800e134:	d002      	beq.n	800e13c <osMutexRelease+0x90>
        stat = osErrorResource;
 800e136:	f06f 0302 	mvn.w	r3, #2
 800e13a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e13c:	69fb      	ldr	r3, [r7, #28]
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3720      	adds	r7, #32
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	200003a0 	.word	0x200003a0

0800e14c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b08c      	sub	sp, #48	; 0x30
 800e150:	af02      	add	r7, sp, #8
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e158:	2300      	movs	r3, #0
 800e15a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e15c:	f3ef 8305 	mrs	r3, IPSR
 800e160:	61bb      	str	r3, [r7, #24]
  return(result);
 800e162:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e164:	2b00      	cmp	r3, #0
 800e166:	f040 8087 	bne.w	800e278 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e16a:	f3ef 8310 	mrs	r3, PRIMASK
 800e16e:	617b      	str	r3, [r7, #20]
  return(result);
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d105      	bne.n	800e182 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e176:	f3ef 8311 	mrs	r3, BASEPRI
 800e17a:	613b      	str	r3, [r7, #16]
  return(result);
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d003      	beq.n	800e18a <osSemaphoreNew+0x3e>
 800e182:	4b40      	ldr	r3, [pc, #256]	; (800e284 <osSemaphoreNew+0x138>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b02      	cmp	r3, #2
 800e188:	d076      	beq.n	800e278 <osSemaphoreNew+0x12c>
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d073      	beq.n	800e278 <osSemaphoreNew+0x12c>
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	429a      	cmp	r2, r3
 800e196:	d86f      	bhi.n	800e278 <osSemaphoreNew+0x12c>
    mem = -1;
 800e198:	f04f 33ff 	mov.w	r3, #4294967295
 800e19c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d015      	beq.n	800e1d0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	689b      	ldr	r3, [r3, #8]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d006      	beq.n	800e1ba <osSemaphoreNew+0x6e>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	2b4f      	cmp	r3, #79	; 0x4f
 800e1b2:	d902      	bls.n	800e1ba <osSemaphoreNew+0x6e>
        mem = 1;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	623b      	str	r3, [r7, #32]
 800e1b8:	e00c      	b.n	800e1d4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	689b      	ldr	r3, [r3, #8]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d108      	bne.n	800e1d4 <osSemaphoreNew+0x88>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	68db      	ldr	r3, [r3, #12]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d104      	bne.n	800e1d4 <osSemaphoreNew+0x88>
          mem = 0;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	623b      	str	r3, [r7, #32]
 800e1ce:	e001      	b.n	800e1d4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800e1d4:	6a3b      	ldr	r3, [r7, #32]
 800e1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1da:	d04d      	beq.n	800e278 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d129      	bne.n	800e236 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d10b      	bne.n	800e200 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	689a      	ldr	r2, [r3, #8]
 800e1ec:	2303      	movs	r3, #3
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	2001      	movs	r0, #1
 800e1f8:	f000 fbc0 	bl	800e97c <xQueueGenericCreateStatic>
 800e1fc:	6278      	str	r0, [r7, #36]	; 0x24
 800e1fe:	e005      	b.n	800e20c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800e200:	2203      	movs	r2, #3
 800e202:	2100      	movs	r1, #0
 800e204:	2001      	movs	r0, #1
 800e206:	f000 fc2c 	bl	800ea62 <xQueueGenericCreate>
 800e20a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d022      	beq.n	800e258 <osSemaphoreNew+0x10c>
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d01f      	beq.n	800e258 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e218:	2300      	movs	r3, #0
 800e21a:	2200      	movs	r2, #0
 800e21c:	2100      	movs	r1, #0
 800e21e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e220:	f000 fd9c 	bl	800ed5c <xQueueGenericSend>
 800e224:	4603      	mov	r3, r0
 800e226:	2b01      	cmp	r3, #1
 800e228:	d016      	beq.n	800e258 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800e22a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e22c:	f001 fa0f 	bl	800f64e <vQueueDelete>
            hSemaphore = NULL;
 800e230:	2300      	movs	r3, #0
 800e232:	627b      	str	r3, [r7, #36]	; 0x24
 800e234:	e010      	b.n	800e258 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800e236:	6a3b      	ldr	r3, [r7, #32]
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d108      	bne.n	800e24e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	689b      	ldr	r3, [r3, #8]
 800e240:	461a      	mov	r2, r3
 800e242:	68b9      	ldr	r1, [r7, #8]
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f000 fd23 	bl	800ec90 <xQueueCreateCountingSemaphoreStatic>
 800e24a:	6278      	str	r0, [r7, #36]	; 0x24
 800e24c:	e004      	b.n	800e258 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e24e:	68b9      	ldr	r1, [r7, #8]
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f000 fd52 	bl	800ecfa <xQueueCreateCountingSemaphore>
 800e256:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00c      	beq.n	800e278 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d003      	beq.n	800e26c <osSemaphoreNew+0x120>
          name = attr->name;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	61fb      	str	r3, [r7, #28]
 800e26a:	e001      	b.n	800e270 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800e26c:	2300      	movs	r3, #0
 800e26e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e270:	69f9      	ldr	r1, [r7, #28]
 800e272:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e274:	f001 fb36 	bl	800f8e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3728      	adds	r7, #40	; 0x28
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	200003a0 	.word	0x200003a0

0800e288 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e288:	b580      	push	{r7, lr}
 800e28a:	b088      	sub	sp, #32
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e296:	2300      	movs	r3, #0
 800e298:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d103      	bne.n	800e2a8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e2a0:	f06f 0303 	mvn.w	r3, #3
 800e2a4:	61fb      	str	r3, [r7, #28]
 800e2a6:	e04b      	b.n	800e340 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2a8:	f3ef 8305 	mrs	r3, IPSR
 800e2ac:	617b      	str	r3, [r7, #20]
  return(result);
 800e2ae:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d10f      	bne.n	800e2d4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2b4:	f3ef 8310 	mrs	r3, PRIMASK
 800e2b8:	613b      	str	r3, [r7, #16]
  return(result);
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d105      	bne.n	800e2cc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e2c0:	f3ef 8311 	mrs	r3, BASEPRI
 800e2c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d026      	beq.n	800e31a <osSemaphoreAcquire+0x92>
 800e2cc:	4b1f      	ldr	r3, [pc, #124]	; (800e34c <osSemaphoreAcquire+0xc4>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d122      	bne.n	800e31a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d003      	beq.n	800e2e2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800e2da:	f06f 0303 	mvn.w	r3, #3
 800e2de:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e2e0:	e02d      	b.n	800e33e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e2e6:	f107 0308 	add.w	r3, r7, #8
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	69b8      	ldr	r0, [r7, #24]
 800e2f0:	f001 f930 	bl	800f554 <xQueueReceiveFromISR>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d003      	beq.n	800e302 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800e2fa:	f06f 0302 	mvn.w	r3, #2
 800e2fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e300:	e01d      	b.n	800e33e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d01a      	beq.n	800e33e <osSemaphoreAcquire+0xb6>
 800e308:	4b11      	ldr	r3, [pc, #68]	; (800e350 <osSemaphoreAcquire+0xc8>)
 800e30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e30e:	601a      	str	r2, [r3, #0]
 800e310:	f3bf 8f4f 	dsb	sy
 800e314:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800e318:	e011      	b.n	800e33e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e31a:	6839      	ldr	r1, [r7, #0]
 800e31c:	69b8      	ldr	r0, [r7, #24]
 800e31e:	f001 f811 	bl	800f344 <xQueueSemaphoreTake>
 800e322:	4603      	mov	r3, r0
 800e324:	2b01      	cmp	r3, #1
 800e326:	d00b      	beq.n	800e340 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d003      	beq.n	800e336 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800e32e:	f06f 0301 	mvn.w	r3, #1
 800e332:	61fb      	str	r3, [r7, #28]
 800e334:	e004      	b.n	800e340 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800e336:	f06f 0302 	mvn.w	r3, #2
 800e33a:	61fb      	str	r3, [r7, #28]
 800e33c:	e000      	b.n	800e340 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800e33e:	bf00      	nop
      }
    }
  }

  return (stat);
 800e340:	69fb      	ldr	r3, [r7, #28]
}
 800e342:	4618      	mov	r0, r3
 800e344:	3720      	adds	r7, #32
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	200003a0 	.word	0x200003a0
 800e350:	e000ed04 	.word	0xe000ed04

0800e354 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e354:	b580      	push	{r7, lr}
 800e356:	b088      	sub	sp, #32
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e360:	2300      	movs	r3, #0
 800e362:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d103      	bne.n	800e372 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e36a:	f06f 0303 	mvn.w	r3, #3
 800e36e:	61fb      	str	r3, [r7, #28]
 800e370:	e03e      	b.n	800e3f0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e372:	f3ef 8305 	mrs	r3, IPSR
 800e376:	617b      	str	r3, [r7, #20]
  return(result);
 800e378:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d10f      	bne.n	800e39e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e37e:	f3ef 8310 	mrs	r3, PRIMASK
 800e382:	613b      	str	r3, [r7, #16]
  return(result);
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d105      	bne.n	800e396 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e38a:	f3ef 8311 	mrs	r3, BASEPRI
 800e38e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d01e      	beq.n	800e3d4 <osSemaphoreRelease+0x80>
 800e396:	4b19      	ldr	r3, [pc, #100]	; (800e3fc <osSemaphoreRelease+0xa8>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	d11a      	bne.n	800e3d4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e3a2:	f107 0308 	add.w	r3, r7, #8
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	69b8      	ldr	r0, [r7, #24]
 800e3aa:	f000 fe65 	bl	800f078 <xQueueGiveFromISR>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d003      	beq.n	800e3bc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800e3b4:	f06f 0302 	mvn.w	r3, #2
 800e3b8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e3ba:	e018      	b.n	800e3ee <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d015      	beq.n	800e3ee <osSemaphoreRelease+0x9a>
 800e3c2:	4b0f      	ldr	r3, [pc, #60]	; (800e400 <osSemaphoreRelease+0xac>)
 800e3c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3c8:	601a      	str	r2, [r3, #0]
 800e3ca:	f3bf 8f4f 	dsb	sy
 800e3ce:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e3d2:	e00c      	b.n	800e3ee <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	2100      	movs	r1, #0
 800e3da:	69b8      	ldr	r0, [r7, #24]
 800e3dc:	f000 fcbe 	bl	800ed5c <xQueueGenericSend>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d004      	beq.n	800e3f0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800e3e6:	f06f 0302 	mvn.w	r3, #2
 800e3ea:	61fb      	str	r3, [r7, #28]
 800e3ec:	e000      	b.n	800e3f0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e3ee:	bf00      	nop
    }
  }

  return (stat);
 800e3f0:	69fb      	ldr	r3, [r7, #28]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3720      	adds	r7, #32
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	200003a0 	.word	0x200003a0
 800e400:	e000ed04 	.word	0xe000ed04

0800e404 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e404:	b580      	push	{r7, lr}
 800e406:	b08c      	sub	sp, #48	; 0x30
 800e408:	af02      	add	r7, sp, #8
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e410:	2300      	movs	r3, #0
 800e412:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e414:	f3ef 8305 	mrs	r3, IPSR
 800e418:	61bb      	str	r3, [r7, #24]
  return(result);
 800e41a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d170      	bne.n	800e502 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e420:	f3ef 8310 	mrs	r3, PRIMASK
 800e424:	617b      	str	r3, [r7, #20]
  return(result);
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d105      	bne.n	800e438 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e42c:	f3ef 8311 	mrs	r3, BASEPRI
 800e430:	613b      	str	r3, [r7, #16]
  return(result);
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d003      	beq.n	800e440 <osMessageQueueNew+0x3c>
 800e438:	4b34      	ldr	r3, [pc, #208]	; (800e50c <osMessageQueueNew+0x108>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2b02      	cmp	r3, #2
 800e43e:	d060      	beq.n	800e502 <osMessageQueueNew+0xfe>
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d05d      	beq.n	800e502 <osMessageQueueNew+0xfe>
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d05a      	beq.n	800e502 <osMessageQueueNew+0xfe>
    mem = -1;
 800e44c:	f04f 33ff 	mov.w	r3, #4294967295
 800e450:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d029      	beq.n	800e4ac <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	689b      	ldr	r3, [r3, #8]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d012      	beq.n	800e486 <osMessageQueueNew+0x82>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	2b4f      	cmp	r3, #79	; 0x4f
 800e466:	d90e      	bls.n	800e486 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d00a      	beq.n	800e486 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	695a      	ldr	r2, [r3, #20]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	68b9      	ldr	r1, [r7, #8]
 800e478:	fb01 f303 	mul.w	r3, r1, r3
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d302      	bcc.n	800e486 <osMessageQueueNew+0x82>
        mem = 1;
 800e480:	2301      	movs	r3, #1
 800e482:	623b      	str	r3, [r7, #32]
 800e484:	e014      	b.n	800e4b0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d110      	bne.n	800e4b0 <osMessageQueueNew+0xac>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d10c      	bne.n	800e4b0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d108      	bne.n	800e4b0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	695b      	ldr	r3, [r3, #20]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d104      	bne.n	800e4b0 <osMessageQueueNew+0xac>
          mem = 0;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	623b      	str	r3, [r7, #32]
 800e4aa:	e001      	b.n	800e4b0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e4b0:	6a3b      	ldr	r3, [r7, #32]
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d10c      	bne.n	800e4d0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	691a      	ldr	r2, [r3, #16]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6899      	ldr	r1, [r3, #8]
 800e4be:	2300      	movs	r3, #0
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	68b9      	ldr	r1, [r7, #8]
 800e4c6:	68f8      	ldr	r0, [r7, #12]
 800e4c8:	f000 fa58 	bl	800e97c <xQueueGenericCreateStatic>
 800e4cc:	6278      	str	r0, [r7, #36]	; 0x24
 800e4ce:	e008      	b.n	800e4e2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800e4d0:	6a3b      	ldr	r3, [r7, #32]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d105      	bne.n	800e4e2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	68b9      	ldr	r1, [r7, #8]
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	f000 fac1 	bl	800ea62 <xQueueGenericCreate>
 800e4e0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d00c      	beq.n	800e502 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d003      	beq.n	800e4f6 <osMessageQueueNew+0xf2>
        name = attr->name;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	61fb      	str	r3, [r7, #28]
 800e4f4:	e001      	b.n	800e4fa <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800e4fa:	69f9      	ldr	r1, [r7, #28]
 800e4fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4fe:	f001 f9f1 	bl	800f8e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e504:	4618      	mov	r0, r3
 800e506:	3728      	adds	r7, #40	; 0x28
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	200003a0 	.word	0x200003a0

0800e510 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e510:	b580      	push	{r7, lr}
 800e512:	b08a      	sub	sp, #40	; 0x28
 800e514:	af00      	add	r7, sp, #0
 800e516:	60f8      	str	r0, [r7, #12]
 800e518:	60b9      	str	r1, [r7, #8]
 800e51a:	603b      	str	r3, [r7, #0]
 800e51c:	4613      	mov	r3, r2
 800e51e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e524:	2300      	movs	r3, #0
 800e526:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e528:	f3ef 8305 	mrs	r3, IPSR
 800e52c:	61fb      	str	r3, [r7, #28]
  return(result);
 800e52e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e530:	2b00      	cmp	r3, #0
 800e532:	d10f      	bne.n	800e554 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e534:	f3ef 8310 	mrs	r3, PRIMASK
 800e538:	61bb      	str	r3, [r7, #24]
  return(result);
 800e53a:	69bb      	ldr	r3, [r7, #24]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d105      	bne.n	800e54c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e540:	f3ef 8311 	mrs	r3, BASEPRI
 800e544:	617b      	str	r3, [r7, #20]
  return(result);
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d02c      	beq.n	800e5a6 <osMessageQueuePut+0x96>
 800e54c:	4b28      	ldr	r3, [pc, #160]	; (800e5f0 <osMessageQueuePut+0xe0>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b02      	cmp	r3, #2
 800e552:	d128      	bne.n	800e5a6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e554:	6a3b      	ldr	r3, [r7, #32]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d005      	beq.n	800e566 <osMessageQueuePut+0x56>
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d002      	beq.n	800e566 <osMessageQueuePut+0x56>
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d003      	beq.n	800e56e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800e566:	f06f 0303 	mvn.w	r3, #3
 800e56a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e56c:	e039      	b.n	800e5e2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800e56e:	2300      	movs	r3, #0
 800e570:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e572:	f107 0210 	add.w	r2, r7, #16
 800e576:	2300      	movs	r3, #0
 800e578:	68b9      	ldr	r1, [r7, #8]
 800e57a:	6a38      	ldr	r0, [r7, #32]
 800e57c:	f000 fce8 	bl	800ef50 <xQueueGenericSendFromISR>
 800e580:	4603      	mov	r3, r0
 800e582:	2b01      	cmp	r3, #1
 800e584:	d003      	beq.n	800e58e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800e586:	f06f 0302 	mvn.w	r3, #2
 800e58a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e58c:	e029      	b.n	800e5e2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d026      	beq.n	800e5e2 <osMessageQueuePut+0xd2>
 800e594:	4b17      	ldr	r3, [pc, #92]	; (800e5f4 <osMessageQueuePut+0xe4>)
 800e596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e59a:	601a      	str	r2, [r3, #0]
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e5a4:	e01d      	b.n	800e5e2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e5a6:	6a3b      	ldr	r3, [r7, #32]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <osMessageQueuePut+0xa2>
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d103      	bne.n	800e5ba <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800e5b2:	f06f 0303 	mvn.w	r3, #3
 800e5b6:	627b      	str	r3, [r7, #36]	; 0x24
 800e5b8:	e014      	b.n	800e5e4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	683a      	ldr	r2, [r7, #0]
 800e5be:	68b9      	ldr	r1, [r7, #8]
 800e5c0:	6a38      	ldr	r0, [r7, #32]
 800e5c2:	f000 fbcb 	bl	800ed5c <xQueueGenericSend>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d00b      	beq.n	800e5e4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d003      	beq.n	800e5da <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800e5d2:	f06f 0301 	mvn.w	r3, #1
 800e5d6:	627b      	str	r3, [r7, #36]	; 0x24
 800e5d8:	e004      	b.n	800e5e4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800e5da:	f06f 0302 	mvn.w	r3, #2
 800e5de:	627b      	str	r3, [r7, #36]	; 0x24
 800e5e0:	e000      	b.n	800e5e4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e5e2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3728      	adds	r7, #40	; 0x28
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	200003a0 	.word	0x200003a0
 800e5f4:	e000ed04 	.word	0xe000ed04

0800e5f8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b08a      	sub	sp, #40	; 0x28
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	60f8      	str	r0, [r7, #12]
 800e600:	60b9      	str	r1, [r7, #8]
 800e602:	607a      	str	r2, [r7, #4]
 800e604:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e60a:	2300      	movs	r3, #0
 800e60c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e60e:	f3ef 8305 	mrs	r3, IPSR
 800e612:	61fb      	str	r3, [r7, #28]
  return(result);
 800e614:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10f      	bne.n	800e63a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e61a:	f3ef 8310 	mrs	r3, PRIMASK
 800e61e:	61bb      	str	r3, [r7, #24]
  return(result);
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d105      	bne.n	800e632 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e626:	f3ef 8311 	mrs	r3, BASEPRI
 800e62a:	617b      	str	r3, [r7, #20]
  return(result);
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d02c      	beq.n	800e68c <osMessageQueueGet+0x94>
 800e632:	4b28      	ldr	r3, [pc, #160]	; (800e6d4 <osMessageQueueGet+0xdc>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2b02      	cmp	r3, #2
 800e638:	d128      	bne.n	800e68c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e63a:	6a3b      	ldr	r3, [r7, #32]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d005      	beq.n	800e64c <osMessageQueueGet+0x54>
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d002      	beq.n	800e64c <osMessageQueueGet+0x54>
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d003      	beq.n	800e654 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800e64c:	f06f 0303 	mvn.w	r3, #3
 800e650:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e652:	e038      	b.n	800e6c6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800e654:	2300      	movs	r3, #0
 800e656:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e658:	f107 0310 	add.w	r3, r7, #16
 800e65c:	461a      	mov	r2, r3
 800e65e:	68b9      	ldr	r1, [r7, #8]
 800e660:	6a38      	ldr	r0, [r7, #32]
 800e662:	f000 ff77 	bl	800f554 <xQueueReceiveFromISR>
 800e666:	4603      	mov	r3, r0
 800e668:	2b01      	cmp	r3, #1
 800e66a:	d003      	beq.n	800e674 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800e66c:	f06f 0302 	mvn.w	r3, #2
 800e670:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e672:	e028      	b.n	800e6c6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d025      	beq.n	800e6c6 <osMessageQueueGet+0xce>
 800e67a:	4b17      	ldr	r3, [pc, #92]	; (800e6d8 <osMessageQueueGet+0xe0>)
 800e67c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e680:	601a      	str	r2, [r3, #0]
 800e682:	f3bf 8f4f 	dsb	sy
 800e686:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e68a:	e01c      	b.n	800e6c6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e68c:	6a3b      	ldr	r3, [r7, #32]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d002      	beq.n	800e698 <osMessageQueueGet+0xa0>
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d103      	bne.n	800e6a0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800e698:	f06f 0303 	mvn.w	r3, #3
 800e69c:	627b      	str	r3, [r7, #36]	; 0x24
 800e69e:	e013      	b.n	800e6c8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e6a0:	683a      	ldr	r2, [r7, #0]
 800e6a2:	68b9      	ldr	r1, [r7, #8]
 800e6a4:	6a38      	ldr	r0, [r7, #32]
 800e6a6:	f000 fd71 	bl	800f18c <xQueueReceive>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d00b      	beq.n	800e6c8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d003      	beq.n	800e6be <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800e6b6:	f06f 0301 	mvn.w	r3, #1
 800e6ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e6bc:	e004      	b.n	800e6c8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800e6be:	f06f 0302 	mvn.w	r3, #2
 800e6c2:	627b      	str	r3, [r7, #36]	; 0x24
 800e6c4:	e000      	b.n	800e6c8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e6c6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3728      	adds	r7, #40	; 0x28
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	200003a0 	.word	0x200003a0
 800e6d8:	e000ed04 	.word	0xe000ed04

0800e6dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e6dc:	b480      	push	{r7}
 800e6de:	b085      	sub	sp, #20
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	4a07      	ldr	r2, [pc, #28]	; (800e708 <vApplicationGetIdleTaskMemory+0x2c>)
 800e6ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	4a06      	ldr	r2, [pc, #24]	; (800e70c <vApplicationGetIdleTaskMemory+0x30>)
 800e6f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e6fa:	601a      	str	r2, [r3, #0]
}
 800e6fc:	bf00      	nop
 800e6fe:	3714      	adds	r7, #20
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr
 800e708:	200003a4 	.word	0x200003a4
 800e70c:	20000400 	.word	0x20000400

0800e710 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e710:	b480      	push	{r7}
 800e712:	b085      	sub	sp, #20
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	4a07      	ldr	r2, [pc, #28]	; (800e73c <vApplicationGetTimerTaskMemory+0x2c>)
 800e720:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	4a06      	ldr	r2, [pc, #24]	; (800e740 <vApplicationGetTimerTaskMemory+0x30>)
 800e726:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e72e:	601a      	str	r2, [r3, #0]
}
 800e730:	bf00      	nop
 800e732:	3714      	adds	r7, #20
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr
 800e73c:	20000c00 	.word	0x20000c00
 800e740:	20000c5c 	.word	0x20000c5c

0800e744 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f103 0208 	add.w	r2, r3, #8
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f04f 32ff 	mov.w	r2, #4294967295
 800e75c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f103 0208 	add.w	r2, r3, #8
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f103 0208 	add.w	r2, r3, #8
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2200      	movs	r2, #0
 800e776:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e778:	bf00      	nop
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e792:	bf00      	nop
 800e794:	370c      	adds	r7, #12
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr

0800e79e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e79e:	b480      	push	{r7}
 800e7a0:	b085      	sub	sp, #20
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	68fa      	ldr	r2, [r7, #12]
 800e7b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	689a      	ldr	r2, [r3, #8]
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	683a      	ldr	r2, [r7, #0]
 800e7c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	683a      	ldr	r2, [r7, #0]
 800e7c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	1c5a      	adds	r2, r3, #1
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	601a      	str	r2, [r3, #0]
}
 800e7da:	bf00      	nop
 800e7dc:	3714      	adds	r7, #20
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e7e6:	b480      	push	{r7}
 800e7e8:	b085      	sub	sp, #20
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
 800e7ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7fc:	d103      	bne.n	800e806 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	60fb      	str	r3, [r7, #12]
 800e804:	e00c      	b.n	800e820 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	3308      	adds	r3, #8
 800e80a:	60fb      	str	r3, [r7, #12]
 800e80c:	e002      	b.n	800e814 <vListInsert+0x2e>
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	60fb      	str	r3, [r7, #12]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d2f6      	bcs.n	800e80e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	685a      	ldr	r2, [r3, #4]
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	683a      	ldr	r2, [r7, #0]
 800e82e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	683a      	ldr	r2, [r7, #0]
 800e83a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	1c5a      	adds	r2, r3, #1
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	601a      	str	r2, [r3, #0]
}
 800e84c:	bf00      	nop
 800e84e:	3714      	adds	r7, #20
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e858:	b480      	push	{r7}
 800e85a:	b085      	sub	sp, #20
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	691b      	ldr	r3, [r3, #16]
 800e864:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	6892      	ldr	r2, [r2, #8]
 800e86e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	6852      	ldr	r2, [r2, #4]
 800e878:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	429a      	cmp	r2, r3
 800e882:	d103      	bne.n	800e88c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	689a      	ldr	r2, [r3, #8]
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2200      	movs	r2, #0
 800e890:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	1e5a      	subs	r2, r3, #1
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3714      	adds	r7, #20
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d109      	bne.n	800e8d4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c4:	f383 8811 	msr	BASEPRI, r3
 800e8c8:	f3bf 8f6f 	isb	sy
 800e8cc:	f3bf 8f4f 	dsb	sy
 800e8d0:	60bb      	str	r3, [r7, #8]
 800e8d2:	e7fe      	b.n	800e8d2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800e8d4:	f002 ff32 	bl	801173c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8e0:	68f9      	ldr	r1, [r7, #12]
 800e8e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e8e4:	fb01 f303 	mul.w	r3, r1, r3
 800e8e8:	441a      	add	r2, r3
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e904:	3b01      	subs	r3, #1
 800e906:	68f9      	ldr	r1, [r7, #12]
 800e908:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e90a:	fb01 f303 	mul.w	r3, r1, r3
 800e90e:	441a      	add	r2, r3
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	22ff      	movs	r2, #255	; 0xff
 800e918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	22ff      	movs	r2, #255	; 0xff
 800e920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d114      	bne.n	800e954 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	691b      	ldr	r3, [r3, #16]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d01a      	beq.n	800e968 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	3310      	adds	r3, #16
 800e936:	4618      	mov	r0, r3
 800e938:	f001 fce4 	bl	8010304 <xTaskRemoveFromEventList>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d012      	beq.n	800e968 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e942:	4b0d      	ldr	r3, [pc, #52]	; (800e978 <xQueueGenericReset+0xcc>)
 800e944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e948:	601a      	str	r2, [r3, #0]
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	f3bf 8f6f 	isb	sy
 800e952:	e009      	b.n	800e968 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	3310      	adds	r3, #16
 800e958:	4618      	mov	r0, r3
 800e95a:	f7ff fef3 	bl	800e744 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	3324      	adds	r3, #36	; 0x24
 800e962:	4618      	mov	r0, r3
 800e964:	f7ff feee 	bl	800e744 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e968:	f002 ff16 	bl	8011798 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e96c:	2301      	movs	r3, #1
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	e000ed04 	.word	0xe000ed04

0800e97c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b08e      	sub	sp, #56	; 0x38
 800e980:	af02      	add	r7, sp, #8
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
 800e988:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d109      	bne.n	800e9a4 <xQueueGenericCreateStatic+0x28>
 800e990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e994:	f383 8811 	msr	BASEPRI, r3
 800e998:	f3bf 8f6f 	isb	sy
 800e99c:	f3bf 8f4f 	dsb	sy
 800e9a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9a2:	e7fe      	b.n	800e9a2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d109      	bne.n	800e9be <xQueueGenericCreateStatic+0x42>
 800e9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ae:	f383 8811 	msr	BASEPRI, r3
 800e9b2:	f3bf 8f6f 	isb	sy
 800e9b6:	f3bf 8f4f 	dsb	sy
 800e9ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e9bc:	e7fe      	b.n	800e9bc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d002      	beq.n	800e9ca <xQueueGenericCreateStatic+0x4e>
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d001      	beq.n	800e9ce <xQueueGenericCreateStatic+0x52>
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	e000      	b.n	800e9d0 <xQueueGenericCreateStatic+0x54>
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d109      	bne.n	800e9e8 <xQueueGenericCreateStatic+0x6c>
 800e9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d8:	f383 8811 	msr	BASEPRI, r3
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	623b      	str	r3, [r7, #32]
 800e9e6:	e7fe      	b.n	800e9e6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d102      	bne.n	800e9f4 <xQueueGenericCreateStatic+0x78>
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d101      	bne.n	800e9f8 <xQueueGenericCreateStatic+0x7c>
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	e000      	b.n	800e9fa <xQueueGenericCreateStatic+0x7e>
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d109      	bne.n	800ea12 <xQueueGenericCreateStatic+0x96>
 800e9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea02:	f383 8811 	msr	BASEPRI, r3
 800ea06:	f3bf 8f6f 	isb	sy
 800ea0a:	f3bf 8f4f 	dsb	sy
 800ea0e:	61fb      	str	r3, [r7, #28]
 800ea10:	e7fe      	b.n	800ea10 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ea12:	2350      	movs	r3, #80	; 0x50
 800ea14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	2b50      	cmp	r3, #80	; 0x50
 800ea1a:	d009      	beq.n	800ea30 <xQueueGenericCreateStatic+0xb4>
 800ea1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea20:	f383 8811 	msr	BASEPRI, r3
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	f3bf 8f4f 	dsb	sy
 800ea2c:	61bb      	str	r3, [r7, #24]
 800ea2e:	e7fe      	b.n	800ea2e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ea30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ea36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d00d      	beq.n	800ea58 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ea3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3e:	2201      	movs	r2, #1
 800ea40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea44:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ea48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4a:	9300      	str	r3, [sp, #0]
 800ea4c:	4613      	mov	r3, r2
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	68b9      	ldr	r1, [r7, #8]
 800ea52:	68f8      	ldr	r0, [r7, #12]
 800ea54:	f000 f844 	bl	800eae0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3730      	adds	r7, #48	; 0x30
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b08a      	sub	sp, #40	; 0x28
 800ea66:	af02      	add	r7, sp, #8
 800ea68:	60f8      	str	r0, [r7, #12]
 800ea6a:	60b9      	str	r1, [r7, #8]
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d109      	bne.n	800ea8a <xQueueGenericCreate+0x28>
 800ea76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea7a:	f383 8811 	msr	BASEPRI, r3
 800ea7e:	f3bf 8f6f 	isb	sy
 800ea82:	f3bf 8f4f 	dsb	sy
 800ea86:	613b      	str	r3, [r7, #16]
 800ea88:	e7fe      	b.n	800ea88 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d102      	bne.n	800ea96 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ea90:	2300      	movs	r3, #0
 800ea92:	61fb      	str	r3, [r7, #28]
 800ea94:	e004      	b.n	800eaa0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	fb02 f303 	mul.w	r3, r2, r3
 800ea9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	3350      	adds	r3, #80	; 0x50
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f002 ff63 	bl	8011970 <pvPortMalloc>
 800eaaa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d011      	beq.n	800ead6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800eab2:	69bb      	ldr	r3, [r7, #24]
 800eab4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	3350      	adds	r3, #80	; 0x50
 800eaba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	2200      	movs	r2, #0
 800eac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eac4:	79fa      	ldrb	r2, [r7, #7]
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	9300      	str	r3, [sp, #0]
 800eaca:	4613      	mov	r3, r2
 800eacc:	697a      	ldr	r2, [r7, #20]
 800eace:	68b9      	ldr	r1, [r7, #8]
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f000 f805 	bl	800eae0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ead6:	69bb      	ldr	r3, [r7, #24]
	}
 800ead8:	4618      	mov	r0, r3
 800eada:	3720      	adds	r7, #32
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	607a      	str	r2, [r7, #4]
 800eaec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d103      	bne.n	800eafc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	69ba      	ldr	r2, [r7, #24]
 800eaf8:	601a      	str	r2, [r3, #0]
 800eafa:	e002      	b.n	800eb02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800eafc:	69bb      	ldr	r3, [r7, #24]
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	68fa      	ldr	r2, [r7, #12]
 800eb06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eb08:	69bb      	ldr	r3, [r7, #24]
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eb0e:	2101      	movs	r1, #1
 800eb10:	69b8      	ldr	r0, [r7, #24]
 800eb12:	f7ff fecb 	bl	800e8ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	78fa      	ldrb	r2, [r7, #3]
 800eb1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eb1e:	bf00      	nop
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800eb26:	b580      	push	{r7, lr}
 800eb28:	b082      	sub	sp, #8
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d00e      	beq.n	800eb52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2200      	movs	r2, #0
 800eb38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800eb46:	2300      	movs	r3, #0
 800eb48:	2200      	movs	r2, #0
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f000 f905 	bl	800ed5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800eb52:	bf00      	nop
 800eb54:	3708      	adds	r7, #8
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}

0800eb5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800eb5a:	b580      	push	{r7, lr}
 800eb5c:	b086      	sub	sp, #24
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	4603      	mov	r3, r0
 800eb62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800eb64:	2301      	movs	r3, #1
 800eb66:	617b      	str	r3, [r7, #20]
 800eb68:	2300      	movs	r3, #0
 800eb6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800eb6c:	79fb      	ldrb	r3, [r7, #7]
 800eb6e:	461a      	mov	r2, r3
 800eb70:	6939      	ldr	r1, [r7, #16]
 800eb72:	6978      	ldr	r0, [r7, #20]
 800eb74:	f7ff ff75 	bl	800ea62 <xQueueGenericCreate>
 800eb78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800eb7a:	68f8      	ldr	r0, [r7, #12]
 800eb7c:	f7ff ffd3 	bl	800eb26 <prvInitialiseMutex>

		return xNewQueue;
 800eb80:	68fb      	ldr	r3, [r7, #12]
	}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3718      	adds	r7, #24
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b088      	sub	sp, #32
 800eb8e:	af02      	add	r7, sp, #8
 800eb90:	4603      	mov	r3, r0
 800eb92:	6039      	str	r1, [r7, #0]
 800eb94:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800eb96:	2301      	movs	r3, #1
 800eb98:	617b      	str	r3, [r7, #20]
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800eb9e:	79fb      	ldrb	r3, [r7, #7]
 800eba0:	9300      	str	r3, [sp, #0]
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	2200      	movs	r2, #0
 800eba6:	6939      	ldr	r1, [r7, #16]
 800eba8:	6978      	ldr	r0, [r7, #20]
 800ebaa:	f7ff fee7 	bl	800e97c <xQueueGenericCreateStatic>
 800ebae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ebb0:	68f8      	ldr	r0, [r7, #12]
 800ebb2:	f7ff ffb8 	bl	800eb26 <prvInitialiseMutex>

		return xNewQueue;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
	}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3718      	adds	r7, #24
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ebc0:	b590      	push	{r4, r7, lr}
 800ebc2:	b087      	sub	sp, #28
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d109      	bne.n	800ebe6 <xQueueGiveMutexRecursive+0x26>
 800ebd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd6:	f383 8811 	msr	BASEPRI, r3
 800ebda:	f3bf 8f6f 	isb	sy
 800ebde:	f3bf 8f4f 	dsb	sy
 800ebe2:	60fb      	str	r3, [r7, #12]
 800ebe4:	e7fe      	b.n	800ebe4 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	689c      	ldr	r4, [r3, #8]
 800ebea:	f001 fd69 	bl	80106c0 <xTaskGetCurrentTaskHandle>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	429c      	cmp	r4, r3
 800ebf2:	d111      	bne.n	800ec18 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	68db      	ldr	r3, [r3, #12]
 800ebf8:	1e5a      	subs	r2, r3, #1
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d105      	bne.n	800ec12 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ec06:	2300      	movs	r3, #0
 800ec08:	2200      	movs	r2, #0
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	6938      	ldr	r0, [r7, #16]
 800ec0e:	f000 f8a5 	bl	800ed5c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ec12:	2301      	movs	r3, #1
 800ec14:	617b      	str	r3, [r7, #20]
 800ec16:	e001      	b.n	800ec1c <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ec1c:	697b      	ldr	r3, [r7, #20]
	}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	371c      	adds	r7, #28
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd90      	pop	{r4, r7, pc}

0800ec26 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ec26:	b590      	push	{r4, r7, lr}
 800ec28:	b087      	sub	sp, #28
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
 800ec2e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d109      	bne.n	800ec4e <xQueueTakeMutexRecursive+0x28>
 800ec3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3e:	f383 8811 	msr	BASEPRI, r3
 800ec42:	f3bf 8f6f 	isb	sy
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	60fb      	str	r3, [r7, #12]
 800ec4c:	e7fe      	b.n	800ec4c <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	689c      	ldr	r4, [r3, #8]
 800ec52:	f001 fd35 	bl	80106c0 <xTaskGetCurrentTaskHandle>
 800ec56:	4603      	mov	r3, r0
 800ec58:	429c      	cmp	r4, r3
 800ec5a:	d107      	bne.n	800ec6c <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	1c5a      	adds	r2, r3, #1
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ec66:	2301      	movs	r3, #1
 800ec68:	617b      	str	r3, [r7, #20]
 800ec6a:	e00c      	b.n	800ec86 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ec6c:	6839      	ldr	r1, [r7, #0]
 800ec6e:	6938      	ldr	r0, [r7, #16]
 800ec70:	f000 fb68 	bl	800f344 <xQueueSemaphoreTake>
 800ec74:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d004      	beq.n	800ec86 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	68db      	ldr	r3, [r3, #12]
 800ec80:	1c5a      	adds	r2, r3, #1
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ec86:	697b      	ldr	r3, [r7, #20]
	}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	371c      	adds	r7, #28
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd90      	pop	{r4, r7, pc}

0800ec90 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b08a      	sub	sp, #40	; 0x28
 800ec94:	af02      	add	r7, sp, #8
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d109      	bne.n	800ecb6 <xQueueCreateCountingSemaphoreStatic+0x26>
 800eca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca6:	f383 8811 	msr	BASEPRI, r3
 800ecaa:	f3bf 8f6f 	isb	sy
 800ecae:	f3bf 8f4f 	dsb	sy
 800ecb2:	61bb      	str	r3, [r7, #24]
 800ecb4:	e7fe      	b.n	800ecb4 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ecb6:	68ba      	ldr	r2, [r7, #8]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d909      	bls.n	800ecd2 <xQueueCreateCountingSemaphoreStatic+0x42>
 800ecbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc2:	f383 8811 	msr	BASEPRI, r3
 800ecc6:	f3bf 8f6f 	isb	sy
 800ecca:	f3bf 8f4f 	dsb	sy
 800ecce:	617b      	str	r3, [r7, #20]
 800ecd0:	e7fe      	b.n	800ecd0 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ecd2:	2302      	movs	r3, #2
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	2100      	movs	r1, #0
 800ecdc:	68f8      	ldr	r0, [r7, #12]
 800ecde:	f7ff fe4d 	bl	800e97c <xQueueGenericCreateStatic>
 800ece2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d002      	beq.n	800ecf0 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ecea:	69fb      	ldr	r3, [r7, #28]
 800ecec:	68ba      	ldr	r2, [r7, #8]
 800ecee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ecf0:	69fb      	ldr	r3, [r7, #28]
	}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3720      	adds	r7, #32
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b086      	sub	sp, #24
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
 800ed02:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d109      	bne.n	800ed1e <xQueueCreateCountingSemaphore+0x24>
 800ed0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0e:	f383 8811 	msr	BASEPRI, r3
 800ed12:	f3bf 8f6f 	isb	sy
 800ed16:	f3bf 8f4f 	dsb	sy
 800ed1a:	613b      	str	r3, [r7, #16]
 800ed1c:	e7fe      	b.n	800ed1c <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ed1e:	683a      	ldr	r2, [r7, #0]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d909      	bls.n	800ed3a <xQueueCreateCountingSemaphore+0x40>
 800ed26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2a:	f383 8811 	msr	BASEPRI, r3
 800ed2e:	f3bf 8f6f 	isb	sy
 800ed32:	f3bf 8f4f 	dsb	sy
 800ed36:	60fb      	str	r3, [r7, #12]
 800ed38:	e7fe      	b.n	800ed38 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ed3a:	2202      	movs	r2, #2
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f7ff fe8f 	bl	800ea62 <xQueueGenericCreate>
 800ed44:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d002      	beq.n	800ed52 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	683a      	ldr	r2, [r7, #0]
 800ed50:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ed52:	697b      	ldr	r3, [r7, #20]
	}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3718      	adds	r7, #24
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b08e      	sub	sp, #56	; 0x38
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	60f8      	str	r0, [r7, #12]
 800ed64:	60b9      	str	r1, [r7, #8]
 800ed66:	607a      	str	r2, [r7, #4]
 800ed68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ed72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d109      	bne.n	800ed8c <xQueueGenericSend+0x30>
 800ed78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed7c:	f383 8811 	msr	BASEPRI, r3
 800ed80:	f3bf 8f6f 	isb	sy
 800ed84:	f3bf 8f4f 	dsb	sy
 800ed88:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed8a:	e7fe      	b.n	800ed8a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d103      	bne.n	800ed9a <xQueueGenericSend+0x3e>
 800ed92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d101      	bne.n	800ed9e <xQueueGenericSend+0x42>
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e000      	b.n	800eda0 <xQueueGenericSend+0x44>
 800ed9e:	2300      	movs	r3, #0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d109      	bne.n	800edb8 <xQueueGenericSend+0x5c>
 800eda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda8:	f383 8811 	msr	BASEPRI, r3
 800edac:	f3bf 8f6f 	isb	sy
 800edb0:	f3bf 8f4f 	dsb	sy
 800edb4:	627b      	str	r3, [r7, #36]	; 0x24
 800edb6:	e7fe      	b.n	800edb6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	2b02      	cmp	r3, #2
 800edbc:	d103      	bne.n	800edc6 <xQueueGenericSend+0x6a>
 800edbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d101      	bne.n	800edca <xQueueGenericSend+0x6e>
 800edc6:	2301      	movs	r3, #1
 800edc8:	e000      	b.n	800edcc <xQueueGenericSend+0x70>
 800edca:	2300      	movs	r3, #0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d109      	bne.n	800ede4 <xQueueGenericSend+0x88>
 800edd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd4:	f383 8811 	msr	BASEPRI, r3
 800edd8:	f3bf 8f6f 	isb	sy
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	623b      	str	r3, [r7, #32]
 800ede2:	e7fe      	b.n	800ede2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ede4:	f001 fc7c 	bl	80106e0 <xTaskGetSchedulerState>
 800ede8:	4603      	mov	r3, r0
 800edea:	2b00      	cmp	r3, #0
 800edec:	d102      	bne.n	800edf4 <xQueueGenericSend+0x98>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d101      	bne.n	800edf8 <xQueueGenericSend+0x9c>
 800edf4:	2301      	movs	r3, #1
 800edf6:	e000      	b.n	800edfa <xQueueGenericSend+0x9e>
 800edf8:	2300      	movs	r3, #0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d109      	bne.n	800ee12 <xQueueGenericSend+0xb6>
 800edfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	61fb      	str	r3, [r7, #28]
 800ee10:	e7fe      	b.n	800ee10 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee12:	f002 fc93 	bl	801173c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d302      	bcc.n	800ee28 <xQueueGenericSend+0xcc>
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	2b02      	cmp	r3, #2
 800ee26:	d129      	bne.n	800ee7c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee28:	683a      	ldr	r2, [r7, #0]
 800ee2a:	68b9      	ldr	r1, [r7, #8]
 800ee2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee2e:	f000 fc48 	bl	800f6c2 <prvCopyDataToQueue>
 800ee32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d010      	beq.n	800ee5e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3e:	3324      	adds	r3, #36	; 0x24
 800ee40:	4618      	mov	r0, r3
 800ee42:	f001 fa5f 	bl	8010304 <xTaskRemoveFromEventList>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d013      	beq.n	800ee74 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ee4c:	4b3f      	ldr	r3, [pc, #252]	; (800ef4c <xQueueGenericSend+0x1f0>)
 800ee4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee52:	601a      	str	r2, [r3, #0]
 800ee54:	f3bf 8f4f 	dsb	sy
 800ee58:	f3bf 8f6f 	isb	sy
 800ee5c:	e00a      	b.n	800ee74 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ee5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d007      	beq.n	800ee74 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ee64:	4b39      	ldr	r3, [pc, #228]	; (800ef4c <xQueueGenericSend+0x1f0>)
 800ee66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee6a:	601a      	str	r2, [r3, #0]
 800ee6c:	f3bf 8f4f 	dsb	sy
 800ee70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ee74:	f002 fc90 	bl	8011798 <vPortExitCritical>
				return pdPASS;
 800ee78:	2301      	movs	r3, #1
 800ee7a:	e063      	b.n	800ef44 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d103      	bne.n	800ee8a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee82:	f002 fc89 	bl	8011798 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ee86:	2300      	movs	r3, #0
 800ee88:	e05c      	b.n	800ef44 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d106      	bne.n	800ee9e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee90:	f107 0314 	add.w	r3, r7, #20
 800ee94:	4618      	mov	r0, r3
 800ee96:	f001 fa99 	bl	80103cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee9e:	f002 fc7b 	bl	8011798 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eea2:	f000 ffdb 	bl	800fe5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eea6:	f002 fc49 	bl	801173c <vPortEnterCritical>
 800eeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eeb0:	b25b      	sxtb	r3, r3
 800eeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeb6:	d103      	bne.n	800eec0 <xQueueGenericSend+0x164>
 800eeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeba:	2200      	movs	r2, #0
 800eebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eec6:	b25b      	sxtb	r3, r3
 800eec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eecc:	d103      	bne.n	800eed6 <xQueueGenericSend+0x17a>
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	2200      	movs	r2, #0
 800eed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eed6:	f002 fc5f 	bl	8011798 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eeda:	1d3a      	adds	r2, r7, #4
 800eedc:	f107 0314 	add.w	r3, r7, #20
 800eee0:	4611      	mov	r1, r2
 800eee2:	4618      	mov	r0, r3
 800eee4:	f001 fa88 	bl	80103f8 <xTaskCheckForTimeOut>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d124      	bne.n	800ef38 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eeee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eef0:	f000 fcdf 	bl	800f8b2 <prvIsQueueFull>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d018      	beq.n	800ef2c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefc:	3310      	adds	r3, #16
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	4611      	mov	r1, r2
 800ef02:	4618      	mov	r0, r3
 800ef04:	f001 f9b0 	bl	8010268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ef08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef0a:	f000 fc6a 	bl	800f7e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ef0e:	f000 ffeb 	bl	800fee8 <xTaskResumeAll>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	f47f af7c 	bne.w	800ee12 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ef1a:	4b0c      	ldr	r3, [pc, #48]	; (800ef4c <xQueueGenericSend+0x1f0>)
 800ef1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef20:	601a      	str	r2, [r3, #0]
 800ef22:	f3bf 8f4f 	dsb	sy
 800ef26:	f3bf 8f6f 	isb	sy
 800ef2a:	e772      	b.n	800ee12 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ef2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef2e:	f000 fc58 	bl	800f7e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef32:	f000 ffd9 	bl	800fee8 <xTaskResumeAll>
 800ef36:	e76c      	b.n	800ee12 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ef38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef3a:	f000 fc52 	bl	800f7e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef3e:	f000 ffd3 	bl	800fee8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ef42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3738      	adds	r7, #56	; 0x38
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	e000ed04 	.word	0xe000ed04

0800ef50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b08e      	sub	sp, #56	; 0x38
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
 800ef5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ef62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d109      	bne.n	800ef7c <xQueueGenericSendFromISR+0x2c>
 800ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	627b      	str	r3, [r7, #36]	; 0x24
 800ef7a:	e7fe      	b.n	800ef7a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d103      	bne.n	800ef8a <xQueueGenericSendFromISR+0x3a>
 800ef82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d101      	bne.n	800ef8e <xQueueGenericSendFromISR+0x3e>
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	e000      	b.n	800ef90 <xQueueGenericSendFromISR+0x40>
 800ef8e:	2300      	movs	r3, #0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d109      	bne.n	800efa8 <xQueueGenericSendFromISR+0x58>
 800ef94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef98:	f383 8811 	msr	BASEPRI, r3
 800ef9c:	f3bf 8f6f 	isb	sy
 800efa0:	f3bf 8f4f 	dsb	sy
 800efa4:	623b      	str	r3, [r7, #32]
 800efa6:	e7fe      	b.n	800efa6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	2b02      	cmp	r3, #2
 800efac:	d103      	bne.n	800efb6 <xQueueGenericSendFromISR+0x66>
 800efae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d101      	bne.n	800efba <xQueueGenericSendFromISR+0x6a>
 800efb6:	2301      	movs	r3, #1
 800efb8:	e000      	b.n	800efbc <xQueueGenericSendFromISR+0x6c>
 800efba:	2300      	movs	r3, #0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d109      	bne.n	800efd4 <xQueueGenericSendFromISR+0x84>
 800efc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc4:	f383 8811 	msr	BASEPRI, r3
 800efc8:	f3bf 8f6f 	isb	sy
 800efcc:	f3bf 8f4f 	dsb	sy
 800efd0:	61fb      	str	r3, [r7, #28]
 800efd2:	e7fe      	b.n	800efd2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800efd4:	f002 fc8e 	bl	80118f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800efd8:	f3ef 8211 	mrs	r2, BASEPRI
 800efdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe0:	f383 8811 	msr	BASEPRI, r3
 800efe4:	f3bf 8f6f 	isb	sy
 800efe8:	f3bf 8f4f 	dsb	sy
 800efec:	61ba      	str	r2, [r7, #24]
 800efee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eff0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eff2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800effc:	429a      	cmp	r2, r3
 800effe:	d302      	bcc.n	800f006 <xQueueGenericSendFromISR+0xb6>
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2b02      	cmp	r3, #2
 800f004:	d12c      	bne.n	800f060 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f00c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f010:	683a      	ldr	r2, [r7, #0]
 800f012:	68b9      	ldr	r1, [r7, #8]
 800f014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f016:	f000 fb54 	bl	800f6c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f01a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f022:	d112      	bne.n	800f04a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d016      	beq.n	800f05a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02e:	3324      	adds	r3, #36	; 0x24
 800f030:	4618      	mov	r0, r3
 800f032:	f001 f967 	bl	8010304 <xTaskRemoveFromEventList>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d00e      	beq.n	800f05a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d00b      	beq.n	800f05a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2201      	movs	r2, #1
 800f046:	601a      	str	r2, [r3, #0]
 800f048:	e007      	b.n	800f05a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f04a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f04e:	3301      	adds	r3, #1
 800f050:	b2db      	uxtb	r3, r3
 800f052:	b25a      	sxtb	r2, r3
 800f054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f05a:	2301      	movs	r3, #1
 800f05c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f05e:	e001      	b.n	800f064 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f060:	2300      	movs	r3, #0
 800f062:	637b      	str	r3, [r7, #52]	; 0x34
 800f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f066:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f070:	4618      	mov	r0, r3
 800f072:	3738      	adds	r7, #56	; 0x38
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}

0800f078 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b08e      	sub	sp, #56	; 0x38
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d109      	bne.n	800f0a0 <xQueueGiveFromISR+0x28>
	__asm volatile
 800f08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f090:	f383 8811 	msr	BASEPRI, r3
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	623b      	str	r3, [r7, #32]
 800f09e:	e7fe      	b.n	800f09e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d009      	beq.n	800f0bc <xQueueGiveFromISR+0x44>
 800f0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ac:	f383 8811 	msr	BASEPRI, r3
 800f0b0:	f3bf 8f6f 	isb	sy
 800f0b4:	f3bf 8f4f 	dsb	sy
 800f0b8:	61fb      	str	r3, [r7, #28]
 800f0ba:	e7fe      	b.n	800f0ba <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d103      	bne.n	800f0cc <xQueueGiveFromISR+0x54>
 800f0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d101      	bne.n	800f0d0 <xQueueGiveFromISR+0x58>
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	e000      	b.n	800f0d2 <xQueueGiveFromISR+0x5a>
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d109      	bne.n	800f0ea <xQueueGiveFromISR+0x72>
 800f0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0da:	f383 8811 	msr	BASEPRI, r3
 800f0de:	f3bf 8f6f 	isb	sy
 800f0e2:	f3bf 8f4f 	dsb	sy
 800f0e6:	61bb      	str	r3, [r7, #24]
 800f0e8:	e7fe      	b.n	800f0e8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0ea:	f002 fc03 	bl	80118f4 <vPortValidateInterruptPriority>
	__asm volatile
 800f0ee:	f3ef 8211 	mrs	r2, BASEPRI
 800f0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f6:	f383 8811 	msr	BASEPRI, r3
 800f0fa:	f3bf 8f6f 	isb	sy
 800f0fe:	f3bf 8f4f 	dsb	sy
 800f102:	617a      	str	r2, [r7, #20]
 800f104:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f106:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f108:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f10e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f116:	429a      	cmp	r2, r3
 800f118:	d22b      	bcs.n	800f172 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f11c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f126:	1c5a      	adds	r2, r3, #1
 800f128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f12c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f134:	d112      	bne.n	800f15c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d016      	beq.n	800f16c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f140:	3324      	adds	r3, #36	; 0x24
 800f142:	4618      	mov	r0, r3
 800f144:	f001 f8de 	bl	8010304 <xTaskRemoveFromEventList>
 800f148:	4603      	mov	r3, r0
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00e      	beq.n	800f16c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d00b      	beq.n	800f16c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	2201      	movs	r2, #1
 800f158:	601a      	str	r2, [r3, #0]
 800f15a:	e007      	b.n	800f16c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f15c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f160:	3301      	adds	r3, #1
 800f162:	b2db      	uxtb	r3, r3
 800f164:	b25a      	sxtb	r2, r3
 800f166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f16c:	2301      	movs	r3, #1
 800f16e:	637b      	str	r3, [r7, #52]	; 0x34
 800f170:	e001      	b.n	800f176 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f172:	2300      	movs	r3, #0
 800f174:	637b      	str	r3, [r7, #52]	; 0x34
 800f176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f178:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f182:	4618      	mov	r0, r3
 800f184:	3738      	adds	r7, #56	; 0x38
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
	...

0800f18c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b08c      	sub	sp, #48	; 0x30
 800f190:	af00      	add	r7, sp, #0
 800f192:	60f8      	str	r0, [r7, #12]
 800f194:	60b9      	str	r1, [r7, #8]
 800f196:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f198:	2300      	movs	r3, #0
 800f19a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d109      	bne.n	800f1ba <xQueueReceive+0x2e>
	__asm volatile
 800f1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1aa:	f383 8811 	msr	BASEPRI, r3
 800f1ae:	f3bf 8f6f 	isb	sy
 800f1b2:	f3bf 8f4f 	dsb	sy
 800f1b6:	623b      	str	r3, [r7, #32]
 800f1b8:	e7fe      	b.n	800f1b8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d103      	bne.n	800f1c8 <xQueueReceive+0x3c>
 800f1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d101      	bne.n	800f1cc <xQueueReceive+0x40>
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	e000      	b.n	800f1ce <xQueueReceive+0x42>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d109      	bne.n	800f1e6 <xQueueReceive+0x5a>
 800f1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d6:	f383 8811 	msr	BASEPRI, r3
 800f1da:	f3bf 8f6f 	isb	sy
 800f1de:	f3bf 8f4f 	dsb	sy
 800f1e2:	61fb      	str	r3, [r7, #28]
 800f1e4:	e7fe      	b.n	800f1e4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1e6:	f001 fa7b 	bl	80106e0 <xTaskGetSchedulerState>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d102      	bne.n	800f1f6 <xQueueReceive+0x6a>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d101      	bne.n	800f1fa <xQueueReceive+0x6e>
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	e000      	b.n	800f1fc <xQueueReceive+0x70>
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d109      	bne.n	800f214 <xQueueReceive+0x88>
 800f200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f204:	f383 8811 	msr	BASEPRI, r3
 800f208:	f3bf 8f6f 	isb	sy
 800f20c:	f3bf 8f4f 	dsb	sy
 800f210:	61bb      	str	r3, [r7, #24]
 800f212:	e7fe      	b.n	800f212 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f214:	f002 fa92 	bl	801173c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f21c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f220:	2b00      	cmp	r3, #0
 800f222:	d01f      	beq.n	800f264 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f224:	68b9      	ldr	r1, [r7, #8]
 800f226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f228:	f000 fab5 	bl	800f796 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22e:	1e5a      	subs	r2, r3, #1
 800f230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f232:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f236:	691b      	ldr	r3, [r3, #16]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00f      	beq.n	800f25c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23e:	3310      	adds	r3, #16
 800f240:	4618      	mov	r0, r3
 800f242:	f001 f85f 	bl	8010304 <xTaskRemoveFromEventList>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d007      	beq.n	800f25c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f24c:	4b3c      	ldr	r3, [pc, #240]	; (800f340 <xQueueReceive+0x1b4>)
 800f24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f252:	601a      	str	r2, [r3, #0]
 800f254:	f3bf 8f4f 	dsb	sy
 800f258:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f25c:	f002 fa9c 	bl	8011798 <vPortExitCritical>
				return pdPASS;
 800f260:	2301      	movs	r3, #1
 800f262:	e069      	b.n	800f338 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d103      	bne.n	800f272 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f26a:	f002 fa95 	bl	8011798 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f26e:	2300      	movs	r3, #0
 800f270:	e062      	b.n	800f338 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f274:	2b00      	cmp	r3, #0
 800f276:	d106      	bne.n	800f286 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f278:	f107 0310 	add.w	r3, r7, #16
 800f27c:	4618      	mov	r0, r3
 800f27e:	f001 f8a5 	bl	80103cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f282:	2301      	movs	r3, #1
 800f284:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f286:	f002 fa87 	bl	8011798 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f28a:	f000 fde7 	bl	800fe5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f28e:	f002 fa55 	bl	801173c <vPortEnterCritical>
 800f292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f298:	b25b      	sxtb	r3, r3
 800f29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29e:	d103      	bne.n	800f2a8 <xQueueReceive+0x11c>
 800f2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2ae:	b25b      	sxtb	r3, r3
 800f2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2b4:	d103      	bne.n	800f2be <xQueueReceive+0x132>
 800f2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f2be:	f002 fa6b 	bl	8011798 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f2c2:	1d3a      	adds	r2, r7, #4
 800f2c4:	f107 0310 	add.w	r3, r7, #16
 800f2c8:	4611      	mov	r1, r2
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f001 f894 	bl	80103f8 <xTaskCheckForTimeOut>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d123      	bne.n	800f31e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2d8:	f000 fad5 	bl	800f886 <prvIsQueueEmpty>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d017      	beq.n	800f312 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e4:	3324      	adds	r3, #36	; 0x24
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	4611      	mov	r1, r2
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f000 ffbc 	bl	8010268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2f2:	f000 fa76 	bl	800f7e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2f6:	f000 fdf7 	bl	800fee8 <xTaskResumeAll>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d189      	bne.n	800f214 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f300:	4b0f      	ldr	r3, [pc, #60]	; (800f340 <xQueueReceive+0x1b4>)
 800f302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f306:	601a      	str	r2, [r3, #0]
 800f308:	f3bf 8f4f 	dsb	sy
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	e780      	b.n	800f214 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f314:	f000 fa65 	bl	800f7e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f318:	f000 fde6 	bl	800fee8 <xTaskResumeAll>
 800f31c:	e77a      	b.n	800f214 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f320:	f000 fa5f 	bl	800f7e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f324:	f000 fde0 	bl	800fee8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f32a:	f000 faac 	bl	800f886 <prvIsQueueEmpty>
 800f32e:	4603      	mov	r3, r0
 800f330:	2b00      	cmp	r3, #0
 800f332:	f43f af6f 	beq.w	800f214 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f336:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3730      	adds	r7, #48	; 0x30
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	e000ed04 	.word	0xe000ed04

0800f344 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b08e      	sub	sp, #56	; 0x38
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f34e:	2300      	movs	r3, #0
 800f350:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f356:	2300      	movs	r3, #0
 800f358:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d109      	bne.n	800f374 <xQueueSemaphoreTake+0x30>
 800f360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f364:	f383 8811 	msr	BASEPRI, r3
 800f368:	f3bf 8f6f 	isb	sy
 800f36c:	f3bf 8f4f 	dsb	sy
 800f370:	623b      	str	r3, [r7, #32]
 800f372:	e7fe      	b.n	800f372 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d009      	beq.n	800f390 <xQueueSemaphoreTake+0x4c>
 800f37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f380:	f383 8811 	msr	BASEPRI, r3
 800f384:	f3bf 8f6f 	isb	sy
 800f388:	f3bf 8f4f 	dsb	sy
 800f38c:	61fb      	str	r3, [r7, #28]
 800f38e:	e7fe      	b.n	800f38e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f390:	f001 f9a6 	bl	80106e0 <xTaskGetSchedulerState>
 800f394:	4603      	mov	r3, r0
 800f396:	2b00      	cmp	r3, #0
 800f398:	d102      	bne.n	800f3a0 <xQueueSemaphoreTake+0x5c>
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d101      	bne.n	800f3a4 <xQueueSemaphoreTake+0x60>
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	e000      	b.n	800f3a6 <xQueueSemaphoreTake+0x62>
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d109      	bne.n	800f3be <xQueueSemaphoreTake+0x7a>
 800f3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ae:	f383 8811 	msr	BASEPRI, r3
 800f3b2:	f3bf 8f6f 	isb	sy
 800f3b6:	f3bf 8f4f 	dsb	sy
 800f3ba:	61bb      	str	r3, [r7, #24]
 800f3bc:	e7fe      	b.n	800f3bc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f3be:	f002 f9bd 	bl	801173c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3c6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d024      	beq.n	800f418 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d0:	1e5a      	subs	r2, r3, #1
 800f3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d104      	bne.n	800f3e8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f3de:	f001 faf1 	bl	80109c4 <pvTaskIncrementMutexHeldCount>
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ea:	691b      	ldr	r3, [r3, #16]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d00f      	beq.n	800f410 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f2:	3310      	adds	r3, #16
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f000 ff85 	bl	8010304 <xTaskRemoveFromEventList>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d007      	beq.n	800f410 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f400:	4b53      	ldr	r3, [pc, #332]	; (800f550 <xQueueSemaphoreTake+0x20c>)
 800f402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f406:	601a      	str	r2, [r3, #0]
 800f408:	f3bf 8f4f 	dsb	sy
 800f40c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f410:	f002 f9c2 	bl	8011798 <vPortExitCritical>
				return pdPASS;
 800f414:	2301      	movs	r3, #1
 800f416:	e096      	b.n	800f546 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d110      	bne.n	800f440 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f420:	2b00      	cmp	r3, #0
 800f422:	d009      	beq.n	800f438 <xQueueSemaphoreTake+0xf4>
 800f424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f428:	f383 8811 	msr	BASEPRI, r3
 800f42c:	f3bf 8f6f 	isb	sy
 800f430:	f3bf 8f4f 	dsb	sy
 800f434:	617b      	str	r3, [r7, #20]
 800f436:	e7fe      	b.n	800f436 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f438:	f002 f9ae 	bl	8011798 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f43c:	2300      	movs	r3, #0
 800f43e:	e082      	b.n	800f546 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f442:	2b00      	cmp	r3, #0
 800f444:	d106      	bne.n	800f454 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f446:	f107 030c 	add.w	r3, r7, #12
 800f44a:	4618      	mov	r0, r3
 800f44c:	f000 ffbe 	bl	80103cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f450:	2301      	movs	r3, #1
 800f452:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f454:	f002 f9a0 	bl	8011798 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f458:	f000 fd00 	bl	800fe5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f45c:	f002 f96e 	bl	801173c <vPortEnterCritical>
 800f460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f466:	b25b      	sxtb	r3, r3
 800f468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f46c:	d103      	bne.n	800f476 <xQueueSemaphoreTake+0x132>
 800f46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f470:	2200      	movs	r2, #0
 800f472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f47c:	b25b      	sxtb	r3, r3
 800f47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f482:	d103      	bne.n	800f48c <xQueueSemaphoreTake+0x148>
 800f484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f486:	2200      	movs	r2, #0
 800f488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f48c:	f002 f984 	bl	8011798 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f490:	463a      	mov	r2, r7
 800f492:	f107 030c 	add.w	r3, r7, #12
 800f496:	4611      	mov	r1, r2
 800f498:	4618      	mov	r0, r3
 800f49a:	f000 ffad 	bl	80103f8 <xTaskCheckForTimeOut>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d132      	bne.n	800f50a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4a6:	f000 f9ee 	bl	800f886 <prvIsQueueEmpty>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d026      	beq.n	800f4fe <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d109      	bne.n	800f4cc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800f4b8:	f002 f940 	bl	801173c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4be:	689b      	ldr	r3, [r3, #8]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f001 f92b 	bl	801071c <xTaskPriorityInherit>
 800f4c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f4c8:	f002 f966 	bl	8011798 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ce:	3324      	adds	r3, #36	; 0x24
 800f4d0:	683a      	ldr	r2, [r7, #0]
 800f4d2:	4611      	mov	r1, r2
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f000 fec7 	bl	8010268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f4da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4dc:	f000 f981 	bl	800f7e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f4e0:	f000 fd02 	bl	800fee8 <xTaskResumeAll>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	f47f af69 	bne.w	800f3be <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800f4ec:	4b18      	ldr	r3, [pc, #96]	; (800f550 <xQueueSemaphoreTake+0x20c>)
 800f4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4f2:	601a      	str	r2, [r3, #0]
 800f4f4:	f3bf 8f4f 	dsb	sy
 800f4f8:	f3bf 8f6f 	isb	sy
 800f4fc:	e75f      	b.n	800f3be <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f4fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f500:	f000 f96f 	bl	800f7e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f504:	f000 fcf0 	bl	800fee8 <xTaskResumeAll>
 800f508:	e759      	b.n	800f3be <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f50a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f50c:	f000 f969 	bl	800f7e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f510:	f000 fcea 	bl	800fee8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f514:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f516:	f000 f9b6 	bl	800f886 <prvIsQueueEmpty>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f43f af4e 	beq.w	800f3be <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f524:	2b00      	cmp	r3, #0
 800f526:	d00d      	beq.n	800f544 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800f528:	f002 f908 	bl	801173c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f52c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f52e:	f000 f8b0 	bl	800f692 <prvGetDisinheritPriorityAfterTimeout>
 800f532:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f536:	689b      	ldr	r3, [r3, #8]
 800f538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f53a:	4618      	mov	r0, r3
 800f53c:	f001 f9c2 	bl	80108c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f540:	f002 f92a 	bl	8011798 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f544:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f546:	4618      	mov	r0, r3
 800f548:	3738      	adds	r7, #56	; 0x38
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	e000ed04 	.word	0xe000ed04

0800f554 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b08e      	sub	sp, #56	; 0x38
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f566:	2b00      	cmp	r3, #0
 800f568:	d109      	bne.n	800f57e <xQueueReceiveFromISR+0x2a>
 800f56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f56e:	f383 8811 	msr	BASEPRI, r3
 800f572:	f3bf 8f6f 	isb	sy
 800f576:	f3bf 8f4f 	dsb	sy
 800f57a:	623b      	str	r3, [r7, #32]
 800f57c:	e7fe      	b.n	800f57c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d103      	bne.n	800f58c <xQueueReceiveFromISR+0x38>
 800f584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d101      	bne.n	800f590 <xQueueReceiveFromISR+0x3c>
 800f58c:	2301      	movs	r3, #1
 800f58e:	e000      	b.n	800f592 <xQueueReceiveFromISR+0x3e>
 800f590:	2300      	movs	r3, #0
 800f592:	2b00      	cmp	r3, #0
 800f594:	d109      	bne.n	800f5aa <xQueueReceiveFromISR+0x56>
 800f596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59a:	f383 8811 	msr	BASEPRI, r3
 800f59e:	f3bf 8f6f 	isb	sy
 800f5a2:	f3bf 8f4f 	dsb	sy
 800f5a6:	61fb      	str	r3, [r7, #28]
 800f5a8:	e7fe      	b.n	800f5a8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f5aa:	f002 f9a3 	bl	80118f4 <vPortValidateInterruptPriority>
	__asm volatile
 800f5ae:	f3ef 8211 	mrs	r2, BASEPRI
 800f5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b6:	f383 8811 	msr	BASEPRI, r3
 800f5ba:	f3bf 8f6f 	isb	sy
 800f5be:	f3bf 8f4f 	dsb	sy
 800f5c2:	61ba      	str	r2, [r7, #24]
 800f5c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f5c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d02f      	beq.n	800f636 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f5e0:	68b9      	ldr	r1, [r7, #8]
 800f5e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5e4:	f000 f8d7 	bl	800f796 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ea:	1e5a      	subs	r2, r3, #1
 800f5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f5f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f8:	d112      	bne.n	800f620 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fc:	691b      	ldr	r3, [r3, #16]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d016      	beq.n	800f630 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f604:	3310      	adds	r3, #16
 800f606:	4618      	mov	r0, r3
 800f608:	f000 fe7c 	bl	8010304 <xTaskRemoveFromEventList>
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d00e      	beq.n	800f630 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d00b      	beq.n	800f630 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2201      	movs	r2, #1
 800f61c:	601a      	str	r2, [r3, #0]
 800f61e:	e007      	b.n	800f630 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f624:	3301      	adds	r3, #1
 800f626:	b2db      	uxtb	r3, r3
 800f628:	b25a      	sxtb	r2, r3
 800f62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f630:	2301      	movs	r3, #1
 800f632:	637b      	str	r3, [r7, #52]	; 0x34
 800f634:	e001      	b.n	800f63a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f636:	2300      	movs	r3, #0
 800f638:	637b      	str	r3, [r7, #52]	; 0x34
 800f63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f63c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f646:	4618      	mov	r0, r3
 800f648:	3738      	adds	r7, #56	; 0x38
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}

0800f64e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f64e:	b580      	push	{r7, lr}
 800f650:	b084      	sub	sp, #16
 800f652:	af00      	add	r7, sp, #0
 800f654:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d109      	bne.n	800f674 <vQueueDelete+0x26>
	__asm volatile
 800f660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f664:	f383 8811 	msr	BASEPRI, r3
 800f668:	f3bf 8f6f 	isb	sy
 800f66c:	f3bf 8f4f 	dsb	sy
 800f670:	60bb      	str	r3, [r7, #8]
 800f672:	e7fe      	b.n	800f672 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f000 f95d 	bl	800f934 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f680:	2b00      	cmp	r3, #0
 800f682:	d102      	bne.n	800f68a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f002 fa35 	bl	8011af4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f68a:	bf00      	nop
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f692:	b480      	push	{r7}
 800f694:	b085      	sub	sp, #20
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d006      	beq.n	800f6b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f6ac:	60fb      	str	r3, [r7, #12]
 800f6ae:	e001      	b.n	800f6b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
	}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3714      	adds	r7, #20
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr

0800f6c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f6c2:	b580      	push	{r7, lr}
 800f6c4:	b086      	sub	sp, #24
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	60f8      	str	r0, [r7, #12]
 800f6ca:	60b9      	str	r1, [r7, #8]
 800f6cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d10d      	bne.n	800f6fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d14d      	bne.n	800f784 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	689b      	ldr	r3, [r3, #8]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f001 f87d 	bl	80107ec <xTaskPriorityDisinherit>
 800f6f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	609a      	str	r2, [r3, #8]
 800f6fa:	e043      	b.n	800f784 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d119      	bne.n	800f736 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	6858      	ldr	r0, [r3, #4]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f70a:	461a      	mov	r2, r3
 800f70c:	68b9      	ldr	r1, [r7, #8]
 800f70e:	f004 f891 	bl	8013834 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	685a      	ldr	r2, [r3, #4]
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f71a:	441a      	add	r2, r3
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	685a      	ldr	r2, [r3, #4]
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	689b      	ldr	r3, [r3, #8]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d32b      	bcc.n	800f784 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	605a      	str	r2, [r3, #4]
 800f734:	e026      	b.n	800f784 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	68d8      	ldr	r0, [r3, #12]
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f73e:	461a      	mov	r2, r3
 800f740:	68b9      	ldr	r1, [r7, #8]
 800f742:	f004 f877 	bl	8013834 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	68da      	ldr	r2, [r3, #12]
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f74e:	425b      	negs	r3, r3
 800f750:	441a      	add	r2, r3
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	68da      	ldr	r2, [r3, #12]
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	429a      	cmp	r2, r3
 800f760:	d207      	bcs.n	800f772 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	689a      	ldr	r2, [r3, #8]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f76a:	425b      	negs	r3, r3
 800f76c:	441a      	add	r2, r3
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2b02      	cmp	r3, #2
 800f776:	d105      	bne.n	800f784 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d002      	beq.n	800f784 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	3b01      	subs	r3, #1
 800f782:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	1c5a      	adds	r2, r3, #1
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f78c:	697b      	ldr	r3, [r7, #20]
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3718      	adds	r7, #24
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}

0800f796 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f796:	b580      	push	{r7, lr}
 800f798:	b082      	sub	sp, #8
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	6078      	str	r0, [r7, #4]
 800f79e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d018      	beq.n	800f7da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	68da      	ldr	r2, [r3, #12]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7b0:	441a      	add	r2, r3
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	68da      	ldr	r2, [r3, #12]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	689b      	ldr	r3, [r3, #8]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d303      	bcc.n	800f7ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	68d9      	ldr	r1, [r3, #12]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	6838      	ldr	r0, [r7, #0]
 800f7d6:	f004 f82d 	bl	8013834 <memcpy>
	}
}
 800f7da:	bf00      	nop
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}

0800f7e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f7e2:	b580      	push	{r7, lr}
 800f7e4:	b084      	sub	sp, #16
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f7ea:	f001 ffa7 	bl	801173c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f7f6:	e011      	b.n	800f81c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d012      	beq.n	800f826 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	3324      	adds	r3, #36	; 0x24
 800f804:	4618      	mov	r0, r3
 800f806:	f000 fd7d 	bl	8010304 <xTaskRemoveFromEventList>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d001      	beq.n	800f814 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f810:	f000 fe52 	bl	80104b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f814:	7bfb      	ldrb	r3, [r7, #15]
 800f816:	3b01      	subs	r3, #1
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f81c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f820:	2b00      	cmp	r3, #0
 800f822:	dce9      	bgt.n	800f7f8 <prvUnlockQueue+0x16>
 800f824:	e000      	b.n	800f828 <prvUnlockQueue+0x46>
					break;
 800f826:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	22ff      	movs	r2, #255	; 0xff
 800f82c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f830:	f001 ffb2 	bl	8011798 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f834:	f001 ff82 	bl	801173c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f83e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f840:	e011      	b.n	800f866 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	691b      	ldr	r3, [r3, #16]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d012      	beq.n	800f870 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	3310      	adds	r3, #16
 800f84e:	4618      	mov	r0, r3
 800f850:	f000 fd58 	bl	8010304 <xTaskRemoveFromEventList>
 800f854:	4603      	mov	r3, r0
 800f856:	2b00      	cmp	r3, #0
 800f858:	d001      	beq.n	800f85e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f85a:	f000 fe2d 	bl	80104b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f85e:	7bbb      	ldrb	r3, [r7, #14]
 800f860:	3b01      	subs	r3, #1
 800f862:	b2db      	uxtb	r3, r3
 800f864:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	dce9      	bgt.n	800f842 <prvUnlockQueue+0x60>
 800f86e:	e000      	b.n	800f872 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f870:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	22ff      	movs	r2, #255	; 0xff
 800f876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f87a:	f001 ff8d 	bl	8011798 <vPortExitCritical>
}
 800f87e:	bf00      	nop
 800f880:	3710      	adds	r7, #16
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}

0800f886 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f886:	b580      	push	{r7, lr}
 800f888:	b084      	sub	sp, #16
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f88e:	f001 ff55 	bl	801173c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f896:	2b00      	cmp	r3, #0
 800f898:	d102      	bne.n	800f8a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f89a:	2301      	movs	r3, #1
 800f89c:	60fb      	str	r3, [r7, #12]
 800f89e:	e001      	b.n	800f8a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f8a4:	f001 ff78 	bl	8011798 <vPortExitCritical>

	return xReturn;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3710      	adds	r7, #16
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}

0800f8b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f8b2:	b580      	push	{r7, lr}
 800f8b4:	b084      	sub	sp, #16
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f8ba:	f001 ff3f 	bl	801173c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d102      	bne.n	800f8d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	60fb      	str	r3, [r7, #12]
 800f8ce:	e001      	b.n	800f8d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f8d4:	f001 ff60 	bl	8011798 <vPortExitCritical>

	return xReturn;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3710      	adds	r7, #16
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
	...

0800f8e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b085      	sub	sp, #20
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	60fb      	str	r3, [r7, #12]
 800f8f2:	e014      	b.n	800f91e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f8f4:	4a0e      	ldr	r2, [pc, #56]	; (800f930 <vQueueAddToRegistry+0x4c>)
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d10b      	bne.n	800f918 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f900:	490b      	ldr	r1, [pc, #44]	; (800f930 <vQueueAddToRegistry+0x4c>)
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	683a      	ldr	r2, [r7, #0]
 800f906:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f90a:	4a09      	ldr	r2, [pc, #36]	; (800f930 <vQueueAddToRegistry+0x4c>)
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	00db      	lsls	r3, r3, #3
 800f910:	4413      	add	r3, r2
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f916:	e005      	b.n	800f924 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	3301      	adds	r3, #1
 800f91c:	60fb      	str	r3, [r7, #12]
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2b07      	cmp	r3, #7
 800f922:	d9e7      	bls.n	800f8f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f924:	bf00      	nop
 800f926:	3714      	adds	r7, #20
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr
 800f930:	20004fc4 	.word	0x20004fc4

0800f934 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f934:	b480      	push	{r7}
 800f936:	b085      	sub	sp, #20
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f93c:	2300      	movs	r3, #0
 800f93e:	60fb      	str	r3, [r7, #12]
 800f940:	e016      	b.n	800f970 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f942:	4a10      	ldr	r2, [pc, #64]	; (800f984 <vQueueUnregisterQueue+0x50>)
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	00db      	lsls	r3, r3, #3
 800f948:	4413      	add	r3, r2
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d10b      	bne.n	800f96a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f952:	4a0c      	ldr	r2, [pc, #48]	; (800f984 <vQueueUnregisterQueue+0x50>)
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2100      	movs	r1, #0
 800f958:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f95c:	4a09      	ldr	r2, [pc, #36]	; (800f984 <vQueueUnregisterQueue+0x50>)
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	00db      	lsls	r3, r3, #3
 800f962:	4413      	add	r3, r2
 800f964:	2200      	movs	r2, #0
 800f966:	605a      	str	r2, [r3, #4]
				break;
 800f968:	e005      	b.n	800f976 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	3301      	adds	r3, #1
 800f96e:	60fb      	str	r3, [r7, #12]
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2b07      	cmp	r3, #7
 800f974:	d9e5      	bls.n	800f942 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f976:	bf00      	nop
 800f978:	3714      	adds	r7, #20
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr
 800f982:	bf00      	nop
 800f984:	20004fc4 	.word	0x20004fc4

0800f988 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b086      	sub	sp, #24
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f998:	f001 fed0 	bl	801173c <vPortEnterCritical>
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9a2:	b25b      	sxtb	r3, r3
 800f9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a8:	d103      	bne.n	800f9b2 <vQueueWaitForMessageRestricted+0x2a>
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9b8:	b25b      	sxtb	r3, r3
 800f9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9be:	d103      	bne.n	800f9c8 <vQueueWaitForMessageRestricted+0x40>
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9c8:	f001 fee6 	bl	8011798 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d106      	bne.n	800f9e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	3324      	adds	r3, #36	; 0x24
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	68b9      	ldr	r1, [r7, #8]
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f000 fc67 	bl	80102b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f9e2:	6978      	ldr	r0, [r7, #20]
 800f9e4:	f7ff fefd 	bl	800f7e2 <prvUnlockQueue>
	}
 800f9e8:	bf00      	nop
 800f9ea:	3718      	adds	r7, #24
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b08e      	sub	sp, #56	; 0x38
 800f9f4:	af04      	add	r7, sp, #16
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	60b9      	str	r1, [r7, #8]
 800f9fa:	607a      	str	r2, [r7, #4]
 800f9fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f9fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d109      	bne.n	800fa18 <xTaskCreateStatic+0x28>
 800fa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa08:	f383 8811 	msr	BASEPRI, r3
 800fa0c:	f3bf 8f6f 	isb	sy
 800fa10:	f3bf 8f4f 	dsb	sy
 800fa14:	623b      	str	r3, [r7, #32]
 800fa16:	e7fe      	b.n	800fa16 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800fa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d109      	bne.n	800fa32 <xTaskCreateStatic+0x42>
 800fa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa22:	f383 8811 	msr	BASEPRI, r3
 800fa26:	f3bf 8f6f 	isb	sy
 800fa2a:	f3bf 8f4f 	dsb	sy
 800fa2e:	61fb      	str	r3, [r7, #28]
 800fa30:	e7fe      	b.n	800fa30 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fa32:	235c      	movs	r3, #92	; 0x5c
 800fa34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	2b5c      	cmp	r3, #92	; 0x5c
 800fa3a:	d009      	beq.n	800fa50 <xTaskCreateStatic+0x60>
 800fa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa40:	f383 8811 	msr	BASEPRI, r3
 800fa44:	f3bf 8f6f 	isb	sy
 800fa48:	f3bf 8f4f 	dsb	sy
 800fa4c:	61bb      	str	r3, [r7, #24]
 800fa4e:	e7fe      	b.n	800fa4e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fa50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d01e      	beq.n	800fa96 <xTaskCreateStatic+0xa6>
 800fa58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d01b      	beq.n	800fa96 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa60:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa66:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6a:	2202      	movs	r2, #2
 800fa6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fa70:	2300      	movs	r3, #0
 800fa72:	9303      	str	r3, [sp, #12]
 800fa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa76:	9302      	str	r3, [sp, #8]
 800fa78:	f107 0314 	add.w	r3, r7, #20
 800fa7c:	9301      	str	r3, [sp, #4]
 800fa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa80:	9300      	str	r3, [sp, #0]
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	687a      	ldr	r2, [r7, #4]
 800fa86:	68b9      	ldr	r1, [r7, #8]
 800fa88:	68f8      	ldr	r0, [r7, #12]
 800fa8a:	f000 f850 	bl	800fb2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fa8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa90:	f000 f8dc 	bl	800fc4c <prvAddNewTaskToReadyList>
 800fa94:	e001      	b.n	800fa9a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800fa96:	2300      	movs	r3, #0
 800fa98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fa9a:	697b      	ldr	r3, [r7, #20]
	}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3728      	adds	r7, #40	; 0x28
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b08c      	sub	sp, #48	; 0x30
 800faa8:	af04      	add	r7, sp, #16
 800faaa:	60f8      	str	r0, [r7, #12]
 800faac:	60b9      	str	r1, [r7, #8]
 800faae:	603b      	str	r3, [r7, #0]
 800fab0:	4613      	mov	r3, r2
 800fab2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fab4:	88fb      	ldrh	r3, [r7, #6]
 800fab6:	009b      	lsls	r3, r3, #2
 800fab8:	4618      	mov	r0, r3
 800faba:	f001 ff59 	bl	8011970 <pvPortMalloc>
 800fabe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d00e      	beq.n	800fae4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fac6:	205c      	movs	r0, #92	; 0x5c
 800fac8:	f001 ff52 	bl	8011970 <pvPortMalloc>
 800facc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d003      	beq.n	800fadc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	697a      	ldr	r2, [r7, #20]
 800fad8:	631a      	str	r2, [r3, #48]	; 0x30
 800fada:	e005      	b.n	800fae8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fadc:	6978      	ldr	r0, [r7, #20]
 800fade:	f002 f809 	bl	8011af4 <vPortFree>
 800fae2:	e001      	b.n	800fae8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fae4:	2300      	movs	r3, #0
 800fae6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fae8:	69fb      	ldr	r3, [r7, #28]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d017      	beq.n	800fb1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	2200      	movs	r2, #0
 800faf2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800faf6:	88fa      	ldrh	r2, [r7, #6]
 800faf8:	2300      	movs	r3, #0
 800fafa:	9303      	str	r3, [sp, #12]
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	9302      	str	r3, [sp, #8]
 800fb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb02:	9301      	str	r3, [sp, #4]
 800fb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb06:	9300      	str	r3, [sp, #0]
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	68b9      	ldr	r1, [r7, #8]
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f000 f80e 	bl	800fb2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb12:	69f8      	ldr	r0, [r7, #28]
 800fb14:	f000 f89a 	bl	800fc4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fb18:	2301      	movs	r3, #1
 800fb1a:	61bb      	str	r3, [r7, #24]
 800fb1c:	e002      	b.n	800fb24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800fb22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fb24:	69bb      	ldr	r3, [r7, #24]
	}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3720      	adds	r7, #32
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b088      	sub	sp, #32
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	60f8      	str	r0, [r7, #12]
 800fb36:	60b9      	str	r1, [r7, #8]
 800fb38:	607a      	str	r2, [r7, #4]
 800fb3a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	461a      	mov	r2, r3
 800fb46:	21a5      	movs	r1, #165	; 0xa5
 800fb48:	f003 fe7f 	bl	801384a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fb56:	3b01      	subs	r3, #1
 800fb58:	009b      	lsls	r3, r3, #2
 800fb5a:	4413      	add	r3, r2
 800fb5c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	f023 0307 	bic.w	r3, r3, #7
 800fb64:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	f003 0307 	and.w	r3, r3, #7
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d009      	beq.n	800fb84 <prvInitialiseNewTask+0x56>
 800fb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb74:	f383 8811 	msr	BASEPRI, r3
 800fb78:	f3bf 8f6f 	isb	sy
 800fb7c:	f3bf 8f4f 	dsb	sy
 800fb80:	617b      	str	r3, [r7, #20]
 800fb82:	e7fe      	b.n	800fb82 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d01f      	beq.n	800fbca <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	61fb      	str	r3, [r7, #28]
 800fb8e:	e012      	b.n	800fbb6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fb90:	68ba      	ldr	r2, [r7, #8]
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	4413      	add	r3, r2
 800fb96:	7819      	ldrb	r1, [r3, #0]
 800fb98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	3334      	adds	r3, #52	; 0x34
 800fba0:	460a      	mov	r2, r1
 800fba2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fba4:	68ba      	ldr	r2, [r7, #8]
 800fba6:	69fb      	ldr	r3, [r7, #28]
 800fba8:	4413      	add	r3, r2
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d006      	beq.n	800fbbe <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fbb0:	69fb      	ldr	r3, [r7, #28]
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	61fb      	str	r3, [r7, #28]
 800fbb6:	69fb      	ldr	r3, [r7, #28]
 800fbb8:	2b0f      	cmp	r3, #15
 800fbba:	d9e9      	bls.n	800fb90 <prvInitialiseNewTask+0x62>
 800fbbc:	e000      	b.n	800fbc0 <prvInitialiseNewTask+0x92>
			{
				break;
 800fbbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fbc8:	e003      	b.n	800fbd2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd4:	2b37      	cmp	r3, #55	; 0x37
 800fbd6:	d901      	bls.n	800fbdc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fbd8:	2337      	movs	r3, #55	; 0x37
 800fbda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbe0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbe6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbea:	2200      	movs	r2, #0
 800fbec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf0:	3304      	adds	r3, #4
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fe fdc6 	bl	800e784 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfa:	3318      	adds	r3, #24
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7fe fdc1 	bl	800e784 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc20:	2200      	movs	r2, #0
 800fc22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fc26:	683a      	ldr	r2, [r7, #0]
 800fc28:	68f9      	ldr	r1, [r7, #12]
 800fc2a:	69b8      	ldr	r0, [r7, #24]
 800fc2c:	f001 fc60 	bl	80114f0 <pxPortInitialiseStack>
 800fc30:	4602      	mov	r2, r0
 800fc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d002      	beq.n	800fc42 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc42:	bf00      	nop
 800fc44:	3720      	adds	r7, #32
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
	...

0800fc4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fc54:	f001 fd72 	bl	801173c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fc58:	4b2d      	ldr	r3, [pc, #180]	; (800fd10 <prvAddNewTaskToReadyList+0xc4>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	4a2c      	ldr	r2, [pc, #176]	; (800fd10 <prvAddNewTaskToReadyList+0xc4>)
 800fc60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fc62:	4b2c      	ldr	r3, [pc, #176]	; (800fd14 <prvAddNewTaskToReadyList+0xc8>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d109      	bne.n	800fc7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fc6a:	4a2a      	ldr	r2, [pc, #168]	; (800fd14 <prvAddNewTaskToReadyList+0xc8>)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fc70:	4b27      	ldr	r3, [pc, #156]	; (800fd10 <prvAddNewTaskToReadyList+0xc4>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d110      	bne.n	800fc9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fc78:	f000 fc68 	bl	801054c <prvInitialiseTaskLists>
 800fc7c:	e00d      	b.n	800fc9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fc7e:	4b26      	ldr	r3, [pc, #152]	; (800fd18 <prvAddNewTaskToReadyList+0xcc>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d109      	bne.n	800fc9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fc86:	4b23      	ldr	r3, [pc, #140]	; (800fd14 <prvAddNewTaskToReadyList+0xc8>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d802      	bhi.n	800fc9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fc94:	4a1f      	ldr	r2, [pc, #124]	; (800fd14 <prvAddNewTaskToReadyList+0xc8>)
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fc9a:	4b20      	ldr	r3, [pc, #128]	; (800fd1c <prvAddNewTaskToReadyList+0xd0>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	4a1e      	ldr	r2, [pc, #120]	; (800fd1c <prvAddNewTaskToReadyList+0xd0>)
 800fca2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fca4:	4b1d      	ldr	r3, [pc, #116]	; (800fd1c <prvAddNewTaskToReadyList+0xd0>)
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcb0:	4b1b      	ldr	r3, [pc, #108]	; (800fd20 <prvAddNewTaskToReadyList+0xd4>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d903      	bls.n	800fcc0 <prvAddNewTaskToReadyList+0x74>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcbc:	4a18      	ldr	r2, [pc, #96]	; (800fd20 <prvAddNewTaskToReadyList+0xd4>)
 800fcbe:	6013      	str	r3, [r2, #0]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcc4:	4613      	mov	r3, r2
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	4413      	add	r3, r2
 800fcca:	009b      	lsls	r3, r3, #2
 800fccc:	4a15      	ldr	r2, [pc, #84]	; (800fd24 <prvAddNewTaskToReadyList+0xd8>)
 800fcce:	441a      	add	r2, r3
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	3304      	adds	r3, #4
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	4610      	mov	r0, r2
 800fcd8:	f7fe fd61 	bl	800e79e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fcdc:	f001 fd5c 	bl	8011798 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fce0:	4b0d      	ldr	r3, [pc, #52]	; (800fd18 <prvAddNewTaskToReadyList+0xcc>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00e      	beq.n	800fd06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fce8:	4b0a      	ldr	r3, [pc, #40]	; (800fd14 <prvAddNewTaskToReadyList+0xc8>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d207      	bcs.n	800fd06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fcf6:	4b0c      	ldr	r3, [pc, #48]	; (800fd28 <prvAddNewTaskToReadyList+0xdc>)
 800fcf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcfc:	601a      	str	r2, [r3, #0]
 800fcfe:	f3bf 8f4f 	dsb	sy
 800fd02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd06:	bf00      	nop
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	20002130 	.word	0x20002130
 800fd14:	20001c5c 	.word	0x20001c5c
 800fd18:	2000213c 	.word	0x2000213c
 800fd1c:	2000214c 	.word	0x2000214c
 800fd20:	20002138 	.word	0x20002138
 800fd24:	20001c60 	.word	0x20001c60
 800fd28:	e000ed04 	.word	0xe000ed04

0800fd2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b084      	sub	sp, #16
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fd34:	2300      	movs	r3, #0
 800fd36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d016      	beq.n	800fd6c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fd3e:	4b13      	ldr	r3, [pc, #76]	; (800fd8c <vTaskDelay+0x60>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d009      	beq.n	800fd5a <vTaskDelay+0x2e>
 800fd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd4a:	f383 8811 	msr	BASEPRI, r3
 800fd4e:	f3bf 8f6f 	isb	sy
 800fd52:	f3bf 8f4f 	dsb	sy
 800fd56:	60bb      	str	r3, [r7, #8]
 800fd58:	e7fe      	b.n	800fd58 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800fd5a:	f000 f87f 	bl	800fe5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fd5e:	2100      	movs	r1, #0
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f001 f82b 	bl	8010dbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fd66:	f000 f8bf 	bl	800fee8 <xTaskResumeAll>
 800fd6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d107      	bne.n	800fd82 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800fd72:	4b07      	ldr	r3, [pc, #28]	; (800fd90 <vTaskDelay+0x64>)
 800fd74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd78:	601a      	str	r2, [r3, #0]
 800fd7a:	f3bf 8f4f 	dsb	sy
 800fd7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd82:	bf00      	nop
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	20002158 	.word	0x20002158
 800fd90:	e000ed04 	.word	0xe000ed04

0800fd94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b08a      	sub	sp, #40	; 0x28
 800fd98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fda2:	463a      	mov	r2, r7
 800fda4:	1d39      	adds	r1, r7, #4
 800fda6:	f107 0308 	add.w	r3, r7, #8
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7fe fc96 	bl	800e6dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fdb0:	6839      	ldr	r1, [r7, #0]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	68ba      	ldr	r2, [r7, #8]
 800fdb6:	9202      	str	r2, [sp, #8]
 800fdb8:	9301      	str	r3, [sp, #4]
 800fdba:	2300      	movs	r3, #0
 800fdbc:	9300      	str	r3, [sp, #0]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	460a      	mov	r2, r1
 800fdc2:	4920      	ldr	r1, [pc, #128]	; (800fe44 <vTaskStartScheduler+0xb0>)
 800fdc4:	4820      	ldr	r0, [pc, #128]	; (800fe48 <vTaskStartScheduler+0xb4>)
 800fdc6:	f7ff fe13 	bl	800f9f0 <xTaskCreateStatic>
 800fdca:	4602      	mov	r2, r0
 800fdcc:	4b1f      	ldr	r3, [pc, #124]	; (800fe4c <vTaskStartScheduler+0xb8>)
 800fdce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fdd0:	4b1e      	ldr	r3, [pc, #120]	; (800fe4c <vTaskStartScheduler+0xb8>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d002      	beq.n	800fdde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fdd8:	2301      	movs	r3, #1
 800fdda:	617b      	str	r3, [r7, #20]
 800fddc:	e001      	b.n	800fde2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fdde:	2300      	movs	r3, #0
 800fde0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d102      	bne.n	800fdee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fde8:	f001 f83c 	bl	8010e64 <xTimerCreateTimerTask>
 800fdec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d115      	bne.n	800fe20 <vTaskStartScheduler+0x8c>
 800fdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf8:	f383 8811 	msr	BASEPRI, r3
 800fdfc:	f3bf 8f6f 	isb	sy
 800fe00:	f3bf 8f4f 	dsb	sy
 800fe04:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fe06:	4b12      	ldr	r3, [pc, #72]	; (800fe50 <vTaskStartScheduler+0xbc>)
 800fe08:	f04f 32ff 	mov.w	r2, #4294967295
 800fe0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fe0e:	4b11      	ldr	r3, [pc, #68]	; (800fe54 <vTaskStartScheduler+0xc0>)
 800fe10:	2201      	movs	r2, #1
 800fe12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fe14:	4b10      	ldr	r3, [pc, #64]	; (800fe58 <vTaskStartScheduler+0xc4>)
 800fe16:	2200      	movs	r2, #0
 800fe18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fe1a:	f001 fbf1 	bl	8011600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fe1e:	e00d      	b.n	800fe3c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe26:	d109      	bne.n	800fe3c <vTaskStartScheduler+0xa8>
 800fe28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2c:	f383 8811 	msr	BASEPRI, r3
 800fe30:	f3bf 8f6f 	isb	sy
 800fe34:	f3bf 8f4f 	dsb	sy
 800fe38:	60fb      	str	r3, [r7, #12]
 800fe3a:	e7fe      	b.n	800fe3a <vTaskStartScheduler+0xa6>
}
 800fe3c:	bf00      	nop
 800fe3e:	3718      	adds	r7, #24
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}
 800fe44:	0801393c 	.word	0x0801393c
 800fe48:	080104d1 	.word	0x080104d1
 800fe4c:	20002154 	.word	0x20002154
 800fe50:	20002150 	.word	0x20002150
 800fe54:	2000213c 	.word	0x2000213c
 800fe58:	20002134 	.word	0x20002134

0800fe5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fe60:	4b04      	ldr	r3, [pc, #16]	; (800fe74 <vTaskSuspendAll+0x18>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	3301      	adds	r3, #1
 800fe66:	4a03      	ldr	r2, [pc, #12]	; (800fe74 <vTaskSuspendAll+0x18>)
 800fe68:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fe6a:	bf00      	nop
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr
 800fe74:	20002158 	.word	0x20002158

0800fe78 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800fe82:	4b14      	ldr	r3, [pc, #80]	; (800fed4 <prvGetExpectedIdleTime+0x5c>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d001      	beq.n	800fe8e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800fe8e:	4b12      	ldr	r3, [pc, #72]	; (800fed8 <prvGetExpectedIdleTime+0x60>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d002      	beq.n	800fe9e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	607b      	str	r3, [r7, #4]
 800fe9c:	e012      	b.n	800fec4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800fe9e:	4b0f      	ldr	r3, [pc, #60]	; (800fedc <prvGetExpectedIdleTime+0x64>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	d902      	bls.n	800feac <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800fea6:	2300      	movs	r3, #0
 800fea8:	607b      	str	r3, [r7, #4]
 800feaa:	e00b      	b.n	800fec4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d002      	beq.n	800feb8 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800feb2:	2300      	movs	r3, #0
 800feb4:	607b      	str	r3, [r7, #4]
 800feb6:	e005      	b.n	800fec4 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800feb8:	4b09      	ldr	r3, [pc, #36]	; (800fee0 <prvGetExpectedIdleTime+0x68>)
 800feba:	681a      	ldr	r2, [r3, #0]
 800febc:	4b09      	ldr	r3, [pc, #36]	; (800fee4 <prvGetExpectedIdleTime+0x6c>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	1ad3      	subs	r3, r2, r3
 800fec2:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800fec4:	687b      	ldr	r3, [r7, #4]
	}
 800fec6:	4618      	mov	r0, r3
 800fec8:	370c      	adds	r7, #12
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr
 800fed2:	bf00      	nop
 800fed4:	20002138 	.word	0x20002138
 800fed8:	20001c5c 	.word	0x20001c5c
 800fedc:	20001c60 	.word	0x20001c60
 800fee0:	20002150 	.word	0x20002150
 800fee4:	20002134 	.word	0x20002134

0800fee8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800feee:	2300      	movs	r3, #0
 800fef0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fef2:	2300      	movs	r3, #0
 800fef4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fef6:	4b41      	ldr	r3, [pc, #260]	; (800fffc <xTaskResumeAll+0x114>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d109      	bne.n	800ff12 <xTaskResumeAll+0x2a>
 800fefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff02:	f383 8811 	msr	BASEPRI, r3
 800ff06:	f3bf 8f6f 	isb	sy
 800ff0a:	f3bf 8f4f 	dsb	sy
 800ff0e:	603b      	str	r3, [r7, #0]
 800ff10:	e7fe      	b.n	800ff10 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ff12:	f001 fc13 	bl	801173c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ff16:	4b39      	ldr	r3, [pc, #228]	; (800fffc <xTaskResumeAll+0x114>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	3b01      	subs	r3, #1
 800ff1c:	4a37      	ldr	r2, [pc, #220]	; (800fffc <xTaskResumeAll+0x114>)
 800ff1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff20:	4b36      	ldr	r3, [pc, #216]	; (800fffc <xTaskResumeAll+0x114>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d162      	bne.n	800ffee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ff28:	4b35      	ldr	r3, [pc, #212]	; (8010000 <xTaskResumeAll+0x118>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d05e      	beq.n	800ffee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff30:	e02f      	b.n	800ff92 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff32:	4b34      	ldr	r3, [pc, #208]	; (8010004 <xTaskResumeAll+0x11c>)
 800ff34:	68db      	ldr	r3, [r3, #12]
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	3318      	adds	r3, #24
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7fe fc8a 	bl	800e858 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	3304      	adds	r3, #4
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7fe fc85 	bl	800e858 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff52:	4b2d      	ldr	r3, [pc, #180]	; (8010008 <xTaskResumeAll+0x120>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d903      	bls.n	800ff62 <xTaskResumeAll+0x7a>
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff5e:	4a2a      	ldr	r2, [pc, #168]	; (8010008 <xTaskResumeAll+0x120>)
 800ff60:	6013      	str	r3, [r2, #0]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff66:	4613      	mov	r3, r2
 800ff68:	009b      	lsls	r3, r3, #2
 800ff6a:	4413      	add	r3, r2
 800ff6c:	009b      	lsls	r3, r3, #2
 800ff6e:	4a27      	ldr	r2, [pc, #156]	; (801000c <xTaskResumeAll+0x124>)
 800ff70:	441a      	add	r2, r3
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	3304      	adds	r3, #4
 800ff76:	4619      	mov	r1, r3
 800ff78:	4610      	mov	r0, r2
 800ff7a:	f7fe fc10 	bl	800e79e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff82:	4b23      	ldr	r3, [pc, #140]	; (8010010 <xTaskResumeAll+0x128>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d302      	bcc.n	800ff92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ff8c:	4b21      	ldr	r3, [pc, #132]	; (8010014 <xTaskResumeAll+0x12c>)
 800ff8e:	2201      	movs	r2, #1
 800ff90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff92:	4b1c      	ldr	r3, [pc, #112]	; (8010004 <xTaskResumeAll+0x11c>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d1cb      	bne.n	800ff32 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d001      	beq.n	800ffa4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ffa0:	f000 fb6e 	bl	8010680 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ffa4:	4b1c      	ldr	r3, [pc, #112]	; (8010018 <xTaskResumeAll+0x130>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d010      	beq.n	800ffd2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ffb0:	f000 f846 	bl	8010040 <xTaskIncrementTick>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d002      	beq.n	800ffc0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ffba:	4b16      	ldr	r3, [pc, #88]	; (8010014 <xTaskResumeAll+0x12c>)
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	3b01      	subs	r3, #1
 800ffc4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d1f1      	bne.n	800ffb0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800ffcc:	4b12      	ldr	r3, [pc, #72]	; (8010018 <xTaskResumeAll+0x130>)
 800ffce:	2200      	movs	r2, #0
 800ffd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ffd2:	4b10      	ldr	r3, [pc, #64]	; (8010014 <xTaskResumeAll+0x12c>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d009      	beq.n	800ffee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ffde:	4b0f      	ldr	r3, [pc, #60]	; (801001c <xTaskResumeAll+0x134>)
 800ffe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffe4:	601a      	str	r2, [r3, #0]
 800ffe6:	f3bf 8f4f 	dsb	sy
 800ffea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ffee:	f001 fbd3 	bl	8011798 <vPortExitCritical>

	return xAlreadyYielded;
 800fff2:	68bb      	ldr	r3, [r7, #8]
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3710      	adds	r7, #16
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	20002158 	.word	0x20002158
 8010000:	20002130 	.word	0x20002130
 8010004:	200020f0 	.word	0x200020f0
 8010008:	20002138 	.word	0x20002138
 801000c:	20001c60 	.word	0x20001c60
 8010010:	20001c5c 	.word	0x20001c5c
 8010014:	20002144 	.word	0x20002144
 8010018:	20002140 	.word	0x20002140
 801001c:	e000ed04 	.word	0xe000ed04

08010020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010020:	b480      	push	{r7}
 8010022:	b083      	sub	sp, #12
 8010024:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010026:	4b05      	ldr	r3, [pc, #20]	; (801003c <xTaskGetTickCount+0x1c>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801002c:	687b      	ldr	r3, [r7, #4]
}
 801002e:	4618      	mov	r0, r3
 8010030:	370c      	adds	r7, #12
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr
 801003a:	bf00      	nop
 801003c:	20002134 	.word	0x20002134

08010040 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b086      	sub	sp, #24
 8010044:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010046:	2300      	movs	r3, #0
 8010048:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801004a:	4b4e      	ldr	r3, [pc, #312]	; (8010184 <xTaskIncrementTick+0x144>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	f040 8088 	bne.w	8010164 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010054:	4b4c      	ldr	r3, [pc, #304]	; (8010188 <xTaskIncrementTick+0x148>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	3301      	adds	r3, #1
 801005a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801005c:	4a4a      	ldr	r2, [pc, #296]	; (8010188 <xTaskIncrementTick+0x148>)
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d11f      	bne.n	80100a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010068:	4b48      	ldr	r3, [pc, #288]	; (801018c <xTaskIncrementTick+0x14c>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d009      	beq.n	8010086 <xTaskIncrementTick+0x46>
 8010072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010076:	f383 8811 	msr	BASEPRI, r3
 801007a:	f3bf 8f6f 	isb	sy
 801007e:	f3bf 8f4f 	dsb	sy
 8010082:	603b      	str	r3, [r7, #0]
 8010084:	e7fe      	b.n	8010084 <xTaskIncrementTick+0x44>
 8010086:	4b41      	ldr	r3, [pc, #260]	; (801018c <xTaskIncrementTick+0x14c>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	60fb      	str	r3, [r7, #12]
 801008c:	4b40      	ldr	r3, [pc, #256]	; (8010190 <xTaskIncrementTick+0x150>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a3e      	ldr	r2, [pc, #248]	; (801018c <xTaskIncrementTick+0x14c>)
 8010092:	6013      	str	r3, [r2, #0]
 8010094:	4a3e      	ldr	r2, [pc, #248]	; (8010190 <xTaskIncrementTick+0x150>)
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	6013      	str	r3, [r2, #0]
 801009a:	4b3e      	ldr	r3, [pc, #248]	; (8010194 <xTaskIncrementTick+0x154>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	3301      	adds	r3, #1
 80100a0:	4a3c      	ldr	r2, [pc, #240]	; (8010194 <xTaskIncrementTick+0x154>)
 80100a2:	6013      	str	r3, [r2, #0]
 80100a4:	f000 faec 	bl	8010680 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80100a8:	4b3b      	ldr	r3, [pc, #236]	; (8010198 <xTaskIncrementTick+0x158>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	693a      	ldr	r2, [r7, #16]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d349      	bcc.n	8010146 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100b2:	4b36      	ldr	r3, [pc, #216]	; (801018c <xTaskIncrementTick+0x14c>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d104      	bne.n	80100c6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100bc:	4b36      	ldr	r3, [pc, #216]	; (8010198 <xTaskIncrementTick+0x158>)
 80100be:	f04f 32ff 	mov.w	r2, #4294967295
 80100c2:	601a      	str	r2, [r3, #0]
					break;
 80100c4:	e03f      	b.n	8010146 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100c6:	4b31      	ldr	r3, [pc, #196]	; (801018c <xTaskIncrementTick+0x14c>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80100d6:	693a      	ldr	r2, [r7, #16]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d203      	bcs.n	80100e6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80100de:	4a2e      	ldr	r2, [pc, #184]	; (8010198 <xTaskIncrementTick+0x158>)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80100e4:	e02f      	b.n	8010146 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	3304      	adds	r3, #4
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fe fbb4 	bl	800e858 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d004      	beq.n	8010102 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	3318      	adds	r3, #24
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fe fbab 	bl	800e858 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010106:	4b25      	ldr	r3, [pc, #148]	; (801019c <xTaskIncrementTick+0x15c>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	429a      	cmp	r2, r3
 801010c:	d903      	bls.n	8010116 <xTaskIncrementTick+0xd6>
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010112:	4a22      	ldr	r2, [pc, #136]	; (801019c <xTaskIncrementTick+0x15c>)
 8010114:	6013      	str	r3, [r2, #0]
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801011a:	4613      	mov	r3, r2
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	4413      	add	r3, r2
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	4a1f      	ldr	r2, [pc, #124]	; (80101a0 <xTaskIncrementTick+0x160>)
 8010124:	441a      	add	r2, r3
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	3304      	adds	r3, #4
 801012a:	4619      	mov	r1, r3
 801012c:	4610      	mov	r0, r2
 801012e:	f7fe fb36 	bl	800e79e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010136:	4b1b      	ldr	r3, [pc, #108]	; (80101a4 <xTaskIncrementTick+0x164>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801013c:	429a      	cmp	r2, r3
 801013e:	d3b8      	bcc.n	80100b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010140:	2301      	movs	r3, #1
 8010142:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010144:	e7b5      	b.n	80100b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010146:	4b17      	ldr	r3, [pc, #92]	; (80101a4 <xTaskIncrementTick+0x164>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801014c:	4914      	ldr	r1, [pc, #80]	; (80101a0 <xTaskIncrementTick+0x160>)
 801014e:	4613      	mov	r3, r2
 8010150:	009b      	lsls	r3, r3, #2
 8010152:	4413      	add	r3, r2
 8010154:	009b      	lsls	r3, r3, #2
 8010156:	440b      	add	r3, r1
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	2b01      	cmp	r3, #1
 801015c:	d907      	bls.n	801016e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801015e:	2301      	movs	r3, #1
 8010160:	617b      	str	r3, [r7, #20]
 8010162:	e004      	b.n	801016e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010164:	4b10      	ldr	r3, [pc, #64]	; (80101a8 <xTaskIncrementTick+0x168>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	3301      	adds	r3, #1
 801016a:	4a0f      	ldr	r2, [pc, #60]	; (80101a8 <xTaskIncrementTick+0x168>)
 801016c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801016e:	4b0f      	ldr	r3, [pc, #60]	; (80101ac <xTaskIncrementTick+0x16c>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d001      	beq.n	801017a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8010176:	2301      	movs	r3, #1
 8010178:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801017a:	697b      	ldr	r3, [r7, #20]
}
 801017c:	4618      	mov	r0, r3
 801017e:	3718      	adds	r7, #24
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}
 8010184:	20002158 	.word	0x20002158
 8010188:	20002134 	.word	0x20002134
 801018c:	200020e8 	.word	0x200020e8
 8010190:	200020ec 	.word	0x200020ec
 8010194:	20002148 	.word	0x20002148
 8010198:	20002150 	.word	0x20002150
 801019c:	20002138 	.word	0x20002138
 80101a0:	20001c60 	.word	0x20001c60
 80101a4:	20001c5c 	.word	0x20001c5c
 80101a8:	20002140 	.word	0x20002140
 80101ac:	20002144 	.word	0x20002144

080101b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80101b0:	b480      	push	{r7}
 80101b2:	b085      	sub	sp, #20
 80101b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80101b6:	4b27      	ldr	r3, [pc, #156]	; (8010254 <vTaskSwitchContext+0xa4>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d003      	beq.n	80101c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80101be:	4b26      	ldr	r3, [pc, #152]	; (8010258 <vTaskSwitchContext+0xa8>)
 80101c0:	2201      	movs	r2, #1
 80101c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80101c4:	e040      	b.n	8010248 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80101c6:	4b24      	ldr	r3, [pc, #144]	; (8010258 <vTaskSwitchContext+0xa8>)
 80101c8:	2200      	movs	r2, #0
 80101ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101cc:	4b23      	ldr	r3, [pc, #140]	; (801025c <vTaskSwitchContext+0xac>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	60fb      	str	r3, [r7, #12]
 80101d2:	e00f      	b.n	80101f4 <vTaskSwitchContext+0x44>
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d109      	bne.n	80101ee <vTaskSwitchContext+0x3e>
 80101da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101de:	f383 8811 	msr	BASEPRI, r3
 80101e2:	f3bf 8f6f 	isb	sy
 80101e6:	f3bf 8f4f 	dsb	sy
 80101ea:	607b      	str	r3, [r7, #4]
 80101ec:	e7fe      	b.n	80101ec <vTaskSwitchContext+0x3c>
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	3b01      	subs	r3, #1
 80101f2:	60fb      	str	r3, [r7, #12]
 80101f4:	491a      	ldr	r1, [pc, #104]	; (8010260 <vTaskSwitchContext+0xb0>)
 80101f6:	68fa      	ldr	r2, [r7, #12]
 80101f8:	4613      	mov	r3, r2
 80101fa:	009b      	lsls	r3, r3, #2
 80101fc:	4413      	add	r3, r2
 80101fe:	009b      	lsls	r3, r3, #2
 8010200:	440b      	add	r3, r1
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d0e5      	beq.n	80101d4 <vTaskSwitchContext+0x24>
 8010208:	68fa      	ldr	r2, [r7, #12]
 801020a:	4613      	mov	r3, r2
 801020c:	009b      	lsls	r3, r3, #2
 801020e:	4413      	add	r3, r2
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	4a13      	ldr	r2, [pc, #76]	; (8010260 <vTaskSwitchContext+0xb0>)
 8010214:	4413      	add	r3, r2
 8010216:	60bb      	str	r3, [r7, #8]
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	685a      	ldr	r2, [r3, #4]
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	605a      	str	r2, [r3, #4]
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	685a      	ldr	r2, [r3, #4]
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	3308      	adds	r3, #8
 801022a:	429a      	cmp	r2, r3
 801022c:	d104      	bne.n	8010238 <vTaskSwitchContext+0x88>
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	685a      	ldr	r2, [r3, #4]
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	605a      	str	r2, [r3, #4]
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	4a09      	ldr	r2, [pc, #36]	; (8010264 <vTaskSwitchContext+0xb4>)
 8010240:	6013      	str	r3, [r2, #0]
 8010242:	4a06      	ldr	r2, [pc, #24]	; (801025c <vTaskSwitchContext+0xac>)
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	6013      	str	r3, [r2, #0]
}
 8010248:	bf00      	nop
 801024a:	3714      	adds	r7, #20
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr
 8010254:	20002158 	.word	0x20002158
 8010258:	20002144 	.word	0x20002144
 801025c:	20002138 	.word	0x20002138
 8010260:	20001c60 	.word	0x20001c60
 8010264:	20001c5c 	.word	0x20001c5c

08010268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b084      	sub	sp, #16
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d109      	bne.n	801028c <vTaskPlaceOnEventList+0x24>
 8010278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027c:	f383 8811 	msr	BASEPRI, r3
 8010280:	f3bf 8f6f 	isb	sy
 8010284:	f3bf 8f4f 	dsb	sy
 8010288:	60fb      	str	r3, [r7, #12]
 801028a:	e7fe      	b.n	801028a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801028c:	4b07      	ldr	r3, [pc, #28]	; (80102ac <vTaskPlaceOnEventList+0x44>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	3318      	adds	r3, #24
 8010292:	4619      	mov	r1, r3
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f7fe faa6 	bl	800e7e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801029a:	2101      	movs	r1, #1
 801029c:	6838      	ldr	r0, [r7, #0]
 801029e:	f000 fd8d 	bl	8010dbc <prvAddCurrentTaskToDelayedList>
}
 80102a2:	bf00      	nop
 80102a4:	3710      	adds	r7, #16
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	20001c5c 	.word	0x20001c5c

080102b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b086      	sub	sp, #24
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d109      	bne.n	80102d6 <vTaskPlaceOnEventListRestricted+0x26>
 80102c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c6:	f383 8811 	msr	BASEPRI, r3
 80102ca:	f3bf 8f6f 	isb	sy
 80102ce:	f3bf 8f4f 	dsb	sy
 80102d2:	617b      	str	r3, [r7, #20]
 80102d4:	e7fe      	b.n	80102d4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80102d6:	4b0a      	ldr	r3, [pc, #40]	; (8010300 <vTaskPlaceOnEventListRestricted+0x50>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	3318      	adds	r3, #24
 80102dc:	4619      	mov	r1, r3
 80102de:	68f8      	ldr	r0, [r7, #12]
 80102e0:	f7fe fa5d 	bl	800e79e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d002      	beq.n	80102f0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80102ea:	f04f 33ff 	mov.w	r3, #4294967295
 80102ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80102f0:	6879      	ldr	r1, [r7, #4]
 80102f2:	68b8      	ldr	r0, [r7, #8]
 80102f4:	f000 fd62 	bl	8010dbc <prvAddCurrentTaskToDelayedList>
	}
 80102f8:	bf00      	nop
 80102fa:	3718      	adds	r7, #24
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	20001c5c 	.word	0x20001c5c

08010304 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b086      	sub	sp, #24
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d109      	bne.n	801032e <xTaskRemoveFromEventList+0x2a>
 801031a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801031e:	f383 8811 	msr	BASEPRI, r3
 8010322:	f3bf 8f6f 	isb	sy
 8010326:	f3bf 8f4f 	dsb	sy
 801032a:	60fb      	str	r3, [r7, #12]
 801032c:	e7fe      	b.n	801032c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	3318      	adds	r3, #24
 8010332:	4618      	mov	r0, r3
 8010334:	f7fe fa90 	bl	800e858 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010338:	4b1e      	ldr	r3, [pc, #120]	; (80103b4 <xTaskRemoveFromEventList+0xb0>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d11f      	bne.n	8010380 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	3304      	adds	r3, #4
 8010344:	4618      	mov	r0, r3
 8010346:	f7fe fa87 	bl	800e858 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801034e:	4b1a      	ldr	r3, [pc, #104]	; (80103b8 <xTaskRemoveFromEventList+0xb4>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	429a      	cmp	r2, r3
 8010354:	d903      	bls.n	801035e <xTaskRemoveFromEventList+0x5a>
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801035a:	4a17      	ldr	r2, [pc, #92]	; (80103b8 <xTaskRemoveFromEventList+0xb4>)
 801035c:	6013      	str	r3, [r2, #0]
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010362:	4613      	mov	r3, r2
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	4413      	add	r3, r2
 8010368:	009b      	lsls	r3, r3, #2
 801036a:	4a14      	ldr	r2, [pc, #80]	; (80103bc <xTaskRemoveFromEventList+0xb8>)
 801036c:	441a      	add	r2, r3
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	3304      	adds	r3, #4
 8010372:	4619      	mov	r1, r3
 8010374:	4610      	mov	r0, r2
 8010376:	f7fe fa12 	bl	800e79e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 801037a:	f000 f981 	bl	8010680 <prvResetNextTaskUnblockTime>
 801037e:	e005      	b.n	801038c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	3318      	adds	r3, #24
 8010384:	4619      	mov	r1, r3
 8010386:	480e      	ldr	r0, [pc, #56]	; (80103c0 <xTaskRemoveFromEventList+0xbc>)
 8010388:	f7fe fa09 	bl	800e79e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010390:	4b0c      	ldr	r3, [pc, #48]	; (80103c4 <xTaskRemoveFromEventList+0xc0>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010396:	429a      	cmp	r2, r3
 8010398:	d905      	bls.n	80103a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801039a:	2301      	movs	r3, #1
 801039c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801039e:	4b0a      	ldr	r3, [pc, #40]	; (80103c8 <xTaskRemoveFromEventList+0xc4>)
 80103a0:	2201      	movs	r2, #1
 80103a2:	601a      	str	r2, [r3, #0]
 80103a4:	e001      	b.n	80103aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80103a6:	2300      	movs	r3, #0
 80103a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80103aa:	697b      	ldr	r3, [r7, #20]
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3718      	adds	r7, #24
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}
 80103b4:	20002158 	.word	0x20002158
 80103b8:	20002138 	.word	0x20002138
 80103bc:	20001c60 	.word	0x20001c60
 80103c0:	200020f0 	.word	0x200020f0
 80103c4:	20001c5c 	.word	0x20001c5c
 80103c8:	20002144 	.word	0x20002144

080103cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80103d4:	4b06      	ldr	r3, [pc, #24]	; (80103f0 <vTaskInternalSetTimeOutState+0x24>)
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80103dc:	4b05      	ldr	r3, [pc, #20]	; (80103f4 <vTaskInternalSetTimeOutState+0x28>)
 80103de:	681a      	ldr	r2, [r3, #0]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	605a      	str	r2, [r3, #4]
}
 80103e4:	bf00      	nop
 80103e6:	370c      	adds	r7, #12
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr
 80103f0:	20002148 	.word	0x20002148
 80103f4:	20002134 	.word	0x20002134

080103f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b088      	sub	sp, #32
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d109      	bne.n	801041c <xTaskCheckForTimeOut+0x24>
 8010408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040c:	f383 8811 	msr	BASEPRI, r3
 8010410:	f3bf 8f6f 	isb	sy
 8010414:	f3bf 8f4f 	dsb	sy
 8010418:	613b      	str	r3, [r7, #16]
 801041a:	e7fe      	b.n	801041a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d109      	bne.n	8010436 <xTaskCheckForTimeOut+0x3e>
 8010422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010426:	f383 8811 	msr	BASEPRI, r3
 801042a:	f3bf 8f6f 	isb	sy
 801042e:	f3bf 8f4f 	dsb	sy
 8010432:	60fb      	str	r3, [r7, #12]
 8010434:	e7fe      	b.n	8010434 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8010436:	f001 f981 	bl	801173c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801043a:	4b1d      	ldr	r3, [pc, #116]	; (80104b0 <xTaskCheckForTimeOut+0xb8>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	69ba      	ldr	r2, [r7, #24]
 8010446:	1ad3      	subs	r3, r2, r3
 8010448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010452:	d102      	bne.n	801045a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010454:	2300      	movs	r3, #0
 8010456:	61fb      	str	r3, [r7, #28]
 8010458:	e023      	b.n	80104a2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	4b15      	ldr	r3, [pc, #84]	; (80104b4 <xTaskCheckForTimeOut+0xbc>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	429a      	cmp	r2, r3
 8010464:	d007      	beq.n	8010476 <xTaskCheckForTimeOut+0x7e>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	69ba      	ldr	r2, [r7, #24]
 801046c:	429a      	cmp	r2, r3
 801046e:	d302      	bcc.n	8010476 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010470:	2301      	movs	r3, #1
 8010472:	61fb      	str	r3, [r7, #28]
 8010474:	e015      	b.n	80104a2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	697a      	ldr	r2, [r7, #20]
 801047c:	429a      	cmp	r2, r3
 801047e:	d20b      	bcs.n	8010498 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	681a      	ldr	r2, [r3, #0]
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	1ad2      	subs	r2, r2, r3
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f7ff ff9d 	bl	80103cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010492:	2300      	movs	r3, #0
 8010494:	61fb      	str	r3, [r7, #28]
 8010496:	e004      	b.n	80104a2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	2200      	movs	r2, #0
 801049c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801049e:	2301      	movs	r3, #1
 80104a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80104a2:	f001 f979 	bl	8011798 <vPortExitCritical>

	return xReturn;
 80104a6:	69fb      	ldr	r3, [r7, #28]
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3720      	adds	r7, #32
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}
 80104b0:	20002134 	.word	0x20002134
 80104b4:	20002148 	.word	0x20002148

080104b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80104b8:	b480      	push	{r7}
 80104ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80104bc:	4b03      	ldr	r3, [pc, #12]	; (80104cc <vTaskMissedYield+0x14>)
 80104be:	2201      	movs	r2, #1
 80104c0:	601a      	str	r2, [r3, #0]
}
 80104c2:	bf00      	nop
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr
 80104cc:	20002144 	.word	0x20002144

080104d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80104d8:	f000 f878 	bl	80105cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80104dc:	4b17      	ldr	r3, [pc, #92]	; (801053c <prvIdleTask+0x6c>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2b01      	cmp	r3, #1
 80104e2:	d907      	bls.n	80104f4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80104e4:	4b16      	ldr	r3, [pc, #88]	; (8010540 <prvIdleTask+0x70>)
 80104e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104ea:	601a      	str	r2, [r3, #0]
 80104ec:	f3bf 8f4f 	dsb	sy
 80104f0:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80104f4:	f7ff fcc0 	bl	800fe78 <prvGetExpectedIdleTime>
 80104f8:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d9eb      	bls.n	80104d8 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8010500:	f7ff fcac 	bl	800fe5c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8010504:	4b0f      	ldr	r3, [pc, #60]	; (8010544 <prvIdleTask+0x74>)
 8010506:	681a      	ldr	r2, [r3, #0]
 8010508:	4b0f      	ldr	r3, [pc, #60]	; (8010548 <prvIdleTask+0x78>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	429a      	cmp	r2, r3
 801050e:	d209      	bcs.n	8010524 <prvIdleTask+0x54>
 8010510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010514:	f383 8811 	msr	BASEPRI, r3
 8010518:	f3bf 8f6f 	isb	sy
 801051c:	f3bf 8f4f 	dsb	sy
 8010520:	60bb      	str	r3, [r7, #8]
 8010522:	e7fe      	b.n	8010522 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8010524:	f7ff fca8 	bl	800fe78 <prvGetExpectedIdleTime>
 8010528:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2b01      	cmp	r3, #1
 801052e:	d902      	bls.n	8010536 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8010530:	68f8      	ldr	r0, [r7, #12]
 8010532:	f7f0 fe28 	bl	8001186 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8010536:	f7ff fcd7 	bl	800fee8 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 801053a:	e7cd      	b.n	80104d8 <prvIdleTask+0x8>
 801053c:	20001c60 	.word	0x20001c60
 8010540:	e000ed04 	.word	0xe000ed04
 8010544:	20002150 	.word	0x20002150
 8010548:	20002134 	.word	0x20002134

0801054c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010552:	2300      	movs	r3, #0
 8010554:	607b      	str	r3, [r7, #4]
 8010556:	e00c      	b.n	8010572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010558:	687a      	ldr	r2, [r7, #4]
 801055a:	4613      	mov	r3, r2
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	4413      	add	r3, r2
 8010560:	009b      	lsls	r3, r3, #2
 8010562:	4a12      	ldr	r2, [pc, #72]	; (80105ac <prvInitialiseTaskLists+0x60>)
 8010564:	4413      	add	r3, r2
 8010566:	4618      	mov	r0, r3
 8010568:	f7fe f8ec 	bl	800e744 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	3301      	adds	r3, #1
 8010570:	607b      	str	r3, [r7, #4]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2b37      	cmp	r3, #55	; 0x37
 8010576:	d9ef      	bls.n	8010558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010578:	480d      	ldr	r0, [pc, #52]	; (80105b0 <prvInitialiseTaskLists+0x64>)
 801057a:	f7fe f8e3 	bl	800e744 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801057e:	480d      	ldr	r0, [pc, #52]	; (80105b4 <prvInitialiseTaskLists+0x68>)
 8010580:	f7fe f8e0 	bl	800e744 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010584:	480c      	ldr	r0, [pc, #48]	; (80105b8 <prvInitialiseTaskLists+0x6c>)
 8010586:	f7fe f8dd 	bl	800e744 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801058a:	480c      	ldr	r0, [pc, #48]	; (80105bc <prvInitialiseTaskLists+0x70>)
 801058c:	f7fe f8da 	bl	800e744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010590:	480b      	ldr	r0, [pc, #44]	; (80105c0 <prvInitialiseTaskLists+0x74>)
 8010592:	f7fe f8d7 	bl	800e744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010596:	4b0b      	ldr	r3, [pc, #44]	; (80105c4 <prvInitialiseTaskLists+0x78>)
 8010598:	4a05      	ldr	r2, [pc, #20]	; (80105b0 <prvInitialiseTaskLists+0x64>)
 801059a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801059c:	4b0a      	ldr	r3, [pc, #40]	; (80105c8 <prvInitialiseTaskLists+0x7c>)
 801059e:	4a05      	ldr	r2, [pc, #20]	; (80105b4 <prvInitialiseTaskLists+0x68>)
 80105a0:	601a      	str	r2, [r3, #0]
}
 80105a2:	bf00      	nop
 80105a4:	3708      	adds	r7, #8
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	20001c60 	.word	0x20001c60
 80105b0:	200020c0 	.word	0x200020c0
 80105b4:	200020d4 	.word	0x200020d4
 80105b8:	200020f0 	.word	0x200020f0
 80105bc:	20002104 	.word	0x20002104
 80105c0:	2000211c 	.word	0x2000211c
 80105c4:	200020e8 	.word	0x200020e8
 80105c8:	200020ec 	.word	0x200020ec

080105cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80105d2:	e019      	b.n	8010608 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80105d4:	f001 f8b2 	bl	801173c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105d8:	4b0f      	ldr	r3, [pc, #60]	; (8010618 <prvCheckTasksWaitingTermination+0x4c>)
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	68db      	ldr	r3, [r3, #12]
 80105de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	3304      	adds	r3, #4
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7fe f937 	bl	800e858 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80105ea:	4b0c      	ldr	r3, [pc, #48]	; (801061c <prvCheckTasksWaitingTermination+0x50>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	3b01      	subs	r3, #1
 80105f0:	4a0a      	ldr	r2, [pc, #40]	; (801061c <prvCheckTasksWaitingTermination+0x50>)
 80105f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80105f4:	4b0a      	ldr	r3, [pc, #40]	; (8010620 <prvCheckTasksWaitingTermination+0x54>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	3b01      	subs	r3, #1
 80105fa:	4a09      	ldr	r2, [pc, #36]	; (8010620 <prvCheckTasksWaitingTermination+0x54>)
 80105fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80105fe:	f001 f8cb 	bl	8011798 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f000 f80e 	bl	8010624 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010608:	4b05      	ldr	r3, [pc, #20]	; (8010620 <prvCheckTasksWaitingTermination+0x54>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d1e1      	bne.n	80105d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010610:	bf00      	nop
 8010612:	3708      	adds	r7, #8
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	20002104 	.word	0x20002104
 801061c:	20002130 	.word	0x20002130
 8010620:	20002118 	.word	0x20002118

08010624 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010632:	2b00      	cmp	r3, #0
 8010634:	d108      	bne.n	8010648 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801063a:	4618      	mov	r0, r3
 801063c:	f001 fa5a 	bl	8011af4 <vPortFree>
				vPortFree( pxTCB );
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f001 fa57 	bl	8011af4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010646:	e017      	b.n	8010678 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801064e:	2b01      	cmp	r3, #1
 8010650:	d103      	bne.n	801065a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f001 fa4e 	bl	8011af4 <vPortFree>
	}
 8010658:	e00e      	b.n	8010678 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010660:	2b02      	cmp	r3, #2
 8010662:	d009      	beq.n	8010678 <prvDeleteTCB+0x54>
 8010664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010668:	f383 8811 	msr	BASEPRI, r3
 801066c:	f3bf 8f6f 	isb	sy
 8010670:	f3bf 8f4f 	dsb	sy
 8010674:	60fb      	str	r3, [r7, #12]
 8010676:	e7fe      	b.n	8010676 <prvDeleteTCB+0x52>
	}
 8010678:	bf00      	nop
 801067a:	3710      	adds	r7, #16
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}

08010680 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010686:	4b0c      	ldr	r3, [pc, #48]	; (80106b8 <prvResetNextTaskUnblockTime+0x38>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d104      	bne.n	801069a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010690:	4b0a      	ldr	r3, [pc, #40]	; (80106bc <prvResetNextTaskUnblockTime+0x3c>)
 8010692:	f04f 32ff 	mov.w	r2, #4294967295
 8010696:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010698:	e008      	b.n	80106ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801069a:	4b07      	ldr	r3, [pc, #28]	; (80106b8 <prvResetNextTaskUnblockTime+0x38>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	68db      	ldr	r3, [r3, #12]
 80106a0:	68db      	ldr	r3, [r3, #12]
 80106a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	685b      	ldr	r3, [r3, #4]
 80106a8:	4a04      	ldr	r2, [pc, #16]	; (80106bc <prvResetNextTaskUnblockTime+0x3c>)
 80106aa:	6013      	str	r3, [r2, #0]
}
 80106ac:	bf00      	nop
 80106ae:	370c      	adds	r7, #12
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr
 80106b8:	200020e8 	.word	0x200020e8
 80106bc:	20002150 	.word	0x20002150

080106c0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80106c0:	b480      	push	{r7}
 80106c2:	b083      	sub	sp, #12
 80106c4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80106c6:	4b05      	ldr	r3, [pc, #20]	; (80106dc <xTaskGetCurrentTaskHandle+0x1c>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	607b      	str	r3, [r7, #4]

		return xReturn;
 80106cc:	687b      	ldr	r3, [r7, #4]
	}
 80106ce:	4618      	mov	r0, r3
 80106d0:	370c      	adds	r7, #12
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop
 80106dc:	20001c5c 	.word	0x20001c5c

080106e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80106e0:	b480      	push	{r7}
 80106e2:	b083      	sub	sp, #12
 80106e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80106e6:	4b0b      	ldr	r3, [pc, #44]	; (8010714 <xTaskGetSchedulerState+0x34>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d102      	bne.n	80106f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80106ee:	2301      	movs	r3, #1
 80106f0:	607b      	str	r3, [r7, #4]
 80106f2:	e008      	b.n	8010706 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106f4:	4b08      	ldr	r3, [pc, #32]	; (8010718 <xTaskGetSchedulerState+0x38>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d102      	bne.n	8010702 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80106fc:	2302      	movs	r3, #2
 80106fe:	607b      	str	r3, [r7, #4]
 8010700:	e001      	b.n	8010706 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010702:	2300      	movs	r3, #0
 8010704:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010706:	687b      	ldr	r3, [r7, #4]
	}
 8010708:	4618      	mov	r0, r3
 801070a:	370c      	adds	r7, #12
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr
 8010714:	2000213c 	.word	0x2000213c
 8010718:	20002158 	.word	0x20002158

0801071c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801071c:	b580      	push	{r7, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010728:	2300      	movs	r3, #0
 801072a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d051      	beq.n	80107d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010736:	4b2a      	ldr	r3, [pc, #168]	; (80107e0 <xTaskPriorityInherit+0xc4>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801073c:	429a      	cmp	r2, r3
 801073e:	d241      	bcs.n	80107c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	699b      	ldr	r3, [r3, #24]
 8010744:	2b00      	cmp	r3, #0
 8010746:	db06      	blt.n	8010756 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010748:	4b25      	ldr	r3, [pc, #148]	; (80107e0 <xTaskPriorityInherit+0xc4>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801074e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	6959      	ldr	r1, [r3, #20]
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801075e:	4613      	mov	r3, r2
 8010760:	009b      	lsls	r3, r3, #2
 8010762:	4413      	add	r3, r2
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	4a1f      	ldr	r2, [pc, #124]	; (80107e4 <xTaskPriorityInherit+0xc8>)
 8010768:	4413      	add	r3, r2
 801076a:	4299      	cmp	r1, r3
 801076c:	d122      	bne.n	80107b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	3304      	adds	r3, #4
 8010772:	4618      	mov	r0, r3
 8010774:	f7fe f870 	bl	800e858 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010778:	4b19      	ldr	r3, [pc, #100]	; (80107e0 <xTaskPriorityInherit+0xc4>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010786:	4b18      	ldr	r3, [pc, #96]	; (80107e8 <xTaskPriorityInherit+0xcc>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	429a      	cmp	r2, r3
 801078c:	d903      	bls.n	8010796 <xTaskPriorityInherit+0x7a>
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010792:	4a15      	ldr	r2, [pc, #84]	; (80107e8 <xTaskPriorityInherit+0xcc>)
 8010794:	6013      	str	r3, [r2, #0]
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801079a:	4613      	mov	r3, r2
 801079c:	009b      	lsls	r3, r3, #2
 801079e:	4413      	add	r3, r2
 80107a0:	009b      	lsls	r3, r3, #2
 80107a2:	4a10      	ldr	r2, [pc, #64]	; (80107e4 <xTaskPriorityInherit+0xc8>)
 80107a4:	441a      	add	r2, r3
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	3304      	adds	r3, #4
 80107aa:	4619      	mov	r1, r3
 80107ac:	4610      	mov	r0, r2
 80107ae:	f7fd fff6 	bl	800e79e <vListInsertEnd>
 80107b2:	e004      	b.n	80107be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80107b4:	4b0a      	ldr	r3, [pc, #40]	; (80107e0 <xTaskPriorityInherit+0xc4>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80107be:	2301      	movs	r3, #1
 80107c0:	60fb      	str	r3, [r7, #12]
 80107c2:	e008      	b.n	80107d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80107c8:	4b05      	ldr	r3, [pc, #20]	; (80107e0 <xTaskPriorityInherit+0xc4>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d201      	bcs.n	80107d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80107d2:	2301      	movs	r3, #1
 80107d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80107d6:	68fb      	ldr	r3, [r7, #12]
	}
 80107d8:	4618      	mov	r0, r3
 80107da:	3710      	adds	r7, #16
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}
 80107e0:	20001c5c 	.word	0x20001c5c
 80107e4:	20001c60 	.word	0x20001c60
 80107e8:	20002138 	.word	0x20002138

080107ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b086      	sub	sp, #24
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80107f8:	2300      	movs	r3, #0
 80107fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d054      	beq.n	80108ac <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010802:	4b2d      	ldr	r3, [pc, #180]	; (80108b8 <xTaskPriorityDisinherit+0xcc>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	693a      	ldr	r2, [r7, #16]
 8010808:	429a      	cmp	r2, r3
 801080a:	d009      	beq.n	8010820 <xTaskPriorityDisinherit+0x34>
 801080c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010810:	f383 8811 	msr	BASEPRI, r3
 8010814:	f3bf 8f6f 	isb	sy
 8010818:	f3bf 8f4f 	dsb	sy
 801081c:	60fb      	str	r3, [r7, #12]
 801081e:	e7fe      	b.n	801081e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010820:	693b      	ldr	r3, [r7, #16]
 8010822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010824:	2b00      	cmp	r3, #0
 8010826:	d109      	bne.n	801083c <xTaskPriorityDisinherit+0x50>
 8010828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801082c:	f383 8811 	msr	BASEPRI, r3
 8010830:	f3bf 8f6f 	isb	sy
 8010834:	f3bf 8f4f 	dsb	sy
 8010838:	60bb      	str	r3, [r7, #8]
 801083a:	e7fe      	b.n	801083a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010840:	1e5a      	subs	r2, r3, #1
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801084e:	429a      	cmp	r2, r3
 8010850:	d02c      	beq.n	80108ac <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010856:	2b00      	cmp	r3, #0
 8010858:	d128      	bne.n	80108ac <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	3304      	adds	r3, #4
 801085e:	4618      	mov	r0, r3
 8010860:	f7fd fffa 	bl	800e858 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010870:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801087c:	4b0f      	ldr	r3, [pc, #60]	; (80108bc <xTaskPriorityDisinherit+0xd0>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	429a      	cmp	r2, r3
 8010882:	d903      	bls.n	801088c <xTaskPriorityDisinherit+0xa0>
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010888:	4a0c      	ldr	r2, [pc, #48]	; (80108bc <xTaskPriorityDisinherit+0xd0>)
 801088a:	6013      	str	r3, [r2, #0]
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010890:	4613      	mov	r3, r2
 8010892:	009b      	lsls	r3, r3, #2
 8010894:	4413      	add	r3, r2
 8010896:	009b      	lsls	r3, r3, #2
 8010898:	4a09      	ldr	r2, [pc, #36]	; (80108c0 <xTaskPriorityDisinherit+0xd4>)
 801089a:	441a      	add	r2, r3
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	3304      	adds	r3, #4
 80108a0:	4619      	mov	r1, r3
 80108a2:	4610      	mov	r0, r2
 80108a4:	f7fd ff7b 	bl	800e79e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80108a8:	2301      	movs	r3, #1
 80108aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80108ac:	697b      	ldr	r3, [r7, #20]
	}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3718      	adds	r7, #24
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	20001c5c 	.word	0x20001c5c
 80108bc:	20002138 	.word	0x20002138
 80108c0:	20001c60 	.word	0x20001c60

080108c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b088      	sub	sp, #32
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80108d2:	2301      	movs	r3, #1
 80108d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d068      	beq.n	80109ae <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80108dc:	69bb      	ldr	r3, [r7, #24]
 80108de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d109      	bne.n	80108f8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80108e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e8:	f383 8811 	msr	BASEPRI, r3
 80108ec:	f3bf 8f6f 	isb	sy
 80108f0:	f3bf 8f4f 	dsb	sy
 80108f4:	60fb      	str	r3, [r7, #12]
 80108f6:	e7fe      	b.n	80108f6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80108f8:	69bb      	ldr	r3, [r7, #24]
 80108fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108fc:	683a      	ldr	r2, [r7, #0]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d902      	bls.n	8010908 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	61fb      	str	r3, [r7, #28]
 8010906:	e002      	b.n	801090e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010908:	69bb      	ldr	r3, [r7, #24]
 801090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801090c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010912:	69fa      	ldr	r2, [r7, #28]
 8010914:	429a      	cmp	r2, r3
 8010916:	d04a      	beq.n	80109ae <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010918:	69bb      	ldr	r3, [r7, #24]
 801091a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801091c:	697a      	ldr	r2, [r7, #20]
 801091e:	429a      	cmp	r2, r3
 8010920:	d145      	bne.n	80109ae <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010922:	4b25      	ldr	r3, [pc, #148]	; (80109b8 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	69ba      	ldr	r2, [r7, #24]
 8010928:	429a      	cmp	r2, r3
 801092a:	d109      	bne.n	8010940 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 801092c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010930:	f383 8811 	msr	BASEPRI, r3
 8010934:	f3bf 8f6f 	isb	sy
 8010938:	f3bf 8f4f 	dsb	sy
 801093c:	60bb      	str	r3, [r7, #8]
 801093e:	e7fe      	b.n	801093e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010940:	69bb      	ldr	r3, [r7, #24]
 8010942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010944:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010946:	69bb      	ldr	r3, [r7, #24]
 8010948:	69fa      	ldr	r2, [r7, #28]
 801094a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801094c:	69bb      	ldr	r3, [r7, #24]
 801094e:	699b      	ldr	r3, [r3, #24]
 8010950:	2b00      	cmp	r3, #0
 8010952:	db04      	blt.n	801095e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010954:	69fb      	ldr	r3, [r7, #28]
 8010956:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801095a:	69bb      	ldr	r3, [r7, #24]
 801095c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801095e:	69bb      	ldr	r3, [r7, #24]
 8010960:	6959      	ldr	r1, [r3, #20]
 8010962:	693a      	ldr	r2, [r7, #16]
 8010964:	4613      	mov	r3, r2
 8010966:	009b      	lsls	r3, r3, #2
 8010968:	4413      	add	r3, r2
 801096a:	009b      	lsls	r3, r3, #2
 801096c:	4a13      	ldr	r2, [pc, #76]	; (80109bc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801096e:	4413      	add	r3, r2
 8010970:	4299      	cmp	r1, r3
 8010972:	d11c      	bne.n	80109ae <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010974:	69bb      	ldr	r3, [r7, #24]
 8010976:	3304      	adds	r3, #4
 8010978:	4618      	mov	r0, r3
 801097a:	f7fd ff6d 	bl	800e858 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801097e:	69bb      	ldr	r3, [r7, #24]
 8010980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010982:	4b0f      	ldr	r3, [pc, #60]	; (80109c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	429a      	cmp	r2, r3
 8010988:	d903      	bls.n	8010992 <vTaskPriorityDisinheritAfterTimeout+0xce>
 801098a:	69bb      	ldr	r3, [r7, #24]
 801098c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801098e:	4a0c      	ldr	r2, [pc, #48]	; (80109c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010990:	6013      	str	r3, [r2, #0]
 8010992:	69bb      	ldr	r3, [r7, #24]
 8010994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010996:	4613      	mov	r3, r2
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	4413      	add	r3, r2
 801099c:	009b      	lsls	r3, r3, #2
 801099e:	4a07      	ldr	r2, [pc, #28]	; (80109bc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80109a0:	441a      	add	r2, r3
 80109a2:	69bb      	ldr	r3, [r7, #24]
 80109a4:	3304      	adds	r3, #4
 80109a6:	4619      	mov	r1, r3
 80109a8:	4610      	mov	r0, r2
 80109aa:	f7fd fef8 	bl	800e79e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80109ae:	bf00      	nop
 80109b0:	3720      	adds	r7, #32
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	bf00      	nop
 80109b8:	20001c5c 	.word	0x20001c5c
 80109bc:	20001c60 	.word	0x20001c60
 80109c0:	20002138 	.word	0x20002138

080109c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80109c4:	b480      	push	{r7}
 80109c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80109c8:	4b07      	ldr	r3, [pc, #28]	; (80109e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d004      	beq.n	80109da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80109d0:	4b05      	ldr	r3, [pc, #20]	; (80109e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109d6:	3201      	adds	r2, #1
 80109d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80109da:	4b03      	ldr	r3, [pc, #12]	; (80109e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80109dc:	681b      	ldr	r3, [r3, #0]
	}
 80109de:	4618      	mov	r0, r3
 80109e0:	46bd      	mov	sp, r7
 80109e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e6:	4770      	bx	lr
 80109e8:	20001c5c 	.word	0x20001c5c

080109ec <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b086      	sub	sp, #24
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	60f8      	str	r0, [r7, #12]
 80109f4:	60b9      	str	r1, [r7, #8]
 80109f6:	607a      	str	r2, [r7, #4]
 80109f8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80109fa:	f000 fe9f 	bl	801173c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80109fe:	4b26      	ldr	r3, [pc, #152]	; (8010a98 <xTaskNotifyWait+0xac>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010a06:	b2db      	uxtb	r3, r3
 8010a08:	2b02      	cmp	r3, #2
 8010a0a:	d01a      	beq.n	8010a42 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010a0c:	4b22      	ldr	r3, [pc, #136]	; (8010a98 <xTaskNotifyWait+0xac>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010a12:	68fa      	ldr	r2, [r7, #12]
 8010a14:	43d2      	mvns	r2, r2
 8010a16:	400a      	ands	r2, r1
 8010a18:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010a1a:	4b1f      	ldr	r3, [pc, #124]	; (8010a98 <xTaskNotifyWait+0xac>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	2201      	movs	r2, #1
 8010a20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d00b      	beq.n	8010a42 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010a2a:	2101      	movs	r1, #1
 8010a2c:	6838      	ldr	r0, [r7, #0]
 8010a2e:	f000 f9c5 	bl	8010dbc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010a32:	4b1a      	ldr	r3, [pc, #104]	; (8010a9c <xTaskNotifyWait+0xb0>)
 8010a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a38:	601a      	str	r2, [r3, #0]
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010a42:	f000 fea9 	bl	8011798 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010a46:	f000 fe79 	bl	801173c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d004      	beq.n	8010a5a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010a50:	4b11      	ldr	r3, [pc, #68]	; (8010a98 <xTaskNotifyWait+0xac>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010a5a:	4b0f      	ldr	r3, [pc, #60]	; (8010a98 <xTaskNotifyWait+0xac>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	2b02      	cmp	r3, #2
 8010a66:	d002      	beq.n	8010a6e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	617b      	str	r3, [r7, #20]
 8010a6c:	e008      	b.n	8010a80 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010a6e:	4b0a      	ldr	r3, [pc, #40]	; (8010a98 <xTaskNotifyWait+0xac>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010a74:	68ba      	ldr	r2, [r7, #8]
 8010a76:	43d2      	mvns	r2, r2
 8010a78:	400a      	ands	r2, r1
 8010a7a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010a80:	4b05      	ldr	r3, [pc, #20]	; (8010a98 <xTaskNotifyWait+0xac>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	2200      	movs	r2, #0
 8010a86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8010a8a:	f000 fe85 	bl	8011798 <vPortExitCritical>

		return xReturn;
 8010a8e:	697b      	ldr	r3, [r7, #20]
	}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3718      	adds	r7, #24
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	20001c5c 	.word	0x20001c5c
 8010a9c:	e000ed04 	.word	0xe000ed04

08010aa0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b08a      	sub	sp, #40	; 0x28
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	60f8      	str	r0, [r7, #12]
 8010aa8:	60b9      	str	r1, [r7, #8]
 8010aaa:	603b      	str	r3, [r7, #0]
 8010aac:	4613      	mov	r3, r2
 8010aae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d109      	bne.n	8010ace <xTaskGenericNotify+0x2e>
 8010aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010abe:	f383 8811 	msr	BASEPRI, r3
 8010ac2:	f3bf 8f6f 	isb	sy
 8010ac6:	f3bf 8f4f 	dsb	sy
 8010aca:	61bb      	str	r3, [r7, #24]
 8010acc:	e7fe      	b.n	8010acc <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010ad2:	f000 fe33 	bl	801173c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d003      	beq.n	8010ae4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010adc:	6a3b      	ldr	r3, [r7, #32]
 8010ade:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010ae4:	6a3b      	ldr	r3, [r7, #32]
 8010ae6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010aea:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010aec:	6a3b      	ldr	r3, [r7, #32]
 8010aee:	2202      	movs	r2, #2
 8010af0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8010af4:	79fb      	ldrb	r3, [r7, #7]
 8010af6:	2b04      	cmp	r3, #4
 8010af8:	d827      	bhi.n	8010b4a <xTaskGenericNotify+0xaa>
 8010afa:	a201      	add	r2, pc, #4	; (adr r2, 8010b00 <xTaskGenericNotify+0x60>)
 8010afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b00:	08010b69 	.word	0x08010b69
 8010b04:	08010b15 	.word	0x08010b15
 8010b08:	08010b23 	.word	0x08010b23
 8010b0c:	08010b2f 	.word	0x08010b2f
 8010b10:	08010b37 	.word	0x08010b37
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010b14:	6a3b      	ldr	r3, [r7, #32]
 8010b16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	431a      	orrs	r2, r3
 8010b1c:	6a3b      	ldr	r3, [r7, #32]
 8010b1e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010b20:	e025      	b.n	8010b6e <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010b22:	6a3b      	ldr	r3, [r7, #32]
 8010b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b26:	1c5a      	adds	r2, r3, #1
 8010b28:	6a3b      	ldr	r3, [r7, #32]
 8010b2a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010b2c:	e01f      	b.n	8010b6e <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010b2e:	6a3b      	ldr	r3, [r7, #32]
 8010b30:	68ba      	ldr	r2, [r7, #8]
 8010b32:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010b34:	e01b      	b.n	8010b6e <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010b36:	7ffb      	ldrb	r3, [r7, #31]
 8010b38:	2b02      	cmp	r3, #2
 8010b3a:	d003      	beq.n	8010b44 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010b3c:	6a3b      	ldr	r3, [r7, #32]
 8010b3e:	68ba      	ldr	r2, [r7, #8]
 8010b40:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010b42:	e014      	b.n	8010b6e <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8010b44:	2300      	movs	r3, #0
 8010b46:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8010b48:	e011      	b.n	8010b6e <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010b4a:	6a3b      	ldr	r3, [r7, #32]
 8010b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b52:	d00b      	beq.n	8010b6c <xTaskGenericNotify+0xcc>
 8010b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b58:	f383 8811 	msr	BASEPRI, r3
 8010b5c:	f3bf 8f6f 	isb	sy
 8010b60:	f3bf 8f4f 	dsb	sy
 8010b64:	617b      	str	r3, [r7, #20]
 8010b66:	e7fe      	b.n	8010b66 <xTaskGenericNotify+0xc6>
					break;
 8010b68:	bf00      	nop
 8010b6a:	e000      	b.n	8010b6e <xTaskGenericNotify+0xce>

					break;
 8010b6c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010b6e:	7ffb      	ldrb	r3, [r7, #31]
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d13b      	bne.n	8010bec <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b74:	6a3b      	ldr	r3, [r7, #32]
 8010b76:	3304      	adds	r3, #4
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fd fe6d 	bl	800e858 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010b7e:	6a3b      	ldr	r3, [r7, #32]
 8010b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b82:	4b1e      	ldr	r3, [pc, #120]	; (8010bfc <xTaskGenericNotify+0x15c>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d903      	bls.n	8010b92 <xTaskGenericNotify+0xf2>
 8010b8a:	6a3b      	ldr	r3, [r7, #32]
 8010b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b8e:	4a1b      	ldr	r2, [pc, #108]	; (8010bfc <xTaskGenericNotify+0x15c>)
 8010b90:	6013      	str	r3, [r2, #0]
 8010b92:	6a3b      	ldr	r3, [r7, #32]
 8010b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b96:	4613      	mov	r3, r2
 8010b98:	009b      	lsls	r3, r3, #2
 8010b9a:	4413      	add	r3, r2
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	4a18      	ldr	r2, [pc, #96]	; (8010c00 <xTaskGenericNotify+0x160>)
 8010ba0:	441a      	add	r2, r3
 8010ba2:	6a3b      	ldr	r3, [r7, #32]
 8010ba4:	3304      	adds	r3, #4
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	4610      	mov	r0, r2
 8010baa:	f7fd fdf8 	bl	800e79e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010bae:	6a3b      	ldr	r3, [r7, #32]
 8010bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d009      	beq.n	8010bca <xTaskGenericNotify+0x12a>
 8010bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bba:	f383 8811 	msr	BASEPRI, r3
 8010bbe:	f3bf 8f6f 	isb	sy
 8010bc2:	f3bf 8f4f 	dsb	sy
 8010bc6:	613b      	str	r3, [r7, #16]
 8010bc8:	e7fe      	b.n	8010bc8 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8010bca:	f7ff fd59 	bl	8010680 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010bce:	6a3b      	ldr	r3, [r7, #32]
 8010bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bd2:	4b0c      	ldr	r3, [pc, #48]	; (8010c04 <xTaskGenericNotify+0x164>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d907      	bls.n	8010bec <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010bdc:	4b0a      	ldr	r3, [pc, #40]	; (8010c08 <xTaskGenericNotify+0x168>)
 8010bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010be2:	601a      	str	r2, [r3, #0]
 8010be4:	f3bf 8f4f 	dsb	sy
 8010be8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010bec:	f000 fdd4 	bl	8011798 <vPortExitCritical>

		return xReturn;
 8010bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3728      	adds	r7, #40	; 0x28
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	20002138 	.word	0x20002138
 8010c00:	20001c60 	.word	0x20001c60
 8010c04:	20001c5c 	.word	0x20001c5c
 8010c08:	e000ed04 	.word	0xe000ed04

08010c0c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b08e      	sub	sp, #56	; 0x38
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	60f8      	str	r0, [r7, #12]
 8010c14:	60b9      	str	r1, [r7, #8]
 8010c16:	603b      	str	r3, [r7, #0]
 8010c18:	4613      	mov	r3, r2
 8010c1a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d109      	bne.n	8010c3a <xTaskGenericNotifyFromISR+0x2e>
 8010c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2a:	f383 8811 	msr	BASEPRI, r3
 8010c2e:	f3bf 8f6f 	isb	sy
 8010c32:	f3bf 8f4f 	dsb	sy
 8010c36:	627b      	str	r3, [r7, #36]	; 0x24
 8010c38:	e7fe      	b.n	8010c38 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c3a:	f000 fe5b 	bl	80118f4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8010c42:	f3ef 8211 	mrs	r2, BASEPRI
 8010c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c4a:	f383 8811 	msr	BASEPRI, r3
 8010c4e:	f3bf 8f6f 	isb	sy
 8010c52:	f3bf 8f4f 	dsb	sy
 8010c56:	623a      	str	r2, [r7, #32]
 8010c58:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8010c5a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d003      	beq.n	8010c6c <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c78:	2202      	movs	r2, #2
 8010c7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8010c7e:	79fb      	ldrb	r3, [r7, #7]
 8010c80:	2b04      	cmp	r3, #4
 8010c82:	d829      	bhi.n	8010cd8 <xTaskGenericNotifyFromISR+0xcc>
 8010c84:	a201      	add	r2, pc, #4	; (adr r2, 8010c8c <xTaskGenericNotifyFromISR+0x80>)
 8010c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c8a:	bf00      	nop
 8010c8c:	08010cf7 	.word	0x08010cf7
 8010c90:	08010ca1 	.word	0x08010ca1
 8010c94:	08010caf 	.word	0x08010caf
 8010c98:	08010cbb 	.word	0x08010cbb
 8010c9c:	08010cc3 	.word	0x08010cc3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	431a      	orrs	r2, r3
 8010ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010caa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010cac:	e026      	b.n	8010cfc <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cb2:	1c5a      	adds	r2, r3, #1
 8010cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010cb8:	e020      	b.n	8010cfc <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cbc:	68ba      	ldr	r2, [r7, #8]
 8010cbe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010cc0:	e01c      	b.n	8010cfc <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010cc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010cc6:	2b02      	cmp	r3, #2
 8010cc8:	d003      	beq.n	8010cd2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ccc:	68ba      	ldr	r2, [r7, #8]
 8010cce:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010cd0:	e014      	b.n	8010cfc <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8010cd6:	e011      	b.n	8010cfc <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ce0:	d00b      	beq.n	8010cfa <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8010ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce6:	f383 8811 	msr	BASEPRI, r3
 8010cea:	f3bf 8f6f 	isb	sy
 8010cee:	f3bf 8f4f 	dsb	sy
 8010cf2:	61bb      	str	r3, [r7, #24]
 8010cf4:	e7fe      	b.n	8010cf4 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8010cf6:	bf00      	nop
 8010cf8:	e000      	b.n	8010cfc <xTaskGenericNotifyFromISR+0xf0>
					break;
 8010cfa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010cfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	d145      	bne.n	8010d90 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d009      	beq.n	8010d20 <xTaskGenericNotifyFromISR+0x114>
 8010d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d10:	f383 8811 	msr	BASEPRI, r3
 8010d14:	f3bf 8f6f 	isb	sy
 8010d18:	f3bf 8f4f 	dsb	sy
 8010d1c:	617b      	str	r3, [r7, #20]
 8010d1e:	e7fe      	b.n	8010d1e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d20:	4b20      	ldr	r3, [pc, #128]	; (8010da4 <xTaskGenericNotifyFromISR+0x198>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d11d      	bne.n	8010d64 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d2a:	3304      	adds	r3, #4
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f7fd fd93 	bl	800e858 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d36:	4b1c      	ldr	r3, [pc, #112]	; (8010da8 <xTaskGenericNotifyFromISR+0x19c>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d903      	bls.n	8010d46 <xTaskGenericNotifyFromISR+0x13a>
 8010d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d42:	4a19      	ldr	r2, [pc, #100]	; (8010da8 <xTaskGenericNotifyFromISR+0x19c>)
 8010d44:	6013      	str	r3, [r2, #0]
 8010d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d4a:	4613      	mov	r3, r2
 8010d4c:	009b      	lsls	r3, r3, #2
 8010d4e:	4413      	add	r3, r2
 8010d50:	009b      	lsls	r3, r3, #2
 8010d52:	4a16      	ldr	r2, [pc, #88]	; (8010dac <xTaskGenericNotifyFromISR+0x1a0>)
 8010d54:	441a      	add	r2, r3
 8010d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d58:	3304      	adds	r3, #4
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	4610      	mov	r0, r2
 8010d5e:	f7fd fd1e 	bl	800e79e <vListInsertEnd>
 8010d62:	e005      	b.n	8010d70 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d66:	3318      	adds	r3, #24
 8010d68:	4619      	mov	r1, r3
 8010d6a:	4811      	ldr	r0, [pc, #68]	; (8010db0 <xTaskGenericNotifyFromISR+0x1a4>)
 8010d6c:	f7fd fd17 	bl	800e79e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d74:	4b0f      	ldr	r3, [pc, #60]	; (8010db4 <xTaskGenericNotifyFromISR+0x1a8>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d908      	bls.n	8010d90 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d002      	beq.n	8010d8a <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d86:	2201      	movs	r2, #1
 8010d88:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010d8a:	4b0b      	ldr	r3, [pc, #44]	; (8010db8 <xTaskGenericNotifyFromISR+0x1ac>)
 8010d8c:	2201      	movs	r2, #1
 8010d8e:	601a      	str	r2, [r3, #0]
 8010d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d92:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3738      	adds	r7, #56	; 0x38
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	20002158 	.word	0x20002158
 8010da8:	20002138 	.word	0x20002138
 8010dac:	20001c60 	.word	0x20001c60
 8010db0:	200020f0 	.word	0x200020f0
 8010db4:	20001c5c 	.word	0x20001c5c
 8010db8:	20002144 	.word	0x20002144

08010dbc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010dc6:	4b21      	ldr	r3, [pc, #132]	; (8010e4c <prvAddCurrentTaskToDelayedList+0x90>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010dcc:	4b20      	ldr	r3, [pc, #128]	; (8010e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	3304      	adds	r3, #4
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7fd fd40 	bl	800e858 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dde:	d10a      	bne.n	8010df6 <prvAddCurrentTaskToDelayedList+0x3a>
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d007      	beq.n	8010df6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010de6:	4b1a      	ldr	r3, [pc, #104]	; (8010e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	3304      	adds	r3, #4
 8010dec:	4619      	mov	r1, r3
 8010dee:	4819      	ldr	r0, [pc, #100]	; (8010e54 <prvAddCurrentTaskToDelayedList+0x98>)
 8010df0:	f7fd fcd5 	bl	800e79e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010df4:	e026      	b.n	8010e44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010df6:	68fa      	ldr	r2, [r7, #12]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	4413      	add	r3, r2
 8010dfc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010dfe:	4b14      	ldr	r3, [pc, #80]	; (8010e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	68ba      	ldr	r2, [r7, #8]
 8010e04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010e06:	68ba      	ldr	r2, [r7, #8]
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d209      	bcs.n	8010e22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e0e:	4b12      	ldr	r3, [pc, #72]	; (8010e58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010e10:	681a      	ldr	r2, [r3, #0]
 8010e12:	4b0f      	ldr	r3, [pc, #60]	; (8010e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	3304      	adds	r3, #4
 8010e18:	4619      	mov	r1, r3
 8010e1a:	4610      	mov	r0, r2
 8010e1c:	f7fd fce3 	bl	800e7e6 <vListInsert>
}
 8010e20:	e010      	b.n	8010e44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e22:	4b0e      	ldr	r3, [pc, #56]	; (8010e5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010e24:	681a      	ldr	r2, [r3, #0]
 8010e26:	4b0a      	ldr	r3, [pc, #40]	; (8010e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	3304      	adds	r3, #4
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	4610      	mov	r0, r2
 8010e30:	f7fd fcd9 	bl	800e7e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010e34:	4b0a      	ldr	r3, [pc, #40]	; (8010e60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	68ba      	ldr	r2, [r7, #8]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d202      	bcs.n	8010e44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010e3e:	4a08      	ldr	r2, [pc, #32]	; (8010e60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	6013      	str	r3, [r2, #0]
}
 8010e44:	bf00      	nop
 8010e46:	3710      	adds	r7, #16
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	20002134 	.word	0x20002134
 8010e50:	20001c5c 	.word	0x20001c5c
 8010e54:	2000211c 	.word	0x2000211c
 8010e58:	200020ec 	.word	0x200020ec
 8010e5c:	200020e8 	.word	0x200020e8
 8010e60:	20002150 	.word	0x20002150

08010e64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b08a      	sub	sp, #40	; 0x28
 8010e68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010e6e:	f000 faff 	bl	8011470 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010e72:	4b1c      	ldr	r3, [pc, #112]	; (8010ee4 <xTimerCreateTimerTask+0x80>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d021      	beq.n	8010ebe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010e82:	1d3a      	adds	r2, r7, #4
 8010e84:	f107 0108 	add.w	r1, r7, #8
 8010e88:	f107 030c 	add.w	r3, r7, #12
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7fd fc3f 	bl	800e710 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010e92:	6879      	ldr	r1, [r7, #4]
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	68fa      	ldr	r2, [r7, #12]
 8010e98:	9202      	str	r2, [sp, #8]
 8010e9a:	9301      	str	r3, [sp, #4]
 8010e9c:	2302      	movs	r3, #2
 8010e9e:	9300      	str	r3, [sp, #0]
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	460a      	mov	r2, r1
 8010ea4:	4910      	ldr	r1, [pc, #64]	; (8010ee8 <xTimerCreateTimerTask+0x84>)
 8010ea6:	4811      	ldr	r0, [pc, #68]	; (8010eec <xTimerCreateTimerTask+0x88>)
 8010ea8:	f7fe fda2 	bl	800f9f0 <xTaskCreateStatic>
 8010eac:	4602      	mov	r2, r0
 8010eae:	4b10      	ldr	r3, [pc, #64]	; (8010ef0 <xTimerCreateTimerTask+0x8c>)
 8010eb0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010eb2:	4b0f      	ldr	r3, [pc, #60]	; (8010ef0 <xTimerCreateTimerTask+0x8c>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d001      	beq.n	8010ebe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010eba:	2301      	movs	r3, #1
 8010ebc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d109      	bne.n	8010ed8 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8010ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec8:	f383 8811 	msr	BASEPRI, r3
 8010ecc:	f3bf 8f6f 	isb	sy
 8010ed0:	f3bf 8f4f 	dsb	sy
 8010ed4:	613b      	str	r3, [r7, #16]
 8010ed6:	e7fe      	b.n	8010ed6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8010ed8:	697b      	ldr	r3, [r7, #20]
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3718      	adds	r7, #24
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	2000218c 	.word	0x2000218c
 8010ee8:	08013944 	.word	0x08013944
 8010eec:	08011025 	.word	0x08011025
 8010ef0:	20002190 	.word	0x20002190

08010ef4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b08a      	sub	sp, #40	; 0x28
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	607a      	str	r2, [r7, #4]
 8010f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010f02:	2300      	movs	r3, #0
 8010f04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d109      	bne.n	8010f20 <xTimerGenericCommand+0x2c>
 8010f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f10:	f383 8811 	msr	BASEPRI, r3
 8010f14:	f3bf 8f6f 	isb	sy
 8010f18:	f3bf 8f4f 	dsb	sy
 8010f1c:	623b      	str	r3, [r7, #32]
 8010f1e:	e7fe      	b.n	8010f1e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010f20:	4b19      	ldr	r3, [pc, #100]	; (8010f88 <xTimerGenericCommand+0x94>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d02a      	beq.n	8010f7e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	2b05      	cmp	r3, #5
 8010f38:	dc18      	bgt.n	8010f6c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010f3a:	f7ff fbd1 	bl	80106e0 <xTaskGetSchedulerState>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	2b02      	cmp	r3, #2
 8010f42:	d109      	bne.n	8010f58 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010f44:	4b10      	ldr	r3, [pc, #64]	; (8010f88 <xTimerGenericCommand+0x94>)
 8010f46:	6818      	ldr	r0, [r3, #0]
 8010f48:	f107 0110 	add.w	r1, r7, #16
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f50:	f7fd ff04 	bl	800ed5c <xQueueGenericSend>
 8010f54:	6278      	str	r0, [r7, #36]	; 0x24
 8010f56:	e012      	b.n	8010f7e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010f58:	4b0b      	ldr	r3, [pc, #44]	; (8010f88 <xTimerGenericCommand+0x94>)
 8010f5a:	6818      	ldr	r0, [r3, #0]
 8010f5c:	f107 0110 	add.w	r1, r7, #16
 8010f60:	2300      	movs	r3, #0
 8010f62:	2200      	movs	r2, #0
 8010f64:	f7fd fefa 	bl	800ed5c <xQueueGenericSend>
 8010f68:	6278      	str	r0, [r7, #36]	; 0x24
 8010f6a:	e008      	b.n	8010f7e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010f6c:	4b06      	ldr	r3, [pc, #24]	; (8010f88 <xTimerGenericCommand+0x94>)
 8010f6e:	6818      	ldr	r0, [r3, #0]
 8010f70:	f107 0110 	add.w	r1, r7, #16
 8010f74:	2300      	movs	r3, #0
 8010f76:	683a      	ldr	r2, [r7, #0]
 8010f78:	f7fd ffea 	bl	800ef50 <xQueueGenericSendFromISR>
 8010f7c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3728      	adds	r7, #40	; 0x28
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	2000218c 	.word	0x2000218c

08010f8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b088      	sub	sp, #32
 8010f90:	af02      	add	r7, sp, #8
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f96:	4b22      	ldr	r3, [pc, #136]	; (8011020 <prvProcessExpiredTimer+0x94>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	68db      	ldr	r3, [r3, #12]
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	3304      	adds	r3, #4
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fd fc57 	bl	800e858 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fb0:	f003 0304 	and.w	r3, r3, #4
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d021      	beq.n	8010ffc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	699a      	ldr	r2, [r3, #24]
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	18d1      	adds	r1, r2, r3
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	683a      	ldr	r2, [r7, #0]
 8010fc4:	6978      	ldr	r0, [r7, #20]
 8010fc6:	f000 f8d1 	bl	801116c <prvInsertTimerInActiveList>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d01e      	beq.n	801100e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	9300      	str	r3, [sp, #0]
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	2100      	movs	r1, #0
 8010fda:	6978      	ldr	r0, [r7, #20]
 8010fdc:	f7ff ff8a 	bl	8010ef4 <xTimerGenericCommand>
 8010fe0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d112      	bne.n	801100e <prvProcessExpiredTimer+0x82>
 8010fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fec:	f383 8811 	msr	BASEPRI, r3
 8010ff0:	f3bf 8f6f 	isb	sy
 8010ff4:	f3bf 8f4f 	dsb	sy
 8010ff8:	60fb      	str	r3, [r7, #12]
 8010ffa:	e7fe      	b.n	8010ffa <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011002:	f023 0301 	bic.w	r3, r3, #1
 8011006:	b2da      	uxtb	r2, r3
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	6a1b      	ldr	r3, [r3, #32]
 8011012:	6978      	ldr	r0, [r7, #20]
 8011014:	4798      	blx	r3
}
 8011016:	bf00      	nop
 8011018:	3718      	adds	r7, #24
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	20002184 	.word	0x20002184

08011024 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801102c:	f107 0308 	add.w	r3, r7, #8
 8011030:	4618      	mov	r0, r3
 8011032:	f000 f857 	bl	80110e4 <prvGetNextExpireTime>
 8011036:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	4619      	mov	r1, r3
 801103c:	68f8      	ldr	r0, [r7, #12]
 801103e:	f000 f803 	bl	8011048 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011042:	f000 f8d5 	bl	80111f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011046:	e7f1      	b.n	801102c <prvTimerTask+0x8>

08011048 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b084      	sub	sp, #16
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011052:	f7fe ff03 	bl	800fe5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011056:	f107 0308 	add.w	r3, r7, #8
 801105a:	4618      	mov	r0, r3
 801105c:	f000 f866 	bl	801112c <prvSampleTimeNow>
 8011060:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d130      	bne.n	80110ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d10a      	bne.n	8011084 <prvProcessTimerOrBlockTask+0x3c>
 801106e:	687a      	ldr	r2, [r7, #4]
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	429a      	cmp	r2, r3
 8011074:	d806      	bhi.n	8011084 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011076:	f7fe ff37 	bl	800fee8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801107a:	68f9      	ldr	r1, [r7, #12]
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f7ff ff85 	bl	8010f8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011082:	e024      	b.n	80110ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d008      	beq.n	801109c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801108a:	4b13      	ldr	r3, [pc, #76]	; (80110d8 <prvProcessTimerOrBlockTask+0x90>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d101      	bne.n	8011098 <prvProcessTimerOrBlockTask+0x50>
 8011094:	2301      	movs	r3, #1
 8011096:	e000      	b.n	801109a <prvProcessTimerOrBlockTask+0x52>
 8011098:	2300      	movs	r3, #0
 801109a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801109c:	4b0f      	ldr	r3, [pc, #60]	; (80110dc <prvProcessTimerOrBlockTask+0x94>)
 801109e:	6818      	ldr	r0, [r3, #0]
 80110a0:	687a      	ldr	r2, [r7, #4]
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	1ad3      	subs	r3, r2, r3
 80110a6:	683a      	ldr	r2, [r7, #0]
 80110a8:	4619      	mov	r1, r3
 80110aa:	f7fe fc6d 	bl	800f988 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80110ae:	f7fe ff1b 	bl	800fee8 <xTaskResumeAll>
 80110b2:	4603      	mov	r3, r0
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d10a      	bne.n	80110ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80110b8:	4b09      	ldr	r3, [pc, #36]	; (80110e0 <prvProcessTimerOrBlockTask+0x98>)
 80110ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110be:	601a      	str	r2, [r3, #0]
 80110c0:	f3bf 8f4f 	dsb	sy
 80110c4:	f3bf 8f6f 	isb	sy
}
 80110c8:	e001      	b.n	80110ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80110ca:	f7fe ff0d 	bl	800fee8 <xTaskResumeAll>
}
 80110ce:	bf00      	nop
 80110d0:	3710      	adds	r7, #16
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	20002188 	.word	0x20002188
 80110dc:	2000218c 	.word	0x2000218c
 80110e0:	e000ed04 	.word	0xe000ed04

080110e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80110e4:	b480      	push	{r7}
 80110e6:	b085      	sub	sp, #20
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80110ec:	4b0e      	ldr	r3, [pc, #56]	; (8011128 <prvGetNextExpireTime+0x44>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d101      	bne.n	80110fa <prvGetNextExpireTime+0x16>
 80110f6:	2201      	movs	r2, #1
 80110f8:	e000      	b.n	80110fc <prvGetNextExpireTime+0x18>
 80110fa:	2200      	movs	r2, #0
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d105      	bne.n	8011114 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011108:	4b07      	ldr	r3, [pc, #28]	; (8011128 <prvGetNextExpireTime+0x44>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	60fb      	str	r3, [r7, #12]
 8011112:	e001      	b.n	8011118 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011114:	2300      	movs	r3, #0
 8011116:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011118:	68fb      	ldr	r3, [r7, #12]
}
 801111a:	4618      	mov	r0, r3
 801111c:	3714      	adds	r7, #20
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr
 8011126:	bf00      	nop
 8011128:	20002184 	.word	0x20002184

0801112c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b084      	sub	sp, #16
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011134:	f7fe ff74 	bl	8010020 <xTaskGetTickCount>
 8011138:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801113a:	4b0b      	ldr	r3, [pc, #44]	; (8011168 <prvSampleTimeNow+0x3c>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	68fa      	ldr	r2, [r7, #12]
 8011140:	429a      	cmp	r2, r3
 8011142:	d205      	bcs.n	8011150 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011144:	f000 f930 	bl	80113a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2201      	movs	r2, #1
 801114c:	601a      	str	r2, [r3, #0]
 801114e:	e002      	b.n	8011156 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2200      	movs	r2, #0
 8011154:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011156:	4a04      	ldr	r2, [pc, #16]	; (8011168 <prvSampleTimeNow+0x3c>)
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801115c:	68fb      	ldr	r3, [r7, #12]
}
 801115e:	4618      	mov	r0, r3
 8011160:	3710      	adds	r7, #16
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
 8011166:	bf00      	nop
 8011168:	20002194 	.word	0x20002194

0801116c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b086      	sub	sp, #24
 8011170:	af00      	add	r7, sp, #0
 8011172:	60f8      	str	r0, [r7, #12]
 8011174:	60b9      	str	r1, [r7, #8]
 8011176:	607a      	str	r2, [r7, #4]
 8011178:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801117a:	2300      	movs	r3, #0
 801117c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	68ba      	ldr	r2, [r7, #8]
 8011182:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	68fa      	ldr	r2, [r7, #12]
 8011188:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801118a:	68ba      	ldr	r2, [r7, #8]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	429a      	cmp	r2, r3
 8011190:	d812      	bhi.n	80111b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011192:	687a      	ldr	r2, [r7, #4]
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	1ad2      	subs	r2, r2, r3
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	699b      	ldr	r3, [r3, #24]
 801119c:	429a      	cmp	r2, r3
 801119e:	d302      	bcc.n	80111a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80111a0:	2301      	movs	r3, #1
 80111a2:	617b      	str	r3, [r7, #20]
 80111a4:	e01b      	b.n	80111de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80111a6:	4b10      	ldr	r3, [pc, #64]	; (80111e8 <prvInsertTimerInActiveList+0x7c>)
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	3304      	adds	r3, #4
 80111ae:	4619      	mov	r1, r3
 80111b0:	4610      	mov	r0, r2
 80111b2:	f7fd fb18 	bl	800e7e6 <vListInsert>
 80111b6:	e012      	b.n	80111de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80111b8:	687a      	ldr	r2, [r7, #4]
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	429a      	cmp	r2, r3
 80111be:	d206      	bcs.n	80111ce <prvInsertTimerInActiveList+0x62>
 80111c0:	68ba      	ldr	r2, [r7, #8]
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d302      	bcc.n	80111ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80111c8:	2301      	movs	r3, #1
 80111ca:	617b      	str	r3, [r7, #20]
 80111cc:	e007      	b.n	80111de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80111ce:	4b07      	ldr	r3, [pc, #28]	; (80111ec <prvInsertTimerInActiveList+0x80>)
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	3304      	adds	r3, #4
 80111d6:	4619      	mov	r1, r3
 80111d8:	4610      	mov	r0, r2
 80111da:	f7fd fb04 	bl	800e7e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80111de:	697b      	ldr	r3, [r7, #20]
}
 80111e0:	4618      	mov	r0, r3
 80111e2:	3718      	adds	r7, #24
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	20002188 	.word	0x20002188
 80111ec:	20002184 	.word	0x20002184

080111f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b08e      	sub	sp, #56	; 0x38
 80111f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80111f6:	e0c6      	b.n	8011386 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	da17      	bge.n	801122e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80111fe:	1d3b      	adds	r3, r7, #4
 8011200:	3304      	adds	r3, #4
 8011202:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011206:	2b00      	cmp	r3, #0
 8011208:	d109      	bne.n	801121e <prvProcessReceivedCommands+0x2e>
 801120a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801120e:	f383 8811 	msr	BASEPRI, r3
 8011212:	f3bf 8f6f 	isb	sy
 8011216:	f3bf 8f4f 	dsb	sy
 801121a:	61fb      	str	r3, [r7, #28]
 801121c:	e7fe      	b.n	801121c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011224:	6850      	ldr	r0, [r2, #4]
 8011226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011228:	6892      	ldr	r2, [r2, #8]
 801122a:	4611      	mov	r1, r2
 801122c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2b00      	cmp	r3, #0
 8011232:	f2c0 80a7 	blt.w	8011384 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123c:	695b      	ldr	r3, [r3, #20]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d004      	beq.n	801124c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011244:	3304      	adds	r3, #4
 8011246:	4618      	mov	r0, r3
 8011248:	f7fd fb06 	bl	800e858 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801124c:	463b      	mov	r3, r7
 801124e:	4618      	mov	r0, r3
 8011250:	f7ff ff6c 	bl	801112c <prvSampleTimeNow>
 8011254:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2b09      	cmp	r3, #9
 801125a:	f200 8094 	bhi.w	8011386 <prvProcessReceivedCommands+0x196>
 801125e:	a201      	add	r2, pc, #4	; (adr r2, 8011264 <prvProcessReceivedCommands+0x74>)
 8011260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011264:	0801128d 	.word	0x0801128d
 8011268:	0801128d 	.word	0x0801128d
 801126c:	0801128d 	.word	0x0801128d
 8011270:	080112ff 	.word	0x080112ff
 8011274:	08011313 	.word	0x08011313
 8011278:	0801135b 	.word	0x0801135b
 801127c:	0801128d 	.word	0x0801128d
 8011280:	0801128d 	.word	0x0801128d
 8011284:	080112ff 	.word	0x080112ff
 8011288:	08011313 	.word	0x08011313
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011292:	f043 0301 	orr.w	r3, r3, #1
 8011296:	b2da      	uxtb	r2, r3
 8011298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801129e:	68ba      	ldr	r2, [r7, #8]
 80112a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a2:	699b      	ldr	r3, [r3, #24]
 80112a4:	18d1      	adds	r1, r2, r3
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112ac:	f7ff ff5e 	bl	801116c <prvInsertTimerInActiveList>
 80112b0:	4603      	mov	r3, r0
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d067      	beq.n	8011386 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80112b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b8:	6a1b      	ldr	r3, [r3, #32]
 80112ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80112be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112c4:	f003 0304 	and.w	r3, r3, #4
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d05c      	beq.n	8011386 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d0:	699b      	ldr	r3, [r3, #24]
 80112d2:	441a      	add	r2, r3
 80112d4:	2300      	movs	r3, #0
 80112d6:	9300      	str	r3, [sp, #0]
 80112d8:	2300      	movs	r3, #0
 80112da:	2100      	movs	r1, #0
 80112dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112de:	f7ff fe09 	bl	8010ef4 <xTimerGenericCommand>
 80112e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80112e4:	6a3b      	ldr	r3, [r7, #32]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d14d      	bne.n	8011386 <prvProcessReceivedCommands+0x196>
 80112ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ee:	f383 8811 	msr	BASEPRI, r3
 80112f2:	f3bf 8f6f 	isb	sy
 80112f6:	f3bf 8f4f 	dsb	sy
 80112fa:	61bb      	str	r3, [r7, #24]
 80112fc:	e7fe      	b.n	80112fc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80112fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011304:	f023 0301 	bic.w	r3, r3, #1
 8011308:	b2da      	uxtb	r2, r3
 801130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801130c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011310:	e039      	b.n	8011386 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011318:	f043 0301 	orr.w	r3, r3, #1
 801131c:	b2da      	uxtb	r2, r3
 801131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011320:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011324:	68ba      	ldr	r2, [r7, #8]
 8011326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011328:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801132a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801132c:	699b      	ldr	r3, [r3, #24]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d109      	bne.n	8011346 <prvProcessReceivedCommands+0x156>
 8011332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011336:	f383 8811 	msr	BASEPRI, r3
 801133a:	f3bf 8f6f 	isb	sy
 801133e:	f3bf 8f4f 	dsb	sy
 8011342:	617b      	str	r3, [r7, #20]
 8011344:	e7fe      	b.n	8011344 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011348:	699a      	ldr	r2, [r3, #24]
 801134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134c:	18d1      	adds	r1, r2, r3
 801134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011354:	f7ff ff0a 	bl	801116c <prvInsertTimerInActiveList>
					break;
 8011358:	e015      	b.n	8011386 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801135c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011360:	f003 0302 	and.w	r3, r3, #2
 8011364:	2b00      	cmp	r3, #0
 8011366:	d103      	bne.n	8011370 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8011368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801136a:	f000 fbc3 	bl	8011af4 <vPortFree>
 801136e:	e00a      	b.n	8011386 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011372:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011376:	f023 0301 	bic.w	r3, r3, #1
 801137a:	b2da      	uxtb	r2, r3
 801137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801137e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011382:	e000      	b.n	8011386 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011384:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011386:	4b07      	ldr	r3, [pc, #28]	; (80113a4 <prvProcessReceivedCommands+0x1b4>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	1d39      	adds	r1, r7, #4
 801138c:	2200      	movs	r2, #0
 801138e:	4618      	mov	r0, r3
 8011390:	f7fd fefc 	bl	800f18c <xQueueReceive>
 8011394:	4603      	mov	r3, r0
 8011396:	2b00      	cmp	r3, #0
 8011398:	f47f af2e 	bne.w	80111f8 <prvProcessReceivedCommands+0x8>
	}
}
 801139c:	bf00      	nop
 801139e:	3730      	adds	r7, #48	; 0x30
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	2000218c 	.word	0x2000218c

080113a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b088      	sub	sp, #32
 80113ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80113ae:	e047      	b.n	8011440 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80113b0:	4b2d      	ldr	r3, [pc, #180]	; (8011468 <prvSwitchTimerLists+0xc0>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	68db      	ldr	r3, [r3, #12]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113ba:	4b2b      	ldr	r3, [pc, #172]	; (8011468 <prvSwitchTimerLists+0xc0>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	3304      	adds	r3, #4
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7fd fa45 	bl	800e858 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	6a1b      	ldr	r3, [r3, #32]
 80113d2:	68f8      	ldr	r0, [r7, #12]
 80113d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80113dc:	f003 0304 	and.w	r3, r3, #4
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d02d      	beq.n	8011440 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	699b      	ldr	r3, [r3, #24]
 80113e8:	693a      	ldr	r2, [r7, #16]
 80113ea:	4413      	add	r3, r2
 80113ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80113ee:	68ba      	ldr	r2, [r7, #8]
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d90e      	bls.n	8011414 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	68ba      	ldr	r2, [r7, #8]
 80113fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	68fa      	ldr	r2, [r7, #12]
 8011400:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011402:	4b19      	ldr	r3, [pc, #100]	; (8011468 <prvSwitchTimerLists+0xc0>)
 8011404:	681a      	ldr	r2, [r3, #0]
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	3304      	adds	r3, #4
 801140a:	4619      	mov	r1, r3
 801140c:	4610      	mov	r0, r2
 801140e:	f7fd f9ea 	bl	800e7e6 <vListInsert>
 8011412:	e015      	b.n	8011440 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011414:	2300      	movs	r3, #0
 8011416:	9300      	str	r3, [sp, #0]
 8011418:	2300      	movs	r3, #0
 801141a:	693a      	ldr	r2, [r7, #16]
 801141c:	2100      	movs	r1, #0
 801141e:	68f8      	ldr	r0, [r7, #12]
 8011420:	f7ff fd68 	bl	8010ef4 <xTimerGenericCommand>
 8011424:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d109      	bne.n	8011440 <prvSwitchTimerLists+0x98>
 801142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011430:	f383 8811 	msr	BASEPRI, r3
 8011434:	f3bf 8f6f 	isb	sy
 8011438:	f3bf 8f4f 	dsb	sy
 801143c:	603b      	str	r3, [r7, #0]
 801143e:	e7fe      	b.n	801143e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011440:	4b09      	ldr	r3, [pc, #36]	; (8011468 <prvSwitchTimerLists+0xc0>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d1b2      	bne.n	80113b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801144a:	4b07      	ldr	r3, [pc, #28]	; (8011468 <prvSwitchTimerLists+0xc0>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011450:	4b06      	ldr	r3, [pc, #24]	; (801146c <prvSwitchTimerLists+0xc4>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	4a04      	ldr	r2, [pc, #16]	; (8011468 <prvSwitchTimerLists+0xc0>)
 8011456:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011458:	4a04      	ldr	r2, [pc, #16]	; (801146c <prvSwitchTimerLists+0xc4>)
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	6013      	str	r3, [r2, #0]
}
 801145e:	bf00      	nop
 8011460:	3718      	adds	r7, #24
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
 8011466:	bf00      	nop
 8011468:	20002184 	.word	0x20002184
 801146c:	20002188 	.word	0x20002188

08011470 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b082      	sub	sp, #8
 8011474:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011476:	f000 f961 	bl	801173c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801147a:	4b15      	ldr	r3, [pc, #84]	; (80114d0 <prvCheckForValidListAndQueue+0x60>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d120      	bne.n	80114c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011482:	4814      	ldr	r0, [pc, #80]	; (80114d4 <prvCheckForValidListAndQueue+0x64>)
 8011484:	f7fd f95e 	bl	800e744 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011488:	4813      	ldr	r0, [pc, #76]	; (80114d8 <prvCheckForValidListAndQueue+0x68>)
 801148a:	f7fd f95b 	bl	800e744 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801148e:	4b13      	ldr	r3, [pc, #76]	; (80114dc <prvCheckForValidListAndQueue+0x6c>)
 8011490:	4a10      	ldr	r2, [pc, #64]	; (80114d4 <prvCheckForValidListAndQueue+0x64>)
 8011492:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011494:	4b12      	ldr	r3, [pc, #72]	; (80114e0 <prvCheckForValidListAndQueue+0x70>)
 8011496:	4a10      	ldr	r2, [pc, #64]	; (80114d8 <prvCheckForValidListAndQueue+0x68>)
 8011498:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801149a:	2300      	movs	r3, #0
 801149c:	9300      	str	r3, [sp, #0]
 801149e:	4b11      	ldr	r3, [pc, #68]	; (80114e4 <prvCheckForValidListAndQueue+0x74>)
 80114a0:	4a11      	ldr	r2, [pc, #68]	; (80114e8 <prvCheckForValidListAndQueue+0x78>)
 80114a2:	2110      	movs	r1, #16
 80114a4:	200a      	movs	r0, #10
 80114a6:	f7fd fa69 	bl	800e97c <xQueueGenericCreateStatic>
 80114aa:	4602      	mov	r2, r0
 80114ac:	4b08      	ldr	r3, [pc, #32]	; (80114d0 <prvCheckForValidListAndQueue+0x60>)
 80114ae:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80114b0:	4b07      	ldr	r3, [pc, #28]	; (80114d0 <prvCheckForValidListAndQueue+0x60>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d005      	beq.n	80114c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80114b8:	4b05      	ldr	r3, [pc, #20]	; (80114d0 <prvCheckForValidListAndQueue+0x60>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	490b      	ldr	r1, [pc, #44]	; (80114ec <prvCheckForValidListAndQueue+0x7c>)
 80114be:	4618      	mov	r0, r3
 80114c0:	f7fe fa10 	bl	800f8e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80114c4:	f000 f968 	bl	8011798 <vPortExitCritical>
}
 80114c8:	bf00      	nop
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}
 80114ce:	bf00      	nop
 80114d0:	2000218c 	.word	0x2000218c
 80114d4:	2000215c 	.word	0x2000215c
 80114d8:	20002170 	.word	0x20002170
 80114dc:	20002184 	.word	0x20002184
 80114e0:	20002188 	.word	0x20002188
 80114e4:	20002238 	.word	0x20002238
 80114e8:	20002198 	.word	0x20002198
 80114ec:	0801394c 	.word	0x0801394c

080114f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80114f0:	b480      	push	{r7}
 80114f2:	b085      	sub	sp, #20
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	60b9      	str	r1, [r7, #8]
 80114fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	3b04      	subs	r3, #4
 8011500:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	3b04      	subs	r3, #4
 801150e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	f023 0201 	bic.w	r2, r3, #1
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	3b04      	subs	r3, #4
 801151e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011520:	4a0c      	ldr	r2, [pc, #48]	; (8011554 <pxPortInitialiseStack+0x64>)
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	3b14      	subs	r3, #20
 801152a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	3b04      	subs	r3, #4
 8011536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	f06f 0202 	mvn.w	r2, #2
 801153e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	3b20      	subs	r3, #32
 8011544:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011546:	68fb      	ldr	r3, [r7, #12]
}
 8011548:	4618      	mov	r0, r3
 801154a:	3714      	adds	r7, #20
 801154c:	46bd      	mov	sp, r7
 801154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011552:	4770      	bx	lr
 8011554:	08011559 	.word	0x08011559

08011558 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011558:	b480      	push	{r7}
 801155a:	b085      	sub	sp, #20
 801155c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801155e:	2300      	movs	r3, #0
 8011560:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011562:	4b11      	ldr	r3, [pc, #68]	; (80115a8 <prvTaskExitError+0x50>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f1b3 3fff 	cmp.w	r3, #4294967295
 801156a:	d009      	beq.n	8011580 <prvTaskExitError+0x28>
 801156c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011570:	f383 8811 	msr	BASEPRI, r3
 8011574:	f3bf 8f6f 	isb	sy
 8011578:	f3bf 8f4f 	dsb	sy
 801157c:	60fb      	str	r3, [r7, #12]
 801157e:	e7fe      	b.n	801157e <prvTaskExitError+0x26>
 8011580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011584:	f383 8811 	msr	BASEPRI, r3
 8011588:	f3bf 8f6f 	isb	sy
 801158c:	f3bf 8f4f 	dsb	sy
 8011590:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011592:	bf00      	nop
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d0fc      	beq.n	8011594 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801159a:	bf00      	nop
 801159c:	3714      	adds	r7, #20
 801159e:	46bd      	mov	sp, r7
 80115a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a4:	4770      	bx	lr
 80115a6:	bf00      	nop
 80115a8:	20000138 	.word	0x20000138
 80115ac:	00000000 	.word	0x00000000

080115b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80115b0:	4b07      	ldr	r3, [pc, #28]	; (80115d0 <pxCurrentTCBConst2>)
 80115b2:	6819      	ldr	r1, [r3, #0]
 80115b4:	6808      	ldr	r0, [r1, #0]
 80115b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ba:	f380 8809 	msr	PSP, r0
 80115be:	f3bf 8f6f 	isb	sy
 80115c2:	f04f 0000 	mov.w	r0, #0
 80115c6:	f380 8811 	msr	BASEPRI, r0
 80115ca:	4770      	bx	lr
 80115cc:	f3af 8000 	nop.w

080115d0 <pxCurrentTCBConst2>:
 80115d0:	20001c5c 	.word	0x20001c5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80115d4:	bf00      	nop
 80115d6:	bf00      	nop

080115d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80115d8:	4808      	ldr	r0, [pc, #32]	; (80115fc <prvPortStartFirstTask+0x24>)
 80115da:	6800      	ldr	r0, [r0, #0]
 80115dc:	6800      	ldr	r0, [r0, #0]
 80115de:	f380 8808 	msr	MSP, r0
 80115e2:	f04f 0000 	mov.w	r0, #0
 80115e6:	f380 8814 	msr	CONTROL, r0
 80115ea:	b662      	cpsie	i
 80115ec:	b661      	cpsie	f
 80115ee:	f3bf 8f4f 	dsb	sy
 80115f2:	f3bf 8f6f 	isb	sy
 80115f6:	df00      	svc	0
 80115f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80115fa:	bf00      	nop
 80115fc:	e000ed08 	.word	0xe000ed08

08011600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b086      	sub	sp, #24
 8011604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011606:	4b44      	ldr	r3, [pc, #272]	; (8011718 <xPortStartScheduler+0x118>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	4a44      	ldr	r2, [pc, #272]	; (801171c <xPortStartScheduler+0x11c>)
 801160c:	4293      	cmp	r3, r2
 801160e:	d109      	bne.n	8011624 <xPortStartScheduler+0x24>
 8011610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011614:	f383 8811 	msr	BASEPRI, r3
 8011618:	f3bf 8f6f 	isb	sy
 801161c:	f3bf 8f4f 	dsb	sy
 8011620:	613b      	str	r3, [r7, #16]
 8011622:	e7fe      	b.n	8011622 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011624:	4b3c      	ldr	r3, [pc, #240]	; (8011718 <xPortStartScheduler+0x118>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4a3d      	ldr	r2, [pc, #244]	; (8011720 <xPortStartScheduler+0x120>)
 801162a:	4293      	cmp	r3, r2
 801162c:	d109      	bne.n	8011642 <xPortStartScheduler+0x42>
 801162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011632:	f383 8811 	msr	BASEPRI, r3
 8011636:	f3bf 8f6f 	isb	sy
 801163a:	f3bf 8f4f 	dsb	sy
 801163e:	60fb      	str	r3, [r7, #12]
 8011640:	e7fe      	b.n	8011640 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011642:	4b38      	ldr	r3, [pc, #224]	; (8011724 <xPortStartScheduler+0x124>)
 8011644:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	781b      	ldrb	r3, [r3, #0]
 801164a:	b2db      	uxtb	r3, r3
 801164c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	22ff      	movs	r2, #255	; 0xff
 8011652:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	b2db      	uxtb	r3, r3
 801165a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801165c:	78fb      	ldrb	r3, [r7, #3]
 801165e:	b2db      	uxtb	r3, r3
 8011660:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011664:	b2da      	uxtb	r2, r3
 8011666:	4b30      	ldr	r3, [pc, #192]	; (8011728 <xPortStartScheduler+0x128>)
 8011668:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801166a:	4b30      	ldr	r3, [pc, #192]	; (801172c <xPortStartScheduler+0x12c>)
 801166c:	2207      	movs	r2, #7
 801166e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011670:	e009      	b.n	8011686 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011672:	4b2e      	ldr	r3, [pc, #184]	; (801172c <xPortStartScheduler+0x12c>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	3b01      	subs	r3, #1
 8011678:	4a2c      	ldr	r2, [pc, #176]	; (801172c <xPortStartScheduler+0x12c>)
 801167a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801167c:	78fb      	ldrb	r3, [r7, #3]
 801167e:	b2db      	uxtb	r3, r3
 8011680:	005b      	lsls	r3, r3, #1
 8011682:	b2db      	uxtb	r3, r3
 8011684:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011686:	78fb      	ldrb	r3, [r7, #3]
 8011688:	b2db      	uxtb	r3, r3
 801168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801168e:	2b80      	cmp	r3, #128	; 0x80
 8011690:	d0ef      	beq.n	8011672 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011692:	4b26      	ldr	r3, [pc, #152]	; (801172c <xPortStartScheduler+0x12c>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	f1c3 0307 	rsb	r3, r3, #7
 801169a:	2b04      	cmp	r3, #4
 801169c:	d009      	beq.n	80116b2 <xPortStartScheduler+0xb2>
 801169e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a2:	f383 8811 	msr	BASEPRI, r3
 80116a6:	f3bf 8f6f 	isb	sy
 80116aa:	f3bf 8f4f 	dsb	sy
 80116ae:	60bb      	str	r3, [r7, #8]
 80116b0:	e7fe      	b.n	80116b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80116b2:	4b1e      	ldr	r3, [pc, #120]	; (801172c <xPortStartScheduler+0x12c>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	021b      	lsls	r3, r3, #8
 80116b8:	4a1c      	ldr	r2, [pc, #112]	; (801172c <xPortStartScheduler+0x12c>)
 80116ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80116bc:	4b1b      	ldr	r3, [pc, #108]	; (801172c <xPortStartScheduler+0x12c>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80116c4:	4a19      	ldr	r2, [pc, #100]	; (801172c <xPortStartScheduler+0x12c>)
 80116c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	b2da      	uxtb	r2, r3
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80116d0:	4b17      	ldr	r3, [pc, #92]	; (8011730 <xPortStartScheduler+0x130>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	4a16      	ldr	r2, [pc, #88]	; (8011730 <xPortStartScheduler+0x130>)
 80116d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80116da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80116dc:	4b14      	ldr	r3, [pc, #80]	; (8011730 <xPortStartScheduler+0x130>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	4a13      	ldr	r2, [pc, #76]	; (8011730 <xPortStartScheduler+0x130>)
 80116e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80116e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80116e8:	f000 f8d6 	bl	8011898 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80116ec:	4b11      	ldr	r3, [pc, #68]	; (8011734 <xPortStartScheduler+0x134>)
 80116ee:	2200      	movs	r2, #0
 80116f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80116f2:	f000 f8f5 	bl	80118e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80116f6:	4b10      	ldr	r3, [pc, #64]	; (8011738 <xPortStartScheduler+0x138>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	4a0f      	ldr	r2, [pc, #60]	; (8011738 <xPortStartScheduler+0x138>)
 80116fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011700:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011702:	f7ff ff69 	bl	80115d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011706:	f7fe fd53 	bl	80101b0 <vTaskSwitchContext>
	prvTaskExitError();
 801170a:	f7ff ff25 	bl	8011558 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801170e:	2300      	movs	r3, #0
}
 8011710:	4618      	mov	r0, r3
 8011712:	3718      	adds	r7, #24
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	e000ed00 	.word	0xe000ed00
 801171c:	410fc271 	.word	0x410fc271
 8011720:	410fc270 	.word	0x410fc270
 8011724:	e000e400 	.word	0xe000e400
 8011728:	20002288 	.word	0x20002288
 801172c:	2000228c 	.word	0x2000228c
 8011730:	e000ed20 	.word	0xe000ed20
 8011734:	20000138 	.word	0x20000138
 8011738:	e000ef34 	.word	0xe000ef34

0801173c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011746:	f383 8811 	msr	BASEPRI, r3
 801174a:	f3bf 8f6f 	isb	sy
 801174e:	f3bf 8f4f 	dsb	sy
 8011752:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011754:	4b0e      	ldr	r3, [pc, #56]	; (8011790 <vPortEnterCritical+0x54>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	3301      	adds	r3, #1
 801175a:	4a0d      	ldr	r2, [pc, #52]	; (8011790 <vPortEnterCritical+0x54>)
 801175c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801175e:	4b0c      	ldr	r3, [pc, #48]	; (8011790 <vPortEnterCritical+0x54>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2b01      	cmp	r3, #1
 8011764:	d10e      	bne.n	8011784 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011766:	4b0b      	ldr	r3, [pc, #44]	; (8011794 <vPortEnterCritical+0x58>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	b2db      	uxtb	r3, r3
 801176c:	2b00      	cmp	r3, #0
 801176e:	d009      	beq.n	8011784 <vPortEnterCritical+0x48>
 8011770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011774:	f383 8811 	msr	BASEPRI, r3
 8011778:	f3bf 8f6f 	isb	sy
 801177c:	f3bf 8f4f 	dsb	sy
 8011780:	603b      	str	r3, [r7, #0]
 8011782:	e7fe      	b.n	8011782 <vPortEnterCritical+0x46>
	}
}
 8011784:	bf00      	nop
 8011786:	370c      	adds	r7, #12
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr
 8011790:	20000138 	.word	0x20000138
 8011794:	e000ed04 	.word	0xe000ed04

08011798 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801179e:	4b11      	ldr	r3, [pc, #68]	; (80117e4 <vPortExitCritical+0x4c>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d109      	bne.n	80117ba <vPortExitCritical+0x22>
 80117a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117aa:	f383 8811 	msr	BASEPRI, r3
 80117ae:	f3bf 8f6f 	isb	sy
 80117b2:	f3bf 8f4f 	dsb	sy
 80117b6:	607b      	str	r3, [r7, #4]
 80117b8:	e7fe      	b.n	80117b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80117ba:	4b0a      	ldr	r3, [pc, #40]	; (80117e4 <vPortExitCritical+0x4c>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	3b01      	subs	r3, #1
 80117c0:	4a08      	ldr	r2, [pc, #32]	; (80117e4 <vPortExitCritical+0x4c>)
 80117c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80117c4:	4b07      	ldr	r3, [pc, #28]	; (80117e4 <vPortExitCritical+0x4c>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d104      	bne.n	80117d6 <vPortExitCritical+0x3e>
 80117cc:	2300      	movs	r3, #0
 80117ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80117d6:	bf00      	nop
 80117d8:	370c      	adds	r7, #12
 80117da:	46bd      	mov	sp, r7
 80117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e0:	4770      	bx	lr
 80117e2:	bf00      	nop
 80117e4:	20000138 	.word	0x20000138
	...

080117f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80117f0:	f3ef 8009 	mrs	r0, PSP
 80117f4:	f3bf 8f6f 	isb	sy
 80117f8:	4b15      	ldr	r3, [pc, #84]	; (8011850 <pxCurrentTCBConst>)
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	f01e 0f10 	tst.w	lr, #16
 8011800:	bf08      	it	eq
 8011802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801180a:	6010      	str	r0, [r2, #0]
 801180c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011814:	f380 8811 	msr	BASEPRI, r0
 8011818:	f3bf 8f4f 	dsb	sy
 801181c:	f3bf 8f6f 	isb	sy
 8011820:	f7fe fcc6 	bl	80101b0 <vTaskSwitchContext>
 8011824:	f04f 0000 	mov.w	r0, #0
 8011828:	f380 8811 	msr	BASEPRI, r0
 801182c:	bc09      	pop	{r0, r3}
 801182e:	6819      	ldr	r1, [r3, #0]
 8011830:	6808      	ldr	r0, [r1, #0]
 8011832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011836:	f01e 0f10 	tst.w	lr, #16
 801183a:	bf08      	it	eq
 801183c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011840:	f380 8809 	msr	PSP, r0
 8011844:	f3bf 8f6f 	isb	sy
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop
 801184c:	f3af 8000 	nop.w

08011850 <pxCurrentTCBConst>:
 8011850:	20001c5c 	.word	0x20001c5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011854:	bf00      	nop
 8011856:	bf00      	nop

08011858 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
	__asm volatile
 801185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011862:	f383 8811 	msr	BASEPRI, r3
 8011866:	f3bf 8f6f 	isb	sy
 801186a:	f3bf 8f4f 	dsb	sy
 801186e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011870:	f7fe fbe6 	bl	8010040 <xTaskIncrementTick>
 8011874:	4603      	mov	r3, r0
 8011876:	2b00      	cmp	r3, #0
 8011878:	d003      	beq.n	8011882 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801187a:	4b06      	ldr	r3, [pc, #24]	; (8011894 <SysTick_Handler+0x3c>)
 801187c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011880:	601a      	str	r2, [r3, #0]
 8011882:	2300      	movs	r3, #0
 8011884:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801188c:	bf00      	nop
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	e000ed04 	.word	0xe000ed04

08011898 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011898:	b480      	push	{r7}
 801189a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801189c:	4b0b      	ldr	r3, [pc, #44]	; (80118cc <vPortSetupTimerInterrupt+0x34>)
 801189e:	2200      	movs	r2, #0
 80118a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80118a2:	4b0b      	ldr	r3, [pc, #44]	; (80118d0 <vPortSetupTimerInterrupt+0x38>)
 80118a4:	2200      	movs	r2, #0
 80118a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80118a8:	4b0a      	ldr	r3, [pc, #40]	; (80118d4 <vPortSetupTimerInterrupt+0x3c>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	4a0a      	ldr	r2, [pc, #40]	; (80118d8 <vPortSetupTimerInterrupt+0x40>)
 80118ae:	fba2 2303 	umull	r2, r3, r2, r3
 80118b2:	099b      	lsrs	r3, r3, #6
 80118b4:	4a09      	ldr	r2, [pc, #36]	; (80118dc <vPortSetupTimerInterrupt+0x44>)
 80118b6:	3b01      	subs	r3, #1
 80118b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80118ba:	4b04      	ldr	r3, [pc, #16]	; (80118cc <vPortSetupTimerInterrupt+0x34>)
 80118bc:	2207      	movs	r2, #7
 80118be:	601a      	str	r2, [r3, #0]
}
 80118c0:	bf00      	nop
 80118c2:	46bd      	mov	sp, r7
 80118c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	e000e010 	.word	0xe000e010
 80118d0:	e000e018 	.word	0xe000e018
 80118d4:	2000001c 	.word	0x2000001c
 80118d8:	10624dd3 	.word	0x10624dd3
 80118dc:	e000e014 	.word	0xe000e014

080118e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80118e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80118f0 <vPortEnableVFP+0x10>
 80118e4:	6801      	ldr	r1, [r0, #0]
 80118e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80118ea:	6001      	str	r1, [r0, #0]
 80118ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80118ee:	bf00      	nop
 80118f0:	e000ed88 	.word	0xe000ed88

080118f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80118f4:	b480      	push	{r7}
 80118f6:	b085      	sub	sp, #20
 80118f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80118fa:	f3ef 8305 	mrs	r3, IPSR
 80118fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2b0f      	cmp	r3, #15
 8011904:	d913      	bls.n	801192e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011906:	4a16      	ldr	r2, [pc, #88]	; (8011960 <vPortValidateInterruptPriority+0x6c>)
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	4413      	add	r3, r2
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011910:	4b14      	ldr	r3, [pc, #80]	; (8011964 <vPortValidateInterruptPriority+0x70>)
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	7afa      	ldrb	r2, [r7, #11]
 8011916:	429a      	cmp	r2, r3
 8011918:	d209      	bcs.n	801192e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801191a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191e:	f383 8811 	msr	BASEPRI, r3
 8011922:	f3bf 8f6f 	isb	sy
 8011926:	f3bf 8f4f 	dsb	sy
 801192a:	607b      	str	r3, [r7, #4]
 801192c:	e7fe      	b.n	801192c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801192e:	4b0e      	ldr	r3, [pc, #56]	; (8011968 <vPortValidateInterruptPriority+0x74>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011936:	4b0d      	ldr	r3, [pc, #52]	; (801196c <vPortValidateInterruptPriority+0x78>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	429a      	cmp	r2, r3
 801193c:	d909      	bls.n	8011952 <vPortValidateInterruptPriority+0x5e>
 801193e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011942:	f383 8811 	msr	BASEPRI, r3
 8011946:	f3bf 8f6f 	isb	sy
 801194a:	f3bf 8f4f 	dsb	sy
 801194e:	603b      	str	r3, [r7, #0]
 8011950:	e7fe      	b.n	8011950 <vPortValidateInterruptPriority+0x5c>
	}
 8011952:	bf00      	nop
 8011954:	3714      	adds	r7, #20
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr
 801195e:	bf00      	nop
 8011960:	e000e3f0 	.word	0xe000e3f0
 8011964:	20002288 	.word	0x20002288
 8011968:	e000ed0c 	.word	0xe000ed0c
 801196c:	2000228c 	.word	0x2000228c

08011970 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b08a      	sub	sp, #40	; 0x28
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011978:	2300      	movs	r3, #0
 801197a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801197c:	f7fe fa6e 	bl	800fe5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011980:	4b57      	ldr	r3, [pc, #348]	; (8011ae0 <pvPortMalloc+0x170>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d101      	bne.n	801198c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011988:	f000 f90c 	bl	8011ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801198c:	4b55      	ldr	r3, [pc, #340]	; (8011ae4 <pvPortMalloc+0x174>)
 801198e:	681a      	ldr	r2, [r3, #0]
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	4013      	ands	r3, r2
 8011994:	2b00      	cmp	r3, #0
 8011996:	f040 808c 	bne.w	8011ab2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d01c      	beq.n	80119da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80119a0:	2208      	movs	r2, #8
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	4413      	add	r3, r2
 80119a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f003 0307 	and.w	r3, r3, #7
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d013      	beq.n	80119da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f023 0307 	bic.w	r3, r3, #7
 80119b8:	3308      	adds	r3, #8
 80119ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f003 0307 	and.w	r3, r3, #7
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d009      	beq.n	80119da <pvPortMalloc+0x6a>
 80119c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ca:	f383 8811 	msr	BASEPRI, r3
 80119ce:	f3bf 8f6f 	isb	sy
 80119d2:	f3bf 8f4f 	dsb	sy
 80119d6:	617b      	str	r3, [r7, #20]
 80119d8:	e7fe      	b.n	80119d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d068      	beq.n	8011ab2 <pvPortMalloc+0x142>
 80119e0:	4b41      	ldr	r3, [pc, #260]	; (8011ae8 <pvPortMalloc+0x178>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	687a      	ldr	r2, [r7, #4]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d863      	bhi.n	8011ab2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80119ea:	4b40      	ldr	r3, [pc, #256]	; (8011aec <pvPortMalloc+0x17c>)
 80119ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80119ee:	4b3f      	ldr	r3, [pc, #252]	; (8011aec <pvPortMalloc+0x17c>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119f4:	e004      	b.n	8011a00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80119f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80119fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d903      	bls.n	8011a12 <pvPortMalloc+0xa2>
 8011a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d1f1      	bne.n	80119f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011a12:	4b33      	ldr	r3, [pc, #204]	; (8011ae0 <pvPortMalloc+0x170>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d04a      	beq.n	8011ab2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011a1c:	6a3b      	ldr	r3, [r7, #32]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	2208      	movs	r2, #8
 8011a22:	4413      	add	r3, r2
 8011a24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a28:	681a      	ldr	r2, [r3, #0]
 8011a2a:	6a3b      	ldr	r3, [r7, #32]
 8011a2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a30:	685a      	ldr	r2, [r3, #4]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	1ad2      	subs	r2, r2, r3
 8011a36:	2308      	movs	r3, #8
 8011a38:	005b      	lsls	r3, r3, #1
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d91e      	bls.n	8011a7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	4413      	add	r3, r2
 8011a44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a46:	69bb      	ldr	r3, [r7, #24]
 8011a48:	f003 0307 	and.w	r3, r3, #7
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d009      	beq.n	8011a64 <pvPortMalloc+0xf4>
 8011a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a54:	f383 8811 	msr	BASEPRI, r3
 8011a58:	f3bf 8f6f 	isb	sy
 8011a5c:	f3bf 8f4f 	dsb	sy
 8011a60:	613b      	str	r3, [r7, #16]
 8011a62:	e7fe      	b.n	8011a62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a66:	685a      	ldr	r2, [r3, #4]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	1ad2      	subs	r2, r2, r3
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a72:	687a      	ldr	r2, [r7, #4]
 8011a74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011a76:	69b8      	ldr	r0, [r7, #24]
 8011a78:	f000 f8f6 	bl	8011c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011a7c:	4b1a      	ldr	r3, [pc, #104]	; (8011ae8 <pvPortMalloc+0x178>)
 8011a7e:	681a      	ldr	r2, [r3, #0]
 8011a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	1ad3      	subs	r3, r2, r3
 8011a86:	4a18      	ldr	r2, [pc, #96]	; (8011ae8 <pvPortMalloc+0x178>)
 8011a88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011a8a:	4b17      	ldr	r3, [pc, #92]	; (8011ae8 <pvPortMalloc+0x178>)
 8011a8c:	681a      	ldr	r2, [r3, #0]
 8011a8e:	4b18      	ldr	r3, [pc, #96]	; (8011af0 <pvPortMalloc+0x180>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d203      	bcs.n	8011a9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011a96:	4b14      	ldr	r3, [pc, #80]	; (8011ae8 <pvPortMalloc+0x178>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	4a15      	ldr	r2, [pc, #84]	; (8011af0 <pvPortMalloc+0x180>)
 8011a9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa0:	685a      	ldr	r2, [r3, #4]
 8011aa2:	4b10      	ldr	r3, [pc, #64]	; (8011ae4 <pvPortMalloc+0x174>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	431a      	orrs	r2, r3
 8011aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aae:	2200      	movs	r2, #0
 8011ab0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011ab2:	f7fe fa19 	bl	800fee8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	f003 0307 	and.w	r3, r3, #7
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d009      	beq.n	8011ad4 <pvPortMalloc+0x164>
 8011ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ac4:	f383 8811 	msr	BASEPRI, r3
 8011ac8:	f3bf 8f6f 	isb	sy
 8011acc:	f3bf 8f4f 	dsb	sy
 8011ad0:	60fb      	str	r3, [r7, #12]
 8011ad2:	e7fe      	b.n	8011ad2 <pvPortMalloc+0x162>
	return pvReturn;
 8011ad4:	69fb      	ldr	r3, [r7, #28]
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3728      	adds	r7, #40	; 0x28
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	200049a8 	.word	0x200049a8
 8011ae4:	200049b4 	.word	0x200049b4
 8011ae8:	200049ac 	.word	0x200049ac
 8011aec:	200049a0 	.word	0x200049a0
 8011af0:	200049b0 	.word	0x200049b0

08011af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b086      	sub	sp, #24
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d046      	beq.n	8011b94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011b06:	2308      	movs	r3, #8
 8011b08:	425b      	negs	r3, r3
 8011b0a:	697a      	ldr	r2, [r7, #20]
 8011b0c:	4413      	add	r3, r2
 8011b0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	685a      	ldr	r2, [r3, #4]
 8011b18:	4b20      	ldr	r3, [pc, #128]	; (8011b9c <vPortFree+0xa8>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	4013      	ands	r3, r2
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d109      	bne.n	8011b36 <vPortFree+0x42>
 8011b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b26:	f383 8811 	msr	BASEPRI, r3
 8011b2a:	f3bf 8f6f 	isb	sy
 8011b2e:	f3bf 8f4f 	dsb	sy
 8011b32:	60fb      	str	r3, [r7, #12]
 8011b34:	e7fe      	b.n	8011b34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d009      	beq.n	8011b52 <vPortFree+0x5e>
 8011b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b42:	f383 8811 	msr	BASEPRI, r3
 8011b46:	f3bf 8f6f 	isb	sy
 8011b4a:	f3bf 8f4f 	dsb	sy
 8011b4e:	60bb      	str	r3, [r7, #8]
 8011b50:	e7fe      	b.n	8011b50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	685a      	ldr	r2, [r3, #4]
 8011b56:	4b11      	ldr	r3, [pc, #68]	; (8011b9c <vPortFree+0xa8>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	4013      	ands	r3, r2
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d019      	beq.n	8011b94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d115      	bne.n	8011b94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b68:	693b      	ldr	r3, [r7, #16]
 8011b6a:	685a      	ldr	r2, [r3, #4]
 8011b6c:	4b0b      	ldr	r3, [pc, #44]	; (8011b9c <vPortFree+0xa8>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	43db      	mvns	r3, r3
 8011b72:	401a      	ands	r2, r3
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011b78:	f7fe f970 	bl	800fe5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	685a      	ldr	r2, [r3, #4]
 8011b80:	4b07      	ldr	r3, [pc, #28]	; (8011ba0 <vPortFree+0xac>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	4413      	add	r3, r2
 8011b86:	4a06      	ldr	r2, [pc, #24]	; (8011ba0 <vPortFree+0xac>)
 8011b88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011b8a:	6938      	ldr	r0, [r7, #16]
 8011b8c:	f000 f86c 	bl	8011c68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011b90:	f7fe f9aa 	bl	800fee8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011b94:	bf00      	nop
 8011b96:	3718      	adds	r7, #24
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	200049b4 	.word	0x200049b4
 8011ba0:	200049ac 	.word	0x200049ac

08011ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b085      	sub	sp, #20
 8011ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011baa:	f242 7310 	movw	r3, #10000	; 0x2710
 8011bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011bb0:	4b27      	ldr	r3, [pc, #156]	; (8011c50 <prvHeapInit+0xac>)
 8011bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	f003 0307 	and.w	r3, r3, #7
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d00c      	beq.n	8011bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	3307      	adds	r3, #7
 8011bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	f023 0307 	bic.w	r3, r3, #7
 8011bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011bcc:	68ba      	ldr	r2, [r7, #8]
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	1ad3      	subs	r3, r2, r3
 8011bd2:	4a1f      	ldr	r2, [pc, #124]	; (8011c50 <prvHeapInit+0xac>)
 8011bd4:	4413      	add	r3, r2
 8011bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011bdc:	4a1d      	ldr	r2, [pc, #116]	; (8011c54 <prvHeapInit+0xb0>)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011be2:	4b1c      	ldr	r3, [pc, #112]	; (8011c54 <prvHeapInit+0xb0>)
 8011be4:	2200      	movs	r2, #0
 8011be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	68ba      	ldr	r2, [r7, #8]
 8011bec:	4413      	add	r3, r2
 8011bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011bf0:	2208      	movs	r2, #8
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	1a9b      	subs	r3, r3, r2
 8011bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	f023 0307 	bic.w	r3, r3, #7
 8011bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	4a15      	ldr	r2, [pc, #84]	; (8011c58 <prvHeapInit+0xb4>)
 8011c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011c06:	4b14      	ldr	r3, [pc, #80]	; (8011c58 <prvHeapInit+0xb4>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011c0e:	4b12      	ldr	r3, [pc, #72]	; (8011c58 <prvHeapInit+0xb4>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2200      	movs	r2, #0
 8011c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	68fa      	ldr	r2, [r7, #12]
 8011c1e:	1ad2      	subs	r2, r2, r3
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011c24:	4b0c      	ldr	r3, [pc, #48]	; (8011c58 <prvHeapInit+0xb4>)
 8011c26:	681a      	ldr	r2, [r3, #0]
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	685b      	ldr	r3, [r3, #4]
 8011c30:	4a0a      	ldr	r2, [pc, #40]	; (8011c5c <prvHeapInit+0xb8>)
 8011c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	685b      	ldr	r3, [r3, #4]
 8011c38:	4a09      	ldr	r2, [pc, #36]	; (8011c60 <prvHeapInit+0xbc>)
 8011c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011c3c:	4b09      	ldr	r3, [pc, #36]	; (8011c64 <prvHeapInit+0xc0>)
 8011c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011c42:	601a      	str	r2, [r3, #0]
}
 8011c44:	bf00      	nop
 8011c46:	3714      	adds	r7, #20
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr
 8011c50:	20002290 	.word	0x20002290
 8011c54:	200049a0 	.word	0x200049a0
 8011c58:	200049a8 	.word	0x200049a8
 8011c5c:	200049b0 	.word	0x200049b0
 8011c60:	200049ac 	.word	0x200049ac
 8011c64:	200049b4 	.word	0x200049b4

08011c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b085      	sub	sp, #20
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011c70:	4b28      	ldr	r3, [pc, #160]	; (8011d14 <prvInsertBlockIntoFreeList+0xac>)
 8011c72:	60fb      	str	r3, [r7, #12]
 8011c74:	e002      	b.n	8011c7c <prvInsertBlockIntoFreeList+0x14>
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	60fb      	str	r3, [r7, #12]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	687a      	ldr	r2, [r7, #4]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d8f7      	bhi.n	8011c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	68ba      	ldr	r2, [r7, #8]
 8011c90:	4413      	add	r3, r2
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d108      	bne.n	8011caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	685a      	ldr	r2, [r3, #4]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	441a      	add	r2, r3
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	68ba      	ldr	r2, [r7, #8]
 8011cb4:	441a      	add	r2, r3
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d118      	bne.n	8011cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	681a      	ldr	r2, [r3, #0]
 8011cc2:	4b15      	ldr	r3, [pc, #84]	; (8011d18 <prvInsertBlockIntoFreeList+0xb0>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d00d      	beq.n	8011ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	685a      	ldr	r2, [r3, #4]
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	685b      	ldr	r3, [r3, #4]
 8011cd4:	441a      	add	r2, r3
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	681a      	ldr	r2, [r3, #0]
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	601a      	str	r2, [r3, #0]
 8011ce4:	e008      	b.n	8011cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011ce6:	4b0c      	ldr	r3, [pc, #48]	; (8011d18 <prvInsertBlockIntoFreeList+0xb0>)
 8011ce8:	681a      	ldr	r2, [r3, #0]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	601a      	str	r2, [r3, #0]
 8011cee:	e003      	b.n	8011cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011cf8:	68fa      	ldr	r2, [r7, #12]
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d002      	beq.n	8011d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	687a      	ldr	r2, [r7, #4]
 8011d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d06:	bf00      	nop
 8011d08:	3714      	adds	r7, #20
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d10:	4770      	bx	lr
 8011d12:	bf00      	nop
 8011d14:	200049a0 	.word	0x200049a0
 8011d18:	200049a8 	.word	0x200049a8

08011d1c <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8011d22:	f000 f985 	bl	8012030 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8011d26:	480e      	ldr	r0, [pc, #56]	; (8011d60 <APP_THREAD_Init+0x44>)
 8011d28:	f000 fbf2 	bl	8012510 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8011d2c:	2101      	movs	r1, #1
 8011d2e:	2002      	movs	r0, #2
 8011d30:	f001 fd2e 	bl	8013790 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8011d34:	f000 fce4 	bl	8012700 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8011d38:	f000 fcd0 	bl	80126dc <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8011d3c:	f7f9 fffe 	bl	800bd3c <SHCI_C2_THREAD_Init>
 8011d40:	4603      	mov	r3, r0
 8011d42:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8011d44:	4a07      	ldr	r2, [pc, #28]	; (8011d64 <APP_THREAD_Init+0x48>)
 8011d46:	2100      	movs	r1, #0
 8011d48:	4807      	ldr	r0, [pc, #28]	; (8011d68 <APP_THREAD_Init+0x4c>)
 8011d4a:	f7fb feed 	bl	800db28 <osThreadNew>
 8011d4e:	4602      	mov	r2, r0
 8011d50:	4b06      	ldr	r3, [pc, #24]	; (8011d6c <APP_THREAD_Init+0x50>)
 8011d52:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8011d54:	f000 f86c 	bl	8011e30 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8011d58:	bf00      	nop
 8011d5a:	3708      	adds	r7, #8
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}
 8011d60:	20030834 	.word	0x20030834
 8011d64:	08013d5c 	.word	0x08013d5c
 8011d68:	080120ed 	.word	0x080120ed
 8011d6c:	20004acc 	.word	0x20004acc

08011d70 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b082      	sub	sp, #8
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2b07      	cmp	r3, #7
 8011d7e:	d83b      	bhi.n	8011df8 <APP_THREAD_Error+0x88>
 8011d80:	a201      	add	r2, pc, #4	; (adr r2, 8011d88 <APP_THREAD_Error+0x18>)
 8011d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d86:	bf00      	nop
 8011d88:	08011da9 	.word	0x08011da9
 8011d8c:	08011db3 	.word	0x08011db3
 8011d90:	08011dbd 	.word	0x08011dbd
 8011d94:	08011dc7 	.word	0x08011dc7
 8011d98:	08011dd1 	.word	0x08011dd1
 8011d9c:	08011ddb 	.word	0x08011ddb
 8011da0:	08011de5 	.word	0x08011de5
 8011da4:	08011def 	.word	0x08011def
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8011da8:	6839      	ldr	r1, [r7, #0]
 8011daa:	4818      	ldr	r0, [pc, #96]	; (8011e0c <APP_THREAD_Error+0x9c>)
 8011dac:	f000 f934 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011db0:	e027      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8011db2:	6839      	ldr	r1, [r7, #0]
 8011db4:	4816      	ldr	r0, [pc, #88]	; (8011e10 <APP_THREAD_Error+0xa0>)
 8011db6:	f000 f92f 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011dba:	e022      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8011dbc:	6839      	ldr	r1, [r7, #0]
 8011dbe:	4815      	ldr	r0, [pc, #84]	; (8011e14 <APP_THREAD_Error+0xa4>)
 8011dc0:	f000 f92a 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011dc4:	e01d      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8011dc6:	6839      	ldr	r1, [r7, #0]
 8011dc8:	4813      	ldr	r0, [pc, #76]	; (8011e18 <APP_THREAD_Error+0xa8>)
 8011dca:	f000 f925 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011dce:	e018      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8011dd0:	6839      	ldr	r1, [r7, #0]
 8011dd2:	4812      	ldr	r0, [pc, #72]	; (8011e1c <APP_THREAD_Error+0xac>)
 8011dd4:	f000 f920 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011dd8:	e013      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8011dda:	6839      	ldr	r1, [r7, #0]
 8011ddc:	4810      	ldr	r0, [pc, #64]	; (8011e20 <APP_THREAD_Error+0xb0>)
 8011dde:	f000 f91b 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011de2:	e00e      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8011de4:	6839      	ldr	r1, [r7, #0]
 8011de6:	480f      	ldr	r0, [pc, #60]	; (8011e24 <APP_THREAD_Error+0xb4>)
 8011de8:	f000 f916 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011dec:	e009      	b.n	8011e02 <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8011dee:	6839      	ldr	r1, [r7, #0]
 8011df0:	480d      	ldr	r0, [pc, #52]	; (8011e28 <APP_THREAD_Error+0xb8>)
 8011df2:	f000 f911 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011df6:	e004      	b.n	8011e02 <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8011df8:	2100      	movs	r1, #0
 8011dfa:	480c      	ldr	r0, [pc, #48]	; (8011e2c <APP_THREAD_Error+0xbc>)
 8011dfc:	f000 f90c 	bl	8012018 <APP_THREAD_TraceError>
    break;
 8011e00:	bf00      	nop
  }
}
 8011e02:	bf00      	nop
 8011e04:	3708      	adds	r7, #8
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	080139a8 	.word	0x080139a8
 8011e10:	080139cc 	.word	0x080139cc
 8011e14:	080139f0 	.word	0x080139f0
 8011e18:	08013a10 	.word	0x08013a10
 8011e1c:	08013a30 	.word	0x08013a30
 8011e20:	08013a50 	.word	0x08013a50
 8011e24:	08013a6c 	.word	0x08013a6c
 8011e28:	08013a98 	.word	0x08013a98
 8011e2c:	08013abc 	.word	0x08013abc

08011e30 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8011e36:	2000      	movs	r0, #0
 8011e38:	f7fa ffb6 	bl	800cda8 <otInstanceErasePersistentInfo>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011e40:	79fb      	ldrb	r3, [r7, #7]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d004      	beq.n	8011e50 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8011e46:	79fb      	ldrb	r3, [r7, #7]
 8011e48:	4619      	mov	r1, r3
 8011e4a:	2006      	movs	r0, #6
 8011e4c:	f7ff ff90 	bl	8011d70 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8011e50:	2000      	movs	r0, #0
 8011e52:	f7fa ff4d 	bl	800ccf0 <otInstanceFinalize>
  otInstanceInitSingle();
 8011e56:	f7fa ff24 	bl	800cca2 <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	4955      	ldr	r1, [pc, #340]	; (8011fb4 <APP_THREAD_DeviceConfig+0x184>)
 8011e5e:	2000      	movs	r0, #0
 8011e60:	f7fa ff6c 	bl	800cd3c <otSetStateChangedCallback>
 8011e64:	4603      	mov	r3, r0
 8011e66:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011e68:	79fb      	ldrb	r3, [r7, #7]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d004      	beq.n	8011e78 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8011e6e:	79fb      	ldrb	r3, [r7, #7]
 8011e70:	4619      	mov	r1, r3
 8011e72:	2001      	movs	r0, #1
 8011e74:	f7ff ff7c 	bl	8011d70 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8011e78:	2117      	movs	r1, #23
 8011e7a:	2000      	movs	r0, #0
 8011e7c:	f7fb f89c 	bl	800cfb8 <otLinkSetChannel>
 8011e80:	4603      	mov	r3, r0
 8011e82:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011e84:	79fb      	ldrb	r3, [r7, #7]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d004      	beq.n	8011e94 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8011e8a:	79fb      	ldrb	r3, [r7, #7]
 8011e8c:	4619      	mov	r1, r3
 8011e8e:	2002      	movs	r0, #2
 8011e90:	f7ff ff6e 	bl	8011d70 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8011e94:	f241 2134 	movw	r1, #4660	; 0x1234
 8011e98:	2000      	movs	r0, #0
 8011e9a:	f7fb f8bd 	bl	800d018 <otLinkSetPanId>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011ea2:	79fb      	ldrb	r3, [r7, #7]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d004      	beq.n	8011eb2 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8011ea8:	79fb      	ldrb	r3, [r7, #7]
 8011eaa:	4619      	mov	r1, r3
 8011eac:	2003      	movs	r0, #3
 8011eae:	f7ff ff5f 	bl	8011d70 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8011eb2:	2101      	movs	r1, #1
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	f7fa ffa0 	bl	800cdfa <otIp6SetEnabled>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011ebe:	79fb      	ldrb	r3, [r7, #7]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d004      	beq.n	8011ece <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8011ec4:	79fb      	ldrb	r3, [r7, #7]
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	2004      	movs	r0, #4
 8011eca:	f7ff ff51 	bl	8011d70 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8011ece:	2101      	movs	r1, #1
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	f7fb fbd6 	bl	800d682 <otThreadSetEnabled>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011eda:	79fb      	ldrb	r3, [r7, #7]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d004      	beq.n	8011eea <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8011ee0:	79fb      	ldrb	r3, [r7, #7]
 8011ee2:	4619      	mov	r1, r3
 8011ee4:	2005      	movs	r0, #5
 8011ee6:	f7ff ff43 	bl	8011d70 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 8011eea:	2100      	movs	r1, #0
 8011eec:	2000      	movs	r0, #0
 8011eee:	f7fb fbc8 	bl	800d682 <otThreadSetEnabled>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d004      	beq.n	8011f06 <APP_THREAD_DeviceConfig+0xd6>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 8011efc:	79fb      	ldrb	r3, [r7, #7]
 8011efe:	4619      	mov	r1, r3
 8011f00:	2005      	movs	r0, #5
 8011f02:	f7ff ff35 	bl	8011d70 <APP_THREAD_Error>
  	}


  	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8011f06:	2106      	movs	r1, #6
 8011f08:	2000      	movs	r0, #0
 8011f0a:	f7fb fb87 	bl	800d61c <otPlatRadioSetTransmitPower>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011f12:	79fb      	ldrb	r3, [r7, #7]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d004      	beq.n	8011f22 <APP_THREAD_DeviceConfig+0xf2>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8011f18:	79fb      	ldrb	r3, [r7, #7]
 8011f1a:	4619      	mov	r1, r3
 8011f1c:	2002      	movs	r0, #2
 8011f1e:	f7ff ff27 	bl	8011d70 <APP_THREAD_Error>
  	}

  	otThreadSetChildTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 8011f22:	2103      	movs	r1, #3
 8011f24:	2000      	movs	r0, #0
 8011f26:	f7fb fbdc 	bl	800d6e2 <otThreadSetChildTimeout>
//  	error = otThreadSetMasterKey(NULL, &masterKey);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otThreadSetNetworkName(NULL, networkName);
 8011f2a:	4923      	ldr	r1, [pc, #140]	; (8011fb8 <APP_THREAD_DeviceConfig+0x188>)
 8011f2c:	2000      	movs	r0, #0
 8011f2e:	f7fb fc54 	bl	800d7da <otThreadSetNetworkName>
 8011f32:	4603      	mov	r3, r0
 8011f34:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011f36:	79fb      	ldrb	r3, [r7, #7]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d004      	beq.n	8011f46 <APP_THREAD_DeviceConfig+0x116>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8011f3c:	79fb      	ldrb	r3, [r7, #7]
 8011f3e:	4619      	mov	r1, r3
 8011f40:	2002      	movs	r0, #2
 8011f42:	f7ff ff15 	bl	8011d70 <APP_THREAD_Error>
//  	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otIp6SetEnabled(NULL, true);
 8011f46:	2101      	movs	r1, #1
 8011f48:	2000      	movs	r0, #0
 8011f4a:	f7fa ff56 	bl	800cdfa <otIp6SetEnabled>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011f52:	79fb      	ldrb	r3, [r7, #7]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d004      	beq.n	8011f62 <APP_THREAD_DeviceConfig+0x132>
  		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8011f58:	79fb      	ldrb	r3, [r7, #7]
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	2004      	movs	r0, #4
 8011f5e:	f7ff ff07 	bl	8011d70 <APP_THREAD_Error>
  	}

  	error = otThreadSetEnabled(NULL, true);
 8011f62:	2101      	movs	r1, #1
 8011f64:	2000      	movs	r0, #0
 8011f66:	f7fb fb8c 	bl	800d682 <otThreadSetEnabled>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011f6e:	79fb      	ldrb	r3, [r7, #7]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d004      	beq.n	8011f7e <APP_THREAD_DeviceConfig+0x14e>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 8011f74:	79fb      	ldrb	r3, [r7, #7]
 8011f76:	4619      	mov	r1, r3
 8011f78:	2005      	movs	r0, #5
 8011f7a:	f7ff fef9 	bl	8011d70 <APP_THREAD_Error>
  	}

  	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8011f7e:	f241 6133 	movw	r1, #5683	; 0x1633
 8011f82:	2000      	movs	r0, #0
 8011f84:	f7fa fdfb 	bl	800cb7e <otCoapStart>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	71fb      	strb	r3, [r7, #7]
//  	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);

  	error = otCoapAddResource(NULL, &OT_Node_Cal_Ressource);
 8011f8c:	490b      	ldr	r1, [pc, #44]	; (8011fbc <APP_THREAD_DeviceConfig+0x18c>)
 8011f8e:	2000      	movs	r0, #0
 8011f90:	f7fa fe25 	bl	800cbde <otCoapAddResource>
 8011f94:	4603      	mov	r3, r0
 8011f96:	71fb      	strb	r3, [r7, #7]
  	error = otCoapAddResource(NULL, &OT_Node_Spot_Ressource);
 8011f98:	4909      	ldr	r1, [pc, #36]	; (8011fc0 <APP_THREAD_DeviceConfig+0x190>)
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	f7fa fe1f 	bl	800cbde <otCoapAddResource>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	71fb      	strb	r3, [r7, #7]
  #ifndef DONGLE_CODE
//      error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
  #endif
  	// set default multicast address for border router
  //    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
  	otIp6AddressFromString("ff03::1", &multicastAddr);
 8011fa4:	4907      	ldr	r1, [pc, #28]	; (8011fc4 <APP_THREAD_DeviceConfig+0x194>)
 8011fa6:	4808      	ldr	r0, [pc, #32]	; (8011fc8 <APP_THREAD_DeviceConfig+0x198>)
 8011fa8:	f7fa ffd4 	bl	800cf54 <otIp6AddressFromString>
  	// set UID in local state variable
  //	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
  //	 = UID64_BASE;
//  	stm32UID(msgSendMyIP.uid);
  /* USER CODE END DEVICECONFIG */
}
 8011fac:	bf00      	nop
 8011fae:	3708      	adds	r7, #8
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	08011fcd 	.word	0x08011fcd
 8011fb8:	08013da4 	.word	0x08013da4
 8011fbc:	2000013c 	.word	0x2000013c
 8011fc0:	2000014c 	.word	0x2000014c
 8011fc4:	20005010 	.word	0x20005010
 8011fc8:	08013acc 	.word	0x08013acc

08011fcc <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f003 0304 	and.w	r3, r3, #4
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d013      	beq.n	8012008 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	f7fb fc29 	bl	800d838 <otThreadGetDeviceRole>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	2b04      	cmp	r3, #4
 8011fea:	d80f      	bhi.n	801200c <APP_THREAD_StateNotif+0x40>
 8011fec:	a201      	add	r2, pc, #4	; (adr r2, 8011ff4 <APP_THREAD_StateNotif+0x28>)
 8011fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ff2:	bf00      	nop
 8011ff4:	0801200d 	.word	0x0801200d
 8011ff8:	0801200d 	.word	0x0801200d
 8011ffc:	0801200d 	.word	0x0801200d
 8012000:	0801200d 	.word	0x0801200d
 8012004:	0801200d 	.word	0x0801200d
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 8012008:	bf00      	nop
 801200a:	e000      	b.n	801200e <APP_THREAD_StateNotif+0x42>
      break;
 801200c:	bf00      	nop
}
 801200e:	bf00      	nop
 8012010:	3708      	adds	r7, #8
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}
 8012016:	bf00      	nop

08012018 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8012018:	b480      	push	{r7}
 801201a:	b083      	sub	sp, #12
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 8012022:	bf00      	nop
 8012024:	370c      	adds	r7, #12
 8012026:	46bd      	mov	sp, r7
 8012028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202c:	4770      	bx	lr
	...

08012030 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b088      	sub	sp, #32
 8012034:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8012036:	1d3b      	adds	r3, r7, #4
 8012038:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 801203a:	6978      	ldr	r0, [r7, #20]
 801203c:	f7f9 feaa 	bl	800bd94 <SHCI_GetWirelessFwInfo>
 8012040:	4603      	mov	r3, r0
 8012042:	2b00      	cmp	r3, #0
 8012044:	d004      	beq.n	8012050 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8012046:	2101      	movs	r1, #1
 8012048:	2007      	movs	r0, #7
 801204a:	f7ff fe91 	bl	8011d70 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 801204e:	e03d      	b.n	80120cc <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8012050:	4a20      	ldr	r2, [pc, #128]	; (80120d4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8012052:	2101      	movs	r1, #1
 8012054:	2000      	movs	r0, #0
 8012056:	f7f0 fc9b 	bl	8002990 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 801205a:	4a1f      	ldr	r2, [pc, #124]	; (80120d8 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 801205c:	2101      	movs	r1, #1
 801205e:	2000      	movs	r0, #0
 8012060:	f7f0 fc96 	bl	8002990 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8012064:	697b      	ldr	r3, [r7, #20]
 8012066:	781b      	ldrb	r3, [r3, #0]
 8012068:	4619      	mov	r1, r3
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	785b      	ldrb	r3, [r3, #1]
 801206e:	461a      	mov	r2, r3
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	789b      	ldrb	r3, [r3, #2]
 8012074:	9301      	str	r3, [sp, #4]
 8012076:	9200      	str	r2, [sp, #0]
 8012078:	460b      	mov	r3, r1
 801207a:	4a18      	ldr	r2, [pc, #96]	; (80120dc <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 801207c:	2101      	movs	r1, #1
 801207e:	2000      	movs	r0, #0
 8012080:	f7f0 fc86 	bl	8002990 <logApplication>
    switch(p_wireless_info->StackType)
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	7a5b      	ldrb	r3, [r3, #9]
 8012088:	2b11      	cmp	r3, #17
 801208a:	d009      	beq.n	80120a0 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 801208c:	2b50      	cmp	r3, #80	; 0x50
 801208e:	d00d      	beq.n	80120ac <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8012090:	2b10      	cmp	r3, #16
 8012092:	d111      	bne.n	80120b8 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8012094:	4a12      	ldr	r2, [pc, #72]	; (80120e0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8012096:	2101      	movs	r1, #1
 8012098:	2000      	movs	r0, #0
 801209a:	f7f0 fc79 	bl	8002990 <logApplication>
      break;
 801209e:	e010      	b.n	80120c2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 80120a0:	4a10      	ldr	r2, [pc, #64]	; (80120e4 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 80120a2:	2101      	movs	r1, #1
 80120a4:	2000      	movs	r0, #0
 80120a6:	f7f0 fc73 	bl	8002990 <logApplication>
      break;
 80120aa:	e00a      	b.n	80120c2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 80120ac:	4a0e      	ldr	r2, [pc, #56]	; (80120e8 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 80120ae:	2101      	movs	r1, #1
 80120b0:	2000      	movs	r0, #0
 80120b2:	f7f0 fc6d 	bl	8002990 <logApplication>
      break;
 80120b6:	e004      	b.n	80120c2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80120b8:	2101      	movs	r1, #1
 80120ba:	2007      	movs	r0, #7
 80120bc:	f7ff fe58 	bl	8011d70 <APP_THREAD_Error>
      break;
 80120c0:	bf00      	nop
    APP_DBG("**********************************************************");
 80120c2:	4a04      	ldr	r2, [pc, #16]	; (80120d4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80120c4:	2101      	movs	r1, #1
 80120c6:	2000      	movs	r0, #0
 80120c8:	f7f0 fc62 	bl	8002990 <logApplication>
}
 80120cc:	bf00      	nop
 80120ce:	3718      	adds	r7, #24
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	08013ad4 	.word	0x08013ad4
 80120d8:	08013b10 	.word	0x08013b10
 80120dc:	08013b2c 	.word	0x08013b2c
 80120e0:	08013b44 	.word	0x08013b44
 80120e4:	08013b5c 	.word	0x08013b5c
 80120e8:	08013b74 	.word	0x08013b74

080120ec <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b082      	sub	sp, #8
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80120f4:	f04f 32ff 	mov.w	r2, #4294967295
 80120f8:	2101      	movs	r1, #1
 80120fa:	2001      	movs	r0, #1
 80120fc:	f7fb fe1c 	bl	800dd38 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8012100:	f000 fb30 	bl	8012764 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8012104:	e7f6      	b.n	80120f4 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08012106 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8012106:	b580      	push	{r7, lr}
 8012108:	b082      	sub	sp, #8
 801210a:	af00      	add	r7, sp, #0
 801210c:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801210e:	f04f 32ff 	mov.w	r2, #4294967295
 8012112:	2101      	movs	r1, #1
 8012114:	2001      	movs	r0, #1
 8012116:	f7fb fe0f 	bl	800dd38 <osThreadFlagsWait>
    Send_CLI_To_M0();
 801211a:	f000 faa5 	bl	8012668 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801211e:	e7f6      	b.n	801210e <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08012120 <APP_THREAD_CoapNodeSpotRequestHandler>:
//}

static void APP_THREAD_CoapNodeSpotRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 8012120:	b580      	push	{r7, lr}
 8012122:	b08a      	sub	sp, #40	; 0x28
 8012124:	af00      	add	r7, sp, #0
 8012126:	60f8      	str	r0, [r7, #12]
 8012128:	60b9      	str	r1, [r7, #8]
 801212a:	607a      	str	r2, [r7, #4]
 801212c:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		struct MeasMsg receivedMeasMsg;
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedMeasMsg, sizeof(receivedMeasMsg))
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7fa ffcd 	bl	800d0ce <otMessageGetOffset>
 8012134:	4603      	mov	r3, r0
 8012136:	4619      	mov	r1, r3
 8012138:	f107 0214 	add.w	r2, r7, #20
 801213c:	2314      	movs	r3, #20
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f7fb f82a 	bl	800d198 <otMessageRead>
 8012144:	4603      	mov	r3, r0
 8012146:	2b14      	cmp	r3, #20
 8012148:	d121      	bne.n	801218e <APP_THREAD_CoapNodeSpotRequestHandler+0x6e>
				== sizeof(receivedMeasMsg)) {


			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 801214a:	68b8      	ldr	r0, [r7, #8]
 801214c:	f7fa fbf8 	bl	800c940 <otCoapHeaderGetCode>
 8012150:	4603      	mov	r3, r0
 8012152:	2b03      	cmp	r3, #3
 8012154:	d111      	bne.n	801217a <APP_THREAD_CoapNodeSpotRequestHandler+0x5a>
			{
//				measMsgReceivedFromNode(&receivedMeasMsg);
				toggleLed(1,1,1);
 8012156:	2201      	movs	r2, #1
 8012158:	2101      	movs	r1, #1
 801215a:	2001      	movs	r0, #1
 801215c:	f7ef fecc 	bl	8001ef8 <toggleLed>
				osMessageQueuePut (msgQueueHandle, &receivedMeasMsg, NULL, 0);
 8012160:	4b0d      	ldr	r3, [pc, #52]	; (8012198 <APP_THREAD_CoapNodeSpotRequestHandler+0x78>)
 8012162:	6818      	ldr	r0, [r3, #0]
 8012164:	f107 0114 	add.w	r1, r7, #20
 8012168:	2300      	movs	r3, #0
 801216a:	2200      	movs	r2, #0
 801216c:	f7fc f9d0 	bl	800e510 <osMessageQueuePut>
				toggleLed(0,0,1);
 8012170:	2201      	movs	r2, #1
 8012172:	2100      	movs	r1, #0
 8012174:	2000      	movs	r0, #0
 8012176:	f7ef febf 	bl	8001ef8 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 801217a:	68b8      	ldr	r0, [r7, #8]
 801217c:	f7fa fbb2 	bl	800c8e4 <otCoapHeaderGetType>
 8012180:	4603      	mov	r3, r0
 8012182:	2b00      	cmp	r3, #0
 8012184:	d103      	bne.n	801218e <APP_THREAD_CoapNodeSpotRequestHandler+0x6e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 8012186:	6839      	ldr	r1, [r7, #0]
 8012188:	68b8      	ldr	r0, [r7, #8]
 801218a:	f000 f845 	bl	8012218 <APP_THREAD_CoapSendDataResponse>
			}

		}
}
 801218e:	bf00      	nop
 8012190:	3728      	adds	r7, #40	; 0x28
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop
 8012198:	20000294 	.word	0x20000294

0801219c <APP_THREAD_CoapNodeCalRequestHandler>:

struct CalMsg receivedCalMsg;
static void APP_THREAD_CoapNodeCalRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
 80121a8:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedCalMsg, sizeof(receivedCalMsg))
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f7fa ff8f 	bl	800d0ce <otMessageGetOffset>
 80121b0:	4603      	mov	r3, r0
 80121b2:	4619      	mov	r1, r3
 80121b4:	230c      	movs	r3, #12
 80121b6:	4a17      	ldr	r2, [pc, #92]	; (8012214 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f7fa ffed 	bl	800d198 <otMessageRead>
 80121be:	4603      	mov	r3, r0
 80121c0:	2b0c      	cmp	r3, #12
 80121c2:	d122      	bne.n	801220a <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
				== sizeof(receivedCalMsg)) {

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 80121c4:	68b8      	ldr	r0, [r7, #8]
 80121c6:	f7fa fbbb 	bl	800c940 <otCoapHeaderGetCode>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b03      	cmp	r3, #3
 80121ce:	d107      	bne.n	80121e0 <APP_THREAD_CoapNodeCalRequestHandler+0x44>
			{
				if(receivedCalMsg.cal_fcn == CALIBRATION_START_COMMAND){
 80121d0:	4b10      	ldr	r3, [pc, #64]	; (8012214 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 80121d2:	789b      	ldrb	r3, [r3, #2]
 80121d4:	2b01      	cmp	r3, #1
					// TODO: start calibration

				}else if(receivedCalMsg.cal_fcn == CALIBRATION_STOP_COMMAND){
					// TODO: stop calibration
				}
				toggleLed(0,0,1);
 80121d6:	2201      	movs	r2, #1
 80121d8:	2100      	movs	r1, #0
 80121da:	2000      	movs	r0, #0
 80121dc:	f7ef fe8c 	bl	8001ef8 <toggleLed>
			}

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET)
 80121e0:	68b8      	ldr	r0, [r7, #8]
 80121e2:	f7fa fbad 	bl	800c940 <otCoapHeaderGetCode>
 80121e6:	4603      	mov	r3, r0
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	d104      	bne.n	80121f6 <APP_THREAD_CoapNodeCalRequestHandler+0x5a>
					// 		TODO this can be done in an ACK but doing it now in a separate PUT request to the nodeSpot resource
#ifdef SOLAR_SENSOR_NODE
					sendPowerMeasurement(pMessageInfo->mPeerAddr, receivedCalMsg.angle_1, receivedCalMsg.angle_2);
#endif
				}
				toggleLed(1,0,0);
 80121ec:	2200      	movs	r2, #0
 80121ee:	2100      	movs	r1, #0
 80121f0:	2001      	movs	r0, #1
 80121f2:	f7ef fe81 	bl	8001ef8 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 80121f6:	68b8      	ldr	r0, [r7, #8]
 80121f8:	f7fa fb74 	bl	800c8e4 <otCoapHeaderGetType>
 80121fc:	4603      	mov	r3, r0
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d103      	bne.n	801220a <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 8012202:	6839      	ldr	r1, [r7, #0]
 8012204:	68b8      	ldr	r0, [r7, #8]
 8012206:	f000 f807 	bl	8012218 <APP_THREAD_CoapSendDataResponse>
//
//		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
//			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
//		}

}
 801220a:	bf00      	nop
 801220c:	3710      	adds	r7, #16
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
 8012212:	bf00      	nop
 8012214:	2000502c 	.word	0x2000502c

08012218 <APP_THREAD_CoapSendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_CoapSendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 8012218:	b590      	push	{r4, r7, lr}
 801221a:	b085      	sub	sp, #20
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 8012222:	2300      	movs	r3, #0
 8012224:	73fb      	strb	r3, [r7, #15]

  do{
    APP_DBG(" ********* APP_THREAD_CoapSendDataResponse ********* ");
 8012226:	4a25      	ldr	r2, [pc, #148]	; (80122bc <APP_THREAD_CoapSendDataResponse+0xa4>)
 8012228:	2101      	movs	r1, #1
 801222a:	2000      	movs	r0, #0
 801222c:	f7f0 fbb0 	bl	8002990 <logApplication>
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8012230:	2244      	movs	r2, #68	; 0x44
 8012232:	2120      	movs	r1, #32
 8012234:	4822      	ldr	r0, [pc, #136]	; (80122c0 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8012236:	f7fa f9f9 	bl	800c62c <otCoapHeaderInit>
    otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f7fa fbae 	bl	800c99c <otCoapHeaderGetMessageId>
 8012240:	4603      	mov	r3, r0
 8012242:	4619      	mov	r1, r3
 8012244:	481e      	ldr	r0, [pc, #120]	; (80122c0 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8012246:	f7fa fb1d 	bl	800c884 <otCoapHeaderSetMessageId>
    otCoapHeaderSetToken(&OT_Header,
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f7fa fc02 	bl	800ca54 <otCoapHeaderGetToken>
 8012250:	4604      	mov	r4, r0
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f7fa fbd0 	bl	800c9f8 <otCoapHeaderGetTokenLength>
 8012258:	4603      	mov	r3, r0
 801225a:	461a      	mov	r2, r3
 801225c:	4621      	mov	r1, r4
 801225e:	4818      	ldr	r0, [pc, #96]	; (80122c0 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8012260:	f7fa fa19 	bl	800c696 <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8012264:	4916      	ldr	r1, [pc, #88]	; (80122c0 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8012266:	2000      	movs	r0, #0
 8012268:	f7fa fc21 	bl	800caae <otCoapNewMessage>
 801226c:	4602      	mov	r2, r0
 801226e:	4b15      	ldr	r3, [pc, #84]	; (80122c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 8012270:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 8012272:	4b14      	ldr	r3, [pc, #80]	; (80122c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d106      	bne.n	8012288 <APP_THREAD_CoapSendDataResponse+0x70>
    {
      APP_DBG("WARNING : pOT_Message = NULL ! -> exit now");
 801227a:	4a13      	ldr	r2, [pc, #76]	; (80122c8 <APP_THREAD_CoapSendDataResponse+0xb0>)
 801227c:	2101      	movs	r1, #1
 801227e:	2000      	movs	r0, #0
 8012280:	f7f0 fb86 	bl	8002990 <logApplication>
      break;
 8012284:	bf00      	nop
    {
      otMessageFree(pOT_Message);
//      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 8012286:	e014      	b.n	80122b2 <APP_THREAD_CoapSendDataResponse+0x9a>
    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8012288:	4b0e      	ldr	r3, [pc, #56]	; (80122c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	683a      	ldr	r2, [r7, #0]
 801228e:	4619      	mov	r1, r3
 8012290:	2000      	movs	r0, #0
 8012292:	f7fa fcd3 	bl	800cc3c <otCoapSendResponse>
 8012296:	4603      	mov	r3, r0
 8012298:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 801229a:	7bfb      	ldrb	r3, [r7, #15]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d008      	beq.n	80122b2 <APP_THREAD_CoapSendDataResponse+0x9a>
 80122a0:	4b08      	ldr	r3, [pc, #32]	; (80122c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d004      	beq.n	80122b2 <APP_THREAD_CoapSendDataResponse+0x9a>
      otMessageFree(pOT_Message);
 80122a8:	4b06      	ldr	r3, [pc, #24]	; (80122c4 <APP_THREAD_CoapSendDataResponse+0xac>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	4618      	mov	r0, r3
 80122ae:	f7fa fee3 	bl	800d078 <otMessageFree>
}
 80122b2:	bf00      	nop
 80122b4:	3714      	adds	r7, #20
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd90      	pop	{r4, r7, pc}
 80122ba:	bf00      	nop
 80122bc:	08013ba0 	.word	0x08013ba0
 80122c0:	20004b24 	.word	0x20004b24
 80122c4:	20004ad4 	.word	0x20004ad4
 80122c8:	08013bd8 	.word	0x08013bd8

080122cc <APP_THREAD_SendCoapMsg>:
//		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
//	}
//}

void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, const char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 80122cc:	b590      	push	{r4, r7, lr}
 80122ce:	b087      	sub	sp, #28
 80122d0:	af02      	add	r7, sp, #8
 80122d2:	60f8      	str	r0, [r7, #12]
 80122d4:	607a      	str	r2, [r7, #4]
 80122d6:	603b      	str	r3, [r7, #0]
 80122d8:	460b      	mov	r3, r1
 80122da:	817b      	strh	r3, [r7, #10]
	/************ SET MESSAGE INFO (WHERE THE PACKET GOES) ************/
	// https://openthread.io/reference/struct/ot-message-info.html#structot_message_info
	do {
		// REMOVE BELOW CALLS (ONLY FOR DEBUGGING)
			  myRloc16 = otThreadGetRloc16(NULL);
 80122dc:	2000      	movs	r0, #0
 80122de:	f7fb fad4 	bl	800d88a <otThreadGetRloc16>
 80122e2:	4603      	mov	r3, r0
 80122e4:	461a      	mov	r2, r3
 80122e6:	4b7e      	ldr	r3, [pc, #504]	; (80124e0 <APP_THREAD_SendCoapMsg+0x214>)
 80122e8:	801a      	strh	r2, [r3, #0]
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 80122ea:	2000      	movs	r0, #0
 80122ec:	f7fa fde2 	bl	800ceb4 <otIp6GetUnicastAddresses>
 80122f0:	4602      	mov	r2, r0
 80122f2:	4b7c      	ldr	r3, [pc, #496]	; (80124e4 <APP_THREAD_SendCoapMsg+0x218>)
 80122f4:	601a      	str	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 80122f6:	2000      	movs	r0, #0
 80122f8:	f7fa fdaf 	bl	800ce5a <otIp6IsEnabled>
 80122fc:	4603      	mov	r3, r0
 80122fe:	461a      	mov	r2, r3
 8012300:	4b79      	ldr	r3, [pc, #484]	; (80124e8 <APP_THREAD_SendCoapMsg+0x21c>)
 8012302:	701a      	strb	r2, [r3, #0]
			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
 8012304:	2000      	movs	r0, #0
 8012306:	f7fa fdfd 	bl	800cf04 <otIp6GetMulticastAddresses>
 801230a:	4602      	mov	r2, r0
 801230c:	4b77      	ldr	r3, [pc, #476]	; (80124ec <APP_THREAD_SendCoapMsg+0x220>)
 801230e:	601a      	str	r2, [r3, #0]
			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
 8012310:	2000      	movs	r0, #0
 8012312:	f7fb fa12 	bl	800d73a <otThreadGetMeshLocalEid>
 8012316:	4602      	mov	r2, r0
 8012318:	4b75      	ldr	r3, [pc, #468]	; (80124f0 <APP_THREAD_SendCoapMsg+0x224>)
 801231a:	601a      	str	r2, [r3, #0]
			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
 801231c:	2000      	movs	r0, #0
 801231e:	f7fb fa34 	bl	800d78a <otThreadGetLinkLocalIp6Address>
 8012322:	4602      	mov	r2, r0
 8012324:	4b73      	ldr	r3, [pc, #460]	; (80124f4 <APP_THREAD_SendCoapMsg+0x228>)
 8012326:	601a      	str	r2, [r3, #0]

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8012328:	222c      	movs	r2, #44	; 0x2c
 801232a:	2100      	movs	r1, #0
 801232c:	4872      	ldr	r0, [pc, #456]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 801232e:	f001 fa8c 	bl	801384a <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 8012332:	897b      	ldrh	r3, [r7, #10]
 8012334:	2b64      	cmp	r3, #100	; 0x64
 8012336:	d914      	bls.n	8012362 <APP_THREAD_SendCoapMsg+0x96>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8012338:	4b6f      	ldr	r3, [pc, #444]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 801233a:	4a70      	ldr	r2, [pc, #448]	; (80124fc <APP_THREAD_SendCoapMsg+0x230>)
 801233c:	f103 0410 	add.w	r4, r3, #16
 8012340:	4613      	mov	r3, r2
 8012342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8012348:	2000      	movs	r0, #0
 801234a:	f7fb f9f6 	bl	800d73a <otThreadGetMeshLocalEid>
 801234e:	4602      	mov	r2, r0
 8012350:	4b69      	ldr	r3, [pc, #420]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012352:	461c      	mov	r4, r3
 8012354:	4613      	mov	r3, r2
 8012356:	6818      	ldr	r0, [r3, #0]
 8012358:	6859      	ldr	r1, [r3, #4]
 801235a:	689a      	ldr	r2, [r3, #8]
 801235c:	68db      	ldr	r3, [r3, #12]
 801235e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012360:	e015      	b.n	801238e <APP_THREAD_SendCoapMsg+0xc2>
//			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 8012362:	4b65      	ldr	r3, [pc, #404]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012364:	4a66      	ldr	r2, [pc, #408]	; (8012500 <APP_THREAD_SendCoapMsg+0x234>)
 8012366:	f103 0410 	add.w	r4, r3, #16
 801236a:	4613      	mov	r3, r2
 801236c:	6818      	ldr	r0, [r3, #0]
 801236e:	6859      	ldr	r1, [r3, #4]
 8012370:	689a      	ldr	r2, [r3, #8]
 8012372:	68db      	ldr	r3, [r3, #12]
 8012374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8012376:	2000      	movs	r0, #0
 8012378:	f7fb f9df 	bl	800d73a <otThreadGetMeshLocalEid>
 801237c:	4602      	mov	r2, r0
 801237e:	4b5e      	ldr	r3, [pc, #376]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012380:	461c      	mov	r4, r3
 8012382:	4613      	mov	r3, r2
 8012384:	6818      	ldr	r0, [r3, #0]
 8012386:	6859      	ldr	r1, [r3, #4]
 8012388:	689a      	ldr	r2, [r3, #8]
 801238a:	68db      	ldr	r3, [r3, #12]
 801238c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 801238e:	4b5a      	ldr	r3, [pc, #360]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012390:	2201      	movs	r2, #1
 8012392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8012396:	4b58      	ldr	r3, [pc, #352]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 8012398:	f241 6233 	movw	r2, #5683	; 0x1633
 801239c:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 801239e:	4b56      	ldr	r3, [pc, #344]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 80123a0:	2240      	movs	r2, #64	; 0x40
 80123a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 80123a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d009      	beq.n	80123c2 <APP_THREAD_SendCoapMsg+0xf6>
 80123ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80123b2:	2b03      	cmp	r3, #3
 80123b4:	d105      	bne.n	80123c2 <APP_THREAD_SendCoapMsg+0xf6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 80123b6:	2203      	movs	r2, #3
 80123b8:	2100      	movs	r1, #0
 80123ba:	4852      	ldr	r0, [pc, #328]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 80123bc:	f7fa f936 	bl	800c62c <otCoapHeaderInit>
 80123c0:	e04a      	b.n	8012458 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 80123c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d009      	beq.n	80123de <APP_THREAD_SendCoapMsg+0x112>
 80123ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80123ce:	2b01      	cmp	r3, #1
 80123d0:	d105      	bne.n	80123de <APP_THREAD_SendCoapMsg+0x112>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 80123d2:	2201      	movs	r2, #1
 80123d4:	2100      	movs	r1, #0
 80123d6:	484b      	ldr	r0, [pc, #300]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 80123d8:	f7fa f928 	bl	800c62c <otCoapHeaderInit>
 80123dc:	e03c      	b.n	8012458 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 80123de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d009      	beq.n	80123fa <APP_THREAD_SendCoapMsg+0x12e>
 80123e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80123ea:	2b02      	cmp	r3, #2
 80123ec:	d105      	bne.n	80123fa <APP_THREAD_SendCoapMsg+0x12e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 80123ee:	2202      	movs	r2, #2
 80123f0:	2100      	movs	r1, #0
 80123f2:	4844      	ldr	r0, [pc, #272]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 80123f4:	f7fa f91a 	bl	800c62c <otCoapHeaderInit>
 80123f8:	e02e      	b.n	8012458 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 80123fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d109      	bne.n	8012416 <APP_THREAD_SendCoapMsg+0x14a>
 8012402:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012406:	2b03      	cmp	r3, #3
 8012408:	d105      	bne.n	8012416 <APP_THREAD_SendCoapMsg+0x14a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 801240a:	2203      	movs	r2, #3
 801240c:	2110      	movs	r1, #16
 801240e:	483d      	ldr	r0, [pc, #244]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 8012410:	f7fa f90c 	bl	800c62c <otCoapHeaderInit>
 8012414:	e020      	b.n	8012458 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8012416:	f897 3020 	ldrb.w	r3, [r7, #32]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d109      	bne.n	8012432 <APP_THREAD_SendCoapMsg+0x166>
 801241e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012422:	2b01      	cmp	r3, #1
 8012424:	d105      	bne.n	8012432 <APP_THREAD_SendCoapMsg+0x166>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8012426:	2201      	movs	r2, #1
 8012428:	2110      	movs	r1, #16
 801242a:	4836      	ldr	r0, [pc, #216]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 801242c:	f7fa f8fe 	bl	800c62c <otCoapHeaderInit>
 8012430:	e012      	b.n	8012458 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8012432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d109      	bne.n	801244e <APP_THREAD_SendCoapMsg+0x182>
 801243a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801243e:	2b02      	cmp	r3, #2
 8012440:	d105      	bne.n	801244e <APP_THREAD_SendCoapMsg+0x182>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8012442:	2202      	movs	r2, #2
 8012444:	2110      	movs	r1, #16
 8012446:	482f      	ldr	r0, [pc, #188]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 8012448:	f7fa f8f0 	bl	800c62c <otCoapHeaderInit>
 801244c:	e004      	b.n	8012458 <APP_THREAD_SendCoapMsg+0x18c>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 801244e:	2102      	movs	r1, #2
 8012450:	482c      	ldr	r0, [pc, #176]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 8012452:	f7fa f954 	bl	800c6fe <otCoapHeaderGenerateToken>
 8012456:	e040      	b.n	80124da <APP_THREAD_SendCoapMsg+0x20e>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8012458:	6839      	ldr	r1, [r7, #0]
 801245a:	482a      	ldr	r0, [pc, #168]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 801245c:	f7fa f9b2 	bl	800c7c4 <otCoapHeaderAppendUriPathOptions>
 8012460:	4603      	mov	r3, r0
 8012462:	461a      	mov	r2, r3
 8012464:	4b28      	ldr	r3, [pc, #160]	; (8012508 <APP_THREAD_SendCoapMsg+0x23c>)
 8012466:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8012468:	212a      	movs	r1, #42	; 0x2a
 801246a:	4826      	ldr	r0, [pc, #152]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 801246c:	f7fa f977 	bl	800c75e <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 8012470:	897b      	ldrh	r3, [r7, #10]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d002      	beq.n	801247c <APP_THREAD_SendCoapMsg+0x1b0>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8012476:	4823      	ldr	r0, [pc, #140]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 8012478:	f7fa f9d6 	bl	800c828 <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 801247c:	4921      	ldr	r1, [pc, #132]	; (8012504 <APP_THREAD_SendCoapMsg+0x238>)
 801247e:	2000      	movs	r0, #0
 8012480:	f7fa fb15 	bl	800caae <otCoapNewMessage>
 8012484:	4602      	mov	r2, r0
 8012486:	4b21      	ldr	r3, [pc, #132]	; (801250c <APP_THREAD_SendCoapMsg+0x240>)
 8012488:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 801248a:	897b      	ldrh	r3, [r7, #10]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d00a      	beq.n	80124a6 <APP_THREAD_SendCoapMsg+0x1da>
			error = otMessageAppend(pOT_Message, message, msgSize);
 8012490:	4b1e      	ldr	r3, [pc, #120]	; (801250c <APP_THREAD_SendCoapMsg+0x240>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	897a      	ldrh	r2, [r7, #10]
 8012496:	68f9      	ldr	r1, [r7, #12]
 8012498:	4618      	mov	r0, r3
 801249a:	f7fa fe46 	bl	800d12a <otMessageAppend>
 801249e:	4603      	mov	r3, r0
 80124a0:	461a      	mov	r2, r3
 80124a2:	4b19      	ldr	r3, [pc, #100]	; (8012508 <APP_THREAD_SendCoapMsg+0x23c>)
 80124a4:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 80124a6:	4b19      	ldr	r3, [pc, #100]	; (801250c <APP_THREAD_SendCoapMsg+0x240>)
 80124a8:	6819      	ldr	r1, [r3, #0]
 80124aa:	2300      	movs	r3, #0
 80124ac:	9300      	str	r3, [sp, #0]
 80124ae:	2300      	movs	r3, #0
 80124b0:	4a11      	ldr	r2, [pc, #68]	; (80124f8 <APP_THREAD_SendCoapMsg+0x22c>)
 80124b2:	2000      	movs	r0, #0
 80124b4:	f7fa fb29 	bl	800cb0a <otCoapSendRequest>
 80124b8:	4603      	mov	r3, r0
 80124ba:	461a      	mov	r2, r3
 80124bc:	4b12      	ldr	r3, [pc, #72]	; (8012508 <APP_THREAD_SendCoapMsg+0x23c>)
 80124be:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 80124c0:	4b11      	ldr	r3, [pc, #68]	; (8012508 <APP_THREAD_SendCoapMsg+0x23c>)
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d008      	beq.n	80124da <APP_THREAD_SendCoapMsg+0x20e>
 80124c8:	4b10      	ldr	r3, [pc, #64]	; (801250c <APP_THREAD_SendCoapMsg+0x240>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d004      	beq.n	80124da <APP_THREAD_SendCoapMsg+0x20e>
			otMessageFree(pOT_Message);
 80124d0:	4b0e      	ldr	r3, [pc, #56]	; (801250c <APP_THREAD_SendCoapMsg+0x240>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	4618      	mov	r0, r3
 80124d6:	f7fa fdcf 	bl	800d078 <otMessageFree>
		}

	} while (false);
}
 80124da:	3714      	adds	r7, #20
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd90      	pop	{r4, r7, pc}
 80124e0:	2000503c 	.word	0x2000503c
 80124e4:	20005040 	.word	0x20005040
 80124e8:	20005020 	.word	0x20005020
 80124ec:	20005008 	.word	0x20005008
 80124f0:	20005038 	.word	0x20005038
 80124f4:	2000500c 	.word	0x2000500c
 80124f8:	20004af8 	.word	0x20004af8
 80124fc:	20004ae0 	.word	0x20004ae0
 8012500:	20005010 	.word	0x20005010
 8012504:	20004b24 	.word	0x20004b24
 8012508:	20004ad8 	.word	0x20004ad8
 801250c:	20004ad4 	.word	0x20004ad4

08012510 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8012510:	b480      	push	{r7}
 8012512:	b083      	sub	sp, #12
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8012518:	4a04      	ldr	r2, [pc, #16]	; (801252c <APP_THREAD_RegisterCmdBuffer+0x1c>)
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6013      	str	r3, [r2, #0]
}
 801251e:	bf00      	nop
 8012520:	370c      	adds	r7, #12
 8012522:	46bd      	mov	sp, r7
 8012524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012528:	4770      	bx	lr
 801252a:	bf00      	nop
 801252c:	20004abc 	.word	0x20004abc

08012530 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8012530:	b480      	push	{r7}
 8012532:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8012534:	4b03      	ldr	r3, [pc, #12]	; (8012544 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	330c      	adds	r3, #12
}
 801253a:	4618      	mov	r0, r3
 801253c:	46bd      	mov	sp, r7
 801253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012542:	4770      	bx	lr
 8012544:	20004abc 	.word	0x20004abc

08012548 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8012548:	b480      	push	{r7}
 801254a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 801254c:	4b03      	ldr	r3, [pc, #12]	; (801255c <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	330b      	adds	r3, #11
}
 8012552:	4618      	mov	r0, r3
 8012554:	46bd      	mov	sp, r7
 8012556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255a:	4770      	bx	lr
 801255c:	20004abc 	.word	0x20004abc

08012560 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8012560:	b480      	push	{r7}
 8012562:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8012564:	4b03      	ldr	r3, [pc, #12]	; (8012574 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	330b      	adds	r3, #11
}
 801256a:	4618      	mov	r0, r3
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr
 8012574:	20004ac0 	.word	0x20004ac0

08012578 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 801257e:	4b0f      	ldr	r3, [pc, #60]	; (80125bc <Ot_Cmd_Transfer+0x44>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2200      	movs	r2, #0
 8012584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012588:	725a      	strb	r2, [r3, #9]
 801258a:	2200      	movs	r2, #0
 801258c:	f042 0202 	orr.w	r2, r2, #2
 8012590:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8012592:	4b0a      	ldr	r3, [pc, #40]	; (80125bc <Ot_Cmd_Transfer+0x44>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	330c      	adds	r3, #12
 8012598:	685b      	ldr	r3, [r3, #4]
 801259a:	3302      	adds	r3, #2
 801259c:	009b      	lsls	r3, r3, #2
 801259e:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 80125a0:	4b06      	ldr	r3, [pc, #24]	; (80125bc <Ot_Cmd_Transfer+0x44>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	b2d2      	uxtb	r2, r2
 80125a8:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 80125aa:	f7f9 fee9 	bl	800c380 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80125ae:	f000 f829 	bl	8012604 <Wait_Getting_Ack_From_M0>
}
 80125b2:	bf00      	nop
 80125b4:	3708      	adds	r7, #8
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}
 80125ba:	bf00      	nop
 80125bc:	20004abc 	.word	0x20004abc

080125c0 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 80125c8:	f000 f82e 	bl	8012628 <Receive_Ack_From_M0>
}
 80125cc:	bf00      	nop
 80125ce:	3708      	adds	r7, #8
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}

080125d4 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80125dc:	4a04      	ldr	r2, [pc, #16]	; (80125f0 <TL_THREAD_NotReceived+0x1c>)
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80125e2:	f000 f82d 	bl	8012640 <Receive_Notification_From_M0>
}
 80125e6:	bf00      	nop
 80125e8:	3708      	adds	r7, #8
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	20004ac0 	.word	0x20004ac0

080125f4 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 80125f4:	b480      	push	{r7}
 80125f6:	af00      	add	r7, sp, #0

}
 80125f8:	bf00      	nop
 80125fa:	46bd      	mov	sp, r7
 80125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012600:	4770      	bx	lr
	...

08012604 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8012604:	b480      	push	{r7}
 8012606:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8012608:	bf00      	nop
 801260a:	4b06      	ldr	r3, [pc, #24]	; (8012624 <Wait_Getting_Ack_From_M0+0x20>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d0fb      	beq.n	801260a <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8012612:	4b04      	ldr	r3, [pc, #16]	; (8012624 <Wait_Getting_Ack_From_M0+0x20>)
 8012614:	2200      	movs	r2, #0
 8012616:	601a      	str	r2, [r3, #0]
}
 8012618:	bf00      	nop
 801261a:	46bd      	mov	sp, r7
 801261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012620:	4770      	bx	lr
 8012622:	bf00      	nop
 8012624:	20004ac8 	.word	0x20004ac8

08012628 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8012628:	b480      	push	{r7}
 801262a:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 801262c:	4b03      	ldr	r3, [pc, #12]	; (801263c <Receive_Ack_From_M0+0x14>)
 801262e:	2201      	movs	r2, #1
 8012630:	601a      	str	r2, [r3, #0]
}
 8012632:	bf00      	nop
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr
 801263c:	20004ac8 	.word	0x20004ac8

08012640 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8012644:	4b06      	ldr	r3, [pc, #24]	; (8012660 <Receive_Notification_From_M0+0x20>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	3301      	adds	r3, #1
 801264a:	4a05      	ldr	r2, [pc, #20]	; (8012660 <Receive_Notification_From_M0+0x20>)
 801264c:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 801264e:	4b05      	ldr	r3, [pc, #20]	; (8012664 <Receive_Notification_From_M0+0x24>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	2101      	movs	r1, #1
 8012654:	4618      	mov	r0, r3
 8012656:	f7fb fb0d 	bl	800dc74 <osThreadFlagsSet>
}
 801265a:	bf00      	nop
 801265c:	bd80      	pop	{r7, pc}
 801265e:	bf00      	nop
 8012660:	20004ac4 	.word	0x20004ac4
 8012664:	20004acc 	.word	0x20004acc

08012668 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 801266c:	22ff      	movs	r2, #255	; 0xff
 801266e:	2100      	movs	r1, #0
 8012670:	4812      	ldr	r0, [pc, #72]	; (80126bc <Send_CLI_To_M0+0x54>)
 8012672:	f001 f8ea 	bl	801384a <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8012676:	4b12      	ldr	r3, [pc, #72]	; (80126c0 <Send_CLI_To_M0+0x58>)
 8012678:	881b      	ldrh	r3, [r3, #0]
 801267a:	b29b      	uxth	r3, r3
 801267c:	461a      	mov	r2, r3
 801267e:	4911      	ldr	r1, [pc, #68]	; (80126c4 <Send_CLI_To_M0+0x5c>)
 8012680:	480e      	ldr	r0, [pc, #56]	; (80126bc <Send_CLI_To_M0+0x54>)
 8012682:	f001 f8d7 	bl	8013834 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8012686:	4b0e      	ldr	r3, [pc, #56]	; (80126c0 <Send_CLI_To_M0+0x58>)
 8012688:	881b      	ldrh	r3, [r3, #0]
 801268a:	b29b      	uxth	r3, r3
 801268c:	b2da      	uxtb	r2, r3
 801268e:	4b0e      	ldr	r3, [pc, #56]	; (80126c8 <Send_CLI_To_M0+0x60>)
 8012690:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8012692:	4b0d      	ldr	r3, [pc, #52]	; (80126c8 <Send_CLI_To_M0+0x60>)
 8012694:	2200      	movs	r2, #0
 8012696:	725a      	strb	r2, [r3, #9]
 8012698:	2200      	movs	r2, #0
 801269a:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 801269c:	4b0b      	ldr	r3, [pc, #44]	; (80126cc <Send_CLI_To_M0+0x64>)
 801269e:	2200      	movs	r2, #0
 80126a0:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 80126a2:	4b07      	ldr	r3, [pc, #28]	; (80126c0 <Send_CLI_To_M0+0x58>)
 80126a4:	2200      	movs	r2, #0
 80126a6:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 80126a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80126ac:	2100      	movs	r1, #0
 80126ae:	4805      	ldr	r0, [pc, #20]	; (80126c4 <Send_CLI_To_M0+0x5c>)
 80126b0:	f001 f8cb 	bl	801384a <memset>

  TL_CLI_SendCmd();
 80126b4:	f7f9 fe72 	bl	800c39c <TL_CLI_SendCmd>
}
 80126b8:	bf00      	nop
 80126ba:	bd80      	pop	{r7, pc}
 80126bc:	20030a58 	.word	0x20030a58
 80126c0:	20004ab8 	.word	0x20004ab8
 80126c4:	200049b8 	.word	0x200049b8
 80126c8:	20030a4c 	.word	0x20030a4c
 80126cc:	20004aba 	.word	0x20004aba

080126d0 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 80126d4:	f7f9 fe7e 	bl	800c3d4 <TL_THREAD_CliSendAck>
}
 80126d8:	bf00      	nop
 80126da:	bd80      	pop	{r7, pc}

080126dc <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 80126e0:	4a04      	ldr	r2, [pc, #16]	; (80126f4 <APP_THREAD_Init_UART_CLI+0x18>)
 80126e2:	2100      	movs	r1, #0
 80126e4:	4804      	ldr	r0, [pc, #16]	; (80126f8 <APP_THREAD_Init_UART_CLI+0x1c>)
 80126e6:	f7fb fa1f 	bl	800db28 <osThreadNew>
 80126ea:	4602      	mov	r2, r0
 80126ec:	4b03      	ldr	r3, [pc, #12]	; (80126fc <APP_THREAD_Init_UART_CLI+0x20>)
 80126ee:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80126f0:	bf00      	nop
 80126f2:	bd80      	pop	{r7, pc}
 80126f4:	08013d80 	.word	0x08013d80
 80126f8:	08012107 	.word	0x08012107
 80126fc:	20004ad0 	.word	0x20004ad0

08012700 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8012704:	4b06      	ldr	r3, [pc, #24]	; (8012720 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8012706:	4a07      	ldr	r2, [pc, #28]	; (8012724 <APP_THREAD_TL_THREAD_INIT+0x24>)
 8012708:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 801270a:	4b05      	ldr	r3, [pc, #20]	; (8012720 <APP_THREAD_TL_THREAD_INIT+0x20>)
 801270c:	4a06      	ldr	r2, [pc, #24]	; (8012728 <APP_THREAD_TL_THREAD_INIT+0x28>)
 801270e:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8012710:	4b03      	ldr	r3, [pc, #12]	; (8012720 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8012712:	4a06      	ldr	r2, [pc, #24]	; (801272c <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8012714:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8012716:	4802      	ldr	r0, [pc, #8]	; (8012720 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8012718:	f7f9 fe16 	bl	800c348 <TL_THREAD_Init>
}
 801271c:	bf00      	nop
 801271e:	bd80      	pop	{r7, pc}
 8012720:	200300d4 	.word	0x200300d4
 8012724:	20030834 	.word	0x20030834
 8012728:	20030940 	.word	0x20030940
 801272c:	20030a4c 	.word	0x20030a4c

08012730 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	7adb      	ldrb	r3, [r3, #11]
 8012740:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	330c      	adds	r3, #12
 8012746:	4906      	ldr	r1, [pc, #24]	; (8012760 <TL_THREAD_CliNotReceived+0x30>)
 8012748:	4618      	mov	r0, r3
 801274a:	f7ed fd19 	bl	8000180 <strcmp>
 801274e:	4603      	mov	r3, r0
 8012750:	2b00      	cmp	r3, #0
 8012752:	d101      	bne.n	8012758 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8012754:	f7ff ffbc 	bl	80126d0 <Send_CLI_Ack_For_OT>
  }
}
 8012758:	bf00      	nop
 801275a:	3710      	adds	r7, #16
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}
 8012760:	08013c04 	.word	0x08013c04

08012764 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8012768:	4b09      	ldr	r3, [pc, #36]	; (8012790 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d00d      	beq.n	801278c <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8012770:	4b07      	ldr	r3, [pc, #28]	; (8012790 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	2b01      	cmp	r3, #1
 8012776:	d904      	bls.n	8012782 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8012778:	2100      	movs	r1, #0
 801277a:	2000      	movs	r0, #0
 801277c:	f7ff faf8 	bl	8011d70 <APP_THREAD_Error>
 8012780:	e001      	b.n	8012786 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8012782:	f7fa fd45 	bl	800d210 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8012786:	4b02      	ldr	r3, [pc, #8]	; (8012790 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8012788:	2200      	movs	r2, #0
 801278a:	601a      	str	r2, [r3, #0]
  }
}
 801278c:	bf00      	nop
 801278e:	bd80      	pop	{r7, pc}
 8012790:	20004ac4 	.word	0x20004ac4

08012794 <LL_PWR_EnableBootC2>:
{
 8012794:	b480      	push	{r7}
 8012796:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8012798:	4b05      	ldr	r3, [pc, #20]	; (80127b0 <LL_PWR_EnableBootC2+0x1c>)
 801279a:	68db      	ldr	r3, [r3, #12]
 801279c:	4a04      	ldr	r2, [pc, #16]	; (80127b0 <LL_PWR_EnableBootC2+0x1c>)
 801279e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80127a2:	60d3      	str	r3, [r2, #12]
}
 80127a4:	bf00      	nop
 80127a6:	46bd      	mov	sp, r7
 80127a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ac:	4770      	bx	lr
 80127ae:	bf00      	nop
 80127b0:	58000400 	.word	0x58000400

080127b4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80127b4:	b480      	push	{r7}
 80127b6:	b083      	sub	sp, #12
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80127bc:	4b06      	ldr	r3, [pc, #24]	; (80127d8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80127be:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80127c2:	4905      	ldr	r1, [pc, #20]	; (80127d8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	4313      	orrs	r3, r2
 80127c8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80127cc:	bf00      	nop
 80127ce:	370c      	adds	r7, #12
 80127d0:	46bd      	mov	sp, r7
 80127d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d6:	4770      	bx	lr
 80127d8:	58000800 	.word	0x58000800

080127dc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80127dc:	b480      	push	{r7}
 80127de:	b083      	sub	sp, #12
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80127e4:	4b05      	ldr	r3, [pc, #20]	; (80127fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80127e6:	6a1a      	ldr	r2, [r3, #32]
 80127e8:	4904      	ldr	r1, [pc, #16]	; (80127fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	4313      	orrs	r3, r2
 80127ee:	620b      	str	r3, [r1, #32]
}
 80127f0:	bf00      	nop
 80127f2:	370c      	adds	r7, #12
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr
 80127fc:	58000800 	.word	0x58000800

08012800 <LL_AHB3_GRP1_EnableClock>:
{
 8012800:	b480      	push	{r7}
 8012802:	b085      	sub	sp, #20
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8012808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801280c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801280e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	4313      	orrs	r3, r2
 8012816:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8012818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801281c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	4013      	ands	r3, r2
 8012822:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012824:	68fb      	ldr	r3, [r7, #12]
}
 8012826:	bf00      	nop
 8012828:	3714      	adds	r7, #20
 801282a:	46bd      	mov	sp, r7
 801282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012830:	4770      	bx	lr

08012832 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8012832:	b480      	push	{r7}
 8012834:	b085      	sub	sp, #20
 8012836:	af00      	add	r7, sp, #0
 8012838:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801283a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801283e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8012842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	4313      	orrs	r3, r2
 801284a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801284e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012852:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4013      	ands	r3, r2
 801285a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801285c:	68fb      	ldr	r3, [r7, #12]
}
 801285e:	bf00      	nop
 8012860:	3714      	adds	r7, #20
 8012862:	46bd      	mov	sp, r7
 8012864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012868:	4770      	bx	lr

0801286a <LL_C1_IPCC_EnableIT_TXF>:
{
 801286a:	b480      	push	{r7}
 801286c:	b083      	sub	sp, #12
 801286e:	af00      	add	r7, sp, #0
 8012870:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	601a      	str	r2, [r3, #0]
}
 801287e:	bf00      	nop
 8012880:	370c      	adds	r7, #12
 8012882:	46bd      	mov	sp, r7
 8012884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012888:	4770      	bx	lr

0801288a <LL_C1_IPCC_EnableIT_RXO>:
{
 801288a:	b480      	push	{r7}
 801288c:	b083      	sub	sp, #12
 801288e:	af00      	add	r7, sp, #0
 8012890:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	f043 0201 	orr.w	r2, r3, #1
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	601a      	str	r2, [r3, #0]
}
 801289e:	bf00      	nop
 80128a0:	370c      	adds	r7, #12
 80128a2:	46bd      	mov	sp, r7
 80128a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a8:	4770      	bx	lr

080128aa <LL_C1_IPCC_EnableTransmitChannel>:
{
 80128aa:	b480      	push	{r7}
 80128ac:	b083      	sub	sp, #12
 80128ae:	af00      	add	r7, sp, #0
 80128b0:	6078      	str	r0, [r7, #4]
 80128b2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	685a      	ldr	r2, [r3, #4]
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	041b      	lsls	r3, r3, #16
 80128bc:	43db      	mvns	r3, r3
 80128be:	401a      	ands	r2, r3
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	605a      	str	r2, [r3, #4]
}
 80128c4:	bf00      	nop
 80128c6:	370c      	adds	r7, #12
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr

080128d0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80128d0:	b480      	push	{r7}
 80128d2:	b083      	sub	sp, #12
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
 80128d8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	685a      	ldr	r2, [r3, #4]
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	041b      	lsls	r3, r3, #16
 80128e2:	431a      	orrs	r2, r3
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	605a      	str	r2, [r3, #4]
}
 80128e8:	bf00      	nop
 80128ea:	370c      	adds	r7, #12
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr

080128f4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	685a      	ldr	r2, [r3, #4]
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	43db      	mvns	r3, r3
 8012906:	401a      	ands	r2, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	605a      	str	r2, [r3, #4]
}
 801290c:	bf00      	nop
 801290e:	370c      	adds	r7, #12
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr

08012918 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	685a      	ldr	r2, [r3, #4]
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	431a      	orrs	r2, r3
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	605a      	str	r2, [r3, #4]
}
 801292e:	bf00      	nop
 8012930:	370c      	adds	r7, #12
 8012932:	46bd      	mov	sp, r7
 8012934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012938:	4770      	bx	lr

0801293a <LL_C1_IPCC_ClearFlag_CHx>:
{
 801293a:	b480      	push	{r7}
 801293c:	b083      	sub	sp, #12
 801293e:	af00      	add	r7, sp, #0
 8012940:	6078      	str	r0, [r7, #4]
 8012942:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	683a      	ldr	r2, [r7, #0]
 8012948:	609a      	str	r2, [r3, #8]
}
 801294a:	bf00      	nop
 801294c:	370c      	adds	r7, #12
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr

08012956 <LL_C1_IPCC_SetFlag_CHx>:
{
 8012956:	b480      	push	{r7}
 8012958:	b083      	sub	sp, #12
 801295a:	af00      	add	r7, sp, #0
 801295c:	6078      	str	r0, [r7, #4]
 801295e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	041a      	lsls	r2, r3, #16
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	609a      	str	r2, [r3, #8]
}
 8012968:	bf00      	nop
 801296a:	370c      	adds	r7, #12
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr

08012974 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
 801297c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	68da      	ldr	r2, [r3, #12]
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	4013      	ands	r3, r2
 8012986:	683a      	ldr	r2, [r7, #0]
 8012988:	429a      	cmp	r2, r3
 801298a:	d101      	bne.n	8012990 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801298c:	2301      	movs	r3, #1
 801298e:	e000      	b.n	8012992 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8012990:	2300      	movs	r3, #0
}
 8012992:	4618      	mov	r0, r3
 8012994:	370c      	adds	r7, #12
 8012996:	46bd      	mov	sp, r7
 8012998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299c:	4770      	bx	lr

0801299e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801299e:	b480      	push	{r7}
 80129a0:	b083      	sub	sp, #12
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	6078      	str	r0, [r7, #4]
 80129a6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	69da      	ldr	r2, [r3, #28]
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	4013      	ands	r3, r2
 80129b0:	683a      	ldr	r2, [r7, #0]
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d101      	bne.n	80129ba <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80129b6:	2301      	movs	r3, #1
 80129b8:	e000      	b.n	80129bc <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80129ba:	2300      	movs	r3, #0
}
 80129bc:	4618      	mov	r0, r3
 80129be:	370c      	adds	r7, #12
 80129c0:	46bd      	mov	sp, r7
 80129c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c6:	4770      	bx	lr

080129c8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80129cc:	2102      	movs	r1, #2
 80129ce:	482a      	ldr	r0, [pc, #168]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 80129d0:	f7ff ffe5 	bl	801299e <LL_C2_IPCC_IsActiveFlag_CHx>
 80129d4:	4603      	mov	r3, r0
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d009      	beq.n	80129ee <HW_IPCC_Rx_Handler+0x26>
 80129da:	4b27      	ldr	r3, [pc, #156]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	43db      	mvns	r3, r3
 80129e0:	f003 0302 	and.w	r3, r3, #2
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d002      	beq.n	80129ee <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80129e8:	f000 f90a 	bl	8012c00 <HW_IPCC_SYS_EvtHandler>
 80129ec:	e041      	b.n	8012a72 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 80129ee:	2104      	movs	r1, #4
 80129f0:	4821      	ldr	r0, [pc, #132]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 80129f2:	f7ff ffd4 	bl	801299e <LL_C2_IPCC_IsActiveFlag_CHx>
 80129f6:	4603      	mov	r3, r0
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d009      	beq.n	8012a10 <HW_IPCC_Rx_Handler+0x48>
 80129fc:	4b1e      	ldr	r3, [pc, #120]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	43db      	mvns	r3, r3
 8012a02:	f003 0304 	and.w	r3, r3, #4
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d002      	beq.n	8012a10 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8012a0a:	f000 f953 	bl	8012cb4 <HW_IPCC_THREAD_NotEvtHandler>
 8012a0e:	e030      	b.n	8012a72 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8012a10:	2110      	movs	r1, #16
 8012a12:	4819      	ldr	r0, [pc, #100]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 8012a14:	f7ff ffc3 	bl	801299e <LL_C2_IPCC_IsActiveFlag_CHx>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d009      	beq.n	8012a32 <HW_IPCC_Rx_Handler+0x6a>
 8012a1e:	4b16      	ldr	r3, [pc, #88]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 8012a20:	685b      	ldr	r3, [r3, #4]
 8012a22:	43db      	mvns	r3, r3
 8012a24:	f003 0310 	and.w	r3, r3, #16
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d002      	beq.n	8012a32 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8012a2c:	f000 f94e 	bl	8012ccc <HW_IPCC_THREAD_CliNotEvtHandler>
 8012a30:	e01f      	b.n	8012a72 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8012a32:	2101      	movs	r1, #1
 8012a34:	4810      	ldr	r0, [pc, #64]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 8012a36:	f7ff ffb2 	bl	801299e <LL_C2_IPCC_IsActiveFlag_CHx>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d008      	beq.n	8012a52 <HW_IPCC_Rx_Handler+0x8a>
 8012a40:	4b0d      	ldr	r3, [pc, #52]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	f003 0301 	and.w	r3, r3, #1
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d102      	bne.n	8012a52 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8012a4c:	f000 f89c 	bl	8012b88 <HW_IPCC_BLE_EvtHandler>
 8012a50:	e00f      	b.n	8012a72 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8012a52:	2108      	movs	r1, #8
 8012a54:	4808      	ldr	r0, [pc, #32]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 8012a56:	f7ff ffa2 	bl	801299e <LL_C2_IPCC_IsActiveFlag_CHx>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d009      	beq.n	8012a74 <HW_IPCC_Rx_Handler+0xac>
 8012a60:	4b05      	ldr	r3, [pc, #20]	; (8012a78 <HW_IPCC_Rx_Handler+0xb0>)
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	43db      	mvns	r3, r3
 8012a66:	f003 0308 	and.w	r3, r3, #8
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d002      	beq.n	8012a74 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8012a6e:	f000 f979 	bl	8012d64 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8012a72:	bf00      	nop
 8012a74:	bf00      	nop
}
 8012a76:	bd80      	pop	{r7, pc}
 8012a78:	58000c00 	.word	0x58000c00

08012a7c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012a80:	2102      	movs	r1, #2
 8012a82:	482b      	ldr	r0, [pc, #172]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012a84:	f7ff ff76 	bl	8012974 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d109      	bne.n	8012aa2 <HW_IPCC_Tx_Handler+0x26>
 8012a8e:	4b28      	ldr	r3, [pc, #160]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	43db      	mvns	r3, r3
 8012a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d002      	beq.n	8012aa2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012a9c:	f000 f8a4 	bl	8012be8 <HW_IPCC_SYS_CmdEvtHandler>
 8012aa0:	e042      	b.n	8012b28 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8012aa2:	2104      	movs	r1, #4
 8012aa4:	4822      	ldr	r0, [pc, #136]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012aa6:	f7ff ff65 	bl	8012974 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d109      	bne.n	8012ac4 <HW_IPCC_Tx_Handler+0x48>
 8012ab0:	4b1f      	ldr	r3, [pc, #124]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012ab2:	685b      	ldr	r3, [r3, #4]
 8012ab4:	43db      	mvns	r3, r3
 8012ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d002      	beq.n	8012ac4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8012abe:	f000 f8ed 	bl	8012c9c <HW_IPCC_OT_CmdEvtHandler>
 8012ac2:	e031      	b.n	8012b28 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012ac4:	2102      	movs	r1, #2
 8012ac6:	481a      	ldr	r0, [pc, #104]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012ac8:	f7ff ff54 	bl	8012974 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012acc:	4603      	mov	r3, r0
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d109      	bne.n	8012ae6 <HW_IPCC_Tx_Handler+0x6a>
 8012ad2:	4b17      	ldr	r3, [pc, #92]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	43db      	mvns	r3, r3
 8012ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d002      	beq.n	8012ae6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012ae0:	f000 f882 	bl	8012be8 <HW_IPCC_SYS_CmdEvtHandler>
 8012ae4:	e020      	b.n	8012b28 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8012ae6:	2108      	movs	r1, #8
 8012ae8:	4811      	ldr	r0, [pc, #68]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012aea:	f7ff ff43 	bl	8012974 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012aee:	4603      	mov	r3, r0
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d109      	bne.n	8012b08 <HW_IPCC_Tx_Handler+0x8c>
 8012af4:	4b0e      	ldr	r3, [pc, #56]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012af6:	685b      	ldr	r3, [r3, #4]
 8012af8:	43db      	mvns	r3, r3
 8012afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d002      	beq.n	8012b08 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8012b02:	f000 f911 	bl	8012d28 <HW_IPCC_MM_FreeBufHandler>
 8012b06:	e00f      	b.n	8012b28 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8012b08:	2120      	movs	r1, #32
 8012b0a:	4809      	ldr	r0, [pc, #36]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012b0c:	f7ff ff32 	bl	8012974 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012b10:	4603      	mov	r3, r0
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d109      	bne.n	8012b2a <HW_IPCC_Tx_Handler+0xae>
 8012b16:	4b06      	ldr	r3, [pc, #24]	; (8012b30 <HW_IPCC_Tx_Handler+0xb4>)
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	43db      	mvns	r3, r3
 8012b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d002      	beq.n	8012b2a <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8012b24:	f000 f83c 	bl	8012ba0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8012b28:	bf00      	nop
 8012b2a:	bf00      	nop
}
 8012b2c:	bd80      	pop	{r7, pc}
 8012b2e:	bf00      	nop
 8012b30:	58000c00 	.word	0x58000c00

08012b34 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8012b38:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012b3c:	f7ff fe79 	bl	8012832 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8012b40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012b44:	f7ff fe36 	bl	80127b4 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8012b48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012b4c:	f7ff fe46 	bl	80127dc <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8012b50:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8012b52:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8012b54:	f7ff fe1e 	bl	8012794 <LL_PWR_EnableBootC2>

  return;
 8012b58:	bf00      	nop
}
 8012b5a:	bd80      	pop	{r7, pc}

08012b5c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8012b60:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012b64:	f7ff fe4c 	bl	8012800 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8012b68:	4806      	ldr	r0, [pc, #24]	; (8012b84 <HW_IPCC_Init+0x28>)
 8012b6a:	f7ff fe8e 	bl	801288a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8012b6e:	4805      	ldr	r0, [pc, #20]	; (8012b84 <HW_IPCC_Init+0x28>)
 8012b70:	f7ff fe7b 	bl	801286a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8012b74:	202c      	movs	r0, #44	; 0x2c
 8012b76:	f7f1 fd52 	bl	800461e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8012b7a:	202d      	movs	r0, #45	; 0x2d
 8012b7c:	f7f1 fd4f 	bl	800461e <HAL_NVIC_EnableIRQ>

  return;
 8012b80:	bf00      	nop
}
 8012b82:	bd80      	pop	{r7, pc}
 8012b84:	58000c00 	.word	0x58000c00

08012b88 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8012b8c:	f7f9 fb24 	bl	800c1d8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8012b90:	2101      	movs	r1, #1
 8012b92:	4802      	ldr	r0, [pc, #8]	; (8012b9c <HW_IPCC_BLE_EvtHandler+0x14>)
 8012b94:	f7ff fed1 	bl	801293a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012b98:	bf00      	nop
}
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	58000c00 	.word	0x58000c00

08012ba0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8012ba4:	2120      	movs	r1, #32
 8012ba6:	4803      	ldr	r0, [pc, #12]	; (8012bb4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8012ba8:	f7ff fe92 	bl	80128d0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8012bac:	f7f9 fb44 	bl	800c238 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8012bb0:	bf00      	nop
}
 8012bb2:	bd80      	pop	{r7, pc}
 8012bb4:	58000c00 	.word	0x58000c00

08012bb8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012bbc:	2102      	movs	r1, #2
 8012bbe:	4802      	ldr	r0, [pc, #8]	; (8012bc8 <HW_IPCC_SYS_Init+0x10>)
 8012bc0:	f7ff fe98 	bl	80128f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012bc4:	bf00      	nop
}
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	58000c00 	.word	0x58000c00

08012bcc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012bd0:	2102      	movs	r1, #2
 8012bd2:	4804      	ldr	r0, [pc, #16]	; (8012be4 <HW_IPCC_SYS_SendCmd+0x18>)
 8012bd4:	f7ff febf 	bl	8012956 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012bd8:	2102      	movs	r1, #2
 8012bda:	4802      	ldr	r0, [pc, #8]	; (8012be4 <HW_IPCC_SYS_SendCmd+0x18>)
 8012bdc:	f7ff fe65 	bl	80128aa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012be0:	bf00      	nop
}
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	58000c00 	.word	0x58000c00

08012be8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012bec:	2102      	movs	r1, #2
 8012bee:	4803      	ldr	r0, [pc, #12]	; (8012bfc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8012bf0:	f7ff fe6e 	bl	80128d0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8012bf4:	f7f9 fb70 	bl	800c2d8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8012bf8:	bf00      	nop
}
 8012bfa:	bd80      	pop	{r7, pc}
 8012bfc:	58000c00 	.word	0x58000c00

08012c00 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8012c04:	f7f9 fb7e 	bl	800c304 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012c08:	2102      	movs	r1, #2
 8012c0a:	4802      	ldr	r0, [pc, #8]	; (8012c14 <HW_IPCC_SYS_EvtHandler+0x14>)
 8012c0c:	f7ff fe95 	bl	801293a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012c10:	bf00      	nop
}
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	58000c00 	.word	0x58000c00

08012c18 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012c1c:	2104      	movs	r1, #4
 8012c1e:	4804      	ldr	r0, [pc, #16]	; (8012c30 <HW_IPCC_THREAD_Init+0x18>)
 8012c20:	f7ff fe68 	bl	80128f4 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012c24:	2110      	movs	r1, #16
 8012c26:	4802      	ldr	r0, [pc, #8]	; (8012c30 <HW_IPCC_THREAD_Init+0x18>)
 8012c28:	f7ff fe64 	bl	80128f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012c2c:	bf00      	nop
}
 8012c2e:	bd80      	pop	{r7, pc}
 8012c30:	58000c00 	.word	0x58000c00

08012c34 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8012c38:	2104      	movs	r1, #4
 8012c3a:	4804      	ldr	r0, [pc, #16]	; (8012c4c <HW_IPCC_OT_SendCmd+0x18>)
 8012c3c:	f7ff fe8b 	bl	8012956 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8012c40:	2104      	movs	r1, #4
 8012c42:	4802      	ldr	r0, [pc, #8]	; (8012c4c <HW_IPCC_OT_SendCmd+0x18>)
 8012c44:	f7ff fe31 	bl	80128aa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012c48:	bf00      	nop
}
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	58000c00 	.word	0x58000c00

08012c50 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8012c54:	2110      	movs	r1, #16
 8012c56:	4802      	ldr	r0, [pc, #8]	; (8012c60 <HW_IPCC_CLI_SendCmd+0x10>)
 8012c58:	f7ff fe7d 	bl	8012956 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012c5c:	bf00      	nop
}
 8012c5e:	bd80      	pop	{r7, pc}
 8012c60:	58000c00 	.word	0x58000c00

08012c64 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012c68:	2104      	movs	r1, #4
 8012c6a:	4804      	ldr	r0, [pc, #16]	; (8012c7c <HW_IPCC_THREAD_SendAck+0x18>)
 8012c6c:	f7ff fe65 	bl	801293a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012c70:	2104      	movs	r1, #4
 8012c72:	4802      	ldr	r0, [pc, #8]	; (8012c7c <HW_IPCC_THREAD_SendAck+0x18>)
 8012c74:	f7ff fe3e 	bl	80128f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012c78:	bf00      	nop
}
 8012c7a:	bd80      	pop	{r7, pc}
 8012c7c:	58000c00 	.word	0x58000c00

08012c80 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012c84:	2110      	movs	r1, #16
 8012c86:	4804      	ldr	r0, [pc, #16]	; (8012c98 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8012c88:	f7ff fe57 	bl	801293a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012c8c:	2110      	movs	r1, #16
 8012c8e:	4802      	ldr	r0, [pc, #8]	; (8012c98 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8012c90:	f7ff fe30 	bl	80128f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012c94:	bf00      	nop
}
 8012c96:	bd80      	pop	{r7, pc}
 8012c98:	58000c00 	.word	0x58000c00

08012c9c <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8012ca0:	2104      	movs	r1, #4
 8012ca2:	4803      	ldr	r0, [pc, #12]	; (8012cb0 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8012ca4:	f7ff fe14 	bl	80128d0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8012ca8:	f7f9 fba2 	bl	800c3f0 <HW_IPCC_OT_CmdEvtNot>

  return;
 8012cac:	bf00      	nop
}
 8012cae:	bd80      	pop	{r7, pc}
 8012cb0:	58000c00 	.word	0x58000c00

08012cb4 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012cb8:	2104      	movs	r1, #4
 8012cba:	4803      	ldr	r0, [pc, #12]	; (8012cc8 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8012cbc:	f7ff fe2c 	bl	8012918 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8012cc0:	f7f9 fba2 	bl	800c408 <HW_IPCC_THREAD_EvtNot>

  return;
 8012cc4:	bf00      	nop
}
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	58000c00 	.word	0x58000c00

08012ccc <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012cd0:	2110      	movs	r1, #16
 8012cd2:	4803      	ldr	r0, [pc, #12]	; (8012ce0 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8012cd4:	f7ff fe20 	bl	8012918 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8012cd8:	f7f9 fba2 	bl	800c420 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8012cdc:	bf00      	nop
}
 8012cde:	bd80      	pop	{r7, pc}
 8012ce0:	58000c00 	.word	0x58000c00

08012ce4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b082      	sub	sp, #8
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8012cec:	2108      	movs	r1, #8
 8012cee:	480c      	ldr	r0, [pc, #48]	; (8012d20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012cf0:	f7ff fe40 	bl	8012974 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d007      	beq.n	8012d0a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8012cfa:	4a0a      	ldr	r2, [pc, #40]	; (8012d24 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d00:	2108      	movs	r1, #8
 8012d02:	4807      	ldr	r0, [pc, #28]	; (8012d20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012d04:	f7ff fdd1 	bl	80128aa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8012d08:	e006      	b.n	8012d18 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d0e:	2108      	movs	r1, #8
 8012d10:	4803      	ldr	r0, [pc, #12]	; (8012d20 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8012d12:	f7ff fe20 	bl	8012956 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8012d16:	bf00      	nop
}
 8012d18:	3708      	adds	r7, #8
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	58000c00 	.word	0x58000c00
 8012d24:	20004bb4 	.word	0x20004bb4

08012d28 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d2c:	2108      	movs	r1, #8
 8012d2e:	4806      	ldr	r0, [pc, #24]	; (8012d48 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012d30:	f7ff fdce 	bl	80128d0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8012d34:	4b05      	ldr	r3, [pc, #20]	; (8012d4c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012d3a:	2108      	movs	r1, #8
 8012d3c:	4802      	ldr	r0, [pc, #8]	; (8012d48 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012d3e:	f7ff fe0a 	bl	8012956 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012d42:	bf00      	nop
}
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	58000c00 	.word	0x58000c00
 8012d4c:	20004bb4 	.word	0x20004bb4

08012d50 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012d54:	2108      	movs	r1, #8
 8012d56:	4802      	ldr	r0, [pc, #8]	; (8012d60 <HW_IPCC_TRACES_Init+0x10>)
 8012d58:	f7ff fdcc 	bl	80128f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012d5c:	bf00      	nop
}
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	58000c00 	.word	0x58000c00

08012d64 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8012d68:	f7f9 fbec 	bl	800c544 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012d6c:	2108      	movs	r1, #8
 8012d6e:	4802      	ldr	r0, [pc, #8]	; (8012d78 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8012d70:	f7ff fde3 	bl	801293a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012d74:	bf00      	nop
}
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	58000c00 	.word	0x58000c00

08012d7c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012d80:	2200      	movs	r2, #0
 8012d82:	4912      	ldr	r1, [pc, #72]	; (8012dcc <MX_USB_Device_Init+0x50>)
 8012d84:	4812      	ldr	r0, [pc, #72]	; (8012dd0 <MX_USB_Device_Init+0x54>)
 8012d86:	f7f7 fef1 	bl	800ab6c <USBD_Init>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d001      	beq.n	8012d94 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012d90:	f7ef fa40 	bl	8002214 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012d94:	490f      	ldr	r1, [pc, #60]	; (8012dd4 <MX_USB_Device_Init+0x58>)
 8012d96:	480e      	ldr	r0, [pc, #56]	; (8012dd0 <MX_USB_Device_Init+0x54>)
 8012d98:	f7f7 ff18 	bl	800abcc <USBD_RegisterClass>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d001      	beq.n	8012da6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012da2:	f7ef fa37 	bl	8002214 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012da6:	490c      	ldr	r1, [pc, #48]	; (8012dd8 <MX_USB_Device_Init+0x5c>)
 8012da8:	4809      	ldr	r0, [pc, #36]	; (8012dd0 <MX_USB_Device_Init+0x54>)
 8012daa:	f7f7 fe39 	bl	800aa20 <USBD_CDC_RegisterInterface>
 8012dae:	4603      	mov	r3, r0
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d001      	beq.n	8012db8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012db4:	f7ef fa2e 	bl	8002214 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012db8:	4805      	ldr	r0, [pc, #20]	; (8012dd0 <MX_USB_Device_Init+0x54>)
 8012dba:	f7f7 ff2e 	bl	800ac1a <USBD_Start>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d001      	beq.n	8012dc8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012dc4:	f7ef fa26 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012dc8:	bf00      	nop
 8012dca:	bd80      	pop	{r7, pc}
 8012dcc:	20000170 	.word	0x20000170
 8012dd0:	20005044 	.word	0x20005044
 8012dd4:	20000034 	.word	0x20000034
 8012dd8:	2000015c 	.word	0x2000015c

08012ddc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012de0:	2200      	movs	r2, #0
 8012de2:	4905      	ldr	r1, [pc, #20]	; (8012df8 <CDC_Init_FS+0x1c>)
 8012de4:	4805      	ldr	r0, [pc, #20]	; (8012dfc <CDC_Init_FS+0x20>)
 8012de6:	f7f7 fe30 	bl	800aa4a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012dea:	4905      	ldr	r1, [pc, #20]	; (8012e00 <CDC_Init_FS+0x24>)
 8012dec:	4803      	ldr	r0, [pc, #12]	; (8012dfc <CDC_Init_FS+0x20>)
 8012dee:	f7f7 fe4a 	bl	800aa86 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012df2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012df4:	4618      	mov	r0, r3
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	20005b14 	.word	0x20005b14
 8012dfc:	20005044 	.word	0x20005044
 8012e00:	20005314 	.word	0x20005314

08012e04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012e04:	b480      	push	{r7}
 8012e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012e08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e12:	4770      	bx	lr

08012e14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012e14:	b480      	push	{r7}
 8012e16:	b083      	sub	sp, #12
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	6039      	str	r1, [r7, #0]
 8012e1e:	71fb      	strb	r3, [r7, #7]
 8012e20:	4613      	mov	r3, r2
 8012e22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012e24:	79fb      	ldrb	r3, [r7, #7]
 8012e26:	2b23      	cmp	r3, #35	; 0x23
 8012e28:	d84a      	bhi.n	8012ec0 <CDC_Control_FS+0xac>
 8012e2a:	a201      	add	r2, pc, #4	; (adr r2, 8012e30 <CDC_Control_FS+0x1c>)
 8012e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e30:	08012ec1 	.word	0x08012ec1
 8012e34:	08012ec1 	.word	0x08012ec1
 8012e38:	08012ec1 	.word	0x08012ec1
 8012e3c:	08012ec1 	.word	0x08012ec1
 8012e40:	08012ec1 	.word	0x08012ec1
 8012e44:	08012ec1 	.word	0x08012ec1
 8012e48:	08012ec1 	.word	0x08012ec1
 8012e4c:	08012ec1 	.word	0x08012ec1
 8012e50:	08012ec1 	.word	0x08012ec1
 8012e54:	08012ec1 	.word	0x08012ec1
 8012e58:	08012ec1 	.word	0x08012ec1
 8012e5c:	08012ec1 	.word	0x08012ec1
 8012e60:	08012ec1 	.word	0x08012ec1
 8012e64:	08012ec1 	.word	0x08012ec1
 8012e68:	08012ec1 	.word	0x08012ec1
 8012e6c:	08012ec1 	.word	0x08012ec1
 8012e70:	08012ec1 	.word	0x08012ec1
 8012e74:	08012ec1 	.word	0x08012ec1
 8012e78:	08012ec1 	.word	0x08012ec1
 8012e7c:	08012ec1 	.word	0x08012ec1
 8012e80:	08012ec1 	.word	0x08012ec1
 8012e84:	08012ec1 	.word	0x08012ec1
 8012e88:	08012ec1 	.word	0x08012ec1
 8012e8c:	08012ec1 	.word	0x08012ec1
 8012e90:	08012ec1 	.word	0x08012ec1
 8012e94:	08012ec1 	.word	0x08012ec1
 8012e98:	08012ec1 	.word	0x08012ec1
 8012e9c:	08012ec1 	.word	0x08012ec1
 8012ea0:	08012ec1 	.word	0x08012ec1
 8012ea4:	08012ec1 	.word	0x08012ec1
 8012ea8:	08012ec1 	.word	0x08012ec1
 8012eac:	08012ec1 	.word	0x08012ec1
 8012eb0:	08012ec1 	.word	0x08012ec1
 8012eb4:	08012ec1 	.word	0x08012ec1
 8012eb8:	08012ec1 	.word	0x08012ec1
 8012ebc:	08012ec1 	.word	0x08012ec1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012ec0:	bf00      	nop
  }

  return (USBD_OK);
 8012ec2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	370c      	adds	r7, #12
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ece:	4770      	bx	lr

08012ed0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012eda:	6879      	ldr	r1, [r7, #4]
 8012edc:	4805      	ldr	r0, [pc, #20]	; (8012ef4 <CDC_Receive_FS+0x24>)
 8012ede:	f7f7 fdd2 	bl	800aa86 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012ee2:	4804      	ldr	r0, [pc, #16]	; (8012ef4 <CDC_Receive_FS+0x24>)
 8012ee4:	f7f7 fe18 	bl	800ab18 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012ee8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3708      	adds	r7, #8
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}
 8012ef2:	bf00      	nop
 8012ef4:	20005044 	.word	0x20005044

08012ef8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b084      	sub	sp, #16
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	460b      	mov	r3, r1
 8012f02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012f04:	2300      	movs	r3, #0
 8012f06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012f08:	4b0d      	ldr	r3, [pc, #52]	; (8012f40 <CDC_Transmit_FS+0x48>)
 8012f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d001      	beq.n	8012f1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	e00b      	b.n	8012f36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012f1e:	887b      	ldrh	r3, [r7, #2]
 8012f20:	461a      	mov	r2, r3
 8012f22:	6879      	ldr	r1, [r7, #4]
 8012f24:	4806      	ldr	r0, [pc, #24]	; (8012f40 <CDC_Transmit_FS+0x48>)
 8012f26:	f7f7 fd90 	bl	800aa4a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012f2a:	4805      	ldr	r0, [pc, #20]	; (8012f40 <CDC_Transmit_FS+0x48>)
 8012f2c:	f7f7 fdc4 	bl	800aab8 <USBD_CDC_TransmitPacket>
 8012f30:	4603      	mov	r3, r0
 8012f32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3710      	adds	r7, #16
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	20005044 	.word	0x20005044

08012f44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012f44:	b480      	push	{r7}
 8012f46:	b087      	sub	sp, #28
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	60f8      	str	r0, [r7, #12]
 8012f4c:	60b9      	str	r1, [r7, #8]
 8012f4e:	4613      	mov	r3, r2
 8012f50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012f52:	2300      	movs	r3, #0
 8012f54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	371c      	adds	r7, #28
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr
	...

08012f68 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	4603      	mov	r3, r0
 8012f70:	6039      	str	r1, [r7, #0]
 8012f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	2212      	movs	r2, #18
 8012f78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012f7a:	4b03      	ldr	r3, [pc, #12]	; (8012f88 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	370c      	adds	r7, #12
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr
 8012f88:	2000018c 	.word	0x2000018c

08012f8c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b083      	sub	sp, #12
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	4603      	mov	r3, r0
 8012f94:	6039      	str	r1, [r7, #0]
 8012f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	2204      	movs	r2, #4
 8012f9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012f9e:	4b03      	ldr	r3, [pc, #12]	; (8012fac <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	370c      	adds	r7, #12
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012faa:	4770      	bx	lr
 8012fac:	200001a0 	.word	0x200001a0

08012fb0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b082      	sub	sp, #8
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	6039      	str	r1, [r7, #0]
 8012fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012fbc:	79fb      	ldrb	r3, [r7, #7]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d105      	bne.n	8012fce <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012fc2:	683a      	ldr	r2, [r7, #0]
 8012fc4:	4907      	ldr	r1, [pc, #28]	; (8012fe4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012fc6:	4808      	ldr	r0, [pc, #32]	; (8012fe8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012fc8:	f7f8 fdd8 	bl	800bb7c <USBD_GetString>
 8012fcc:	e004      	b.n	8012fd8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012fce:	683a      	ldr	r2, [r7, #0]
 8012fd0:	4904      	ldr	r1, [pc, #16]	; (8012fe4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012fd2:	4805      	ldr	r0, [pc, #20]	; (8012fe8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012fd4:	f7f8 fdd2 	bl	800bb7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012fd8:	4b02      	ldr	r3, [pc, #8]	; (8012fe4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3708      	adds	r7, #8
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}
 8012fe2:	bf00      	nop
 8012fe4:	20006314 	.word	0x20006314
 8012fe8:	08013c08 	.word	0x08013c08

08012fec <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	6039      	str	r1, [r7, #0]
 8012ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012ff8:	683a      	ldr	r2, [r7, #0]
 8012ffa:	4904      	ldr	r1, [pc, #16]	; (801300c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012ffc:	4804      	ldr	r0, [pc, #16]	; (8013010 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8012ffe:	f7f8 fdbd 	bl	800bb7c <USBD_GetString>
  return USBD_StrDesc;
 8013002:	4b02      	ldr	r3, [pc, #8]	; (801300c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8013004:	4618      	mov	r0, r3
 8013006:	3708      	adds	r7, #8
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	20006314 	.word	0x20006314
 8013010:	08013c14 	.word	0x08013c14

08013014 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b082      	sub	sp, #8
 8013018:	af00      	add	r7, sp, #0
 801301a:	4603      	mov	r3, r0
 801301c:	6039      	str	r1, [r7, #0]
 801301e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	221a      	movs	r2, #26
 8013024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013026:	f000 f843 	bl	80130b0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801302a:	4b02      	ldr	r3, [pc, #8]	; (8013034 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801302c:	4618      	mov	r0, r3
 801302e:	3708      	adds	r7, #8
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}
 8013034:	200001a4 	.word	0x200001a4

08013038 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
 801303e:	4603      	mov	r3, r0
 8013040:	6039      	str	r1, [r7, #0]
 8013042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013044:	79fb      	ldrb	r3, [r7, #7]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d105      	bne.n	8013056 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801304a:	683a      	ldr	r2, [r7, #0]
 801304c:	4907      	ldr	r1, [pc, #28]	; (801306c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801304e:	4808      	ldr	r0, [pc, #32]	; (8013070 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013050:	f7f8 fd94 	bl	800bb7c <USBD_GetString>
 8013054:	e004      	b.n	8013060 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013056:	683a      	ldr	r2, [r7, #0]
 8013058:	4904      	ldr	r1, [pc, #16]	; (801306c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801305a:	4805      	ldr	r0, [pc, #20]	; (8013070 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801305c:	f7f8 fd8e 	bl	800bb7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8013060:	4b02      	ldr	r3, [pc, #8]	; (801306c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8013062:	4618      	mov	r0, r3
 8013064:	3708      	adds	r7, #8
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	20006314 	.word	0x20006314
 8013070:	08013c1c 	.word	0x08013c1c

08013074 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b082      	sub	sp, #8
 8013078:	af00      	add	r7, sp, #0
 801307a:	4603      	mov	r3, r0
 801307c:	6039      	str	r1, [r7, #0]
 801307e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013080:	79fb      	ldrb	r3, [r7, #7]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d105      	bne.n	8013092 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8013086:	683a      	ldr	r2, [r7, #0]
 8013088:	4907      	ldr	r1, [pc, #28]	; (80130a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801308a:	4808      	ldr	r0, [pc, #32]	; (80130ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801308c:	f7f8 fd76 	bl	800bb7c <USBD_GetString>
 8013090:	e004      	b.n	801309c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8013092:	683a      	ldr	r2, [r7, #0]
 8013094:	4904      	ldr	r1, [pc, #16]	; (80130a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8013096:	4805      	ldr	r0, [pc, #20]	; (80130ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8013098:	f7f8 fd70 	bl	800bb7c <USBD_GetString>
  }
  return USBD_StrDesc;
 801309c:	4b02      	ldr	r3, [pc, #8]	; (80130a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3708      	adds	r7, #8
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	20006314 	.word	0x20006314
 80130ac:	08013c28 	.word	0x08013c28

080130b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b084      	sub	sp, #16
 80130b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80130b6:	4b0f      	ldr	r3, [pc, #60]	; (80130f4 <Get_SerialNum+0x44>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80130bc:	4b0e      	ldr	r3, [pc, #56]	; (80130f8 <Get_SerialNum+0x48>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80130c2:	4b0e      	ldr	r3, [pc, #56]	; (80130fc <Get_SerialNum+0x4c>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	4413      	add	r3, r2
 80130ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d009      	beq.n	80130ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80130d6:	2208      	movs	r2, #8
 80130d8:	4909      	ldr	r1, [pc, #36]	; (8013100 <Get_SerialNum+0x50>)
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	f000 f814 	bl	8013108 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80130e0:	2204      	movs	r2, #4
 80130e2:	4908      	ldr	r1, [pc, #32]	; (8013104 <Get_SerialNum+0x54>)
 80130e4:	68b8      	ldr	r0, [r7, #8]
 80130e6:	f000 f80f 	bl	8013108 <IntToUnicode>
  }
}
 80130ea:	bf00      	nop
 80130ec:	3710      	adds	r7, #16
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
 80130f2:	bf00      	nop
 80130f4:	1fff7590 	.word	0x1fff7590
 80130f8:	1fff7594 	.word	0x1fff7594
 80130fc:	1fff7598 	.word	0x1fff7598
 8013100:	200001a6 	.word	0x200001a6
 8013104:	200001b6 	.word	0x200001b6

08013108 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013108:	b480      	push	{r7}
 801310a:	b087      	sub	sp, #28
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	4613      	mov	r3, r2
 8013114:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013116:	2300      	movs	r3, #0
 8013118:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801311a:	2300      	movs	r3, #0
 801311c:	75fb      	strb	r3, [r7, #23]
 801311e:	e027      	b.n	8013170 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	0f1b      	lsrs	r3, r3, #28
 8013124:	2b09      	cmp	r3, #9
 8013126:	d80b      	bhi.n	8013140 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	0f1b      	lsrs	r3, r3, #28
 801312c:	b2da      	uxtb	r2, r3
 801312e:	7dfb      	ldrb	r3, [r7, #23]
 8013130:	005b      	lsls	r3, r3, #1
 8013132:	4619      	mov	r1, r3
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	440b      	add	r3, r1
 8013138:	3230      	adds	r2, #48	; 0x30
 801313a:	b2d2      	uxtb	r2, r2
 801313c:	701a      	strb	r2, [r3, #0]
 801313e:	e00a      	b.n	8013156 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	0f1b      	lsrs	r3, r3, #28
 8013144:	b2da      	uxtb	r2, r3
 8013146:	7dfb      	ldrb	r3, [r7, #23]
 8013148:	005b      	lsls	r3, r3, #1
 801314a:	4619      	mov	r1, r3
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	440b      	add	r3, r1
 8013150:	3237      	adds	r2, #55	; 0x37
 8013152:	b2d2      	uxtb	r2, r2
 8013154:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	011b      	lsls	r3, r3, #4
 801315a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801315c:	7dfb      	ldrb	r3, [r7, #23]
 801315e:	005b      	lsls	r3, r3, #1
 8013160:	3301      	adds	r3, #1
 8013162:	68ba      	ldr	r2, [r7, #8]
 8013164:	4413      	add	r3, r2
 8013166:	2200      	movs	r2, #0
 8013168:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801316a:	7dfb      	ldrb	r3, [r7, #23]
 801316c:	3301      	adds	r3, #1
 801316e:	75fb      	strb	r3, [r7, #23]
 8013170:	7dfa      	ldrb	r2, [r7, #23]
 8013172:	79fb      	ldrb	r3, [r7, #7]
 8013174:	429a      	cmp	r2, r3
 8013176:	d3d3      	bcc.n	8013120 <IntToUnicode+0x18>
  }
}
 8013178:	bf00      	nop
 801317a:	371c      	adds	r7, #28
 801317c:	46bd      	mov	sp, r7
 801317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013182:	4770      	bx	lr

08013184 <LL_AHB2_GRP1_EnableClock>:
{
 8013184:	b480      	push	{r7}
 8013186:	b085      	sub	sp, #20
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	4313      	orrs	r3, r2
 801319a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801319c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	4013      	ands	r3, r2
 80131a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80131a8:	68fb      	ldr	r3, [r7, #12]
}
 80131aa:	bf00      	nop
 80131ac:	3714      	adds	r7, #20
 80131ae:	46bd      	mov	sp, r7
 80131b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b4:	4770      	bx	lr

080131b6 <LL_APB1_GRP1_EnableClock>:
{
 80131b6:	b480      	push	{r7}
 80131b8:	b085      	sub	sp, #20
 80131ba:	af00      	add	r7, sp, #0
 80131bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80131be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80131c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	4313      	orrs	r3, r2
 80131cc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80131ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80131d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	4013      	ands	r3, r2
 80131d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80131da:	68fb      	ldr	r3, [r7, #12]
}
 80131dc:	bf00      	nop
 80131de:	3714      	adds	r7, #20
 80131e0:	46bd      	mov	sp, r7
 80131e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e6:	4770      	bx	lr

080131e8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b088      	sub	sp, #32
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80131f0:	f107 030c 	add.w	r3, r7, #12
 80131f4:	2200      	movs	r2, #0
 80131f6:	601a      	str	r2, [r3, #0]
 80131f8:	605a      	str	r2, [r3, #4]
 80131fa:	609a      	str	r2, [r3, #8]
 80131fc:	60da      	str	r2, [r3, #12]
 80131fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4a13      	ldr	r2, [pc, #76]	; (8013254 <HAL_PCD_MspInit+0x6c>)
 8013206:	4293      	cmp	r3, r2
 8013208:	d120      	bne.n	801324c <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801320a:	2001      	movs	r0, #1
 801320c:	f7ff ffba 	bl	8013184 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013210:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013214:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013216:	2302      	movs	r3, #2
 8013218:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801321a:	2300      	movs	r3, #0
 801321c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801321e:	2303      	movs	r3, #3
 8013220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8013222:	230a      	movs	r3, #10
 8013224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013226:	f107 030c 	add.w	r3, r7, #12
 801322a:	4619      	mov	r1, r3
 801322c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013230:	f7f1 fca6 	bl	8004b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8013234:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8013238:	f7ff ffbd 	bl	80131b6 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801323c:	2200      	movs	r2, #0
 801323e:	2105      	movs	r1, #5
 8013240:	2014      	movs	r0, #20
 8013242:	f7f1 f9d2 	bl	80045ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8013246:	2014      	movs	r0, #20
 8013248:	f7f1 f9e9 	bl	800461e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801324c:	bf00      	nop
 801324e:	3720      	adds	r7, #32
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	40006800 	.word	0x40006800

08013258 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	f503 730c 	add.w	r3, r3, #560	; 0x230
 801326c:	4619      	mov	r1, r3
 801326e:	4610      	mov	r0, r2
 8013270:	f7f7 fd1e 	bl	800acb0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8013274:	bf00      	nop
 8013276:	3708      	adds	r7, #8
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}

0801327c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	460b      	mov	r3, r1
 8013286:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 801328e:	78fb      	ldrb	r3, [r7, #3]
 8013290:	687a      	ldr	r2, [r7, #4]
 8013292:	015b      	lsls	r3, r3, #5
 8013294:	4413      	add	r3, r2
 8013296:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801329a:	681a      	ldr	r2, [r3, #0]
 801329c:	78fb      	ldrb	r3, [r7, #3]
 801329e:	4619      	mov	r1, r3
 80132a0:	f7f7 fd59 	bl	800ad56 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80132a4:	bf00      	nop
 80132a6:	3708      	adds	r7, #8
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}

080132ac <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b082      	sub	sp, #8
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	460b      	mov	r3, r1
 80132b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80132be:	78fb      	ldrb	r3, [r7, #3]
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	015b      	lsls	r3, r3, #5
 80132c4:	4413      	add	r3, r2
 80132c6:	333c      	adds	r3, #60	; 0x3c
 80132c8:	681a      	ldr	r2, [r3, #0]
 80132ca:	78fb      	ldrb	r3, [r7, #3]
 80132cc:	4619      	mov	r1, r3
 80132ce:	f7f7 fda5 	bl	800ae1c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80132d2:	bf00      	nop
 80132d4:	3708      	adds	r7, #8
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}

080132da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132da:	b580      	push	{r7, lr}
 80132dc:	b082      	sub	sp, #8
 80132de:	af00      	add	r7, sp, #0
 80132e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7f7 feb9 	bl	800b060 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80132ee:	bf00      	nop
 80132f0:	3708      	adds	r7, #8
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}

080132f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132f6:	b580      	push	{r7, lr}
 80132f8:	b084      	sub	sp, #16
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80132fe:	2301      	movs	r3, #1
 8013300:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	689b      	ldr	r3, [r3, #8]
 8013306:	2b02      	cmp	r3, #2
 8013308:	d001      	beq.n	801330e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801330a:	f7ee ff83 	bl	8002214 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013314:	7bfa      	ldrb	r2, [r7, #15]
 8013316:	4611      	mov	r1, r2
 8013318:	4618      	mov	r0, r3
 801331a:	f7f7 fe63 	bl	800afe4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013324:	4618      	mov	r0, r3
 8013326:	f7f7 fe0f 	bl	800af48 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801332a:	bf00      	nop
 801332c:	3710      	adds	r7, #16
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
	...

08013334 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013342:	4618      	mov	r0, r3
 8013344:	f7f7 fe5e 	bl	800b004 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	699b      	ldr	r3, [r3, #24]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d005      	beq.n	801335c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013350:	4b04      	ldr	r3, [pc, #16]	; (8013364 <HAL_PCD_SuspendCallback+0x30>)
 8013352:	691b      	ldr	r3, [r3, #16]
 8013354:	4a03      	ldr	r2, [pc, #12]	; (8013364 <HAL_PCD_SuspendCallback+0x30>)
 8013356:	f043 0306 	orr.w	r3, r3, #6
 801335a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801335c:	bf00      	nop
 801335e:	3708      	adds	r7, #8
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	e000ed00 	.word	0xe000ed00

08013368 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b082      	sub	sp, #8
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	699b      	ldr	r3, [r3, #24]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d007      	beq.n	8013388 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013378:	4b08      	ldr	r3, [pc, #32]	; (801339c <HAL_PCD_ResumeCallback+0x34>)
 801337a:	691b      	ldr	r3, [r3, #16]
 801337c:	4a07      	ldr	r2, [pc, #28]	; (801339c <HAL_PCD_ResumeCallback+0x34>)
 801337e:	f023 0306 	bic.w	r3, r3, #6
 8013382:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013384:	f000 f9be 	bl	8013704 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801338e:	4618      	mov	r0, r3
 8013390:	f7f7 fe4e 	bl	800b030 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8013394:	bf00      	nop
 8013396:	3708      	adds	r7, #8
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}
 801339c:	e000ed00 	.word	0xe000ed00

080133a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80133a8:	4a2c      	ldr	r2, [pc, #176]	; (801345c <USBD_LL_Init+0xbc>)
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	4a2a      	ldr	r2, [pc, #168]	; (801345c <USBD_LL_Init+0xbc>)
 80133b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80133b8:	f7f2 fcf2 	bl	8005da0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80133bc:	4b27      	ldr	r3, [pc, #156]	; (801345c <USBD_LL_Init+0xbc>)
 80133be:	4a28      	ldr	r2, [pc, #160]	; (8013460 <USBD_LL_Init+0xc0>)
 80133c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80133c2:	4b26      	ldr	r3, [pc, #152]	; (801345c <USBD_LL_Init+0xbc>)
 80133c4:	2208      	movs	r2, #8
 80133c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80133c8:	4b24      	ldr	r3, [pc, #144]	; (801345c <USBD_LL_Init+0xbc>)
 80133ca:	2202      	movs	r2, #2
 80133cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80133ce:	4b23      	ldr	r3, [pc, #140]	; (801345c <USBD_LL_Init+0xbc>)
 80133d0:	2202      	movs	r2, #2
 80133d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80133d4:	4b21      	ldr	r3, [pc, #132]	; (801345c <USBD_LL_Init+0xbc>)
 80133d6:	2200      	movs	r2, #0
 80133d8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80133da:	4b20      	ldr	r3, [pc, #128]	; (801345c <USBD_LL_Init+0xbc>)
 80133dc:	2200      	movs	r2, #0
 80133de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80133e0:	4b1e      	ldr	r3, [pc, #120]	; (801345c <USBD_LL_Init+0xbc>)
 80133e2:	2200      	movs	r2, #0
 80133e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80133e6:	4b1d      	ldr	r3, [pc, #116]	; (801345c <USBD_LL_Init+0xbc>)
 80133e8:	2200      	movs	r2, #0
 80133ea:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80133ec:	481b      	ldr	r0, [pc, #108]	; (801345c <USBD_LL_Init+0xbc>)
 80133ee:	f7f1 fd73 	bl	8004ed8 <HAL_PCD_Init>
 80133f2:	4603      	mov	r3, r0
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d001      	beq.n	80133fc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80133f8:	f7ee ff0c 	bl	8002214 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013402:	2318      	movs	r3, #24
 8013404:	2200      	movs	r2, #0
 8013406:	2100      	movs	r1, #0
 8013408:	f7f2 fc38 	bl	8005c7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013412:	2358      	movs	r3, #88	; 0x58
 8013414:	2200      	movs	r2, #0
 8013416:	2180      	movs	r1, #128	; 0x80
 8013418:	f7f2 fc30 	bl	8005c7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013422:	23c0      	movs	r3, #192	; 0xc0
 8013424:	2200      	movs	r2, #0
 8013426:	2181      	movs	r1, #129	; 0x81
 8013428:	f7f2 fc28 	bl	8005c7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013432:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013436:	2200      	movs	r2, #0
 8013438:	2101      	movs	r1, #1
 801343a:	f7f2 fc1f 	bl	8005c7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013448:	2200      	movs	r2, #0
 801344a:	2182      	movs	r1, #130	; 0x82
 801344c:	f7f2 fc16 	bl	8005c7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8013450:	2300      	movs	r3, #0
}
 8013452:	4618      	mov	r0, r3
 8013454:	3708      	adds	r7, #8
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	20006514 	.word	0x20006514
 8013460:	40006800 	.word	0x40006800

08013464 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b084      	sub	sp, #16
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801346c:	2300      	movs	r3, #0
 801346e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013470:	2300      	movs	r3, #0
 8013472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801347a:	4618      	mov	r0, r3
 801347c:	f7f1 fde7 	bl	800504e <HAL_PCD_Start>
 8013480:	4603      	mov	r3, r0
 8013482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013484:	7bfb      	ldrb	r3, [r7, #15]
 8013486:	4618      	mov	r0, r3
 8013488:	f000 f944 	bl	8013714 <USBD_Get_USB_Status>
 801348c:	4603      	mov	r3, r0
 801348e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013490:	7bbb      	ldrb	r3, [r7, #14]
}
 8013492:	4618      	mov	r0, r3
 8013494:	3710      	adds	r7, #16
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}

0801349a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801349a:	b580      	push	{r7, lr}
 801349c:	b084      	sub	sp, #16
 801349e:	af00      	add	r7, sp, #0
 80134a0:	6078      	str	r0, [r7, #4]
 80134a2:	4608      	mov	r0, r1
 80134a4:	4611      	mov	r1, r2
 80134a6:	461a      	mov	r2, r3
 80134a8:	4603      	mov	r3, r0
 80134aa:	70fb      	strb	r3, [r7, #3]
 80134ac:	460b      	mov	r3, r1
 80134ae:	70bb      	strb	r3, [r7, #2]
 80134b0:	4613      	mov	r3, r2
 80134b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134b4:	2300      	movs	r3, #0
 80134b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134b8:	2300      	movs	r3, #0
 80134ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80134c2:	78bb      	ldrb	r3, [r7, #2]
 80134c4:	883a      	ldrh	r2, [r7, #0]
 80134c6:	78f9      	ldrb	r1, [r7, #3]
 80134c8:	f7f1 ff56 	bl	8005378 <HAL_PCD_EP_Open>
 80134cc:	4603      	mov	r3, r0
 80134ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134d0:	7bfb      	ldrb	r3, [r7, #15]
 80134d2:	4618      	mov	r0, r3
 80134d4:	f000 f91e 	bl	8013714 <USBD_Get_USB_Status>
 80134d8:	4603      	mov	r3, r0
 80134da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80134dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3710      	adds	r7, #16
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}

080134e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134e6:	b580      	push	{r7, lr}
 80134e8:	b084      	sub	sp, #16
 80134ea:	af00      	add	r7, sp, #0
 80134ec:	6078      	str	r0, [r7, #4]
 80134ee:	460b      	mov	r3, r1
 80134f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134f2:	2300      	movs	r3, #0
 80134f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134f6:	2300      	movs	r3, #0
 80134f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013500:	78fa      	ldrb	r2, [r7, #3]
 8013502:	4611      	mov	r1, r2
 8013504:	4618      	mov	r0, r3
 8013506:	f7f1 ff97 	bl	8005438 <HAL_PCD_EP_Close>
 801350a:	4603      	mov	r3, r0
 801350c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801350e:	7bfb      	ldrb	r3, [r7, #15]
 8013510:	4618      	mov	r0, r3
 8013512:	f000 f8ff 	bl	8013714 <USBD_Get_USB_Status>
 8013516:	4603      	mov	r3, r0
 8013518:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801351a:	7bbb      	ldrb	r3, [r7, #14]
}
 801351c:	4618      	mov	r0, r3
 801351e:	3710      	adds	r7, #16
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}

08013524 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b084      	sub	sp, #16
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	460b      	mov	r3, r1
 801352e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013530:	2300      	movs	r3, #0
 8013532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013534:	2300      	movs	r3, #0
 8013536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801353e:	78fa      	ldrb	r2, [r7, #3]
 8013540:	4611      	mov	r1, r2
 8013542:	4618      	mov	r0, r3
 8013544:	f7f2 f842 	bl	80055cc <HAL_PCD_EP_SetStall>
 8013548:	4603      	mov	r3, r0
 801354a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801354c:	7bfb      	ldrb	r3, [r7, #15]
 801354e:	4618      	mov	r0, r3
 8013550:	f000 f8e0 	bl	8013714 <USBD_Get_USB_Status>
 8013554:	4603      	mov	r3, r0
 8013556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013558:	7bbb      	ldrb	r3, [r7, #14]
}
 801355a:	4618      	mov	r0, r3
 801355c:	3710      	adds	r7, #16
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}

08013562 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013562:	b580      	push	{r7, lr}
 8013564:	b084      	sub	sp, #16
 8013566:	af00      	add	r7, sp, #0
 8013568:	6078      	str	r0, [r7, #4]
 801356a:	460b      	mov	r3, r1
 801356c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801356e:	2300      	movs	r3, #0
 8013570:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013572:	2300      	movs	r3, #0
 8013574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801357c:	78fa      	ldrb	r2, [r7, #3]
 801357e:	4611      	mov	r1, r2
 8013580:	4618      	mov	r0, r3
 8013582:	f7f2 f87d 	bl	8005680 <HAL_PCD_EP_ClrStall>
 8013586:	4603      	mov	r3, r0
 8013588:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801358a:	7bfb      	ldrb	r3, [r7, #15]
 801358c:	4618      	mov	r0, r3
 801358e:	f000 f8c1 	bl	8013714 <USBD_Get_USB_Status>
 8013592:	4603      	mov	r3, r0
 8013594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013596:	7bbb      	ldrb	r3, [r7, #14]
}
 8013598:	4618      	mov	r0, r3
 801359a:	3710      	adds	r7, #16
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}

080135a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80135a0:	b480      	push	{r7}
 80135a2:	b085      	sub	sp, #20
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	460b      	mov	r3, r1
 80135aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80135b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80135b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	da08      	bge.n	80135ce <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80135bc:	78fb      	ldrb	r3, [r7, #3]
 80135be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135c2:	68fa      	ldr	r2, [r7, #12]
 80135c4:	015b      	lsls	r3, r3, #5
 80135c6:	4413      	add	r3, r2
 80135c8:	332a      	adds	r3, #42	; 0x2a
 80135ca:	781b      	ldrb	r3, [r3, #0]
 80135cc:	e008      	b.n	80135e0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80135ce:	78fb      	ldrb	r3, [r7, #3]
 80135d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135d4:	68fa      	ldr	r2, [r7, #12]
 80135d6:	015b      	lsls	r3, r3, #5
 80135d8:	4413      	add	r3, r2
 80135da:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80135de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3714      	adds	r7, #20
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr

080135ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b084      	sub	sp, #16
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	460b      	mov	r3, r1
 80135f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135f8:	2300      	movs	r3, #0
 80135fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135fc:	2300      	movs	r3, #0
 80135fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013606:	78fa      	ldrb	r2, [r7, #3]
 8013608:	4611      	mov	r1, r2
 801360a:	4618      	mov	r0, r3
 801360c:	f7f1 fe8f 	bl	800532e <HAL_PCD_SetAddress>
 8013610:	4603      	mov	r3, r0
 8013612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013614:	7bfb      	ldrb	r3, [r7, #15]
 8013616:	4618      	mov	r0, r3
 8013618:	f000 f87c 	bl	8013714 <USBD_Get_USB_Status>
 801361c:	4603      	mov	r3, r0
 801361e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013620:	7bbb      	ldrb	r3, [r7, #14]
}
 8013622:	4618      	mov	r0, r3
 8013624:	3710      	adds	r7, #16
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}

0801362a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801362a:	b580      	push	{r7, lr}
 801362c:	b086      	sub	sp, #24
 801362e:	af00      	add	r7, sp, #0
 8013630:	60f8      	str	r0, [r7, #12]
 8013632:	607a      	str	r2, [r7, #4]
 8013634:	603b      	str	r3, [r7, #0]
 8013636:	460b      	mov	r3, r1
 8013638:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801363a:	2300      	movs	r3, #0
 801363c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801363e:	2300      	movs	r3, #0
 8013640:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013648:	7af9      	ldrb	r1, [r7, #11]
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	687a      	ldr	r2, [r7, #4]
 801364e:	f7f1 ff84 	bl	800555a <HAL_PCD_EP_Transmit>
 8013652:	4603      	mov	r3, r0
 8013654:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013656:	7dfb      	ldrb	r3, [r7, #23]
 8013658:	4618      	mov	r0, r3
 801365a:	f000 f85b 	bl	8013714 <USBD_Get_USB_Status>
 801365e:	4603      	mov	r3, r0
 8013660:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013662:	7dbb      	ldrb	r3, [r7, #22]
}
 8013664:	4618      	mov	r0, r3
 8013666:	3718      	adds	r7, #24
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}

0801366c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b086      	sub	sp, #24
 8013670:	af00      	add	r7, sp, #0
 8013672:	60f8      	str	r0, [r7, #12]
 8013674:	607a      	str	r2, [r7, #4]
 8013676:	603b      	str	r3, [r7, #0]
 8013678:	460b      	mov	r3, r1
 801367a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801367c:	2300      	movs	r3, #0
 801367e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013680:	2300      	movs	r3, #0
 8013682:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801368a:	7af9      	ldrb	r1, [r7, #11]
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	687a      	ldr	r2, [r7, #4]
 8013690:	f7f1 ff14 	bl	80054bc <HAL_PCD_EP_Receive>
 8013694:	4603      	mov	r3, r0
 8013696:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013698:	7dfb      	ldrb	r3, [r7, #23]
 801369a:	4618      	mov	r0, r3
 801369c:	f000 f83a 	bl	8013714 <USBD_Get_USB_Status>
 80136a0:	4603      	mov	r3, r0
 80136a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80136a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80136a6:	4618      	mov	r0, r3
 80136a8:	3718      	adds	r7, #24
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}

080136ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136ae:	b580      	push	{r7, lr}
 80136b0:	b082      	sub	sp, #8
 80136b2:	af00      	add	r7, sp, #0
 80136b4:	6078      	str	r0, [r7, #4]
 80136b6:	460b      	mov	r3, r1
 80136b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80136c0:	78fa      	ldrb	r2, [r7, #3]
 80136c2:	4611      	mov	r1, r2
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7f1 ff33 	bl	8005530 <HAL_PCD_EP_GetRxCount>
 80136ca:	4603      	mov	r3, r0
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	3708      	adds	r7, #8
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}

080136d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80136d4:	b480      	push	{r7}
 80136d6:	b083      	sub	sp, #12
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80136dc:	4b03      	ldr	r3, [pc, #12]	; (80136ec <USBD_static_malloc+0x18>)
}
 80136de:	4618      	mov	r0, r3
 80136e0:	370c      	adds	r7, #12
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr
 80136ea:	bf00      	nop
 80136ec:	20004bb8 	.word	0x20004bb8

080136f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80136f0:	b480      	push	{r7}
 80136f2:	b083      	sub	sp, #12
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]

}
 80136f8:	bf00      	nop
 80136fa:	370c      	adds	r7, #12
 80136fc:	46bd      	mov	sp, r7
 80136fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013702:	4770      	bx	lr

08013704 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013704:	b480      	push	{r7}
 8013706:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 8013708:	bf00      	nop
 801370a:	46bd      	mov	sp, r7
 801370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013710:	4770      	bx	lr
	...

08013714 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013714:	b480      	push	{r7}
 8013716:	b085      	sub	sp, #20
 8013718:	af00      	add	r7, sp, #0
 801371a:	4603      	mov	r3, r0
 801371c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801371e:	2300      	movs	r3, #0
 8013720:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013722:	79fb      	ldrb	r3, [r7, #7]
 8013724:	2b03      	cmp	r3, #3
 8013726:	d817      	bhi.n	8013758 <USBD_Get_USB_Status+0x44>
 8013728:	a201      	add	r2, pc, #4	; (adr r2, 8013730 <USBD_Get_USB_Status+0x1c>)
 801372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801372e:	bf00      	nop
 8013730:	08013741 	.word	0x08013741
 8013734:	08013747 	.word	0x08013747
 8013738:	0801374d 	.word	0x0801374d
 801373c:	08013753 	.word	0x08013753
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013740:	2300      	movs	r3, #0
 8013742:	73fb      	strb	r3, [r7, #15]
    break;
 8013744:	e00b      	b.n	801375e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013746:	2303      	movs	r3, #3
 8013748:	73fb      	strb	r3, [r7, #15]
    break;
 801374a:	e008      	b.n	801375e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801374c:	2301      	movs	r3, #1
 801374e:	73fb      	strb	r3, [r7, #15]
    break;
 8013750:	e005      	b.n	801375e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013752:	2303      	movs	r3, #3
 8013754:	73fb      	strb	r3, [r7, #15]
    break;
 8013756:	e002      	b.n	801375e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013758:	2303      	movs	r3, #3
 801375a:	73fb      	strb	r3, [r7, #15]
    break;
 801375c:	bf00      	nop
  }
  return usb_status;
 801375e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013760:	4618      	mov	r0, r3
 8013762:	3714      	adds	r7, #20
 8013764:	46bd      	mov	sp, r7
 8013766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376a:	4770      	bx	lr

0801376c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801376c:	b480      	push	{r7}
 801376e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013770:	4b05      	ldr	r3, [pc, #20]	; (8013788 <UTIL_LPM_Init+0x1c>)
 8013772:	2200      	movs	r2, #0
 8013774:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013776:	4b05      	ldr	r3, [pc, #20]	; (801378c <UTIL_LPM_Init+0x20>)
 8013778:	2200      	movs	r2, #0
 801377a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801377c:	bf00      	nop
 801377e:	46bd      	mov	sp, r7
 8013780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013784:	4770      	bx	lr
 8013786:	bf00      	nop
 8013788:	20004dd8 	.word	0x20004dd8
 801378c:	20004ddc 	.word	0x20004ddc

08013790 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8013790:	b480      	push	{r7}
 8013792:	b087      	sub	sp, #28
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
 8013798:	460b      	mov	r3, r1
 801379a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801379c:	f3ef 8310 	mrs	r3, PRIMASK
 80137a0:	613b      	str	r3, [r7, #16]
  return(result);
 80137a2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80137a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80137a6:	b672      	cpsid	i
  
  switch(state)
 80137a8:	78fb      	ldrb	r3, [r7, #3]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d009      	beq.n	80137c2 <UTIL_LPM_SetOffMode+0x32>
 80137ae:	2b01      	cmp	r3, #1
 80137b0:	d000      	beq.n	80137b4 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 80137b2:	e00e      	b.n	80137d2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 80137b4:	4b0c      	ldr	r3, [pc, #48]	; (80137e8 <UTIL_LPM_SetOffMode+0x58>)
 80137b6:	681a      	ldr	r2, [r3, #0]
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	4313      	orrs	r3, r2
 80137bc:	4a0a      	ldr	r2, [pc, #40]	; (80137e8 <UTIL_LPM_SetOffMode+0x58>)
 80137be:	6013      	str	r3, [r2, #0]
      break;
 80137c0:	e007      	b.n	80137d2 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	43da      	mvns	r2, r3
 80137c6:	4b08      	ldr	r3, [pc, #32]	; (80137e8 <UTIL_LPM_SetOffMode+0x58>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	4013      	ands	r3, r2
 80137cc:	4a06      	ldr	r2, [pc, #24]	; (80137e8 <UTIL_LPM_SetOffMode+0x58>)
 80137ce:	6013      	str	r3, [r2, #0]
      break;
 80137d0:	bf00      	nop
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80137dc:	bf00      	nop
 80137de:	371c      	adds	r7, #28
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr
 80137e8:	20004ddc 	.word	0x20004ddc

080137ec <__libc_init_array>:
 80137ec:	b570      	push	{r4, r5, r6, lr}
 80137ee:	4e0d      	ldr	r6, [pc, #52]	; (8013824 <__libc_init_array+0x38>)
 80137f0:	4c0d      	ldr	r4, [pc, #52]	; (8013828 <__libc_init_array+0x3c>)
 80137f2:	1ba4      	subs	r4, r4, r6
 80137f4:	10a4      	asrs	r4, r4, #2
 80137f6:	2500      	movs	r5, #0
 80137f8:	42a5      	cmp	r5, r4
 80137fa:	d109      	bne.n	8013810 <__libc_init_array+0x24>
 80137fc:	4e0b      	ldr	r6, [pc, #44]	; (801382c <__libc_init_array+0x40>)
 80137fe:	4c0c      	ldr	r4, [pc, #48]	; (8013830 <__libc_init_array+0x44>)
 8013800:	f000 f82c 	bl	801385c <_init>
 8013804:	1ba4      	subs	r4, r4, r6
 8013806:	10a4      	asrs	r4, r4, #2
 8013808:	2500      	movs	r5, #0
 801380a:	42a5      	cmp	r5, r4
 801380c:	d105      	bne.n	801381a <__libc_init_array+0x2e>
 801380e:	bd70      	pop	{r4, r5, r6, pc}
 8013810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013814:	4798      	blx	r3
 8013816:	3501      	adds	r5, #1
 8013818:	e7ee      	b.n	80137f8 <__libc_init_array+0xc>
 801381a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801381e:	4798      	blx	r3
 8013820:	3501      	adds	r5, #1
 8013822:	e7f2      	b.n	801380a <__libc_init_array+0x1e>
 8013824:	08013dc8 	.word	0x08013dc8
 8013828:	08013dc8 	.word	0x08013dc8
 801382c:	08013dc8 	.word	0x08013dc8
 8013830:	08013dcc 	.word	0x08013dcc

08013834 <memcpy>:
 8013834:	b510      	push	{r4, lr}
 8013836:	1e43      	subs	r3, r0, #1
 8013838:	440a      	add	r2, r1
 801383a:	4291      	cmp	r1, r2
 801383c:	d100      	bne.n	8013840 <memcpy+0xc>
 801383e:	bd10      	pop	{r4, pc}
 8013840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013848:	e7f7      	b.n	801383a <memcpy+0x6>

0801384a <memset>:
 801384a:	4402      	add	r2, r0
 801384c:	4603      	mov	r3, r0
 801384e:	4293      	cmp	r3, r2
 8013850:	d100      	bne.n	8013854 <memset+0xa>
 8013852:	4770      	bx	lr
 8013854:	f803 1b01 	strb.w	r1, [r3], #1
 8013858:	e7f9      	b.n	801384e <memset+0x4>
	...

0801385c <_init>:
 801385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801385e:	bf00      	nop
 8013860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013862:	bc08      	pop	{r3}
 8013864:	469e      	mov	lr, r3
 8013866:	4770      	bx	lr

08013868 <_fini>:
 8013868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801386a:	bf00      	nop
 801386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801386e:	bc08      	pop	{r3}
 8013870:	469e      	mov	lr, r3
 8013872:	4770      	bx	lr

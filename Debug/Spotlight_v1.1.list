
Spotlight_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e46c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800e5ac  0800e5ac  0001e5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e924  0800e924  0001e924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e928  0800e928  0001e928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000188  20000004  0800e92c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  2000018c  0800eab4  0002018c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000061e4  20000228  0800eb4d  00020228  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000640c  0800eb4d  0002640c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 10 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 11 MB_MEM1       000000ac  20030028  20030028  00030000  2**2
                  ALLOC
 12 .debug_info   00041564  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000079f9  00000000  00000000  000617b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002f90  00000000  00000000  000691b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002c48  00000000  00000000  0006c148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fd8e  00000000  00000000  0006ed90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c32b  00000000  00000000  0007eb1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010bfc1  00000000  00000000  000aae49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b6e0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c480  00000000  00000000  001b6e88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000228 	.word	0x20000228
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e594 	.word	0x0800e594

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000022c 	.word	0x2000022c
 800017c:	0800e594 	.word	0x0800e594

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000194:	b480      	push	{r7}
 8000196:	b085      	sub	sp, #20
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800019c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4313      	orrs	r3, r2
 80001aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	4013      	ands	r3, r2
 80001b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001b8:	68fb      	ldr	r3, [r7, #12]
}
 80001ba:	bf00      	nop
 80001bc:	3714      	adds	r7, #20
 80001be:	46bd      	mov	sp, r7
 80001c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001c4:	4770      	bx	lr
	...

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	463b      	mov	r3, r7
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]
 80001da:	611a      	str	r2, [r3, #16]
 80001dc:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001de:	4b3f      	ldr	r3, [pc, #252]	; (80002dc <MX_ADC1_Init+0x114>)
 80001e0:	4a3f      	ldr	r2, [pc, #252]	; (80002e0 <MX_ADC1_Init+0x118>)
 80001e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80001e4:	4b3d      	ldr	r3, [pc, #244]	; (80002dc <MX_ADC1_Init+0x114>)
 80001e6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80001ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001ec:	4b3b      	ldr	r3, [pc, #236]	; (80002dc <MX_ADC1_Init+0x114>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001f2:	4b3a      	ldr	r3, [pc, #232]	; (80002dc <MX_ADC1_Init+0x114>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001f8:	4b38      	ldr	r3, [pc, #224]	; (80002dc <MX_ADC1_Init+0x114>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80001fe:	4b37      	ldr	r3, [pc, #220]	; (80002dc <MX_ADC1_Init+0x114>)
 8000200:	2208      	movs	r2, #8
 8000202:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000204:	4b35      	ldr	r3, [pc, #212]	; (80002dc <MX_ADC1_Init+0x114>)
 8000206:	2200      	movs	r2, #0
 8000208:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800020a:	4b34      	ldr	r3, [pc, #208]	; (80002dc <MX_ADC1_Init+0x114>)
 800020c:	2201      	movs	r2, #1
 800020e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8000210:	4b32      	ldr	r3, [pc, #200]	; (80002dc <MX_ADC1_Init+0x114>)
 8000212:	2204      	movs	r2, #4
 8000214:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000216:	4b31      	ldr	r3, [pc, #196]	; (80002dc <MX_ADC1_Init+0x114>)
 8000218:	2200      	movs	r2, #0
 800021a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800021e:	4b2f      	ldr	r3, [pc, #188]	; (80002dc <MX_ADC1_Init+0x114>)
 8000220:	2200      	movs	r2, #0
 8000222:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000224:	4b2d      	ldr	r3, [pc, #180]	; (80002dc <MX_ADC1_Init+0x114>)
 8000226:	2200      	movs	r2, #0
 8000228:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800022a:	4b2c      	ldr	r3, [pc, #176]	; (80002dc <MX_ADC1_Init+0x114>)
 800022c:	2201      	movs	r2, #1
 800022e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000232:	4b2a      	ldr	r3, [pc, #168]	; (80002dc <MX_ADC1_Init+0x114>)
 8000234:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000238:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800023a:	4b28      	ldr	r3, [pc, #160]	; (80002dc <MX_ADC1_Init+0x114>)
 800023c:	2200      	movs	r2, #0
 800023e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000242:	4826      	ldr	r0, [pc, #152]	; (80002dc <MX_ADC1_Init+0x114>)
 8000244:	f001 fe72 	bl	8001f2c <HAL_ADC_Init>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800024e:	f000 ffc9 	bl	80011e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000252:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <MX_ADC1_Init+0x11c>)
 8000254:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000256:	2306      	movs	r3, #6
 8000258:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800025a:	2303      	movs	r3, #3
 800025c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800025e:	237f      	movs	r3, #127	; 0x7f
 8000260:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000262:	2304      	movs	r3, #4
 8000264:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026a:	463b      	mov	r3, r7
 800026c:	4619      	mov	r1, r3
 800026e:	481b      	ldr	r0, [pc, #108]	; (80002dc <MX_ADC1_Init+0x114>)
 8000270:	f002 f97a 	bl	8002568 <HAL_ADC_ConfigChannel>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800027a:	f000 ffb3 	bl	80011e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800027e:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <MX_ADC1_Init+0x120>)
 8000280:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000282:	230c      	movs	r3, #12
 8000284:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000286:	463b      	mov	r3, r7
 8000288:	4619      	mov	r1, r3
 800028a:	4814      	ldr	r0, [pc, #80]	; (80002dc <MX_ADC1_Init+0x114>)
 800028c:	f002 f96c 	bl	8002568 <HAL_ADC_ConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000296:	f000 ffa5 	bl	80011e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800029a:	4b14      	ldr	r3, [pc, #80]	; (80002ec <MX_ADC1_Init+0x124>)
 800029c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800029e:	2312      	movs	r3, #18
 80002a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a2:	463b      	mov	r3, r7
 80002a4:	4619      	mov	r1, r3
 80002a6:	480d      	ldr	r0, [pc, #52]	; (80002dc <MX_ADC1_Init+0x114>)
 80002a8:	f002 f95e 	bl	8002568 <HAL_ADC_ConfigChannel>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80002b2:	f000 ff97 	bl	80011e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <MX_ADC1_Init+0x128>)
 80002b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002ba:	2318      	movs	r3, #24
 80002bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002be:	463b      	mov	r3, r7
 80002c0:	4619      	mov	r1, r3
 80002c2:	4806      	ldr	r0, [pc, #24]	; (80002dc <MX_ADC1_Init+0x114>)
 80002c4:	f002 f950 	bl	8002568 <HAL_ADC_ConfigChannel>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80002ce:	f000 ff89 	bl	80011e4 <Error_Handler>
  }

}
 80002d2:	bf00      	nop
 80002d4:	3718      	adds	r7, #24
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20004ab8 	.word	0x20004ab8
 80002e0:	50040000 	.word	0x50040000
 80002e4:	04300002 	.word	0x04300002
 80002e8:	08600004 	.word	0x08600004
 80002ec:	0c900008 	.word	0x0c900008
 80002f0:	1d500080 	.word	0x1d500080

080002f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fc:	f107 030c 	add.w	r3, r7, #12
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a2e      	ldr	r2, [pc, #184]	; (80003cc <HAL_ADC_MspInit+0xd8>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d155      	bne.n	80003c2 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000316:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800031a:	f7ff ff3b 	bl	8000194 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800031e:	2004      	movs	r0, #4
 8000320:	f7ff ff38 	bl	8000194 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000324:	2001      	movs	r0, #1
 8000326:	f7ff ff35 	bl	8000194 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MAG_BASE_Pin|MAG_LIGHT_Pin|MAIN_BOARD_TEMP_Pin;
 800032a:	2307      	movs	r3, #7
 800032c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800032e:	2303      	movs	r3, #3
 8000330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	4619      	mov	r1, r3
 800033c:	4824      	ldr	r0, [pc, #144]	; (80003d0 <HAL_ADC_MspInit+0xdc>)
 800033e:	f003 f82d 	bl	800339c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_TEMP_Pin;
 8000342:	2304      	movs	r3, #4
 8000344:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000346:	2303      	movs	r3, #3
 8000348:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034a:	2300      	movs	r3, #0
 800034c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_TEMP_GPIO_Port, &GPIO_InitStruct);
 800034e:	f107 030c 	add.w	r3, r7, #12
 8000352:	4619      	mov	r1, r3
 8000354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000358:	f003 f820 	bl	800339c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 800035e:	4a1e      	ldr	r2, [pc, #120]	; (80003d8 <HAL_ADC_MspInit+0xe4>)
 8000360:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 8000364:	2205      	movs	r2, #5
 8000366:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 800037c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000380:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 8000384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000388:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 800038c:	2220      	movs	r2, #32
 800038e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 8000392:	2200      	movs	r2, #0
 8000394:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000396:	480f      	ldr	r0, [pc, #60]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 8000398:	f002 fe44 	bl	8003024 <HAL_DMA_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80003a2:	f000 ff1f 	bl	80011e4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 80003aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80003ac:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2105      	movs	r1, #5
 80003b6:	2012      	movs	r0, #18
 80003b8:	f002 fde2 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80003bc:	2012      	movs	r0, #18
 80003be:	f002 fdf9 	bl	8002fb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	50040000 	.word	0x50040000
 80003d0:	48000800 	.word	0x48000800
 80003d4:	20004b1c 	.word	0x20004b1c
 80003d8:	40020008 	.word	0x40020008

080003dc <TL_TRACES_EvtReceived>:
  return;
}

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f00a f801 	bl	800a3ec <TL_MM_EvtDone>
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <_Z16MX_FREERTOS_Initv+0x18>)
 80003fa:	2100      	movs	r1, #0
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <_Z16MX_FREERTOS_Initv+0x1c>)
 80003fe:	f00a f993 	bl	800a728 <osThreadNew>
 8000402:	4602      	mov	r2, r0
 8000404:	4b03      	ldr	r3, [pc, #12]	; (8000414 <_Z16MX_FREERTOS_Initv+0x20>)
 8000406:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	0800e860 	.word	0x0800e860
 8000410:	08000419 	.word	0x08000419
 8000414:	20000244 	.word	0x20000244

08000418 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8000420:	f04f 32ff 	mov.w	r2, #4294967295
 8000424:	2101      	movs	r1, #1
 8000426:	2001      	movs	r0, #1
 8000428:	f00a fa86 	bl	800a938 <osThreadFlagsWait>
 800042c:	e7f8      	b.n	8000420 <_Z16StartDefaultTaskPv+0x8>

0800042e <LL_AHB1_GRP1_EnableClock>:
{
 800042e:	b480      	push	{r7}
 8000430:	b085      	sub	sp, #20
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800043a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800043c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4313      	orrs	r3, r2
 8000444:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800044a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4013      	ands	r3, r2
 8000450:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000452:	68fb      	ldr	r3, [r7, #12]
}
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000464:	2004      	movs	r0, #4
 8000466:	f7ff ffe2 	bl	800042e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800046a:	2001      	movs	r0, #1
 800046c:	f7ff ffdf 	bl	800042e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000470:	2200      	movs	r2, #0
 8000472:	2105      	movs	r1, #5
 8000474:	200b      	movs	r0, #11
 8000476:	f002 fd83 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800047a:	200b      	movs	r0, #11
 800047c:	f002 fd9a 	bl	8002fb4 <HAL_NVIC_EnableIRQ>

}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}

08000484 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <LL_AHB2_GRP1_EnableClock>:
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4313      	orrs	r3, r2
 80004ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4013      	ands	r3, r2
 80004ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004bc:	68fb      	ldr	r3, [r7, #12]
}
 80004be:	bf00      	nop
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
	...

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e0:	2004      	movs	r0, #4
 80004e2:	f7ff ffd9 	bl	8000498 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e6:	2002      	movs	r0, #2
 80004e8:	f7ff ffd6 	bl	8000498 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff ffd3 	bl	8000498 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004f2:	2010      	movs	r0, #16
 80004f4:	f7ff ffd0 	bl	8000498 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 80004f8:	2200      	movs	r2, #0
 80004fa:	f240 3193 	movw	r1, #915	; 0x393
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000502:	f003 f8bb 	bl	800367c <HAL_GPIO_WritePin>
                          |AIN1_1_Pin|BIN1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN1_2_Pin|BIN2_2_Pin|BIN2_1_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 800050c:	4823      	ldr	r0, [pc, #140]	; (800059c <MX_GPIO_Init+0xd0>)
 800050e:	f003 f8b5 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2103      	movs	r1, #3
 8000516:	4821      	ldr	r0, [pc, #132]	; (800059c <MX_GPIO_Init+0xd0>)
 8000518:	f003 f8b0 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2110      	movs	r1, #16
 8000520:	481f      	ldr	r0, [pc, #124]	; (80005a0 <MX_GPIO_Init+0xd4>)
 8000522:	f003 f8ab 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 8000526:	f240 3393 	movw	r3, #915	; 0x393
 800052a:	607b      	str	r3, [r7, #4]
                          |AIN1_1_Pin|BIN1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4619      	mov	r1, r3
 800053c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000540:	f002 ff2c 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_LED_DISC_Pin;
 8000544:	2308      	movs	r3, #8
 8000546:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT_LED_DISC_GPIO_Port, &GPIO_InitStruct);
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	4619      	mov	r1, r3
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f002 ff20 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BIN1_2_Pin|BIN2_2_Pin|BLUE_LED_Pin|GREEN_LED_Pin
 800055c:	f644 4303 	movw	r3, #19459	; 0x4c03
 8000560:	607b      	str	r3, [r7, #4]
                          |BIN2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	4619      	mov	r1, r3
 8000572:	480a      	ldr	r0, [pc, #40]	; (800059c <MX_GPIO_Init+0xd0>)
 8000574:	f002 ff12 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000578:	2310      	movs	r3, #16
 800057a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	2301      	movs	r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	4619      	mov	r1, r3
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <MX_GPIO_Init+0xd4>)
 800058e:	f002 ff05 	bl	800339c <HAL_GPIO_Init>

}
 8000592:	bf00      	nop
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	48000400 	.word	0x48000400
 80005a0:	48001000 	.word	0x48001000

080005a4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <ReadRtcSsrValue+0x3c>)
 80005ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <ReadRtcSsrValue+0x3c>)
 80005b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80005ba:	e005      	b.n	80005c8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <ReadRtcSsrValue+0x3c>)
 80005c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d1f5      	bne.n	80005bc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80005d0:	683b      	ldr	r3, [r7, #0]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40002800 	.word	0x40002800

080005e4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	460a      	mov	r2, r1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80005f4:	79ba      	ldrb	r2, [r7, #6]
 80005f6:	491d      	ldr	r1, [pc, #116]	; (800066c <LinkTimerAfter+0x88>)
 80005f8:	4613      	mov	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4413      	add	r3, r2
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	440b      	add	r3, r1
 8000602:	3315      	adds	r3, #21
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	2b06      	cmp	r3, #6
 800060c:	d009      	beq.n	8000622 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800060e:	7bfa      	ldrb	r2, [r7, #15]
 8000610:	4916      	ldr	r1, [pc, #88]	; (800066c <LinkTimerAfter+0x88>)
 8000612:	4613      	mov	r3, r2
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	4413      	add	r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	440b      	add	r3, r1
 800061c:	3314      	adds	r3, #20
 800061e:	79fa      	ldrb	r2, [r7, #7]
 8000620:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000622:	79fa      	ldrb	r2, [r7, #7]
 8000624:	4911      	ldr	r1, [pc, #68]	; (800066c <LinkTimerAfter+0x88>)
 8000626:	4613      	mov	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4413      	add	r3, r2
 800062c:	00db      	lsls	r3, r3, #3
 800062e:	440b      	add	r3, r1
 8000630:	3315      	adds	r3, #21
 8000632:	7bfa      	ldrb	r2, [r7, #15]
 8000634:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000636:	79fa      	ldrb	r2, [r7, #7]
 8000638:	490c      	ldr	r1, [pc, #48]	; (800066c <LinkTimerAfter+0x88>)
 800063a:	4613      	mov	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	440b      	add	r3, r1
 8000644:	3314      	adds	r3, #20
 8000646:	79ba      	ldrb	r2, [r7, #6]
 8000648:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800064a:	79ba      	ldrb	r2, [r7, #6]
 800064c:	4907      	ldr	r1, [pc, #28]	; (800066c <LinkTimerAfter+0x88>)
 800064e:	4613      	mov	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	4413      	add	r3, r2
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	440b      	add	r3, r1
 8000658:	3315      	adds	r3, #21
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	701a      	strb	r2, [r3, #0]

  return;
 800065e:	bf00      	nop
}
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	2000018c 	.word	0x2000018c

08000670 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	460a      	mov	r2, r1
 800067a:	71fb      	strb	r3, [r7, #7]
 800067c:	4613      	mov	r3, r2
 800067e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <LinkTimerBefore+0xb8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	79ba      	ldrb	r2, [r7, #6]
 8000688:	429a      	cmp	r2, r3
 800068a:	d032      	beq.n	80006f2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800068c:	79ba      	ldrb	r2, [r7, #6]
 800068e:	4927      	ldr	r1, [pc, #156]	; (800072c <LinkTimerBefore+0xbc>)
 8000690:	4613      	mov	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4413      	add	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	440b      	add	r3, r1
 800069a:	3314      	adds	r3, #20
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80006a0:	7bfa      	ldrb	r2, [r7, #15]
 80006a2:	4922      	ldr	r1, [pc, #136]	; (800072c <LinkTimerBefore+0xbc>)
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	440b      	add	r3, r1
 80006ae:	3315      	adds	r3, #21
 80006b0:	79fa      	ldrb	r2, [r7, #7]
 80006b2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80006b4:	79fa      	ldrb	r2, [r7, #7]
 80006b6:	491d      	ldr	r1, [pc, #116]	; (800072c <LinkTimerBefore+0xbc>)
 80006b8:	4613      	mov	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	00db      	lsls	r3, r3, #3
 80006c0:	440b      	add	r3, r1
 80006c2:	3315      	adds	r3, #21
 80006c4:	79ba      	ldrb	r2, [r7, #6]
 80006c6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80006c8:	79fa      	ldrb	r2, [r7, #7]
 80006ca:	4918      	ldr	r1, [pc, #96]	; (800072c <LinkTimerBefore+0xbc>)
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	440b      	add	r3, r1
 80006d6:	3314      	adds	r3, #20
 80006d8:	7bfa      	ldrb	r2, [r7, #15]
 80006da:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80006dc:	79ba      	ldrb	r2, [r7, #6]
 80006de:	4913      	ldr	r1, [pc, #76]	; (800072c <LinkTimerBefore+0xbc>)
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	440b      	add	r3, r1
 80006ea:	3314      	adds	r3, #20
 80006ec:	79fa      	ldrb	r2, [r7, #7]
 80006ee:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80006f0:	e014      	b.n	800071c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80006f2:	79fa      	ldrb	r2, [r7, #7]
 80006f4:	490d      	ldr	r1, [pc, #52]	; (800072c <LinkTimerBefore+0xbc>)
 80006f6:	4613      	mov	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4413      	add	r3, r2
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	440b      	add	r3, r1
 8000700:	3315      	adds	r3, #21
 8000702:	79ba      	ldrb	r2, [r7, #6]
 8000704:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000706:	79ba      	ldrb	r2, [r7, #6]
 8000708:	4908      	ldr	r1, [pc, #32]	; (800072c <LinkTimerBefore+0xbc>)
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	440b      	add	r3, r1
 8000714:	3314      	adds	r3, #20
 8000716:	79fa      	ldrb	r2, [r7, #7]
 8000718:	701a      	strb	r2, [r3, #0]
  return;
 800071a:	bf00      	nop
}
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	2000021c 	.word	0x2000021c
 800072c:	2000018c 	.word	0x2000018c

08000730 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800073a:	4b4e      	ldr	r3, [pc, #312]	; (8000874 <linkTimer+0x144>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b06      	cmp	r3, #6
 8000742:	d118      	bne.n	8000776 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000744:	4b4b      	ldr	r3, [pc, #300]	; (8000874 <linkTimer+0x144>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b4b      	ldr	r3, [pc, #300]	; (8000878 <linkTimer+0x148>)
 800074c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800074e:	4a49      	ldr	r2, [pc, #292]	; (8000874 <linkTimer+0x144>)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	4949      	ldr	r1, [pc, #292]	; (800087c <linkTimer+0x14c>)
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	440b      	add	r3, r1
 8000762:	3315      	adds	r3, #21
 8000764:	2206      	movs	r2, #6
 8000766:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000768:	4b45      	ldr	r3, [pc, #276]	; (8000880 <linkTimer+0x150>)
 800076a:	f04f 32ff 	mov.w	r2, #4294967295
 800076e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	81fb      	strh	r3, [r7, #14]
 8000774:	e078      	b.n	8000868 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000776:	f000 f909 	bl	800098c <ReturnTimeElapsed>
 800077a:	4603      	mov	r3, r0
 800077c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800077e:	79fa      	ldrb	r2, [r7, #7]
 8000780:	493e      	ldr	r1, [pc, #248]	; (800087c <linkTimer+0x14c>)
 8000782:	4613      	mov	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4413      	add	r3, r2
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	440b      	add	r3, r1
 800078c:	3308      	adds	r3, #8
 800078e:	6819      	ldr	r1, [r3, #0]
 8000790:	89fb      	ldrh	r3, [r7, #14]
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	4419      	add	r1, r3
 8000796:	4839      	ldr	r0, [pc, #228]	; (800087c <linkTimer+0x14c>)
 8000798:	4613      	mov	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	4413      	add	r3, r2
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	4403      	add	r3, r0
 80007a2:	3308      	adds	r3, #8
 80007a4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80007a6:	79fa      	ldrb	r2, [r7, #7]
 80007a8:	4934      	ldr	r1, [pc, #208]	; (800087c <linkTimer+0x14c>)
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	3308      	adds	r3, #8
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <linkTimer+0x144>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	4a2e      	ldr	r2, [pc, #184]	; (800087c <linkTimer+0x14c>)
 80007c4:	460b      	mov	r3, r1
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	440b      	add	r3, r1
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	4413      	add	r3, r2
 80007ce:	3308      	adds	r3, #8
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d337      	bcc.n	8000848 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <linkTimer+0x144>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80007de:	7b7a      	ldrb	r2, [r7, #13]
 80007e0:	4926      	ldr	r1, [pc, #152]	; (800087c <linkTimer+0x14c>)
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	440b      	add	r3, r1
 80007ec:	3315      	adds	r3, #21
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80007f2:	e013      	b.n	800081c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80007f4:	7b7a      	ldrb	r2, [r7, #13]
 80007f6:	4921      	ldr	r1, [pc, #132]	; (800087c <linkTimer+0x14c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	440b      	add	r3, r1
 8000802:	3315      	adds	r3, #21
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000808:	7b7a      	ldrb	r2, [r7, #13]
 800080a:	491c      	ldr	r1, [pc, #112]	; (800087c <linkTimer+0x14c>)
 800080c:	4613      	mov	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	4413      	add	r3, r2
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	440b      	add	r3, r1
 8000816:	3315      	adds	r3, #21
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800081c:	7b3b      	ldrb	r3, [r7, #12]
 800081e:	2b06      	cmp	r3, #6
 8000820:	d00b      	beq.n	800083a <linkTimer+0x10a>
 8000822:	7b3a      	ldrb	r2, [r7, #12]
 8000824:	4915      	ldr	r1, [pc, #84]	; (800087c <linkTimer+0x14c>)
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	440b      	add	r3, r1
 8000830:	3308      	adds	r3, #8
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	68ba      	ldr	r2, [r7, #8]
 8000836:	429a      	cmp	r2, r3
 8000838:	d2dc      	bcs.n	80007f4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800083a:	7b7a      	ldrb	r2, [r7, #13]
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	4611      	mov	r1, r2
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fecf 	bl	80005e4 <LinkTimerAfter>
 8000846:	e00f      	b.n	8000868 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <linkTimer+0x144>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff0c 	bl	8000670 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <linkTimer+0x144>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <linkTimer+0x148>)
 8000860:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <linkTimer+0x144>)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000868:	89fb      	ldrh	r3, [r7, #14]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000021c 	.word	0x2000021c
 8000878:	2000021d 	.word	0x2000021d
 800087c:	2000018c 	.word	0x2000018c
 8000880:	20000220 	.word	0x20000220

08000884 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	460a      	mov	r2, r1
 800088e:	71fb      	strb	r3, [r7, #7]
 8000890:	4613      	mov	r3, r2
 8000892:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000894:	4b39      	ldr	r3, [pc, #228]	; (800097c <UnlinkTimer+0xf8>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	429a      	cmp	r2, r3
 800089e:	d111      	bne.n	80008c4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80008a0:	4b36      	ldr	r3, [pc, #216]	; (800097c <UnlinkTimer+0xf8>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b36      	ldr	r3, [pc, #216]	; (8000980 <UnlinkTimer+0xfc>)
 80008a8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80008aa:	79fa      	ldrb	r2, [r7, #7]
 80008ac:	4935      	ldr	r1, [pc, #212]	; (8000984 <UnlinkTimer+0x100>)
 80008ae:	4613      	mov	r3, r2
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	4413      	add	r3, r2
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	440b      	add	r3, r1
 80008b8:	3315      	adds	r3, #21
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <UnlinkTimer+0xf8>)
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	e03e      	b.n	8000942 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	492f      	ldr	r1, [pc, #188]	; (8000984 <UnlinkTimer+0x100>)
 80008c8:	4613      	mov	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	4413      	add	r3, r2
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	440b      	add	r3, r1
 80008d2:	3314      	adds	r3, #20
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80008d8:	79fa      	ldrb	r2, [r7, #7]
 80008da:	492a      	ldr	r1, [pc, #168]	; (8000984 <UnlinkTimer+0x100>)
 80008dc:	4613      	mov	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	4413      	add	r3, r2
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	440b      	add	r3, r1
 80008e6:	3315      	adds	r3, #21
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80008ec:	79f9      	ldrb	r1, [r7, #7]
 80008ee:	7bfa      	ldrb	r2, [r7, #15]
 80008f0:	4824      	ldr	r0, [pc, #144]	; (8000984 <UnlinkTimer+0x100>)
 80008f2:	460b      	mov	r3, r1
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	440b      	add	r3, r1
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	4403      	add	r3, r0
 80008fc:	3315      	adds	r3, #21
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2d8      	uxtb	r0, r3
 8000902:	4920      	ldr	r1, [pc, #128]	; (8000984 <UnlinkTimer+0x100>)
 8000904:	4613      	mov	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	4413      	add	r3, r2
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	440b      	add	r3, r1
 800090e:	3315      	adds	r3, #21
 8000910:	4602      	mov	r2, r0
 8000912:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000914:	7bbb      	ldrb	r3, [r7, #14]
 8000916:	2b06      	cmp	r3, #6
 8000918:	d013      	beq.n	8000942 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800091a:	79f9      	ldrb	r1, [r7, #7]
 800091c:	7bba      	ldrb	r2, [r7, #14]
 800091e:	4819      	ldr	r0, [pc, #100]	; (8000984 <UnlinkTimer+0x100>)
 8000920:	460b      	mov	r3, r1
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	440b      	add	r3, r1
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	4403      	add	r3, r0
 800092a:	3314      	adds	r3, #20
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b2d8      	uxtb	r0, r3
 8000930:	4914      	ldr	r1, [pc, #80]	; (8000984 <UnlinkTimer+0x100>)
 8000932:	4613      	mov	r3, r2
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	4413      	add	r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	440b      	add	r3, r1
 800093c:	3314      	adds	r3, #20
 800093e:	4602      	mov	r2, r0
 8000940:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000942:	79fa      	ldrb	r2, [r7, #7]
 8000944:	490f      	ldr	r1, [pc, #60]	; (8000984 <UnlinkTimer+0x100>)
 8000946:	4613      	mov	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	4413      	add	r3, r2
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	440b      	add	r3, r1
 8000950:	330c      	adds	r3, #12
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <UnlinkTimer+0xf8>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b06      	cmp	r3, #6
 800095e:	d107      	bne.n	8000970 <UnlinkTimer+0xec>
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d104      	bne.n	8000970 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <UnlinkTimer+0x104>)
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	601a      	str	r2, [r3, #0]
  }

  return;
 800096e:	bf00      	nop
 8000970:	bf00      	nop
}
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	2000021c 	.word	0x2000021c
 8000980:	2000021d 	.word	0x2000021d
 8000984:	2000018c 	.word	0x2000018c
 8000988:	20000220 	.word	0x20000220

0800098c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <ReturnTimeElapsed+0x70>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800099a:	d026      	beq.n	80009ea <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800099c:	f7ff fe02 	bl	80005a4 <ReadRtcSsrValue>
 80009a0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <ReturnTimeElapsed+0x70>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d805      	bhi.n	80009b8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <ReturnTimeElapsed+0x70>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	e00a      	b.n	80009ce <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <ReturnTimeElapsed+0x74>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <ReturnTimeElapsed+0x70>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <ReturnTimeElapsed+0x78>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	fb02 f303 	mul.w	r3, r2, r3
 80009da:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <ReturnTimeElapsed+0x7c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	40d3      	lsrs	r3, r2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	e001      	b.n	80009ee <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	b29b      	uxth	r3, r3
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000220 	.word	0x20000220
 8000a00:	2000024e 	.word	0x2000024e
 8000a04:	2000024d 	.word	0x2000024d
 8000a08:	2000024c 	.word	0x2000024c

08000a0c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d108      	bne.n	8000a2e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000a1c:	f7ff fdc2 	bl	80005a4 <ReadRtcSsrValue>
 8000a20:	4602      	mov	r2, r0
 8000a22:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <RestartWakeupCounter+0xa8>)
 8000a24:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000a26:	2003      	movs	r0, #3
 8000a28:	f002 fae0 	bl	8002fec <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000a2c:	e03e      	b.n	8000aac <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d803      	bhi.n	8000a3c <RestartWakeupCounter+0x30>
 8000a34:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <RestartWakeupCounter+0xac>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d002      	beq.n	8000a42 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000a42:	bf00      	nop
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <RestartWakeupCounter+0xb0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f7      	beq.n	8000a44 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <RestartWakeupCounter+0xb0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <RestartWakeupCounter+0xb0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000a68:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <RestartWakeupCounter+0xb4>)
 8000a6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a70:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000a72:	2003      	movs	r0, #3
 8000a74:	f002 fac8 	bl	8003008 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <RestartWakeupCounter+0xb8>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	0c1b      	lsrs	r3, r3, #16
 8000a7e:	041b      	lsls	r3, r3, #16
 8000a80:	88fa      	ldrh	r2, [r7, #6]
 8000a82:	4910      	ldr	r1, [pc, #64]	; (8000ac4 <RestartWakeupCounter+0xb8>)
 8000a84:	4313      	orrs	r3, r2
 8000a86:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000a88:	f7ff fd8c 	bl	80005a4 <ReadRtcSsrValue>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <RestartWakeupCounter+0xa8>)
 8000a90:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <RestartWakeupCounter+0xb0>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <RestartWakeupCounter+0xb0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000aa4:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000aa6:	f3af 8000 	nop.w
  return ;
 8000aaa:	bf00      	nop
}
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000220 	.word	0x20000220
 8000ab8:	2000024c 	.word	0x2000024c
 8000abc:	20000248 	.word	0x20000248
 8000ac0:	58000800 	.word	0x58000800
 8000ac4:	40002800 	.word	0x40002800

08000ac8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000ace:	4b47      	ldr	r3, [pc, #284]	; (8000bec <RescheduleTimerList+0x124>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ada:	d108      	bne.n	8000aee <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000adc:	bf00      	nop
 8000ade:	4b44      	ldr	r3, [pc, #272]	; (8000bf0 <RescheduleTimerList+0x128>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f7      	bne.n	8000ade <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000aee:	4b40      	ldr	r3, [pc, #256]	; (8000bf0 <RescheduleTimerList+0x128>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	4b3e      	ldr	r3, [pc, #248]	; (8000bf0 <RescheduleTimerList+0x128>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b00:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000b02:	4b3c      	ldr	r3, [pc, #240]	; (8000bf4 <RescheduleTimerList+0x12c>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000b08:	7bfa      	ldrb	r2, [r7, #15]
 8000b0a:	493b      	ldr	r1, [pc, #236]	; (8000bf8 <RescheduleTimerList+0x130>)
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	440b      	add	r3, r1
 8000b16:	3308      	adds	r3, #8
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000b1c:	f7ff ff36 	bl	800098c <ReturnTimeElapsed>
 8000b20:	4603      	mov	r3, r0
 8000b22:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d205      	bcs.n	8000b38 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000b30:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <RescheduleTimerList+0x134>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	e04d      	b.n	8000bd4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	4a31      	ldr	r2, [pc, #196]	; (8000c00 <RescheduleTimerList+0x138>)
 8000b3c:	8812      	ldrh	r2, [r2, #0]
 8000b3e:	b292      	uxth	r2, r2
 8000b40:	4413      	add	r3, r2
 8000b42:	461a      	mov	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d906      	bls.n	8000b58 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <RescheduleTimerList+0x138>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000b50:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <RescheduleTimerList+0x134>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	e03d      	b.n	8000bd4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <RescheduleTimerList+0x134>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b68:	e034      	b.n	8000bd4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000b6a:	7bfa      	ldrb	r2, [r7, #15]
 8000b6c:	4922      	ldr	r1, [pc, #136]	; (8000bf8 <RescheduleTimerList+0x130>)
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	440b      	add	r3, r1
 8000b78:	3308      	adds	r3, #8
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d20a      	bcs.n	8000b98 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000b82:	7bfa      	ldrb	r2, [r7, #15]
 8000b84:	491c      	ldr	r1, [pc, #112]	; (8000bf8 <RescheduleTimerList+0x130>)
 8000b86:	4613      	mov	r3, r2
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	4413      	add	r3, r2
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	440b      	add	r3, r1
 8000b90:	3308      	adds	r3, #8
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e013      	b.n	8000bc0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000b98:	7bfa      	ldrb	r2, [r7, #15]
 8000b9a:	4917      	ldr	r1, [pc, #92]	; (8000bf8 <RescheduleTimerList+0x130>)
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	440b      	add	r3, r1
 8000ba6:	3308      	adds	r3, #8
 8000ba8:	6819      	ldr	r1, [r3, #0]
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	7bfa      	ldrb	r2, [r7, #15]
 8000bae:	1ac9      	subs	r1, r1, r3
 8000bb0:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <RescheduleTimerList+0x130>)
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	4403      	add	r3, r0
 8000bbc:	3308      	adds	r3, #8
 8000bbe:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000bc0:	7bfa      	ldrb	r2, [r7, #15]
 8000bc2:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <RescheduleTimerList+0x130>)
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	440b      	add	r3, r1
 8000bce:	3315      	adds	r3, #21
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d1c7      	bne.n	8000b6a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000bda:	89bb      	ldrh	r3, [r7, #12]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff15 	bl	8000a0c <RestartWakeupCounter>

  return ;
 8000be2:	bf00      	nop
}
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40002800 	.word	0x40002800
 8000bf0:	20000248 	.word	0x20000248
 8000bf4:	2000021c 	.word	0x2000021c
 8000bf8:	2000018c 	.word	0x2000018c
 8000bfc:	20000224 	.word	0x20000224
 8000c00:	20000250 	.word	0x20000250

08000c04 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8000c0e:	617b      	str	r3, [r7, #20]
  return(result);
 8000c10:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c16:	4b5e      	ldr	r3, [pc, #376]	; (8000d90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	22ca      	movs	r2, #202	; 0xca
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
 8000c20:	4b5b      	ldr	r3, [pc, #364]	; (8000d90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2253      	movs	r2, #83	; 0x53
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000c2a:	4b59      	ldr	r3, [pc, #356]	; (8000d90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	4b57      	ldr	r3, [pc, #348]	; (8000d90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c3c:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000c3e:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000c46:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c4a:	4953      	ldr	r1, [pc, #332]	; (8000d98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	440b      	add	r3, r1
 8000c56:	330c      	adds	r3, #12
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d170      	bne.n	8000d42 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000c60:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c64:	494c      	ldr	r1, [pc, #304]	; (8000d98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c66:	4613      	mov	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	440b      	add	r3, r1
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000c74:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c78:	4947      	ldr	r1, [pc, #284]	; (8000d98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
 8000c84:	3310      	adds	r3, #16
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000c8a:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d04e      	beq.n	8000d32 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000c94:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c98:	493f      	ldr	r1, [pc, #252]	; (8000d98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	440b      	add	r3, r1
 8000ca4:	330d      	adds	r3, #13
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d125      	bne.n	8000cfa <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000cae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fde5 	bl	8000884 <UnlinkTimer>
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000cc4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cc8:	4933      	ldr	r1, [pc, #204]	; (8000d98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000cca:	4613      	mov	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	440b      	add	r3, r1
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f8ea 	bl	8000eb8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	22ca      	movs	r2, #202	; 0xca
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24
 8000cee:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2253      	movs	r2, #83	; 0x53
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24
 8000cf8:	e013      	b.n	8000d22 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 f84b 	bl	8000da4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d0e:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	22ca      	movs	r2, #202	; 0xca
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2253      	movs	r2, #83	; 0x53
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000d22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	69b8      	ldr	r0, [r7, #24]
 8000d2c:	f000 f94a 	bl	8000fc4 <HW_TS_RTC_Int_AppNot>
 8000d30:	e024      	b.n	8000d7c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000d32:	f7ff fec9 	bl	8000ac8 <RescheduleTimerList>
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	f383 8810 	msr	PRIMASK, r3
 8000d40:	e01c      	b.n	8000d7c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d42:	bf00      	nop
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0f7      	beq.n	8000d44 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d68:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	22ff      	movs	r2, #255	; 0xff
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000d86:	bf00      	nop
}
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000248 	.word	0x20000248
 8000d94:	2000021c 	.word	0x2000021c
 8000d98:	2000018c 	.word	0x2000018c
 8000d9c:	20000224 	.word	0x20000224
 8000da0:	58000800 	.word	0x58000800

08000da4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000dae:	f3ef 8310 	mrs	r3, PRIMASK
 8000db2:	60fb      	str	r3, [r7, #12]
  return(result);
 8000db4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000db6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000dba:	2003      	movs	r0, #3
 8000dbc:	f002 f908 	bl	8002fd0 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000dc0:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <HW_TS_Stop+0xfc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	22ca      	movs	r2, #202	; 0xca
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
 8000dca:	4b35      	ldr	r3, [pc, #212]	; (8000ea0 <HW_TS_Stop+0xfc>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2253      	movs	r2, #83	; 0x53
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000dd4:	79fa      	ldrb	r2, [r7, #7]
 8000dd6:	4933      	ldr	r1, [pc, #204]	; (8000ea4 <HW_TS_Stop+0x100>)
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	330c      	adds	r3, #12
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d148      	bne.n	8000e7e <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fd47 	bl	8000884 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <HW_TS_Stop+0x104>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dfc:	7cfb      	ldrb	r3, [r7, #19]
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d135      	bne.n	8000e6e <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e02:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <HW_TS_Stop+0x108>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e0e:	d108      	bne.n	8000e22 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000e10:	bf00      	nop
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <HW_TS_Stop+0xfc>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f7      	bne.n	8000e12 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <HW_TS_Stop+0xfc>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HW_TS_Stop+0xfc>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e34:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000e36:	bf00      	nop
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HW_TS_Stop+0xfc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f7      	beq.n	8000e38 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HW_TS_Stop+0xfc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HW_TS_Stop+0xfc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e5c:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HW_TS_Stop+0x10c>)
 8000e60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e64:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e66:	2003      	movs	r0, #3
 8000e68:	f002 f8ce 	bl	8003008 <HAL_NVIC_ClearPendingIRQ>
 8000e6c:	e007      	b.n	8000e7e <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HW_TS_Stop+0x110>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	7cfa      	ldrb	r2, [r7, #19]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d001      	beq.n	8000e7e <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8000e7a:	f7ff fe25 	bl	8000ac8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HW_TS_Stop+0xfc>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	22ff      	movs	r2, #255	; 0xff
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f002 f893 	bl	8002fb4 <HAL_NVIC_EnableIRQ>
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000e98:	bf00      	nop
}
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000248 	.word	0x20000248
 8000ea4:	2000018c 	.word	0x2000018c
 8000ea8:	2000021c 	.word	0x2000021c
 8000eac:	40002800 	.word	0x40002800
 8000eb0:	58000800 	.word	0x58000800
 8000eb4:	2000021d 	.word	0x2000021d

08000eb8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000ec4:	79fa      	ldrb	r2, [r7, #7]
 8000ec6:	493b      	ldr	r1, [pc, #236]	; (8000fb4 <HW_TS_Start+0xfc>)
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	440b      	add	r3, r1
 8000ed2:	330c      	adds	r3, #12
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d103      	bne.n	8000ee4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff60 	bl	8000da4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8000ee8:	60fb      	str	r3, [r7, #12]
  return(result);
 8000eea:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000eec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000eee:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f002 f86d 	bl	8002fd0 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ef6:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <HW_TS_Start+0x100>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	22ca      	movs	r2, #202	; 0xca
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <HW_TS_Start+0x100>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2253      	movs	r2, #83	; 0x53
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000f0a:	79fa      	ldrb	r2, [r7, #7]
 8000f0c:	4929      	ldr	r1, [pc, #164]	; (8000fb4 <HW_TS_Start+0xfc>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	440b      	add	r3, r1
 8000f18:	330c      	adds	r3, #12
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	4924      	ldr	r1, [pc, #144]	; (8000fb4 <HW_TS_Start+0xfc>)
 8000f22:	4613      	mov	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	440b      	add	r3, r1
 8000f2c:	3308      	adds	r3, #8
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	491f      	ldr	r1, [pc, #124]	; (8000fb4 <HW_TS_Start+0xfc>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	440b      	add	r3, r1
 8000f40:	3304      	adds	r3, #4
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fbf1 	bl	8000730 <linkTimer>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HW_TS_Start+0x104>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <HW_TS_Start+0x108>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	7c7a      	ldrb	r2, [r7, #17]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d002      	beq.n	8000f6a <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8000f64:	f7ff fdb0 	bl	8000ac8 <RescheduleTimerList>
 8000f68:	e013      	b.n	8000f92 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	4911      	ldr	r1, [pc, #68]	; (8000fb4 <HW_TS_Start+0xfc>)
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	440b      	add	r3, r1
 8000f78:	3308      	adds	r3, #8
 8000f7a:	6819      	ldr	r1, [r3, #0]
 8000f7c:	8a7b      	ldrh	r3, [r7, #18]
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	1ac9      	subs	r1, r1, r3
 8000f82:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <HW_TS_Start+0xfc>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4403      	add	r3, r0
 8000f8e:	3308      	adds	r3, #8
 8000f90:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HW_TS_Start+0x100>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	22ff      	movs	r2, #255	; 0xff
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f002 f809 	bl	8002fb4 <HAL_NVIC_EnableIRQ>
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000fac:	bf00      	nop
}
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000018c 	.word	0x2000018c
 8000fb8:	20000248 	.word	0x20000248
 8000fbc:	2000021c 	.word	0x2000021c
 8000fc0:	2000021d 	.word	0x2000021d

08000fc4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4798      	blx	r3

  return;
 8000fd6:	bf00      	nop
}
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fee:	f023 0218 	bic.w	r2, r3, #24
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  /**
	   * The OPTVERR flag is wrongly set at power on
	   * It shall be cleared before using any HAL_FLASH_xxx() api
	   */
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <main+0x4c>)
 8001012:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001016:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 fd7c 	bl	8001b14 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 800101c:	f000 f9f1 	bl	8001402 <_Z12Reset_Devicev>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f81c 	bl	800105c <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  Init_Exti( );
 8001024:	f000 fa18 	bl	8001458 <_Z9Init_Extiv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001028:	f7ff fa50 	bl	80004cc <MX_GPIO_Init>
  MX_DMA_Init();
 800102c:	f7ff fa18 	bl	8000460 <MX_DMA_Init>
  MX_TIM2_Init();
 8001030:	f000 fc26 	bl	8001880 <MX_TIM2_Init>
  MX_TIM17_Init();
 8001034:	f000 fc72 	bl	800191c <MX_TIM17_Init>
  MX_ADC1_Init();
 8001038:	f7ff f8c6 	bl	80001c8 <MX_ADC1_Init>
  MX_USB_Device_Init();
 800103c:	f00c fd6a 	bl	800db14 <MX_USB_Device_Init>
  MX_RF_Init();
 8001040:	f000 fa16 	bl	8001470 <MX_RF_Init>
  MX_RTC_Init();
 8001044:	f000 fa46 	bl	80014d4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001048:	f009 fb04 	bl	800a654 <osKernelInitialize>
  MX_FREERTOS_Init();
 800104c:	f7ff f9d2 	bl	80003f4 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 8001050:	f009 fb34 	bl	800a6bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001054:	e7fe      	b.n	8001054 <main+0x48>
 8001056:	bf00      	nop
 8001058:	58004000 	.word	0x58004000

0800105c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0ae      	sub	sp, #184	; 0xb8
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001066:	2248      	movs	r2, #72	; 0x48
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f00d fa89 	bl	800e582 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2250      	movs	r2, #80	; 0x50
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f00d fa79 	bl	800e582 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8001090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800109a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80010a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ae:	f043 0303 	orr.w	r3, r3, #3
 80010b2:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010b4:	f003 fa58 	bl	8004568 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff ff90 	bl	8000fde <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010be:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <_Z18SystemClock_Configv+0x160>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010c6:	4a3d      	ldr	r2, [pc, #244]	; (80011bc <_Z18SystemClock_Configv+0x160>)
 80010c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <_Z18SystemClock_Configv+0x160>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80010da:	2307      	movs	r3, #7
 80010dc:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ee:	2340      	movs	r3, #64	; 0x40
 80010f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fde2 	bl	8004cc8 <HAL_RCC_OscConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf14      	ite	ne
 800110a:	2301      	movne	r3, #1
 800110c:	2300      	moveq	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001114:	f000 f866 	bl	80011e4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001118:	236f      	movs	r3, #111	; 0x6f
 800111a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800111c:	2302      	movs	r3, #2
 800111e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001134:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001138:	2101      	movs	r1, #1
 800113a:	4618      	mov	r0, r3
 800113c:	f004 f950 	bl	80053e0 <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf14      	ite	ne
 8001146:	2301      	movne	r3, #1
 8001148:	2300      	moveq	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 8001150:	f000 f848 	bl	80011e4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001154:	f44f 5374 	mov.w	r3, #15616	; 0x3d00
 8001158:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800115a:	2306      	movs	r3, #6
 800115c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800115e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001162:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001164:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001168:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800116a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800116e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001174:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001176:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800117a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800117c:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001180:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001186:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001188:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800118c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800118e:	2300      	movs	r3, #0
 8001190:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001192:	2310      	movs	r3, #16
 8001194:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4618      	mov	r0, r3
 800119a:	f004 fd7c 	bl	8005c96 <HAL_RCCEx_PeriphCLKConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf14      	ite	ne
 80011a4:	2301      	movne	r3, #1
 80011a6:	2300      	moveq	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <_Z18SystemClock_Configv+0x156>
  {
    Error_Handler();
 80011ae:	f000 f819 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80011b2:	bf00      	nop
 80011b4:	37b8      	adds	r7, #184	; 0xb8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	58000400 	.word	0x58000400

080011c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011d2:	f000 fcbf 	bl	8001b54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40012c00 	.word	0x40012c00

080011e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ea:	e7fe      	b.n	80011ea <Error_Handler+0x6>

080011ec <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <LL_EXTI_DisableIT_0_31+0x28>)
 80011f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4905      	ldr	r1, [pc, #20]	; (8001214 <LL_EXTI_DisableIT_0_31+0x28>)
 8001200:	4013      	ands	r3, r2
 8001202:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	58000800 	.word	0x58000800

08001218 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <LL_EXTI_DisableIT_32_63+0x28>)
 8001222:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	43db      	mvns	r3, r3
 800122a:	4905      	ldr	r1, [pc, #20]	; (8001240 <LL_EXTI_DisableIT_32_63+0x28>)
 800122c:	4013      	ands	r3, r2
 800122e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	58000800 	.word	0x58000800

08001244 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800126a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800128c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800129c:	d101      	bne.n	80012a2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80012b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012c2:	d101      	bne.n	80012c8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80012dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012e8:	4313      	orrs	r3, r2
 80012ea:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80012ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4013      	ands	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012f8:	68fb      	ldr	r3, [r7, #12]
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	605a      	str	r2, [r3, #4]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	605a      	str	r2, [r3, #4]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695a      	ldr	r2, [r3, #20]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	041b      	lsls	r3, r3, #16
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	615a      	str	r2, [r3, #20]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	615a      	str	r2, [r3, #20]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	609a      	str	r2, [r3, #8]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_Z18Reset_BackupDomainv>:




void Reset_BackupDomain( void )
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80013ce:	f7ff ff5b 	bl	8001288 <LL_RCC_IsActiveFlag_PINRST>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <_Z18Reset_BackupDomainv+0x1c>
 80013d8:	f7ff ff69 	bl	80012ae <LL_RCC_IsActiveFlag_SFTRST>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <_Z18Reset_BackupDomainv+0x1c>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <_Z18Reset_BackupDomainv+0x1e>
 80013e6:	2300      	movs	r3, #0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <_Z18Reset_BackupDomainv+0x34>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80013ec:	f003 f8bc 	bl	8004568 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80013f0:	f003 f8ba 	bl	8004568 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80013f4:	f7ff ff26 	bl	8001244 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80013f8:	f7ff ff35 	bl	8001266 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
}
 8001400:	bd80      	pop	{r7, pc}

08001402 <_Z12Reset_Devicev>:

void Reset_Device( void )
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8001406:	f7ff ffe0 	bl	80013ca <_Z18Reset_BackupDomainv>

  Reset_IPCC();
 800140a:	f000 f803 	bl	8001414 <_Z10Reset_IPCCv>
#endif

  return;
 800140e:	bf00      	nop
}
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <_Z10Reset_IPCCv>:

void Reset_IPCC( void )
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001418:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800141c:	f7ff ff5a 	bl	80012d4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001420:	213f      	movs	r1, #63	; 0x3f
 8001422:	480c      	ldr	r0, [pc, #48]	; (8001454 <_Z10Reset_IPCCv+0x40>)
 8001424:	f7ff ffb5 	bl	8001392 <LL_C1_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001428:	213f      	movs	r1, #63	; 0x3f
 800142a:	480a      	ldr	r0, [pc, #40]	; (8001454 <_Z10Reset_IPCCv+0x40>)
 800142c:	f7ff ffbf 	bl	80013ae <LL_C2_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001430:	213f      	movs	r1, #63	; 0x3f
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <_Z10Reset_IPCCv+0x40>)
 8001434:	f7ff ff67 	bl	8001306 <LL_C1_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001438:	213f      	movs	r1, #63	; 0x3f
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <_Z10Reset_IPCCv+0x40>)
 800143c:	f7ff ff86 	bl	800134c <LL_C2_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001440:	213f      	movs	r1, #63	; 0x3f
 8001442:	4804      	ldr	r0, [pc, #16]	; (8001454 <_Z10Reset_IPCCv+0x40>)
 8001444:	f7ff ff71 	bl	800132a <LL_C1_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001448:	213f      	movs	r1, #63	; 0x3f
 800144a:	4802      	ldr	r0, [pc, #8]	; (8001454 <_Z10Reset_IPCCv+0x40>)
 800144c:	f7ff ff90 	bl	8001370 <LL_C2_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001450:	bf00      	nop
}
 8001452:	bd80      	pop	{r7, pc}
 8001454:	58000c00 	.word	0x58000c00

08001458 <_Z9Init_Extiv>:

void Init_Exti( void )
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f7ff fec4 	bl	80011ec <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001464:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001468:	f7ff fed6 	bl	8001218 <LL_EXTI_DisableIT_32_63>

  return;
 800146c:	bf00      	nop
}
 800146e:	bd80      	pop	{r7, pc}

08001470 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <LL_RCC_EnableRTC>:
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800148e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c4:	68fb      	ldr	r3, [r7, #12]
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_RTC_Init+0x4c>)
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_RTC_Init+0x50>)
 80014dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_RTC_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_RTC_Init+0x4c>)
 80014e6:	220f      	movs	r2, #15
 80014e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <MX_RTC_Init+0x4c>)
 80014ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80014f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_RTC_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_RTC_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_RTC_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_RTC_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_RTC_Init+0x4c>)
 800150c:	f004 fe49 	bl	80061a2 <HAL_RTC_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001516:	f7ff fe65 	bl	80011e4 <Error_Handler>
  }

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20004b7c 	.word	0x20004b7c
 8001524:	40002800 	.word	0x40002800

08001528 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_RTC_MspInit+0x28>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d105      	bne.n	8001546 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800153a:	f7ff ffa0 	bl	800147e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800153e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001542:	f7ff ffad 	bl	80014a0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40002800 	.word	0x40002800

08001554 <LL_AHB3_GRP1_EnableClock>:
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800155c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4313      	orrs	r3, r2
 800156a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800156c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001578:	68fb      	ldr	r3, [r7, #12]
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800158a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800158e:	f7ff ffe1 	bl	8001554 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	210f      	movs	r1, #15
 8001596:	f06f 0001 	mvn.w	r0, #1
 800159a:	f001 fcf1 	bl	8002f80 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2105      	movs	r1, #5
 80015a2:	202e      	movs	r0, #46	; 0x2e
 80015a4:	f001 fcec 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80015a8:	202e      	movs	r0, #46	; 0x2e
 80015aa:	f001 fd03 	bl	8002fb4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	210f      	movs	r1, #15
 80015b2:	202c      	movs	r0, #44	; 0x2c
 80015b4:	f001 fce4 	bl	8002f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	210f      	movs	r1, #15
 80015bc:	202d      	movs	r0, #45	; 0x2d
 80015be:	f001 fcdf 	bl	8002f80 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b085      	sub	sp, #20
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4313      	orrs	r3, r2
 80015dc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4013      	ands	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08c      	sub	sp, #48	; 0x30
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	2019      	movs	r0, #25
 800160e:	f001 fcb7 	bl	8002f80 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001612:	2019      	movs	r0, #25
 8001614:	f001 fcce 	bl	8002fb4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001618:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800161c:	f7ff ffd3 	bl	80015c6 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001620:	f107 0208 	add.w	r2, r7, #8
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f004 f8ac 	bl	8005788 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001630:	f004 f894 	bl	800575c <HAL_RCC_GetPCLK2Freq>
 8001634:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001638:	4a12      	ldr	r2, [pc, #72]	; (8001684 <HAL_InitTick+0x8c>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0c9b      	lsrs	r3, r3, #18
 8001640:	3b01      	subs	r3, #1
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_InitTick+0x90>)
 8001646:	4a11      	ldr	r2, [pc, #68]	; (800168c <HAL_InitTick+0x94>)
 8001648:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_InitTick+0x90>)
 800164c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001650:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001652:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_InitTick+0x90>)
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_InitTick+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_InitTick+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001664:	4808      	ldr	r0, [pc, #32]	; (8001688 <HAL_InitTick+0x90>)
 8001666:	f004 fe8a 	bl	800637e <HAL_TIM_Base_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d104      	bne.n	800167a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <HAL_InitTick+0x90>)
 8001672:	f004 fedb 	bl	800642c <HAL_TIM_Base_Start_IT>
 8001676:	4603      	mov	r3, r0
 8001678:	e000      	b.n	800167c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3730      	adds	r7, #48	; 0x30
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	431bde83 	.word	0x431bde83
 8001688:	20004ba0 	.word	0x20004ba0
 800168c:	40012c00 	.word	0x40012c00

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <NMI_Handler+0x4>

08001696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <MemManage_Handler+0x4>

080016a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <BusFault_Handler+0x4>

080016a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <UsageFault_Handler+0x4>

080016ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <DMA1_Channel1_IRQHandler+0x10>)
 80016c2:	f001 fd57 	bl	8003174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20004b1c 	.word	0x20004b1c

080016d0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <ADC1_IRQHandler+0x10>)
 80016d6:	f000 fd73 	bl	80021c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20004ab8 	.word	0x20004ab8

080016e4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <USB_LP_IRQHandler+0x10>)
 80016ea:	f002 f8e0 	bl	80038ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20006198 	.word	0x20006198

080016f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80016fe:	f004 ff44 	bl	800658a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20004ba0 	.word	0x20004ba0

0800170c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001710:	f001 ffcc 	bl	80036ac <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}

08001718 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 800171c:	f7ff fa72 	bl	8000c04 <HW_TS_RTC_Wakeup_Handler>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001728:	f00c f8f4 	bl	800d914 <HW_IPCC_Tx_Handler>
  return;
 800172c:	bf00      	nop
}
 800172e:	bd80      	pop	{r7, pc}

08001730 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001734:	f00c f894 	bl	800d860 <HW_IPCC_Rx_Handler>
  return;
 8001738:	bf00      	nop
}
 800173a:	bd80      	pop	{r7, pc}

0800173c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001740:	4b26      	ldr	r3, [pc, #152]	; (80017dc <SystemInit+0xa0>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001746:	4b25      	ldr	r3, [pc, #148]	; (80017dc <SystemInit+0xa0>)
 8001748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174c:	4a23      	ldr	r2, [pc, #140]	; (80017dc <SystemInit+0xa0>)
 800174e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001752:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800176e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <SystemInit+0xa4>)
 800177c:	4013      	ands	r3, r2
 800177e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800178c:	f023 0305 	bic.w	r3, r3, #5
 8001790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001798:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800179c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80017a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ac:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <SystemInit+0xa8>)
 80017ae:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <SystemInit+0xa8>)
 80017b6:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00
 80017e0:	faf6fefb 	.word	0xfaf6fefb
 80017e4:	22041000 	.word	0x22041000

080017e8 <LL_AHB2_GRP1_EnableClock>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001804:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4013      	ands	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_APB1_GRP1_EnableClock>:
{
 800181a:	b480      	push	{r7}
 800181c:	b085      	sub	sp, #20
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001826:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4313      	orrs	r3, r2
 8001830:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001836:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4013      	ands	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_APB2_GRP1_EnableClock>:
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001858:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800185a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4313      	orrs	r3, r2
 8001862:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001868:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4013      	ands	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001870:	68fb      	ldr	r3, [r7, #12]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800189e:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <MX_TIM2_Init+0x98>)
 80018a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_TIM2_Init+0x98>)
 80018a8:	221f      	movs	r2, #31
 80018aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_TIM2_Init+0x98>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_TIM2_Init+0x98>)
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_TIM2_Init+0x98>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <MX_TIM2_Init+0x98>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018c6:	4814      	ldr	r0, [pc, #80]	; (8001918 <MX_TIM2_Init+0x98>)
 80018c8:	f004 fd59 	bl	800637e <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018d2:	f7ff fc87 	bl	80011e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	4619      	mov	r1, r3
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_TIM2_Init+0x98>)
 80018e4:	f005 f880 	bl	80069e8 <HAL_TIM_ConfigClockSource>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018ee:	f7ff fc79 	bl	80011e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	; (8001918 <MX_TIM2_Init+0x98>)
 8001900:	f005 fcd2 	bl	80072a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800190a:	f7ff fc6b 	bl	80011e4 <Error_Handler>
  }

}
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20004c38 	.word	0x20004c38

0800191c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b094      	sub	sp, #80	; 0x50
 8001920:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001922:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	615a      	str	r2, [r3, #20]
 8001934:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001936:	463b      	mov	r3, r7
 8001938:	2234      	movs	r2, #52	; 0x34
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f00c fe20 	bl	800e582 <memset>

  htim17.Instance = TIM17;
 8001942:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <MX_TIM17_Init+0xec>)
 8001944:	4a31      	ldr	r2, [pc, #196]	; (8001a0c <MX_TIM17_Init+0xf0>)
 8001946:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3199;
 8001948:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <MX_TIM17_Init+0xec>)
 800194a:	f640 427f 	movw	r2, #3199	; 0xc7f
 800194e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <MX_TIM17_Init+0xec>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <MX_TIM17_Init+0xec>)
 8001958:	2264      	movs	r2, #100	; 0x64
 800195a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <MX_TIM17_Init+0xec>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001962:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <MX_TIM17_Init+0xec>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <MX_TIM17_Init+0xec>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800196e:	4826      	ldr	r0, [pc, #152]	; (8001a08 <MX_TIM17_Init+0xec>)
 8001970:	f004 fd05 	bl	800637e <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800197a:	f7ff fc33 	bl	80011e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800197e:	4822      	ldr	r0, [pc, #136]	; (8001a08 <MX_TIM17_Init+0xec>)
 8001980:	f004 fda2 	bl	80064c8 <HAL_TIM_PWM_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800198a:	f7ff fc2b 	bl	80011e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198e:	2360      	movs	r3, #96	; 0x60
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1;
 8001992:	2301      	movs	r3, #1
 8001994:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001996:	2300      	movs	r3, #0
 8001998:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800199a:	2300      	movs	r3, #0
 800199c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ae:	2200      	movs	r2, #0
 80019b0:	4619      	mov	r1, r3
 80019b2:	4815      	ldr	r0, [pc, #84]	; (8001a08 <MX_TIM17_Init+0xec>)
 80019b4:	f004 ff08 	bl	80067c8 <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80019be:	f7ff fc11 	bl	80011e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80019e4:	463b      	mov	r3, r7
 80019e6:	4619      	mov	r1, r3
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <MX_TIM17_Init+0xec>)
 80019ea:	f005 fcbd 	bl	8007368 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80019f4:	f7ff fbf6 	bl	80011e4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 80019f8:	4803      	ldr	r0, [pc, #12]	; (8001a08 <MX_TIM17_Init+0xec>)
 80019fa:	f000 f825 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 80019fe:	bf00      	nop
 8001a00:	3750      	adds	r7, #80	; 0x50
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20004bec 	.word	0x20004bec
 8001a0c:	40014800 	.word	0x40014800

08001a10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a20:	d103      	bne.n	8001a2a <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a22:	2001      	movs	r0, #1
 8001a24:	f7ff fef9 	bl	800181a <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001a28:	e008      	b.n	8001a3c <HAL_TIM_Base_MspInit+0x2c>
  else if(tim_baseHandle->Instance==TIM17)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <HAL_TIM_Base_MspInit+0x34>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d103      	bne.n	8001a3c <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001a34:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001a38:	f7ff ff08 	bl	800184c <LL_APB2_GRP1_EnableClock>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40014800 	.word	0x40014800

08001a48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM17)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <HAL_TIM_MspPostInit+0x54>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d113      	bne.n	8001a92 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f7ff febc 	bl	80017e8 <LL_AHB2_GRP1_EnableClock>
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8001a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8001a82:	230e      	movs	r3, #14
 8001a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <HAL_TIM_MspPostInit+0x58>)
 8001a8e:	f001 fc85 	bl	800339c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40014800 	.word	0x40014800
 8001aa0:	48000400 	.word	0x48000400

08001aa4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001aa4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa8:	3304      	adds	r3, #4

08001aaa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aaa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aac:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001aae:	d3f9      	bcc.n	8001aa4 <CopyDataInit>
  bx lr
 8001ab0:	4770      	bx	lr

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001ab2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001ab4:	3004      	adds	r0, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001ab6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>
  bx lr
 8001aba:	4770      	bx	lr

08001abc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001abe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ac0:	f7ff fe3c 	bl	800173c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001ac4:	480b      	ldr	r0, [pc, #44]	; (8001af4 <LoopForever+0x8>)
 8001ac6:	490c      	ldr	r1, [pc, #48]	; (8001af8 <LoopForever+0xc>)
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <LoopForever+0x10>)
 8001aca:	2300      	movs	r3, #0
 8001acc:	f7ff ffed 	bl	8001aaa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001ad0:	480b      	ldr	r0, [pc, #44]	; (8001b00 <LoopForever+0x14>)
 8001ad2:	490c      	ldr	r1, [pc, #48]	; (8001b04 <LoopForever+0x18>)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f7ff ffee 	bl	8001ab6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001ada:	480b      	ldr	r0, [pc, #44]	; (8001b08 <LoopForever+0x1c>)
 8001adc:	490b      	ldr	r1, [pc, #44]	; (8001b0c <LoopForever+0x20>)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f7ff ffe9 	bl	8001ab6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ae4:	f00c fd1e 	bl	800e524 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001ae8:	f7ff fa90 	bl	800100c <main>

08001aec <LoopForever>:

LoopForever:
  b LoopForever
 8001aec:	e7fe      	b.n	8001aec <LoopForever>
 8001aee:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001af0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001af4:	20000004 	.word	0x20000004
 8001af8:	2000018c 	.word	0x2000018c
 8001afc:	0800e92c 	.word	0x0800e92c
  INIT_BSS _sbss, _ebss
 8001b00:	20000228 	.word	0x20000228
 8001b04:	2000640c 	.word	0x2000640c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b08:	200300d4 	.word	0x200300d4
 8001b0c:	200300d4 	.word	0x200300d4

08001b10 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <AES1_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_Init+0x3c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <HAL_Init+0x3c>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2a:	2003      	movs	r0, #3
 8001b2c:	f001 fa1d 	bl	8002f6a <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fd61 	bl	80015f8 <HAL_InitTick>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	e001      	b.n	8001b46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b42:	f7ff fd20 	bl	8001586 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b46:	79fb      	ldrb	r3, [r7, #7]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	58004000 	.word	0x58004000

08001b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x20>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x24>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_IncTick+0x24>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	2000000c 	.word	0x2000000c
 8001b78:	20004c84 	.word	0x20004c84

08001b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_GetTick+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20004c84 	.word	0x20004c84

08001b94 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_GetTickPrio+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008

08001bac <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
#endif
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	609a      	str	r2, [r3, #8]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3360      	adds	r3, #96	; 0x60
 8001c26:	461a      	mov	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <LL_ADC_SetOffset+0x44>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	4313      	orrs	r3, r2
 8001c44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c4c:	bf00      	nop
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	03fff000 	.word	0x03fff000

08001c5c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3360      	adds	r3, #96	; 0x60
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3360      	adds	r3, #96	; 0x60
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cb2:	bf00      	nop
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cd6:	2300      	movs	r3, #0
#endif
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3330      	adds	r3, #48	; 0x30
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	f003 030c 	and.w	r3, r3, #12
 8001d00:	4413      	add	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	211f      	movs	r1, #31
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	401a      	ands	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	0e9b      	lsrs	r3, r3, #26
 8001d1c:	f003 011f 	and.w	r1, r3, #31
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8001d30:	bf00      	nop
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0303 	and.w	r3, r3, #3
#endif
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b087      	sub	sp, #28
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3314      	adds	r3, #20
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	0e5b      	lsrs	r3, r3, #25
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	4413      	add	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	0d1b      	lsrs	r3, r3, #20
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	2107      	movs	r1, #7
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	401a      	ands	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	0d1b      	lsrs	r3, r3, #20
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8001dc8:	bf00      	nop
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dec:	43db      	mvns	r3, r3
 8001dee:	401a      	ands	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0318 	and.w	r3, r3, #24
 8001df6:	4908      	ldr	r1, [pc, #32]	; (8001e18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001df8:	40d9      	lsrs	r1, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	400b      	ands	r3, r1
 8001dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e02:	431a      	orrs	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	0007ffff 	.word	0x0007ffff

08001e1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6093      	str	r3, [r2, #8]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e54:	d101      	bne.n	8001e5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ea4:	d101      	bne.n	8001eaa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <LL_ADC_IsEnabled+0x18>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <LL_ADC_IsEnabled+0x1a>
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d101      	bne.n	8001ef6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d101      	bne.n	8001f1c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e12c      	b.n	80021a4 <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7fe f9cb 	bl	80002f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff65 	bl	8001e40 <LL_ADC_IsDeepPowerDownEnabled>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff4b 	bl	8001e1c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff80 	bl	8001e90 <LL_ADC_IsInternalRegulatorEnabled>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d113      	bne.n	8001fbe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff64 	bl	8001e68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001fa0:	4b82      	ldr	r3, [pc, #520]	; (80021ac <HAL_ADC_Init+0x280>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	4a82      	ldr	r2, [pc, #520]	; (80021b0 <HAL_ADC_Init+0x284>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	099b      	lsrs	r3, r3, #6
 8001fae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fb0:	e002      	b.n	8001fb8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f9      	bne.n	8001fb2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff64 	bl	8001e90 <LL_ADC_IsInternalRegulatorEnabled>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10d      	bne.n	8001fea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f043 0210 	orr.w	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff75 	bl	8001ede <LL_ADC_REG_IsConversionOngoing>
 8001ff4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 80c7 	bne.w	8002192 <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 80c3 	bne.w	8002192 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002014:	f043 0202 	orr.w	r2, r3, #2
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff49 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10b      	bne.n	8002044 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800202c:	4861      	ldr	r0, [pc, #388]	; (80021b4 <HAL_ADC_Init+0x288>)
 800202e:	f7ff ff43 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4619      	mov	r1, r3
 800203e:	485e      	ldr	r0, [pc, #376]	; (80021b8 <HAL_ADC_Init+0x28c>)
 8002040:	f7ff fdb4 	bl	8001bac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7e5b      	ldrb	r3, [r3, #25]
 8002048:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800204e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002054:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800205a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002062:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002064:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d106      	bne.n	8002084 <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	3b01      	subs	r3, #1
 800207c:	045b      	lsls	r3, r3, #17
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	2b00      	cmp	r3, #0
 800208a:	d009      	beq.n	80020a0 <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	4b45      	ldr	r3, [pc, #276]	; (80021bc <HAL_ADC_Init+0x290>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff10 	bl	8001ede <LL_ADC_REG_IsConversionOngoing>
 80020be:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff1d 	bl	8001f04 <LL_ADC_INJ_IsConversionOngoing>
 80020ca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d13d      	bne.n	800214e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d13a      	bne.n	800214e <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020dc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020f4:	f023 0302 	bic.w	r3, r3, #2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	69b9      	ldr	r1, [r7, #24]
 80020fe:	430b      	orrs	r3, r1
 8002100:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002108:	2b01      	cmp	r3, #1
 800210a:	d118      	bne.n	800213e <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002116:	f023 0304 	bic.w	r3, r3, #4
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002128:	4311      	orrs	r1, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800212e:	430a      	orrs	r2, r1
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	611a      	str	r2, [r3, #16]
 800213c:	e007      	b.n	800214e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10c      	bne.n	8002170 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	f023 010f 	bic.w	r1, r3, #15
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	1e5a      	subs	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
 800216e:	e007      	b.n	8002180 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 020f 	bic.w	r2, r2, #15
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	f023 0303 	bic.w	r3, r3, #3
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	; 0x54
 8002190:	e007      	b.n	80021a2 <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f043 0210 	orr.w	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000004 	.word	0x20000004
 80021b0:	053e2d63 	.word	0x053e2d63
 80021b4:	50040000 	.word	0x50040000
 80021b8:	50040300 	.word	0x50040300
 80021bc:	fff0c007 	.word	0xfff0c007

080021c0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d017      	beq.n	8002216 <HAL_ADC_IRQHandler+0x56>
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d012      	beq.n	8002216 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d105      	bne.n	8002208 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fd99 	bl	8002d40 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2202      	movs	r2, #2
 8002214:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HAL_ADC_IRQHandler+0x6a>
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002230:	2b00      	cmp	r3, #0
 8002232:	d05d      	beq.n	80022f0 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d058      	beq.n	80022f0 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	d105      	bne.n	8002256 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fd2f 	bl	8001cbe <LL_ADC_REG_IsTriggerSourceSWStart>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d03d      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if defined (ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002274:	d035      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x122>
#endif
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b08      	cmp	r3, #8
 8002282:	d12e      	bne.n	80022e2 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fe28 	bl	8001ede <LL_ADC_REG_IsConversionOngoing>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d11a      	bne.n	80022ca <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 020c 	bic.w	r2, r2, #12
 80022a2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d112      	bne.n	80022e2 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
 80022c8:	e00b      	b.n	80022e2 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ce:	f043 0210 	orr.w	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f922 	bl	800252c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	220c      	movs	r2, #12
 80022ee:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d004      	beq.n	8002304 <HAL_ADC_IRQHandler+0x144>
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800230a:	2b00      	cmp	r3, #0
 800230c:	d074      	beq.n	80023f8 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d06f      	beq.n	80023f8 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fd0f 	bl	8001d58 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800233a:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fcbc 	bl	8001cbe <LL_ADC_REG_IsTriggerSourceSWStart>
 8002346:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d049      	beq.n	80023ea <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_ADC_IRQHandler+0x1b0>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d041      	beq.n	80023ea <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800236c:	2b00      	cmp	r3, #0
 800236e:	d13c      	bne.n	80023ea <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237a:	2b40      	cmp	r3, #64	; 0x40
 800237c:	d135      	bne.n	80023ea <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d12e      	bne.n	80023ea <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fdb7 	bl	8001f04 <LL_ADC_INJ_IsConversionOngoing>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11a      	bne.n	80023d2 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023aa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d112      	bne.n	80023ea <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
 80023d0:	e00b      	b.n	80023ea <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	f043 0210 	orr.w	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fc80 	bl	8002cf0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2260      	movs	r2, #96	; 0x60
 80023f6:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d011      	beq.n	8002426 <HAL_ADC_IRQHandler+0x266>
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00c      	beq.n	8002426 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f891 	bl	8002540 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d012      	beq.n	8002456 <HAL_ADC_IRQHandler+0x296>
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00d      	beq.n	8002456 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fc66 	bl	8002d18 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002454:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245c:	2b00      	cmp	r3, #0
 800245e:	d012      	beq.n	8002486 <HAL_ADC_IRQHandler+0x2c6>
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00d      	beq.n	8002486 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fc58 	bl	8002d2c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d02b      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x328>
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	d026      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80024a2:	2301      	movs	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	e009      	b.n	80024bc <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fc45 	bl	8001d3c <LL_ADC_REG_GetDMATransfer>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80024b8:	2301      	movs	r3, #1
 80024ba:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d10e      	bne.n	80024e0 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d2:	f043 0202 	orr.w	r2, r3, #2
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f83a 	bl	8002554 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2210      	movs	r2, #16
 80024e6:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d018      	beq.n	8002524 <HAL_ADC_IRQHandler+0x364>
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002500:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	f043 0208 	orr.w	r2, r3, #8
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800251c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fbf0 	bl	8002d04 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8002524:	bf00      	nop
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b0b6      	sub	sp, #216	; 0xd8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_ADC_ConfigChannel+0x22>
 8002586:	2302      	movs	r3, #2
 8002588:	e39e      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x760>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fca1 	bl	8001ede <LL_ADC_REG_IsConversionOngoing>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f040 8383 	bne.w	8002caa <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	f7ff fb97 	bl	8001ce4 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fc8f 	bl	8001ede <LL_ADC_REG_IsConversionOngoing>
 80025c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fc9b 	bl	8001f04 <LL_ADC_INJ_IsConversionOngoing>
 80025ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 81a6 	bne.w	8002928 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f040 81a1 	bne.w	8002928 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f7ff fbc3 	bl	8001d7e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	08db      	lsrs	r3, r3, #3
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b04      	cmp	r3, #4
 8002618:	d00a      	beq.n	8002630 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6919      	ldr	r1, [r3, #16]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800262a:	f7ff faf3 	bl	8001c14 <LL_ADC_SetOffset>
 800262e:	e17b      	b.n	8002928 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fb10 	bl	8001c5c <LL_ADC_GetOffsetChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <HAL_ADC_ConfigChannel+0xf4>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fb05 	bl	8001c5c <LL_ADC_GetOffsetChannel>
 8002652:	4603      	mov	r3, r0
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	f003 021f 	and.w	r2, r3, #31
 800265a:	e01e      	b.n	800269a <HAL_ADC_ConfigChannel+0x132>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fafa 	bl	8001c5c <LL_ADC_GetOffsetChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800267a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800267e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002682:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800268a:	2320      	movs	r3, #32
 800268c:	e004      	b.n	8002698 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800268e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x14a>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	0e9b      	lsrs	r3, r3, #26
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	e018      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x17c>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80026c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80026ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80026d6:	2320      	movs	r3, #32
 80026d8:	e004      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80026da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d106      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fac9 	bl	8001c88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2101      	movs	r1, #1
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff faad 	bl	8001c5c <LL_ADC_GetOffsetChannel>
 8002702:	4603      	mov	r3, r0
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x1ba>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff faa2 	bl	8001c5c <LL_ADC_GetOffsetChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	0e9b      	lsrs	r3, r3, #26
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	e01e      	b.n	8002760 <HAL_ADC_ConfigChannel+0x1f8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2101      	movs	r1, #1
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fa97 	bl	8001c5c <LL_ADC_GetOffsetChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002740:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002744:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e004      	b.n	800275e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002754:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x210>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	e018      	b.n	80027aa <HAL_ADC_ConfigChannel+0x242>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800278c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800279c:	2320      	movs	r3, #32
 800279e:	e004      	b.n	80027aa <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80027a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d106      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2200      	movs	r2, #0
 80027b4:	2101      	movs	r1, #1
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fa66 	bl	8001c88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2102      	movs	r1, #2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fa4a 	bl	8001c5c <LL_ADC_GetOffsetChannel>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x280>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2102      	movs	r1, #2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fa3f 	bl	8001c5c <LL_ADC_GetOffsetChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	0e9b      	lsrs	r3, r3, #26
 80027e2:	f003 021f 	and.w	r2, r3, #31
 80027e6:	e01e      	b.n	8002826 <HAL_ADC_ConfigChannel+0x2be>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fa34 	bl	8001c5c <LL_ADC_GetOffsetChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800280a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800280e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002816:	2320      	movs	r3, #32
 8002818:	e004      	b.n	8002824 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800281a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <HAL_ADC_ConfigChannel+0x2d6>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0e9b      	lsrs	r3, r3, #26
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	e016      	b.n	800286c <HAL_ADC_ConfigChannel+0x304>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002850:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002856:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e004      	b.n	800286c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002862:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	429a      	cmp	r2, r3
 800286e:	d106      	bne.n	800287e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2200      	movs	r2, #0
 8002876:	2102      	movs	r1, #2
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fa05 	bl	8001c88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2103      	movs	r1, #3
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f9e9 	bl	8001c5c <LL_ADC_GetOffsetChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x342>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2103      	movs	r1, #3
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff f9de 	bl	8001c5c <LL_ADC_GetOffsetChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	0e9b      	lsrs	r3, r3, #26
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	e017      	b.n	80028da <HAL_ADC_ConfigChannel+0x372>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2103      	movs	r1, #3
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff f9d3 	bl	8001c5c <LL_ADC_GetOffsetChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80028c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80028c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80028cc:	2320      	movs	r3, #32
 80028ce:	e003      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80028d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x38a>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	0e9b      	lsrs	r3, r3, #26
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	e011      	b.n	8002916 <HAL_ADC_ConfigChannel+0x3ae>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002902:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800290a:	2320      	movs	r3, #32
 800290c:	e003      	b.n	8002916 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800290e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	429a      	cmp	r2, r3
 8002918:	d106      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2200      	movs	r2, #0
 8002920:	2103      	movs	r1, #3
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f9b0 	bl	8001c88 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fac3 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	f040 81c1 	bne.w	8002cbc <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	461a      	mov	r2, r3
 8002948:	f7ff fa44 	bl	8001dd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a8e      	ldr	r2, [pc, #568]	; (8002b8c <HAL_ADC_ConfigChannel+0x624>)
 8002952:	4293      	cmp	r3, r2
 8002954:	f040 8130 	bne.w	8002bb8 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10b      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x418>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	3301      	adds	r3, #1
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2b09      	cmp	r3, #9
 8002976:	bf94      	ite	ls
 8002978:	2301      	movls	r3, #1
 800297a:	2300      	movhi	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	e019      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x44c>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800298e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002990:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e003      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800299c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2b09      	cmp	r3, #9
 80029ac:	bf94      	ite	ls
 80029ae:	2301      	movls	r3, #1
 80029b0:	2300      	movhi	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d079      	beq.n	8002aac <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d107      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x46c>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0e9b      	lsrs	r3, r3, #26
 80029ca:	3301      	adds	r3, #1
 80029cc:	069b      	lsls	r3, r3, #26
 80029ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029d2:	e015      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x498>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80029e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e003      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80029f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	069b      	lsls	r3, r3, #26
 80029fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x4b8>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	3301      	adds	r3, #1
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	e017      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x4e8>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a30:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	e003      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	ea42 0103 	orr.w	r1, r2, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x50e>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	051b      	lsls	r3, r3, #20
 8002a74:	e018      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x540>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e003      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	e080      	b.n	8002bae <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d107      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x560>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	3301      	adds	r3, #1
 8002ac0:	069b      	lsls	r3, r3, #26
 8002ac2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ac6:	e015      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x58c>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	069b      	lsls	r3, r3, #26
 8002af0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d109      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x5ac>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	3301      	adds	r3, #1
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	e017      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x5dc>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	61fb      	str	r3, [r7, #28]
  return result;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e003      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f303 	lsl.w	r3, r1, r3
 8002b44:	ea42 0103 	orr.w	r1, r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10d      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x608>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	3b1e      	subs	r3, #30
 8002b68:	051b      	lsls	r3, r3, #20
 8002b6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	e01d      	b.n	8002bac <HAL_ADC_ConfigChannel+0x644>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	613b      	str	r3, [r7, #16]
  return result;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d103      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e005      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x630>
 8002b8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f003 021f 	and.w	r2, r3, #31
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b1e      	subs	r3, #30
 8002ba6:	051b      	lsls	r3, r3, #20
 8002ba8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bac:	430b      	orrs	r3, r1
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	6892      	ldr	r2, [r2, #8]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7ff f8e3 	bl	8001d7e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b44      	ldr	r3, [pc, #272]	; (8002cd0 <HAL_ADC_ConfigChannel+0x768>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d07b      	beq.n	8002cbc <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bc4:	4843      	ldr	r0, [pc, #268]	; (8002cd4 <HAL_ADC_ConfigChannel+0x76c>)
 8002bc6:	f7ff f817 	bl	8001bf8 <LL_ADC_GetCommonPathInternalCh>
 8002bca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bce:	4842      	ldr	r0, [pc, #264]	; (8002cd8 <HAL_ADC_ConfigChannel+0x770>)
 8002bd0:	f7ff f972 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d15d      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a3f      	ldr	r2, [pc, #252]	; (8002cdc <HAL_ADC_ConfigChannel+0x774>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d126      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x6ca>
 8002be4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d120      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a38      	ldr	r2, [pc, #224]	; (8002cd8 <HAL_ADC_ConfigChannel+0x770>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d160      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c02:	4619      	mov	r1, r3
 8002c04:	4833      	ldr	r0, [pc, #204]	; (8002cd4 <HAL_ADC_ConfigChannel+0x76c>)
 8002c06:	f7fe ffe4 	bl	8001bd2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002c0a:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <HAL_ADC_ConfigChannel+0x778>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	099b      	lsrs	r3, r3, #6
 8002c10:	4a34      	ldr	r2, [pc, #208]	; (8002ce4 <HAL_ADC_ConfigChannel+0x77c>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	099a      	lsrs	r2, r3, #6
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002c22:	e002      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f9      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c30:	e044      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2c      	ldr	r2, [pc, #176]	; (8002ce8 <HAL_ADC_ConfigChannel+0x780>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d113      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x6fc>
 8002c3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10d      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a22      	ldr	r2, [pc, #136]	; (8002cd8 <HAL_ADC_ConfigChannel+0x770>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d134      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	481d      	ldr	r0, [pc, #116]	; (8002cd4 <HAL_ADC_ConfigChannel+0x76c>)
 8002c5e:	f7fe ffb8 	bl	8001bd2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c62:	e02b      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a20      	ldr	r2, [pc, #128]	; (8002cec <HAL_ADC_ConfigChannel+0x784>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d126      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x754>
 8002c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d120      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a16      	ldr	r2, [pc, #88]	; (8002cd8 <HAL_ADC_ConfigChannel+0x770>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d11b      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4811      	ldr	r0, [pc, #68]	; (8002cd4 <HAL_ADC_ConfigChannel+0x76c>)
 8002c90:	f7fe ff9f 	bl	8001bd2 <LL_ADC_SetCommonPathInternalCh>
 8002c94:	e012      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ca8:	e008      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	f043 0220 	orr.w	r2, r3, #32
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002cc4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	37d8      	adds	r7, #216	; 0xd8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	80080000 	.word	0x80080000
 8002cd4:	50040300 	.word	0x50040300
 8002cd8:	50040000 	.word	0x50040000
 8002cdc:	c7520000 	.word	0xc7520000
 8002ce0:	20000004 	.word	0x20000004
 8002ce4:	053e2d63 	.word	0x053e2d63
 8002ce8:	cb840000 	.word	0xcb840000
 8002cec:	80000001 	.word	0x80000001

08002cf0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d64:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <__NVIC_SetPriorityGrouping+0x44>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d70:	4013      	ands	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d86:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <__NVIC_SetPriorityGrouping+0x44>)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	60d3      	str	r3, [r2, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <__NVIC_GetPriorityGrouping+0x18>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	f003 0307 	and.w	r3, r3, #7
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	db0b      	blt.n	8002de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	f003 021f 	and.w	r2, r3, #31
 8002dd0:	4907      	ldr	r1, [pc, #28]	; (8002df0 <__NVIC_EnableIRQ+0x38>)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	2001      	movs	r0, #1
 8002dda:	fa00 f202 	lsl.w	r2, r0, r2
 8002dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	e000e100 	.word	0xe000e100

08002df4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	db10      	blt.n	8002e28 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	4909      	ldr	r1, [pc, #36]	; (8002e34 <__NVIC_DisableIRQ+0x40>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	2001      	movs	r0, #1
 8002e16:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1a:	3320      	adds	r3, #32
 8002e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e24:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000e100 	.word	0xe000e100

08002e38 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	db0c      	blt.n	8002e64 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	4907      	ldr	r1, [pc, #28]	; (8002e70 <__NVIC_SetPendingIRQ+0x38>)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	2001      	movs	r0, #1
 8002e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e5e:	3340      	adds	r3, #64	; 0x40
 8002e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000e100 	.word	0xe000e100

08002e74 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db0c      	blt.n	8002ea0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	4907      	ldr	r1, [pc, #28]	; (8002eac <__NVIC_ClearPendingIRQ+0x38>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9a:	3360      	adds	r3, #96	; 0x60
 8002e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db0a      	blt.n	8002eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	490c      	ldr	r1, [pc, #48]	; (8002efc <__NVIC_SetPriority+0x4c>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed8:	e00a      	b.n	8002ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4908      	ldr	r1, [pc, #32]	; (8002f00 <__NVIC_SetPriority+0x50>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	440b      	add	r3, r1
 8002eee:	761a      	strb	r2, [r3, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000e100 	.word	0xe000e100
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f1c3 0307 	rsb	r3, r3, #7
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	bf28      	it	cs
 8002f22:	2304      	movcs	r3, #4
 8002f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d902      	bls.n	8002f34 <NVIC_EncodePriority+0x30>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3b03      	subs	r3, #3
 8002f32:	e000      	b.n	8002f36 <NVIC_EncodePriority+0x32>
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	401a      	ands	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43d9      	mvns	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	4313      	orrs	r3, r2
         );
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff feee 	bl	8002d54 <__NVIC_SetPriorityGrouping>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f8e:	f7ff ff05 	bl	8002d9c <__NVIC_GetPriorityGrouping>
 8002f92:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	6978      	ldr	r0, [r7, #20]
 8002f9a:	f7ff ffb3 	bl	8002f04 <NVIC_EncodePriority>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff ff82 	bl	8002eb0 <__NVIC_SetPriority>
}
 8002fac:	bf00      	nop
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fef8 	bl	8002db8 <__NVIC_EnableIRQ>
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff ff08 	bl	8002df4 <__NVIC_DisableIRQ>
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ff1c 	bl	8002e38 <__NVIC_SetPendingIRQ>
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ff2c 	bl	8002e74 <__NVIC_ClearPendingIRQ>
}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e08e      	b.n	8003154 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_DMA_Init+0x138>)
 800303e:	429a      	cmp	r2, r3
 8003040:	d80f      	bhi.n	8003062 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	4b45      	ldr	r3, [pc, #276]	; (8003160 <HAL_DMA_Init+0x13c>)
 800304a:	4413      	add	r3, r2
 800304c:	4a45      	ldr	r2, [pc, #276]	; (8003164 <HAL_DMA_Init+0x140>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	009a      	lsls	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a42      	ldr	r2, [pc, #264]	; (8003168 <HAL_DMA_Init+0x144>)
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
 8003060:	e00e      	b.n	8003080 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4b40      	ldr	r3, [pc, #256]	; (800316c <HAL_DMA_Init+0x148>)
 800306a:	4413      	add	r3, r2
 800306c:	4a3d      	ldr	r2, [pc, #244]	; (8003164 <HAL_DMA_Init+0x140>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	009a      	lsls	r2, r3, #2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a3c      	ldr	r2, [pc, #240]	; (8003170 <HAL_DMA_Init+0x14c>)
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f8fe 	bl	80032d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030e0:	d102      	bne.n	80030e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80030f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030fe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d010      	beq.n	800312a <HAL_DMA_Init+0x106>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b04      	cmp	r3, #4
 800310e:	d80c      	bhi.n	800312a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f91d 	bl	8003350 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	e008      	b.n	800313c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40020407 	.word	0x40020407
 8003160:	bffdfff8 	.word	0xbffdfff8
 8003164:	cccccccd 	.word	0xcccccccd
 8003168:	40020000 	.word	0x40020000
 800316c:	bffdfbf8 	.word	0xbffdfbf8
 8003170:	40020400 	.word	0x40020400

08003174 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003190:	f003 031c 	and.w	r3, r3, #28
 8003194:	2204      	movs	r2, #4
 8003196:	409a      	lsls	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d026      	beq.n	80031ee <HAL_DMA_IRQHandler+0x7a>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d021      	beq.n	80031ee <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d107      	bne.n	80031c8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0204 	bic.w	r2, r2, #4
 80031c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031cc:	f003 021c 	and.w	r2, r3, #28
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	2104      	movs	r1, #4
 80031d6:	fa01 f202 	lsl.w	r2, r1, r2
 80031da:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d071      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031ec:	e06c      	b.n	80032c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f003 031c 	and.w	r3, r3, #28
 80031f6:	2202      	movs	r2, #2
 80031f8:	409a      	lsls	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d02e      	beq.n	8003260 <HAL_DMA_IRQHandler+0xec>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d029      	beq.n	8003260 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10b      	bne.n	8003232 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 020a 	bic.w	r2, r2, #10
 8003228:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f003 021c 	and.w	r2, r3, #28
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2102      	movs	r1, #2
 8003240:	fa01 f202 	lsl.w	r2, r1, r2
 8003244:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d038      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800325e:	e033      	b.n	80032c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	f003 031c 	and.w	r3, r3, #28
 8003268:	2208      	movs	r2, #8
 800326a:	409a      	lsls	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d02a      	beq.n	80032ca <HAL_DMA_IRQHandler+0x156>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d025      	beq.n	80032ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 020e 	bic.w	r2, r2, #14
 800328c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f003 021c 	and.w	r2, r3, #28
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2101      	movs	r1, #1
 800329c:	fa01 f202 	lsl.w	r2, r1, r2
 80032a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d004      	beq.n	80032ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
}
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b17      	ldr	r3, [pc, #92]	; (8003340 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d80a      	bhi.n	80032fe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032f4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6493      	str	r3, [r2, #72]	; 0x48
 80032fc:	e007      	b.n	800330e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	009a      	lsls	r2, r3, #2
 8003306:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003308:	4413      	add	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	3b08      	subs	r3, #8
 8003316:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003324:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2201      	movs	r2, #1
 800332e:	409a      	lsls	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40020407 	.word	0x40020407
 8003344:	4002081c 	.word	0x4002081c
 8003348:	cccccccd 	.word	0xcccccccd
 800334c:	40020880 	.word	0x40020880

08003350 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003360:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	461a      	mov	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a09      	ldr	r2, [pc, #36]	; (8003398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003374:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3b01      	subs	r3, #1
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2201      	movs	r2, #1
 8003380:	409a      	lsls	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	1000823f 	.word	0x1000823f
 8003398:	40020940 	.word	0x40020940

0800339c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033aa:	e14c      	b.n	8003646 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	2101      	movs	r1, #1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 813e 	beq.w	8003640 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d00b      	beq.n	80033e4 <HAL_GPIO_Init+0x48>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d007      	beq.n	80033e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d8:	2b11      	cmp	r3, #17
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b12      	cmp	r3, #18
 80033e2:	d130      	bne.n	8003446 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800341a:	2201      	movs	r2, #1
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 0201 	and.w	r2, r3, #1
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2203      	movs	r2, #3
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4013      	ands	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0xea>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b12      	cmp	r3, #18
 8003484:	d123      	bne.n	80034ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	08da      	lsrs	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3208      	adds	r2, #8
 800348e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	08da      	lsrs	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3208      	adds	r2, #8
 80034c8:	6939      	ldr	r1, [r7, #16]
 80034ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	2203      	movs	r2, #3
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0203 	and.w	r2, r3, #3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8098 	beq.w	8003640 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003510:	4a54      	ldr	r2, [pc, #336]	; (8003664 <HAL_GPIO_Init+0x2c8>)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	089b      	lsrs	r3, r3, #2
 8003516:	3302      	adds	r3, #2
 8003518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	220f      	movs	r2, #15
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800353a:	d019      	beq.n	8003570 <HAL_GPIO_Init+0x1d4>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a4a      	ldr	r2, [pc, #296]	; (8003668 <HAL_GPIO_Init+0x2cc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <HAL_GPIO_Init+0x1d0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a49      	ldr	r2, [pc, #292]	; (800366c <HAL_GPIO_Init+0x2d0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00d      	beq.n	8003568 <HAL_GPIO_Init+0x1cc>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a48      	ldr	r2, [pc, #288]	; (8003670 <HAL_GPIO_Init+0x2d4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <HAL_GPIO_Init+0x1c8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a47      	ldr	r2, [pc, #284]	; (8003674 <HAL_GPIO_Init+0x2d8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <HAL_GPIO_Init+0x1c4>
 800355c:	2304      	movs	r3, #4
 800355e:	e008      	b.n	8003572 <HAL_GPIO_Init+0x1d6>
 8003560:	2307      	movs	r3, #7
 8003562:	e006      	b.n	8003572 <HAL_GPIO_Init+0x1d6>
 8003564:	2303      	movs	r3, #3
 8003566:	e004      	b.n	8003572 <HAL_GPIO_Init+0x1d6>
 8003568:	2302      	movs	r3, #2
 800356a:	e002      	b.n	8003572 <HAL_GPIO_Init+0x1d6>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_GPIO_Init+0x1d6>
 8003570:	2300      	movs	r3, #0
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	f002 0203 	and.w	r2, r2, #3
 8003578:	0092      	lsls	r2, r2, #2
 800357a:	4093      	lsls	r3, r2
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003582:	4938      	ldr	r1, [pc, #224]	; (8003664 <HAL_GPIO_Init+0x2c8>)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	3302      	adds	r3, #2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003590:	4b39      	ldr	r3, [pc, #228]	; (8003678 <HAL_GPIO_Init+0x2dc>)
 8003592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035b6:	4a30      	ldr	r2, [pc, #192]	; (8003678 <HAL_GPIO_Init+0x2dc>)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80035be:	4b2e      	ldr	r3, [pc, #184]	; (8003678 <HAL_GPIO_Init+0x2dc>)
 80035c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035e4:	4a24      	ldr	r2, [pc, #144]	; (8003678 <HAL_GPIO_Init+0x2dc>)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035ec:	4b22      	ldr	r3, [pc, #136]	; (8003678 <HAL_GPIO_Init+0x2dc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003610:	4a19      	ldr	r2, [pc, #100]	; (8003678 <HAL_GPIO_Init+0x2dc>)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003616:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_GPIO_Init+0x2dc>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	43db      	mvns	r3, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800363a:	4a0f      	ldr	r2, [pc, #60]	; (8003678 <HAL_GPIO_Init+0x2dc>)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	3301      	adds	r3, #1
 8003644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	f47f aeab 	bne.w	80033ac <HAL_GPIO_Init+0x10>
  }
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40010000 	.word	0x40010000
 8003668:	48000400 	.word	0x48000400
 800366c:	48000800 	.word	0x48000800
 8003670:	48000c00 	.word	0x48000c00
 8003674:	48001000 	.word	0x48001000
 8003678:	58000800 	.word	0x58000800

0800367c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	807b      	strh	r3, [r7, #2]
 8003688:	4613      	mov	r3, r2
 800368a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800368c:	787b      	ldrb	r3, [r7, #1]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003698:	e002      	b.n	80036a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_HSEM_IRQHandler+0x30>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80036b8:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_HSEM_IRQHandler+0x30>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	43db      	mvns	r3, r3
 80036c0:	4906      	ldr	r1, [pc, #24]	; (80036dc <HAL_HSEM_IRQHandler+0x30>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <HAL_HSEM_IRQHandler+0x30>)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f807 	bl	80036e0 <HAL_HSEM_FreeCallback>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	58001500 	.word	0x58001500

080036e0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f6:	b08b      	sub	sp, #44	; 0x2c
 80036f8:	af06      	add	r7, sp, #24
 80036fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0ad      	b.n	8003862 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f00a fc0a 	bl	800df34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2203      	movs	r2, #3
 8003724:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f003 fee2 	bl	80074f6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e035      	b.n	80037a4 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	015b      	lsls	r3, r3, #5
 800373e:	4413      	add	r3, r2
 8003740:	3329      	adds	r3, #41	; 0x29
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	015b      	lsls	r3, r3, #5
 800374c:	4413      	add	r3, r2
 800374e:	3328      	adds	r3, #40	; 0x28
 8003750:	7bfa      	ldrb	r2, [r7, #15]
 8003752:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	7bfa      	ldrb	r2, [r7, #15]
 8003758:	b291      	uxth	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	015b      	lsls	r3, r3, #5
 800375e:	4413      	add	r3, r2
 8003760:	3336      	adds	r3, #54	; 0x36
 8003762:	460a      	mov	r2, r1
 8003764:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	015b      	lsls	r3, r3, #5
 800376c:	4413      	add	r3, r2
 800376e:	332b      	adds	r3, #43	; 0x2b
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	015b      	lsls	r3, r3, #5
 800377a:	4413      	add	r3, r2
 800377c:	3338      	adds	r3, #56	; 0x38
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	015b      	lsls	r3, r3, #5
 8003788:	4413      	add	r3, r2
 800378a:	333c      	adds	r3, #60	; 0x3c
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	3302      	adds	r3, #2
 8003796:	015b      	lsls	r3, r3, #5
 8003798:	4413      	add	r3, r2
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	3301      	adds	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
 80037a4:	7bfa      	ldrb	r2, [r7, #15]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d3c4      	bcc.n	8003738 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
 80037b2:	e031      	b.n	8003818 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	015b      	lsls	r3, r3, #5
 80037ba:	4413      	add	r3, r2
 80037bc:	f203 1329 	addw	r3, r3, #297	; 0x129
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	015b      	lsls	r3, r3, #5
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80037d0:	7bfa      	ldrb	r2, [r7, #15]
 80037d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	015b      	lsls	r3, r3, #5
 80037da:	4413      	add	r3, r2
 80037dc:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	015b      	lsls	r3, r3, #5
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	015b      	lsls	r3, r3, #5
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	330a      	adds	r3, #10
 800380a:	015b      	lsls	r3, r3, #5
 800380c:	4413      	add	r3, r2
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	3301      	adds	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	429a      	cmp	r2, r3
 8003820:	d3c8      	bcc.n	80037b4 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	687e      	ldr	r6, [r7, #4]
 800382a:	466d      	mov	r5, sp
 800382c:	f106 0410 	add.w	r4, r6, #16
 8003830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	602b      	str	r3, [r5, #0]
 8003838:	1d33      	adds	r3, r6, #4
 800383a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800383c:	6838      	ldr	r0, [r7, #0]
 800383e:	f003 fe75 	bl	800752c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d102      	bne.n	8003860 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fe59 	bl	8004512 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800386a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_PCD_Start+0x16>
 800387c:	2302      	movs	r3, #2
 800387e:	e012      	b.n	80038a6 <HAL_PCD_Start+0x3c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f005 f845 	bl	800891c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f003 fe14 	bl	80074c4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f005 f845 	bl	800894a <USB_ReadInterrupts>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ca:	d102      	bne.n	80038d2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fb33 	bl	8003f38 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f005 f837 	bl	800894a <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e6:	d112      	bne.n	800390e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fa:	b292      	uxth	r2, r2
 80038fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f00a fb9e 	bl	800e042 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003906:	2100      	movs	r1, #0
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f91e 	bl	8003b4a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f005 f819 	bl	800894a <USB_ReadInterrupts>
 8003918:	4603      	mov	r3, r0
 800391a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800391e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003922:	d10b      	bne.n	800393c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800392c:	b29a      	uxth	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003936:	b292      	uxth	r2, r2
 8003938:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f005 f802 	bl	800894a <USB_ReadInterrupts>
 8003946:	4603      	mov	r3, r0
 8003948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800394c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003950:	d10b      	bne.n	800396a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800395a:	b29a      	uxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003964:	b292      	uxth	r2, r2
 8003966:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f004 ffeb 	bl	800894a <USB_ReadInterrupts>
 8003974:	4603      	mov	r3, r0
 8003976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800397a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397e:	d133      	bne.n	80039e8 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003988:	b29a      	uxth	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0204 	bic.w	r2, r2, #4
 8003992:	b292      	uxth	r2, r2
 8003994:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0208 	bic.w	r2, r2, #8
 80039aa:	b292      	uxth	r2, r2
 80039ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d107      	bne.n	80039ca <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039c2:	2100      	movs	r1, #0
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f00a fd2b 	bl	800e420 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f00a fb72 	bl	800e0b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039d8:	b29a      	uxth	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039e2:	b292      	uxth	r2, r2
 80039e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f004 ffac 	bl	800894a <USB_ReadInterrupts>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039fc:	d126      	bne.n	8003a4c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0208 	orr.w	r2, r2, #8
 8003a10:	b292      	uxth	r2, r2
 8003a12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a28:	b292      	uxth	r2, r2
 8003a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0204 	orr.w	r2, r2, #4
 8003a40:	b292      	uxth	r2, r2
 8003a42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f00a fb1a 	bl	800e080 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f004 ff7a 	bl	800894a <USB_ReadInterrupts>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	2b80      	cmp	r3, #128	; 0x80
 8003a5e:	d13f      	bne.n	8003ae0 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a72:	b292      	uxth	r2, r2
 8003a74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d12b      	bne.n	8003ada <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0204 	orr.w	r2, r2, #4
 8003a94:	b292      	uxth	r2, r2
 8003a96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0208 	orr.w	r2, r2, #8
 8003aac:	b292      	uxth	r2, r2
 8003aae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f00a fca4 	bl	800e420 <HAL_PCDEx_LPM_Callback>
 8003ad8:	e002      	b.n	8003ae0 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f00a fad0 	bl	800e080 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f004 ff30 	bl	800894a <USB_ReadInterrupts>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af4:	d10e      	bne.n	8003b14 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b08:	b292      	uxth	r2, r2
 8003b0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f00a fa89 	bl	800e026 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f004 ff16 	bl	800894a <USB_ReadInterrupts>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b28:	d10b      	bne.n	8003b42 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b3c:	b292      	uxth	r2, r2
 8003b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	460b      	mov	r3, r1
 8003b54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_PCD_SetAddress+0x1a>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e013      	b.n	8003b8c <HAL_PCD_SetAddress+0x42>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f004 feb9 	bl	80088f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	70fb      	strb	r3, [r7, #3]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	803b      	strh	r3, [r7, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da0b      	bge.n	8003bd2 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	015b      	lsls	r3, r3, #5
 8003bc2:	3328      	adds	r3, #40	; 0x28
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	705a      	strb	r2, [r3, #1]
 8003bd0:	e00b      	b.n	8003bea <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	015b      	lsls	r3, r3, #5
 8003bda:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bf6:	883a      	ldrh	r2, [r7, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	78ba      	ldrb	r2, [r7, #2]
 8003c00:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	785b      	ldrb	r3, [r3, #1]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d004      	beq.n	8003c14 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c14:	78bb      	ldrb	r3, [r7, #2]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d102      	bne.n	8003c20 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_PCD_EP_Open+0x9a>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e00e      	b.n	8003c4c <HAL_PCD_EP_Open+0xb8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68f9      	ldr	r1, [r7, #12]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f003 fc99 	bl	8007574 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003c4a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	da0b      	bge.n	8003c80 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	015b      	lsls	r3, r3, #5
 8003c70:	3328      	adds	r3, #40	; 0x28
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	705a      	strb	r2, [r3, #1]
 8003c7e:	e00b      	b.n	8003c98 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	015b      	lsls	r3, r3, #5
 8003c88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4413      	add	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_PCD_EP_Close+0x5e>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e00e      	b.n	8003cd0 <HAL_PCD_EP_Close+0x7c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68f9      	ldr	r1, [r7, #12]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f004 f805 	bl	8007cd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ce8:	7afb      	ldrb	r3, [r7, #11]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	015b      	lsls	r3, r3, #5
 8003cf0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d12:	7afb      	ldrb	r3, [r7, #11]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d1e:	7afb      	ldrb	r3, [r7, #11]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6979      	ldr	r1, [r7, #20]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f004 f9bb 	bl	80080aa <USB_EPStartXfer>
 8003d34:	e005      	b.n	8003d42 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6979      	ldr	r1, [r7, #20]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f004 f9b4 	bl	80080aa <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	330a      	adds	r3, #10
 8003d62:	015b      	lsls	r3, r3, #5
 8003d64:	4413      	add	r3, r2
 8003d66:	3304      	adds	r3, #4
 8003d68:	681b      	ldr	r3, [r3, #0]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b086      	sub	sp, #24
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	460b      	mov	r3, r1
 8003d84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	015b      	lsls	r3, r3, #5
 8003d8e:	3328      	adds	r3, #40	; 0x28
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2200      	movs	r2, #0
 8003da6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2201      	movs	r2, #1
 8003dac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dae:	7afb      	ldrb	r3, [r7, #11]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dba:	7afb      	ldrb	r3, [r7, #11]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6979      	ldr	r1, [r7, #20]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f004 f96d 	bl	80080aa <USB_EPStartXfer>
 8003dd0:	e005      	b.n	8003dde <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6979      	ldr	r1, [r7, #20]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f004 f966 	bl	80080aa <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	f003 0207 	and.w	r2, r3, #7
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d901      	bls.n	8003e06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e046      	b.n	8003e94 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	da0b      	bge.n	8003e26 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	015b      	lsls	r3, r3, #5
 8003e16:	3328      	adds	r3, #40	; 0x28
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	705a      	strb	r2, [r3, #1]
 8003e24:	e009      	b.n	8003e3a <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	015b      	lsls	r3, r3, #5
 8003e2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4413      	add	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_PCD_EP_SetStall+0x72>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e01c      	b.n	8003e94 <HAL_PCD_EP_SetStall+0xac>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68f9      	ldr	r1, [r7, #12]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f004 fc44 	bl	80086f6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d108      	bne.n	8003e8a <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f004 fd70 	bl	800896a <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	f003 020f 	and.w	r2, r3, #15
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d901      	bls.n	8003eba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e03a      	b.n	8003f30 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	da0b      	bge.n	8003eda <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	015b      	lsls	r3, r3, #5
 8003eca:	3328      	adds	r3, #40	; 0x28
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	4413      	add	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	705a      	strb	r2, [r3, #1]
 8003ed8:	e00b      	b.n	8003ef2 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	015b      	lsls	r3, r3, #5
 8003ee2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_PCD_EP_ClrStall+0x76>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e00e      	b.n	8003f30 <HAL_PCD_EP_ClrStall+0x94>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f004 fc39 	bl	8008798 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08e      	sub	sp, #56	; 0x38
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f40:	e29c      	b.n	800447c <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003f58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f040 8152 	bne.w	8004206 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d150      	bne.n	800400e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7c:	81fb      	strh	r3, [r7, #14]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	89fb      	ldrh	r3, [r7, #14]
 8003f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3328      	adds	r3, #40	; 0x28
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	441a      	add	r2, r3
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003fcc:	2100      	movs	r1, #0
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f00a f812 	bl	800dff8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 824d 	beq.w	800447c <PCD_EP_ISR_Handler+0x544>
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f040 8248 	bne.w	800447c <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	b292      	uxth	r2, r2
 8004000:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800400c:	e236      	b.n	800447c <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800401e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004024:	2b00      	cmp	r3, #0
 8004026:	d032      	beq.n	800408e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004030:	b29b      	uxth	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4413      	add	r3, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	4413      	add	r3, r2
 8004042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004062:	b29b      	uxth	r3, r3
 8004064:	f004 fcce 	bl	8008a04 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29a      	uxth	r2, r3
 8004070:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004074:	4013      	ands	r3, r2
 8004076:	823b      	strh	r3, [r7, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	8a3a      	ldrh	r2, [r7, #16]
 800407e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004082:	b292      	uxth	r2, r2
 8004084:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f009 ff8c 	bl	800dfa4 <HAL_PCD_SetupStageCallback>
 800408c:	e1f6      	b.n	800447c <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800408e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004092:	2b00      	cmp	r3, #0
 8004094:	f280 81f2 	bge.w	800447c <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29a      	uxth	r2, r3
 80040a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80040a4:	4013      	ands	r3, r2
 80040a6:	83fb      	strh	r3, [r7, #30]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	8bfa      	ldrh	r2, [r7, #30]
 80040ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040b2:	b292      	uxth	r2, r2
 80040b4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040be:	b29b      	uxth	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4413      	add	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	4413      	add	r3, r2
 80040d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d019      	beq.n	800411a <PCD_EP_ISR_Handler+0x1e2>
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d015      	beq.n	800411a <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	6959      	ldr	r1, [r3, #20]
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040fe:	b29b      	uxth	r3, r3
 8004100:	f004 fc80 	bl	8008a04 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	441a      	add	r2, r3
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004112:	2100      	movs	r1, #0
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f009 ff57 	bl	800dfc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004128:	b29b      	uxth	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	4413      	add	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d112      	bne.n	8004168 <PCD_EP_ISR_Handler+0x230>
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800414c:	b29a      	uxth	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	801a      	strh	r2, [r3, #0]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800415c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004160:	b29a      	uxth	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	801a      	strh	r2, [r3, #0]
 8004166:	e02f      	b.n	80041c8 <PCD_EP_ISR_Handler+0x290>
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b3e      	cmp	r3, #62	; 0x3e
 800416e:	d813      	bhi.n	8004198 <PCD_EP_ISR_Handler+0x260>
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	633b      	str	r3, [r7, #48]	; 0x30
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <PCD_EP_ISR_Handler+0x252>
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	3301      	adds	r3, #1
 8004188:	633b      	str	r3, [r7, #48]	; 0x30
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	b29b      	uxth	r3, r3
 800418e:	029b      	lsls	r3, r3, #10
 8004190:	b29a      	uxth	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	801a      	strh	r2, [r3, #0]
 8004196:	e017      	b.n	80041c8 <PCD_EP_ISR_Handler+0x290>
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	633b      	str	r3, [r7, #48]	; 0x30
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <PCD_EP_ISR_Handler+0x27a>
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	3b01      	subs	r3, #1
 80041b0:	633b      	str	r3, [r7, #48]	; 0x30
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	029b      	lsls	r3, r3, #10
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d8:	827b      	strh	r3, [r7, #18]
 80041da:	8a7b      	ldrh	r3, [r7, #18]
 80041dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80041e0:	827b      	strh	r3, [r7, #18]
 80041e2:	8a7b      	ldrh	r3, [r7, #18]
 80041e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041e8:	827b      	strh	r3, [r7, #18]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	8a7b      	ldrh	r3, [r7, #18]
 80041f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004200:	b29b      	uxth	r3, r3
 8004202:	8013      	strh	r3, [r2, #0]
 8004204:	e13a      	b.n	800447c <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004218:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800421c:	2b00      	cmp	r3, #0
 800421e:	f280 80d6 	bge.w	80043ce <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29a      	uxth	r2, r3
 8004234:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004238:	4013      	ands	r3, r2
 800423a:	853b      	strh	r3, [r7, #40]	; 0x28
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800424c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004250:	b292      	uxth	r2, r2
 8004252:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004254:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004258:	015b      	lsls	r3, r3, #5
 800425a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	7b1b      	ldrb	r3, [r3, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d11f      	bne.n	80042ac <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004274:	b29b      	uxth	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4413      	add	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	4413      	add	r3, r2
 8004286:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004290:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 8004292:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004294:	2b00      	cmp	r3, #0
 8004296:	d075      	beq.n	8004384 <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	6959      	ldr	r1, [r3, #20]
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	88da      	ldrh	r2, [r3, #6]
 80042a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80042a6:	f004 fbad 	bl	8008a04 <USB_ReadPMA>
 80042aa:	e06b      	b.n	8004384 <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	441a      	add	r2, r3
 80042d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80042d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01f      	beq.n	8004346 <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800430e:	b29b      	uxth	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	4413      	add	r3, r2
 8004320:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800432a:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 800432c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800432e:	2b00      	cmp	r3, #0
 8004330:	d028      	beq.n	8004384 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	6959      	ldr	r1, [r3, #20]
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	891a      	ldrh	r2, [r3, #8]
 800433e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004340:	f004 fb60 	bl	8008a04 <USB_ReadPMA>
 8004344:	e01e      	b.n	8004384 <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	4413      	add	r3, r2
 8004360:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800436a:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 800436c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	6959      	ldr	r1, [r3, #20]
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	895a      	ldrh	r2, [r3, #10]
 800437e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004380:	f004 fb40 	bl	8008a04 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800438a:	441a      	add	r2, r3
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004396:	441a      	add	r2, r3
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <PCD_EP_ISR_Handler+0x476>
 80043a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d206      	bcs.n	80043bc <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	4619      	mov	r1, r3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f009 fe07 	bl	800dfc8 <HAL_PCD_DataOutStageCallback>
 80043ba:	e008      	b.n	80043ce <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	7819      	ldrb	r1, [r3, #0]
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff fc85 	bl	8003cd8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80043ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d051      	beq.n	800447c <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 80043d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80043dc:	015b      	lsls	r3, r3, #5
 80043de:	3328      	adds	r3, #40	; 0x28
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	4413      	add	r3, r2
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80043fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004400:	843b      	strh	r3, [r7, #32]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	441a      	add	r2, r3
 8004410:	8c3b      	ldrh	r3, [r7, #32]
 8004412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441a:	b29b      	uxth	r3, r3
 800441c:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004426:	b29b      	uxth	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6812      	ldr	r2, [r2, #0]
 8004436:	4413      	add	r3, r2
 8004438:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	441a      	add	r2, r3
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d106      	bne.n	800446a <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	4619      	mov	r1, r3
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f009 fdc8 	bl	800dff8 <HAL_PCD_DataInStageCallback>
 8004468:	e008      	b.n	800447c <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	7819      	ldrb	r1, [r3, #0]
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff fc7d 	bl	8003d76 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004484:	b29b      	uxth	r3, r3
 8004486:	b21b      	sxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	f6ff ad5a 	blt.w	8003f42 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3738      	adds	r7, #56	; 0x38
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	817b      	strh	r3, [r7, #10]
 80044a6:	4613      	mov	r3, r2
 80044a8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80044aa:	897b      	ldrh	r3, [r7, #10]
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b6:	897b      	ldrh	r3, [r7, #10]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	015b      	lsls	r3, r3, #5
 80044be:	3328      	adds	r3, #40	; 0x28
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	e006      	b.n	80044d6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044c8:	897b      	ldrh	r3, [r7, #10]
 80044ca:	015b      	lsls	r3, r3, #5
 80044cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044d6:	893b      	ldrh	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d107      	bne.n	80044ec <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2200      	movs	r2, #0
 80044e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	80da      	strh	r2, [r3, #6]
 80044ea:	e00b      	b.n	8004504 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2201      	movs	r2, #1
 80044f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	b29a      	uxth	r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004536:	b29b      	uxth	r3, r3
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800454a:	b29b      	uxth	r3, r3
 800454c:	f043 0302 	orr.w	r3, r3, #2
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
	...

08004568 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a04      	ldr	r2, [pc, #16]	; (8004584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004576:	6013      	str	r3, [r2, #0]
}
 8004578:	bf00      	nop
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	58000400 	.word	0x58000400

08004588 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	58000400 	.word	0x58000400

080045a4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4a04      	ldr	r2, [pc, #16]	; (80045c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80045ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045b2:	6053      	str	r3, [r2, #4]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	58000400 	.word	0x58000400

080045c4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80045c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d6:	d101      	bne.n	80045dc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <LL_RCC_HSE_Enable>:
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80045ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fa:	6013      	str	r3, [r2, #0]
}
 80045fc:	bf00      	nop
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <LL_RCC_HSE_Disable>:
{
 8004606:	b480      	push	{r7}
 8004608:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800460a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004618:	6013      	str	r3, [r2, #0]
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <LL_RCC_HSE_IsReady>:
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004636:	d101      	bne.n	800463c <LL_RCC_HSE_IsReady+0x18>
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <LL_RCC_HSE_IsReady+0x1a>
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_RCC_HSI_Enable>:
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800464c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465a:	6013      	str	r3, [r2, #0]
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <LL_RCC_HSI_Disable>:
{
 8004666:	b480      	push	{r7}
 8004668:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800466a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004678:	6013      	str	r3, [r2, #0]
}
 800467a:	bf00      	nop
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <LL_RCC_HSI_IsReady>:
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004696:	d101      	bne.n	800469c <LL_RCC_HSI_IsReady+0x18>
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <LL_RCC_HSI_IsReady+0x1a>
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80046b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <LL_RCC_HSI48_Enable>:
{
 80046d2:	b480      	push	{r7}
 80046d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80046d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80046ea:	bf00      	nop
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <LL_RCC_HSI48_Disable>:
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80046f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800470c:	bf00      	nop
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <LL_RCC_HSI48_IsReady>:
{
 8004716:	b480      	push	{r7}
 8004718:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800471a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b02      	cmp	r3, #2
 8004728:	d101      	bne.n	800472e <LL_RCC_HSI48_IsReady+0x18>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <LL_RCC_HSI48_IsReady+0x1a>
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <LL_RCC_LSE_Enable>:
{
 800473a:	b480      	push	{r7}
 800473c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800473e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004752:	bf00      	nop
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <LL_RCC_LSE_Disable>:
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <LL_RCC_LSE_EnableBypass>:
{
 800477e:	b480      	push	{r7}
 8004780:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004796:	bf00      	nop
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <LL_RCC_LSE_DisableBypass>:
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047b0:	f023 0304 	bic.w	r3, r3, #4
 80047b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <LL_RCC_LSE_IsReady>:
{
 80047c2:	b480      	push	{r7}
 80047c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80047c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d101      	bne.n	80047da <LL_RCC_LSE_IsReady+0x18>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <LL_RCC_LSE_IsReady+0x1a>
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <LL_RCC_LSI1_Enable>:
{
 80047e6:	b480      	push	{r7}
 80047e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80047ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047fe:	bf00      	nop
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <LL_RCC_LSI1_Disable>:
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800480c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004820:	bf00      	nop
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <LL_RCC_LSI1_IsReady>:
{
 800482a:	b480      	push	{r7}
 800482c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800482e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b02      	cmp	r3, #2
 800483c:	d101      	bne.n	8004842 <LL_RCC_LSI1_IsReady+0x18>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <LL_RCC_LSI1_IsReady+0x1a>
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <LL_RCC_LSI2_Enable>:
{
 800484e:	b480      	push	{r7}
 8004850:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800485a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800485e:	f043 0304 	orr.w	r3, r3, #4
 8004862:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004866:	bf00      	nop
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_RCC_LSI2_Disable>:
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800487c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004880:	f023 0304 	bic.w	r3, r3, #4
 8004884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <LL_RCC_LSI2_IsReady>:
{
 8004892:	b480      	push	{r7}
 8004894:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d101      	bne.n	80048aa <LL_RCC_LSI2_IsReady+0x18>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <LL_RCC_LSI2_IsReady+0x1a>
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <LL_RCC_LSI2_SetTrimming>:
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80048be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	021b      	lsls	r3, r3, #8
 80048ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <LL_RCC_MSI_Enable>:
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80048e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	6013      	str	r3, [r2, #0]
}
 80048f8:	bf00      	nop
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <LL_RCC_MSI_Disable>:
{
 8004902:	b480      	push	{r7}
 8004904:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	6013      	str	r3, [r2, #0]
}
 8004916:	bf00      	nop
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_RCC_MSI_IsReady>:
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d101      	bne.n	8004936 <LL_RCC_MSI_IsReady+0x16>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <LL_RCC_MSI_IsReady+0x18>
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <LL_RCC_MSI_SetRange>:
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800494a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4313      	orrs	r3, r2
 800495c:	600b      	str	r3, [r1, #0]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <LL_RCC_MSI_GetRange>:
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800497a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2bb0      	cmp	r3, #176	; 0xb0
 8004980:	d901      	bls.n	8004986 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004982:	23b0      	movs	r3, #176	; 0xb0
 8004984:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004986:	687b      	ldr	r3, [r7, #4]
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800499c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ae:	4313      	orrs	r3, r2
 80049b0:	604b      	str	r3, [r1, #4]
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <LL_RCC_SetSysClkSource>:
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80049c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f023 0203 	bic.w	r2, r3, #3
 80049d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <LL_RCC_GetSysClkSource>:
{
 80049e6:	b480      	push	{r7}
 80049e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80049ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 030c 	and.w	r3, r3, #12
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <LL_RCC_SetAHBPrescaler>:
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <LL_RCC_SetAHB4Prescaler>:
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a62:	f023 020f 	bic.w	r2, r3, #15
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <LL_RCC_SetAPB1Prescaler>:
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	608b      	str	r3, [r1, #8]
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <LL_RCC_SetAPB2Prescaler>:
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	608b      	str	r3, [r1, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <LL_RCC_GetAHBPrescaler>:
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <LL_C2_RCC_GetAHBPrescaler>:
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <LL_RCC_GetAHB4Prescaler>:
{
 8004b02:	b480      	push	{r7}
 8004b04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <LL_RCC_GetAPB1Prescaler>:
{
 8004b1e:	b480      	push	{r7}
 8004b20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <LL_RCC_GetAPB2Prescaler>:
{
 8004b36:	b480      	push	{r7}
 8004b38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <LL_RCC_PLL_Enable>:
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b60:	6013      	str	r3, [r2, #0]
}
 8004b62:	bf00      	nop
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <LL_RCC_PLL_Disable>:
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b7e:	6013      	str	r3, [r2, #0]
}
 8004b80:	bf00      	nop
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <LL_RCC_PLL_IsReady>:
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b9c:	d101      	bne.n	8004ba2 <LL_RCC_PLL_IsReady+0x18>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <LL_RCC_PLL_IsReady+0x1a>
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <LL_RCC_PLL_GetN>:
{
 8004bae:	b480      	push	{r7}
 8004bb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_RCC_PLL_GetR>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <LL_RCC_PLL_GetDivider>:
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <LL_RCC_PLL_GetMainSource>:
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0303 	and.w	r3, r3, #3
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c22:	d101      	bne.n	8004c28 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c48:	d101      	bne.n	8004c4e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6e:	d101      	bne.n	8004c74 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c92:	d101      	bne.n	8004c98 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cb6:	d101      	bne.n	8004cbc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e000      	b.n	8004cbe <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b08d      	sub	sp, #52	; 0x34
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e37e      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 8092 	beq.w	8004e0c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ce8:	f7ff fe7d 	bl	80049e6 <LL_RCC_GetSysClkSource>
 8004cec:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cee:	f7ff ff83 	bl	8004bf8 <LL_RCC_PLL_GetMainSource>
 8004cf2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_RCC_OscConfig+0x3e>
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	2b0c      	cmp	r3, #12
 8004cfe:	d14c      	bne.n	8004d9a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d149      	bne.n	8004d9a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d06:	f7ff fe0b 	bl	8004920 <LL_RCC_MSI_IsReady>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCC_OscConfig+0x54>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e35d      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004d20:	f7ff fe23 	bl	800496a <LL_RCC_MSI_GetRange>
 8004d24:	4603      	mov	r3, r0
 8004d26:	429c      	cmp	r4, r3
 8004d28:	d914      	bls.n	8004d54 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fd5c 	bl	80057ec <RCC_SetFlashLatencyFromMSIRange>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e34c      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff fdfd 	bl	8004942 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fe21 	bl	8004994 <LL_RCC_MSI_SetCalibTrimming>
 8004d52:	e013      	b.n	8004d7c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fdf2 	bl	8004942 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff fe16 	bl	8004994 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fd3d 	bl	80057ec <RCC_SetFlashLatencyFromMSIRange>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e32d      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d7c:	f000 fcda 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8004d80:	4602      	mov	r2, r0
 8004d82:	4bb3      	ldr	r3, [pc, #716]	; (8005050 <HAL_RCC_OscConfig+0x388>)
 8004d84:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d86:	4bb3      	ldr	r3, [pc, #716]	; (8005054 <HAL_RCC_OscConfig+0x38c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fc fc34 	bl	80015f8 <HAL_InitTick>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d039      	beq.n	8004e0a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e31e      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d01e      	beq.n	8004de0 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004da2:	f7ff fd9f 	bl	80048e4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004da6:	f7fc fee9 	bl	8001b7c <HAL_GetTick>
 8004daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dae:	f7fc fee5 	bl	8001b7c <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e30b      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004dc0:	f7ff fdae 	bl	8004920 <LL_RCC_MSI_IsReady>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f1      	beq.n	8004dae <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fdb7 	bl	8004942 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff fddb 	bl	8004994 <LL_RCC_MSI_SetCalibTrimming>
 8004dde:	e015      	b.n	8004e0c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004de0:	f7ff fd8f 	bl	8004902 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004de4:	f7fc feca 	bl	8001b7c <HAL_GetTick>
 8004de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dec:	f7fc fec6 	bl	8001b7c <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e2ec      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004dfe:	f7ff fd8f 	bl	8004920 <LL_RCC_MSI_IsReady>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f1      	bne.n	8004dec <HAL_RCC_OscConfig+0x124>
 8004e08:	e000      	b.n	8004e0c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d04e      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e18:	f7ff fde5 	bl	80049e6 <LL_RCC_GetSysClkSource>
 8004e1c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e1e:	f7ff feeb 	bl	8004bf8 <LL_RCC_PLL_GetMainSource>
 8004e22:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d005      	beq.n	8004e36 <HAL_RCC_OscConfig+0x16e>
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	2b0c      	cmp	r3, #12
 8004e2e:	d10d      	bne.n	8004e4c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d10a      	bne.n	8004e4c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e36:	f7ff fbf5 	bl	8004624 <LL_RCC_HSE_IsReady>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d039      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x1ec>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d135      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e2c5      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e54:	d102      	bne.n	8004e5c <HAL_RCC_OscConfig+0x194>
 8004e56:	f7ff fbc7 	bl	80045e8 <LL_RCC_HSE_Enable>
 8004e5a:	e001      	b.n	8004e60 <HAL_RCC_OscConfig+0x198>
 8004e5c:	f7ff fbd3 	bl	8004606 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d012      	beq.n	8004e8e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fc fe88 	bl	8001b7c <HAL_GetTick>
 8004e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e70:	f7fc fe84 	bl	8001b7c <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b64      	cmp	r3, #100	; 0x64
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e2aa      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004e82:	f7ff fbcf 	bl	8004624 <LL_RCC_HSE_IsReady>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f1      	beq.n	8004e70 <HAL_RCC_OscConfig+0x1a8>
 8004e8c:	e013      	b.n	8004eb6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8e:	f7fc fe75 	bl	8001b7c <HAL_GetTick>
 8004e92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e96:	f7fc fe71 	bl	8001b7c <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b64      	cmp	r3, #100	; 0x64
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e297      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ea8:	f7ff fbbc 	bl	8004624 <LL_RCC_HSE_IsReady>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f1      	bne.n	8004e96 <HAL_RCC_OscConfig+0x1ce>
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d051      	beq.n	8004f66 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ec2:	f7ff fd90 	bl	80049e6 <LL_RCC_GetSysClkSource>
 8004ec6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ec8:	f7ff fe96 	bl	8004bf8 <LL_RCC_PLL_GetMainSource>
 8004ecc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x218>
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	d113      	bne.n	8004f02 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d110      	bne.n	8004f02 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ee0:	f7ff fbd0 	bl	8004684 <LL_RCC_HSI_IsReady>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x22e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e270      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff fbd4 	bl	80046a8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f00:	e031      	b.n	8004f66 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d019      	beq.n	8004f3e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f0a:	f7ff fb9d 	bl	8004648 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fc fe35 	bl	8001b7c <HAL_GetTick>
 8004f12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f16:	f7fc fe31 	bl	8001b7c <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e257      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f28:	f7ff fbac 	bl	8004684 <LL_RCC_HSI_IsReady>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f1      	beq.n	8004f16 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff fbb6 	bl	80046a8 <LL_RCC_HSI_SetCalibTrimming>
 8004f3c:	e013      	b.n	8004f66 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f3e:	f7ff fb92 	bl	8004666 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f42:	f7fc fe1b 	bl	8001b7c <HAL_GetTick>
 8004f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f4a:	f7fc fe17 	bl	8001b7c <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e23d      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004f5c:	f7ff fb92 	bl	8004684 <LL_RCC_HSI_IsReady>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f1      	bne.n	8004f4a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80a3 	beq.w	80050c6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d076      	beq.n	8005076 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d046      	beq.n	8005022 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004f94:	f7ff fc49 	bl	800482a <LL_RCC_LSI1_IsReady>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d113      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004f9e:	f7ff fc22 	bl	80047e6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fa2:	f7fc fdeb 	bl	8001b7c <HAL_GetTick>
 8004fa6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004faa:	f7fc fde7 	bl	8001b7c <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e20d      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004fbc:	f7ff fc35 	bl	800482a <LL_RCC_LSI1_IsReady>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f1      	beq.n	8004faa <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004fc6:	f7ff fc42 	bl	800484e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fc fdd7 	bl	8001b7c <HAL_GetTick>
 8004fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004fd2:	f7fc fdd3 	bl	8001b7c <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e1f9      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004fe4:	f7ff fc55 	bl	8004892 <LL_RCC_LSI2_IsReady>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f1      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fc5f 	bl	80048b6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004ff8:	f7ff fc06 	bl	8004808 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fc fdbe 	bl	8001b7c <HAL_GetTick>
 8005000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005004:	f7fc fdba 	bl	8001b7c <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e1e0      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005016:	f7ff fc08 	bl	800482a <LL_RCC_LSI1_IsReady>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f1      	bne.n	8005004 <HAL_RCC_OscConfig+0x33c>
 8005020:	e051      	b.n	80050c6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005022:	f7ff fbe0 	bl	80047e6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005026:	f7fc fda9 	bl	8001b7c <HAL_GetTick>
 800502a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800502e:	f7fc fda5 	bl	8001b7c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e1cb      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005040:	f7ff fbf3 	bl	800482a <LL_RCC_LSI1_IsReady>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f1      	beq.n	800502e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800504a:	f7ff fc11 	bl	8004870 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800504e:	e00c      	b.n	800506a <HAL_RCC_OscConfig+0x3a2>
 8005050:	20000004 	.word	0x20000004
 8005054:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005058:	f7fc fd90 	bl	8001b7c <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b03      	cmp	r3, #3
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e1b6      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800506a:	f7ff fc12 	bl	8004892 <LL_RCC_LSI2_IsReady>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f1      	bne.n	8005058 <HAL_RCC_OscConfig+0x390>
 8005074:	e027      	b.n	80050c6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005076:	f7ff fbfb 	bl	8004870 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507a:	f7fc fd7f 	bl	8001b7c <HAL_GetTick>
 800507e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005082:	f7fc fd7b 	bl	8001b7c <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b03      	cmp	r3, #3
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e1a1      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005094:	f7ff fbfd 	bl	8004892 <LL_RCC_LSI2_IsReady>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f1      	bne.n	8005082 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800509e:	f7ff fbb3 	bl	8004808 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a2:	f7fc fd6b 	bl	8001b7c <HAL_GetTick>
 80050a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80050aa:	f7fc fd67 	bl	8001b7c <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e18d      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80050bc:	f7ff fbb5 	bl	800482a <LL_RCC_LSI1_IsReady>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f1      	bne.n	80050aa <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d05b      	beq.n	800518a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050d2:	4bb5      	ldr	r3, [pc, #724]	; (80053a8 <HAL_RCC_OscConfig+0x6e0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d114      	bne.n	8005108 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80050de:	f7ff fa43 	bl	8004568 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050e2:	f7fc fd4b 	bl	8001b7c <HAL_GetTick>
 80050e6:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ea:	f7fc fd47 	bl	8001b7c <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e16d      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050fc:	4baa      	ldr	r3, [pc, #680]	; (80053a8 <HAL_RCC_OscConfig+0x6e0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d102      	bne.n	8005116 <HAL_RCC_OscConfig+0x44e>
 8005110:	f7ff fb13 	bl	800473a <LL_RCC_LSE_Enable>
 8005114:	e00c      	b.n	8005130 <HAL_RCC_OscConfig+0x468>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b05      	cmp	r3, #5
 800511c:	d104      	bne.n	8005128 <HAL_RCC_OscConfig+0x460>
 800511e:	f7ff fb2e 	bl	800477e <LL_RCC_LSE_EnableBypass>
 8005122:	f7ff fb0a 	bl	800473a <LL_RCC_LSE_Enable>
 8005126:	e003      	b.n	8005130 <HAL_RCC_OscConfig+0x468>
 8005128:	f7ff fb18 	bl	800475c <LL_RCC_LSE_Disable>
 800512c:	f7ff fb38 	bl	80047a0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d014      	beq.n	8005162 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fc fd20 	bl	8001b7c <HAL_GetTick>
 800513c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800513e:	e00a      	b.n	8005156 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005140:	f7fc fd1c 	bl	8001b7c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	; 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e140      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005156:	f7ff fb34 	bl	80047c2 <LL_RCC_LSE_IsReady>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ef      	beq.n	8005140 <HAL_RCC_OscConfig+0x478>
 8005160:	e013      	b.n	800518a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005162:	f7fc fd0b 	bl	8001b7c <HAL_GetTick>
 8005166:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005168:	e00a      	b.n	8005180 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516a:	f7fc fd07 	bl	8001b7c <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f241 3288 	movw	r2, #5000	; 0x1388
 8005178:	4293      	cmp	r3, r2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e12b      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005180:	f7ff fb1f 	bl	80047c2 <LL_RCC_LSE_IsReady>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1ef      	bne.n	800516a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005192:	2b00      	cmp	r3, #0
 8005194:	d02c      	beq.n	80051f0 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	2b00      	cmp	r3, #0
 800519c:	d014      	beq.n	80051c8 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800519e:	f7ff fa98 	bl	80046d2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a2:	f7fc fceb 	bl	8001b7c <HAL_GetTick>
 80051a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051aa:	f7fc fce7 	bl	8001b7c <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e10d      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80051bc:	f7ff faab 	bl	8004716 <LL_RCC_HSI48_IsReady>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0f1      	beq.n	80051aa <HAL_RCC_OscConfig+0x4e2>
 80051c6:	e013      	b.n	80051f0 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051c8:	f7ff fa94 	bl	80046f4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051cc:	f7fc fcd6 	bl	8001b7c <HAL_GetTick>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051d4:	f7fc fcd2 	bl	8001b7c <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e0f8      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80051e6:	f7ff fa96 	bl	8004716 <LL_RCC_HSI48_IsReady>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f1      	bne.n	80051d4 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80ee 	beq.w	80053d6 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051fa:	f7ff fbf4 	bl	80049e6 <LL_RCC_GetSysClkSource>
 80051fe:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	2b02      	cmp	r3, #2
 800520e:	f040 80af 	bne.w	8005370 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f003 0203 	and.w	r2, r3, #3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	429a      	cmp	r2, r3
 800521e:	d123      	bne.n	8005268 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522a:	429a      	cmp	r2, r3
 800522c:	d11c      	bne.n	8005268 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	0a1b      	lsrs	r3, r3, #8
 8005232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d114      	bne.n	8005268 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005248:	429a      	cmp	r2, r3
 800524a:	d10d      	bne.n	8005268 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005256:	429a      	cmp	r2, r3
 8005258:	d106      	bne.n	8005268 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005264:	429a      	cmp	r2, r3
 8005266:	d05d      	beq.n	8005324 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b0c      	cmp	r3, #12
 800526c:	d058      	beq.n	8005320 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800526e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0ab      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005280:	f7ff fc74 	bl	8004b6c <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005284:	f7fc fc7a 	bl	8001b7c <HAL_GetTick>
 8005288:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528c:	f7fc fc76 	bl	8001b7c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e09c      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800529e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1ef      	bne.n	800528c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	4b3e      	ldr	r3, [pc, #248]	; (80053ac <HAL_RCC_OscConfig+0x6e4>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052be:	4311      	orrs	r1, r2
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052c4:	0212      	lsls	r2, r2, #8
 80052c6:	4311      	orrs	r1, r2
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052cc:	4311      	orrs	r1, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80052d2:	4311      	orrs	r1, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80052d8:	430a      	orrs	r2, r1
 80052da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052de:	4313      	orrs	r3, r2
 80052e0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052e2:	f7ff fc34 	bl	8004b4e <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f4:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052f6:	f7fc fc41 	bl	8001b7c <HAL_GetTick>
 80052fa:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fe:	f7fc fc3d 	bl	8001b7c <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e063      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0ef      	beq.n	80052fe <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800531e:	e05a      	b.n	80053d6 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e059      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d151      	bne.n	80053d6 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005332:	f7ff fc0c 	bl	8004b4e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005344:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005346:	f7fc fc19 	bl	8001b7c <HAL_GetTick>
 800534a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534e:	f7fc fc15 	bl	8001b7c <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e03b      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0ef      	beq.n	800534e <HAL_RCC_OscConfig+0x686>
 800536e:	e032      	b.n	80053d6 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b0c      	cmp	r3, #12
 8005374:	d02d      	beq.n	80053d2 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005376:	f7ff fbf9 	bl	8004b6c <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800537a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005384:	f023 0303 	bic.w	r3, r3, #3
 8005388:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800538a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005394:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800539c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539e:	f7fc fbed 	bl	8001b7c <HAL_GetTick>
 80053a2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a4:	e00d      	b.n	80053c2 <HAL_RCC_OscConfig+0x6fa>
 80053a6:	bf00      	nop
 80053a8:	58000400 	.word	0x58000400
 80053ac:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b0:	f7fc fbe4 	bl	8001b7c <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e00a      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1ef      	bne.n	80053b0 <HAL_RCC_OscConfig+0x6e8>
 80053d0:	e001      	b.n	80053d6 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3734      	adds	r7, #52	; 0x34
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd90      	pop	{r4, r7, pc}

080053e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e12d      	b.n	8005650 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053f4:	4b98      	ldr	r3, [pc, #608]	; (8005658 <HAL_RCC_ClockConfig+0x278>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d91b      	bls.n	800543a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005402:	4b95      	ldr	r3, [pc, #596]	; (8005658 <HAL_RCC_ClockConfig+0x278>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 0207 	bic.w	r2, r3, #7
 800540a:	4993      	ldr	r1, [pc, #588]	; (8005658 <HAL_RCC_ClockConfig+0x278>)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	4313      	orrs	r3, r2
 8005410:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005412:	f7fc fbb3 	bl	8001b7c <HAL_GetTick>
 8005416:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005418:	e008      	b.n	800542c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800541a:	f7fc fbaf 	bl	8001b7c <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e111      	b.n	8005650 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800542c:	4b8a      	ldr	r3, [pc, #552]	; (8005658 <HAL_RCC_ClockConfig+0x278>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d1ef      	bne.n	800541a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff fad7 	bl	80049fe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005450:	f7fc fb94 	bl	8001b7c <HAL_GetTick>
 8005454:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005456:	e008      	b.n	800546a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005458:	f7fc fb90 	bl	8001b7c <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e0f2      	b.n	8005650 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800546a:	f7ff fbd1 	bl	8004c10 <LL_RCC_IsActiveFlag_HPRE>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0f1      	beq.n	8005458 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d016      	beq.n	80054ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff face 	bl	8004a26 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800548a:	f7fc fb77 	bl	8001b7c <HAL_GetTick>
 800548e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005492:	f7fc fb73 	bl	8001b7c <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e0d5      	b.n	8005650 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80054a4:	f7ff fbc6 	bl	8004c34 <LL_RCC_IsActiveFlag_C2HPRE>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0f1      	beq.n	8005492 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d016      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fac7 	bl	8004a52 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054c4:	f7fc fb5a 	bl	8001b7c <HAL_GetTick>
 80054c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054cc:	f7fc fb56 	bl	8001b7c <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e0b8      	b.n	8005650 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80054de:	f7ff fbbc 	bl	8004c5a <LL_RCC_IsActiveFlag_SHDHPRE>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f1      	beq.n	80054cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d016      	beq.n	8005522 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff fac1 	bl	8004a80 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054fe:	f7fc fb3d 	bl	8001b7c <HAL_GetTick>
 8005502:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005504:	e008      	b.n	8005518 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005506:	f7fc fb39 	bl	8001b7c <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e09b      	b.n	8005650 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005518:	f7ff fbb2 	bl	8004c80 <LL_RCC_IsActiveFlag_PPRE1>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f1      	beq.n	8005506 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d017      	beq.n	800555e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff fab7 	bl	8004aa8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800553a:	f7fc fb1f 	bl	8001b7c <HAL_GetTick>
 800553e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005540:	e008      	b.n	8005554 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005542:	f7fc fb1b 	bl	8001b7c <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e07d      	b.n	8005650 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005554:	f7ff fba6 	bl	8004ca4 <LL_RCC_IsActiveFlag_PPRE2>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f1      	beq.n	8005542 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d043      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d106      	bne.n	8005580 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005572:	f7ff f857 	bl	8004624 <LL_RCC_HSE_IsReady>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d11e      	bne.n	80055ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e067      	b.n	8005650 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b03      	cmp	r3, #3
 8005586:	d106      	bne.n	8005596 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005588:	f7ff faff 	bl	8004b8a <LL_RCC_PLL_IsReady>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d113      	bne.n	80055ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e05c      	b.n	8005650 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800559e:	f7ff f9bf 	bl	8004920 <LL_RCC_MSI_IsReady>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d108      	bne.n	80055ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e051      	b.n	8005650 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80055ac:	f7ff f86a 	bl	8004684 <LL_RCC_HSI_IsReady>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e04a      	b.n	8005650 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff f9fd 	bl	80049be <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c4:	f7fc fada 	bl	8001b7c <HAL_GetTick>
 80055c8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ca:	e00a      	b.n	80055e2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055cc:	f7fc fad6 	bl	8001b7c <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e036      	b.n	8005650 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e2:	f7ff fa00 	bl	80049e6 <LL_RCC_GetSysClkSource>
 80055e6:	4602      	mov	r2, r0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d1ec      	bne.n	80055cc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055f2:	4b19      	ldr	r3, [pc, #100]	; (8005658 <HAL_RCC_ClockConfig+0x278>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d21b      	bcs.n	8005638 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005600:	4b15      	ldr	r3, [pc, #84]	; (8005658 <HAL_RCC_ClockConfig+0x278>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f023 0207 	bic.w	r2, r3, #7
 8005608:	4913      	ldr	r1, [pc, #76]	; (8005658 <HAL_RCC_ClockConfig+0x278>)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	4313      	orrs	r3, r2
 800560e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005610:	f7fc fab4 	bl	8001b7c <HAL_GetTick>
 8005614:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005616:	e008      	b.n	800562a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005618:	f7fc fab0 	bl	8001b7c <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e012      	b.n	8005650 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_RCC_ClockConfig+0x278>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d1ef      	bne.n	8005618 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005638:	f000 f87c 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 800563c:	4602      	mov	r2, r0
 800563e:	4b07      	ldr	r3, [pc, #28]	; (800565c <HAL_RCC_ClockConfig+0x27c>)
 8005640:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005642:	f7fc faa7 	bl	8001b94 <HAL_GetTickPrio>
 8005646:	4603      	mov	r3, r0
 8005648:	4618      	mov	r0, r3
 800564a:	f7fb ffd5 	bl	80015f8 <HAL_InitTick>
 800564e:	4603      	mov	r3, r0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	58004000 	.word	0x58004000
 800565c:	20000004 	.word	0x20000004

08005660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005660:	b590      	push	{r4, r7, lr}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005666:	f7ff f9be 	bl	80049e6 <LL_RCC_GetSysClkSource>
 800566a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005672:	f7ff f97a 	bl	800496a <LL_RCC_MSI_GetRange>
 8005676:	4603      	mov	r3, r0
 8005678:	091b      	lsrs	r3, r3, #4
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	4a2a      	ldr	r2, [pc, #168]	; (8005728 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	e04a      	b.n	800571e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b04      	cmp	r3, #4
 800568c:	d102      	bne.n	8005694 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800568e:	4b27      	ldr	r3, [pc, #156]	; (800572c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	e044      	b.n	800571e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b08      	cmp	r3, #8
 8005698:	d10a      	bne.n	80056b0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800569a:	f7fe ff93 	bl	80045c4 <LL_RCC_HSE_IsEnabledDiv2>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d102      	bne.n	80056aa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80056a4:	4b21      	ldr	r3, [pc, #132]	; (800572c <HAL_RCC_GetSysClockFreq+0xcc>)
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	e039      	b.n	800571e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80056aa:	4b21      	ldr	r3, [pc, #132]	; (8005730 <HAL_RCC_GetSysClockFreq+0xd0>)
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e036      	b.n	800571e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80056b0:	f7ff faa2 	bl	8004bf8 <LL_RCC_PLL_GetMainSource>
 80056b4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d002      	beq.n	80056c2 <HAL_RCC_GetSysClockFreq+0x62>
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d003      	beq.n	80056c8 <HAL_RCC_GetSysClockFreq+0x68>
 80056c0:	e00d      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80056c2:	4b1a      	ldr	r3, [pc, #104]	; (800572c <HAL_RCC_GetSysClockFreq+0xcc>)
 80056c4:	60bb      	str	r3, [r7, #8]
        break;
 80056c6:	e015      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80056c8:	f7fe ff7c 	bl	80045c4 <LL_RCC_HSE_IsEnabledDiv2>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d102      	bne.n	80056d8 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80056d2:	4b16      	ldr	r3, [pc, #88]	; (800572c <HAL_RCC_GetSysClockFreq+0xcc>)
 80056d4:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80056d6:	e00d      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80056d8:	4b15      	ldr	r3, [pc, #84]	; (8005730 <HAL_RCC_GetSysClockFreq+0xd0>)
 80056da:	60bb      	str	r3, [r7, #8]
        break;
 80056dc:	e00a      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80056de:	f7ff f944 	bl	800496a <LL_RCC_MSI_GetRange>
 80056e2:	4603      	mov	r3, r0
 80056e4:	091b      	lsrs	r3, r3, #4
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	4a0f      	ldr	r2, [pc, #60]	; (8005728 <HAL_RCC_GetSysClockFreq+0xc8>)
 80056ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f0:	60bb      	str	r3, [r7, #8]
        break;
 80056f2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80056f4:	f7ff fa5b 	bl	8004bae <LL_RCC_PLL_GetN>
 80056f8:	4602      	mov	r2, r0
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	fb03 f402 	mul.w	r4, r3, r2
 8005700:	f7ff fa6e 	bl	8004be0 <LL_RCC_PLL_GetDivider>
 8005704:	4603      	mov	r3, r0
 8005706:	091b      	lsrs	r3, r3, #4
 8005708:	3301      	adds	r3, #1
 800570a:	fbb4 f4f3 	udiv	r4, r4, r3
 800570e:	f7ff fa5b 	bl	8004bc8 <LL_RCC_PLL_GetR>
 8005712:	4603      	mov	r3, r0
 8005714:	0f5b      	lsrs	r3, r3, #29
 8005716:	3301      	adds	r3, #1
 8005718:	fbb4 f3f3 	udiv	r3, r4, r3
 800571c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800571e:	68fb      	ldr	r3, [r7, #12]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	bd90      	pop	{r4, r7, pc}
 8005728:	0800e8e4 	.word	0x0800e8e4
 800572c:	00f42400 	.word	0x00f42400
 8005730:	01e84800 	.word	0x01e84800

08005734 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005734:	b598      	push	{r3, r4, r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005738:	f7ff ff92 	bl	8005660 <HAL_RCC_GetSysClockFreq>
 800573c:	4604      	mov	r4, r0
 800573e:	f7ff f9c7 	bl	8004ad0 <LL_RCC_GetAHBPrescaler>
 8005742:	4603      	mov	r3, r0
 8005744:	091b      	lsrs	r3, r3, #4
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	4a03      	ldr	r2, [pc, #12]	; (8005758 <HAL_RCC_GetHCLKFreq+0x24>)
 800574c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005750:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	bd98      	pop	{r3, r4, r7, pc}
 8005758:	0800e884 	.word	0x0800e884

0800575c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800575c:	b598      	push	{r3, r4, r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005760:	f7ff ffe8 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8005764:	4604      	mov	r4, r0
 8005766:	f7ff f9e6 	bl	8004b36 <LL_RCC_GetAPB2Prescaler>
 800576a:	4603      	mov	r3, r0
 800576c:	0adb      	lsrs	r3, r3, #11
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	4a04      	ldr	r2, [pc, #16]	; (8005784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005780:	4618      	mov	r0, r3
 8005782:	bd98      	pop	{r3, r4, r7, pc}
 8005784:	0800e8c4 	.word	0x0800e8c4

08005788 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	226f      	movs	r2, #111	; 0x6f
 8005796:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005798:	f7ff f925 	bl	80049e6 <LL_RCC_GetSysClkSource>
 800579c:	4602      	mov	r2, r0
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80057a2:	f7ff f995 	bl	8004ad0 <LL_RCC_GetAHBPrescaler>
 80057a6:	4602      	mov	r2, r0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80057ac:	f7ff f9b7 	bl	8004b1e <LL_RCC_GetAPB1Prescaler>
 80057b0:	4602      	mov	r2, r0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80057b6:	f7ff f9be 	bl	8004b36 <LL_RCC_GetAPB2Prescaler>
 80057ba:	4602      	mov	r2, r0
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80057c0:	f7ff f992 	bl	8004ae8 <LL_C2_RCC_GetAHBPrescaler>
 80057c4:	4602      	mov	r2, r0
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80057ca:	f7ff f99a 	bl	8004b02 <LL_RCC_GetAHB4Prescaler>
 80057ce:	4602      	mov	r2, r0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <HAL_RCC_GetClockConfig+0x60>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0207 	and.w	r2, r3, #7
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	601a      	str	r2, [r3, #0]
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	58004000 	.word	0x58004000

080057ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80057ec:	b590      	push	{r4, r7, lr}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2bb0      	cmp	r3, #176	; 0xb0
 80057f8:	d903      	bls.n	8005802 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80057fa:	4b15      	ldr	r3, [pc, #84]	; (8005850 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	e007      	b.n	8005812 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	4a11      	ldr	r2, [pc, #68]	; (8005850 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800580c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005810:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005812:	f7ff f976 	bl	8004b02 <LL_RCC_GetAHB4Prescaler>
 8005816:	4603      	mov	r3, r0
 8005818:	091b      	lsrs	r3, r3, #4
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	4a0d      	ldr	r2, [pc, #52]	; (8005854 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	fbb2 f3f3 	udiv	r3, r2, r3
 800582a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4a0a      	ldr	r2, [pc, #40]	; (8005858 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005830:	fba2 2303 	umull	r2, r3, r2, r3
 8005834:	0c9c      	lsrs	r4, r3, #18
 8005836:	f7fe fea7 	bl	8004588 <HAL_PWREx_GetVoltageRange>
 800583a:	4603      	mov	r3, r0
 800583c:	4619      	mov	r1, r3
 800583e:	4620      	mov	r0, r4
 8005840:	f000 f80c 	bl	800585c <RCC_SetFlashLatency>
 8005844:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	bd90      	pop	{r4, r7, pc}
 800584e:	bf00      	nop
 8005850:	0800e8e4 	.word	0x0800e8e4
 8005854:	0800e884 	.word	0x0800e884
 8005858:	431bde83 	.word	0x431bde83

0800585c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800585c:	b590      	push	{r4, r7, lr}
 800585e:	b093      	sub	sp, #76	; 0x4c
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005866:	4b39      	ldr	r3, [pc, #228]	; (800594c <RCC_SetFlashLatency+0xf0>)
 8005868:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800586c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800586e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005872:	4a37      	ldr	r2, [pc, #220]	; (8005950 <RCC_SetFlashLatency+0xf4>)
 8005874:	f107 031c 	add.w	r3, r7, #28
 8005878:	ca07      	ldmia	r2, {r0, r1, r2}
 800587a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800587e:	4b35      	ldr	r3, [pc, #212]	; (8005954 <RCC_SetFlashLatency+0xf8>)
 8005880:	f107 040c 	add.w	r4, r7, #12
 8005884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005886:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800588a:	2300      	movs	r3, #0
 800588c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005894:	d11c      	bne.n	80058d0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005896:	2300      	movs	r3, #0
 8005898:	643b      	str	r3, [r7, #64]	; 0x40
 800589a:	e015      	b.n	80058c8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800589c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80058a4:	4413      	add	r3, r2
 80058a6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d808      	bhi.n	80058c2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80058b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80058b8:	4413      	add	r3, r2
 80058ba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80058be:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80058c0:	e022      	b.n	8005908 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80058c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c4:	3301      	adds	r3, #1
 80058c6:	643b      	str	r3, [r7, #64]	; 0x40
 80058c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d9e6      	bls.n	800589c <RCC_SetFlashLatency+0x40>
 80058ce:	e01b      	b.n	8005908 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80058d0:	2300      	movs	r3, #0
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d4:	e015      	b.n	8005902 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80058d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80058de:	4413      	add	r3, r2
 80058e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d808      	bhi.n	80058fc <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80058ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80058f2:	4413      	add	r3, r2
 80058f4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80058f8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80058fa:	e005      	b.n	8005908 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80058fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fe:	3301      	adds	r3, #1
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005904:	2b02      	cmp	r3, #2
 8005906:	d9e6      	bls.n	80058d6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005908:	4b13      	ldr	r3, [pc, #76]	; (8005958 <RCC_SetFlashLatency+0xfc>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f023 0207 	bic.w	r2, r3, #7
 8005910:	4911      	ldr	r1, [pc, #68]	; (8005958 <RCC_SetFlashLatency+0xfc>)
 8005912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005914:	4313      	orrs	r3, r2
 8005916:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005918:	f7fc f930 	bl	8001b7c <HAL_GetTick>
 800591c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800591e:	e008      	b.n	8005932 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005920:	f7fc f92c 	bl	8001b7c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e007      	b.n	8005942 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005932:	4b09      	ldr	r3, [pc, #36]	; (8005958 <RCC_SetFlashLatency+0xfc>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800593c:	429a      	cmp	r2, r3
 800593e:	d1ef      	bne.n	8005920 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	374c      	adds	r7, #76	; 0x4c
 8005946:	46bd      	mov	sp, r7
 8005948:	bd90      	pop	{r4, r7, pc}
 800594a:	bf00      	nop
 800594c:	0800e5b8 	.word	0x0800e5b8
 8005950:	0800e5c8 	.word	0x0800e5c8
 8005954:	0800e5d4 	.word	0x0800e5d4
 8005958:	58004000 	.word	0x58004000

0800595c <LL_RCC_LSE_IsEnabled>:
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <LL_RCC_LSE_IsEnabled+0x18>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <LL_RCC_LSE_IsEnabled+0x1a>
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <LL_RCC_LSE_IsReady>:
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b02      	cmp	r3, #2
 8005992:	d101      	bne.n	8005998 <LL_RCC_LSE_IsReady+0x18>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <LL_RCC_LSE_IsReady+0x1a>
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <LL_RCC_SetRFWKPClockSource>:
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80059ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <LL_RCC_SetSMPSClockSource>:
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80059d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	f023 0203 	bic.w	r2, r3, #3
 80059e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	624b      	str	r3, [r1, #36]	; 0x24
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <LL_RCC_SetSMPSPrescaler>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <LL_RCC_SetUSARTClockSource>:
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a30:	f023 0203 	bic.w	r2, r3, #3
 8005a34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <LL_RCC_SetLPUARTClockSource>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <LL_RCC_SetI2CClockSource>:
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	091b      	lsrs	r3, r3, #4
 8005a8c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005a90:	43db      	mvns	r3, r3
 8005a92:	401a      	ands	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005a9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <LL_RCC_SetLPTIMClockSource>:
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005abe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	0c1b      	lsrs	r3, r3, #16
 8005ac6:	041b      	lsls	r3, r3, #16
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	401a      	ands	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	041b      	lsls	r3, r3, #16
 8005ad0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <LL_RCC_SetSAIClockSource>:
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <LL_RCC_SetRNGClockSource>:
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <LL_RCC_SetCLK48ClockSource>:
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <LL_RCC_SetUSBClockSource>:
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff ffe3 	bl	8005b3e <LL_RCC_SetCLK48ClockSource>
}
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <LL_RCC_SetADCClockSource>:
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <LL_RCC_SetRTCClockSource>:
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <LL_RCC_GetRTCClockSource>:
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <LL_RCC_ForceBackupDomainReset>:
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005c0a:	bf00      	nop
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005c2c:	bf00      	nop
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <LL_RCC_PLLSAI1_Enable>:
{
 8005c36:	b480      	push	{r7}
 8005c38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c48:	6013      	str	r3, [r2, #0]
}
 8005c4a:	bf00      	nop
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <LL_RCC_PLLSAI1_Disable>:
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c66:	6013      	str	r3, [r2, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <LL_RCC_PLLSAI1_IsReady>:
{
 8005c72:	b480      	push	{r7}
 8005c74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c84:	d101      	bne.n	8005c8a <LL_RCC_PLLSAI1_IsReady+0x18>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b088      	sub	sp, #32
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d033      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cba:	d00c      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cc0:	d802      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d010      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005cc6:	e017      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005cc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ccc:	d017      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005cce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cd2:	d016      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005cd4:	e010      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ce6:	e00d      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 f947 	bl	8005f80 <RCCEx_PLLSAI1_ConfigNP>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005cf6:	e005      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	77fb      	strb	r3, [r7, #31]
        break;
 8005cfc:	e002      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005cfe:	bf00      	nop
 8005d00:	e000      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d04:	7ffb      	ldrb	r3, [r7, #31]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d105      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff fee9 	bl	8005ae6 <LL_RCC_SetSAIClockSource>
 8005d14:	e001      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d16:	7ffb      	ldrb	r3, [r7, #31]
 8005d18:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d046      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005d26:	f7ff ff57 	bl	8005bd8 <LL_RCC_GetRTCClockSource>
 8005d2a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d03c      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005d36:	f7fe fc17 	bl	8004568 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d105      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff ff31 	bl	8005bac <LL_RCC_SetRTCClockSource>
 8005d4a:	e02e      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d54:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005d56:	f7ff ff4c 	bl	8005bf2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005d5a:	f7ff ff5b 	bl	8005c14 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005d76:	f7ff fdf1 	bl	800595c <LL_RCC_LSE_IsEnabled>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d114      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d80:	f7fb fefc 	bl	8001b7c <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005d86:	e00b      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d88:	f7fb fef8 	bl	8001b7c <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d902      	bls.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	77fb      	strb	r3, [r7, #31]
              break;
 8005d9e:	e004      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005da0:	f7ff fdee 	bl	8005980 <LL_RCC_LSE_IsReady>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d1ee      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005daa:	7ffb      	ldrb	r3, [r7, #31]
 8005dac:	77bb      	strb	r3, [r7, #30]
 8005dae:	e001      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db0:	7ffb      	ldrb	r3, [r7, #31]
 8005db2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff fe2b 	bl	8005a20 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d004      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff fe36 	bl	8005a4c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff fe5e 	bl	8005ab2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff fe53 	bl	8005ab2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d004      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fe2b 	bl	8005a78 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d004      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff fe20 	bl	8005a78 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d022      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff fe8e 	bl	8005b6a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e56:	d107      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e66:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e70:	d10b      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 f8dd 	bl	8006036 <RCCEx_PLLSAI1_ConfigNQ>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005e80:	7ffb      	ldrb	r3, [r7, #31]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8005e86:	7ffb      	ldrb	r3, [r7, #31]
 8005e88:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d02b      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9e:	d008      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ea8:	d003      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d105      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fe2b 	bl	8005b12 <LL_RCC_SetRNGClockSource>
 8005ebc:	e00a      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	2000      	movs	r0, #0
 8005eca:	f7ff fe22 	bl	8005b12 <LL_RCC_SetRNGClockSource>
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f7ff fe35 	bl	8005b3e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005edc:	d107      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d022      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff fe3e 	bl	8005b80 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f0c:	d107      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f1c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f26:	d10b      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 f8dd 	bl	80060ec <RCCEx_PLLSAI1_ConfigNR>
 8005f32:	4603      	mov	r3, r0
 8005f34:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005f36:	7ffb      	ldrb	r3, [r7, #31]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8005f3c:	7ffb      	ldrb	r3, [r7, #31]
 8005f3e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d004      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff fd27 	bl	80059a4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d009      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff fd46 	bl	80059f8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fd2d 	bl	80059d0 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005f76:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f8c:	f7ff fe62 	bl	8005c54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f90:	f7fb fdf4 	bl	8001b7c <HAL_GetTick>
 8005f94:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f96:	e009      	b.n	8005fac <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f98:	f7fb fdf0 	bl	8001b7c <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d902      	bls.n	8005fac <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8005faa:	e004      	b.n	8005fb6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fac:	f7ff fe61 	bl	8005c72 <LL_RCC_PLLSAI1_IsReady>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d137      	bne.n	800602c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005fea:	f7ff fe24 	bl	8005c36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fee:	f7fb fdc5 	bl	8001b7c <HAL_GetTick>
 8005ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ff4:	e009      	b.n	800600a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ff6:	f7fb fdc1 	bl	8001b7c <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d902      	bls.n	800600a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	73fb      	strb	r3, [r7, #15]
        break;
 8006008:	e004      	b.n	8006014 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800600a:	f7ff fe32 	bl	8005c72 <LL_RCC_PLLSAI1_IsReady>
 800600e:	4603      	mov	r3, r0
 8006010:	2b01      	cmp	r3, #1
 8006012:	d1f0      	bne.n	8005ff6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d108      	bne.n	800602c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800601a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006028:	4313      	orrs	r3, r2
 800602a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800602c:	7bfb      	ldrb	r3, [r7, #15]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006042:	f7ff fe07 	bl	8005c54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006046:	f7fb fd99 	bl	8001b7c <HAL_GetTick>
 800604a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800604c:	e009      	b.n	8006062 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800604e:	f7fb fd95 	bl	8001b7c <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d902      	bls.n	8006062 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	73fb      	strb	r3, [r7, #15]
      break;
 8006060:	e004      	b.n	800606c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006062:	f7ff fe06 	bl	8005c72 <LL_RCC_PLLSAI1_IsReady>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1f0      	bne.n	800604e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d137      	bne.n	80060e2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006086:	4313      	orrs	r3, r2
 8006088:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800608a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800609c:	4313      	orrs	r3, r2
 800609e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80060a0:	f7ff fdc9 	bl	8005c36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a4:	f7fb fd6a 	bl	8001b7c <HAL_GetTick>
 80060a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060aa:	e009      	b.n	80060c0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060ac:	f7fb fd66 	bl	8001b7c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d902      	bls.n	80060c0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	73fb      	strb	r3, [r7, #15]
        break;
 80060be:	e004      	b.n	80060ca <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060c0:	f7ff fdd7 	bl	8005c72 <LL_RCC_PLLSAI1_IsReady>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d1f0      	bne.n	80060ac <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d108      	bne.n	80060e2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80060d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060de:	4313      	orrs	r3, r2
 80060e0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80060f8:	f7ff fdac 	bl	8005c54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060fc:	f7fb fd3e 	bl	8001b7c <HAL_GetTick>
 8006100:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006102:	e009      	b.n	8006118 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006104:	f7fb fd3a 	bl	8001b7c <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d902      	bls.n	8006118 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	73fb      	strb	r3, [r7, #15]
      break;
 8006116:	e004      	b.n	8006122 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006118:	f7ff fdab 	bl	8005c72 <LL_RCC_PLLSAI1_IsReady>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d137      	bne.n	8006198 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800613c:	4313      	orrs	r3, r2
 800613e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006152:	4313      	orrs	r3, r2
 8006154:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006156:	f7ff fd6e 	bl	8005c36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800615a:	f7fb fd0f 	bl	8001b7c <HAL_GetTick>
 800615e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006160:	e009      	b.n	8006176 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006162:	f7fb fd0b 	bl	8001b7c <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d902      	bls.n	8006176 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	73fb      	strb	r3, [r7, #15]
        break;
 8006174:	e004      	b.n	8006180 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006176:	f7ff fd7c 	bl	8005c72 <LL_RCC_PLLSAI1_IsReady>
 800617a:	4603      	mov	r3, r0
 800617c:	2b01      	cmp	r3, #1
 800617e:	d1f0      	bne.n	8006162 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d108      	bne.n	8006198 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006194:	4313      	orrs	r3, r2
 8006196:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e090      	b.n	80062d6 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d106      	bne.n	80061ce <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7fb f9ad 	bl	8001528 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	22ca      	movs	r2, #202	; 0xca
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2253      	movs	r2, #83	; 0x53
 80061e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f89f 	bl	800632a <RTC_EnterInitMode>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	22ff      	movs	r2, #255	; 0xff
 80061f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2204      	movs	r2, #4
 80061fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e067      	b.n	80062d6 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6812      	ldr	r2, [r2, #0]
 8006210:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006218:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6899      	ldr	r1, [r3, #8]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	68d2      	ldr	r2, [r2, #12]
 8006240:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6919      	ldr	r1, [r3, #16]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	041a      	lsls	r2, r3, #16
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006264:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0203 	bic.w	r2, r2, #3
 8006274:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	69da      	ldr	r2, [r3, #28]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 0320 	and.w	r3, r3, #32
 8006298:	2b00      	cmp	r3, #0
 800629a:	d113      	bne.n	80062c4 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f81e 	bl	80062de <HAL_RTC_WaitForSynchro>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00d      	beq.n	80062c4 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	22ff      	movs	r2, #255	; 0xff
 80062ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2204      	movs	r2, #4
 80062b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e008      	b.n	80062d6 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	22ff      	movs	r2, #255	; 0xff
 80062ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80062d4:	2300      	movs	r3, #0
  }
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062f4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80062f6:	f7fb fc41 	bl	8001b7c <HAL_GetTick>
 80062fa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062fc:	e009      	b.n	8006312 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062fe:	f7fb fc3d 	bl	8001b7c <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800630c:	d901      	bls.n	8006312 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e007      	b.n	8006322 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0ee      	beq.n	80062fe <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d119      	bne.n	8006374 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f04f 32ff 	mov.w	r2, #4294967295
 8006348:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800634a:	f7fb fc17 	bl	8001b7c <HAL_GetTick>
 800634e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006350:	e009      	b.n	8006366 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006352:	f7fb fc13 	bl	8001b7c <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006360:	d901      	bls.n	8006366 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e007      	b.n	8006376 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0ee      	beq.n	8006352 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e049      	b.n	8006424 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d106      	bne.n	80063aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7fb fb33 	bl	8001a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2202      	movs	r2, #2
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3304      	adds	r3, #4
 80063ba:	4619      	mov	r1, r3
 80063bc:	4610      	mov	r0, r2
 80063be:	f000 fbf5 	bl	8006bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d001      	beq.n	8006444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e036      	b.n	80064b2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <HAL_TIM_Base_Start_IT+0x94>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d004      	beq.n	8006470 <HAL_TIM_Base_Start_IT+0x44>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646e:	d115      	bne.n	800649c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	4b13      	ldr	r3, [pc, #76]	; (80064c4 <HAL_TIM_Base_Start_IT+0x98>)
 8006478:	4013      	ands	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b06      	cmp	r3, #6
 8006480:	d015      	beq.n	80064ae <HAL_TIM_Base_Start_IT+0x82>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006488:	d011      	beq.n	80064ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800649a:	e008      	b.n	80064ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	e000      	b.n	80064b0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	00010007 	.word	0x00010007

080064c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e049      	b.n	800656e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f841 	bl	8006576 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3304      	adds	r3, #4
 8006504:	4619      	mov	r1, r3
 8006506:	4610      	mov	r0, r2
 8006508:	f000 fb50 	bl	8006bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b02      	cmp	r3, #2
 800659e:	d122      	bne.n	80065e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d11b      	bne.n	80065e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f06f 0202 	mvn.w	r2, #2
 80065b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	f003 0303 	and.w	r3, r3, #3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 face 	bl	8006b6e <HAL_TIM_IC_CaptureCallback>
 80065d2:	e005      	b.n	80065e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fac0 	bl	8006b5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fad1 	bl	8006b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f003 0304 	and.w	r3, r3, #4
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d122      	bne.n	800663a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d11b      	bne.n	800663a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f06f 0204 	mvn.w	r2, #4
 800660a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 faa4 	bl	8006b6e <HAL_TIM_IC_CaptureCallback>
 8006626:	e005      	b.n	8006634 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fa96 	bl	8006b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 faa7 	bl	8006b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b08      	cmp	r3, #8
 8006646:	d122      	bne.n	800668e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b08      	cmp	r3, #8
 8006654:	d11b      	bne.n	800668e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f06f 0208 	mvn.w	r2, #8
 800665e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2204      	movs	r2, #4
 8006664:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f003 0303 	and.w	r3, r3, #3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fa7a 	bl	8006b6e <HAL_TIM_IC_CaptureCallback>
 800667a:	e005      	b.n	8006688 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fa6c 	bl	8006b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa7d 	bl	8006b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b10      	cmp	r3, #16
 800669a:	d122      	bne.n	80066e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	2b10      	cmp	r3, #16
 80066a8:	d11b      	bne.n	80066e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f06f 0210 	mvn.w	r2, #16
 80066b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2208      	movs	r2, #8
 80066b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fa50 	bl	8006b6e <HAL_TIM_IC_CaptureCallback>
 80066ce:	e005      	b.n	80066dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fa42 	bl	8006b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa53 	bl	8006b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d10e      	bne.n	800670e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d107      	bne.n	800670e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f06f 0201 	mvn.w	r2, #1
 8006706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7fa fd59 	bl	80011c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006718:	2b80      	cmp	r3, #128	; 0x80
 800671a:	d10e      	bne.n	800673a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006726:	2b80      	cmp	r3, #128	; 0x80
 8006728:	d107      	bne.n	800673a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 feb1 	bl	800749c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006748:	d10e      	bne.n	8006768 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006754:	2b80      	cmp	r3, #128	; 0x80
 8006756:	d107      	bne.n	8006768 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fea4 	bl	80074b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b40      	cmp	r3, #64	; 0x40
 8006774:	d10e      	bne.n	8006794 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006780:	2b40      	cmp	r3, #64	; 0x40
 8006782:	d107      	bne.n	8006794 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800678c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fa01 	bl	8006b96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d10e      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d107      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f06f 0220 	mvn.w	r2, #32
 80067b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fe64 	bl	8007488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80067de:	2302      	movs	r3, #2
 80067e0:	e0fd      	b.n	80069de <HAL_TIM_PWM_ConfigChannel+0x216>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b14      	cmp	r3, #20
 80067ee:	f200 80f0 	bhi.w	80069d2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80067f2:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	0800684d 	.word	0x0800684d
 80067fc:	080069d3 	.word	0x080069d3
 8006800:	080069d3 	.word	0x080069d3
 8006804:	080069d3 	.word	0x080069d3
 8006808:	0800688d 	.word	0x0800688d
 800680c:	080069d3 	.word	0x080069d3
 8006810:	080069d3 	.word	0x080069d3
 8006814:	080069d3 	.word	0x080069d3
 8006818:	080068cf 	.word	0x080068cf
 800681c:	080069d3 	.word	0x080069d3
 8006820:	080069d3 	.word	0x080069d3
 8006824:	080069d3 	.word	0x080069d3
 8006828:	0800690f 	.word	0x0800690f
 800682c:	080069d3 	.word	0x080069d3
 8006830:	080069d3 	.word	0x080069d3
 8006834:	080069d3 	.word	0x080069d3
 8006838:	08006951 	.word	0x08006951
 800683c:	080069d3 	.word	0x080069d3
 8006840:	080069d3 	.word	0x080069d3
 8006844:	080069d3 	.word	0x080069d3
 8006848:	08006991 	.word	0x08006991
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fa0e 	bl	8006c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0208 	orr.w	r2, r2, #8
 8006866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0204 	bic.w	r2, r2, #4
 8006876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6999      	ldr	r1, [r3, #24]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	691a      	ldr	r2, [r3, #16]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	619a      	str	r2, [r3, #24]
      break;
 800688a:	e0a3      	b.n	80069d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fa6a 	bl	8006d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699a      	ldr	r2, [r3, #24]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6999      	ldr	r1, [r3, #24]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	021a      	lsls	r2, r3, #8
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	619a      	str	r2, [r3, #24]
      break;
 80068cc:	e082      	b.n	80069d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68b9      	ldr	r1, [r7, #8]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fac3 	bl	8006e60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0208 	orr.w	r2, r2, #8
 80068e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0204 	bic.w	r2, r2, #4
 80068f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69d9      	ldr	r1, [r3, #28]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	691a      	ldr	r2, [r3, #16]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	61da      	str	r2, [r3, #28]
      break;
 800690c:	e062      	b.n	80069d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fb1b 	bl	8006f50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69da      	ldr	r2, [r3, #28]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69da      	ldr	r2, [r3, #28]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69d9      	ldr	r1, [r3, #28]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	021a      	lsls	r2, r3, #8
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	61da      	str	r2, [r3, #28]
      break;
 800694e:	e041      	b.n	80069d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fb58 	bl	800700c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0208 	orr.w	r2, r2, #8
 800696a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0204 	bic.w	r2, r2, #4
 800697a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800698e:	e021      	b.n	80069d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fb90 	bl	80070bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	021a      	lsls	r2, r3, #8
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069d0:	e000      	b.n	80069d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80069d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop

080069e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d101      	bne.n	8006a00 <HAL_TIM_ConfigClockSource+0x18>
 80069fc:	2302      	movs	r3, #2
 80069fe:	e0a8      	b.n	8006b52 <HAL_TIM_ConfigClockSource+0x16a>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006a1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	d067      	beq.n	8006b0c <HAL_TIM_ConfigClockSource+0x124>
 8006a3c:	2b40      	cmp	r3, #64	; 0x40
 8006a3e:	d80b      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x70>
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d073      	beq.n	8006b2c <HAL_TIM_ConfigClockSource+0x144>
 8006a44:	2b10      	cmp	r3, #16
 8006a46:	d802      	bhi.n	8006a4e <HAL_TIM_ConfigClockSource+0x66>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d06f      	beq.n	8006b2c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a4c:	e078      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d06c      	beq.n	8006b2c <HAL_TIM_ConfigClockSource+0x144>
 8006a52:	2b30      	cmp	r3, #48	; 0x30
 8006a54:	d06a      	beq.n	8006b2c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006a56:	e073      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006a58:	2b70      	cmp	r3, #112	; 0x70
 8006a5a:	d00d      	beq.n	8006a78 <HAL_TIM_ConfigClockSource+0x90>
 8006a5c:	2b70      	cmp	r3, #112	; 0x70
 8006a5e:	d804      	bhi.n	8006a6a <HAL_TIM_ConfigClockSource+0x82>
 8006a60:	2b50      	cmp	r3, #80	; 0x50
 8006a62:	d033      	beq.n	8006acc <HAL_TIM_ConfigClockSource+0xe4>
 8006a64:	2b60      	cmp	r3, #96	; 0x60
 8006a66:	d041      	beq.n	8006aec <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006a68:	e06a      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6e:	d066      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x156>
 8006a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a74:	d017      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006a76:	e063      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	6899      	ldr	r1, [r3, #8]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f000 fbee 	bl	8007268 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	609a      	str	r2, [r3, #8]
      break;
 8006aa4:	e04c      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6899      	ldr	r1, [r3, #8]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f000 fbd7 	bl	8007268 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ac8:	609a      	str	r2, [r3, #8]
      break;
 8006aca:	e039      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	6859      	ldr	r1, [r3, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f000 fb49 	bl	8007170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2150      	movs	r1, #80	; 0x50
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fba2 	bl	800722e <TIM_ITRx_SetConfig>
      break;
 8006aea:	e029      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6859      	ldr	r1, [r3, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	461a      	mov	r2, r3
 8006afa:	f000 fb68 	bl	80071ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2160      	movs	r1, #96	; 0x60
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 fb92 	bl	800722e <TIM_ITRx_SetConfig>
      break;
 8006b0a:	e019      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	6859      	ldr	r1, [r3, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f000 fb29 	bl	8007170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2140      	movs	r1, #64	; 0x40
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 fb82 	bl	800722e <TIM_ITRx_SetConfig>
      break;
 8006b2a:	e009      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4619      	mov	r1, r3
 8006b36:	4610      	mov	r0, r2
 8006b38:	f000 fb79 	bl	800722e <TIM_ITRx_SetConfig>
        break;
 8006b3c:	e000      	b.n	8006b40 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8006b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
	...

08006bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a2a      	ldr	r2, [pc, #168]	; (8006c68 <TIM_Base_SetConfig+0xbc>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_Base_SetConfig+0x20>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bca:	d108      	bne.n	8006bde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a21      	ldr	r2, [pc, #132]	; (8006c68 <TIM_Base_SetConfig+0xbc>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00b      	beq.n	8006bfe <TIM_Base_SetConfig+0x52>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bec:	d007      	beq.n	8006bfe <TIM_Base_SetConfig+0x52>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a1e      	ldr	r2, [pc, #120]	; (8006c6c <TIM_Base_SetConfig+0xc0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d003      	beq.n	8006bfe <TIM_Base_SetConfig+0x52>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a1d      	ldr	r2, [pc, #116]	; (8006c70 <TIM_Base_SetConfig+0xc4>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d108      	bne.n	8006c10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a0c      	ldr	r2, [pc, #48]	; (8006c68 <TIM_Base_SetConfig+0xbc>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d007      	beq.n	8006c4c <TIM_Base_SetConfig+0xa0>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a0b      	ldr	r2, [pc, #44]	; (8006c6c <TIM_Base_SetConfig+0xc0>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_Base_SetConfig+0xa0>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a0a      	ldr	r2, [pc, #40]	; (8006c70 <TIM_Base_SetConfig+0xc4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d103      	bne.n	8006c54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	615a      	str	r2, [r3, #20]
}
 8006c5a:	bf00      	nop
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	40014400 	.word	0x40014400
 8006c70:	40014800 	.word	0x40014800

08006c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f023 0201 	bic.w	r2, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0303 	bic.w	r3, r3, #3
 8006cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f023 0302 	bic.w	r3, r3, #2
 8006cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a24      	ldr	r2, [pc, #144]	; (8006d60 <TIM_OC1_SetConfig+0xec>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d007      	beq.n	8006ce4 <TIM_OC1_SetConfig+0x70>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a23      	ldr	r2, [pc, #140]	; (8006d64 <TIM_OC1_SetConfig+0xf0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d003      	beq.n	8006ce4 <TIM_OC1_SetConfig+0x70>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a22      	ldr	r2, [pc, #136]	; (8006d68 <TIM_OC1_SetConfig+0xf4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d10c      	bne.n	8006cfe <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f023 0308 	bic.w	r3, r3, #8
 8006cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f023 0304 	bic.w	r3, r3, #4
 8006cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a17      	ldr	r2, [pc, #92]	; (8006d60 <TIM_OC1_SetConfig+0xec>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d007      	beq.n	8006d16 <TIM_OC1_SetConfig+0xa2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a17      	ldr	r2, [pc, #92]	; (8006d68 <TIM_OC1_SetConfig+0xf4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d003      	beq.n	8006d16 <TIM_OC1_SetConfig+0xa2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a14      	ldr	r2, [pc, #80]	; (8006d64 <TIM_OC1_SetConfig+0xf0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d111      	bne.n	8006d3a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	621a      	str	r2, [r3, #32]
}
 8006d54:	bf00      	nop
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	40012c00 	.word	0x40012c00
 8006d64:	40014800 	.word	0x40014800
 8006d68:	40014400 	.word	0x40014400

08006d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	f023 0210 	bic.w	r2, r3, #16
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f023 0320 	bic.w	r3, r3, #32
 8006dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <TIM_OC2_SetConfig+0xe8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d10d      	bne.n	8006dec <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a19      	ldr	r2, [pc, #100]	; (8006e54 <TIM_OC2_SetConfig+0xe8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d007      	beq.n	8006e04 <TIM_OC2_SetConfig+0x98>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <TIM_OC2_SetConfig+0xec>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC2_SetConfig+0x98>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a17      	ldr	r2, [pc, #92]	; (8006e5c <TIM_OC2_SetConfig+0xf0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d113      	bne.n	8006e2c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	621a      	str	r2, [r3, #32]
}
 8006e46:	bf00      	nop
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40012c00 	.word	0x40012c00
 8006e58:	40014400 	.word	0x40014400
 8006e5c:	40014800 	.word	0x40014800

08006e60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0303 	bic.w	r3, r3, #3
 8006e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a21      	ldr	r2, [pc, #132]	; (8006f44 <TIM_OC3_SetConfig+0xe4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d10d      	bne.n	8006ede <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a18      	ldr	r2, [pc, #96]	; (8006f44 <TIM_OC3_SetConfig+0xe4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d007      	beq.n	8006ef6 <TIM_OC3_SetConfig+0x96>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a17      	ldr	r2, [pc, #92]	; (8006f48 <TIM_OC3_SetConfig+0xe8>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d003      	beq.n	8006ef6 <TIM_OC3_SetConfig+0x96>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a16      	ldr	r2, [pc, #88]	; (8006f4c <TIM_OC3_SetConfig+0xec>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d113      	bne.n	8006f1e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	011b      	lsls	r3, r3, #4
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	621a      	str	r2, [r3, #32]
}
 8006f38:	bf00      	nop
 8006f3a:	371c      	adds	r7, #28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	40012c00 	.word	0x40012c00
 8006f48:	40014400 	.word	0x40014400
 8006f4c:	40014800 	.word	0x40014800

08006f50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	031b      	lsls	r3, r3, #12
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a14      	ldr	r2, [pc, #80]	; (8007000 <TIM_OC4_SetConfig+0xb0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d007      	beq.n	8006fc4 <TIM_OC4_SetConfig+0x74>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a13      	ldr	r2, [pc, #76]	; (8007004 <TIM_OC4_SetConfig+0xb4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <TIM_OC4_SetConfig+0x74>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a12      	ldr	r2, [pc, #72]	; (8007008 <TIM_OC4_SetConfig+0xb8>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d109      	bne.n	8006fd8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	019b      	lsls	r3, r3, #6
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	621a      	str	r2, [r3, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40012c00 	.word	0x40012c00
 8007004:	40014400 	.word	0x40014400
 8007008:	40014800 	.word	0x40014800

0800700c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007050:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	041b      	lsls	r3, r3, #16
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a13      	ldr	r2, [pc, #76]	; (80070b0 <TIM_OC5_SetConfig+0xa4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d007      	beq.n	8007076 <TIM_OC5_SetConfig+0x6a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a12      	ldr	r2, [pc, #72]	; (80070b4 <TIM_OC5_SetConfig+0xa8>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d003      	beq.n	8007076 <TIM_OC5_SetConfig+0x6a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a11      	ldr	r2, [pc, #68]	; (80070b8 <TIM_OC5_SetConfig+0xac>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d109      	bne.n	800708a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800707c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	021b      	lsls	r3, r3, #8
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	621a      	str	r2, [r3, #32]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40014400 	.word	0x40014400
 80070b8:	40014800 	.word	0x40014800

080070bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	051b      	lsls	r3, r3, #20
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a14      	ldr	r2, [pc, #80]	; (8007164 <TIM_OC6_SetConfig+0xa8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d007      	beq.n	8007128 <TIM_OC6_SetConfig+0x6c>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a13      	ldr	r2, [pc, #76]	; (8007168 <TIM_OC6_SetConfig+0xac>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_OC6_SetConfig+0x6c>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a12      	ldr	r2, [pc, #72]	; (800716c <TIM_OC6_SetConfig+0xb0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d109      	bne.n	800713c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800712e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	029b      	lsls	r3, r3, #10
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	621a      	str	r2, [r3, #32]
}
 8007156:	bf00      	nop
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	40012c00 	.word	0x40012c00
 8007168:	40014400 	.word	0x40014400
 800716c:	40014800 	.word	0x40014800

08007170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f023 0201 	bic.w	r2, r3, #1
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800719a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f023 030a 	bic.w	r3, r3, #10
 80071ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	621a      	str	r2, [r3, #32]
}
 80071c2:	bf00      	nop
 80071c4:	371c      	adds	r7, #28
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b087      	sub	sp, #28
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f023 0210 	bic.w	r2, r3, #16
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	031b      	lsls	r3, r3, #12
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800720a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	621a      	str	r2, [r3, #32]
}
 8007222:	bf00      	nop
 8007224:	371c      	adds	r7, #28
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4313      	orrs	r3, r2
 8007250:	f043 0307 	orr.w	r3, r3, #7
 8007254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	609a      	str	r2, [r3, #8]
}
 800725c:	bf00      	nop
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	021a      	lsls	r2, r3, #8
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	431a      	orrs	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4313      	orrs	r3, r2
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	609a      	str	r2, [r3, #8]
}
 800729c:	bf00      	nop
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072bc:	2302      	movs	r3, #2
 80072be:	e04a      	b.n	8007356 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a1f      	ldr	r2, [pc, #124]	; (8007364 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d108      	bne.n	80072fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a12      	ldr	r2, [pc, #72]	; (8007364 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007328:	d10c      	bne.n	8007344 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	4313      	orrs	r3, r2
 800733a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40012c00 	.word	0x40012c00

08007368 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007380:	2302      	movs	r3, #2
 8007382:	e078      	b.n	8007476 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	041b      	lsls	r3, r3, #16
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a20      	ldr	r2, [pc, #128]	; (8007484 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d106      	bne.n	8007416 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1a      	ldr	r2, [pc, #104]	; (8007484 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d121      	bne.n	8007464 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	051b      	lsls	r3, r3, #20
 800742c:	4313      	orrs	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a0c      	ldr	r2, [pc, #48]	; (8007484 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d106      	bne.n	8007464 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40012c00 	.word	0x40012c00

08007488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074cc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80074d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	4313      	orrs	r3, r2
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b085      	sub	sp, #20
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074fe:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007502:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	b29b      	uxth	r3, r3
 8007510:	43db      	mvns	r3, r3
 8007512:	b29b      	uxth	r3, r3
 8007514:	4013      	ands	r3, r2
 8007516:	b29a      	uxth	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800752c:	b084      	sub	sp, #16
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	f107 0014 	add.w	r0, r7, #20
 800753a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff ffb0 	bl	80074c4 <USB_EnableGlobalInt>

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007570:	b004      	add	sp, #16
 8007572:	4770      	bx	lr

08007574 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007574:	b480      	push	{r7}
 8007576:	b09d      	sub	sp, #116	; 0x74
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	b29b      	uxth	r3, r3
 8007592:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	78db      	ldrb	r3, [r3, #3]
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d81f      	bhi.n	80075e6 <USB_ActivateEndpoint+0x72>
 80075a6:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <USB_ActivateEndpoint+0x38>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	080075bd 	.word	0x080075bd
 80075b0:	080075d9 	.word	0x080075d9
 80075b4:	080075ef 	.word	0x080075ef
 80075b8:	080075cb 	.word	0x080075cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80075bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80075c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80075c8:	e012      	b.n	80075f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80075ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80075ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80075d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80075d6:	e00b      	b.n	80075f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80075d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80075dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80075e4:	e004      	b.n	80075f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80075ec:	e000      	b.n	80075f0 <USB_ActivateEndpoint+0x7c>
      break;
 80075ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	441a      	add	r2, r3
 80075fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80075fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800760e:	b29b      	uxth	r3, r3
 8007610:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	b29b      	uxth	r3, r3
 8007620:	b21b      	sxth	r3, r3
 8007622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762a:	b21a      	sxth	r2, r3
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	b21b      	sxth	r3, r3
 8007632:	4313      	orrs	r3, r2
 8007634:	b21b      	sxth	r3, r3
 8007636:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	441a      	add	r2, r3
 8007644:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800764c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007658:	b29b      	uxth	r3, r3
 800765a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	7b1b      	ldrb	r3, [r3, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f040 8149 	bne.w	80078f8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	785b      	ldrb	r3, [r3, #1]
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 8084 	beq.w	8007778 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	61bb      	str	r3, [r7, #24]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800767a:	b29b      	uxth	r3, r3
 800767c:	461a      	mov	r2, r3
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	4413      	add	r3, r2
 8007682:	61bb      	str	r3, [r7, #24]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	00da      	lsls	r2, r3, #3
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	88db      	ldrh	r3, [r3, #6]
 8007698:	085b      	lsrs	r3, r3, #1
 800769a:	b29b      	uxth	r3, r3
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	b29a      	uxth	r2, r3
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	827b      	strh	r3, [r7, #18]
 80076b2:	8a7b      	ldrh	r3, [r7, #18]
 80076b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01b      	beq.n	80076f4 <USB_ActivateEndpoint+0x180>
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	823b      	strh	r3, [r7, #16]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	441a      	add	r2, r3
 80076de:	8a3b      	ldrh	r3, [r7, #16]
 80076e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	78db      	ldrb	r3, [r3, #3]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d020      	beq.n	800773e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800770e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007712:	81bb      	strh	r3, [r7, #12]
 8007714:	89bb      	ldrh	r3, [r7, #12]
 8007716:	f083 0320 	eor.w	r3, r3, #32
 800771a:	81bb      	strh	r3, [r7, #12]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	441a      	add	r2, r3
 8007726:	89bb      	ldrh	r3, [r7, #12]
 8007728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800772c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007738:	b29b      	uxth	r3, r3
 800773a:	8013      	strh	r3, [r2, #0]
 800773c:	e2bf      	b.n	8007cbe <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007754:	81fb      	strh	r3, [r7, #14]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	441a      	add	r2, r3
 8007760:	89fb      	ldrh	r3, [r7, #14]
 8007762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800776e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007772:	b29b      	uxth	r3, r3
 8007774:	8013      	strh	r3, [r2, #0]
 8007776:	e2a2      	b.n	8007cbe <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	633b      	str	r3, [r7, #48]	; 0x30
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007782:	b29b      	uxth	r3, r3
 8007784:	461a      	mov	r2, r3
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	4413      	add	r3, r2
 800778a:	633b      	str	r3, [r7, #48]	; 0x30
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	00da      	lsls	r2, r3, #3
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	4413      	add	r3, r2
 8007796:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	88db      	ldrh	r3, [r3, #6]
 80077a0:	085b      	lsrs	r3, r3, #1
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	4413      	add	r3, r2
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	00da      	lsls	r2, r3, #3
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	4413      	add	r3, r2
 80077ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d112      	bne.n	80077fe <USB_ActivateEndpoint+0x28a>
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	801a      	strh	r2, [r3, #0]
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	801a      	strh	r2, [r3, #0]
 80077fc:	e02f      	b.n	800785e <USB_ActivateEndpoint+0x2ea>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b3e      	cmp	r3, #62	; 0x3e
 8007804:	d813      	bhi.n	800782e <USB_ActivateEndpoint+0x2ba>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	66bb      	str	r3, [r7, #104]	; 0x68
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <USB_ActivateEndpoint+0x2ac>
 800781a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800781c:	3301      	adds	r3, #1
 800781e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007822:	b29b      	uxth	r3, r3
 8007824:	029b      	lsls	r3, r3, #10
 8007826:	b29a      	uxth	r2, r3
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	801a      	strh	r2, [r3, #0]
 800782c:	e017      	b.n	800785e <USB_ActivateEndpoint+0x2ea>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	095b      	lsrs	r3, r3, #5
 8007834:	66bb      	str	r3, [r7, #104]	; 0x68
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	f003 031f 	and.w	r3, r3, #31
 800783e:	2b00      	cmp	r3, #0
 8007840:	d102      	bne.n	8007848 <USB_ActivateEndpoint+0x2d4>
 8007842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007844:	3b01      	subs	r3, #1
 8007846:	66bb      	str	r3, [r7, #104]	; 0x68
 8007848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800784a:	b29b      	uxth	r3, r3
 800784c:	029b      	lsls	r3, r3, #10
 800784e:	b29b      	uxth	r3, r3
 8007850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007858:	b29a      	uxth	r2, r3
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	847b      	strh	r3, [r7, #34]	; 0x22
 800786c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800786e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d01b      	beq.n	80078ae <USB_ActivateEndpoint+0x33a>
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788c:	843b      	strh	r3, [r7, #32]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	441a      	add	r2, r3
 8007898:	8c3b      	ldrh	r3, [r7, #32]
 800789a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800789e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c4:	83fb      	strh	r3, [r7, #30]
 80078c6:	8bfb      	ldrh	r3, [r7, #30]
 80078c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078cc:	83fb      	strh	r3, [r7, #30]
 80078ce:	8bfb      	ldrh	r3, [r7, #30]
 80078d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078d4:	83fb      	strh	r3, [r7, #30]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	441a      	add	r2, r3
 80078e0:	8bfb      	ldrh	r3, [r7, #30]
 80078e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	8013      	strh	r3, [r2, #0]
 80078f6:	e1e2      	b.n	8007cbe <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b29b      	uxth	r3, r3
 8007906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800790a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	441a      	add	r2, r3
 800791c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007928:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800792c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007930:	b29b      	uxth	r3, r3
 8007932:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	663b      	str	r3, [r7, #96]	; 0x60
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800793e:	b29b      	uxth	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007944:	4413      	add	r3, r2
 8007946:	663b      	str	r3, [r7, #96]	; 0x60
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	00da      	lsls	r2, r3, #3
 800794e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007950:	4413      	add	r3, r2
 8007952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007956:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	891b      	ldrh	r3, [r3, #8]
 800795c:	085b      	lsrs	r3, r3, #1
 800795e:	b29b      	uxth	r3, r3
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	b29a      	uxth	r2, r3
 8007964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	65bb      	str	r3, [r7, #88]	; 0x58
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007972:	b29b      	uxth	r3, r3
 8007974:	461a      	mov	r2, r3
 8007976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007978:	4413      	add	r3, r2
 800797a:	65bb      	str	r3, [r7, #88]	; 0x58
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	00da      	lsls	r2, r3, #3
 8007982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007984:	4413      	add	r3, r2
 8007986:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800798a:	657b      	str	r3, [r7, #84]	; 0x54
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	895b      	ldrh	r3, [r3, #10]
 8007990:	085b      	lsrs	r3, r3, #1
 8007992:	b29b      	uxth	r3, r3
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800799a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f040 80b1 	bne.w	8007b08 <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80079b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80079ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d01d      	beq.n	80079fe <USB_ActivateEndpoint+0x48a>
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	441a      	add	r2, r3
 80079e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80079ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007a0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d01b      	beq.n	8007a4e <USB_ActivateEndpoint+0x4da>
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	441a      	add	r2, r3
 8007a38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a64:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	441a      	add	r2, r3
 8007a70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9c:	873b      	strh	r3, [r7, #56]	; 0x38
 8007a9e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007aa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007aa4:	873b      	strh	r3, [r7, #56]	; 0x38
 8007aa6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007aa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007aac:	873b      	strh	r3, [r7, #56]	; 0x38
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	441a      	add	r2, r3
 8007ab8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	441a      	add	r2, r3
 8007af0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	8013      	strh	r3, [r2, #0]
 8007b06:	e0da      	b.n	8007cbe <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8007b18:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01d      	beq.n	8007b60 <USB_ActivateEndpoint+0x5ec>
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	441a      	add	r2, r3
 8007b48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007b70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01d      	beq.n	8007bb8 <USB_ActivateEndpoint+0x644>
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	441a      	add	r2, r3
 8007ba0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	441a      	add	r2, r3
 8007bdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	78db      	ldrb	r3, [r3, #3]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d024      	beq.n	8007c46 <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007c16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007c1a:	f083 0320 	eor.w	r3, r3, #32
 8007c1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	441a      	add	r2, r3
 8007c2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	8013      	strh	r3, [r2, #0]
 8007c44:	e01d      	b.n	8007c82 <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c5c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	441a      	add	r2, r3
 8007c6a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c98:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	441a      	add	r2, r3
 8007ca6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007cbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3774      	adds	r7, #116	; 0x74
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop

08007cd0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b08d      	sub	sp, #52	; 0x34
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	7b1b      	ldrb	r3, [r3, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f040 808e 	bne.w	8007e00 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	785b      	ldrb	r3, [r3, #1]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d044      	beq.n	8007d76 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	81bb      	strh	r3, [r7, #12]
 8007cfa:	89bb      	ldrh	r3, [r7, #12]
 8007cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01b      	beq.n	8007d3c <USB_DeactivateEndpoint+0x6c>
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	881b      	ldrh	r3, [r3, #0]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1a:	817b      	strh	r3, [r7, #10]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	441a      	add	r2, r3
 8007d26:	897b      	ldrh	r3, [r7, #10]
 8007d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d52:	813b      	strh	r3, [r7, #8]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	441a      	add	r2, r3
 8007d5e:	893b      	ldrh	r3, [r7, #8]
 8007d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	8013      	strh	r3, [r2, #0]
 8007d74:	e192      	b.n	800809c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	827b      	strh	r3, [r7, #18]
 8007d84:	8a7b      	ldrh	r3, [r7, #18]
 8007d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d01b      	beq.n	8007dc6 <USB_DeactivateEndpoint+0xf6>
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da4:	823b      	strh	r3, [r7, #16]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	441a      	add	r2, r3
 8007db0:	8a3b      	ldrh	r3, [r7, #16]
 8007db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ddc:	81fb      	strh	r3, [r7, #14]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	441a      	add	r2, r3
 8007de8:	89fb      	ldrh	r3, [r7, #14]
 8007dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	8013      	strh	r3, [r2, #0]
 8007dfe:	e14d      	b.n	800809c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f040 80a5 	bne.w	8007f54 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	843b      	strh	r3, [r7, #32]
 8007e18:	8c3b      	ldrh	r3, [r7, #32]
 8007e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d01b      	beq.n	8007e5a <USB_DeactivateEndpoint+0x18a>
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e38:	83fb      	strh	r3, [r7, #30]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	441a      	add	r2, r3
 8007e44:	8bfb      	ldrh	r3, [r7, #30]
 8007e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	83bb      	strh	r3, [r7, #28]
 8007e68:	8bbb      	ldrh	r3, [r7, #28]
 8007e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d01b      	beq.n	8007eaa <USB_DeactivateEndpoint+0x1da>
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e88:	837b      	strh	r3, [r7, #26]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	441a      	add	r2, r3
 8007e94:	8b7b      	ldrh	r3, [r7, #26]
 8007e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	881b      	ldrh	r3, [r3, #0]
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec0:	833b      	strh	r3, [r7, #24]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	441a      	add	r2, r3
 8007ecc:	8b3b      	ldrh	r3, [r7, #24]
 8007ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef8:	82fb      	strh	r3, [r7, #22]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	441a      	add	r2, r3
 8007f04:	8afb      	ldrh	r3, [r7, #22]
 8007f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f30:	82bb      	strh	r3, [r7, #20]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	441a      	add	r2, r3
 8007f3c:	8abb      	ldrh	r3, [r7, #20]
 8007f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	8013      	strh	r3, [r2, #0]
 8007f52:	e0a3      	b.n	800809c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007f62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01b      	beq.n	8007fa4 <USB_DeactivateEndpoint+0x2d4>
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f82:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	441a      	add	r2, r3
 8007f8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007fb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01b      	beq.n	8007ff4 <USB_DeactivateEndpoint+0x324>
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd2:	853b      	strh	r3, [r7, #40]	; 0x28
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	441a      	add	r2, r3
 8007fde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	b29b      	uxth	r3, r3
 8008002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	441a      	add	r2, r3
 8008016:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800801c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008028:	b29b      	uxth	r3, r3
 800802a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	b29b      	uxth	r3, r3
 800803a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800803e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008042:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	441a      	add	r2, r3
 800804e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800805c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008060:	b29b      	uxth	r3, r3
 8008062:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29b      	uxth	r3, r3
 8008072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807a:	847b      	strh	r3, [r7, #34]	; 0x22
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	441a      	add	r2, r3
 8008086:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800808c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008098:	b29b      	uxth	r3, r3
 800809a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3734      	adds	r7, #52	; 0x34
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b0a0      	sub	sp, #128	; 0x80
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	785b      	ldrb	r3, [r3, #1]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	f040 81a1 	bne.w	8008400 <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d909      	bls.n	80080de <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	699a      	ldr	r2, [r3, #24]
 80080d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080d6:	1ad2      	subs	r2, r2, r3
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	619a      	str	r2, [r3, #24]
 80080dc:	e005      	b.n	80080ea <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2200      	movs	r2, #0
 80080e8:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	7b1b      	ldrb	r3, [r3, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d11f      	bne.n	8008132 <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	6959      	ldr	r1, [r3, #20]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	88da      	ldrh	r2, [r3, #6]
 80080fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fc3f 	bl	8008982 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800810e:	b29b      	uxth	r3, r3
 8008110:	461a      	mov	r2, r3
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	4413      	add	r3, r2
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	00da      	lsls	r2, r3, #3
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	4413      	add	r3, r2
 8008122:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800812a:	b29a      	uxth	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	801a      	strh	r2, [r3, #0]
 8008130:	e141      	b.n	80083b6 <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008144:	2b00      	cmp	r3, #0
 8008146:	d076      	beq.n	8008236 <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	627b      	str	r3, [r7, #36]	; 0x24
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	785b      	ldrb	r3, [r3, #1]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d153      	bne.n	80081fc <USB_EPStartXfer+0x152>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	61fb      	str	r3, [r7, #28]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800815e:	b29b      	uxth	r3, r3
 8008160:	461a      	mov	r2, r3
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	61fb      	str	r3, [r7, #28]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	00da      	lsls	r2, r3, #3
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	4413      	add	r3, r2
 8008172:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008176:	61bb      	str	r3, [r7, #24]
 8008178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800817a:	2b00      	cmp	r3, #0
 800817c:	d112      	bne.n	80081a4 <USB_EPStartXfer+0xfa>
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008188:	b29a      	uxth	r2, r3
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	801a      	strh	r2, [r3, #0]
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	b29b      	uxth	r3, r3
 8008194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800819c:	b29a      	uxth	r2, r3
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	801a      	strh	r2, [r3, #0]
 80081a2:	e043      	b.n	800822c <USB_EPStartXfer+0x182>
 80081a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081a6:	2b3e      	cmp	r3, #62	; 0x3e
 80081a8:	d811      	bhi.n	80081ce <USB_EPStartXfer+0x124>
 80081aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ac:	085b      	lsrs	r3, r3, #1
 80081ae:	677b      	str	r3, [r7, #116]	; 0x74
 80081b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <USB_EPStartXfer+0x116>
 80081ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081bc:	3301      	adds	r3, #1
 80081be:	677b      	str	r3, [r7, #116]	; 0x74
 80081c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	029b      	lsls	r3, r3, #10
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	801a      	strh	r2, [r3, #0]
 80081cc:	e02e      	b.n	800822c <USB_EPStartXfer+0x182>
 80081ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d0:	095b      	lsrs	r3, r3, #5
 80081d2:	677b      	str	r3, [r7, #116]	; 0x74
 80081d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d6:	f003 031f 	and.w	r3, r3, #31
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d102      	bne.n	80081e4 <USB_EPStartXfer+0x13a>
 80081de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081e0:	3b01      	subs	r3, #1
 80081e2:	677b      	str	r3, [r7, #116]	; 0x74
 80081e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	029b      	lsls	r3, r3, #10
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	e017      	b.n	800822c <USB_EPStartXfer+0x182>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d113      	bne.n	800822c <USB_EPStartXfer+0x182>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800820a:	b29b      	uxth	r3, r3
 800820c:	461a      	mov	r2, r3
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	4413      	add	r3, r2
 8008212:	627b      	str	r3, [r7, #36]	; 0x24
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	00da      	lsls	r2, r3, #3
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	4413      	add	r3, r2
 800821e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008222:	623b      	str	r3, [r7, #32]
 8008224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008226:	b29a      	uxth	r2, r3
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	895b      	ldrh	r3, [r3, #10]
 8008230:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8008234:	e075      	b.n	8008322 <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	785b      	ldrb	r3, [r3, #1]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d153      	bne.n	80082e6 <USB_EPStartXfer+0x23c>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008248:	b29b      	uxth	r3, r3
 800824a:	461a      	mov	r2, r3
 800824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824e:	4413      	add	r3, r2
 8008250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	00da      	lsls	r2, r3, #3
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	4413      	add	r3, r2
 800825c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008260:	62bb      	str	r3, [r7, #40]	; 0x28
 8008262:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008264:	2b00      	cmp	r3, #0
 8008266:	d112      	bne.n	800828e <USB_EPStartXfer+0x1e4>
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008272:	b29a      	uxth	r2, r3
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	801a      	strh	r2, [r3, #0]
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	b29b      	uxth	r3, r3
 800827e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008286:	b29a      	uxth	r2, r3
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	801a      	strh	r2, [r3, #0]
 800828c:	e045      	b.n	800831a <USB_EPStartXfer+0x270>
 800828e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008290:	2b3e      	cmp	r3, #62	; 0x3e
 8008292:	d811      	bhi.n	80082b8 <USB_EPStartXfer+0x20e>
 8008294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008296:	085b      	lsrs	r3, r3, #1
 8008298:	673b      	str	r3, [r7, #112]	; 0x70
 800829a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <USB_EPStartXfer+0x200>
 80082a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082a6:	3301      	adds	r3, #1
 80082a8:	673b      	str	r3, [r7, #112]	; 0x70
 80082aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	029b      	lsls	r3, r3, #10
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	801a      	strh	r2, [r3, #0]
 80082b6:	e030      	b.n	800831a <USB_EPStartXfer+0x270>
 80082b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082ba:	095b      	lsrs	r3, r3, #5
 80082bc:	673b      	str	r3, [r7, #112]	; 0x70
 80082be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082c0:	f003 031f 	and.w	r3, r3, #31
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d102      	bne.n	80082ce <USB_EPStartXfer+0x224>
 80082c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ca:	3b01      	subs	r3, #1
 80082cc:	673b      	str	r3, [r7, #112]	; 0x70
 80082ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	029b      	lsls	r3, r3, #10
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082de:	b29a      	uxth	r2, r3
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	801a      	strh	r2, [r3, #0]
 80082e4:	e019      	b.n	800831a <USB_EPStartXfer+0x270>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	785b      	ldrb	r3, [r3, #1]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d115      	bne.n	800831a <USB_EPStartXfer+0x270>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	637b      	str	r3, [r7, #52]	; 0x34
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	461a      	mov	r2, r3
 80082fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fe:	4413      	add	r3, r2
 8008300:	637b      	str	r3, [r7, #52]	; 0x34
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	00da      	lsls	r2, r3, #3
 8008308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830a:	4413      	add	r3, r2
 800830c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008310:	633b      	str	r3, [r7, #48]	; 0x30
 8008312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008314:	b29a      	uxth	r2, r3
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	891b      	ldrh	r3, [r3, #8]
 800831e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	6959      	ldr	r1, [r3, #20]
 8008326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008328:	b29b      	uxth	r3, r3
 800832a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fb27 	bl	8008982 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	785b      	ldrb	r3, [r3, #1]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d11c      	bne.n	8008376 <USB_EPStartXfer+0x2cc>
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	b29b      	uxth	r3, r3
 800834a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800834e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008352:	82bb      	strh	r3, [r7, #20]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	441a      	add	r2, r3
 800835e:	8abb      	ldrh	r3, [r7, #20]
 8008360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800836c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008370:	b29b      	uxth	r3, r3
 8008372:	8013      	strh	r3, [r2, #0]
 8008374:	e01f      	b.n	80083b6 <USB_EPStartXfer+0x30c>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	785b      	ldrb	r3, [r3, #1]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d11b      	bne.n	80083b6 <USB_EPStartXfer+0x30c>
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	881b      	ldrh	r3, [r3, #0]
 800838a:	b29b      	uxth	r3, r3
 800838c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008394:	82fb      	strh	r3, [r7, #22]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	441a      	add	r2, r3
 80083a0:	8afb      	ldrh	r3, [r7, #22]
 80083a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083cc:	817b      	strh	r3, [r7, #10]
 80083ce:	897b      	ldrh	r3, [r7, #10]
 80083d0:	f083 0310 	eor.w	r3, r3, #16
 80083d4:	817b      	strh	r3, [r7, #10]
 80083d6:	897b      	ldrh	r3, [r7, #10]
 80083d8:	f083 0320 	eor.w	r3, r3, #32
 80083dc:	817b      	strh	r3, [r7, #10]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	441a      	add	r2, r3
 80083e8:	897b      	ldrh	r3, [r7, #10]
 80083ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	8013      	strh	r3, [r2, #0]
 80083fe:	e175      	b.n	80086ec <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	699a      	ldr	r2, [r3, #24]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	429a      	cmp	r2, r3
 800840a:	d909      	bls.n	8008420 <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	699a      	ldr	r2, [r3, #24]
 8008416:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008418:	1ad2      	subs	r2, r2, r3
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	619a      	str	r2, [r3, #24]
 800841e:	e005      	b.n	800842c <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	2200      	movs	r2, #0
 800842a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	7b1b      	ldrb	r3, [r3, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d153      	bne.n	80084dc <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	643b      	str	r3, [r7, #64]	; 0x40
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800843e:	b29b      	uxth	r3, r3
 8008440:	461a      	mov	r2, r3
 8008442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008444:	4413      	add	r3, r2
 8008446:	643b      	str	r3, [r7, #64]	; 0x40
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	00da      	lsls	r2, r3, #3
 800844e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008450:	4413      	add	r3, r2
 8008452:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800845a:	2b00      	cmp	r3, #0
 800845c:	d112      	bne.n	8008484 <USB_EPStartXfer+0x3da>
 800845e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29b      	uxth	r3, r3
 8008464:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008468:	b29a      	uxth	r2, r3
 800846a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846c:	801a      	strh	r2, [r3, #0]
 800846e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	b29b      	uxth	r3, r3
 8008474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800847c:	b29a      	uxth	r2, r3
 800847e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008480:	801a      	strh	r2, [r3, #0]
 8008482:	e10f      	b.n	80086a4 <USB_EPStartXfer+0x5fa>
 8008484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008486:	2b3e      	cmp	r3, #62	; 0x3e
 8008488:	d811      	bhi.n	80084ae <USB_EPStartXfer+0x404>
 800848a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800848c:	085b      	lsrs	r3, r3, #1
 800848e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <USB_EPStartXfer+0x3f6>
 800849a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849c:	3301      	adds	r3, #1
 800849e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	029b      	lsls	r3, r3, #10
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084aa:	801a      	strh	r2, [r3, #0]
 80084ac:	e0fa      	b.n	80086a4 <USB_EPStartXfer+0x5fa>
 80084ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084b0:	095b      	lsrs	r3, r3, #5
 80084b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084b6:	f003 031f 	and.w	r3, r3, #31
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d102      	bne.n	80084c4 <USB_EPStartXfer+0x41a>
 80084be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084c0:	3b01      	subs	r3, #1
 80084c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	029b      	lsls	r3, r3, #10
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	e0e3      	b.n	80086a4 <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d153      	bne.n	800858c <USB_EPStartXfer+0x4e2>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	461a      	mov	r2, r3
 80084f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084f4:	4413      	add	r3, r2
 80084f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	00da      	lsls	r2, r3, #3
 80084fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008500:	4413      	add	r3, r2
 8008502:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008506:	657b      	str	r3, [r7, #84]	; 0x54
 8008508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800850a:	2b00      	cmp	r3, #0
 800850c:	d112      	bne.n	8008534 <USB_EPStartXfer+0x48a>
 800850e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008518:	b29a      	uxth	r2, r3
 800851a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800851c:	801a      	strh	r2, [r3, #0]
 800851e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	b29b      	uxth	r3, r3
 8008524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800852c:	b29a      	uxth	r2, r3
 800852e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008530:	801a      	strh	r2, [r3, #0]
 8008532:	e045      	b.n	80085c0 <USB_EPStartXfer+0x516>
 8008534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008536:	2b3e      	cmp	r3, #62	; 0x3e
 8008538:	d811      	bhi.n	800855e <USB_EPStartXfer+0x4b4>
 800853a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800853c:	085b      	lsrs	r3, r3, #1
 800853e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <USB_EPStartXfer+0x4a6>
 800854a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800854c:	3301      	adds	r3, #1
 800854e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008550:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008552:	b29b      	uxth	r3, r3
 8008554:	029b      	lsls	r3, r3, #10
 8008556:	b29a      	uxth	r2, r3
 8008558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	e030      	b.n	80085c0 <USB_EPStartXfer+0x516>
 800855e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008560:	095b      	lsrs	r3, r3, #5
 8008562:	66bb      	str	r3, [r7, #104]	; 0x68
 8008564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008566:	f003 031f 	and.w	r3, r3, #31
 800856a:	2b00      	cmp	r3, #0
 800856c:	d102      	bne.n	8008574 <USB_EPStartXfer+0x4ca>
 800856e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008570:	3b01      	subs	r3, #1
 8008572:	66bb      	str	r3, [r7, #104]	; 0x68
 8008574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008576:	b29b      	uxth	r3, r3
 8008578:	029b      	lsls	r3, r3, #10
 800857a:	b29b      	uxth	r3, r3
 800857c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008584:	b29a      	uxth	r2, r3
 8008586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008588:	801a      	strh	r2, [r3, #0]
 800858a:	e019      	b.n	80085c0 <USB_EPStartXfer+0x516>
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	785b      	ldrb	r3, [r3, #1]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d115      	bne.n	80085c0 <USB_EPStartXfer+0x516>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	663b      	str	r3, [r7, #96]	; 0x60
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800859e:	b29b      	uxth	r3, r3
 80085a0:	461a      	mov	r2, r3
 80085a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085a4:	4413      	add	r3, r2
 80085a6:	663b      	str	r3, [r7, #96]	; 0x60
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	00da      	lsls	r2, r3, #3
 80085ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085b0:	4413      	add	r3, r2
 80085b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085be:	801a      	strh	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	653b      	str	r3, [r7, #80]	; 0x50
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d153      	bne.n	8008674 <USB_EPStartXfer+0x5ca>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	461a      	mov	r2, r3
 80085da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085dc:	4413      	add	r3, r2
 80085de:	64bb      	str	r3, [r7, #72]	; 0x48
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	00da      	lsls	r2, r3, #3
 80085e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085e8:	4413      	add	r3, r2
 80085ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085ee:	647b      	str	r3, [r7, #68]	; 0x44
 80085f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d112      	bne.n	800861c <USB_EPStartXfer+0x572>
 80085f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008600:	b29a      	uxth	r2, r3
 8008602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008604:	801a      	strh	r2, [r3, #0]
 8008606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	b29b      	uxth	r3, r3
 800860c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008614:	b29a      	uxth	r2, r3
 8008616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008618:	801a      	strh	r2, [r3, #0]
 800861a:	e043      	b.n	80086a4 <USB_EPStartXfer+0x5fa>
 800861c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800861e:	2b3e      	cmp	r3, #62	; 0x3e
 8008620:	d811      	bhi.n	8008646 <USB_EPStartXfer+0x59c>
 8008622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008624:	085b      	lsrs	r3, r3, #1
 8008626:	667b      	str	r3, [r7, #100]	; 0x64
 8008628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d002      	beq.n	8008638 <USB_EPStartXfer+0x58e>
 8008632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008634:	3301      	adds	r3, #1
 8008636:	667b      	str	r3, [r7, #100]	; 0x64
 8008638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800863a:	b29b      	uxth	r3, r3
 800863c:	029b      	lsls	r3, r3, #10
 800863e:	b29a      	uxth	r2, r3
 8008640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008642:	801a      	strh	r2, [r3, #0]
 8008644:	e02e      	b.n	80086a4 <USB_EPStartXfer+0x5fa>
 8008646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008648:	095b      	lsrs	r3, r3, #5
 800864a:	667b      	str	r3, [r7, #100]	; 0x64
 800864c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800864e:	f003 031f 	and.w	r3, r3, #31
 8008652:	2b00      	cmp	r3, #0
 8008654:	d102      	bne.n	800865c <USB_EPStartXfer+0x5b2>
 8008656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008658:	3b01      	subs	r3, #1
 800865a:	667b      	str	r3, [r7, #100]	; 0x64
 800865c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800865e:	b29b      	uxth	r3, r3
 8008660:	029b      	lsls	r3, r3, #10
 8008662:	b29b      	uxth	r3, r3
 8008664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800866c:	b29a      	uxth	r2, r3
 800866e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008670:	801a      	strh	r2, [r3, #0]
 8008672:	e017      	b.n	80086a4 <USB_EPStartXfer+0x5fa>
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	785b      	ldrb	r3, [r3, #1]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d113      	bne.n	80086a4 <USB_EPStartXfer+0x5fa>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008682:	b29b      	uxth	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008688:	4413      	add	r3, r2
 800868a:	653b      	str	r3, [r7, #80]	; 0x50
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	00da      	lsls	r2, r3, #3
 8008692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008694:	4413      	add	r3, r2
 8008696:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800869a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800869c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800869e:	b29a      	uxth	r2, r3
 80086a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ba:	877b      	strh	r3, [r7, #58]	; 0x3a
 80086bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80086be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086c2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80086c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80086c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086ca:	877b      	strh	r3, [r7, #58]	; 0x3a
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	441a      	add	r2, r3
 80086d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80086d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3780      	adds	r7, #128	; 0x80
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b085      	sub	sp, #20
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	785b      	ldrb	r3, [r3, #1]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d020      	beq.n	800874a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	b29b      	uxth	r3, r3
 8008716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800871e:	81bb      	strh	r3, [r7, #12]
 8008720:	89bb      	ldrh	r3, [r7, #12]
 8008722:	f083 0310 	eor.w	r3, r3, #16
 8008726:	81bb      	strh	r3, [r7, #12]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	441a      	add	r2, r3
 8008732:	89bb      	ldrh	r3, [r7, #12]
 8008734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800873c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008744:	b29b      	uxth	r3, r3
 8008746:	8013      	strh	r3, [r2, #0]
 8008748:	e01f      	b.n	800878a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	b29b      	uxth	r3, r3
 8008758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800875c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008760:	81fb      	strh	r3, [r7, #14]
 8008762:	89fb      	ldrh	r3, [r7, #14]
 8008764:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008768:	81fb      	strh	r3, [r7, #14]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	441a      	add	r2, r3
 8008774:	89fb      	ldrh	r3, [r7, #14]
 8008776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800877e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008786:	b29b      	uxth	r3, r3
 8008788:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	7b1b      	ldrb	r3, [r3, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f040 809d 	bne.w	80088e6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	785b      	ldrb	r3, [r3, #1]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d04c      	beq.n	800884e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	823b      	strh	r3, [r7, #16]
 80087c2:	8a3b      	ldrh	r3, [r7, #16]
 80087c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01b      	beq.n	8008804 <USB_EPClearStall+0x6c>
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	b29b      	uxth	r3, r3
 80087da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e2:	81fb      	strh	r3, [r7, #14]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	441a      	add	r2, r3
 80087ee:	89fb      	ldrh	r3, [r7, #14]
 80087f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008800:	b29b      	uxth	r3, r3
 8008802:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	78db      	ldrb	r3, [r3, #3]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d06c      	beq.n	80088e6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	b29b      	uxth	r3, r3
 800881a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800881e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008822:	81bb      	strh	r3, [r7, #12]
 8008824:	89bb      	ldrh	r3, [r7, #12]
 8008826:	f083 0320 	eor.w	r3, r3, #32
 800882a:	81bb      	strh	r3, [r7, #12]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	441a      	add	r2, r3
 8008836:	89bb      	ldrh	r3, [r7, #12]
 8008838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800883c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008848:	b29b      	uxth	r3, r3
 800884a:	8013      	strh	r3, [r2, #0]
 800884c:	e04b      	b.n	80088e6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	82fb      	strh	r3, [r7, #22]
 800885c:	8afb      	ldrh	r3, [r7, #22]
 800885e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d01b      	beq.n	800889e <USB_EPClearStall+0x106>
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	b29b      	uxth	r3, r3
 8008874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887c:	82bb      	strh	r3, [r7, #20]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	441a      	add	r2, r3
 8008888:	8abb      	ldrh	r3, [r7, #20]
 800888a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800888e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008892:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889a:	b29b      	uxth	r3, r3
 800889c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b4:	827b      	strh	r3, [r7, #18]
 80088b6:	8a7b      	ldrh	r3, [r7, #18]
 80088b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088bc:	827b      	strh	r3, [r7, #18]
 80088be:	8a7b      	ldrh	r3, [r7, #18]
 80088c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088c4:	827b      	strh	r3, [r7, #18]
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	441a      	add	r2, r3
 80088d0:	8a7b      	ldrh	r3, [r7, #18]
 80088d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	371c      	adds	r7, #28
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d103      	bne.n	800890e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2280      	movs	r2, #128	; 0x80
 800890a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800892a:	b29b      	uxth	r3, r3
 800892c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008934:	b29a      	uxth	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800894a:	b480      	push	{r7}
 800894c:	b085      	sub	sp, #20
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008958:	b29b      	uxth	r3, r3
 800895a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800895c:	68fb      	ldr	r3, [r7, #12]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008982:	b480      	push	{r7}
 8008984:	b08d      	sub	sp, #52	; 0x34
 8008986:	af00      	add	r7, sp, #0
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	4611      	mov	r1, r2
 800898e:	461a      	mov	r2, r3
 8008990:	460b      	mov	r3, r1
 8008992:	80fb      	strh	r3, [r7, #6]
 8008994:	4613      	mov	r3, r2
 8008996:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008998:	88bb      	ldrh	r3, [r7, #4]
 800899a:	3301      	adds	r3, #1
 800899c:	085b      	lsrs	r3, r3, #1
 800899e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089a8:	88fa      	ldrh	r2, [r7, #6]
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089b2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089b8:	e01b      	b.n	80089f2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	3301      	adds	r3, #1
 80089c4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	021b      	lsls	r3, r3, #8
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	461a      	mov	r2, r3
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	b29a      	uxth	r2, r3
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	3302      	adds	r3, #2
 80089e4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	3301      	adds	r3, #1
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80089ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ee:	3b01      	subs	r3, #1
 80089f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1e0      	bne.n	80089ba <USB_WritePMA+0x38>
  }
}
 80089f8:	bf00      	nop
 80089fa:	3734      	adds	r7, #52	; 0x34
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b08b      	sub	sp, #44	; 0x2c
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	4611      	mov	r1, r2
 8008a10:	461a      	mov	r2, r3
 8008a12:	460b      	mov	r3, r1
 8008a14:	80fb      	strh	r3, [r7, #6]
 8008a16:	4613      	mov	r3, r2
 8008a18:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008a1a:	88bb      	ldrh	r3, [r7, #4]
 8008a1c:	085b      	lsrs	r3, r3, #1
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a2a:	88fa      	ldrh	r2, [r7, #6]
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a34:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
 8008a3a:	e018      	b.n	8008a6e <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	3302      	adds	r3, #2
 8008a48:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	3301      	adds	r3, #1
 8008a56:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	0a1b      	lsrs	r3, r3, #8
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	3301      	adds	r3, #1
 8008a66:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1e3      	bne.n	8008a3c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008a74:	88bb      	ldrh	r3, [r7, #4]
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d007      	beq.n	8008a90 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	701a      	strb	r2, [r3, #0]
  }
}
 8008a90:	bf00      	nop
 8008a92:	372c      	adds	r7, #44	; 0x2c
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008aa8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008aac:	f005 fcee 	bl	800e48c <USBD_static_malloc>
 8008ab0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d105      	bne.n	8008ac4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e066      	b.n	8008b92 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	7c1b      	ldrb	r3, [r3, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d119      	bne.n	8008b08 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ad8:	2202      	movs	r2, #2
 8008ada:	2181      	movs	r1, #129	; 0x81
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f005 fb82 	bl	800e1e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aec:	2202      	movs	r2, #2
 8008aee:	2101      	movs	r1, #1
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f005 fb78 	bl	800e1e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2210      	movs	r2, #16
 8008b02:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008b06:	e016      	b.n	8008b36 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b08:	2340      	movs	r3, #64	; 0x40
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	2181      	movs	r1, #129	; 0x81
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f005 fb69 	bl	800e1e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b1a:	2340      	movs	r3, #64	; 0x40
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	2101      	movs	r1, #1
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f005 fb60 	bl	800e1e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2210      	movs	r2, #16
 8008b32:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b36:	2308      	movs	r3, #8
 8008b38:	2203      	movs	r2, #3
 8008b3a:	2182      	movs	r1, #130	; 0x82
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f005 fb52 	bl	800e1e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	7c1b      	ldrb	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d109      	bne.n	8008b80 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b76:	2101      	movs	r1, #1
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f005 fc1d 	bl	800e3b8 <USBD_LL_PrepareReceive>
 8008b7e:	e007      	b.n	8008b90 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b86:	2340      	movs	r3, #64	; 0x40
 8008b88:	2101      	movs	r1, #1
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f005 fc14 	bl	800e3b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ba6:	2181      	movs	r1, #129	; 0x81
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f005 fb42 	bl	800e232 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f005 fb3b 	bl	800e232 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008bc4:	2182      	movs	r1, #130	; 0x82
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f005 fb33 	bl	800e232 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00e      	beq.n	8008c04 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f005 fc56 	bl	800e4a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e0af      	b.n	8008d98 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d03f      	beq.n	8008cc4 <USBD_CDC_Setup+0xb4>
 8008c44:	2b20      	cmp	r3, #32
 8008c46:	f040 809f 	bne.w	8008d88 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	88db      	ldrh	r3, [r3, #6]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d02e      	beq.n	8008cb0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	b25b      	sxtb	r3, r3
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	da16      	bge.n	8008c8a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008c68:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	88d2      	ldrh	r2, [r2, #6]
 8008c6e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	88db      	ldrh	r3, [r3, #6]
 8008c74:	2b07      	cmp	r3, #7
 8008c76:	bf28      	it	cs
 8008c78:	2307      	movcs	r3, #7
 8008c7a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	89fa      	ldrh	r2, [r7, #14]
 8008c80:	4619      	mov	r1, r3
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f001 fa8e 	bl	800a1a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008c88:	e085      	b.n	8008d96 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	785a      	ldrb	r2, [r3, #1]
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	88db      	ldrh	r3, [r3, #6]
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008ca0:	6939      	ldr	r1, [r7, #16]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	88db      	ldrh	r3, [r3, #6]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f001 faa7 	bl	800a1fc <USBD_CtlPrepareRx>
      break;
 8008cae:	e072      	b.n	8008d96 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	7850      	ldrb	r0, [r2, #1]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	4798      	blx	r3
      break;
 8008cc2:	e068      	b.n	8008d96 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	785b      	ldrb	r3, [r3, #1]
 8008cc8:	2b0b      	cmp	r3, #11
 8008cca:	d852      	bhi.n	8008d72 <USBD_CDC_Setup+0x162>
 8008ccc:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <USBD_CDC_Setup+0xc4>)
 8008cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd2:	bf00      	nop
 8008cd4:	08008d05 	.word	0x08008d05
 8008cd8:	08008d81 	.word	0x08008d81
 8008cdc:	08008d73 	.word	0x08008d73
 8008ce0:	08008d73 	.word	0x08008d73
 8008ce4:	08008d73 	.word	0x08008d73
 8008ce8:	08008d73 	.word	0x08008d73
 8008cec:	08008d73 	.word	0x08008d73
 8008cf0:	08008d73 	.word	0x08008d73
 8008cf4:	08008d73 	.word	0x08008d73
 8008cf8:	08008d73 	.word	0x08008d73
 8008cfc:	08008d2f 	.word	0x08008d2f
 8008d00:	08008d59 	.word	0x08008d59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d107      	bne.n	8008d20 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d10:	f107 030a 	add.w	r3, r7, #10
 8008d14:	2202      	movs	r2, #2
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f001 fa43 	bl	800a1a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d1e:	e032      	b.n	8008d86 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f001 f9cd 	bl	800a0c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	75fb      	strb	r3, [r7, #23]
          break;
 8008d2c:	e02b      	b.n	8008d86 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d107      	bne.n	8008d4a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d3a:	f107 030d 	add.w	r3, r7, #13
 8008d3e:	2201      	movs	r2, #1
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 fa2e 	bl	800a1a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d48:	e01d      	b.n	8008d86 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 f9b8 	bl	800a0c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d52:	2303      	movs	r3, #3
 8008d54:	75fb      	strb	r3, [r7, #23]
          break;
 8008d56:	e016      	b.n	8008d86 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d00f      	beq.n	8008d84 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 f9ab 	bl	800a0c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d70:	e008      	b.n	8008d84 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 f9a4 	bl	800a0c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d7e:	e002      	b.n	8008d86 <USBD_CDC_Setup+0x176>
          break;
 8008d80:	bf00      	nop
 8008d82:	e008      	b.n	8008d96 <USBD_CDC_Setup+0x186>
          break;
 8008d84:	bf00      	nop
      }
      break;
 8008d86:	e006      	b.n	8008d96 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f001 f999 	bl	800a0c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d90:	2303      	movs	r3, #3
 8008d92:	75fb      	strb	r3, [r7, #23]
      break;
 8008d94:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3718      	adds	r7, #24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008db2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e04c      	b.n	8008e5c <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dc8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008dca:	78fa      	ldrb	r2, [r7, #3]
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	440b      	add	r3, r1
 8008dd8:	3318      	adds	r3, #24
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d026      	beq.n	8008e2e <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008de0:	78fa      	ldrb	r2, [r7, #3]
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	440b      	add	r3, r1
 8008dee:	3318      	adds	r3, #24
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	78fa      	ldrb	r2, [r7, #3]
 8008df4:	68f9      	ldr	r1, [r7, #12]
 8008df6:	0152      	lsls	r2, r2, #5
 8008df8:	440a      	add	r2, r1
 8008dfa:	3238      	adds	r2, #56	; 0x38
 8008dfc:	6812      	ldr	r2, [r2, #0]
 8008dfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e02:	fb02 f201 	mul.w	r2, r2, r1
 8008e06:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d110      	bne.n	8008e2e <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008e0c:	78fa      	ldrb	r2, [r7, #3]
 8008e0e:	6879      	ldr	r1, [r7, #4]
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	440b      	add	r3, r1
 8008e1a:	3318      	adds	r3, #24
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e20:	78f9      	ldrb	r1, [r7, #3]
 8008e22:	2300      	movs	r3, #0
 8008e24:	2200      	movs	r2, #0
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f005 faa5 	bl	800e376 <USBD_LL_Transmit>
 8008e2c:	e015      	b.n	8008e5a <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008e56:	78fa      	ldrb	r2, [r7, #3]
 8008e58:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e015      	b.n	8008eb2 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f005 fab5 	bl	800e3fa <USBD_LL_GetRxDataSize>
 8008e90:	4602      	mov	r2, r0
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008eac:	4611      	mov	r1, r2
 8008eae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ec8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e01b      	b.n	8008f0c <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d015      	beq.n	8008f0a <USBD_CDC_EP0_RxReady+0x50>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ee4:	2bff      	cmp	r3, #255	; 0xff
 8008ee6:	d010      	beq.n	8008f0a <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008ef6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008efe:	b292      	uxth	r2, r2
 8008f00:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	22ff      	movs	r2, #255	; 0xff
 8008f06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2243      	movs	r2, #67	; 0x43
 8008f20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008f22:	4b03      	ldr	r3, [pc, #12]	; (8008f30 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	20000098 	.word	0x20000098

08008f34 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2243      	movs	r2, #67	; 0x43
 8008f40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008f42:	4b03      	ldr	r3, [pc, #12]	; (8008f50 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	20000054 	.word	0x20000054

08008f54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2243      	movs	r2, #67	; 0x43
 8008f60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008f62:	4b03      	ldr	r3, [pc, #12]	; (8008f70 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	200000dc 	.word	0x200000dc

08008f74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	220a      	movs	r2, #10
 8008f80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008f82:	4b03      	ldr	r3, [pc, #12]	; (8008f90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	20000010 	.word	0x20000010

08008f94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e004      	b.n	8008fb2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b087      	sub	sp, #28
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fd0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e008      	b.n	8008fee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b085      	sub	sp, #20
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800900a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d101      	bne.n	8009016 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009012:	2303      	movs	r3, #3
 8009014:	e004      	b.n	8009020 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800903a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009046:	2303      	movs	r3, #3
 8009048:	e016      	b.n	8009078 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	7c1b      	ldrb	r3, [r3, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800905c:	2101      	movs	r1, #1
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f005 f9aa 	bl	800e3b8 <USBD_LL_PrepareReceive>
 8009064:	e007      	b.n	8009076 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800906c:	2340      	movs	r3, #64	; 0x40
 800906e:	2101      	movs	r1, #1
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f005 f9a1 	bl	800e3b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	4613      	mov	r3, r2
 800908c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009094:	2303      	movs	r3, #3
 8009096:	e01f      	b.n	80090d8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d003      	beq.n	80090be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	79fa      	ldrb	r2, [r7, #7]
 80090ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f005 f80d 	bl	800e0ec <USBD_LL_Init>
 80090d2:	4603      	mov	r3, r0
 80090d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090ea:	2300      	movs	r3, #0
 80090ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e016      	b.n	8009126 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00b      	beq.n	8009124 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	f107 020e 	add.w	r2, r7, #14
 8009118:	4610      	mov	r0, r2
 800911a:	4798      	blx	r3
 800911c:	4602      	mov	r2, r0
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b082      	sub	sp, #8
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f005 f83a 	bl	800e1b0 <USBD_LL_Start>
 800913c:	4603      	mov	r3, r0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009168:	2303      	movs	r3, #3
 800916a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d009      	beq.n	800918a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	78fa      	ldrb	r2, [r7, #3]
 8009180:	4611      	mov	r1, r2
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	4798      	blx	r3
 8009186:	4603      	mov	r3, r0
 8009188:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800918a:	7bfb      	ldrb	r3, [r7, #15]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d007      	beq.n	80091ba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	78fa      	ldrb	r2, [r7, #3]
 80091b4:	4611      	mov	r1, r2
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	4798      	blx	r3
  }

  return USBD_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 ff39 	bl	800a04e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80091ea:	461a      	mov	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091f8:	f003 031f 	and.w	r3, r3, #31
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d00e      	beq.n	800921e <USBD_LL_SetupStage+0x5a>
 8009200:	2b01      	cmp	r3, #1
 8009202:	d302      	bcc.n	800920a <USBD_LL_SetupStage+0x46>
 8009204:	2b02      	cmp	r3, #2
 8009206:	d014      	beq.n	8009232 <USBD_LL_SetupStage+0x6e>
 8009208:	e01d      	b.n	8009246 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f9ee 	bl	80095f4 <USBD_StdDevReq>
 8009218:	4603      	mov	r3, r0
 800921a:	73fb      	strb	r3, [r7, #15]
      break;
 800921c:	e020      	b.n	8009260 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fa52 	bl	80096d0 <USBD_StdItfReq>
 800922c:	4603      	mov	r3, r0
 800922e:	73fb      	strb	r3, [r7, #15]
      break;
 8009230:	e016      	b.n	8009260 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009238:	4619      	mov	r1, r3
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fa8f 	bl	800975e <USBD_StdEPReq>
 8009240:	4603      	mov	r3, r0
 8009242:	73fb      	strb	r3, [r7, #15]
      break;
 8009244:	e00c      	b.n	8009260 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800924c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009250:	b2db      	uxtb	r3, r3
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f005 f80b 	bl	800e270 <USBD_LL_StallEP>
 800925a:	4603      	mov	r3, r0
 800925c:	73fb      	strb	r3, [r7, #15]
      break;
 800925e:	bf00      	nop
  }

  return ret;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b086      	sub	sp, #24
 800926e:	af00      	add	r7, sp, #0
 8009270:	60f8      	str	r0, [r7, #12]
 8009272:	460b      	mov	r3, r1
 8009274:	607a      	str	r2, [r7, #4]
 8009276:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009278:	7afb      	ldrb	r3, [r7, #11]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d138      	bne.n	80092f0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009284:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800928c:	2b03      	cmp	r3, #3
 800928e:	d14a      	bne.n	8009326 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	689a      	ldr	r2, [r3, #8]
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	429a      	cmp	r2, r3
 800929a:	d913      	bls.n	80092c4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	689a      	ldr	r2, [r3, #8]
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	1ad2      	subs	r2, r2, r3
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	68da      	ldr	r2, [r3, #12]
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	4293      	cmp	r3, r2
 80092b4:	bf28      	it	cs
 80092b6:	4613      	movcs	r3, r2
 80092b8:	461a      	mov	r2, r3
 80092ba:	6879      	ldr	r1, [r7, #4]
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 ffba 	bl	800a236 <USBD_CtlContinueRx>
 80092c2:	e030      	b.n	8009326 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b03      	cmp	r3, #3
 80092ce:	d10b      	bne.n	80092e8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d005      	beq.n	80092e8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 ffb5 	bl	800a258 <USBD_CtlSendStatus>
 80092ee:	e01a      	b.n	8009326 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d114      	bne.n	8009326 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00e      	beq.n	8009326 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	7afa      	ldrb	r2, [r7, #11]
 8009312:	4611      	mov	r1, r2
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	4798      	blx	r3
 8009318:	4603      	mov	r3, r0
 800931a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800931c:	7dfb      	ldrb	r3, [r7, #23]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009322:	7dfb      	ldrb	r3, [r7, #23]
 8009324:	e000      	b.n	8009328 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3718      	adds	r7, #24
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	460b      	mov	r3, r1
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800933e:	7afb      	ldrb	r3, [r7, #11]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d16b      	bne.n	800941c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3314      	adds	r3, #20
 8009348:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009350:	2b02      	cmp	r3, #2
 8009352:	d156      	bne.n	8009402 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	429a      	cmp	r2, r3
 800935e:	d914      	bls.n	800938a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	1ad2      	subs	r2, r2, r3
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	461a      	mov	r2, r3
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 ff2f 	bl	800a1da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800937c:	2300      	movs	r3, #0
 800937e:	2200      	movs	r2, #0
 8009380:	2100      	movs	r1, #0
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f005 f818 	bl	800e3b8 <USBD_LL_PrepareReceive>
 8009388:	e03b      	b.n	8009402 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	429a      	cmp	r2, r3
 8009394:	d11c      	bne.n	80093d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800939e:	429a      	cmp	r2, r3
 80093a0:	d316      	bcc.n	80093d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d20f      	bcs.n	80093d0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80093b0:	2200      	movs	r2, #0
 80093b2:	2100      	movs	r1, #0
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 ff10 	bl	800a1da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093c2:	2300      	movs	r3, #0
 80093c4:	2200      	movs	r2, #0
 80093c6:	2100      	movs	r1, #0
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f004 fff5 	bl	800e3b8 <USBD_LL_PrepareReceive>
 80093ce:	e018      	b.n	8009402 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d10b      	bne.n	80093f4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80093f4:	2180      	movs	r1, #128	; 0x80
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f004 ff3a 	bl	800e270 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 ff3e 	bl	800a27e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009408:	2b01      	cmp	r3, #1
 800940a:	d122      	bne.n	8009452 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f7ff fe9a 	bl	8009146 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800941a:	e01a      	b.n	8009452 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b03      	cmp	r3, #3
 8009426:	d114      	bne.n	8009452 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00e      	beq.n	8009452 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	7afa      	ldrb	r2, [r7, #11]
 800943e:	4611      	mov	r1, r2
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	4798      	blx	r3
 8009444:	4603      	mov	r3, r0
 8009446:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009448:	7dfb      	ldrb	r3, [r7, #23]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800944e:	7dfb      	ldrb	r3, [r7, #23]
 8009450:	e000      	b.n	8009454 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009488:	2b00      	cmp	r3, #0
 800948a:	d101      	bne.n	8009490 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800948c:	2303      	movs	r3, #3
 800948e:	e02f      	b.n	80094f0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00f      	beq.n	80094ba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d009      	beq.n	80094ba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	6852      	ldr	r2, [r2, #4]
 80094b2:	b2d2      	uxtb	r2, r2
 80094b4:	4611      	mov	r1, r2
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094ba:	2340      	movs	r3, #64	; 0x40
 80094bc:	2200      	movs	r2, #0
 80094be:	2100      	movs	r1, #0
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f004 fe90 	bl	800e1e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2240      	movs	r2, #64	; 0x40
 80094d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094d6:	2340      	movs	r3, #64	; 0x40
 80094d8:	2200      	movs	r2, #0
 80094da:	2180      	movs	r1, #128	; 0x80
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f004 fe82 	bl	800e1e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2240      	movs	r2, #64	; 0x40
 80094ec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	78fa      	ldrb	r2, [r7, #3]
 8009508:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009526:	b2da      	uxtb	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2204      	movs	r2, #4
 8009532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b04      	cmp	r3, #4
 8009556:	d106      	bne.n	8009566 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800955e:	b2da      	uxtb	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009586:	2303      	movs	r3, #3
 8009588:	e012      	b.n	80095b0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b03      	cmp	r3, #3
 8009594:	d10b      	bne.n	80095ae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d005      	beq.n	80095ae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	3301      	adds	r3, #1
 80095ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80095d6:	8a3b      	ldrh	r3, [r7, #16]
 80095d8:	021b      	lsls	r3, r3, #8
 80095da:	b21a      	sxth	r2, r3
 80095dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	b21b      	sxth	r3, r3
 80095e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80095e6:	89fb      	ldrh	r3, [r7, #14]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	371c      	adds	r7, #28
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800960a:	2b20      	cmp	r3, #32
 800960c:	d004      	beq.n	8009618 <USBD_StdDevReq+0x24>
 800960e:	2b40      	cmp	r3, #64	; 0x40
 8009610:	d002      	beq.n	8009618 <USBD_StdDevReq+0x24>
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00a      	beq.n	800962c <USBD_StdDevReq+0x38>
 8009616:	e050      	b.n	80096ba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	4798      	blx	r3
 8009626:	4603      	mov	r3, r0
 8009628:	73fb      	strb	r3, [r7, #15]
      break;
 800962a:	e04b      	b.n	80096c4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	785b      	ldrb	r3, [r3, #1]
 8009630:	2b09      	cmp	r3, #9
 8009632:	d83c      	bhi.n	80096ae <USBD_StdDevReq+0xba>
 8009634:	a201      	add	r2, pc, #4	; (adr r2, 800963c <USBD_StdDevReq+0x48>)
 8009636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963a:	bf00      	nop
 800963c:	08009691 	.word	0x08009691
 8009640:	080096a5 	.word	0x080096a5
 8009644:	080096af 	.word	0x080096af
 8009648:	0800969b 	.word	0x0800969b
 800964c:	080096af 	.word	0x080096af
 8009650:	0800966f 	.word	0x0800966f
 8009654:	08009665 	.word	0x08009665
 8009658:	080096af 	.word	0x080096af
 800965c:	08009687 	.word	0x08009687
 8009660:	08009679 	.word	0x08009679
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f9d4 	bl	8009a14 <USBD_GetDescriptor>
          break;
 800966c:	e024      	b.n	80096b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fb63 	bl	8009d3c <USBD_SetAddress>
          break;
 8009676:	e01f      	b.n	80096b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fba2 	bl	8009dc4 <USBD_SetConfig>
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]
          break;
 8009684:	e018      	b.n	80096b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fc41 	bl	8009f10 <USBD_GetConfig>
          break;
 800968e:	e013      	b.n	80096b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fc71 	bl	8009f7a <USBD_GetStatus>
          break;
 8009698:	e00e      	b.n	80096b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fca0 	bl	8009fe2 <USBD_SetFeature>
          break;
 80096a2:	e009      	b.n	80096b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fcaf 	bl	800a00a <USBD_ClrFeature>
          break;
 80096ac:	e004      	b.n	80096b8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fd06 	bl	800a0c2 <USBD_CtlError>
          break;
 80096b6:	bf00      	nop
      }
      break;
 80096b8:	e004      	b.n	80096c4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fd00 	bl	800a0c2 <USBD_CtlError>
      break;
 80096c2:	bf00      	nop
  }

  return ret;
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop

080096d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	d003      	beq.n	80096f2 <USBD_StdItfReq+0x22>
 80096ea:	2b40      	cmp	r3, #64	; 0x40
 80096ec:	d001      	beq.n	80096f2 <USBD_StdItfReq+0x22>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d12b      	bne.n	800974a <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	3b01      	subs	r3, #1
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d81d      	bhi.n	800973c <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	889b      	ldrh	r3, [r3, #4]
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b01      	cmp	r3, #1
 8009708:	d813      	bhi.n	8009732 <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	4798      	blx	r3
 8009718:	4603      	mov	r3, r0
 800971a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	88db      	ldrh	r3, [r3, #6]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d110      	bne.n	8009746 <USBD_StdItfReq+0x76>
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10d      	bne.n	8009746 <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fd94 	bl	800a258 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009730:	e009      	b.n	8009746 <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fcc4 	bl	800a0c2 <USBD_CtlError>
          break;
 800973a:	e004      	b.n	8009746 <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fcbf 	bl	800a0c2 <USBD_CtlError>
          break;
 8009744:	e000      	b.n	8009748 <USBD_StdItfReq+0x78>
          break;
 8009746:	bf00      	nop
      }
      break;
 8009748:	e004      	b.n	8009754 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fcb8 	bl	800a0c2 <USBD_CtlError>
      break;
 8009752:	bf00      	nop
  }

  return ret;
 8009754:	7bfb      	ldrb	r3, [r7, #15]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	889b      	ldrh	r3, [r3, #4]
 8009770:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800977a:	2b20      	cmp	r3, #32
 800977c:	d004      	beq.n	8009788 <USBD_StdEPReq+0x2a>
 800977e:	2b40      	cmp	r3, #64	; 0x40
 8009780:	d002      	beq.n	8009788 <USBD_StdEPReq+0x2a>
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <USBD_StdEPReq+0x3e>
 8009786:	e13a      	b.n	80099fe <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	4798      	blx	r3
 8009796:	4603      	mov	r3, r0
 8009798:	73fb      	strb	r3, [r7, #15]
      break;
 800979a:	e135      	b.n	8009a08 <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	785b      	ldrb	r3, [r3, #1]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d03f      	beq.n	8009824 <USBD_StdEPReq+0xc6>
 80097a4:	2b03      	cmp	r3, #3
 80097a6:	d002      	beq.n	80097ae <USBD_StdEPReq+0x50>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d07b      	beq.n	80098a4 <USBD_StdEPReq+0x146>
 80097ac:	e121      	b.n	80099f2 <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d002      	beq.n	80097c0 <USBD_StdEPReq+0x62>
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d015      	beq.n	80097ea <USBD_StdEPReq+0x8c>
 80097be:	e02b      	b.n	8009818 <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097c0:	7bbb      	ldrb	r3, [r7, #14]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00c      	beq.n	80097e0 <USBD_StdEPReq+0x82>
 80097c6:	7bbb      	ldrb	r3, [r7, #14]
 80097c8:	2b80      	cmp	r3, #128	; 0x80
 80097ca:	d009      	beq.n	80097e0 <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f004 fd4d 	bl	800e270 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80097d6:	2180      	movs	r1, #128	; 0x80
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f004 fd49 	bl	800e270 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097de:	e020      	b.n	8009822 <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fc6d 	bl	800a0c2 <USBD_CtlError>
              break;
 80097e8:	e01b      	b.n	8009822 <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	885b      	ldrh	r3, [r3, #2]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10e      	bne.n	8009810 <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBD_StdEPReq+0xb2>
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	2b80      	cmp	r3, #128	; 0x80
 80097fc:	d008      	beq.n	8009810 <USBD_StdEPReq+0xb2>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	88db      	ldrh	r3, [r3, #6]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d104      	bne.n	8009810 <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	4619      	mov	r1, r3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f004 fd30 	bl	800e270 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fd21 	bl	800a258 <USBD_CtlSendStatus>

              break;
 8009816:	e004      	b.n	8009822 <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fc51 	bl	800a0c2 <USBD_CtlError>
              break;
 8009820:	bf00      	nop
          }
          break;
 8009822:	e0eb      	b.n	80099fc <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b02      	cmp	r3, #2
 800982e:	d002      	beq.n	8009836 <USBD_StdEPReq+0xd8>
 8009830:	2b03      	cmp	r3, #3
 8009832:	d015      	beq.n	8009860 <USBD_StdEPReq+0x102>
 8009834:	e02f      	b.n	8009896 <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009836:	7bbb      	ldrb	r3, [r7, #14]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00c      	beq.n	8009856 <USBD_StdEPReq+0xf8>
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	2b80      	cmp	r3, #128	; 0x80
 8009840:	d009      	beq.n	8009856 <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009842:	7bbb      	ldrb	r3, [r7, #14]
 8009844:	4619      	mov	r1, r3
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f004 fd12 	bl	800e270 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800984c:	2180      	movs	r1, #128	; 0x80
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f004 fd0e 	bl	800e270 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009854:	e025      	b.n	80098a2 <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fc32 	bl	800a0c2 <USBD_CtlError>
              break;
 800985e:	e020      	b.n	80098a2 <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	885b      	ldrh	r3, [r3, #2]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d11b      	bne.n	80098a0 <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800986e:	2b00      	cmp	r3, #0
 8009870:	d004      	beq.n	800987c <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f004 fd19 	bl	800e2ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fceb 	bl	800a258 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	4798      	blx	r3
 8009890:	4603      	mov	r3, r0
 8009892:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009894:	e004      	b.n	80098a0 <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fc12 	bl	800a0c2 <USBD_CtlError>
              break;
 800989e:	e000      	b.n	80098a2 <USBD_StdEPReq+0x144>
              break;
 80098a0:	bf00      	nop
          }
          break;
 80098a2:	e0ab      	b.n	80099fc <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d002      	beq.n	80098b6 <USBD_StdEPReq+0x158>
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d032      	beq.n	800991a <USBD_StdEPReq+0x1bc>
 80098b4:	e097      	b.n	80099e6 <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098b6:	7bbb      	ldrb	r3, [r7, #14]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d007      	beq.n	80098cc <USBD_StdEPReq+0x16e>
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
 80098be:	2b80      	cmp	r3, #128	; 0x80
 80098c0:	d004      	beq.n	80098cc <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fbfc 	bl	800a0c2 <USBD_CtlError>
                break;
 80098ca:	e091      	b.n	80099f0 <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	da0b      	bge.n	80098ec <USBD_StdEPReq+0x18e>
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
 80098d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098da:	4613      	mov	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	3310      	adds	r3, #16
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	4413      	add	r3, r2
 80098e8:	3304      	adds	r3, #4
 80098ea:	e00b      	b.n	8009904 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
 80098ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098f2:	4613      	mov	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	4413      	add	r3, r2
 8009902:	3304      	adds	r3, #4
 8009904:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2202      	movs	r2, #2
 8009910:	4619      	mov	r1, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fc46 	bl	800a1a4 <USBD_CtlSendData>
              break;
 8009918:	e06a      	b.n	80099f0 <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800991a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800991e:	2b00      	cmp	r3, #0
 8009920:	da11      	bge.n	8009946 <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	f003 020f 	and.w	r2, r3, #15
 8009928:	6879      	ldr	r1, [r7, #4]
 800992a:	4613      	mov	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	440b      	add	r3, r1
 8009934:	3324      	adds	r3, #36	; 0x24
 8009936:	881b      	ldrh	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d117      	bne.n	800996c <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fbbf 	bl	800a0c2 <USBD_CtlError>
                  break;
 8009944:	e054      	b.n	80099f0 <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009946:	7bbb      	ldrb	r3, [r7, #14]
 8009948:	f003 020f 	and.w	r2, r3, #15
 800994c:	6879      	ldr	r1, [r7, #4]
 800994e:	4613      	mov	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	440b      	add	r3, r1
 8009958:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d104      	bne.n	800996c <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fbac 	bl	800a0c2 <USBD_CtlError>
                  break;
 800996a:	e041      	b.n	80099f0 <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800996c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009970:	2b00      	cmp	r3, #0
 8009972:	da0b      	bge.n	800998c <USBD_StdEPReq+0x22e>
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800997a:	4613      	mov	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	3310      	adds	r3, #16
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	4413      	add	r3, r2
 8009988:	3304      	adds	r3, #4
 800998a:	e00b      	b.n	80099a4 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009992:	4613      	mov	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	4413      	add	r3, r2
 80099a2:	3304      	adds	r3, #4
 80099a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d002      	beq.n	80099b2 <USBD_StdEPReq+0x254>
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	2b80      	cmp	r3, #128	; 0x80
 80099b0:	d103      	bne.n	80099ba <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	e00e      	b.n	80099d8 <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80099ba:	7bbb      	ldrb	r3, [r7, #14]
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f004 fc94 	bl	800e2ec <USBD_LL_IsStallEP>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2201      	movs	r2, #1
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	e002      	b.n	80099d8 <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2200      	movs	r2, #0
 80099d6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2202      	movs	r2, #2
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fbe0 	bl	800a1a4 <USBD_CtlSendData>
              break;
 80099e4:	e004      	b.n	80099f0 <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fb6a 	bl	800a0c2 <USBD_CtlError>
              break;
 80099ee:	bf00      	nop
          }
          break;
 80099f0:	e004      	b.n	80099fc <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fb64 	bl	800a0c2 <USBD_CtlError>
          break;
 80099fa:	bf00      	nop
      }
      break;
 80099fc:	e004      	b.n	8009a08 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fb5e 	bl	800a0c2 <USBD_CtlError>
      break;
 8009a06:	bf00      	nop
  }

  return ret;
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
	...

08009a14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	885b      	ldrh	r3, [r3, #2]
 8009a2e:	0a1b      	lsrs	r3, r3, #8
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	3b01      	subs	r3, #1
 8009a34:	2b0e      	cmp	r3, #14
 8009a36:	f200 8152 	bhi.w	8009cde <USBD_GetDescriptor+0x2ca>
 8009a3a:	a201      	add	r2, pc, #4	; (adr r2, 8009a40 <USBD_GetDescriptor+0x2c>)
 8009a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a40:	08009ab1 	.word	0x08009ab1
 8009a44:	08009ac9 	.word	0x08009ac9
 8009a48:	08009b09 	.word	0x08009b09
 8009a4c:	08009cdf 	.word	0x08009cdf
 8009a50:	08009cdf 	.word	0x08009cdf
 8009a54:	08009c7f 	.word	0x08009c7f
 8009a58:	08009cab 	.word	0x08009cab
 8009a5c:	08009cdf 	.word	0x08009cdf
 8009a60:	08009cdf 	.word	0x08009cdf
 8009a64:	08009cdf 	.word	0x08009cdf
 8009a68:	08009cdf 	.word	0x08009cdf
 8009a6c:	08009cdf 	.word	0x08009cdf
 8009a70:	08009cdf 	.word	0x08009cdf
 8009a74:	08009cdf 	.word	0x08009cdf
 8009a78:	08009a7d 	.word	0x08009a7d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00b      	beq.n	8009aa0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8e:	69db      	ldr	r3, [r3, #28]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	7c12      	ldrb	r2, [r2, #16]
 8009a94:	f107 0108 	add.w	r1, r7, #8
 8009a98:	4610      	mov	r0, r2
 8009a9a:	4798      	blx	r3
 8009a9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a9e:	e126      	b.n	8009cee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fb0d 	bl	800a0c2 <USBD_CtlError>
        err++;
 8009aa8:	7afb      	ldrb	r3, [r7, #11]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	72fb      	strb	r3, [r7, #11]
      break;
 8009aae:	e11e      	b.n	8009cee <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	7c12      	ldrb	r2, [r2, #16]
 8009abc:	f107 0108 	add.w	r1, r7, #8
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	60f8      	str	r0, [r7, #12]
      break;
 8009ac6:	e112      	b.n	8009cee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	7c1b      	ldrb	r3, [r3, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10d      	bne.n	8009aec <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad8:	f107 0208 	add.w	r2, r7, #8
 8009adc:	4610      	mov	r0, r2
 8009ade:	4798      	blx	r3
 8009ae0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009aea:	e100      	b.n	8009cee <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af4:	f107 0208 	add.w	r2, r7, #8
 8009af8:	4610      	mov	r0, r2
 8009afa:	4798      	blx	r3
 8009afc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3301      	adds	r3, #1
 8009b02:	2202      	movs	r2, #2
 8009b04:	701a      	strb	r2, [r3, #0]
      break;
 8009b06:	e0f2      	b.n	8009cee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	885b      	ldrh	r3, [r3, #2]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b05      	cmp	r3, #5
 8009b10:	f200 80ac 	bhi.w	8009c6c <USBD_GetDescriptor+0x258>
 8009b14:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <USBD_GetDescriptor+0x108>)
 8009b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1a:	bf00      	nop
 8009b1c:	08009b35 	.word	0x08009b35
 8009b20:	08009b69 	.word	0x08009b69
 8009b24:	08009b9d 	.word	0x08009b9d
 8009b28:	08009bd1 	.word	0x08009bd1
 8009b2c:	08009c05 	.word	0x08009c05
 8009b30:	08009c39 	.word	0x08009c39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00b      	beq.n	8009b58 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	7c12      	ldrb	r2, [r2, #16]
 8009b4c:	f107 0108 	add.w	r1, r7, #8
 8009b50:	4610      	mov	r0, r2
 8009b52:	4798      	blx	r3
 8009b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b56:	e091      	b.n	8009c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fab1 	bl	800a0c2 <USBD_CtlError>
            err++;
 8009b60:	7afb      	ldrb	r3, [r7, #11]
 8009b62:	3301      	adds	r3, #1
 8009b64:	72fb      	strb	r3, [r7, #11]
          break;
 8009b66:	e089      	b.n	8009c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00b      	beq.n	8009b8c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	7c12      	ldrb	r2, [r2, #16]
 8009b80:	f107 0108 	add.w	r1, r7, #8
 8009b84:	4610      	mov	r0, r2
 8009b86:	4798      	blx	r3
 8009b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b8a:	e077      	b.n	8009c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fa97 	bl	800a0c2 <USBD_CtlError>
            err++;
 8009b94:	7afb      	ldrb	r3, [r7, #11]
 8009b96:	3301      	adds	r3, #1
 8009b98:	72fb      	strb	r3, [r7, #11]
          break;
 8009b9a:	e06f      	b.n	8009c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00b      	beq.n	8009bc0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	7c12      	ldrb	r2, [r2, #16]
 8009bb4:	f107 0108 	add.w	r1, r7, #8
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4798      	blx	r3
 8009bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bbe:	e05d      	b.n	8009c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fa7d 	bl	800a0c2 <USBD_CtlError>
            err++;
 8009bc8:	7afb      	ldrb	r3, [r7, #11]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bce:	e055      	b.n	8009c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00b      	beq.n	8009bf4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	7c12      	ldrb	r2, [r2, #16]
 8009be8:	f107 0108 	add.w	r1, r7, #8
 8009bec:	4610      	mov	r0, r2
 8009bee:	4798      	blx	r3
 8009bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bf2:	e043      	b.n	8009c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fa63 	bl	800a0c2 <USBD_CtlError>
            err++;
 8009bfc:	7afb      	ldrb	r3, [r7, #11]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	72fb      	strb	r3, [r7, #11]
          break;
 8009c02:	e03b      	b.n	8009c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00b      	beq.n	8009c28 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	7c12      	ldrb	r2, [r2, #16]
 8009c1c:	f107 0108 	add.w	r1, r7, #8
 8009c20:	4610      	mov	r0, r2
 8009c22:	4798      	blx	r3
 8009c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c26:	e029      	b.n	8009c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fa49 	bl	800a0c2 <USBD_CtlError>
            err++;
 8009c30:	7afb      	ldrb	r3, [r7, #11]
 8009c32:	3301      	adds	r3, #1
 8009c34:	72fb      	strb	r3, [r7, #11]
          break;
 8009c36:	e021      	b.n	8009c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00b      	beq.n	8009c5c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	7c12      	ldrb	r2, [r2, #16]
 8009c50:	f107 0108 	add.w	r1, r7, #8
 8009c54:	4610      	mov	r0, r2
 8009c56:	4798      	blx	r3
 8009c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c5a:	e00f      	b.n	8009c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fa2f 	bl	800a0c2 <USBD_CtlError>
            err++;
 8009c64:	7afb      	ldrb	r3, [r7, #11]
 8009c66:	3301      	adds	r3, #1
 8009c68:	72fb      	strb	r3, [r7, #11]
          break;
 8009c6a:	e007      	b.n	8009c7c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fa27 	bl	800a0c2 <USBD_CtlError>
          err++;
 8009c74:	7afb      	ldrb	r3, [r7, #11]
 8009c76:	3301      	adds	r3, #1
 8009c78:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009c7a:	bf00      	nop
      }
      break;
 8009c7c:	e037      	b.n	8009cee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	7c1b      	ldrb	r3, [r3, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d109      	bne.n	8009c9a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8e:	f107 0208 	add.w	r2, r7, #8
 8009c92:	4610      	mov	r0, r2
 8009c94:	4798      	blx	r3
 8009c96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c98:	e029      	b.n	8009cee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fa10 	bl	800a0c2 <USBD_CtlError>
        err++;
 8009ca2:	7afb      	ldrb	r3, [r7, #11]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ca8:	e021      	b.n	8009cee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	7c1b      	ldrb	r3, [r3, #16]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10d      	bne.n	8009cce <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cba:	f107 0208 	add.w	r2, r7, #8
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	4798      	blx	r3
 8009cc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	2207      	movs	r2, #7
 8009cca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ccc:	e00f      	b.n	8009cee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f9f6 	bl	800a0c2 <USBD_CtlError>
        err++;
 8009cd6:	7afb      	ldrb	r3, [r7, #11]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	72fb      	strb	r3, [r7, #11]
      break;
 8009cdc:	e007      	b.n	8009cee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f9ee 	bl	800a0c2 <USBD_CtlError>
      err++;
 8009ce6:	7afb      	ldrb	r3, [r7, #11]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	72fb      	strb	r3, [r7, #11]
      break;
 8009cec:	bf00      	nop
  }

  if (err != 0U)
 8009cee:	7afb      	ldrb	r3, [r7, #11]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d11e      	bne.n	8009d32 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	88db      	ldrh	r3, [r3, #6]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d016      	beq.n	8009d2a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009cfc:	893b      	ldrh	r3, [r7, #8]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00e      	beq.n	8009d20 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	88da      	ldrh	r2, [r3, #6]
 8009d06:	893b      	ldrh	r3, [r7, #8]
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	bf28      	it	cs
 8009d0c:	4613      	movcs	r3, r2
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d12:	893b      	ldrh	r3, [r7, #8]
 8009d14:	461a      	mov	r2, r3
 8009d16:	68f9      	ldr	r1, [r7, #12]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fa43 	bl	800a1a4 <USBD_CtlSendData>
 8009d1e:	e009      	b.n	8009d34 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f9cd 	bl	800a0c2 <USBD_CtlError>
 8009d28:	e004      	b.n	8009d34 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fa94 	bl	800a258 <USBD_CtlSendStatus>
 8009d30:	e000      	b.n	8009d34 <USBD_GetDescriptor+0x320>
    return;
 8009d32:	bf00      	nop
  }
}
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop

08009d3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	889b      	ldrh	r3, [r3, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d131      	bne.n	8009db2 <USBD_SetAddress+0x76>
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	88db      	ldrh	r3, [r3, #6]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d12d      	bne.n	8009db2 <USBD_SetAddress+0x76>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	885b      	ldrh	r3, [r3, #2]
 8009d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8009d5c:	d829      	bhi.n	8009db2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	885b      	ldrh	r3, [r3, #2]
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d104      	bne.n	8009d80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f9a2 	bl	800a0c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d7e:	e01c      	b.n	8009dba <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	7bfa      	ldrb	r2, [r7, #15]
 8009d84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f004 fad3 	bl	800e338 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fa60 	bl	800a258 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d004      	beq.n	8009da8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2202      	movs	r2, #2
 8009da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da6:	e008      	b.n	8009dba <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009db0:	e003      	b.n	8009dba <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f984 	bl	800a0c2 <USBD_CtlError>
  }
}
 8009dba:	bf00      	nop
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
	...

08009dc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	885b      	ldrh	r3, [r3, #2]
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	4b4c      	ldr	r3, [pc, #304]	; (8009f0c <USBD_SetConfig+0x148>)
 8009dda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ddc:	4b4b      	ldr	r3, [pc, #300]	; (8009f0c <USBD_SetConfig+0x148>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d905      	bls.n	8009df0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f96b 	bl	800a0c2 <USBD_CtlError>
    return USBD_FAIL;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e088      	b.n	8009f02 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d002      	beq.n	8009e02 <USBD_SetConfig+0x3e>
 8009dfc:	2b03      	cmp	r3, #3
 8009dfe:	d025      	beq.n	8009e4c <USBD_SetConfig+0x88>
 8009e00:	e071      	b.n	8009ee6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009e02:	4b42      	ldr	r3, [pc, #264]	; (8009f0c <USBD_SetConfig+0x148>)
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d01c      	beq.n	8009e44 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009e0a:	4b40      	ldr	r3, [pc, #256]	; (8009f0c <USBD_SetConfig+0x148>)
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e14:	4b3d      	ldr	r3, [pc, #244]	; (8009f0c <USBD_SetConfig+0x148>)
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f7ff f99e 	bl	800915c <USBD_SetClassConfig>
 8009e20:	4603      	mov	r3, r0
 8009e22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d004      	beq.n	8009e34 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f948 	bl	800a0c2 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e32:	e065      	b.n	8009f00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fa0f 	bl	800a258 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2203      	movs	r2, #3
 8009e3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e42:	e05d      	b.n	8009f00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fa07 	bl	800a258 <USBD_CtlSendStatus>
      break;
 8009e4a:	e059      	b.n	8009f00 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e4c:	4b2f      	ldr	r3, [pc, #188]	; (8009f0c <USBD_SetConfig+0x148>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d112      	bne.n	8009e7a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2202      	movs	r2, #2
 8009e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009e5c:	4b2b      	ldr	r3, [pc, #172]	; (8009f0c <USBD_SetConfig+0x148>)
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	461a      	mov	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e66:	4b29      	ldr	r3, [pc, #164]	; (8009f0c <USBD_SetConfig+0x148>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7ff f991 	bl	8009194 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f9f0 	bl	800a258 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e78:	e042      	b.n	8009f00 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009e7a:	4b24      	ldr	r3, [pc, #144]	; (8009f0c <USBD_SetConfig+0x148>)
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d02a      	beq.n	8009ede <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7ff f97f 	bl	8009194 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e96:	4b1d      	ldr	r3, [pc, #116]	; (8009f0c <USBD_SetConfig+0x148>)
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ea0:	4b1a      	ldr	r3, [pc, #104]	; (8009f0c <USBD_SetConfig+0x148>)
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff f958 	bl	800915c <USBD_SetClassConfig>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00f      	beq.n	8009ed6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f902 	bl	800a0c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff f964 	bl	8009194 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ed4:	e014      	b.n	8009f00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f9be 	bl	800a258 <USBD_CtlSendStatus>
      break;
 8009edc:	e010      	b.n	8009f00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f9ba 	bl	800a258 <USBD_CtlSendStatus>
      break;
 8009ee4:	e00c      	b.n	8009f00 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f8ea 	bl	800a0c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009eee:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <USBD_SetConfig+0x148>)
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7ff f94d 	bl	8009194 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009efa:	2303      	movs	r3, #3
 8009efc:	73fb      	strb	r3, [r7, #15]
      break;
 8009efe:	bf00      	nop
  }

  return ret;
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20000252 	.word	0x20000252

08009f10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	88db      	ldrh	r3, [r3, #6]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d004      	beq.n	8009f2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f8cc 	bl	800a0c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f2a:	e022      	b.n	8009f72 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	db17      	blt.n	8009f68 <USBD_GetConfig+0x58>
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	dd02      	ble.n	8009f42 <USBD_GetConfig+0x32>
 8009f3c:	2b03      	cmp	r3, #3
 8009f3e:	d00b      	beq.n	8009f58 <USBD_GetConfig+0x48>
 8009f40:	e012      	b.n	8009f68 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f927 	bl	800a1a4 <USBD_CtlSendData>
        break;
 8009f56:	e00c      	b.n	8009f72 <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f91f 	bl	800a1a4 <USBD_CtlSendData>
        break;
 8009f66:	e004      	b.n	8009f72 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f8a9 	bl	800a0c2 <USBD_CtlError>
        break;
 8009f70:	bf00      	nop
}
 8009f72:	bf00      	nop
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d81e      	bhi.n	8009fd0 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	88db      	ldrh	r3, [r3, #6]
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d004      	beq.n	8009fa4 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f890 	bl	800a0c2 <USBD_CtlError>
        break;
 8009fa2:	e01a      	b.n	8009fda <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d005      	beq.n	8009fc0 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	f043 0202 	orr.w	r2, r3, #2
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	330c      	adds	r3, #12
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f8eb 	bl	800a1a4 <USBD_CtlSendData>
      break;
 8009fce:	e004      	b.n	8009fda <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f875 	bl	800a0c2 <USBD_CtlError>
      break;
 8009fd8:	bf00      	nop
  }
}
 8009fda:	bf00      	nop
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	885b      	ldrh	r3, [r3, #2]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d106      	bne.n	800a002 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f92b 	bl	800a258 <USBD_CtlSendStatus>
  }
}
 800a002:	bf00      	nop
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b082      	sub	sp, #8
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	3b01      	subs	r3, #1
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d80b      	bhi.n	800a03a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	885b      	ldrh	r3, [r3, #2]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d10c      	bne.n	800a044 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f910 	bl	800a258 <USBD_CtlSendStatus>
      }
      break;
 800a038:	e004      	b.n	800a044 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 f840 	bl	800a0c2 <USBD_CtlError>
      break;
 800a042:	e000      	b.n	800a046 <USBD_ClrFeature+0x3c>
      break;
 800a044:	bf00      	nop
  }
}
 800a046:	bf00      	nop
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	781a      	ldrb	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3301      	adds	r3, #1
 800a068:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	781a      	ldrb	r2, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3301      	adds	r3, #1
 800a076:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f7ff fa9d 	bl	80095b8 <SWAPBYTE>
 800a07e:	4603      	mov	r3, r0
 800a080:	461a      	mov	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3301      	adds	r3, #1
 800a08a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	3301      	adds	r3, #1
 800a090:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f7ff fa90 	bl	80095b8 <SWAPBYTE>
 800a098:	4603      	mov	r3, r0
 800a09a:	461a      	mov	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f7ff fa83 	bl	80095b8 <SWAPBYTE>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	80da      	strh	r2, [r3, #6]
}
 800a0ba:	bf00      	nop
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b082      	sub	sp, #8
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0cc:	2180      	movs	r1, #128	; 0x80
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f004 f8ce 	bl	800e270 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f004 f8ca 	bl	800e270 <USBD_LL_StallEP>
}
 800a0dc:	bf00      	nop
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d036      	beq.n	800a168 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a0fe:	6938      	ldr	r0, [r7, #16]
 800a100:	f000 f836 	bl	800a170 <USBD_GetLen>
 800a104:	4603      	mov	r3, r0
 800a106:	3301      	adds	r3, #1
 800a108:	b29b      	uxth	r3, r3
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a112:	7dfb      	ldrb	r3, [r7, #23]
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	4413      	add	r3, r2
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	7812      	ldrb	r2, [r2, #0]
 800a11c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a11e:	7dfb      	ldrb	r3, [r7, #23]
 800a120:	3301      	adds	r3, #1
 800a122:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	4413      	add	r3, r2
 800a12a:	2203      	movs	r2, #3
 800a12c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	3301      	adds	r3, #1
 800a132:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a134:	e013      	b.n	800a15e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a136:	7dfb      	ldrb	r3, [r7, #23]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	4413      	add	r3, r2
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	7812      	ldrb	r2, [r2, #0]
 800a140:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	3301      	adds	r3, #1
 800a146:	613b      	str	r3, [r7, #16]
    idx++;
 800a148:	7dfb      	ldrb	r3, [r7, #23]
 800a14a:	3301      	adds	r3, #1
 800a14c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	68ba      	ldr	r2, [r7, #8]
 800a152:	4413      	add	r3, r2
 800a154:	2200      	movs	r2, #0
 800a156:	701a      	strb	r2, [r3, #0]
    idx++;
 800a158:	7dfb      	ldrb	r3, [r7, #23]
 800a15a:	3301      	adds	r3, #1
 800a15c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e7      	bne.n	800a136 <USBD_GetString+0x52>
 800a166:	e000      	b.n	800a16a <USBD_GetString+0x86>
    return;
 800a168:	bf00      	nop
  }
}
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a178:	2300      	movs	r3, #0
 800a17a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a180:	e005      	b.n	800a18e <USBD_GetLen+0x1e>
  {
    len++;
 800a182:	7bfb      	ldrb	r3, [r7, #15]
 800a184:	3301      	adds	r3, #1
 800a186:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	3301      	adds	r3, #1
 800a18c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1f5      	bne.n	800a182 <USBD_GetLen+0x12>
  }

  return len;
 800a196:	7bfb      	ldrb	r3, [r7, #15]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f004 f8d3 	bl	800e376 <USBD_LL_Transmit>

  return USBD_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b084      	sub	sp, #16
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	60b9      	str	r1, [r7, #8]
 800a1e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f004 f8c2 	bl	800e376 <USBD_LL_Transmit>

  return USBD_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2203      	movs	r2, #3
 800a20c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	2100      	movs	r1, #0
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f004 f8c6 	bl	800e3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b084      	sub	sp, #16
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	2100      	movs	r1, #0
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f004 f8b5 	bl	800e3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2204      	movs	r2, #4
 800a264:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a268:	2300      	movs	r3, #0
 800a26a:	2200      	movs	r2, #0
 800a26c:	2100      	movs	r1, #0
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f004 f881 	bl	800e376 <USBD_LL_Transmit>

  return USBD_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2205      	movs	r2, #5
 800a28a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a28e:	2300      	movs	r3, #0
 800a290:	2200      	movs	r2, #0
 800a292:	2100      	movs	r1, #0
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f004 f88f 	bl	800e3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a2aa:	e01c      	b.n	800a2e6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a2ac:	1d3b      	adds	r3, r7, #4
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	4812      	ldr	r0, [pc, #72]	; (800a2fc <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a2b2:	f000 f9aa 	bl	800a60a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	7a5b      	ldrb	r3, [r3, #9]
 800a2ba:	2b0f      	cmp	r3, #15
 800a2bc:	d003      	beq.n	800a2c6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	7a5b      	ldrb	r3, [r3, #9]
 800a2c2:	2b0e      	cmp	r3, #14
 800a2c4:	d105      	bne.n	800a2d2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	2002      	movs	r0, #2
 800a2cc:	f000 f8e0 	bl	800a490 <OutputDbgTrace>
 800a2d0:	e004      	b.n	800a2dc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	2003      	movs	r0, #3
 800a2d8:	f000 f8da 	bl	800a490 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a2dc:	4b08      	ldr	r3, [pc, #32]	; (800a300 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a2e6:	4805      	ldr	r0, [pc, #20]	; (800a2fc <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a2e8:	f000 f92c 	bl	800a544 <LST_is_empty>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d0dc      	beq.n	800a2ac <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a2f2:	bf00      	nop
}
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	200300c4 	.word	0x200300c4
 800a300:	2000025c 	.word	0x2000025c

0800a304 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a308:	4b02      	ldr	r3, [pc, #8]	; (800a314 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4798      	blx	r3

  return;
 800a30e:	bf00      	nop
}
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	20000260 	.word	0x20000260

0800a318 <HW_IPCC_SYS_CmdEvtNot>:

  return 0;
}

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a31c:	4b07      	ldr	r3, [pc, #28]	; (800a33c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4619      	mov	r1, r3
 800a324:	2005      	movs	r0, #5
 800a326:	f000 f8b3 	bl	800a490 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a32a:	4b05      	ldr	r3, [pc, #20]	; (800a340 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a03      	ldr	r2, [pc, #12]	; (800a33c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a330:	68d2      	ldr	r2, [r2, #12]
 800a332:	6812      	ldr	r2, [r2, #0]
 800a334:	4610      	mov	r0, r2
 800a336:	4798      	blx	r3

  return;
 800a338:	bf00      	nop
}
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	20030000 	.word	0x20030000
 800a340:	20000264 	.word	0x20000264

0800a344 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a34a:	e00e      	b.n	800a36a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a34c:	1d3b      	adds	r3, r7, #4
 800a34e:	4619      	mov	r1, r3
 800a350:	480b      	ldr	r0, [pc, #44]	; (800a380 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a352:	f000 f95a 	bl	800a60a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4619      	mov	r1, r3
 800a35a:	2006      	movs	r0, #6
 800a35c:	f000 f898 	bl	800a490 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a360:	4b08      	ldr	r3, [pc, #32]	; (800a384 <HW_IPCC_SYS_EvtNot+0x40>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	4610      	mov	r0, r2
 800a368:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a36a:	4805      	ldr	r0, [pc, #20]	; (800a380 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a36c:	f000 f8ea 	bl	800a544 <LST_is_empty>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d0ea      	beq.n	800a34c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a376:	bf00      	nop
}
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	200300cc 	.word	0x200300cc
 800a384:	20000268 	.word	0x20000268

0800a388 <TL_THREAD_CliSendAck>:

  return;
}

void TL_THREAD_CliSendAck ( void )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800a38c:	4b04      	ldr	r3, [pc, #16]	; (800a3a0 <TL_THREAD_CliSendAck+0x18>)
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	220d      	movs	r2, #13
 800a394:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800a396:	f003 fb49 	bl	800da2c <HW_IPCC_THREAD_CliSendAck>

  return;
 800a39a:	bf00      	nop
}
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	20030000 	.word	0x20030000

0800a3a4 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800a3a8:	4b03      	ldr	r3, [pc, #12]	; (800a3b8 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f003 f96c 	bl	800d68c <TL_OT_CmdEvtReceived>

  return;
 800a3b4:	bf00      	nop
}
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20030000 	.word	0x20030000

0800a3bc <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800a3c0:	4b03      	ldr	r3, [pc, #12]	; (800a3d0 <HW_IPCC_THREAD_EvtNot+0x14>)
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f003 f96a 	bl	800d6a0 <TL_THREAD_NotReceived>

  return;
 800a3cc:	bf00      	nop
}
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	20030000 	.word	0x20030000

0800a3d4 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800a3d8:	4b03      	ldr	r3, [pc, #12]	; (800a3e8 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f003 f994 	bl	800d70c <TL_THREAD_CliNotReceived>

  return;
 800a3e4:	bf00      	nop
}
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	20030000 	.word	0x20030000

0800a3ec <TL_MM_EvtDone>:

  return;
}

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	4807      	ldr	r0, [pc, #28]	; (800a414 <TL_MM_EvtDone+0x28>)
 800a3f8:	f000 f8c4 	bl	800a584 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a3fc:	6879      	ldr	r1, [r7, #4]
 800a3fe:	2000      	movs	r0, #0
 800a400:	f000 f846 	bl	800a490 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a404:	4804      	ldr	r0, [pc, #16]	; (800a418 <TL_MM_EvtDone+0x2c>)
 800a406:	f003 fb43 	bl	800da90 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a40a:	bf00      	nop
}
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20000254 	.word	0x20000254
 800a418:	0800a41d 	.word	0x0800a41d

0800a41c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a422:	e00c      	b.n	800a43e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a424:	1d3b      	adds	r3, r7, #4
 800a426:	4619      	mov	r1, r3
 800a428:	480a      	ldr	r0, [pc, #40]	; (800a454 <SendFreeBuf+0x38>)
 800a42a:	f000 f8ee 	bl	800a60a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a42e:	4b0a      	ldr	r3, [pc, #40]	; (800a458 <SendFreeBuf+0x3c>)
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 f8a3 	bl	800a584 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a43e:	4805      	ldr	r0, [pc, #20]	; (800a454 <SendFreeBuf+0x38>)
 800a440:	f000 f880 	bl	800a544 <LST_is_empty>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d0ec      	beq.n	800a424 <SendFreeBuf+0x8>
  }

  return;
 800a44a:	bf00      	nop
}
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20000254 	.word	0x20000254
 800a458:	20030000 	.word	0x20030000

0800a45c <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a462:	e008      	b.n	800a476 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a464:	1d3b      	adds	r3, r7, #4
 800a466:	4619      	mov	r1, r3
 800a468:	4808      	ldr	r0, [pc, #32]	; (800a48c <HW_IPCC_TRACES_EvtNot+0x30>)
 800a46a:	f000 f8ce 	bl	800a60a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4618      	mov	r0, r3
 800a472:	f7f5 ffb3 	bl	80003dc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a476:	4805      	ldr	r0, [pc, #20]	; (800a48c <HW_IPCC_TRACES_EvtNot+0x30>)
 800a478:	f000 f864 	bl	800a544 <LST_is_empty>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d0f0      	beq.n	800a464 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a482:	bf00      	nop
}
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	200300bc 	.word	0x200300bc

0800a490 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	4603      	mov	r3, r0
 800a498:	6039      	str	r1, [r7, #0]
 800a49a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a49c:	79fb      	ldrb	r3, [r7, #7]
 800a49e:	2b06      	cmp	r3, #6
 800a4a0:	d849      	bhi.n	800a536 <OutputDbgTrace+0xa6>
 800a4a2:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <OutputDbgTrace+0x18>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a4c5 	.word	0x0800a4c5
 800a4ac:	0800a4e7 	.word	0x0800a4e7
 800a4b0:	0800a4ed 	.word	0x0800a4ed
 800a4b4:	0800a507 	.word	0x0800a507
 800a4b8:	0800a513 	.word	0x0800a513
 800a4bc:	0800a519 	.word	0x0800a519
 800a4c0:	0800a52b 	.word	0x0800a52b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	7a5b      	ldrb	r3, [r3, #9]
 800a4cc:	2b0f      	cmp	r3, #15
 800a4ce:	d004      	beq.n	800a4da <OutputDbgTrace+0x4a>
 800a4d0:	2bff      	cmp	r3, #255	; 0xff
 800a4d2:	d004      	beq.n	800a4de <OutputDbgTrace+0x4e>
 800a4d4:	2b0e      	cmp	r3, #14
 800a4d6:	d004      	beq.n	800a4e2 <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a4d8:	e004      	b.n	800a4e4 <OutputDbgTrace+0x54>
          break;
 800a4da:	bf00      	nop
 800a4dc:	e02c      	b.n	800a538 <OutputDbgTrace+0xa8>
          break;
 800a4de:	bf00      	nop
 800a4e0:	e02a      	b.n	800a538 <OutputDbgTrace+0xa8>
          break;
 800a4e2:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a4e4:	e028      	b.n	800a538 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a4ea:	e025      	b.n	800a538 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	7a5b      	ldrb	r3, [r3, #9]
 800a4f4:	2b0e      	cmp	r3, #14
 800a4f6:	d002      	beq.n	800a4fe <OutputDbgTrace+0x6e>
 800a4f8:	2b0f      	cmp	r3, #15
 800a4fa:	d002      	beq.n	800a502 <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a4fc:	e002      	b.n	800a504 <OutputDbgTrace+0x74>
          break;
 800a4fe:	bf00      	nop
 800a500:	e01a      	b.n	800a538 <OutputDbgTrace+0xa8>
          break;
 800a502:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a504:	e018      	b.n	800a538 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	7a5b      	ldrb	r3, [r3, #9]
 800a50e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a510:	e012      	b.n	800a538 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a516:	e00f      	b.n	800a538 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	7a5b      	ldrb	r3, [r3, #9]
 800a520:	2b0e      	cmp	r3, #14
 800a522:	d000      	beq.n	800a526 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a524:	e000      	b.n	800a528 <OutputDbgTrace+0x98>
          break;
 800a526:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a528:	e006      	b.n	800a538 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	7a5b      	ldrb	r3, [r3, #9]
 800a532:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a534:	e000      	b.n	800a538 <OutputDbgTrace+0xa8>

    default:
      break;
 800a536:	bf00      	nop
  }

  return;
 800a538:	bf00      	nop
}
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <LST_is_empty>:
  listHead->next = listHead;
  listHead->prev = listHead;
}

uint8_t LST_is_empty (tListNode * listHead)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a54c:	f3ef 8310 	mrs	r3, PRIMASK
 800a550:	60fb      	str	r3, [r7, #12]
  return(result);
 800a552:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a554:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a556:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d102      	bne.n	800a568 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800a562:	2301      	movs	r3, #1
 800a564:	75fb      	strb	r3, [r7, #23]
 800a566:	e001      	b.n	800a56c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800a568:	2300      	movs	r3, #0
 800a56a:	75fb      	strb	r3, [r7, #23]
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a576:	7dfb      	ldrb	r3, [r7, #23]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <LST_insert_tail>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a58e:	f3ef 8310 	mrs	r3, PRIMASK
 800a592:	60fb      	str	r3, [r7, #12]
  return(result);
 800a594:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a596:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a598:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	601a      	str	r2, [r3, #0]
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a5c0:	bf00      	nop
 800a5c2:	371c      	adds	r7, #28
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a5d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a5dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5de:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	6812      	ldr	r2, [r2, #0]
 800a5e8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	6852      	ldr	r2, [r2, #4]
 800a5f2:	605a      	str	r2, [r3, #4]
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a5fe:	bf00      	nop
 800a600:	371c      	adds	r7, #28
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b086      	sub	sp, #24
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a614:	f3ef 8310 	mrs	r3, PRIMASK
 800a618:	60fb      	str	r3, [r7, #12]
  return(result);
 800a61a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a61c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a61e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7ff ffcd 	bl	800a5cc <LST_remove_node>
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a63c:	bf00      	nop
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a644:	b480      	push	{r7}
 800a646:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a648:	bf00      	nop
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
	...

0800a654 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a65a:	f3ef 8305 	mrs	r3, IPSR
 800a65e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a660:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a662:	2b00      	cmp	r3, #0
 800a664:	d10f      	bne.n	800a686 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a666:	f3ef 8310 	mrs	r3, PRIMASK
 800a66a:	607b      	str	r3, [r7, #4]
  return(result);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d105      	bne.n	800a67e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a672:	f3ef 8311 	mrs	r3, BASEPRI
 800a676:	603b      	str	r3, [r7, #0]
  return(result);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d007      	beq.n	800a68e <osKernelInitialize+0x3a>
 800a67e:	4b0e      	ldr	r3, [pc, #56]	; (800a6b8 <osKernelInitialize+0x64>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b02      	cmp	r3, #2
 800a684:	d103      	bne.n	800a68e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a686:	f06f 0305 	mvn.w	r3, #5
 800a68a:	60fb      	str	r3, [r7, #12]
 800a68c:	e00c      	b.n	800a6a8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a68e:	4b0a      	ldr	r3, [pc, #40]	; (800a6b8 <osKernelInitialize+0x64>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d105      	bne.n	800a6a2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a696:	4b08      	ldr	r3, [pc, #32]	; (800a6b8 <osKernelInitialize+0x64>)
 800a698:	2201      	movs	r2, #1
 800a69a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	60fb      	str	r3, [r7, #12]
 800a6a0:	e002      	b.n	800a6a8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a6a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3714      	adds	r7, #20
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	2000026c 	.word	0x2000026c

0800a6bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6c2:	f3ef 8305 	mrs	r3, IPSR
 800a6c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a6c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10f      	bne.n	800a6ee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a6d2:	607b      	str	r3, [r7, #4]
  return(result);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d105      	bne.n	800a6e6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a6da:	f3ef 8311 	mrs	r3, BASEPRI
 800a6de:	603b      	str	r3, [r7, #0]
  return(result);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d007      	beq.n	800a6f6 <osKernelStart+0x3a>
 800a6e6:	4b0f      	ldr	r3, [pc, #60]	; (800a724 <osKernelStart+0x68>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d103      	bne.n	800a6f6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a6ee:	f06f 0305 	mvn.w	r3, #5
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	e010      	b.n	800a718 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a6f6:	4b0b      	ldr	r3, [pc, #44]	; (800a724 <osKernelStart+0x68>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d109      	bne.n	800a712 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a6fe:	f7ff ffa1 	bl	800a644 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a702:	4b08      	ldr	r3, [pc, #32]	; (800a724 <osKernelStart+0x68>)
 800a704:	2202      	movs	r2, #2
 800a706:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a708:	f001 f904 	bl	800b914 <vTaskStartScheduler>
      stat = osOK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	60fb      	str	r3, [r7, #12]
 800a710:	e002      	b.n	800a718 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a712:	f04f 33ff 	mov.w	r3, #4294967295
 800a716:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a718:	68fb      	ldr	r3, [r7, #12]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	2000026c 	.word	0x2000026c

0800a728 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a728:	b580      	push	{r7, lr}
 800a72a:	b090      	sub	sp, #64	; 0x40
 800a72c:	af04      	add	r7, sp, #16
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a734:	2300      	movs	r3, #0
 800a736:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a738:	f3ef 8305 	mrs	r3, IPSR
 800a73c:	61fb      	str	r3, [r7, #28]
  return(result);
 800a73e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a740:	2b00      	cmp	r3, #0
 800a742:	f040 8090 	bne.w	800a866 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a746:	f3ef 8310 	mrs	r3, PRIMASK
 800a74a:	61bb      	str	r3, [r7, #24]
  return(result);
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d105      	bne.n	800a75e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a752:	f3ef 8311 	mrs	r3, BASEPRI
 800a756:	617b      	str	r3, [r7, #20]
  return(result);
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d003      	beq.n	800a766 <osThreadNew+0x3e>
 800a75e:	4b44      	ldr	r3, [pc, #272]	; (800a870 <osThreadNew+0x148>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2b02      	cmp	r3, #2
 800a764:	d07f      	beq.n	800a866 <osThreadNew+0x13e>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d07c      	beq.n	800a866 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800a76c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a770:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a772:	2318      	movs	r3, #24
 800a774:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a776:	2300      	movs	r3, #0
 800a778:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a77a:	f04f 33ff 	mov.w	r3, #4294967295
 800a77e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d045      	beq.n	800a812 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <osThreadNew+0x6c>
        name = attr->name;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d002      	beq.n	800a7a2 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d008      	beq.n	800a7ba <osThreadNew+0x92>
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	2b38      	cmp	r3, #56	; 0x38
 800a7ac:	d805      	bhi.n	800a7ba <osThreadNew+0x92>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d001      	beq.n	800a7be <osThreadNew+0x96>
        return (NULL);
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	e054      	b.n	800a868 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	695b      	ldr	r3, [r3, #20]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d003      	beq.n	800a7ce <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	695b      	ldr	r3, [r3, #20]
 800a7ca:	089b      	lsrs	r3, r3, #2
 800a7cc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00e      	beq.n	800a7f4 <osThreadNew+0xcc>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	2b5b      	cmp	r3, #91	; 0x5b
 800a7dc:	d90a      	bls.n	800a7f4 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d006      	beq.n	800a7f4 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d002      	beq.n	800a7f4 <osThreadNew+0xcc>
        mem = 1;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	623b      	str	r3, [r7, #32]
 800a7f2:	e010      	b.n	800a816 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10c      	bne.n	800a816 <osThreadNew+0xee>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d108      	bne.n	800a816 <osThreadNew+0xee>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d104      	bne.n	800a816 <osThreadNew+0xee>
          mem = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	623b      	str	r3, [r7, #32]
 800a810:	e001      	b.n	800a816 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d110      	bne.n	800a83e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a824:	9202      	str	r2, [sp, #8]
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a830:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f000 fed0 	bl	800b5d8 <xTaskCreateStatic>
 800a838:	4603      	mov	r3, r0
 800a83a:	613b      	str	r3, [r7, #16]
 800a83c:	e013      	b.n	800a866 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800a83e:	6a3b      	ldr	r3, [r7, #32]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d110      	bne.n	800a866 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a846:	b29a      	uxth	r2, r3
 800a848:	f107 0310 	add.w	r3, r7, #16
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 ff18 	bl	800b68c <xTaskCreate>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d001      	beq.n	800a866 <osThreadNew+0x13e>
          hTask = NULL;
 800a862:	2300      	movs	r3, #0
 800a864:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a866:	693b      	ldr	r3, [r7, #16]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3730      	adds	r7, #48	; 0x30
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	2000026c 	.word	0x2000026c

0800a874 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800a874:	b580      	push	{r7, lr}
 800a876:	b08a      	sub	sp, #40	; 0x28
 800a878:	af02      	add	r7, sp, #8
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d002      	beq.n	800a88e <osThreadFlagsSet+0x1a>
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	da03      	bge.n	800a896 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800a88e:	f06f 0303 	mvn.w	r3, #3
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	e046      	b.n	800a924 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800a896:	f04f 33ff 	mov.w	r3, #4294967295
 800a89a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a89c:	f3ef 8305 	mrs	r3, IPSR
 800a8a0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a8a2:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10f      	bne.n	800a8c8 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8ac:	617b      	str	r3, [r7, #20]
  return(result);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d105      	bne.n	800a8c0 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8b4:	f3ef 8311 	mrs	r3, BASEPRI
 800a8b8:	613b      	str	r3, [r7, #16]
  return(result);
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d024      	beq.n	800a90a <osThreadFlagsSet+0x96>
 800a8c0:	4b1b      	ldr	r3, [pc, #108]	; (800a930 <osThreadFlagsSet+0xbc>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d120      	bne.n	800a90a <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800a8cc:	f107 0308 	add.w	r3, r7, #8
 800a8d0:	9300      	str	r3, [sp, #0]
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	69f8      	ldr	r0, [r7, #28]
 800a8da:	f001 fe4b 	bl	800c574 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800a8de:	f107 020c 	add.w	r2, r7, #12
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	69f8      	ldr	r0, [r7, #28]
 800a8ee:	f001 fe41 	bl	800c574 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d015      	beq.n	800a924 <osThreadFlagsSet+0xb0>
 800a8f8:	4b0e      	ldr	r3, [pc, #56]	; (800a934 <osThreadFlagsSet+0xc0>)
 800a8fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	e00c      	b.n	800a924 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800a90a:	2300      	movs	r3, #0
 800a90c:	2201      	movs	r2, #1
 800a90e:	6839      	ldr	r1, [r7, #0]
 800a910:	69f8      	ldr	r0, [r7, #28]
 800a912:	f001 fd79 	bl	800c408 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800a916:	f107 030c 	add.w	r3, r7, #12
 800a91a:	2200      	movs	r2, #0
 800a91c:	2100      	movs	r1, #0
 800a91e:	69f8      	ldr	r0, [r7, #28]
 800a920:	f001 fd72 	bl	800c408 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a924:	68fb      	ldr	r3, [r7, #12]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3720      	adds	r7, #32
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	2000026c 	.word	0x2000026c
 800a934:	e000ed04 	.word	0xe000ed04

0800a938 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800a938:	b580      	push	{r7, lr}
 800a93a:	b08e      	sub	sp, #56	; 0x38
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a944:	f3ef 8305 	mrs	r3, IPSR
 800a948:	61fb      	str	r3, [r7, #28]
  return(result);
 800a94a:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10f      	bne.n	800a970 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a950:	f3ef 8310 	mrs	r3, PRIMASK
 800a954:	61bb      	str	r3, [r7, #24]
  return(result);
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d105      	bne.n	800a968 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a95c:	f3ef 8311 	mrs	r3, BASEPRI
 800a960:	617b      	str	r3, [r7, #20]
  return(result);
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d007      	beq.n	800a978 <osThreadFlagsWait+0x40>
 800a968:	4b3c      	ldr	r3, [pc, #240]	; (800aa5c <osThreadFlagsWait+0x124>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d103      	bne.n	800a978 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800a970:	f06f 0305 	mvn.w	r3, #5
 800a974:	637b      	str	r3, [r7, #52]	; 0x34
 800a976:	e06b      	b.n	800aa50 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	da03      	bge.n	800a986 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800a97e:	f06f 0303 	mvn.w	r3, #3
 800a982:	637b      	str	r3, [r7, #52]	; 0x34
 800a984:	e064      	b.n	800aa50 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	f003 0302 	and.w	r3, r3, #2
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <osThreadFlagsWait+0x5e>
      clear = 0U;
 800a990:	2300      	movs	r3, #0
 800a992:	633b      	str	r3, [r7, #48]	; 0x30
 800a994:	e001      	b.n	800a99a <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800a99a:	2300      	movs	r3, #0
 800a99c:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800a9a2:	f001 f8fd 	bl	800bba0 <xTaskGetTickCount>
 800a9a6:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800a9a8:	f107 0210 	add.w	r2, r7, #16
 800a9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	f001 fccf 	bl	800c354 <xTaskNotifyWait>
 800a9b6:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d137      	bne.n	800aa2e <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800a9be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	4013      	ands	r3, r2
 800a9c4:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00c      	beq.n	800a9f2 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9dc:	4013      	ands	r3, r2
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d032      	beq.n	800aa4a <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10f      	bne.n	800aa0a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800a9ea:	f06f 0302 	mvn.w	r3, #2
 800a9ee:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800a9f0:	e02e      	b.n	800aa50 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d128      	bne.n	800aa4e <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d103      	bne.n	800aa0a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800aa02:	f06f 0302 	mvn.w	r3, #2
 800aa06:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800aa08:	e022      	b.n	800aa50 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800aa0a:	f001 f8c9 	bl	800bba0 <xTaskGetTickCount>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800aa16:	6a3a      	ldr	r2, [r7, #32]
 800aa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d902      	bls.n	800aa24 <osThreadFlagsWait+0xec>
          tout  = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa22:	e00e      	b.n	800aa42 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800aa24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa2c:	e009      	b.n	800aa42 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d103      	bne.n	800aa3c <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800aa34:	f06f 0302 	mvn.w	r3, #2
 800aa38:	637b      	str	r3, [r7, #52]	; 0x34
 800aa3a:	e002      	b.n	800aa42 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800aa3c:	f06f 0301 	mvn.w	r3, #1
 800aa40:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800aa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1af      	bne.n	800a9a8 <osThreadFlagsWait+0x70>
 800aa48:	e002      	b.n	800aa50 <osThreadFlagsWait+0x118>
            break;
 800aa4a:	bf00      	nop
 800aa4c:	e000      	b.n	800aa50 <osThreadFlagsWait+0x118>
            break;
 800aa4e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800aa50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3738      	adds	r7, #56	; 0x38
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	2000026c 	.word	0x2000026c

0800aa60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4a07      	ldr	r2, [pc, #28]	; (800aa8c <vApplicationGetIdleTaskMemory+0x2c>)
 800aa70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	4a06      	ldr	r2, [pc, #24]	; (800aa90 <vApplicationGetIdleTaskMemory+0x30>)
 800aa76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa7e:	601a      	str	r2, [r3, #0]
}
 800aa80:	bf00      	nop
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	20000270 	.word	0x20000270
 800aa90:	200002cc 	.word	0x200002cc

0800aa94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4a07      	ldr	r2, [pc, #28]	; (800aac0 <vApplicationGetTimerTaskMemory+0x2c>)
 800aaa4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	4a06      	ldr	r2, [pc, #24]	; (800aac4 <vApplicationGetTimerTaskMemory+0x30>)
 800aaaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aab2:	601a      	str	r2, [r3, #0]
}
 800aab4:	bf00      	nop
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	20000acc 	.word	0x20000acc
 800aac4:	20000b28 	.word	0x20000b28

0800aac8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f103 0208 	add.w	r2, r3, #8
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f04f 32ff 	mov.w	r2, #4294967295
 800aae0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f103 0208 	add.w	r2, r3, #8
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f103 0208 	add.w	r2, r3, #8
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aafc:	bf00      	nop
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab16:	bf00      	nop
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab22:	b480      	push	{r7}
 800ab24:	b085      	sub	sp, #20
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	689a      	ldr	r2, [r3, #8]
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	683a      	ldr	r2, [r7, #0]
 800ab4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	601a      	str	r2, [r3, #0]
}
 800ab5e:	bf00      	nop
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b085      	sub	sp, #20
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab80:	d103      	bne.n	800ab8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	60fb      	str	r3, [r7, #12]
 800ab88:	e00c      	b.n	800aba4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	e002      	b.n	800ab98 <vListInsert+0x2e>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	60fb      	str	r3, [r7, #12]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d2f6      	bcs.n	800ab92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	685a      	ldr	r2, [r3, #4]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	601a      	str	r2, [r3, #0]
}
 800abd0:	bf00      	nop
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	6892      	ldr	r2, [r2, #8]
 800abf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	6852      	ldr	r2, [r2, #4]
 800abfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d103      	bne.n	800ac10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	689a      	ldr	r2, [r3, #8]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	1e5a      	subs	r2, r3, #1
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d109      	bne.n	800ac58 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac48:	f383 8811 	msr	BASEPRI, r3
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	f3bf 8f4f 	dsb	sy
 800ac54:	60bb      	str	r3, [r7, #8]
 800ac56:	e7fe      	b.n	800ac56 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ac58:	f002 fa28 	bl	800d0ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac64:	68f9      	ldr	r1, [r7, #12]
 800ac66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac68:	fb01 f303 	mul.w	r3, r1, r3
 800ac6c:	441a      	add	r2, r3
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	68f9      	ldr	r1, [r7, #12]
 800ac8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac8e:	fb01 f303 	mul.w	r3, r1, r3
 800ac92:	441a      	add	r2, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	22ff      	movs	r2, #255	; 0xff
 800ac9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	22ff      	movs	r2, #255	; 0xff
 800aca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d114      	bne.n	800acd8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	691b      	ldr	r3, [r3, #16]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d01a      	beq.n	800acec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	3310      	adds	r3, #16
 800acba:	4618      	mov	r0, r3
 800acbc:	f001 f8e2 	bl	800be84 <xTaskRemoveFromEventList>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d012      	beq.n	800acec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800acc6:	4b0d      	ldr	r3, [pc, #52]	; (800acfc <xQueueGenericReset+0xcc>)
 800acc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800accc:	601a      	str	r2, [r3, #0]
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	e009      	b.n	800acec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3310      	adds	r3, #16
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff fef3 	bl	800aac8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	3324      	adds	r3, #36	; 0x24
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7ff feee 	bl	800aac8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800acec:	f002 fa0c 	bl	800d108 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800acf0:	2301      	movs	r3, #1
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	e000ed04 	.word	0xe000ed04

0800ad00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b08e      	sub	sp, #56	; 0x38
 800ad04:	af02      	add	r7, sp, #8
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
 800ad0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d109      	bne.n	800ad28 <xQueueGenericCreateStatic+0x28>
 800ad14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad18:	f383 8811 	msr	BASEPRI, r3
 800ad1c:	f3bf 8f6f 	isb	sy
 800ad20:	f3bf 8f4f 	dsb	sy
 800ad24:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad26:	e7fe      	b.n	800ad26 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d109      	bne.n	800ad42 <xQueueGenericCreateStatic+0x42>
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad40:	e7fe      	b.n	800ad40 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <xQueueGenericCreateStatic+0x4e>
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <xQueueGenericCreateStatic+0x52>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e000      	b.n	800ad54 <xQueueGenericCreateStatic+0x54>
 800ad52:	2300      	movs	r3, #0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d109      	bne.n	800ad6c <xQueueGenericCreateStatic+0x6c>
 800ad58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5c:	f383 8811 	msr	BASEPRI, r3
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	623b      	str	r3, [r7, #32]
 800ad6a:	e7fe      	b.n	800ad6a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d102      	bne.n	800ad78 <xQueueGenericCreateStatic+0x78>
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d101      	bne.n	800ad7c <xQueueGenericCreateStatic+0x7c>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e000      	b.n	800ad7e <xQueueGenericCreateStatic+0x7e>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d109      	bne.n	800ad96 <xQueueGenericCreateStatic+0x96>
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	61fb      	str	r3, [r7, #28]
 800ad94:	e7fe      	b.n	800ad94 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad96:	2350      	movs	r3, #80	; 0x50
 800ad98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	2b50      	cmp	r3, #80	; 0x50
 800ad9e:	d009      	beq.n	800adb4 <xQueueGenericCreateStatic+0xb4>
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	61bb      	str	r3, [r7, #24]
 800adb2:	e7fe      	b.n	800adb2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800adb4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800adba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00d      	beq.n	800addc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800adc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adc8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	4613      	mov	r3, r2
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	68b9      	ldr	r1, [r7, #8]
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f000 f805 	bl	800ade6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800addc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800adde:	4618      	mov	r0, r3
 800ade0:	3730      	adds	r7, #48	; 0x30
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	607a      	str	r2, [r7, #4]
 800adf2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d103      	bne.n	800ae02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	69ba      	ldr	r2, [r7, #24]
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	e002      	b.n	800ae08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae14:	2101      	movs	r1, #1
 800ae16:	69b8      	ldr	r0, [r7, #24]
 800ae18:	f7ff ff0a 	bl	800ac30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	78fa      	ldrb	r2, [r7, #3]
 800ae20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae24:	bf00      	nop
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08e      	sub	sp, #56	; 0x38
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d109      	bne.n	800ae5c <xQueueGenericSend+0x30>
 800ae48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4c:	f383 8811 	msr	BASEPRI, r3
 800ae50:	f3bf 8f6f 	isb	sy
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae5a:	e7fe      	b.n	800ae5a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d103      	bne.n	800ae6a <xQueueGenericSend+0x3e>
 800ae62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d101      	bne.n	800ae6e <xQueueGenericSend+0x42>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e000      	b.n	800ae70 <xQueueGenericSend+0x44>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d109      	bne.n	800ae88 <xQueueGenericSend+0x5c>
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	627b      	str	r3, [r7, #36]	; 0x24
 800ae86:	e7fe      	b.n	800ae86 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d103      	bne.n	800ae96 <xQueueGenericSend+0x6a>
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d101      	bne.n	800ae9a <xQueueGenericSend+0x6e>
 800ae96:	2301      	movs	r3, #1
 800ae98:	e000      	b.n	800ae9c <xQueueGenericSend+0x70>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d109      	bne.n	800aeb4 <xQueueGenericSend+0x88>
 800aea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	623b      	str	r3, [r7, #32]
 800aeb2:	e7fe      	b.n	800aeb2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aeb4:	f001 f9c4 	bl	800c240 <xTaskGetSchedulerState>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d102      	bne.n	800aec4 <xQueueGenericSend+0x98>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d101      	bne.n	800aec8 <xQueueGenericSend+0x9c>
 800aec4:	2301      	movs	r3, #1
 800aec6:	e000      	b.n	800aeca <xQueueGenericSend+0x9e>
 800aec8:	2300      	movs	r3, #0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d109      	bne.n	800aee2 <xQueueGenericSend+0xb6>
 800aece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed2:	f383 8811 	msr	BASEPRI, r3
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	61fb      	str	r3, [r7, #28]
 800aee0:	e7fe      	b.n	800aee0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aee2:	f002 f8e3 	bl	800d0ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d302      	bcc.n	800aef8 <xQueueGenericSend+0xcc>
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d129      	bne.n	800af4c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	68b9      	ldr	r1, [r7, #8]
 800aefc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aefe:	f000 f9ff 	bl	800b300 <prvCopyDataToQueue>
 800af02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d010      	beq.n	800af2e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0e:	3324      	adds	r3, #36	; 0x24
 800af10:	4618      	mov	r0, r3
 800af12:	f000 ffb7 	bl	800be84 <xTaskRemoveFromEventList>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d013      	beq.n	800af44 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800af1c:	4b3f      	ldr	r3, [pc, #252]	; (800b01c <xQueueGenericSend+0x1f0>)
 800af1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	e00a      	b.n	800af44 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af30:	2b00      	cmp	r3, #0
 800af32:	d007      	beq.n	800af44 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af34:	4b39      	ldr	r3, [pc, #228]	; (800b01c <xQueueGenericSend+0x1f0>)
 800af36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	f3bf 8f4f 	dsb	sy
 800af40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af44:	f002 f8e0 	bl	800d108 <vPortExitCritical>
				return pdPASS;
 800af48:	2301      	movs	r3, #1
 800af4a:	e063      	b.n	800b014 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d103      	bne.n	800af5a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af52:	f002 f8d9 	bl	800d108 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af56:	2300      	movs	r3, #0
 800af58:	e05c      	b.n	800b014 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d106      	bne.n	800af6e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af60:	f107 0314 	add.w	r3, r7, #20
 800af64:	4618      	mov	r0, r3
 800af66:	f000 fff1 	bl	800bf4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af6a:	2301      	movs	r3, #1
 800af6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af6e:	f002 f8cb 	bl	800d108 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af72:	f000 fd33 	bl	800b9dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af76:	f002 f899 	bl	800d0ac <vPortEnterCritical>
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af80:	b25b      	sxtb	r3, r3
 800af82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af86:	d103      	bne.n	800af90 <xQueueGenericSend+0x164>
 800af88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af96:	b25b      	sxtb	r3, r3
 800af98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af9c:	d103      	bne.n	800afa6 <xQueueGenericSend+0x17a>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afa6:	f002 f8af 	bl	800d108 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afaa:	1d3a      	adds	r2, r7, #4
 800afac:	f107 0314 	add.w	r3, r7, #20
 800afb0:	4611      	mov	r1, r2
 800afb2:	4618      	mov	r0, r3
 800afb4:	f000 ffe0 	bl	800bf78 <xTaskCheckForTimeOut>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d124      	bne.n	800b008 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800afbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afc0:	f000 fa96 	bl	800b4f0 <prvIsQueueFull>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d018      	beq.n	800affc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800afca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afcc:	3310      	adds	r3, #16
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	4611      	mov	r1, r2
 800afd2:	4618      	mov	r0, r3
 800afd4:	f000 ff08 	bl	800bde8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800afd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afda:	f000 fa21 	bl	800b420 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800afde:	f000 fd43 	bl	800ba68 <xTaskResumeAll>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f47f af7c 	bne.w	800aee2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800afea:	4b0c      	ldr	r3, [pc, #48]	; (800b01c <xQueueGenericSend+0x1f0>)
 800afec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aff0:	601a      	str	r2, [r3, #0]
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	e772      	b.n	800aee2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800affc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800affe:	f000 fa0f 	bl	800b420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b002:	f000 fd31 	bl	800ba68 <xTaskResumeAll>
 800b006:	e76c      	b.n	800aee2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b00a:	f000 fa09 	bl	800b420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b00e:	f000 fd2b 	bl	800ba68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b012:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b014:	4618      	mov	r0, r3
 800b016:	3738      	adds	r7, #56	; 0x38
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	e000ed04 	.word	0xe000ed04

0800b020 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b08e      	sub	sp, #56	; 0x38
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
 800b02c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	2b00      	cmp	r3, #0
 800b036:	d109      	bne.n	800b04c <xQueueGenericSendFromISR+0x2c>
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	627b      	str	r3, [r7, #36]	; 0x24
 800b04a:	e7fe      	b.n	800b04a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d103      	bne.n	800b05a <xQueueGenericSendFromISR+0x3a>
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b056:	2b00      	cmp	r3, #0
 800b058:	d101      	bne.n	800b05e <xQueueGenericSendFromISR+0x3e>
 800b05a:	2301      	movs	r3, #1
 800b05c:	e000      	b.n	800b060 <xQueueGenericSendFromISR+0x40>
 800b05e:	2300      	movs	r3, #0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d109      	bne.n	800b078 <xQueueGenericSendFromISR+0x58>
 800b064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b068:	f383 8811 	msr	BASEPRI, r3
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	623b      	str	r3, [r7, #32]
 800b076:	e7fe      	b.n	800b076 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d103      	bne.n	800b086 <xQueueGenericSendFromISR+0x66>
 800b07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b082:	2b01      	cmp	r3, #1
 800b084:	d101      	bne.n	800b08a <xQueueGenericSendFromISR+0x6a>
 800b086:	2301      	movs	r3, #1
 800b088:	e000      	b.n	800b08c <xQueueGenericSendFromISR+0x6c>
 800b08a:	2300      	movs	r3, #0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d109      	bne.n	800b0a4 <xQueueGenericSendFromISR+0x84>
 800b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	61fb      	str	r3, [r7, #28]
 800b0a2:	e7fe      	b.n	800b0a2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0a4:	f002 f8de 	bl	800d264 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b0a8:	f3ef 8211 	mrs	r2, BASEPRI
 800b0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b0:	f383 8811 	msr	BASEPRI, r3
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	61ba      	str	r2, [r7, #24]
 800b0be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b0c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d302      	bcc.n	800b0d6 <xQueueGenericSendFromISR+0xb6>
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	d12c      	bne.n	800b130 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0e6:	f000 f90b 	bl	800b300 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f2:	d112      	bne.n	800b11a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d016      	beq.n	800b12a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	3324      	adds	r3, #36	; 0x24
 800b100:	4618      	mov	r0, r3
 800b102:	f000 febf 	bl	800be84 <xTaskRemoveFromEventList>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00e      	beq.n	800b12a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00b      	beq.n	800b12a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2201      	movs	r2, #1
 800b116:	601a      	str	r2, [r3, #0]
 800b118:	e007      	b.n	800b12a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b11a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b11e:	3301      	adds	r3, #1
 800b120:	b2db      	uxtb	r3, r3
 800b122:	b25a      	sxtb	r2, r3
 800b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b12a:	2301      	movs	r3, #1
 800b12c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b12e:	e001      	b.n	800b134 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b130:	2300      	movs	r3, #0
 800b132:	637b      	str	r3, [r7, #52]	; 0x34
 800b134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b136:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b140:	4618      	mov	r0, r3
 800b142:	3738      	adds	r7, #56	; 0x38
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08c      	sub	sp, #48	; 0x30
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b154:	2300      	movs	r3, #0
 800b156:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d109      	bne.n	800b176 <xQueueReceive+0x2e>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	623b      	str	r3, [r7, #32]
 800b174:	e7fe      	b.n	800b174 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d103      	bne.n	800b184 <xQueueReceive+0x3c>
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <xQueueReceive+0x40>
 800b184:	2301      	movs	r3, #1
 800b186:	e000      	b.n	800b18a <xQueueReceive+0x42>
 800b188:	2300      	movs	r3, #0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d109      	bne.n	800b1a2 <xQueueReceive+0x5a>
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	61fb      	str	r3, [r7, #28]
 800b1a0:	e7fe      	b.n	800b1a0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1a2:	f001 f84d 	bl	800c240 <xTaskGetSchedulerState>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d102      	bne.n	800b1b2 <xQueueReceive+0x6a>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <xQueueReceive+0x6e>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e000      	b.n	800b1b8 <xQueueReceive+0x70>
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d109      	bne.n	800b1d0 <xQueueReceive+0x88>
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	61bb      	str	r3, [r7, #24]
 800b1ce:	e7fe      	b.n	800b1ce <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1d0:	f001 ff6c 	bl	800d0ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d01f      	beq.n	800b220 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1e0:	68b9      	ldr	r1, [r7, #8]
 800b1e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1e4:	f000 f8f6 	bl	800b3d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ea:	1e5a      	subs	r2, r3, #1
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00f      	beq.n	800b218 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fa:	3310      	adds	r3, #16
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f000 fe41 	bl	800be84 <xTaskRemoveFromEventList>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d007      	beq.n	800b218 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b208:	4b3c      	ldr	r3, [pc, #240]	; (800b2fc <xQueueReceive+0x1b4>)
 800b20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b20e:	601a      	str	r2, [r3, #0]
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b218:	f001 ff76 	bl	800d108 <vPortExitCritical>
				return pdPASS;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e069      	b.n	800b2f4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d103      	bne.n	800b22e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b226:	f001 ff6f 	bl	800d108 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b22a:	2300      	movs	r3, #0
 800b22c:	e062      	b.n	800b2f4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b230:	2b00      	cmp	r3, #0
 800b232:	d106      	bne.n	800b242 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b234:	f107 0310 	add.w	r3, r7, #16
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 fe87 	bl	800bf4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b23e:	2301      	movs	r3, #1
 800b240:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b242:	f001 ff61 	bl	800d108 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b246:	f000 fbc9 	bl	800b9dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b24a:	f001 ff2f 	bl	800d0ac <vPortEnterCritical>
 800b24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b254:	b25b      	sxtb	r3, r3
 800b256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b25a:	d103      	bne.n	800b264 <xQueueReceive+0x11c>
 800b25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b26a:	b25b      	sxtb	r3, r3
 800b26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b270:	d103      	bne.n	800b27a <xQueueReceive+0x132>
 800b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b274:	2200      	movs	r2, #0
 800b276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b27a:	f001 ff45 	bl	800d108 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b27e:	1d3a      	adds	r2, r7, #4
 800b280:	f107 0310 	add.w	r3, r7, #16
 800b284:	4611      	mov	r1, r2
 800b286:	4618      	mov	r0, r3
 800b288:	f000 fe76 	bl	800bf78 <xTaskCheckForTimeOut>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d123      	bne.n	800b2da <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b294:	f000 f916 	bl	800b4c4 <prvIsQueueEmpty>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d017      	beq.n	800b2ce <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	3324      	adds	r3, #36	; 0x24
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 fd9e 	bl	800bde8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2ae:	f000 f8b7 	bl	800b420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2b2:	f000 fbd9 	bl	800ba68 <xTaskResumeAll>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d189      	bne.n	800b1d0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b2bc:	4b0f      	ldr	r3, [pc, #60]	; (800b2fc <xQueueReceive+0x1b4>)
 800b2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	e780      	b.n	800b1d0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b2ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2d0:	f000 f8a6 	bl	800b420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2d4:	f000 fbc8 	bl	800ba68 <xTaskResumeAll>
 800b2d8:	e77a      	b.n	800b1d0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2dc:	f000 f8a0 	bl	800b420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2e0:	f000 fbc2 	bl	800ba68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2e6:	f000 f8ed 	bl	800b4c4 <prvIsQueueEmpty>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f43f af6f 	beq.w	800b1d0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3730      	adds	r7, #48	; 0x30
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	e000ed04 	.word	0xe000ed04

0800b300 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b30c:	2300      	movs	r3, #0
 800b30e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b314:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10d      	bne.n	800b33a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d14d      	bne.n	800b3c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 ffa6 	bl	800c27c <xTaskPriorityDisinherit>
 800b330:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	609a      	str	r2, [r3, #8]
 800b338:	e043      	b.n	800b3c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d119      	bne.n	800b374 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6858      	ldr	r0, [r3, #4]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b348:	461a      	mov	r2, r3
 800b34a:	68b9      	ldr	r1, [r7, #8]
 800b34c:	f003 f90e 	bl	800e56c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b358:	441a      	add	r2, r3
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	685a      	ldr	r2, [r3, #4]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	429a      	cmp	r2, r3
 800b368:	d32b      	bcc.n	800b3c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	605a      	str	r2, [r3, #4]
 800b372:	e026      	b.n	800b3c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	68d8      	ldr	r0, [r3, #12]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37c:	461a      	mov	r2, r3
 800b37e:	68b9      	ldr	r1, [r7, #8]
 800b380:	f003 f8f4 	bl	800e56c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	68da      	ldr	r2, [r3, #12]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38c:	425b      	negs	r3, r3
 800b38e:	441a      	add	r2, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	68da      	ldr	r2, [r3, #12]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d207      	bcs.n	800b3b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	689a      	ldr	r2, [r3, #8]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a8:	425b      	negs	r3, r3
 800b3aa:	441a      	add	r2, r3
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d105      	bne.n	800b3c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	1c5a      	adds	r2, r3, #1
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b3ca:	697b      	ldr	r3, [r7, #20]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3718      	adds	r7, #24
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d018      	beq.n	800b418 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68da      	ldr	r2, [r3, #12]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ee:	441a      	add	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	68da      	ldr	r2, [r3, #12]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d303      	bcc.n	800b408 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68d9      	ldr	r1, [r3, #12]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b410:	461a      	mov	r2, r3
 800b412:	6838      	ldr	r0, [r7, #0]
 800b414:	f003 f8aa 	bl	800e56c <memcpy>
	}
}
 800b418:	bf00      	nop
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b428:	f001 fe40 	bl	800d0ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b432:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b434:	e011      	b.n	800b45a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d012      	beq.n	800b464 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	3324      	adds	r3, #36	; 0x24
 800b442:	4618      	mov	r0, r3
 800b444:	f000 fd1e 	bl	800be84 <xTaskRemoveFromEventList>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d001      	beq.n	800b452 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b44e:	f000 fdf3 	bl	800c038 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b452:	7bfb      	ldrb	r3, [r7, #15]
 800b454:	3b01      	subs	r3, #1
 800b456:	b2db      	uxtb	r3, r3
 800b458:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	dce9      	bgt.n	800b436 <prvUnlockQueue+0x16>
 800b462:	e000      	b.n	800b466 <prvUnlockQueue+0x46>
					break;
 800b464:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	22ff      	movs	r2, #255	; 0xff
 800b46a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b46e:	f001 fe4b 	bl	800d108 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b472:	f001 fe1b 	bl	800d0ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b47c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b47e:	e011      	b.n	800b4a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d012      	beq.n	800b4ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3310      	adds	r3, #16
 800b48c:	4618      	mov	r0, r3
 800b48e:	f000 fcf9 	bl	800be84 <xTaskRemoveFromEventList>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d001      	beq.n	800b49c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b498:	f000 fdce 	bl	800c038 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b49c:	7bbb      	ldrb	r3, [r7, #14]
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	dce9      	bgt.n	800b480 <prvUnlockQueue+0x60>
 800b4ac:	e000      	b.n	800b4b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b4ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	22ff      	movs	r2, #255	; 0xff
 800b4b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b4b8:	f001 fe26 	bl	800d108 <vPortExitCritical>
}
 800b4bc:	bf00      	nop
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4cc:	f001 fdee 	bl	800d0ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d102      	bne.n	800b4de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	e001      	b.n	800b4e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4e2:	f001 fe11 	bl	800d108 <vPortExitCritical>

	return xReturn;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4f8:	f001 fdd8 	bl	800d0ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b504:	429a      	cmp	r2, r3
 800b506:	d102      	bne.n	800b50e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b508:	2301      	movs	r3, #1
 800b50a:	60fb      	str	r3, [r7, #12]
 800b50c:	e001      	b.n	800b512 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b50e:	2300      	movs	r3, #0
 800b510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b512:	f001 fdf9 	bl	800d108 <vPortExitCritical>

	return xReturn;
 800b516:	68fb      	ldr	r3, [r7, #12]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b52a:	2300      	movs	r3, #0
 800b52c:	60fb      	str	r3, [r7, #12]
 800b52e:	e014      	b.n	800b55a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b530:	4a0e      	ldr	r2, [pc, #56]	; (800b56c <vQueueAddToRegistry+0x4c>)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d10b      	bne.n	800b554 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b53c:	490b      	ldr	r1, [pc, #44]	; (800b56c <vQueueAddToRegistry+0x4c>)
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	683a      	ldr	r2, [r7, #0]
 800b542:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b546:	4a09      	ldr	r2, [pc, #36]	; (800b56c <vQueueAddToRegistry+0x4c>)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	4413      	add	r3, r2
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b552:	e005      	b.n	800b560 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	3301      	adds	r3, #1
 800b558:	60fb      	str	r3, [r7, #12]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2b07      	cmp	r3, #7
 800b55e:	d9e7      	bls.n	800b530 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b560:	bf00      	nop
 800b562:	3714      	adds	r7, #20
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr
 800b56c:	20004c88 	.word	0x20004c88

0800b570 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b580:	f001 fd94 	bl	800d0ac <vPortEnterCritical>
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b58a:	b25b      	sxtb	r3, r3
 800b58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b590:	d103      	bne.n	800b59a <vQueueWaitForMessageRestricted+0x2a>
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	2200      	movs	r2, #0
 800b596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5a0:	b25b      	sxtb	r3, r3
 800b5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a6:	d103      	bne.n	800b5b0 <vQueueWaitForMessageRestricted+0x40>
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5b0:	f001 fdaa 	bl	800d108 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d106      	bne.n	800b5ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	3324      	adds	r3, #36	; 0x24
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	68b9      	ldr	r1, [r7, #8]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 fc33 	bl	800be30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b5ca:	6978      	ldr	r0, [r7, #20]
 800b5cc:	f7ff ff28 	bl	800b420 <prvUnlockQueue>
	}
 800b5d0:	bf00      	nop
 800b5d2:	3718      	adds	r7, #24
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b08e      	sub	sp, #56	; 0x38
 800b5dc:	af04      	add	r7, sp, #16
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d109      	bne.n	800b600 <xTaskCreateStatic+0x28>
 800b5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	623b      	str	r3, [r7, #32]
 800b5fe:	e7fe      	b.n	800b5fe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b602:	2b00      	cmp	r3, #0
 800b604:	d109      	bne.n	800b61a <xTaskCreateStatic+0x42>
 800b606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	61fb      	str	r3, [r7, #28]
 800b618:	e7fe      	b.n	800b618 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b61a:	235c      	movs	r3, #92	; 0x5c
 800b61c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	2b5c      	cmp	r3, #92	; 0x5c
 800b622:	d009      	beq.n	800b638 <xTaskCreateStatic+0x60>
 800b624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b628:	f383 8811 	msr	BASEPRI, r3
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	61bb      	str	r3, [r7, #24]
 800b636:	e7fe      	b.n	800b636 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b638:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d01e      	beq.n	800b67e <xTaskCreateStatic+0xa6>
 800b640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b642:	2b00      	cmp	r3, #0
 800b644:	d01b      	beq.n	800b67e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b648:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b64e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b652:	2202      	movs	r2, #2
 800b654:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b658:	2300      	movs	r3, #0
 800b65a:	9303      	str	r3, [sp, #12]
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	9302      	str	r3, [sp, #8]
 800b660:	f107 0314 	add.w	r3, r7, #20
 800b664:	9301      	str	r3, [sp, #4]
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	68b9      	ldr	r1, [r7, #8]
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 f850 	bl	800b716 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b676:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b678:	f000 f8dc 	bl	800b834 <prvAddNewTaskToReadyList>
 800b67c:	e001      	b.n	800b682 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b67e:	2300      	movs	r3, #0
 800b680:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b682:	697b      	ldr	r3, [r7, #20]
	}
 800b684:	4618      	mov	r0, r3
 800b686:	3728      	adds	r7, #40	; 0x28
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b08c      	sub	sp, #48	; 0x30
 800b690:	af04      	add	r7, sp, #16
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	4613      	mov	r3, r2
 800b69a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b69c:	88fb      	ldrh	r3, [r7, #6]
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f001 fe1d 	bl	800d2e0 <pvPortMalloc>
 800b6a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00e      	beq.n	800b6cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b6ae:	205c      	movs	r0, #92	; 0x5c
 800b6b0:	f001 fe16 	bl	800d2e0 <pvPortMalloc>
 800b6b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d003      	beq.n	800b6c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	697a      	ldr	r2, [r7, #20]
 800b6c0:	631a      	str	r2, [r3, #48]	; 0x30
 800b6c2:	e005      	b.n	800b6d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b6c4:	6978      	ldr	r0, [r7, #20]
 800b6c6:	f001 fecd 	bl	800d464 <vPortFree>
 800b6ca:	e001      	b.n	800b6d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d017      	beq.n	800b706 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b6de:	88fa      	ldrh	r2, [r7, #6]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	9303      	str	r3, [sp, #12]
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	9302      	str	r3, [sp, #8]
 800b6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ea:	9301      	str	r3, [sp, #4]
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	9300      	str	r3, [sp, #0]
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	68b9      	ldr	r1, [r7, #8]
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f000 f80e 	bl	800b716 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6fa:	69f8      	ldr	r0, [r7, #28]
 800b6fc:	f000 f89a 	bl	800b834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b700:	2301      	movs	r3, #1
 800b702:	61bb      	str	r3, [r7, #24]
 800b704:	e002      	b.n	800b70c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b706:	f04f 33ff 	mov.w	r3, #4294967295
 800b70a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b70c:	69bb      	ldr	r3, [r7, #24]
	}
 800b70e:	4618      	mov	r0, r3
 800b710:	3720      	adds	r7, #32
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b088      	sub	sp, #32
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	60f8      	str	r0, [r7, #12]
 800b71e:	60b9      	str	r1, [r7, #8]
 800b720:	607a      	str	r2, [r7, #4]
 800b722:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b726:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	461a      	mov	r2, r3
 800b72e:	21a5      	movs	r1, #165	; 0xa5
 800b730:	f002 ff27 	bl	800e582 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b73e:	3b01      	subs	r3, #1
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4413      	add	r3, r2
 800b744:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	f023 0307 	bic.w	r3, r3, #7
 800b74c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	f003 0307 	and.w	r3, r3, #7
 800b754:	2b00      	cmp	r3, #0
 800b756:	d009      	beq.n	800b76c <prvInitialiseNewTask+0x56>
 800b758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	617b      	str	r3, [r7, #20]
 800b76a:	e7fe      	b.n	800b76a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d01f      	beq.n	800b7b2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b772:	2300      	movs	r3, #0
 800b774:	61fb      	str	r3, [r7, #28]
 800b776:	e012      	b.n	800b79e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	4413      	add	r3, r2
 800b77e:	7819      	ldrb	r1, [r3, #0]
 800b780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	4413      	add	r3, r2
 800b786:	3334      	adds	r3, #52	; 0x34
 800b788:	460a      	mov	r2, r1
 800b78a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	4413      	add	r3, r2
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d006      	beq.n	800b7a6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	3301      	adds	r3, #1
 800b79c:	61fb      	str	r3, [r7, #28]
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	2b0f      	cmp	r3, #15
 800b7a2:	d9e9      	bls.n	800b778 <prvInitialiseNewTask+0x62>
 800b7a4:	e000      	b.n	800b7a8 <prvInitialiseNewTask+0x92>
			{
				break;
 800b7a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b7b0:	e003      	b.n	800b7ba <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7bc:	2b37      	cmp	r3, #55	; 0x37
 800b7be:	d901      	bls.n	800b7c4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b7c0:	2337      	movs	r3, #55	; 0x37
 800b7c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d8:	3304      	adds	r3, #4
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7ff f994 	bl	800ab08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e2:	3318      	adds	r3, #24
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7ff f98f 	bl	800ab08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b802:	2200      	movs	r2, #0
 800b804:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	68f9      	ldr	r1, [r7, #12]
 800b812:	69b8      	ldr	r0, [r7, #24]
 800b814:	f001 fb20 	bl	800ce58 <pxPortInitialiseStack>
 800b818:	4602      	mov	r2, r0
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b820:	2b00      	cmp	r3, #0
 800b822:	d002      	beq.n	800b82a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b828:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b82a:	bf00      	nop
 800b82c:	3720      	adds	r7, #32
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
	...

0800b834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b83c:	f001 fc36 	bl	800d0ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b840:	4b2d      	ldr	r3, [pc, #180]	; (800b8f8 <prvAddNewTaskToReadyList+0xc4>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3301      	adds	r3, #1
 800b846:	4a2c      	ldr	r2, [pc, #176]	; (800b8f8 <prvAddNewTaskToReadyList+0xc4>)
 800b848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b84a:	4b2c      	ldr	r3, [pc, #176]	; (800b8fc <prvAddNewTaskToReadyList+0xc8>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d109      	bne.n	800b866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b852:	4a2a      	ldr	r2, [pc, #168]	; (800b8fc <prvAddNewTaskToReadyList+0xc8>)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b858:	4b27      	ldr	r3, [pc, #156]	; (800b8f8 <prvAddNewTaskToReadyList+0xc4>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d110      	bne.n	800b882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b860:	f000 fc34 	bl	800c0cc <prvInitialiseTaskLists>
 800b864:	e00d      	b.n	800b882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b866:	4b26      	ldr	r3, [pc, #152]	; (800b900 <prvAddNewTaskToReadyList+0xcc>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d109      	bne.n	800b882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b86e:	4b23      	ldr	r3, [pc, #140]	; (800b8fc <prvAddNewTaskToReadyList+0xc8>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b878:	429a      	cmp	r2, r3
 800b87a:	d802      	bhi.n	800b882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b87c:	4a1f      	ldr	r2, [pc, #124]	; (800b8fc <prvAddNewTaskToReadyList+0xc8>)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b882:	4b20      	ldr	r3, [pc, #128]	; (800b904 <prvAddNewTaskToReadyList+0xd0>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	3301      	adds	r3, #1
 800b888:	4a1e      	ldr	r2, [pc, #120]	; (800b904 <prvAddNewTaskToReadyList+0xd0>)
 800b88a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b88c:	4b1d      	ldr	r3, [pc, #116]	; (800b904 <prvAddNewTaskToReadyList+0xd0>)
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b898:	4b1b      	ldr	r3, [pc, #108]	; (800b908 <prvAddNewTaskToReadyList+0xd4>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d903      	bls.n	800b8a8 <prvAddNewTaskToReadyList+0x74>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a4:	4a18      	ldr	r2, [pc, #96]	; (800b908 <prvAddNewTaskToReadyList+0xd4>)
 800b8a6:	6013      	str	r3, [r2, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4a15      	ldr	r2, [pc, #84]	; (800b90c <prvAddNewTaskToReadyList+0xd8>)
 800b8b6:	441a      	add	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	4619      	mov	r1, r3
 800b8be:	4610      	mov	r0, r2
 800b8c0:	f7ff f92f 	bl	800ab22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b8c4:	f001 fc20 	bl	800d108 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b8c8:	4b0d      	ldr	r3, [pc, #52]	; (800b900 <prvAddNewTaskToReadyList+0xcc>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d00e      	beq.n	800b8ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b8d0:	4b0a      	ldr	r3, [pc, #40]	; (800b8fc <prvAddNewTaskToReadyList+0xc8>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d207      	bcs.n	800b8ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b8de:	4b0c      	ldr	r3, [pc, #48]	; (800b910 <prvAddNewTaskToReadyList+0xdc>)
 800b8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e4:	601a      	str	r2, [r3, #0]
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8ee:	bf00      	nop
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20001ffc 	.word	0x20001ffc
 800b8fc:	20001b28 	.word	0x20001b28
 800b900:	20002008 	.word	0x20002008
 800b904:	20002018 	.word	0x20002018
 800b908:	20002004 	.word	0x20002004
 800b90c:	20001b2c 	.word	0x20001b2c
 800b910:	e000ed04 	.word	0xe000ed04

0800b914 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08a      	sub	sp, #40	; 0x28
 800b918:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b91a:	2300      	movs	r3, #0
 800b91c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b91e:	2300      	movs	r3, #0
 800b920:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b922:	463a      	mov	r2, r7
 800b924:	1d39      	adds	r1, r7, #4
 800b926:	f107 0308 	add.w	r3, r7, #8
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7ff f898 	bl	800aa60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b930:	6839      	ldr	r1, [r7, #0]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	9202      	str	r2, [sp, #8]
 800b938:	9301      	str	r3, [sp, #4]
 800b93a:	2300      	movs	r3, #0
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	2300      	movs	r3, #0
 800b940:	460a      	mov	r2, r1
 800b942:	4920      	ldr	r1, [pc, #128]	; (800b9c4 <vTaskStartScheduler+0xb0>)
 800b944:	4820      	ldr	r0, [pc, #128]	; (800b9c8 <vTaskStartScheduler+0xb4>)
 800b946:	f7ff fe47 	bl	800b5d8 <xTaskCreateStatic>
 800b94a:	4602      	mov	r2, r0
 800b94c:	4b1f      	ldr	r3, [pc, #124]	; (800b9cc <vTaskStartScheduler+0xb8>)
 800b94e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b950:	4b1e      	ldr	r3, [pc, #120]	; (800b9cc <vTaskStartScheduler+0xb8>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b958:	2301      	movs	r3, #1
 800b95a:	617b      	str	r3, [r7, #20]
 800b95c:	e001      	b.n	800b962 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b95e:	2300      	movs	r3, #0
 800b960:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d102      	bne.n	800b96e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b968:	f000 ff30 	bl	800c7cc <xTimerCreateTimerTask>
 800b96c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2b01      	cmp	r3, #1
 800b972:	d115      	bne.n	800b9a0 <vTaskStartScheduler+0x8c>
 800b974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b978:	f383 8811 	msr	BASEPRI, r3
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	f3bf 8f4f 	dsb	sy
 800b984:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b986:	4b12      	ldr	r3, [pc, #72]	; (800b9d0 <vTaskStartScheduler+0xbc>)
 800b988:	f04f 32ff 	mov.w	r2, #4294967295
 800b98c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b98e:	4b11      	ldr	r3, [pc, #68]	; (800b9d4 <vTaskStartScheduler+0xc0>)
 800b990:	2201      	movs	r2, #1
 800b992:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b994:	4b10      	ldr	r3, [pc, #64]	; (800b9d8 <vTaskStartScheduler+0xc4>)
 800b996:	2200      	movs	r2, #0
 800b998:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b99a:	f001 fae9 	bl	800cf70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b99e:	e00d      	b.n	800b9bc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a6:	d109      	bne.n	800b9bc <vTaskStartScheduler+0xa8>
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	60fb      	str	r3, [r7, #12]
 800b9ba:	e7fe      	b.n	800b9ba <vTaskStartScheduler+0xa6>
}
 800b9bc:	bf00      	nop
 800b9be:	3718      	adds	r7, #24
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	0800e5e4 	.word	0x0800e5e4
 800b9c8:	0800c051 	.word	0x0800c051
 800b9cc:	20002020 	.word	0x20002020
 800b9d0:	2000201c 	.word	0x2000201c
 800b9d4:	20002008 	.word	0x20002008
 800b9d8:	20002000 	.word	0x20002000

0800b9dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9dc:	b480      	push	{r7}
 800b9de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b9e0:	4b04      	ldr	r3, [pc, #16]	; (800b9f4 <vTaskSuspendAll+0x18>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	4a03      	ldr	r2, [pc, #12]	; (800b9f4 <vTaskSuspendAll+0x18>)
 800b9e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b9ea:	bf00      	nop
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	20002024 	.word	0x20002024

0800b9f8 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800ba02:	4b14      	ldr	r3, [pc, #80]	; (800ba54 <prvGetExpectedIdleTime+0x5c>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800ba0e:	4b12      	ldr	r3, [pc, #72]	; (800ba58 <prvGetExpectedIdleTime+0x60>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	607b      	str	r3, [r7, #4]
 800ba1c:	e012      	b.n	800ba44 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800ba1e:	4b0f      	ldr	r3, [pc, #60]	; (800ba5c <prvGetExpectedIdleTime+0x64>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d902      	bls.n	800ba2c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800ba26:	2300      	movs	r3, #0
 800ba28:	607b      	str	r3, [r7, #4]
 800ba2a:	e00b      	b.n	800ba44 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d002      	beq.n	800ba38 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	607b      	str	r3, [r7, #4]
 800ba36:	e005      	b.n	800ba44 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800ba38:	4b09      	ldr	r3, [pc, #36]	; (800ba60 <prvGetExpectedIdleTime+0x68>)
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	4b09      	ldr	r3, [pc, #36]	; (800ba64 <prvGetExpectedIdleTime+0x6c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800ba44:	687b      	ldr	r3, [r7, #4]
	}
 800ba46:	4618      	mov	r0, r3
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	20002004 	.word	0x20002004
 800ba58:	20001b28 	.word	0x20001b28
 800ba5c:	20001b2c 	.word	0x20001b2c
 800ba60:	2000201c 	.word	0x2000201c
 800ba64:	20002000 	.word	0x20002000

0800ba68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba72:	2300      	movs	r3, #0
 800ba74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba76:	4b41      	ldr	r3, [pc, #260]	; (800bb7c <xTaskResumeAll+0x114>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d109      	bne.n	800ba92 <xTaskResumeAll+0x2a>
 800ba7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	e7fe      	b.n	800ba90 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba92:	f001 fb0b 	bl	800d0ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba96:	4b39      	ldr	r3, [pc, #228]	; (800bb7c <xTaskResumeAll+0x114>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	4a37      	ldr	r2, [pc, #220]	; (800bb7c <xTaskResumeAll+0x114>)
 800ba9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baa0:	4b36      	ldr	r3, [pc, #216]	; (800bb7c <xTaskResumeAll+0x114>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d162      	bne.n	800bb6e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800baa8:	4b35      	ldr	r3, [pc, #212]	; (800bb80 <xTaskResumeAll+0x118>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d05e      	beq.n	800bb6e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bab0:	e02f      	b.n	800bb12 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bab2:	4b34      	ldr	r3, [pc, #208]	; (800bb84 <xTaskResumeAll+0x11c>)
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	3318      	adds	r3, #24
 800babe:	4618      	mov	r0, r3
 800bac0:	f7ff f88c 	bl	800abdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	3304      	adds	r3, #4
 800bac8:	4618      	mov	r0, r3
 800baca:	f7ff f887 	bl	800abdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad2:	4b2d      	ldr	r3, [pc, #180]	; (800bb88 <xTaskResumeAll+0x120>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d903      	bls.n	800bae2 <xTaskResumeAll+0x7a>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bade:	4a2a      	ldr	r2, [pc, #168]	; (800bb88 <xTaskResumeAll+0x120>)
 800bae0:	6013      	str	r3, [r2, #0]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae6:	4613      	mov	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4a27      	ldr	r2, [pc, #156]	; (800bb8c <xTaskResumeAll+0x124>)
 800baf0:	441a      	add	r2, r3
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	3304      	adds	r3, #4
 800baf6:	4619      	mov	r1, r3
 800baf8:	4610      	mov	r0, r2
 800bafa:	f7ff f812 	bl	800ab22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb02:	4b23      	ldr	r3, [pc, #140]	; (800bb90 <xTaskResumeAll+0x128>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d302      	bcc.n	800bb12 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bb0c:	4b21      	ldr	r3, [pc, #132]	; (800bb94 <xTaskResumeAll+0x12c>)
 800bb0e:	2201      	movs	r2, #1
 800bb10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb12:	4b1c      	ldr	r3, [pc, #112]	; (800bb84 <xTaskResumeAll+0x11c>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1cb      	bne.n	800bab2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb20:	f000 fb6e 	bl	800c200 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bb24:	4b1c      	ldr	r3, [pc, #112]	; (800bb98 <xTaskResumeAll+0x130>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d010      	beq.n	800bb52 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb30:	f000 f846 	bl	800bbc0 <xTaskIncrementTick>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d002      	beq.n	800bb40 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bb3a:	4b16      	ldr	r3, [pc, #88]	; (800bb94 <xTaskResumeAll+0x12c>)
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	3b01      	subs	r3, #1
 800bb44:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1f1      	bne.n	800bb30 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800bb4c:	4b12      	ldr	r3, [pc, #72]	; (800bb98 <xTaskResumeAll+0x130>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb52:	4b10      	ldr	r3, [pc, #64]	; (800bb94 <xTaskResumeAll+0x12c>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d009      	beq.n	800bb6e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb5e:	4b0f      	ldr	r3, [pc, #60]	; (800bb9c <xTaskResumeAll+0x134>)
 800bb60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb6e:	f001 facb 	bl	800d108 <vPortExitCritical>

	return xAlreadyYielded;
 800bb72:	68bb      	ldr	r3, [r7, #8]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	20002024 	.word	0x20002024
 800bb80:	20001ffc 	.word	0x20001ffc
 800bb84:	20001fbc 	.word	0x20001fbc
 800bb88:	20002004 	.word	0x20002004
 800bb8c:	20001b2c 	.word	0x20001b2c
 800bb90:	20001b28 	.word	0x20001b28
 800bb94:	20002010 	.word	0x20002010
 800bb98:	2000200c 	.word	0x2000200c
 800bb9c:	e000ed04 	.word	0xe000ed04

0800bba0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bba6:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <xTaskGetTickCount+0x1c>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bbac:	687b      	ldr	r3, [r7, #4]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	370c      	adds	r7, #12
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	20002000 	.word	0x20002000

0800bbc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbca:	4b4e      	ldr	r3, [pc, #312]	; (800bd04 <xTaskIncrementTick+0x144>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f040 8088 	bne.w	800bce4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bbd4:	4b4c      	ldr	r3, [pc, #304]	; (800bd08 <xTaskIncrementTick+0x148>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bbdc:	4a4a      	ldr	r2, [pc, #296]	; (800bd08 <xTaskIncrementTick+0x148>)
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d11f      	bne.n	800bc28 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbe8:	4b48      	ldr	r3, [pc, #288]	; (800bd0c <xTaskIncrementTick+0x14c>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d009      	beq.n	800bc06 <xTaskIncrementTick+0x46>
 800bbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf6:	f383 8811 	msr	BASEPRI, r3
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	603b      	str	r3, [r7, #0]
 800bc04:	e7fe      	b.n	800bc04 <xTaskIncrementTick+0x44>
 800bc06:	4b41      	ldr	r3, [pc, #260]	; (800bd0c <xTaskIncrementTick+0x14c>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	60fb      	str	r3, [r7, #12]
 800bc0c:	4b40      	ldr	r3, [pc, #256]	; (800bd10 <xTaskIncrementTick+0x150>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a3e      	ldr	r2, [pc, #248]	; (800bd0c <xTaskIncrementTick+0x14c>)
 800bc12:	6013      	str	r3, [r2, #0]
 800bc14:	4a3e      	ldr	r2, [pc, #248]	; (800bd10 <xTaskIncrementTick+0x150>)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6013      	str	r3, [r2, #0]
 800bc1a:	4b3e      	ldr	r3, [pc, #248]	; (800bd14 <xTaskIncrementTick+0x154>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	4a3c      	ldr	r2, [pc, #240]	; (800bd14 <xTaskIncrementTick+0x154>)
 800bc22:	6013      	str	r3, [r2, #0]
 800bc24:	f000 faec 	bl	800c200 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc28:	4b3b      	ldr	r3, [pc, #236]	; (800bd18 <xTaskIncrementTick+0x158>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d349      	bcc.n	800bcc6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc32:	4b36      	ldr	r3, [pc, #216]	; (800bd0c <xTaskIncrementTick+0x14c>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d104      	bne.n	800bc46 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc3c:	4b36      	ldr	r3, [pc, #216]	; (800bd18 <xTaskIncrementTick+0x158>)
 800bc3e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc42:	601a      	str	r2, [r3, #0]
					break;
 800bc44:	e03f      	b.n	800bcc6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc46:	4b31      	ldr	r3, [pc, #196]	; (800bd0c <xTaskIncrementTick+0x14c>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	68db      	ldr	r3, [r3, #12]
 800bc4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc56:	693a      	ldr	r2, [r7, #16]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d203      	bcs.n	800bc66 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc5e:	4a2e      	ldr	r2, [pc, #184]	; (800bd18 <xTaskIncrementTick+0x158>)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc64:	e02f      	b.n	800bcc6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	3304      	adds	r3, #4
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fe ffb6 	bl	800abdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d004      	beq.n	800bc82 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	3318      	adds	r3, #24
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7fe ffad 	bl	800abdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc86:	4b25      	ldr	r3, [pc, #148]	; (800bd1c <xTaskIncrementTick+0x15c>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d903      	bls.n	800bc96 <xTaskIncrementTick+0xd6>
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc92:	4a22      	ldr	r2, [pc, #136]	; (800bd1c <xTaskIncrementTick+0x15c>)
 800bc94:	6013      	str	r3, [r2, #0]
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4413      	add	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	4a1f      	ldr	r2, [pc, #124]	; (800bd20 <xTaskIncrementTick+0x160>)
 800bca4:	441a      	add	r2, r3
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	3304      	adds	r3, #4
 800bcaa:	4619      	mov	r1, r3
 800bcac:	4610      	mov	r0, r2
 800bcae:	f7fe ff38 	bl	800ab22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb6:	4b1b      	ldr	r3, [pc, #108]	; (800bd24 <xTaskIncrementTick+0x164>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d3b8      	bcc.n	800bc32 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcc4:	e7b5      	b.n	800bc32 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bcc6:	4b17      	ldr	r3, [pc, #92]	; (800bd24 <xTaskIncrementTick+0x164>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bccc:	4914      	ldr	r1, [pc, #80]	; (800bd20 <xTaskIncrementTick+0x160>)
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	440b      	add	r3, r1
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d907      	bls.n	800bcee <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800bcde:	2301      	movs	r3, #1
 800bce0:	617b      	str	r3, [r7, #20]
 800bce2:	e004      	b.n	800bcee <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bce4:	4b10      	ldr	r3, [pc, #64]	; (800bd28 <xTaskIncrementTick+0x168>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	3301      	adds	r3, #1
 800bcea:	4a0f      	ldr	r2, [pc, #60]	; (800bd28 <xTaskIncrementTick+0x168>)
 800bcec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bcee:	4b0f      	ldr	r3, [pc, #60]	; (800bd2c <xTaskIncrementTick+0x16c>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bcfa:	697b      	ldr	r3, [r7, #20]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3718      	adds	r7, #24
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	20002024 	.word	0x20002024
 800bd08:	20002000 	.word	0x20002000
 800bd0c:	20001fb4 	.word	0x20001fb4
 800bd10:	20001fb8 	.word	0x20001fb8
 800bd14:	20002014 	.word	0x20002014
 800bd18:	2000201c 	.word	0x2000201c
 800bd1c:	20002004 	.word	0x20002004
 800bd20:	20001b2c 	.word	0x20001b2c
 800bd24:	20001b28 	.word	0x20001b28
 800bd28:	2000200c 	.word	0x2000200c
 800bd2c:	20002010 	.word	0x20002010

0800bd30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd36:	4b27      	ldr	r3, [pc, #156]	; (800bdd4 <vTaskSwitchContext+0xa4>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d003      	beq.n	800bd46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd3e:	4b26      	ldr	r3, [pc, #152]	; (800bdd8 <vTaskSwitchContext+0xa8>)
 800bd40:	2201      	movs	r2, #1
 800bd42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd44:	e040      	b.n	800bdc8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800bd46:	4b24      	ldr	r3, [pc, #144]	; (800bdd8 <vTaskSwitchContext+0xa8>)
 800bd48:	2200      	movs	r2, #0
 800bd4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd4c:	4b23      	ldr	r3, [pc, #140]	; (800bddc <vTaskSwitchContext+0xac>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	60fb      	str	r3, [r7, #12]
 800bd52:	e00f      	b.n	800bd74 <vTaskSwitchContext+0x44>
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d109      	bne.n	800bd6e <vTaskSwitchContext+0x3e>
 800bd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	607b      	str	r3, [r7, #4]
 800bd6c:	e7fe      	b.n	800bd6c <vTaskSwitchContext+0x3c>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	3b01      	subs	r3, #1
 800bd72:	60fb      	str	r3, [r7, #12]
 800bd74:	491a      	ldr	r1, [pc, #104]	; (800bde0 <vTaskSwitchContext+0xb0>)
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4413      	add	r3, r2
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	440b      	add	r3, r1
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d0e5      	beq.n	800bd54 <vTaskSwitchContext+0x24>
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4413      	add	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4a13      	ldr	r2, [pc, #76]	; (800bde0 <vTaskSwitchContext+0xb0>)
 800bd94:	4413      	add	r3, r2
 800bd96:	60bb      	str	r3, [r7, #8]
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	605a      	str	r2, [r3, #4]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	685a      	ldr	r2, [r3, #4]
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	3308      	adds	r3, #8
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d104      	bne.n	800bdb8 <vTaskSwitchContext+0x88>
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	685a      	ldr	r2, [r3, #4]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	605a      	str	r2, [r3, #4]
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	4a09      	ldr	r2, [pc, #36]	; (800bde4 <vTaskSwitchContext+0xb4>)
 800bdc0:	6013      	str	r3, [r2, #0]
 800bdc2:	4a06      	ldr	r2, [pc, #24]	; (800bddc <vTaskSwitchContext+0xac>)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6013      	str	r3, [r2, #0]
}
 800bdc8:	bf00      	nop
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	20002024 	.word	0x20002024
 800bdd8:	20002010 	.word	0x20002010
 800bddc:	20002004 	.word	0x20002004
 800bde0:	20001b2c 	.word	0x20001b2c
 800bde4:	20001b28 	.word	0x20001b28

0800bde8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d109      	bne.n	800be0c <vTaskPlaceOnEventList+0x24>
 800bdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfc:	f383 8811 	msr	BASEPRI, r3
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	60fb      	str	r3, [r7, #12]
 800be0a:	e7fe      	b.n	800be0a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be0c:	4b07      	ldr	r3, [pc, #28]	; (800be2c <vTaskPlaceOnEventList+0x44>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3318      	adds	r3, #24
 800be12:	4619      	mov	r1, r3
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f7fe fea8 	bl	800ab6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be1a:	2101      	movs	r1, #1
 800be1c:	6838      	ldr	r0, [r7, #0]
 800be1e:	f000 fc81 	bl	800c724 <prvAddCurrentTaskToDelayedList>
}
 800be22:	bf00      	nop
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	20001b28 	.word	0x20001b28

0800be30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d109      	bne.n	800be56 <vTaskPlaceOnEventListRestricted+0x26>
 800be42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	617b      	str	r3, [r7, #20]
 800be54:	e7fe      	b.n	800be54 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be56:	4b0a      	ldr	r3, [pc, #40]	; (800be80 <vTaskPlaceOnEventListRestricted+0x50>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	3318      	adds	r3, #24
 800be5c:	4619      	mov	r1, r3
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f7fe fe5f 	bl	800ab22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d002      	beq.n	800be70 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800be6a:	f04f 33ff 	mov.w	r3, #4294967295
 800be6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be70:	6879      	ldr	r1, [r7, #4]
 800be72:	68b8      	ldr	r0, [r7, #8]
 800be74:	f000 fc56 	bl	800c724 <prvAddCurrentTaskToDelayedList>
	}
 800be78:	bf00      	nop
 800be7a:	3718      	adds	r7, #24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	20001b28 	.word	0x20001b28

0800be84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b086      	sub	sp, #24
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d109      	bne.n	800beae <xTaskRemoveFromEventList+0x2a>
 800be9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	60fb      	str	r3, [r7, #12]
 800beac:	e7fe      	b.n	800beac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	3318      	adds	r3, #24
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7fe fe92 	bl	800abdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beb8:	4b1e      	ldr	r3, [pc, #120]	; (800bf34 <xTaskRemoveFromEventList+0xb0>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d11f      	bne.n	800bf00 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	3304      	adds	r3, #4
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fe fe89 	bl	800abdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bece:	4b1a      	ldr	r3, [pc, #104]	; (800bf38 <xTaskRemoveFromEventList+0xb4>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d903      	bls.n	800bede <xTaskRemoveFromEventList+0x5a>
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beda:	4a17      	ldr	r2, [pc, #92]	; (800bf38 <xTaskRemoveFromEventList+0xb4>)
 800bedc:	6013      	str	r3, [r2, #0]
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee2:	4613      	mov	r3, r2
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	4413      	add	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4a14      	ldr	r2, [pc, #80]	; (800bf3c <xTaskRemoveFromEventList+0xb8>)
 800beec:	441a      	add	r2, r3
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	3304      	adds	r3, #4
 800bef2:	4619      	mov	r1, r3
 800bef4:	4610      	mov	r0, r2
 800bef6:	f7fe fe14 	bl	800ab22 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800befa:	f000 f981 	bl	800c200 <prvResetNextTaskUnblockTime>
 800befe:	e005      	b.n	800bf0c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	3318      	adds	r3, #24
 800bf04:	4619      	mov	r1, r3
 800bf06:	480e      	ldr	r0, [pc, #56]	; (800bf40 <xTaskRemoveFromEventList+0xbc>)
 800bf08:	f7fe fe0b 	bl	800ab22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf10:	4b0c      	ldr	r3, [pc, #48]	; (800bf44 <xTaskRemoveFromEventList+0xc0>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d905      	bls.n	800bf26 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf1e:	4b0a      	ldr	r3, [pc, #40]	; (800bf48 <xTaskRemoveFromEventList+0xc4>)
 800bf20:	2201      	movs	r2, #1
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	e001      	b.n	800bf2a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bf26:	2300      	movs	r3, #0
 800bf28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf2a:	697b      	ldr	r3, [r7, #20]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20002024 	.word	0x20002024
 800bf38:	20002004 	.word	0x20002004
 800bf3c:	20001b2c 	.word	0x20001b2c
 800bf40:	20001fbc 	.word	0x20001fbc
 800bf44:	20001b28 	.word	0x20001b28
 800bf48:	20002010 	.word	0x20002010

0800bf4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf54:	4b06      	ldr	r3, [pc, #24]	; (800bf70 <vTaskInternalSetTimeOutState+0x24>)
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf5c:	4b05      	ldr	r3, [pc, #20]	; (800bf74 <vTaskInternalSetTimeOutState+0x28>)
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	605a      	str	r2, [r3, #4]
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr
 800bf70:	20002014 	.word	0x20002014
 800bf74:	20002000 	.word	0x20002000

0800bf78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b088      	sub	sp, #32
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d109      	bne.n	800bf9c <xTaskCheckForTimeOut+0x24>
 800bf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	613b      	str	r3, [r7, #16]
 800bf9a:	e7fe      	b.n	800bf9a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d109      	bne.n	800bfb6 <xTaskCheckForTimeOut+0x3e>
 800bfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa6:	f383 8811 	msr	BASEPRI, r3
 800bfaa:	f3bf 8f6f 	isb	sy
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	60fb      	str	r3, [r7, #12]
 800bfb4:	e7fe      	b.n	800bfb4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800bfb6:	f001 f879 	bl	800d0ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bfba:	4b1d      	ldr	r3, [pc, #116]	; (800c030 <xTaskCheckForTimeOut+0xb8>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	69ba      	ldr	r2, [r7, #24]
 800bfc6:	1ad3      	subs	r3, r2, r3
 800bfc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd2:	d102      	bne.n	800bfda <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	61fb      	str	r3, [r7, #28]
 800bfd8:	e023      	b.n	800c022 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	4b15      	ldr	r3, [pc, #84]	; (800c034 <xTaskCheckForTimeOut+0xbc>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d007      	beq.n	800bff6 <xTaskCheckForTimeOut+0x7e>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	69ba      	ldr	r2, [r7, #24]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d302      	bcc.n	800bff6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bff0:	2301      	movs	r3, #1
 800bff2:	61fb      	str	r3, [r7, #28]
 800bff4:	e015      	b.n	800c022 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d20b      	bcs.n	800c018 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	1ad2      	subs	r2, r2, r3
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f7ff ff9d 	bl	800bf4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c012:	2300      	movs	r3, #0
 800c014:	61fb      	str	r3, [r7, #28]
 800c016:	e004      	b.n	800c022 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	2200      	movs	r2, #0
 800c01c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c01e:	2301      	movs	r3, #1
 800c020:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c022:	f001 f871 	bl	800d108 <vPortExitCritical>

	return xReturn;
 800c026:	69fb      	ldr	r3, [r7, #28]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3720      	adds	r7, #32
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	20002000 	.word	0x20002000
 800c034:	20002014 	.word	0x20002014

0800c038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c038:	b480      	push	{r7}
 800c03a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c03c:	4b03      	ldr	r3, [pc, #12]	; (800c04c <vTaskMissedYield+0x14>)
 800c03e:	2201      	movs	r2, #1
 800c040:	601a      	str	r2, [r3, #0]
}
 800c042:	bf00      	nop
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	20002010 	.word	0x20002010

0800c050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c058:	f000 f878 	bl	800c14c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c05c:	4b17      	ldr	r3, [pc, #92]	; (800c0bc <prvIdleTask+0x6c>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b01      	cmp	r3, #1
 800c062:	d907      	bls.n	800c074 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c064:	4b16      	ldr	r3, [pc, #88]	; (800c0c0 <prvIdleTask+0x70>)
 800c066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c06a:	601a      	str	r2, [r3, #0]
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800c074:	f7ff fcc0 	bl	800b9f8 <prvGetExpectedIdleTime>
 800c078:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d9eb      	bls.n	800c058 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800c080:	f7ff fcac 	bl	800b9dc <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800c084:	4b0f      	ldr	r3, [pc, #60]	; (800c0c4 <prvIdleTask+0x74>)
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	4b0f      	ldr	r3, [pc, #60]	; (800c0c8 <prvIdleTask+0x78>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d209      	bcs.n	800c0a4 <prvIdleTask+0x54>
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	60bb      	str	r3, [r7, #8]
 800c0a2:	e7fe      	b.n	800c0a2 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800c0a4:	f7ff fca8 	bl	800b9f8 <prvGetExpectedIdleTime>
 800c0a8:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d902      	bls.n	800c0b6 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f7f4 f9e7 	bl	8000484 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800c0b6:	f7ff fcd7 	bl	800ba68 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800c0ba:	e7cd      	b.n	800c058 <prvIdleTask+0x8>
 800c0bc:	20001b2c 	.word	0x20001b2c
 800c0c0:	e000ed04 	.word	0xe000ed04
 800c0c4:	2000201c 	.word	0x2000201c
 800c0c8:	20002000 	.word	0x20002000

0800c0cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	607b      	str	r3, [r7, #4]
 800c0d6:	e00c      	b.n	800c0f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	4413      	add	r3, r2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	4a12      	ldr	r2, [pc, #72]	; (800c12c <prvInitialiseTaskLists+0x60>)
 800c0e4:	4413      	add	r3, r2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fe fcee 	bl	800aac8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	607b      	str	r3, [r7, #4]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2b37      	cmp	r3, #55	; 0x37
 800c0f6:	d9ef      	bls.n	800c0d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c0f8:	480d      	ldr	r0, [pc, #52]	; (800c130 <prvInitialiseTaskLists+0x64>)
 800c0fa:	f7fe fce5 	bl	800aac8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c0fe:	480d      	ldr	r0, [pc, #52]	; (800c134 <prvInitialiseTaskLists+0x68>)
 800c100:	f7fe fce2 	bl	800aac8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c104:	480c      	ldr	r0, [pc, #48]	; (800c138 <prvInitialiseTaskLists+0x6c>)
 800c106:	f7fe fcdf 	bl	800aac8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c10a:	480c      	ldr	r0, [pc, #48]	; (800c13c <prvInitialiseTaskLists+0x70>)
 800c10c:	f7fe fcdc 	bl	800aac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c110:	480b      	ldr	r0, [pc, #44]	; (800c140 <prvInitialiseTaskLists+0x74>)
 800c112:	f7fe fcd9 	bl	800aac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c116:	4b0b      	ldr	r3, [pc, #44]	; (800c144 <prvInitialiseTaskLists+0x78>)
 800c118:	4a05      	ldr	r2, [pc, #20]	; (800c130 <prvInitialiseTaskLists+0x64>)
 800c11a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c11c:	4b0a      	ldr	r3, [pc, #40]	; (800c148 <prvInitialiseTaskLists+0x7c>)
 800c11e:	4a05      	ldr	r2, [pc, #20]	; (800c134 <prvInitialiseTaskLists+0x68>)
 800c120:	601a      	str	r2, [r3, #0]
}
 800c122:	bf00      	nop
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	20001b2c 	.word	0x20001b2c
 800c130:	20001f8c 	.word	0x20001f8c
 800c134:	20001fa0 	.word	0x20001fa0
 800c138:	20001fbc 	.word	0x20001fbc
 800c13c:	20001fd0 	.word	0x20001fd0
 800c140:	20001fe8 	.word	0x20001fe8
 800c144:	20001fb4 	.word	0x20001fb4
 800c148:	20001fb8 	.word	0x20001fb8

0800c14c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c152:	e019      	b.n	800c188 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c154:	f000 ffaa 	bl	800d0ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c158:	4b0f      	ldr	r3, [pc, #60]	; (800c198 <prvCheckTasksWaitingTermination+0x4c>)
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	3304      	adds	r3, #4
 800c164:	4618      	mov	r0, r3
 800c166:	f7fe fd39 	bl	800abdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c16a:	4b0c      	ldr	r3, [pc, #48]	; (800c19c <prvCheckTasksWaitingTermination+0x50>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	3b01      	subs	r3, #1
 800c170:	4a0a      	ldr	r2, [pc, #40]	; (800c19c <prvCheckTasksWaitingTermination+0x50>)
 800c172:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c174:	4b0a      	ldr	r3, [pc, #40]	; (800c1a0 <prvCheckTasksWaitingTermination+0x54>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	3b01      	subs	r3, #1
 800c17a:	4a09      	ldr	r2, [pc, #36]	; (800c1a0 <prvCheckTasksWaitingTermination+0x54>)
 800c17c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c17e:	f000 ffc3 	bl	800d108 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 f80e 	bl	800c1a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c188:	4b05      	ldr	r3, [pc, #20]	; (800c1a0 <prvCheckTasksWaitingTermination+0x54>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1e1      	bne.n	800c154 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c190:	bf00      	nop
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	20001fd0 	.word	0x20001fd0
 800c19c:	20001ffc 	.word	0x20001ffc
 800c1a0:	20001fe4 	.word	0x20001fe4

0800c1a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d108      	bne.n	800c1c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f001 f952 	bl	800d464 <vPortFree>
				vPortFree( pxTCB );
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f001 f94f 	bl	800d464 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c1c6:	e017      	b.n	800c1f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d103      	bne.n	800c1da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f001 f946 	bl	800d464 <vPortFree>
	}
 800c1d8:	e00e      	b.n	800c1f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c1e0:	2b02      	cmp	r3, #2
 800c1e2:	d009      	beq.n	800c1f8 <prvDeleteTCB+0x54>
 800c1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e8:	f383 8811 	msr	BASEPRI, r3
 800c1ec:	f3bf 8f6f 	isb	sy
 800c1f0:	f3bf 8f4f 	dsb	sy
 800c1f4:	60fb      	str	r3, [r7, #12]
 800c1f6:	e7fe      	b.n	800c1f6 <prvDeleteTCB+0x52>
	}
 800c1f8:	bf00      	nop
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c206:	4b0c      	ldr	r3, [pc, #48]	; (800c238 <prvResetNextTaskUnblockTime+0x38>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d104      	bne.n	800c21a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c210:	4b0a      	ldr	r3, [pc, #40]	; (800c23c <prvResetNextTaskUnblockTime+0x3c>)
 800c212:	f04f 32ff 	mov.w	r2, #4294967295
 800c216:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c218:	e008      	b.n	800c22c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c21a:	4b07      	ldr	r3, [pc, #28]	; (800c238 <prvResetNextTaskUnblockTime+0x38>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	4a04      	ldr	r2, [pc, #16]	; (800c23c <prvResetNextTaskUnblockTime+0x3c>)
 800c22a:	6013      	str	r3, [r2, #0]
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr
 800c238:	20001fb4 	.word	0x20001fb4
 800c23c:	2000201c 	.word	0x2000201c

0800c240 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c246:	4b0b      	ldr	r3, [pc, #44]	; (800c274 <xTaskGetSchedulerState+0x34>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d102      	bne.n	800c254 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c24e:	2301      	movs	r3, #1
 800c250:	607b      	str	r3, [r7, #4]
 800c252:	e008      	b.n	800c266 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c254:	4b08      	ldr	r3, [pc, #32]	; (800c278 <xTaskGetSchedulerState+0x38>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d102      	bne.n	800c262 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c25c:	2302      	movs	r3, #2
 800c25e:	607b      	str	r3, [r7, #4]
 800c260:	e001      	b.n	800c266 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c262:	2300      	movs	r3, #0
 800c264:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c266:	687b      	ldr	r3, [r7, #4]
	}
 800c268:	4618      	mov	r0, r3
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	20002008 	.word	0x20002008
 800c278:	20002024 	.word	0x20002024

0800c27c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c288:	2300      	movs	r3, #0
 800c28a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d054      	beq.n	800c33c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c292:	4b2d      	ldr	r3, [pc, #180]	; (800c348 <xTaskPriorityDisinherit+0xcc>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	693a      	ldr	r2, [r7, #16]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d009      	beq.n	800c2b0 <xTaskPriorityDisinherit+0x34>
 800c29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a0:	f383 8811 	msr	BASEPRI, r3
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	60fb      	str	r3, [r7, #12]
 800c2ae:	e7fe      	b.n	800c2ae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d109      	bne.n	800c2cc <xTaskPriorityDisinherit+0x50>
 800c2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2bc:	f383 8811 	msr	BASEPRI, r3
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	60bb      	str	r3, [r7, #8]
 800c2ca:	e7fe      	b.n	800c2ca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d0:	1e5a      	subs	r2, r3, #1
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d02c      	beq.n	800c33c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d128      	bne.n	800c33c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fe fc74 	bl	800abdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c30c:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <xTaskPriorityDisinherit+0xd0>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	429a      	cmp	r2, r3
 800c312:	d903      	bls.n	800c31c <xTaskPriorityDisinherit+0xa0>
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c318:	4a0c      	ldr	r2, [pc, #48]	; (800c34c <xTaskPriorityDisinherit+0xd0>)
 800c31a:	6013      	str	r3, [r2, #0]
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c320:	4613      	mov	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	4a09      	ldr	r2, [pc, #36]	; (800c350 <xTaskPriorityDisinherit+0xd4>)
 800c32a:	441a      	add	r2, r3
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	3304      	adds	r3, #4
 800c330:	4619      	mov	r1, r3
 800c332:	4610      	mov	r0, r2
 800c334:	f7fe fbf5 	bl	800ab22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c338:	2301      	movs	r3, #1
 800c33a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c33c:	697b      	ldr	r3, [r7, #20]
	}
 800c33e:	4618      	mov	r0, r3
 800c340:	3718      	adds	r7, #24
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	20001b28 	.word	0x20001b28
 800c34c:	20002004 	.word	0x20002004
 800c350:	20001b2c 	.word	0x20001b2c

0800c354 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c354:	b580      	push	{r7, lr}
 800c356:	b086      	sub	sp, #24
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
 800c360:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c362:	f000 fea3 	bl	800d0ac <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c366:	4b26      	ldr	r3, [pc, #152]	; (800c400 <xTaskNotifyWait+0xac>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	2b02      	cmp	r3, #2
 800c372:	d01a      	beq.n	800c3aa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c374:	4b22      	ldr	r3, [pc, #136]	; (800c400 <xTaskNotifyWait+0xac>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	43d2      	mvns	r2, r2
 800c37e:	400a      	ands	r2, r1
 800c380:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c382:	4b1f      	ldr	r3, [pc, #124]	; (800c400 <xTaskNotifyWait+0xac>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00b      	beq.n	800c3aa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c392:	2101      	movs	r1, #1
 800c394:	6838      	ldr	r0, [r7, #0]
 800c396:	f000 f9c5 	bl	800c724 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c39a:	4b1a      	ldr	r3, [pc, #104]	; (800c404 <xTaskNotifyWait+0xb0>)
 800c39c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a0:	601a      	str	r2, [r3, #0]
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c3aa:	f000 fead 	bl	800d108 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c3ae:	f000 fe7d 	bl	800d0ac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d004      	beq.n	800c3c2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c3b8:	4b11      	ldr	r3, [pc, #68]	; (800c400 <xTaskNotifyWait+0xac>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c3c2:	4b0f      	ldr	r3, [pc, #60]	; (800c400 <xTaskNotifyWait+0xac>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d002      	beq.n	800c3d6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	617b      	str	r3, [r7, #20]
 800c3d4:	e008      	b.n	800c3e8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c3d6:	4b0a      	ldr	r3, [pc, #40]	; (800c400 <xTaskNotifyWait+0xac>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c3dc:	68ba      	ldr	r2, [r7, #8]
 800c3de:	43d2      	mvns	r2, r2
 800c3e0:	400a      	ands	r2, r1
 800c3e2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3e8:	4b05      	ldr	r3, [pc, #20]	; (800c400 <xTaskNotifyWait+0xac>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c3f2:	f000 fe89 	bl	800d108 <vPortExitCritical>

		return xReturn;
 800c3f6:	697b      	ldr	r3, [r7, #20]
	}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3718      	adds	r7, #24
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	20001b28 	.word	0x20001b28
 800c404:	e000ed04 	.word	0xe000ed04

0800c408 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b08a      	sub	sp, #40	; 0x28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	603b      	str	r3, [r7, #0]
 800c414:	4613      	mov	r3, r2
 800c416:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c418:	2301      	movs	r3, #1
 800c41a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d109      	bne.n	800c436 <xTaskGenericNotify+0x2e>
 800c422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	61bb      	str	r3, [r7, #24]
 800c434:	e7fe      	b.n	800c434 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c43a:	f000 fe37 	bl	800d0ac <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d003      	beq.n	800c44c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c444:	6a3b      	ldr	r3, [r7, #32]
 800c446:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c44c:	6a3b      	ldr	r3, [r7, #32]
 800c44e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c452:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c454:	6a3b      	ldr	r3, [r7, #32]
 800c456:	2202      	movs	r2, #2
 800c458:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c45c:	79fb      	ldrb	r3, [r7, #7]
 800c45e:	2b04      	cmp	r3, #4
 800c460:	d827      	bhi.n	800c4b2 <xTaskGenericNotify+0xaa>
 800c462:	a201      	add	r2, pc, #4	; (adr r2, 800c468 <xTaskGenericNotify+0x60>)
 800c464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c468:	0800c4d1 	.word	0x0800c4d1
 800c46c:	0800c47d 	.word	0x0800c47d
 800c470:	0800c48b 	.word	0x0800c48b
 800c474:	0800c497 	.word	0x0800c497
 800c478:	0800c49f 	.word	0x0800c49f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c47c:	6a3b      	ldr	r3, [r7, #32]
 800c47e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	431a      	orrs	r2, r3
 800c484:	6a3b      	ldr	r3, [r7, #32]
 800c486:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c488:	e025      	b.n	800c4d6 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c48a:	6a3b      	ldr	r3, [r7, #32]
 800c48c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c48e:	1c5a      	adds	r2, r3, #1
 800c490:	6a3b      	ldr	r3, [r7, #32]
 800c492:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c494:	e01f      	b.n	800c4d6 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c496:	6a3b      	ldr	r3, [r7, #32]
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c49c:	e01b      	b.n	800c4d6 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c49e:	7ffb      	ldrb	r3, [r7, #31]
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d003      	beq.n	800c4ac <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c4aa:	e014      	b.n	800c4d6 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c4b0:	e011      	b.n	800c4d6 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c4b2:	6a3b      	ldr	r3, [r7, #32]
 800c4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ba:	d00b      	beq.n	800c4d4 <xTaskGenericNotify+0xcc>
 800c4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c0:	f383 8811 	msr	BASEPRI, r3
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	f3bf 8f4f 	dsb	sy
 800c4cc:	617b      	str	r3, [r7, #20]
 800c4ce:	e7fe      	b.n	800c4ce <xTaskGenericNotify+0xc6>
					break;
 800c4d0:	bf00      	nop
 800c4d2:	e000      	b.n	800c4d6 <xTaskGenericNotify+0xce>

					break;
 800c4d4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c4d6:	7ffb      	ldrb	r3, [r7, #31]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d13b      	bne.n	800c554 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4dc:	6a3b      	ldr	r3, [r7, #32]
 800c4de:	3304      	adds	r3, #4
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7fe fb7b 	bl	800abdc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ea:	4b1e      	ldr	r3, [pc, #120]	; (800c564 <xTaskGenericNotify+0x15c>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d903      	bls.n	800c4fa <xTaskGenericNotify+0xf2>
 800c4f2:	6a3b      	ldr	r3, [r7, #32]
 800c4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f6:	4a1b      	ldr	r2, [pc, #108]	; (800c564 <xTaskGenericNotify+0x15c>)
 800c4f8:	6013      	str	r3, [r2, #0]
 800c4fa:	6a3b      	ldr	r3, [r7, #32]
 800c4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4fe:	4613      	mov	r3, r2
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	4413      	add	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4a18      	ldr	r2, [pc, #96]	; (800c568 <xTaskGenericNotify+0x160>)
 800c508:	441a      	add	r2, r3
 800c50a:	6a3b      	ldr	r3, [r7, #32]
 800c50c:	3304      	adds	r3, #4
 800c50e:	4619      	mov	r1, r3
 800c510:	4610      	mov	r0, r2
 800c512:	f7fe fb06 	bl	800ab22 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c516:	6a3b      	ldr	r3, [r7, #32]
 800c518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d009      	beq.n	800c532 <xTaskGenericNotify+0x12a>
 800c51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	613b      	str	r3, [r7, #16]
 800c530:	e7fe      	b.n	800c530 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800c532:	f7ff fe65 	bl	800c200 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c536:	6a3b      	ldr	r3, [r7, #32]
 800c538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53a:	4b0c      	ldr	r3, [pc, #48]	; (800c56c <xTaskGenericNotify+0x164>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c540:	429a      	cmp	r2, r3
 800c542:	d907      	bls.n	800c554 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c544:	4b0a      	ldr	r3, [pc, #40]	; (800c570 <xTaskGenericNotify+0x168>)
 800c546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c54a:	601a      	str	r2, [r3, #0]
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c554:	f000 fdd8 	bl	800d108 <vPortExitCritical>

		return xReturn;
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3728      	adds	r7, #40	; 0x28
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	20002004 	.word	0x20002004
 800c568:	20001b2c 	.word	0x20001b2c
 800c56c:	20001b28 	.word	0x20001b28
 800c570:	e000ed04 	.word	0xe000ed04

0800c574 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c574:	b580      	push	{r7, lr}
 800c576:	b08e      	sub	sp, #56	; 0x38
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	603b      	str	r3, [r7, #0]
 800c580:	4613      	mov	r3, r2
 800c582:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c584:	2301      	movs	r3, #1
 800c586:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d109      	bne.n	800c5a2 <xTaskGenericNotifyFromISR+0x2e>
 800c58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	627b      	str	r3, [r7, #36]	; 0x24
 800c5a0:	e7fe      	b.n	800c5a0 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5a2:	f000 fe5f 	bl	800d264 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c5aa:	f3ef 8211 	mrs	r2, BASEPRI
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	623a      	str	r2, [r7, #32]
 800c5c0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c5c2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d003      	beq.n	800c5d4 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c5da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e0:	2202      	movs	r2, #2
 800c5e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c5e6:	79fb      	ldrb	r3, [r7, #7]
 800c5e8:	2b04      	cmp	r3, #4
 800c5ea:	d829      	bhi.n	800c640 <xTaskGenericNotifyFromISR+0xcc>
 800c5ec:	a201      	add	r2, pc, #4	; (adr r2, 800c5f4 <xTaskGenericNotifyFromISR+0x80>)
 800c5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f2:	bf00      	nop
 800c5f4:	0800c65f 	.word	0x0800c65f
 800c5f8:	0800c609 	.word	0x0800c609
 800c5fc:	0800c617 	.word	0x0800c617
 800c600:	0800c623 	.word	0x0800c623
 800c604:	0800c62b 	.word	0x0800c62b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	431a      	orrs	r2, r3
 800c610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c612:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c614:	e026      	b.n	800c664 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c61a:	1c5a      	adds	r2, r3, #1
 800c61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c620:	e020      	b.n	800c664 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c628:	e01c      	b.n	800c664 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c62a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d003      	beq.n	800c63a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	68ba      	ldr	r2, [r7, #8]
 800c636:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c638:	e014      	b.n	800c664 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800c63a:	2300      	movs	r3, #0
 800c63c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c63e:	e011      	b.n	800c664 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c648:	d00b      	beq.n	800c662 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	61bb      	str	r3, [r7, #24]
 800c65c:	e7fe      	b.n	800c65c <xTaskGenericNotifyFromISR+0xe8>
					break;
 800c65e:	bf00      	nop
 800c660:	e000      	b.n	800c664 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800c662:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c664:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d145      	bne.n	800c6f8 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c670:	2b00      	cmp	r3, #0
 800c672:	d009      	beq.n	800c688 <xTaskGenericNotifyFromISR+0x114>
 800c674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c678:	f383 8811 	msr	BASEPRI, r3
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	617b      	str	r3, [r7, #20]
 800c686:	e7fe      	b.n	800c686 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c688:	4b20      	ldr	r3, [pc, #128]	; (800c70c <xTaskGenericNotifyFromISR+0x198>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d11d      	bne.n	800c6cc <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	3304      	adds	r3, #4
 800c694:	4618      	mov	r0, r3
 800c696:	f7fe faa1 	bl	800abdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c69e:	4b1c      	ldr	r3, [pc, #112]	; (800c710 <xTaskGenericNotifyFromISR+0x19c>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d903      	bls.n	800c6ae <xTaskGenericNotifyFromISR+0x13a>
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6aa:	4a19      	ldr	r2, [pc, #100]	; (800c710 <xTaskGenericNotifyFromISR+0x19c>)
 800c6ac:	6013      	str	r3, [r2, #0]
 800c6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4413      	add	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4a16      	ldr	r2, [pc, #88]	; (800c714 <xTaskGenericNotifyFromISR+0x1a0>)
 800c6bc:	441a      	add	r2, r3
 800c6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	f7fe fa2c 	bl	800ab22 <vListInsertEnd>
 800c6ca:	e005      	b.n	800c6d8 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ce:	3318      	adds	r3, #24
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	4811      	ldr	r0, [pc, #68]	; (800c718 <xTaskGenericNotifyFromISR+0x1a4>)
 800c6d4:	f7fe fa25 	bl	800ab22 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	; (800c71c <xTaskGenericNotifyFromISR+0x1a8>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d908      	bls.n	800c6f8 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d002      	beq.n	800c6f2 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c6f2:	4b0b      	ldr	r3, [pc, #44]	; (800c720 <xTaskGenericNotifyFromISR+0x1ac>)
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	601a      	str	r2, [r3, #0]
 800c6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fa:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c704:	4618      	mov	r0, r3
 800c706:	3738      	adds	r7, #56	; 0x38
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	20002024 	.word	0x20002024
 800c710:	20002004 	.word	0x20002004
 800c714:	20001b2c 	.word	0x20001b2c
 800c718:	20001fbc 	.word	0x20001fbc
 800c71c:	20001b28 	.word	0x20001b28
 800c720:	20002010 	.word	0x20002010

0800c724 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c72e:	4b21      	ldr	r3, [pc, #132]	; (800c7b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c734:	4b20      	ldr	r3, [pc, #128]	; (800c7b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	3304      	adds	r3, #4
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fe fa4e 	bl	800abdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c746:	d10a      	bne.n	800c75e <prvAddCurrentTaskToDelayedList+0x3a>
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d007      	beq.n	800c75e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c74e:	4b1a      	ldr	r3, [pc, #104]	; (800c7b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	3304      	adds	r3, #4
 800c754:	4619      	mov	r1, r3
 800c756:	4819      	ldr	r0, [pc, #100]	; (800c7bc <prvAddCurrentTaskToDelayedList+0x98>)
 800c758:	f7fe f9e3 	bl	800ab22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c75c:	e026      	b.n	800c7ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c75e:	68fa      	ldr	r2, [r7, #12]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4413      	add	r3, r2
 800c764:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c766:	4b14      	ldr	r3, [pc, #80]	; (800c7b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68ba      	ldr	r2, [r7, #8]
 800c76c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	429a      	cmp	r2, r3
 800c774:	d209      	bcs.n	800c78a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c776:	4b12      	ldr	r3, [pc, #72]	; (800c7c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	4b0f      	ldr	r3, [pc, #60]	; (800c7b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	3304      	adds	r3, #4
 800c780:	4619      	mov	r1, r3
 800c782:	4610      	mov	r0, r2
 800c784:	f7fe f9f1 	bl	800ab6a <vListInsert>
}
 800c788:	e010      	b.n	800c7ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c78a:	4b0e      	ldr	r3, [pc, #56]	; (800c7c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	4b0a      	ldr	r3, [pc, #40]	; (800c7b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	3304      	adds	r3, #4
 800c794:	4619      	mov	r1, r3
 800c796:	4610      	mov	r0, r2
 800c798:	f7fe f9e7 	bl	800ab6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c79c:	4b0a      	ldr	r3, [pc, #40]	; (800c7c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d202      	bcs.n	800c7ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c7a6:	4a08      	ldr	r2, [pc, #32]	; (800c7c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	6013      	str	r3, [r2, #0]
}
 800c7ac:	bf00      	nop
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	20002000 	.word	0x20002000
 800c7b8:	20001b28 	.word	0x20001b28
 800c7bc:	20001fe8 	.word	0x20001fe8
 800c7c0:	20001fb8 	.word	0x20001fb8
 800c7c4:	20001fb4 	.word	0x20001fb4
 800c7c8:	2000201c 	.word	0x2000201c

0800c7cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b08a      	sub	sp, #40	; 0x28
 800c7d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c7d6:	f000 faff 	bl	800cdd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c7da:	4b1c      	ldr	r3, [pc, #112]	; (800c84c <xTimerCreateTimerTask+0x80>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d021      	beq.n	800c826 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c7ea:	1d3a      	adds	r2, r7, #4
 800c7ec:	f107 0108 	add.w	r1, r7, #8
 800c7f0:	f107 030c 	add.w	r3, r7, #12
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fe f94d 	bl	800aa94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c7fa:	6879      	ldr	r1, [r7, #4]
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	9202      	str	r2, [sp, #8]
 800c802:	9301      	str	r3, [sp, #4]
 800c804:	2302      	movs	r3, #2
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	2300      	movs	r3, #0
 800c80a:	460a      	mov	r2, r1
 800c80c:	4910      	ldr	r1, [pc, #64]	; (800c850 <xTimerCreateTimerTask+0x84>)
 800c80e:	4811      	ldr	r0, [pc, #68]	; (800c854 <xTimerCreateTimerTask+0x88>)
 800c810:	f7fe fee2 	bl	800b5d8 <xTaskCreateStatic>
 800c814:	4602      	mov	r2, r0
 800c816:	4b10      	ldr	r3, [pc, #64]	; (800c858 <xTimerCreateTimerTask+0x8c>)
 800c818:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c81a:	4b0f      	ldr	r3, [pc, #60]	; (800c858 <xTimerCreateTimerTask+0x8c>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c822:	2301      	movs	r3, #1
 800c824:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d109      	bne.n	800c840 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800c82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c830:	f383 8811 	msr	BASEPRI, r3
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	613b      	str	r3, [r7, #16]
 800c83e:	e7fe      	b.n	800c83e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c840:	697b      	ldr	r3, [r7, #20]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	20002058 	.word	0x20002058
 800c850:	0800e5ec 	.word	0x0800e5ec
 800c854:	0800c98d 	.word	0x0800c98d
 800c858:	2000205c 	.word	0x2000205c

0800c85c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08a      	sub	sp, #40	; 0x28
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
 800c868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c86a:	2300      	movs	r3, #0
 800c86c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d109      	bne.n	800c888 <xTimerGenericCommand+0x2c>
 800c874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c878:	f383 8811 	msr	BASEPRI, r3
 800c87c:	f3bf 8f6f 	isb	sy
 800c880:	f3bf 8f4f 	dsb	sy
 800c884:	623b      	str	r3, [r7, #32]
 800c886:	e7fe      	b.n	800c886 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c888:	4b19      	ldr	r3, [pc, #100]	; (800c8f0 <xTimerGenericCommand+0x94>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d02a      	beq.n	800c8e6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2b05      	cmp	r3, #5
 800c8a0:	dc18      	bgt.n	800c8d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c8a2:	f7ff fccd 	bl	800c240 <xTaskGetSchedulerState>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d109      	bne.n	800c8c0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c8ac:	4b10      	ldr	r3, [pc, #64]	; (800c8f0 <xTimerGenericCommand+0x94>)
 800c8ae:	6818      	ldr	r0, [r3, #0]
 800c8b0:	f107 0110 	add.w	r1, r7, #16
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8b8:	f7fe fab8 	bl	800ae2c <xQueueGenericSend>
 800c8bc:	6278      	str	r0, [r7, #36]	; 0x24
 800c8be:	e012      	b.n	800c8e6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c8c0:	4b0b      	ldr	r3, [pc, #44]	; (800c8f0 <xTimerGenericCommand+0x94>)
 800c8c2:	6818      	ldr	r0, [r3, #0]
 800c8c4:	f107 0110 	add.w	r1, r7, #16
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f7fe faae 	bl	800ae2c <xQueueGenericSend>
 800c8d0:	6278      	str	r0, [r7, #36]	; 0x24
 800c8d2:	e008      	b.n	800c8e6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c8d4:	4b06      	ldr	r3, [pc, #24]	; (800c8f0 <xTimerGenericCommand+0x94>)
 800c8d6:	6818      	ldr	r0, [r3, #0]
 800c8d8:	f107 0110 	add.w	r1, r7, #16
 800c8dc:	2300      	movs	r3, #0
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	f7fe fb9e 	bl	800b020 <xQueueGenericSendFromISR>
 800c8e4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3728      	adds	r7, #40	; 0x28
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	20002058 	.word	0x20002058

0800c8f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b088      	sub	sp, #32
 800c8f8:	af02      	add	r7, sp, #8
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8fe:	4b22      	ldr	r3, [pc, #136]	; (800c988 <prvProcessExpiredTimer+0x94>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	3304      	adds	r3, #4
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fe f965 	bl	800abdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c918:	f003 0304 	and.w	r3, r3, #4
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d021      	beq.n	800c964 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	699a      	ldr	r2, [r3, #24]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	18d1      	adds	r1, r2, r3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	683a      	ldr	r2, [r7, #0]
 800c92c:	6978      	ldr	r0, [r7, #20]
 800c92e:	f000 f8d1 	bl	800cad4 <prvInsertTimerInActiveList>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d01e      	beq.n	800c976 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c938:	2300      	movs	r3, #0
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	2300      	movs	r3, #0
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	2100      	movs	r1, #0
 800c942:	6978      	ldr	r0, [r7, #20]
 800c944:	f7ff ff8a 	bl	800c85c <xTimerGenericCommand>
 800c948:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d112      	bne.n	800c976 <prvProcessExpiredTimer+0x82>
 800c950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	60fb      	str	r3, [r7, #12]
 800c962:	e7fe      	b.n	800c962 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c96a:	f023 0301 	bic.w	r3, r3, #1
 800c96e:	b2da      	uxtb	r2, r3
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	6978      	ldr	r0, [r7, #20]
 800c97c:	4798      	blx	r3
}
 800c97e:	bf00      	nop
 800c980:	3718      	adds	r7, #24
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	20002050 	.word	0x20002050

0800c98c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c994:	f107 0308 	add.w	r3, r7, #8
 800c998:	4618      	mov	r0, r3
 800c99a:	f000 f857 	bl	800ca4c <prvGetNextExpireTime>
 800c99e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f000 f803 	bl	800c9b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c9aa:	f000 f8d5 	bl	800cb58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c9ae:	e7f1      	b.n	800c994 <prvTimerTask+0x8>

0800c9b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c9ba:	f7ff f80f 	bl	800b9dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9be:	f107 0308 	add.w	r3, r7, #8
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f000 f866 	bl	800ca94 <prvSampleTimeNow>
 800c9c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d130      	bne.n	800ca32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d10a      	bne.n	800c9ec <prvProcessTimerOrBlockTask+0x3c>
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d806      	bhi.n	800c9ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c9de:	f7ff f843 	bl	800ba68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c9e2:	68f9      	ldr	r1, [r7, #12]
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f7ff ff85 	bl	800c8f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c9ea:	e024      	b.n	800ca36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d008      	beq.n	800ca04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c9f2:	4b13      	ldr	r3, [pc, #76]	; (800ca40 <prvProcessTimerOrBlockTask+0x90>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d101      	bne.n	800ca00 <prvProcessTimerOrBlockTask+0x50>
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e000      	b.n	800ca02 <prvProcessTimerOrBlockTask+0x52>
 800ca00:	2300      	movs	r3, #0
 800ca02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca04:	4b0f      	ldr	r3, [pc, #60]	; (800ca44 <prvProcessTimerOrBlockTask+0x94>)
 800ca06:	6818      	ldr	r0, [r3, #0]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	1ad3      	subs	r3, r2, r3
 800ca0e:	683a      	ldr	r2, [r7, #0]
 800ca10:	4619      	mov	r1, r3
 800ca12:	f7fe fdad 	bl	800b570 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ca16:	f7ff f827 	bl	800ba68 <xTaskResumeAll>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10a      	bne.n	800ca36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ca20:	4b09      	ldr	r3, [pc, #36]	; (800ca48 <prvProcessTimerOrBlockTask+0x98>)
 800ca22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca26:	601a      	str	r2, [r3, #0]
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	f3bf 8f6f 	isb	sy
}
 800ca30:	e001      	b.n	800ca36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ca32:	f7ff f819 	bl	800ba68 <xTaskResumeAll>
}
 800ca36:	bf00      	nop
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	20002054 	.word	0x20002054
 800ca44:	20002058 	.word	0x20002058
 800ca48:	e000ed04 	.word	0xe000ed04

0800ca4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ca54:	4b0e      	ldr	r3, [pc, #56]	; (800ca90 <prvGetNextExpireTime+0x44>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d101      	bne.n	800ca62 <prvGetNextExpireTime+0x16>
 800ca5e:	2201      	movs	r2, #1
 800ca60:	e000      	b.n	800ca64 <prvGetNextExpireTime+0x18>
 800ca62:	2200      	movs	r2, #0
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d105      	bne.n	800ca7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca70:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <prvGetNextExpireTime+0x44>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	60fb      	str	r3, [r7, #12]
 800ca7a:	e001      	b.n	800ca80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ca80:	68fb      	ldr	r3, [r7, #12]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3714      	adds	r7, #20
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	20002050 	.word	0x20002050

0800ca94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ca9c:	f7ff f880 	bl	800bba0 <xTaskGetTickCount>
 800caa0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800caa2:	4b0b      	ldr	r3, [pc, #44]	; (800cad0 <prvSampleTimeNow+0x3c>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d205      	bcs.n	800cab8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800caac:	f000 f930 	bl	800cd10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	601a      	str	r2, [r3, #0]
 800cab6:	e002      	b.n	800cabe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cabe:	4a04      	ldr	r2, [pc, #16]	; (800cad0 <prvSampleTimeNow+0x3c>)
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cac4:	68fb      	ldr	r3, [r7, #12]
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	20002060 	.word	0x20002060

0800cad4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b086      	sub	sp, #24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
 800cae0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cae2:	2300      	movs	r3, #0
 800cae4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d812      	bhi.n	800cb20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	1ad2      	subs	r2, r2, r3
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	699b      	ldr	r3, [r3, #24]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d302      	bcc.n	800cb0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	617b      	str	r3, [r7, #20]
 800cb0c:	e01b      	b.n	800cb46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cb0e:	4b10      	ldr	r3, [pc, #64]	; (800cb50 <prvInsertTimerInActiveList+0x7c>)
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	3304      	adds	r3, #4
 800cb16:	4619      	mov	r1, r3
 800cb18:	4610      	mov	r0, r2
 800cb1a:	f7fe f826 	bl	800ab6a <vListInsert>
 800cb1e:	e012      	b.n	800cb46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d206      	bcs.n	800cb36 <prvInsertTimerInActiveList+0x62>
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d302      	bcc.n	800cb36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cb30:	2301      	movs	r3, #1
 800cb32:	617b      	str	r3, [r7, #20]
 800cb34:	e007      	b.n	800cb46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb36:	4b07      	ldr	r3, [pc, #28]	; (800cb54 <prvInsertTimerInActiveList+0x80>)
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	4619      	mov	r1, r3
 800cb40:	4610      	mov	r0, r2
 800cb42:	f7fe f812 	bl	800ab6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cb46:	697b      	ldr	r3, [r7, #20]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3718      	adds	r7, #24
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	20002054 	.word	0x20002054
 800cb54:	20002050 	.word	0x20002050

0800cb58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b08e      	sub	sp, #56	; 0x38
 800cb5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb5e:	e0c6      	b.n	800ccee <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	da17      	bge.n	800cb96 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cb66:	1d3b      	adds	r3, r7, #4
 800cb68:	3304      	adds	r3, #4
 800cb6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d109      	bne.n	800cb86 <prvProcessReceivedCommands+0x2e>
 800cb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb76:	f383 8811 	msr	BASEPRI, r3
 800cb7a:	f3bf 8f6f 	isb	sy
 800cb7e:	f3bf 8f4f 	dsb	sy
 800cb82:	61fb      	str	r3, [r7, #28]
 800cb84:	e7fe      	b.n	800cb84 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb8c:	6850      	ldr	r0, [r2, #4]
 800cb8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb90:	6892      	ldr	r2, [r2, #8]
 800cb92:	4611      	mov	r1, r2
 800cb94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f2c0 80a7 	blt.w	800ccec <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba4:	695b      	ldr	r3, [r3, #20]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d004      	beq.n	800cbb4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbac:	3304      	adds	r3, #4
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fe f814 	bl	800abdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cbb4:	463b      	mov	r3, r7
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7ff ff6c 	bl	800ca94 <prvSampleTimeNow>
 800cbbc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b09      	cmp	r3, #9
 800cbc2:	f200 8094 	bhi.w	800ccee <prvProcessReceivedCommands+0x196>
 800cbc6:	a201      	add	r2, pc, #4	; (adr r2, 800cbcc <prvProcessReceivedCommands+0x74>)
 800cbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbcc:	0800cbf5 	.word	0x0800cbf5
 800cbd0:	0800cbf5 	.word	0x0800cbf5
 800cbd4:	0800cbf5 	.word	0x0800cbf5
 800cbd8:	0800cc67 	.word	0x0800cc67
 800cbdc:	0800cc7b 	.word	0x0800cc7b
 800cbe0:	0800ccc3 	.word	0x0800ccc3
 800cbe4:	0800cbf5 	.word	0x0800cbf5
 800cbe8:	0800cbf5 	.word	0x0800cbf5
 800cbec:	0800cc67 	.word	0x0800cc67
 800cbf0:	0800cc7b 	.word	0x0800cc7b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbfa:	f043 0301 	orr.w	r3, r3, #1
 800cbfe:	b2da      	uxtb	r2, r3
 800cc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cc06:	68ba      	ldr	r2, [r7, #8]
 800cc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0a:	699b      	ldr	r3, [r3, #24]
 800cc0c:	18d1      	adds	r1, r2, r3
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc14:	f7ff ff5e 	bl	800cad4 <prvInsertTimerInActiveList>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d067      	beq.n	800ccee <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc20:	6a1b      	ldr	r3, [r3, #32]
 800cc22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc2c:	f003 0304 	and.w	r3, r3, #4
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d05c      	beq.n	800ccee <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cc34:	68ba      	ldr	r2, [r7, #8]
 800cc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	441a      	add	r2, r3
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	2300      	movs	r3, #0
 800cc42:	2100      	movs	r1, #0
 800cc44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc46:	f7ff fe09 	bl	800c85c <xTimerGenericCommand>
 800cc4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cc4c:	6a3b      	ldr	r3, [r7, #32]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d14d      	bne.n	800ccee <prvProcessReceivedCommands+0x196>
 800cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	61bb      	str	r3, [r7, #24]
 800cc64:	e7fe      	b.n	800cc64 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc6c:	f023 0301 	bic.w	r3, r3, #1
 800cc70:	b2da      	uxtb	r2, r3
 800cc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cc78:	e039      	b.n	800ccee <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc80:	f043 0301 	orr.w	r3, r3, #1
 800cc84:	b2da      	uxtb	r2, r3
 800cc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc94:	699b      	ldr	r3, [r3, #24]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d109      	bne.n	800ccae <prvProcessReceivedCommands+0x156>
 800cc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9e:	f383 8811 	msr	BASEPRI, r3
 800cca2:	f3bf 8f6f 	isb	sy
 800cca6:	f3bf 8f4f 	dsb	sy
 800ccaa:	617b      	str	r3, [r7, #20]
 800ccac:	e7fe      	b.n	800ccac <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ccae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb0:	699a      	ldr	r2, [r3, #24]
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	18d1      	adds	r1, r2, r3
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccbc:	f7ff ff0a 	bl	800cad4 <prvInsertTimerInActiveList>
					break;
 800ccc0:	e015      	b.n	800ccee <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ccc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccc8:	f003 0302 	and.w	r3, r3, #2
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d103      	bne.n	800ccd8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800ccd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccd2:	f000 fbc7 	bl	800d464 <vPortFree>
 800ccd6:	e00a      	b.n	800ccee <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ccd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccde:	f023 0301 	bic.w	r3, r3, #1
 800cce2:	b2da      	uxtb	r2, r3
 800cce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ccea:	e000      	b.n	800ccee <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ccec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ccee:	4b07      	ldr	r3, [pc, #28]	; (800cd0c <prvProcessReceivedCommands+0x1b4>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	1d39      	adds	r1, r7, #4
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fe fa26 	bl	800b148 <xQueueReceive>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f47f af2e 	bne.w	800cb60 <prvProcessReceivedCommands+0x8>
	}
}
 800cd04:	bf00      	nop
 800cd06:	3730      	adds	r7, #48	; 0x30
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	20002058 	.word	0x20002058

0800cd10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b088      	sub	sp, #32
 800cd14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd16:	e047      	b.n	800cda8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd18:	4b2d      	ldr	r3, [pc, #180]	; (800cdd0 <prvSwitchTimerLists+0xc0>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd22:	4b2b      	ldr	r3, [pc, #172]	; (800cdd0 <prvSwitchTimerLists+0xc0>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	3304      	adds	r3, #4
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fd ff53 	bl	800abdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6a1b      	ldr	r3, [r3, #32]
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd44:	f003 0304 	and.w	r3, r3, #4
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d02d      	beq.n	800cda8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	699b      	ldr	r3, [r3, #24]
 800cd50:	693a      	ldr	r2, [r7, #16]
 800cd52:	4413      	add	r3, r2
 800cd54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cd56:	68ba      	ldr	r2, [r7, #8]
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d90e      	bls.n	800cd7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	68ba      	ldr	r2, [r7, #8]
 800cd62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd6a:	4b19      	ldr	r3, [pc, #100]	; (800cdd0 <prvSwitchTimerLists+0xc0>)
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	3304      	adds	r3, #4
 800cd72:	4619      	mov	r1, r3
 800cd74:	4610      	mov	r0, r2
 800cd76:	f7fd fef8 	bl	800ab6a <vListInsert>
 800cd7a:	e015      	b.n	800cda8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	2300      	movs	r3, #0
 800cd82:	693a      	ldr	r2, [r7, #16]
 800cd84:	2100      	movs	r1, #0
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f7ff fd68 	bl	800c85c <xTimerGenericCommand>
 800cd8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d109      	bne.n	800cda8 <prvSwitchTimerLists+0x98>
 800cd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd98:	f383 8811 	msr	BASEPRI, r3
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	603b      	str	r3, [r7, #0]
 800cda6:	e7fe      	b.n	800cda6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cda8:	4b09      	ldr	r3, [pc, #36]	; (800cdd0 <prvSwitchTimerLists+0xc0>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1b2      	bne.n	800cd18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cdb2:	4b07      	ldr	r3, [pc, #28]	; (800cdd0 <prvSwitchTimerLists+0xc0>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cdb8:	4b06      	ldr	r3, [pc, #24]	; (800cdd4 <prvSwitchTimerLists+0xc4>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a04      	ldr	r2, [pc, #16]	; (800cdd0 <prvSwitchTimerLists+0xc0>)
 800cdbe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cdc0:	4a04      	ldr	r2, [pc, #16]	; (800cdd4 <prvSwitchTimerLists+0xc4>)
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	6013      	str	r3, [r2, #0]
}
 800cdc6:	bf00      	nop
 800cdc8:	3718      	adds	r7, #24
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	20002050 	.word	0x20002050
 800cdd4:	20002054 	.word	0x20002054

0800cdd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cdde:	f000 f965 	bl	800d0ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cde2:	4b15      	ldr	r3, [pc, #84]	; (800ce38 <prvCheckForValidListAndQueue+0x60>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d120      	bne.n	800ce2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cdea:	4814      	ldr	r0, [pc, #80]	; (800ce3c <prvCheckForValidListAndQueue+0x64>)
 800cdec:	f7fd fe6c 	bl	800aac8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cdf0:	4813      	ldr	r0, [pc, #76]	; (800ce40 <prvCheckForValidListAndQueue+0x68>)
 800cdf2:	f7fd fe69 	bl	800aac8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cdf6:	4b13      	ldr	r3, [pc, #76]	; (800ce44 <prvCheckForValidListAndQueue+0x6c>)
 800cdf8:	4a10      	ldr	r2, [pc, #64]	; (800ce3c <prvCheckForValidListAndQueue+0x64>)
 800cdfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cdfc:	4b12      	ldr	r3, [pc, #72]	; (800ce48 <prvCheckForValidListAndQueue+0x70>)
 800cdfe:	4a10      	ldr	r2, [pc, #64]	; (800ce40 <prvCheckForValidListAndQueue+0x68>)
 800ce00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce02:	2300      	movs	r3, #0
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	4b11      	ldr	r3, [pc, #68]	; (800ce4c <prvCheckForValidListAndQueue+0x74>)
 800ce08:	4a11      	ldr	r2, [pc, #68]	; (800ce50 <prvCheckForValidListAndQueue+0x78>)
 800ce0a:	2110      	movs	r1, #16
 800ce0c:	200a      	movs	r0, #10
 800ce0e:	f7fd ff77 	bl	800ad00 <xQueueGenericCreateStatic>
 800ce12:	4602      	mov	r2, r0
 800ce14:	4b08      	ldr	r3, [pc, #32]	; (800ce38 <prvCheckForValidListAndQueue+0x60>)
 800ce16:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ce18:	4b07      	ldr	r3, [pc, #28]	; (800ce38 <prvCheckForValidListAndQueue+0x60>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d005      	beq.n	800ce2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ce20:	4b05      	ldr	r3, [pc, #20]	; (800ce38 <prvCheckForValidListAndQueue+0x60>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	490b      	ldr	r1, [pc, #44]	; (800ce54 <prvCheckForValidListAndQueue+0x7c>)
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fe fb7a 	bl	800b520 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce2c:	f000 f96c 	bl	800d108 <vPortExitCritical>
}
 800ce30:	bf00      	nop
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	20002058 	.word	0x20002058
 800ce3c:	20002028 	.word	0x20002028
 800ce40:	2000203c 	.word	0x2000203c
 800ce44:	20002050 	.word	0x20002050
 800ce48:	20002054 	.word	0x20002054
 800ce4c:	20002104 	.word	0x20002104
 800ce50:	20002064 	.word	0x20002064
 800ce54:	0800e5f4 	.word	0x0800e5f4

0800ce58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	3b04      	subs	r3, #4
 800ce68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ce70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	3b04      	subs	r3, #4
 800ce76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	f023 0201 	bic.w	r2, r3, #1
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	3b04      	subs	r3, #4
 800ce86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ce88:	4a0c      	ldr	r2, [pc, #48]	; (800cebc <pxPortInitialiseStack+0x64>)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	3b14      	subs	r3, #20
 800ce92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	3b04      	subs	r3, #4
 800ce9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f06f 0202 	mvn.w	r2, #2
 800cea6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	3b20      	subs	r3, #32
 800ceac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ceae:	68fb      	ldr	r3, [r7, #12]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	0800cec1 	.word	0x0800cec1

0800cec0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ceca:	4b11      	ldr	r3, [pc, #68]	; (800cf10 <prvTaskExitError+0x50>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced2:	d009      	beq.n	800cee8 <prvTaskExitError+0x28>
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	60fb      	str	r3, [r7, #12]
 800cee6:	e7fe      	b.n	800cee6 <prvTaskExitError+0x26>
 800cee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceec:	f383 8811 	msr	BASEPRI, r3
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cefa:	bf00      	nop
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d0fc      	beq.n	800cefc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf02:	bf00      	nop
 800cf04:	3714      	adds	r7, #20
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	20000120 	.word	0x20000120
	...

0800cf20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cf20:	4b07      	ldr	r3, [pc, #28]	; (800cf40 <pxCurrentTCBConst2>)
 800cf22:	6819      	ldr	r1, [r3, #0]
 800cf24:	6808      	ldr	r0, [r1, #0]
 800cf26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2a:	f380 8809 	msr	PSP, r0
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f04f 0000 	mov.w	r0, #0
 800cf36:	f380 8811 	msr	BASEPRI, r0
 800cf3a:	4770      	bx	lr
 800cf3c:	f3af 8000 	nop.w

0800cf40 <pxCurrentTCBConst2>:
 800cf40:	20001b28 	.word	0x20001b28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cf44:	bf00      	nop
 800cf46:	bf00      	nop

0800cf48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cf48:	4808      	ldr	r0, [pc, #32]	; (800cf6c <prvPortStartFirstTask+0x24>)
 800cf4a:	6800      	ldr	r0, [r0, #0]
 800cf4c:	6800      	ldr	r0, [r0, #0]
 800cf4e:	f380 8808 	msr	MSP, r0
 800cf52:	f04f 0000 	mov.w	r0, #0
 800cf56:	f380 8814 	msr	CONTROL, r0
 800cf5a:	b662      	cpsie	i
 800cf5c:	b661      	cpsie	f
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	df00      	svc	0
 800cf68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cf6a:	bf00      	nop
 800cf6c:	e000ed08 	.word	0xe000ed08

0800cf70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b086      	sub	sp, #24
 800cf74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cf76:	4b44      	ldr	r3, [pc, #272]	; (800d088 <xPortStartScheduler+0x118>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a44      	ldr	r2, [pc, #272]	; (800d08c <xPortStartScheduler+0x11c>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d109      	bne.n	800cf94 <xPortStartScheduler+0x24>
 800cf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	613b      	str	r3, [r7, #16]
 800cf92:	e7fe      	b.n	800cf92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cf94:	4b3c      	ldr	r3, [pc, #240]	; (800d088 <xPortStartScheduler+0x118>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a3d      	ldr	r2, [pc, #244]	; (800d090 <xPortStartScheduler+0x120>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d109      	bne.n	800cfb2 <xPortStartScheduler+0x42>
 800cf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa2:	f383 8811 	msr	BASEPRI, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	60fb      	str	r3, [r7, #12]
 800cfb0:	e7fe      	b.n	800cfb0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cfb2:	4b38      	ldr	r3, [pc, #224]	; (800d094 <xPortStartScheduler+0x124>)
 800cfb4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	22ff      	movs	r2, #255	; 0xff
 800cfc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cfcc:	78fb      	ldrb	r3, [r7, #3]
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	4b30      	ldr	r3, [pc, #192]	; (800d098 <xPortStartScheduler+0x128>)
 800cfd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cfda:	4b30      	ldr	r3, [pc, #192]	; (800d09c <xPortStartScheduler+0x12c>)
 800cfdc:	2207      	movs	r2, #7
 800cfde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfe0:	e009      	b.n	800cff6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800cfe2:	4b2e      	ldr	r3, [pc, #184]	; (800d09c <xPortStartScheduler+0x12c>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	4a2c      	ldr	r2, [pc, #176]	; (800d09c <xPortStartScheduler+0x12c>)
 800cfea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cfec:	78fb      	ldrb	r3, [r7, #3]
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	005b      	lsls	r3, r3, #1
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cff6:	78fb      	ldrb	r3, [r7, #3]
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cffe:	2b80      	cmp	r3, #128	; 0x80
 800d000:	d0ef      	beq.n	800cfe2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d002:	4b26      	ldr	r3, [pc, #152]	; (800d09c <xPortStartScheduler+0x12c>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f1c3 0307 	rsb	r3, r3, #7
 800d00a:	2b04      	cmp	r3, #4
 800d00c:	d009      	beq.n	800d022 <xPortStartScheduler+0xb2>
 800d00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	60bb      	str	r3, [r7, #8]
 800d020:	e7fe      	b.n	800d020 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d022:	4b1e      	ldr	r3, [pc, #120]	; (800d09c <xPortStartScheduler+0x12c>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	021b      	lsls	r3, r3, #8
 800d028:	4a1c      	ldr	r2, [pc, #112]	; (800d09c <xPortStartScheduler+0x12c>)
 800d02a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d02c:	4b1b      	ldr	r3, [pc, #108]	; (800d09c <xPortStartScheduler+0x12c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d034:	4a19      	ldr	r2, [pc, #100]	; (800d09c <xPortStartScheduler+0x12c>)
 800d036:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	b2da      	uxtb	r2, r3
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d040:	4b17      	ldr	r3, [pc, #92]	; (800d0a0 <xPortStartScheduler+0x130>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a16      	ldr	r2, [pc, #88]	; (800d0a0 <xPortStartScheduler+0x130>)
 800d046:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d04a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d04c:	4b14      	ldr	r3, [pc, #80]	; (800d0a0 <xPortStartScheduler+0x130>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a13      	ldr	r2, [pc, #76]	; (800d0a0 <xPortStartScheduler+0x130>)
 800d052:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d056:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d058:	f000 f8d6 	bl	800d208 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d05c:	4b11      	ldr	r3, [pc, #68]	; (800d0a4 <xPortStartScheduler+0x134>)
 800d05e:	2200      	movs	r2, #0
 800d060:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d062:	f000 f8f5 	bl	800d250 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d066:	4b10      	ldr	r3, [pc, #64]	; (800d0a8 <xPortStartScheduler+0x138>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a0f      	ldr	r2, [pc, #60]	; (800d0a8 <xPortStartScheduler+0x138>)
 800d06c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d070:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d072:	f7ff ff69 	bl	800cf48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d076:	f7fe fe5b 	bl	800bd30 <vTaskSwitchContext>
	prvTaskExitError();
 800d07a:	f7ff ff21 	bl	800cec0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3718      	adds	r7, #24
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	e000ed00 	.word	0xe000ed00
 800d08c:	410fc271 	.word	0x410fc271
 800d090:	410fc270 	.word	0x410fc270
 800d094:	e000e400 	.word	0xe000e400
 800d098:	20002154 	.word	0x20002154
 800d09c:	20002158 	.word	0x20002158
 800d0a0:	e000ed20 	.word	0xe000ed20
 800d0a4:	20000120 	.word	0x20000120
 800d0a8:	e000ef34 	.word	0xe000ef34

0800d0ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b6:	f383 8811 	msr	BASEPRI, r3
 800d0ba:	f3bf 8f6f 	isb	sy
 800d0be:	f3bf 8f4f 	dsb	sy
 800d0c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d0c4:	4b0e      	ldr	r3, [pc, #56]	; (800d100 <vPortEnterCritical+0x54>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	4a0d      	ldr	r2, [pc, #52]	; (800d100 <vPortEnterCritical+0x54>)
 800d0cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d0ce:	4b0c      	ldr	r3, [pc, #48]	; (800d100 <vPortEnterCritical+0x54>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d10e      	bne.n	800d0f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d0d6:	4b0b      	ldr	r3, [pc, #44]	; (800d104 <vPortEnterCritical+0x58>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d009      	beq.n	800d0f4 <vPortEnterCritical+0x48>
 800d0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	603b      	str	r3, [r7, #0]
 800d0f2:	e7fe      	b.n	800d0f2 <vPortEnterCritical+0x46>
	}
}
 800d0f4:	bf00      	nop
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr
 800d100:	20000120 	.word	0x20000120
 800d104:	e000ed04 	.word	0xe000ed04

0800d108 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d10e:	4b11      	ldr	r3, [pc, #68]	; (800d154 <vPortExitCritical+0x4c>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d109      	bne.n	800d12a <vPortExitCritical+0x22>
 800d116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	607b      	str	r3, [r7, #4]
 800d128:	e7fe      	b.n	800d128 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800d12a:	4b0a      	ldr	r3, [pc, #40]	; (800d154 <vPortExitCritical+0x4c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	3b01      	subs	r3, #1
 800d130:	4a08      	ldr	r2, [pc, #32]	; (800d154 <vPortExitCritical+0x4c>)
 800d132:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d134:	4b07      	ldr	r3, [pc, #28]	; (800d154 <vPortExitCritical+0x4c>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d104      	bne.n	800d146 <vPortExitCritical+0x3e>
 800d13c:	2300      	movs	r3, #0
 800d13e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d146:	bf00      	nop
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	20000120 	.word	0x20000120
	...

0800d160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d160:	f3ef 8009 	mrs	r0, PSP
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	4b15      	ldr	r3, [pc, #84]	; (800d1c0 <pxCurrentTCBConst>)
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	f01e 0f10 	tst.w	lr, #16
 800d170:	bf08      	it	eq
 800d172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17a:	6010      	str	r0, [r2, #0]
 800d17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d180:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d184:	f380 8811 	msr	BASEPRI, r0
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f7fe fdce 	bl	800bd30 <vTaskSwitchContext>
 800d194:	f04f 0000 	mov.w	r0, #0
 800d198:	f380 8811 	msr	BASEPRI, r0
 800d19c:	bc09      	pop	{r0, r3}
 800d19e:	6819      	ldr	r1, [r3, #0]
 800d1a0:	6808      	ldr	r0, [r1, #0]
 800d1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a6:	f01e 0f10 	tst.w	lr, #16
 800d1aa:	bf08      	it	eq
 800d1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d1b0:	f380 8809 	msr	PSP, r0
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	f3af 8000 	nop.w

0800d1c0 <pxCurrentTCBConst>:
 800d1c0:	20001b28 	.word	0x20001b28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d1c4:	bf00      	nop
 800d1c6:	bf00      	nop

0800d1c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d1e0:	f7fe fcee 	bl	800bbc0 <xTaskIncrementTick>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d003      	beq.n	800d1f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d1ea:	4b06      	ldr	r3, [pc, #24]	; (800d204 <SysTick_Handler+0x3c>)
 800d1ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1f0:	601a      	str	r2, [r3, #0]
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d1fc:	bf00      	nop
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	e000ed04 	.word	0xe000ed04

0800d208 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d208:	b480      	push	{r7}
 800d20a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d20c:	4b0b      	ldr	r3, [pc, #44]	; (800d23c <vPortSetupTimerInterrupt+0x34>)
 800d20e:	2200      	movs	r2, #0
 800d210:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d212:	4b0b      	ldr	r3, [pc, #44]	; (800d240 <vPortSetupTimerInterrupt+0x38>)
 800d214:	2200      	movs	r2, #0
 800d216:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d218:	4b0a      	ldr	r3, [pc, #40]	; (800d244 <vPortSetupTimerInterrupt+0x3c>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a0a      	ldr	r2, [pc, #40]	; (800d248 <vPortSetupTimerInterrupt+0x40>)
 800d21e:	fba2 2303 	umull	r2, r3, r2, r3
 800d222:	099b      	lsrs	r3, r3, #6
 800d224:	4a09      	ldr	r2, [pc, #36]	; (800d24c <vPortSetupTimerInterrupt+0x44>)
 800d226:	3b01      	subs	r3, #1
 800d228:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d22a:	4b04      	ldr	r3, [pc, #16]	; (800d23c <vPortSetupTimerInterrupt+0x34>)
 800d22c:	2207      	movs	r2, #7
 800d22e:	601a      	str	r2, [r3, #0]
}
 800d230:	bf00      	nop
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	e000e010 	.word	0xe000e010
 800d240:	e000e018 	.word	0xe000e018
 800d244:	20000004 	.word	0x20000004
 800d248:	10624dd3 	.word	0x10624dd3
 800d24c:	e000e014 	.word	0xe000e014

0800d250 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d250:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d260 <vPortEnableVFP+0x10>
 800d254:	6801      	ldr	r1, [r0, #0]
 800d256:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d25a:	6001      	str	r1, [r0, #0]
 800d25c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d25e:	bf00      	nop
 800d260:	e000ed88 	.word	0xe000ed88

0800d264 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d26a:	f3ef 8305 	mrs	r3, IPSR
 800d26e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2b0f      	cmp	r3, #15
 800d274:	d913      	bls.n	800d29e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d276:	4a16      	ldr	r2, [pc, #88]	; (800d2d0 <vPortValidateInterruptPriority+0x6c>)
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	4413      	add	r3, r2
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d280:	4b14      	ldr	r3, [pc, #80]	; (800d2d4 <vPortValidateInterruptPriority+0x70>)
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	7afa      	ldrb	r2, [r7, #11]
 800d286:	429a      	cmp	r2, r3
 800d288:	d209      	bcs.n	800d29e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800d28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28e:	f383 8811 	msr	BASEPRI, r3
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	607b      	str	r3, [r7, #4]
 800d29c:	e7fe      	b.n	800d29c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d29e:	4b0e      	ldr	r3, [pc, #56]	; (800d2d8 <vPortValidateInterruptPriority+0x74>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d2a6:	4b0d      	ldr	r3, [pc, #52]	; (800d2dc <vPortValidateInterruptPriority+0x78>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d909      	bls.n	800d2c2 <vPortValidateInterruptPriority+0x5e>
 800d2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b2:	f383 8811 	msr	BASEPRI, r3
 800d2b6:	f3bf 8f6f 	isb	sy
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	603b      	str	r3, [r7, #0]
 800d2c0:	e7fe      	b.n	800d2c0 <vPortValidateInterruptPriority+0x5c>
	}
 800d2c2:	bf00      	nop
 800d2c4:	3714      	adds	r7, #20
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	e000e3f0 	.word	0xe000e3f0
 800d2d4:	20002154 	.word	0x20002154
 800d2d8:	e000ed0c 	.word	0xe000ed0c
 800d2dc:	20002158 	.word	0x20002158

0800d2e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b08a      	sub	sp, #40	; 0x28
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d2ec:	f7fe fb76 	bl	800b9dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d2f0:	4b57      	ldr	r3, [pc, #348]	; (800d450 <pvPortMalloc+0x170>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d101      	bne.n	800d2fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d2f8:	f000 f90c 	bl	800d514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d2fc:	4b55      	ldr	r3, [pc, #340]	; (800d454 <pvPortMalloc+0x174>)
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4013      	ands	r3, r2
 800d304:	2b00      	cmp	r3, #0
 800d306:	f040 808c 	bne.w	800d422 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d01c      	beq.n	800d34a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800d310:	2208      	movs	r2, #8
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4413      	add	r3, r2
 800d316:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f003 0307 	and.w	r3, r3, #7
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d013      	beq.n	800d34a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f023 0307 	bic.w	r3, r3, #7
 800d328:	3308      	adds	r3, #8
 800d32a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f003 0307 	and.w	r3, r3, #7
 800d332:	2b00      	cmp	r3, #0
 800d334:	d009      	beq.n	800d34a <pvPortMalloc+0x6a>
 800d336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33a:	f383 8811 	msr	BASEPRI, r3
 800d33e:	f3bf 8f6f 	isb	sy
 800d342:	f3bf 8f4f 	dsb	sy
 800d346:	617b      	str	r3, [r7, #20]
 800d348:	e7fe      	b.n	800d348 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d068      	beq.n	800d422 <pvPortMalloc+0x142>
 800d350:	4b41      	ldr	r3, [pc, #260]	; (800d458 <pvPortMalloc+0x178>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	429a      	cmp	r2, r3
 800d358:	d863      	bhi.n	800d422 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d35a:	4b40      	ldr	r3, [pc, #256]	; (800d45c <pvPortMalloc+0x17c>)
 800d35c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d35e:	4b3f      	ldr	r3, [pc, #252]	; (800d45c <pvPortMalloc+0x17c>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d364:	e004      	b.n	800d370 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800d366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	429a      	cmp	r2, r3
 800d378:	d903      	bls.n	800d382 <pvPortMalloc+0xa2>
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d1f1      	bne.n	800d366 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d382:	4b33      	ldr	r3, [pc, #204]	; (800d450 <pvPortMalloc+0x170>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d388:	429a      	cmp	r2, r3
 800d38a:	d04a      	beq.n	800d422 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d38c:	6a3b      	ldr	r3, [r7, #32]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2208      	movs	r2, #8
 800d392:	4413      	add	r3, r2
 800d394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	6a3b      	ldr	r3, [r7, #32]
 800d39c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a0:	685a      	ldr	r2, [r3, #4]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	1ad2      	subs	r2, r2, r3
 800d3a6:	2308      	movs	r3, #8
 800d3a8:	005b      	lsls	r3, r3, #1
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d91e      	bls.n	800d3ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d3ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	f003 0307 	and.w	r3, r3, #7
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d009      	beq.n	800d3d4 <pvPortMalloc+0xf4>
 800d3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	613b      	str	r3, [r7, #16]
 800d3d2:	e7fe      	b.n	800d3d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d6:	685a      	ldr	r2, [r3, #4]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	1ad2      	subs	r2, r2, r3
 800d3dc:	69bb      	ldr	r3, [r7, #24]
 800d3de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d3e6:	69b8      	ldr	r0, [r7, #24]
 800d3e8:	f000 f8f6 	bl	800d5d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3ec:	4b1a      	ldr	r3, [pc, #104]	; (800d458 <pvPortMalloc+0x178>)
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	1ad3      	subs	r3, r2, r3
 800d3f6:	4a18      	ldr	r2, [pc, #96]	; (800d458 <pvPortMalloc+0x178>)
 800d3f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3fa:	4b17      	ldr	r3, [pc, #92]	; (800d458 <pvPortMalloc+0x178>)
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	4b18      	ldr	r3, [pc, #96]	; (800d460 <pvPortMalloc+0x180>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	429a      	cmp	r2, r3
 800d404:	d203      	bcs.n	800d40e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d406:	4b14      	ldr	r3, [pc, #80]	; (800d458 <pvPortMalloc+0x178>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a15      	ldr	r2, [pc, #84]	; (800d460 <pvPortMalloc+0x180>)
 800d40c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d410:	685a      	ldr	r2, [r3, #4]
 800d412:	4b10      	ldr	r3, [pc, #64]	; (800d454 <pvPortMalloc+0x174>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	431a      	orrs	r2, r3
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41e:	2200      	movs	r2, #0
 800d420:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d422:	f7fe fb21 	bl	800ba68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	f003 0307 	and.w	r3, r3, #7
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d009      	beq.n	800d444 <pvPortMalloc+0x164>
 800d430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d434:	f383 8811 	msr	BASEPRI, r3
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	60fb      	str	r3, [r7, #12]
 800d442:	e7fe      	b.n	800d442 <pvPortMalloc+0x162>
	return pvReturn;
 800d444:	69fb      	ldr	r3, [r7, #28]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3728      	adds	r7, #40	; 0x28
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	20004874 	.word	0x20004874
 800d454:	20004880 	.word	0x20004880
 800d458:	20004878 	.word	0x20004878
 800d45c:	2000486c 	.word	0x2000486c
 800d460:	2000487c 	.word	0x2000487c

0800d464 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b086      	sub	sp, #24
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d046      	beq.n	800d504 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d476:	2308      	movs	r3, #8
 800d478:	425b      	negs	r3, r3
 800d47a:	697a      	ldr	r2, [r7, #20]
 800d47c:	4413      	add	r3, r2
 800d47e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	685a      	ldr	r2, [r3, #4]
 800d488:	4b20      	ldr	r3, [pc, #128]	; (800d50c <vPortFree+0xa8>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4013      	ands	r3, r2
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d109      	bne.n	800d4a6 <vPortFree+0x42>
 800d492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d496:	f383 8811 	msr	BASEPRI, r3
 800d49a:	f3bf 8f6f 	isb	sy
 800d49e:	f3bf 8f4f 	dsb	sy
 800d4a2:	60fb      	str	r3, [r7, #12]
 800d4a4:	e7fe      	b.n	800d4a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d009      	beq.n	800d4c2 <vPortFree+0x5e>
 800d4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b2:	f383 8811 	msr	BASEPRI, r3
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	60bb      	str	r3, [r7, #8]
 800d4c0:	e7fe      	b.n	800d4c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	685a      	ldr	r2, [r3, #4]
 800d4c6:	4b11      	ldr	r3, [pc, #68]	; (800d50c <vPortFree+0xa8>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4013      	ands	r3, r2
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d019      	beq.n	800d504 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d115      	bne.n	800d504 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	685a      	ldr	r2, [r3, #4]
 800d4dc:	4b0b      	ldr	r3, [pc, #44]	; (800d50c <vPortFree+0xa8>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	43db      	mvns	r3, r3
 800d4e2:	401a      	ands	r2, r3
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d4e8:	f7fe fa78 	bl	800b9dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	685a      	ldr	r2, [r3, #4]
 800d4f0:	4b07      	ldr	r3, [pc, #28]	; (800d510 <vPortFree+0xac>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	4a06      	ldr	r2, [pc, #24]	; (800d510 <vPortFree+0xac>)
 800d4f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d4fa:	6938      	ldr	r0, [r7, #16]
 800d4fc:	f000 f86c 	bl	800d5d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d500:	f7fe fab2 	bl	800ba68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d504:	bf00      	nop
 800d506:	3718      	adds	r7, #24
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	20004880 	.word	0x20004880
 800d510:	20004878 	.word	0x20004878

0800d514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d514:	b480      	push	{r7}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d51a:	f242 7310 	movw	r3, #10000	; 0x2710
 800d51e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d520:	4b27      	ldr	r3, [pc, #156]	; (800d5c0 <prvHeapInit+0xac>)
 800d522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f003 0307 	and.w	r3, r3, #7
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00c      	beq.n	800d548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	3307      	adds	r3, #7
 800d532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f023 0307 	bic.w	r3, r3, #7
 800d53a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d53c:	68ba      	ldr	r2, [r7, #8]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	1ad3      	subs	r3, r2, r3
 800d542:	4a1f      	ldr	r2, [pc, #124]	; (800d5c0 <prvHeapInit+0xac>)
 800d544:	4413      	add	r3, r2
 800d546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d54c:	4a1d      	ldr	r2, [pc, #116]	; (800d5c4 <prvHeapInit+0xb0>)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d552:	4b1c      	ldr	r3, [pc, #112]	; (800d5c4 <prvHeapInit+0xb0>)
 800d554:	2200      	movs	r2, #0
 800d556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	68ba      	ldr	r2, [r7, #8]
 800d55c:	4413      	add	r3, r2
 800d55e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d560:	2208      	movs	r2, #8
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	1a9b      	subs	r3, r3, r2
 800d566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f023 0307 	bic.w	r3, r3, #7
 800d56e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	4a15      	ldr	r2, [pc, #84]	; (800d5c8 <prvHeapInit+0xb4>)
 800d574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d576:	4b14      	ldr	r3, [pc, #80]	; (800d5c8 <prvHeapInit+0xb4>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2200      	movs	r2, #0
 800d57c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d57e:	4b12      	ldr	r3, [pc, #72]	; (800d5c8 <prvHeapInit+0xb4>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	2200      	movs	r2, #0
 800d584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	1ad2      	subs	r2, r2, r3
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d594:	4b0c      	ldr	r3, [pc, #48]	; (800d5c8 <prvHeapInit+0xb4>)
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	4a0a      	ldr	r2, [pc, #40]	; (800d5cc <prvHeapInit+0xb8>)
 800d5a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	4a09      	ldr	r2, [pc, #36]	; (800d5d0 <prvHeapInit+0xbc>)
 800d5aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d5ac:	4b09      	ldr	r3, [pc, #36]	; (800d5d4 <prvHeapInit+0xc0>)
 800d5ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d5b2:	601a      	str	r2, [r3, #0]
}
 800d5b4:	bf00      	nop
 800d5b6:	3714      	adds	r7, #20
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	2000215c 	.word	0x2000215c
 800d5c4:	2000486c 	.word	0x2000486c
 800d5c8:	20004874 	.word	0x20004874
 800d5cc:	2000487c 	.word	0x2000487c
 800d5d0:	20004878 	.word	0x20004878
 800d5d4:	20004880 	.word	0x20004880

0800d5d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d5e0:	4b28      	ldr	r3, [pc, #160]	; (800d684 <prvInsertBlockIntoFreeList+0xac>)
 800d5e2:	60fb      	str	r3, [r7, #12]
 800d5e4:	e002      	b.n	800d5ec <prvInsertBlockIntoFreeList+0x14>
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d8f7      	bhi.n	800d5e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	4413      	add	r3, r2
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	429a      	cmp	r2, r3
 800d606:	d108      	bne.n	800d61a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	685a      	ldr	r2, [r3, #4]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	441a      	add	r2, r3
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	68ba      	ldr	r2, [r7, #8]
 800d624:	441a      	add	r2, r3
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d118      	bne.n	800d660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681a      	ldr	r2, [r3, #0]
 800d632:	4b15      	ldr	r3, [pc, #84]	; (800d688 <prvInsertBlockIntoFreeList+0xb0>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	429a      	cmp	r2, r3
 800d638:	d00d      	beq.n	800d656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	685a      	ldr	r2, [r3, #4]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	441a      	add	r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	601a      	str	r2, [r3, #0]
 800d654:	e008      	b.n	800d668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d656:	4b0c      	ldr	r3, [pc, #48]	; (800d688 <prvInsertBlockIntoFreeList+0xb0>)
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	601a      	str	r2, [r3, #0]
 800d65e:	e003      	b.n	800d668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d002      	beq.n	800d676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d676:	bf00      	nop
 800d678:	3714      	adds	r7, #20
 800d67a:	46bd      	mov	sp, r7
 800d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d680:	4770      	bx	lr
 800d682:	bf00      	nop
 800d684:	2000486c 	.word	0x2000486c
 800d688:	20004874 	.word	0x20004874

0800d68c <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 800d694:	f000 f814 	bl	800d6c0 <Receive_Ack_From_M0>
}
 800d698:	bf00      	nop
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 800d6a8:	4a04      	ldr	r2, [pc, #16]	; (800d6bc <TL_THREAD_NotReceived+0x1c>)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800d6ae:	f000 f813 	bl	800d6d8 <Receive_Notification_From_M0>
}
 800d6b2:	bf00      	nop
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	20004884 	.word	0x20004884

0800d6c0 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 800d6c4:	4b03      	ldr	r3, [pc, #12]	; (800d6d4 <Receive_Ack_From_M0+0x14>)
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	601a      	str	r2, [r3, #0]
}
 800d6ca:	bf00      	nop
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr
 800d6d4:	2000488c 	.word	0x2000488c

0800d6d8 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 800d6dc:	4b06      	ldr	r3, [pc, #24]	; (800d6f8 <Receive_Notification_From_M0+0x20>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	4a05      	ldr	r2, [pc, #20]	; (800d6f8 <Receive_Notification_From_M0+0x20>)
 800d6e4:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 800d6e6:	4b05      	ldr	r3, [pc, #20]	; (800d6fc <Receive_Notification_From_M0+0x24>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2101      	movs	r1, #1
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7fd f8c1 	bl	800a874 <osThreadFlagsSet>
}
 800d6f2:	bf00      	nop
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	20004888 	.word	0x20004888
 800d6fc:	20004890 	.word	0x20004890

0800d700 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 800d704:	f7fc fe40 	bl	800a388 <TL_THREAD_CliSendAck>
}
 800d708:	bf00      	nop
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	7adb      	ldrb	r3, [r3, #11]
 800d71c:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	330c      	adds	r3, #12
 800d722:	4906      	ldr	r1, [pc, #24]	; (800d73c <TL_THREAD_CliNotReceived+0x30>)
 800d724:	4618      	mov	r0, r3
 800d726:	f7f2 fd2b 	bl	8000180 <strcmp>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 800d730:	f7ff ffe6 	bl	800d700 <Send_CLI_Ack_For_OT>
  }
}
 800d734:	bf00      	nop
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	0800e82c 	.word	0x0800e82c

0800d740 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	685a      	ldr	r2, [r3, #4]
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	041b      	lsls	r3, r3, #16
 800d752:	43db      	mvns	r3, r3
 800d754:	401a      	ands	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	605a      	str	r2, [r3, #4]
}
 800d75a:	bf00      	nop
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800d766:	b480      	push	{r7}
 800d768:	b083      	sub	sp, #12
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	685a      	ldr	r2, [r3, #4]
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	041b      	lsls	r3, r3, #16
 800d778:	431a      	orrs	r2, r3
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	605a      	str	r2, [r3, #4]
}
 800d77e:	bf00      	nop
 800d780:	370c      	adds	r7, #12
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr

0800d78a <LL_C1_IPCC_EnableReceiveChannel>:
{
 800d78a:	b480      	push	{r7}
 800d78c:	b083      	sub	sp, #12
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
 800d792:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	685a      	ldr	r2, [r3, #4]
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	43db      	mvns	r3, r3
 800d79c:	401a      	ands	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	605a      	str	r2, [r3, #4]
}
 800d7a2:	bf00      	nop
 800d7a4:	370c      	adds	r7, #12
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr

0800d7ae <LL_C1_IPCC_DisableReceiveChannel>:
{
 800d7ae:	b480      	push	{r7}
 800d7b0:	b083      	sub	sp, #12
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
 800d7b6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	685a      	ldr	r2, [r3, #4]
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	431a      	orrs	r2, r3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	605a      	str	r2, [r3, #4]
}
 800d7c4:	bf00      	nop
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr

0800d7d0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	683a      	ldr	r2, [r7, #0]
 800d7de:	609a      	str	r2, [r3, #8]
}
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <LL_C1_IPCC_SetFlag_CHx>:
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	041a      	lsls	r2, r3, #16
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	609a      	str	r2, [r3, #8]
}
 800d7fe:	bf00      	nop
 800d800:	370c      	adds	r7, #12
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr

0800d80a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800d80a:	b480      	push	{r7}
 800d80c:	b083      	sub	sp, #12
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
 800d812:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	68da      	ldr	r2, [r3, #12]
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	4013      	ands	r3, r2
 800d81c:	683a      	ldr	r2, [r7, #0]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d101      	bne.n	800d826 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d822:	2301      	movs	r3, #1
 800d824:	e000      	b.n	800d828 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	69da      	ldr	r2, [r3, #28]
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	4013      	ands	r3, r2
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d101      	bne.n	800d850 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d84c:	2301      	movs	r3, #1
 800d84e:	e000      	b.n	800d852 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d850:	2300      	movs	r3, #0
}
 800d852:	4618      	mov	r0, r3
 800d854:	370c      	adds	r7, #12
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
	...

0800d860 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d864:	2102      	movs	r1, #2
 800d866:	482a      	ldr	r0, [pc, #168]	; (800d910 <HW_IPCC_Rx_Handler+0xb0>)
 800d868:	f7ff ffe4 	bl	800d834 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d009      	beq.n	800d886 <HW_IPCC_Rx_Handler+0x26>
 800d872:	4b27      	ldr	r3, [pc, #156]	; (800d910 <HW_IPCC_Rx_Handler+0xb0>)
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	43db      	mvns	r3, r3
 800d878:	f003 0302 	and.w	r3, r3, #2
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d002      	beq.n	800d886 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800d880:	f000 f8c8 	bl	800da14 <HW_IPCC_SYS_EvtHandler>
 800d884:	e041      	b.n	800d90a <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 800d886:	2104      	movs	r1, #4
 800d888:	4821      	ldr	r0, [pc, #132]	; (800d910 <HW_IPCC_Rx_Handler+0xb0>)
 800d88a:	f7ff ffd3 	bl	800d834 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d009      	beq.n	800d8a8 <HW_IPCC_Rx_Handler+0x48>
 800d894:	4b1e      	ldr	r3, [pc, #120]	; (800d910 <HW_IPCC_Rx_Handler+0xb0>)
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	43db      	mvns	r3, r3
 800d89a:	f003 0304 	and.w	r3, r3, #4
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d002      	beq.n	800d8a8 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 800d8a2:	f000 f8dd 	bl	800da60 <HW_IPCC_THREAD_NotEvtHandler>
 800d8a6:	e030      	b.n	800d90a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 800d8a8:	2110      	movs	r1, #16
 800d8aa:	4819      	ldr	r0, [pc, #100]	; (800d910 <HW_IPCC_Rx_Handler+0xb0>)
 800d8ac:	f7ff ffc2 	bl	800d834 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d009      	beq.n	800d8ca <HW_IPCC_Rx_Handler+0x6a>
 800d8b6:	4b16      	ldr	r3, [pc, #88]	; (800d910 <HW_IPCC_Rx_Handler+0xb0>)
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	43db      	mvns	r3, r3
 800d8bc:	f003 0310 	and.w	r3, r3, #16
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d002      	beq.n	800d8ca <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 800d8c4:	f000 f8d8 	bl	800da78 <HW_IPCC_THREAD_CliNotEvtHandler>
 800d8c8:	e01f      	b.n	800d90a <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d8ca:	2101      	movs	r1, #1
 800d8cc:	4810      	ldr	r0, [pc, #64]	; (800d910 <HW_IPCC_Rx_Handler+0xb0>)
 800d8ce:	f7ff ffb1 	bl	800d834 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d008      	beq.n	800d8ea <HW_IPCC_Rx_Handler+0x8a>
 800d8d8:	4b0d      	ldr	r3, [pc, #52]	; (800d910 <HW_IPCC_Rx_Handler+0xb0>)
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	f003 0301 	and.w	r3, r3, #1
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d102      	bne.n	800d8ea <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 800d8e4:	f000 f872 	bl	800d9cc <HW_IPCC_BLE_EvtHandler>
 800d8e8:	e00f      	b.n	800d90a <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d8ea:	2108      	movs	r1, #8
 800d8ec:	4808      	ldr	r0, [pc, #32]	; (800d910 <HW_IPCC_Rx_Handler+0xb0>)
 800d8ee:	f7ff ffa1 	bl	800d834 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d009      	beq.n	800d90c <HW_IPCC_Rx_Handler+0xac>
 800d8f8:	4b05      	ldr	r3, [pc, #20]	; (800d910 <HW_IPCC_Rx_Handler+0xb0>)
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	43db      	mvns	r3, r3
 800d8fe:	f003 0308 	and.w	r3, r3, #8
 800d902:	2b00      	cmp	r3, #0
 800d904:	d002      	beq.n	800d90c <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d906:	f000 f8f9 	bl	800dafc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d90a:	bf00      	nop
 800d90c:	bf00      	nop
}
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	58000c00 	.word	0x58000c00

0800d914 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d914:	b580      	push	{r7, lr}
 800d916:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d918:	2102      	movs	r1, #2
 800d91a:	482b      	ldr	r0, [pc, #172]	; (800d9c8 <HW_IPCC_Tx_Handler+0xb4>)
 800d91c:	f7ff ff75 	bl	800d80a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d109      	bne.n	800d93a <HW_IPCC_Tx_Handler+0x26>
 800d926:	4b28      	ldr	r3, [pc, #160]	; (800d9c8 <HW_IPCC_Tx_Handler+0xb4>)
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	43db      	mvns	r3, r3
 800d92c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d930:	2b00      	cmp	r3, #0
 800d932:	d002      	beq.n	800d93a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d934:	f000 f862 	bl	800d9fc <HW_IPCC_SYS_CmdEvtHandler>
 800d938:	e042      	b.n	800d9c0 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 800d93a:	2104      	movs	r1, #4
 800d93c:	4822      	ldr	r0, [pc, #136]	; (800d9c8 <HW_IPCC_Tx_Handler+0xb4>)
 800d93e:	f7ff ff64 	bl	800d80a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d109      	bne.n	800d95c <HW_IPCC_Tx_Handler+0x48>
 800d948:	4b1f      	ldr	r3, [pc, #124]	; (800d9c8 <HW_IPCC_Tx_Handler+0xb4>)
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	43db      	mvns	r3, r3
 800d94e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d952:	2b00      	cmp	r3, #0
 800d954:	d002      	beq.n	800d95c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 800d956:	f000 f877 	bl	800da48 <HW_IPCC_OT_CmdEvtHandler>
 800d95a:	e031      	b.n	800d9c0 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d95c:	2102      	movs	r1, #2
 800d95e:	481a      	ldr	r0, [pc, #104]	; (800d9c8 <HW_IPCC_Tx_Handler+0xb4>)
 800d960:	f7ff ff53 	bl	800d80a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d109      	bne.n	800d97e <HW_IPCC_Tx_Handler+0x6a>
 800d96a:	4b17      	ldr	r3, [pc, #92]	; (800d9c8 <HW_IPCC_Tx_Handler+0xb4>)
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	43db      	mvns	r3, r3
 800d970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d978:	f000 f840 	bl	800d9fc <HW_IPCC_SYS_CmdEvtHandler>
 800d97c:	e020      	b.n	800d9c0 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d97e:	2108      	movs	r1, #8
 800d980:	4811      	ldr	r0, [pc, #68]	; (800d9c8 <HW_IPCC_Tx_Handler+0xb4>)
 800d982:	f7ff ff42 	bl	800d80a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d109      	bne.n	800d9a0 <HW_IPCC_Tx_Handler+0x8c>
 800d98c:	4b0e      	ldr	r3, [pc, #56]	; (800d9c8 <HW_IPCC_Tx_Handler+0xb4>)
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	43db      	mvns	r3, r3
 800d992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d996:	2b00      	cmp	r3, #0
 800d998:	d002      	beq.n	800d9a0 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d99a:	f000 f89b 	bl	800dad4 <HW_IPCC_MM_FreeBufHandler>
 800d99e:	e00f      	b.n	800d9c0 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d9a0:	2120      	movs	r1, #32
 800d9a2:	4809      	ldr	r0, [pc, #36]	; (800d9c8 <HW_IPCC_Tx_Handler+0xb4>)
 800d9a4:	f7ff ff31 	bl	800d80a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d109      	bne.n	800d9c2 <HW_IPCC_Tx_Handler+0xae>
 800d9ae:	4b06      	ldr	r3, [pc, #24]	; (800d9c8 <HW_IPCC_Tx_Handler+0xb4>)
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	43db      	mvns	r3, r3
 800d9b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d9bc:	f000 f812 	bl	800d9e4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d9c0:	bf00      	nop
 800d9c2:	bf00      	nop
}
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	58000c00 	.word	0x58000c00

0800d9cc <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d9d0:	f7fc fc68 	bl	800a2a4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d9d4:	2101      	movs	r1, #1
 800d9d6:	4802      	ldr	r0, [pc, #8]	; (800d9e0 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d9d8:	f7ff fefa 	bl	800d7d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d9dc:	bf00      	nop
}
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	58000c00 	.word	0x58000c00

0800d9e4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d9e8:	2120      	movs	r1, #32
 800d9ea:	4803      	ldr	r0, [pc, #12]	; (800d9f8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d9ec:	f7ff febb 	bl	800d766 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d9f0:	f7fc fc88 	bl	800a304 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d9f4:	bf00      	nop
}
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	58000c00 	.word	0x58000c00

0800d9fc <HW_IPCC_SYS_CmdEvtHandler>:

  return;
}

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800da00:	2102      	movs	r1, #2
 800da02:	4803      	ldr	r0, [pc, #12]	; (800da10 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800da04:	f7ff feaf 	bl	800d766 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800da08:	f7fc fc86 	bl	800a318 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800da0c:	bf00      	nop
}
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	58000c00 	.word	0x58000c00

0800da14 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800da14:	b580      	push	{r7, lr}
 800da16:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800da18:	f7fc fc94 	bl	800a344 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800da1c:	2102      	movs	r1, #2
 800da1e:	4802      	ldr	r0, [pc, #8]	; (800da28 <HW_IPCC_SYS_EvtHandler+0x14>)
 800da20:	f7ff fed6 	bl	800d7d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800da24:	bf00      	nop
}
 800da26:	bd80      	pop	{r7, pc}
 800da28:	58000c00 	.word	0x58000c00

0800da2c <HW_IPCC_THREAD_CliSendAck>:

  return;
}

void HW_IPCC_THREAD_CliSendAck( void )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800da30:	2110      	movs	r1, #16
 800da32:	4804      	ldr	r0, [pc, #16]	; (800da44 <HW_IPCC_THREAD_CliSendAck+0x18>)
 800da34:	f7ff fecc 	bl	800d7d0 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800da38:	2110      	movs	r1, #16
 800da3a:	4802      	ldr	r0, [pc, #8]	; (800da44 <HW_IPCC_THREAD_CliSendAck+0x18>)
 800da3c:	f7ff fea5 	bl	800d78a <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800da40:	bf00      	nop
}
 800da42:	bd80      	pop	{r7, pc}
 800da44:	58000c00 	.word	0x58000c00

0800da48 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 800da4c:	2104      	movs	r1, #4
 800da4e:	4803      	ldr	r0, [pc, #12]	; (800da5c <HW_IPCC_OT_CmdEvtHandler+0x14>)
 800da50:	f7ff fe89 	bl	800d766 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 800da54:	f7fc fca6 	bl	800a3a4 <HW_IPCC_OT_CmdEvtNot>

  return;
 800da58:	bf00      	nop
}
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	58000c00 	.word	0x58000c00

0800da60 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 800da60:	b580      	push	{r7, lr}
 800da62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 800da64:	2104      	movs	r1, #4
 800da66:	4803      	ldr	r0, [pc, #12]	; (800da74 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 800da68:	f7ff fea1 	bl	800d7ae <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 800da6c:	f7fc fca6 	bl	800a3bc <HW_IPCC_THREAD_EvtNot>

  return;
 800da70:	bf00      	nop
}
 800da72:	bd80      	pop	{r7, pc}
 800da74:	58000c00 	.word	0x58000c00

0800da78 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 800da7c:	2110      	movs	r1, #16
 800da7e:	4803      	ldr	r0, [pc, #12]	; (800da8c <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 800da80:	f7ff fe95 	bl	800d7ae <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 800da84:	f7fc fca6 	bl	800a3d4 <HW_IPCC_THREAD_CliEvtNot>

  return;
 800da88:	bf00      	nop
}
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	58000c00 	.word	0x58000c00

0800da90 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800da98:	2108      	movs	r1, #8
 800da9a:	480c      	ldr	r0, [pc, #48]	; (800dacc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800da9c:	f7ff feb5 	bl	800d80a <LL_C1_IPCC_IsActiveFlag_CHx>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d007      	beq.n	800dab6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800daa6:	4a0a      	ldr	r2, [pc, #40]	; (800dad0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800daac:	2108      	movs	r1, #8
 800daae:	4807      	ldr	r0, [pc, #28]	; (800dacc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800dab0:	f7ff fe46 	bl	800d740 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800dab4:	e006      	b.n	800dac4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800daba:	2108      	movs	r1, #8
 800dabc:	4803      	ldr	r0, [pc, #12]	; (800dacc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800dabe:	f7ff fe95 	bl	800d7ec <LL_C1_IPCC_SetFlag_CHx>
  return;
 800dac2:	bf00      	nop
}
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	58000c00 	.word	0x58000c00
 800dad0:	20004894 	.word	0x20004894

0800dad4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dad8:	2108      	movs	r1, #8
 800dada:	4806      	ldr	r0, [pc, #24]	; (800daf4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800dadc:	f7ff fe43 	bl	800d766 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800dae0:	4b05      	ldr	r3, [pc, #20]	; (800daf8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dae6:	2108      	movs	r1, #8
 800dae8:	4802      	ldr	r0, [pc, #8]	; (800daf4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800daea:	f7ff fe7f 	bl	800d7ec <LL_C1_IPCC_SetFlag_CHx>

  return;
 800daee:	bf00      	nop
}
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	58000c00 	.word	0x58000c00
 800daf8:	20004894 	.word	0x20004894

0800dafc <HW_IPCC_TRACES_EvtHandler>:

  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800db00:	f7fc fcac 	bl	800a45c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800db04:	2108      	movs	r1, #8
 800db06:	4802      	ldr	r0, [pc, #8]	; (800db10 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800db08:	f7ff fe62 	bl	800d7d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800db0c:	bf00      	nop
}
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	58000c00 	.word	0x58000c00

0800db14 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800db18:	2200      	movs	r2, #0
 800db1a:	4912      	ldr	r1, [pc, #72]	; (800db64 <MX_USB_Device_Init+0x50>)
 800db1c:	4812      	ldr	r0, [pc, #72]	; (800db68 <MX_USB_Device_Init+0x54>)
 800db1e:	f7fb faaf 	bl	8009080 <USBD_Init>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d001      	beq.n	800db2c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800db28:	f7f3 fb5c 	bl	80011e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800db2c:	490f      	ldr	r1, [pc, #60]	; (800db6c <MX_USB_Device_Init+0x58>)
 800db2e:	480e      	ldr	r0, [pc, #56]	; (800db68 <MX_USB_Device_Init+0x54>)
 800db30:	f7fb fad6 	bl	80090e0 <USBD_RegisterClass>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d001      	beq.n	800db3e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800db3a:	f7f3 fb53 	bl	80011e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800db3e:	490c      	ldr	r1, [pc, #48]	; (800db70 <MX_USB_Device_Init+0x5c>)
 800db40:	4809      	ldr	r0, [pc, #36]	; (800db68 <MX_USB_Device_Init+0x54>)
 800db42:	f7fb fa27 	bl	8008f94 <USBD_CDC_RegisterInterface>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d001      	beq.n	800db50 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800db4c:	f7f3 fb4a 	bl	80011e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800db50:	4805      	ldr	r0, [pc, #20]	; (800db68 <MX_USB_Device_Init+0x54>)
 800db52:	f7fb faec 	bl	800912e <USBD_Start>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d001      	beq.n	800db60 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800db5c:	f7f3 fb42 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800db60:	bf00      	nop
 800db62:	bd80      	pop	{r7, pc}
 800db64:	20000138 	.word	0x20000138
 800db68:	20004cc8 	.word	0x20004cc8
 800db6c:	2000001c 	.word	0x2000001c
 800db70:	20000124 	.word	0x20000124

0800db74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db78:	2200      	movs	r2, #0
 800db7a:	4905      	ldr	r1, [pc, #20]	; (800db90 <CDC_Init_FS+0x1c>)
 800db7c:	4805      	ldr	r0, [pc, #20]	; (800db94 <CDC_Init_FS+0x20>)
 800db7e:	f7fb fa1e 	bl	8008fbe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db82:	4905      	ldr	r1, [pc, #20]	; (800db98 <CDC_Init_FS+0x24>)
 800db84:	4803      	ldr	r0, [pc, #12]	; (800db94 <CDC_Init_FS+0x20>)
 800db86:	f7fb fa38 	bl	8008ffa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800db8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	20005798 	.word	0x20005798
 800db94:	20004cc8 	.word	0x20004cc8
 800db98:	20004f98 	.word	0x20004f98

0800db9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800db9c:	b480      	push	{r7}
 800db9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dba0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr

0800dbac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b083      	sub	sp, #12
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	6039      	str	r1, [r7, #0]
 800dbb6:	71fb      	strb	r3, [r7, #7]
 800dbb8:	4613      	mov	r3, r2
 800dbba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dbbc:	79fb      	ldrb	r3, [r7, #7]
 800dbbe:	2b23      	cmp	r3, #35	; 0x23
 800dbc0:	d84a      	bhi.n	800dc58 <CDC_Control_FS+0xac>
 800dbc2:	a201      	add	r2, pc, #4	; (adr r2, 800dbc8 <CDC_Control_FS+0x1c>)
 800dbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbc8:	0800dc59 	.word	0x0800dc59
 800dbcc:	0800dc59 	.word	0x0800dc59
 800dbd0:	0800dc59 	.word	0x0800dc59
 800dbd4:	0800dc59 	.word	0x0800dc59
 800dbd8:	0800dc59 	.word	0x0800dc59
 800dbdc:	0800dc59 	.word	0x0800dc59
 800dbe0:	0800dc59 	.word	0x0800dc59
 800dbe4:	0800dc59 	.word	0x0800dc59
 800dbe8:	0800dc59 	.word	0x0800dc59
 800dbec:	0800dc59 	.word	0x0800dc59
 800dbf0:	0800dc59 	.word	0x0800dc59
 800dbf4:	0800dc59 	.word	0x0800dc59
 800dbf8:	0800dc59 	.word	0x0800dc59
 800dbfc:	0800dc59 	.word	0x0800dc59
 800dc00:	0800dc59 	.word	0x0800dc59
 800dc04:	0800dc59 	.word	0x0800dc59
 800dc08:	0800dc59 	.word	0x0800dc59
 800dc0c:	0800dc59 	.word	0x0800dc59
 800dc10:	0800dc59 	.word	0x0800dc59
 800dc14:	0800dc59 	.word	0x0800dc59
 800dc18:	0800dc59 	.word	0x0800dc59
 800dc1c:	0800dc59 	.word	0x0800dc59
 800dc20:	0800dc59 	.word	0x0800dc59
 800dc24:	0800dc59 	.word	0x0800dc59
 800dc28:	0800dc59 	.word	0x0800dc59
 800dc2c:	0800dc59 	.word	0x0800dc59
 800dc30:	0800dc59 	.word	0x0800dc59
 800dc34:	0800dc59 	.word	0x0800dc59
 800dc38:	0800dc59 	.word	0x0800dc59
 800dc3c:	0800dc59 	.word	0x0800dc59
 800dc40:	0800dc59 	.word	0x0800dc59
 800dc44:	0800dc59 	.word	0x0800dc59
 800dc48:	0800dc59 	.word	0x0800dc59
 800dc4c:	0800dc59 	.word	0x0800dc59
 800dc50:	0800dc59 	.word	0x0800dc59
 800dc54:	0800dc59 	.word	0x0800dc59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc58:	bf00      	nop
  }

  return (USBD_OK);
 800dc5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dc72:	6879      	ldr	r1, [r7, #4]
 800dc74:	4805      	ldr	r0, [pc, #20]	; (800dc8c <CDC_Receive_FS+0x24>)
 800dc76:	f7fb f9c0 	bl	8008ffa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dc7a:	4804      	ldr	r0, [pc, #16]	; (800dc8c <CDC_Receive_FS+0x24>)
 800dc7c:	f7fb f9d6 	bl	800902c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dc80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3708      	adds	r7, #8
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	20004cc8 	.word	0x20004cc8

0800dc90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b087      	sub	sp, #28
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	60b9      	str	r1, [r7, #8]
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	371c      	adds	r7, #28
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
	...

0800dcb4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b083      	sub	sp, #12
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	4603      	mov	r3, r0
 800dcbc:	6039      	str	r1, [r7, #0]
 800dcbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	2212      	movs	r2, #18
 800dcc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800dcc6:	4b03      	ldr	r3, [pc, #12]	; (800dcd4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	370c      	adds	r7, #12
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr
 800dcd4:	20000158 	.word	0x20000158

0800dcd8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	4603      	mov	r3, r0
 800dce0:	6039      	str	r1, [r7, #0]
 800dce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	2204      	movs	r2, #4
 800dce8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dcea:	4b03      	ldr	r3, [pc, #12]	; (800dcf8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr
 800dcf8:	2000016c 	.word	0x2000016c

0800dcfc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	4603      	mov	r3, r0
 800dd04:	6039      	str	r1, [r7, #0]
 800dd06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd08:	79fb      	ldrb	r3, [r7, #7]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d105      	bne.n	800dd1a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dd0e:	683a      	ldr	r2, [r7, #0]
 800dd10:	4907      	ldr	r1, [pc, #28]	; (800dd30 <USBD_CDC_ProductStrDescriptor+0x34>)
 800dd12:	4808      	ldr	r0, [pc, #32]	; (800dd34 <USBD_CDC_ProductStrDescriptor+0x38>)
 800dd14:	f7fc f9e6 	bl	800a0e4 <USBD_GetString>
 800dd18:	e004      	b.n	800dd24 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dd1a:	683a      	ldr	r2, [r7, #0]
 800dd1c:	4904      	ldr	r1, [pc, #16]	; (800dd30 <USBD_CDC_ProductStrDescriptor+0x34>)
 800dd1e:	4805      	ldr	r0, [pc, #20]	; (800dd34 <USBD_CDC_ProductStrDescriptor+0x38>)
 800dd20:	f7fc f9e0 	bl	800a0e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd24:	4b02      	ldr	r3, [pc, #8]	; (800dd30 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	20005f98 	.word	0x20005f98
 800dd34:	0800e830 	.word	0x0800e830

0800dd38 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	4603      	mov	r3, r0
 800dd40:	6039      	str	r1, [r7, #0]
 800dd42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	4904      	ldr	r1, [pc, #16]	; (800dd58 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800dd48:	4804      	ldr	r0, [pc, #16]	; (800dd5c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800dd4a:	f7fc f9cb 	bl	800a0e4 <USBD_GetString>
  return USBD_StrDesc;
 800dd4e:	4b02      	ldr	r3, [pc, #8]	; (800dd58 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3708      	adds	r7, #8
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	20005f98 	.word	0x20005f98
 800dd5c:	0800e83c 	.word	0x0800e83c

0800dd60 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	4603      	mov	r3, r0
 800dd68:	6039      	str	r1, [r7, #0]
 800dd6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	221a      	movs	r2, #26
 800dd70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd72:	f000 f843 	bl	800ddfc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800dd76:	4b02      	ldr	r3, [pc, #8]	; (800dd80 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	20000170 	.word	0x20000170

0800dd84 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	6039      	str	r1, [r7, #0]
 800dd8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dd90:	79fb      	ldrb	r3, [r7, #7]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d105      	bne.n	800dda2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dd96:	683a      	ldr	r2, [r7, #0]
 800dd98:	4907      	ldr	r1, [pc, #28]	; (800ddb8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dd9a:	4808      	ldr	r0, [pc, #32]	; (800ddbc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dd9c:	f7fc f9a2 	bl	800a0e4 <USBD_GetString>
 800dda0:	e004      	b.n	800ddac <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dda2:	683a      	ldr	r2, [r7, #0]
 800dda4:	4904      	ldr	r1, [pc, #16]	; (800ddb8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dda6:	4805      	ldr	r0, [pc, #20]	; (800ddbc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dda8:	f7fc f99c 	bl	800a0e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddac:	4b02      	ldr	r3, [pc, #8]	; (800ddb8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	20005f98 	.word	0x20005f98
 800ddbc:	0800e844 	.word	0x0800e844

0800ddc0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	6039      	str	r1, [r7, #0]
 800ddca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ddcc:	79fb      	ldrb	r3, [r7, #7]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d105      	bne.n	800ddde <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ddd2:	683a      	ldr	r2, [r7, #0]
 800ddd4:	4907      	ldr	r1, [pc, #28]	; (800ddf4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ddd6:	4808      	ldr	r0, [pc, #32]	; (800ddf8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ddd8:	f7fc f984 	bl	800a0e4 <USBD_GetString>
 800dddc:	e004      	b.n	800dde8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	4904      	ldr	r1, [pc, #16]	; (800ddf4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dde2:	4805      	ldr	r0, [pc, #20]	; (800ddf8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dde4:	f7fc f97e 	bl	800a0e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dde8:	4b02      	ldr	r3, [pc, #8]	; (800ddf4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3708      	adds	r7, #8
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	20005f98 	.word	0x20005f98
 800ddf8:	0800e850 	.word	0x0800e850

0800ddfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de02:	4b0f      	ldr	r3, [pc, #60]	; (800de40 <Get_SerialNum+0x44>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de08:	4b0e      	ldr	r3, [pc, #56]	; (800de44 <Get_SerialNum+0x48>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de0e:	4b0e      	ldr	r3, [pc, #56]	; (800de48 <Get_SerialNum+0x4c>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4413      	add	r3, r2
 800de1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d009      	beq.n	800de36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de22:	2208      	movs	r2, #8
 800de24:	4909      	ldr	r1, [pc, #36]	; (800de4c <Get_SerialNum+0x50>)
 800de26:	68f8      	ldr	r0, [r7, #12]
 800de28:	f000 f814 	bl	800de54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de2c:	2204      	movs	r2, #4
 800de2e:	4908      	ldr	r1, [pc, #32]	; (800de50 <Get_SerialNum+0x54>)
 800de30:	68b8      	ldr	r0, [r7, #8]
 800de32:	f000 f80f 	bl	800de54 <IntToUnicode>
  }
}
 800de36:	bf00      	nop
 800de38:	3710      	adds	r7, #16
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	1fff7590 	.word	0x1fff7590
 800de44:	1fff7594 	.word	0x1fff7594
 800de48:	1fff7598 	.word	0x1fff7598
 800de4c:	20000172 	.word	0x20000172
 800de50:	20000182 	.word	0x20000182

0800de54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de54:	b480      	push	{r7}
 800de56:	b087      	sub	sp, #28
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	4613      	mov	r3, r2
 800de60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de62:	2300      	movs	r3, #0
 800de64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de66:	2300      	movs	r3, #0
 800de68:	75fb      	strb	r3, [r7, #23]
 800de6a:	e027      	b.n	800debc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	0f1b      	lsrs	r3, r3, #28
 800de70:	2b09      	cmp	r3, #9
 800de72:	d80b      	bhi.n	800de8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	0f1b      	lsrs	r3, r3, #28
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	7dfb      	ldrb	r3, [r7, #23]
 800de7c:	005b      	lsls	r3, r3, #1
 800de7e:	4619      	mov	r1, r3
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	440b      	add	r3, r1
 800de84:	3230      	adds	r2, #48	; 0x30
 800de86:	b2d2      	uxtb	r2, r2
 800de88:	701a      	strb	r2, [r3, #0]
 800de8a:	e00a      	b.n	800dea2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	0f1b      	lsrs	r3, r3, #28
 800de90:	b2da      	uxtb	r2, r3
 800de92:	7dfb      	ldrb	r3, [r7, #23]
 800de94:	005b      	lsls	r3, r3, #1
 800de96:	4619      	mov	r1, r3
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	440b      	add	r3, r1
 800de9c:	3237      	adds	r2, #55	; 0x37
 800de9e:	b2d2      	uxtb	r2, r2
 800dea0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	011b      	lsls	r3, r3, #4
 800dea6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dea8:	7dfb      	ldrb	r3, [r7, #23]
 800deaa:	005b      	lsls	r3, r3, #1
 800deac:	3301      	adds	r3, #1
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	4413      	add	r3, r2
 800deb2:	2200      	movs	r2, #0
 800deb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800deb6:	7dfb      	ldrb	r3, [r7, #23]
 800deb8:	3301      	adds	r3, #1
 800deba:	75fb      	strb	r3, [r7, #23]
 800debc:	7dfa      	ldrb	r2, [r7, #23]
 800debe:	79fb      	ldrb	r3, [r7, #7]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d3d3      	bcc.n	800de6c <IntToUnicode+0x18>
  }
}
 800dec4:	bf00      	nop
 800dec6:	371c      	adds	r7, #28
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <LL_AHB2_GRP1_EnableClock>:
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ded8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dedc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4313      	orrs	r3, r2
 800dee6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800dee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800deec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	4013      	ands	r3, r2
 800def2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800def4:	68fb      	ldr	r3, [r7, #12]
}
 800def6:	bf00      	nop
 800def8:	3714      	adds	r7, #20
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr

0800df02 <LL_APB1_GRP1_EnableClock>:
{
 800df02:	b480      	push	{r7}
 800df04:	b085      	sub	sp, #20
 800df06:	af00      	add	r7, sp, #0
 800df08:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800df0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800df10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	4313      	orrs	r3, r2
 800df18:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800df1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	4013      	ands	r3, r2
 800df24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800df26:	68fb      	ldr	r3, [r7, #12]
}
 800df28:	bf00      	nop
 800df2a:	3714      	adds	r7, #20
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b088      	sub	sp, #32
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df3c:	f107 030c 	add.w	r3, r7, #12
 800df40:	2200      	movs	r2, #0
 800df42:	601a      	str	r2, [r3, #0]
 800df44:	605a      	str	r2, [r3, #4]
 800df46:	609a      	str	r2, [r3, #8]
 800df48:	60da      	str	r2, [r3, #12]
 800df4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a13      	ldr	r2, [pc, #76]	; (800dfa0 <HAL_PCD_MspInit+0x6c>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d120      	bne.n	800df98 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df56:	2001      	movs	r0, #1
 800df58:	f7ff ffba 	bl	800ded0 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800df5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800df60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df62:	2302      	movs	r3, #2
 800df64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df66:	2300      	movs	r3, #0
 800df68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df6a:	2300      	movs	r3, #0
 800df6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800df6e:	230a      	movs	r3, #10
 800df70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df72:	f107 030c 	add.w	r3, r7, #12
 800df76:	4619      	mov	r1, r3
 800df78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800df7c:	f7f5 fa0e 	bl	800339c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800df80:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800df84:	f7ff ffbd 	bl	800df02 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800df88:	2200      	movs	r2, #0
 800df8a:	2105      	movs	r1, #5
 800df8c:	2014      	movs	r0, #20
 800df8e:	f7f4 fff7 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800df92:	2014      	movs	r0, #20
 800df94:	f7f5 f80e 	bl	8002fb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800df98:	bf00      	nop
 800df9a:	3720      	adds	r7, #32
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	40006800 	.word	0x40006800

0800dfa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800dfb8:	4619      	mov	r1, r3
 800dfba:	4610      	mov	r0, r2
 800dfbc:	f7fb f902 	bl	80091c4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800dfc0:	bf00      	nop
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800dfda:	78fb      	ldrb	r3, [r7, #3]
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	015b      	lsls	r3, r3, #5
 800dfe0:	4413      	add	r3, r2
 800dfe2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	78fb      	ldrb	r3, [r7, #3]
 800dfea:	4619      	mov	r1, r3
 800dfec:	f7fb f93d 	bl	800926a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800dff0:	bf00      	nop
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	460b      	mov	r3, r1
 800e002:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800e00a:	78fb      	ldrb	r3, [r7, #3]
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	015b      	lsls	r3, r3, #5
 800e010:	4413      	add	r3, r2
 800e012:	333c      	adds	r3, #60	; 0x3c
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	78fb      	ldrb	r3, [r7, #3]
 800e018:	4619      	mov	r1, r3
 800e01a:	f7fb f989 	bl	8009330 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e01e:	bf00      	nop
 800e020:	3708      	adds	r7, #8
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}

0800e026 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e026:	b580      	push	{r7, lr}
 800e028:	b082      	sub	sp, #8
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e034:	4618      	mov	r0, r3
 800e036:	f7fb fa9d 	bl	8009574 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e03a:	bf00      	nop
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b084      	sub	sp, #16
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e04a:	2301      	movs	r3, #1
 800e04c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	2b02      	cmp	r3, #2
 800e054:	d001      	beq.n	800e05a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e056:	f7f3 f8c5 	bl	80011e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e060:	7bfa      	ldrb	r2, [r7, #15]
 800e062:	4611      	mov	r1, r2
 800e064:	4618      	mov	r0, r3
 800e066:	f7fb fa47 	bl	80094f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e070:	4618      	mov	r0, r3
 800e072:	f7fb f9f3 	bl	800945c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e076:	bf00      	nop
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
	...

0800e080 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fb fa42 	bl	8009518 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	699b      	ldr	r3, [r3, #24]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d005      	beq.n	800e0a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e09c:	4b04      	ldr	r3, [pc, #16]	; (800e0b0 <HAL_PCD_SuspendCallback+0x30>)
 800e09e:	691b      	ldr	r3, [r3, #16]
 800e0a0:	4a03      	ldr	r2, [pc, #12]	; (800e0b0 <HAL_PCD_SuspendCallback+0x30>)
 800e0a2:	f043 0306 	orr.w	r3, r3, #6
 800e0a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e0a8:	bf00      	nop
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	e000ed00 	.word	0xe000ed00

0800e0b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	699b      	ldr	r3, [r3, #24]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d007      	beq.n	800e0d4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e0c4:	4b08      	ldr	r3, [pc, #32]	; (800e0e8 <HAL_PCD_ResumeCallback+0x34>)
 800e0c6:	691b      	ldr	r3, [r3, #16]
 800e0c8:	4a07      	ldr	r2, [pc, #28]	; (800e0e8 <HAL_PCD_ResumeCallback+0x34>)
 800e0ca:	f023 0306 	bic.w	r3, r3, #6
 800e0ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e0d0:	f000 f9f4 	bl	800e4bc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7fb fa32 	bl	8009544 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e0e0:	bf00      	nop
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	e000ed00 	.word	0xe000ed00

0800e0ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e0f4:	4a2c      	ldr	r2, [pc, #176]	; (800e1a8 <USBD_LL_Init+0xbc>)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	4a2a      	ldr	r2, [pc, #168]	; (800e1a8 <USBD_LL_Init+0xbc>)
 800e100:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e104:	f7f6 fa4e 	bl	80045a4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800e108:	4b27      	ldr	r3, [pc, #156]	; (800e1a8 <USBD_LL_Init+0xbc>)
 800e10a:	4a28      	ldr	r2, [pc, #160]	; (800e1ac <USBD_LL_Init+0xc0>)
 800e10c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e10e:	4b26      	ldr	r3, [pc, #152]	; (800e1a8 <USBD_LL_Init+0xbc>)
 800e110:	2208      	movs	r2, #8
 800e112:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e114:	4b24      	ldr	r3, [pc, #144]	; (800e1a8 <USBD_LL_Init+0xbc>)
 800e116:	2202      	movs	r2, #2
 800e118:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e11a:	4b23      	ldr	r3, [pc, #140]	; (800e1a8 <USBD_LL_Init+0xbc>)
 800e11c:	2202      	movs	r2, #2
 800e11e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e120:	4b21      	ldr	r3, [pc, #132]	; (800e1a8 <USBD_LL_Init+0xbc>)
 800e122:	2200      	movs	r2, #0
 800e124:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e126:	4b20      	ldr	r3, [pc, #128]	; (800e1a8 <USBD_LL_Init+0xbc>)
 800e128:	2200      	movs	r2, #0
 800e12a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e12c:	4b1e      	ldr	r3, [pc, #120]	; (800e1a8 <USBD_LL_Init+0xbc>)
 800e12e:	2200      	movs	r2, #0
 800e130:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e132:	4b1d      	ldr	r3, [pc, #116]	; (800e1a8 <USBD_LL_Init+0xbc>)
 800e134:	2200      	movs	r2, #0
 800e136:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e138:	481b      	ldr	r0, [pc, #108]	; (800e1a8 <USBD_LL_Init+0xbc>)
 800e13a:	f7f5 fadb 	bl	80036f4 <HAL_PCD_Init>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d001      	beq.n	800e148 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e144:	f7f3 f84e 	bl	80011e4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e14e:	2318      	movs	r3, #24
 800e150:	2200      	movs	r2, #0
 800e152:	2100      	movs	r1, #0
 800e154:	f7f6 f9a0 	bl	8004498 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e15e:	2358      	movs	r3, #88	; 0x58
 800e160:	2200      	movs	r2, #0
 800e162:	2180      	movs	r1, #128	; 0x80
 800e164:	f7f6 f998 	bl	8004498 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e16e:	23c0      	movs	r3, #192	; 0xc0
 800e170:	2200      	movs	r2, #0
 800e172:	2181      	movs	r1, #129	; 0x81
 800e174:	f7f6 f990 	bl	8004498 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e17e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e182:	2200      	movs	r2, #0
 800e184:	2101      	movs	r1, #1
 800e186:	f7f6 f987 	bl	8004498 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e190:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e194:	2200      	movs	r2, #0
 800e196:	2182      	movs	r1, #130	; 0x82
 800e198:	f7f6 f97e 	bl	8004498 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e19c:	2300      	movs	r3, #0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3708      	adds	r7, #8
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	20006198 	.word	0x20006198
 800e1ac:	40006800 	.word	0x40006800

0800e1b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7f5 fb4f 	bl	800386a <HAL_PCD_Start>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f000 f97a 	bl	800e4cc <USBD_Get_USB_Status>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b084      	sub	sp, #16
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
 800e1ee:	4608      	mov	r0, r1
 800e1f0:	4611      	mov	r1, r2
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	70fb      	strb	r3, [r7, #3]
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	70bb      	strb	r3, [r7, #2]
 800e1fc:	4613      	mov	r3, r2
 800e1fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e200:	2300      	movs	r3, #0
 800e202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e204:	2300      	movs	r3, #0
 800e206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e20e:	78bb      	ldrb	r3, [r7, #2]
 800e210:	883a      	ldrh	r2, [r7, #0]
 800e212:	78f9      	ldrb	r1, [r7, #3]
 800e214:	f7f5 fcbe 	bl	8003b94 <HAL_PCD_EP_Open>
 800e218:	4603      	mov	r3, r0
 800e21a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e21c:	7bfb      	ldrb	r3, [r7, #15]
 800e21e:	4618      	mov	r0, r3
 800e220:	f000 f954 	bl	800e4cc <USBD_Get_USB_Status>
 800e224:	4603      	mov	r3, r0
 800e226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e228:	7bbb      	ldrb	r3, [r7, #14]
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b084      	sub	sp, #16
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
 800e23a:	460b      	mov	r3, r1
 800e23c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e23e:	2300      	movs	r3, #0
 800e240:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e242:	2300      	movs	r3, #0
 800e244:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e24c:	78fa      	ldrb	r2, [r7, #3]
 800e24e:	4611      	mov	r1, r2
 800e250:	4618      	mov	r0, r3
 800e252:	f7f5 fcff 	bl	8003c54 <HAL_PCD_EP_Close>
 800e256:	4603      	mov	r3, r0
 800e258:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e25a:	7bfb      	ldrb	r3, [r7, #15]
 800e25c:	4618      	mov	r0, r3
 800e25e:	f000 f935 	bl	800e4cc <USBD_Get_USB_Status>
 800e262:	4603      	mov	r3, r0
 800e264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e266:	7bbb      	ldrb	r3, [r7, #14]
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3710      	adds	r7, #16
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	460b      	mov	r3, r1
 800e27a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e280:	2300      	movs	r3, #0
 800e282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e28a:	78fa      	ldrb	r2, [r7, #3]
 800e28c:	4611      	mov	r1, r2
 800e28e:	4618      	mov	r0, r3
 800e290:	f7f5 fdaa 	bl	8003de8 <HAL_PCD_EP_SetStall>
 800e294:	4603      	mov	r3, r0
 800e296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e298:	7bfb      	ldrb	r3, [r7, #15]
 800e29a:	4618      	mov	r0, r3
 800e29c:	f000 f916 	bl	800e4cc <USBD_Get_USB_Status>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b084      	sub	sp, #16
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2c8:	78fa      	ldrb	r2, [r7, #3]
 800e2ca:	4611      	mov	r1, r2
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7f5 fde5 	bl	8003e9c <HAL_PCD_EP_ClrStall>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2d6:	7bfb      	ldrb	r3, [r7, #15]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f000 f8f7 	bl	800e4cc <USBD_Get_USB_Status>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e304:	2b00      	cmp	r3, #0
 800e306:	da08      	bge.n	800e31a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e308:	78fb      	ldrb	r3, [r7, #3]
 800e30a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e30e:	68fa      	ldr	r2, [r7, #12]
 800e310:	015b      	lsls	r3, r3, #5
 800e312:	4413      	add	r3, r2
 800e314:	332a      	adds	r3, #42	; 0x2a
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	e008      	b.n	800e32c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e31a:	78fb      	ldrb	r3, [r7, #3]
 800e31c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	015b      	lsls	r3, r3, #5
 800e324:	4413      	add	r3, r2
 800e326:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800e32a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3714      	adds	r7, #20
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	460b      	mov	r3, r1
 800e342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e344:	2300      	movs	r3, #0
 800e346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e348:	2300      	movs	r3, #0
 800e34a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e352:	78fa      	ldrb	r2, [r7, #3]
 800e354:	4611      	mov	r1, r2
 800e356:	4618      	mov	r0, r3
 800e358:	f7f5 fbf7 	bl	8003b4a <HAL_PCD_SetAddress>
 800e35c:	4603      	mov	r3, r0
 800e35e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e360:	7bfb      	ldrb	r3, [r7, #15]
 800e362:	4618      	mov	r0, r3
 800e364:	f000 f8b2 	bl	800e4cc <USBD_Get_USB_Status>
 800e368:	4603      	mov	r3, r0
 800e36a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e36c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}

0800e376 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e376:	b580      	push	{r7, lr}
 800e378:	b086      	sub	sp, #24
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	60f8      	str	r0, [r7, #12]
 800e37e:	607a      	str	r2, [r7, #4]
 800e380:	603b      	str	r3, [r7, #0]
 800e382:	460b      	mov	r3, r1
 800e384:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e386:	2300      	movs	r3, #0
 800e388:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e38a:	2300      	movs	r3, #0
 800e38c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e394:	7af9      	ldrb	r1, [r7, #11]
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	f7f5 fcec 	bl	8003d76 <HAL_PCD_EP_Transmit>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3a2:	7dfb      	ldrb	r3, [r7, #23]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f000 f891 	bl	800e4cc <USBD_Get_USB_Status>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3718      	adds	r7, #24
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	607a      	str	r2, [r7, #4]
 800e3c2:	603b      	str	r3, [r7, #0]
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e3d6:	7af9      	ldrb	r1, [r7, #11]
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	f7f5 fc7c 	bl	8003cd8 <HAL_PCD_EP_Receive>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3e4:	7dfb      	ldrb	r3, [r7, #23]
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f000 f870 	bl	800e4cc <USBD_Get_USB_Status>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3718      	adds	r7, #24
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b082      	sub	sp, #8
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
 800e402:	460b      	mov	r3, r1
 800e404:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e40c:	78fa      	ldrb	r2, [r7, #3]
 800e40e:	4611      	mov	r1, r2
 800e410:	4618      	mov	r0, r3
 800e412:	f7f5 fc9b 	bl	8003d4c <HAL_PCD_EP_GetRxCount>
 800e416:	4603      	mov	r3, r0
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3708      	adds	r7, #8
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	460b      	mov	r3, r1
 800e42a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e42c:	78fb      	ldrb	r3, [r7, #3]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d002      	beq.n	800e438 <HAL_PCDEx_LPM_Callback+0x18>
 800e432:	2b01      	cmp	r3, #1
 800e434:	d013      	beq.n	800e45e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e436:	e023      	b.n	800e480 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	699b      	ldr	r3, [r3, #24]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d007      	beq.n	800e450 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e440:	f000 f83c 	bl	800e4bc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e444:	4b10      	ldr	r3, [pc, #64]	; (800e488 <HAL_PCDEx_LPM_Callback+0x68>)
 800e446:	691b      	ldr	r3, [r3, #16]
 800e448:	4a0f      	ldr	r2, [pc, #60]	; (800e488 <HAL_PCDEx_LPM_Callback+0x68>)
 800e44a:	f023 0306 	bic.w	r3, r3, #6
 800e44e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e456:	4618      	mov	r0, r3
 800e458:	f7fb f874 	bl	8009544 <USBD_LL_Resume>
    break;
 800e45c:	e010      	b.n	800e480 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e464:	4618      	mov	r0, r3
 800e466:	f7fb f857 	bl	8009518 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	699b      	ldr	r3, [r3, #24]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d005      	beq.n	800e47e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e472:	4b05      	ldr	r3, [pc, #20]	; (800e488 <HAL_PCDEx_LPM_Callback+0x68>)
 800e474:	691b      	ldr	r3, [r3, #16]
 800e476:	4a04      	ldr	r2, [pc, #16]	; (800e488 <HAL_PCDEx_LPM_Callback+0x68>)
 800e478:	f043 0306 	orr.w	r3, r3, #6
 800e47c:	6113      	str	r3, [r2, #16]
    break;
 800e47e:	bf00      	nop
}
 800e480:	bf00      	nop
 800e482:	3708      	adds	r7, #8
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	e000ed00 	.word	0xe000ed00

0800e48c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b083      	sub	sp, #12
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e494:	4b03      	ldr	r3, [pc, #12]	; (800e4a4 <USBD_static_malloc+0x18>)
}
 800e496:	4618      	mov	r0, r3
 800e498:	370c      	adds	r7, #12
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop
 800e4a4:	20004898 	.word	0x20004898

0800e4a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]

}
 800e4b0:	bf00      	nop
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 800e4c0:	bf00      	nop
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr
	...

0800e4cc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e4da:	79fb      	ldrb	r3, [r7, #7]
 800e4dc:	2b03      	cmp	r3, #3
 800e4de:	d817      	bhi.n	800e510 <USBD_Get_USB_Status+0x44>
 800e4e0:	a201      	add	r2, pc, #4	; (adr r2, 800e4e8 <USBD_Get_USB_Status+0x1c>)
 800e4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e6:	bf00      	nop
 800e4e8:	0800e4f9 	.word	0x0800e4f9
 800e4ec:	0800e4ff 	.word	0x0800e4ff
 800e4f0:	0800e505 	.word	0x0800e505
 800e4f4:	0800e50b 	.word	0x0800e50b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e4fc:	e00b      	b.n	800e516 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e4fe:	2303      	movs	r3, #3
 800e500:	73fb      	strb	r3, [r7, #15]
    break;
 800e502:	e008      	b.n	800e516 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e504:	2301      	movs	r3, #1
 800e506:	73fb      	strb	r3, [r7, #15]
    break;
 800e508:	e005      	b.n	800e516 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e50a:	2303      	movs	r3, #3
 800e50c:	73fb      	strb	r3, [r7, #15]
    break;
 800e50e:	e002      	b.n	800e516 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e510:	2303      	movs	r3, #3
 800e512:	73fb      	strb	r3, [r7, #15]
    break;
 800e514:	bf00      	nop
  }
  return usb_status;
 800e516:	7bfb      	ldrb	r3, [r7, #15]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3714      	adds	r7, #20
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <__libc_init_array>:
 800e524:	b570      	push	{r4, r5, r6, lr}
 800e526:	4e0d      	ldr	r6, [pc, #52]	; (800e55c <__libc_init_array+0x38>)
 800e528:	4c0d      	ldr	r4, [pc, #52]	; (800e560 <__libc_init_array+0x3c>)
 800e52a:	1ba4      	subs	r4, r4, r6
 800e52c:	10a4      	asrs	r4, r4, #2
 800e52e:	2500      	movs	r5, #0
 800e530:	42a5      	cmp	r5, r4
 800e532:	d109      	bne.n	800e548 <__libc_init_array+0x24>
 800e534:	4e0b      	ldr	r6, [pc, #44]	; (800e564 <__libc_init_array+0x40>)
 800e536:	4c0c      	ldr	r4, [pc, #48]	; (800e568 <__libc_init_array+0x44>)
 800e538:	f000 f82c 	bl	800e594 <_init>
 800e53c:	1ba4      	subs	r4, r4, r6
 800e53e:	10a4      	asrs	r4, r4, #2
 800e540:	2500      	movs	r5, #0
 800e542:	42a5      	cmp	r5, r4
 800e544:	d105      	bne.n	800e552 <__libc_init_array+0x2e>
 800e546:	bd70      	pop	{r4, r5, r6, pc}
 800e548:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e54c:	4798      	blx	r3
 800e54e:	3501      	adds	r5, #1
 800e550:	e7ee      	b.n	800e530 <__libc_init_array+0xc>
 800e552:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e556:	4798      	blx	r3
 800e558:	3501      	adds	r5, #1
 800e55a:	e7f2      	b.n	800e542 <__libc_init_array+0x1e>
 800e55c:	0800e924 	.word	0x0800e924
 800e560:	0800e924 	.word	0x0800e924
 800e564:	0800e924 	.word	0x0800e924
 800e568:	0800e928 	.word	0x0800e928

0800e56c <memcpy>:
 800e56c:	b510      	push	{r4, lr}
 800e56e:	1e43      	subs	r3, r0, #1
 800e570:	440a      	add	r2, r1
 800e572:	4291      	cmp	r1, r2
 800e574:	d100      	bne.n	800e578 <memcpy+0xc>
 800e576:	bd10      	pop	{r4, pc}
 800e578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e57c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e580:	e7f7      	b.n	800e572 <memcpy+0x6>

0800e582 <memset>:
 800e582:	4402      	add	r2, r0
 800e584:	4603      	mov	r3, r0
 800e586:	4293      	cmp	r3, r2
 800e588:	d100      	bne.n	800e58c <memset+0xa>
 800e58a:	4770      	bx	lr
 800e58c:	f803 1b01 	strb.w	r1, [r3], #1
 800e590:	e7f9      	b.n	800e586 <memset+0x4>
	...

0800e594 <_init>:
 800e594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e596:	bf00      	nop
 800e598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e59a:	bc08      	pop	{r3}
 800e59c:	469e      	mov	lr, r3
 800e59e:	4770      	bx	lr

0800e5a0 <_fini>:
 800e5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a2:	bf00      	nop
 800e5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5a6:	bc08      	pop	{r3}
 800e5a8:	469e      	mov	lr, r3
 800e5aa:	4770      	bx	lr


Spotlight_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117f8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08011938  08011938  00021938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011dbc  08011dbc  00021dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011dc0  08011dc0  00021dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000198  20000004  08011dc4  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  2000019c  08011f5c  0003019c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000238  08011ff5  00030238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00006448  2000024c  08012006  0003024c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20006694  08012006  00036694  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030249  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000000b8  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000a77  200300e0  200300e0  00040000  2**2
                  ALLOC
 14 .debug_info   00051cee  00000000  00000000  00030279  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000092ca  00000000  00000000  00081f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00003750  00000000  00000000  0008b238  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003348  00000000  00000000  0008e988  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000139fd  00000000  00000000  00091cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0003553e  00000000  00000000  000a56cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00114424  00000000  00000000  000dac0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001ef02f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e338  00000000  00000000  001ef0ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000024c 	.word	0x2000024c
 800015c:	00000000 	.word	0x00000000
 8000160:	08011920 	.word	0x08011920

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000250 	.word	0x20000250
 800017c:	08011920 	.word	0x08011920

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000194:	b480      	push	{r7}
 8000196:	b085      	sub	sp, #20
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800019c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4313      	orrs	r3, r2
 80001aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	4013      	ands	r3, r2
 80001b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001b8:	68fb      	ldr	r3, [r7, #12]
}
 80001ba:	bf00      	nop
 80001bc:	3714      	adds	r7, #20
 80001be:	46bd      	mov	sp, r7
 80001c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001c4:	4770      	bx	lr
	...

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	463b      	mov	r3, r7
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]
 80001da:	611a      	str	r2, [r3, #16]
 80001dc:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001de:	4b3f      	ldr	r3, [pc, #252]	; (80002dc <MX_ADC1_Init+0x114>)
 80001e0:	4a3f      	ldr	r2, [pc, #252]	; (80002e0 <MX_ADC1_Init+0x118>)
 80001e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80001e4:	4b3d      	ldr	r3, [pc, #244]	; (80002dc <MX_ADC1_Init+0x114>)
 80001e6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80001ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001ec:	4b3b      	ldr	r3, [pc, #236]	; (80002dc <MX_ADC1_Init+0x114>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001f2:	4b3a      	ldr	r3, [pc, #232]	; (80002dc <MX_ADC1_Init+0x114>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001f8:	4b38      	ldr	r3, [pc, #224]	; (80002dc <MX_ADC1_Init+0x114>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80001fe:	4b37      	ldr	r3, [pc, #220]	; (80002dc <MX_ADC1_Init+0x114>)
 8000200:	2208      	movs	r2, #8
 8000202:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000204:	4b35      	ldr	r3, [pc, #212]	; (80002dc <MX_ADC1_Init+0x114>)
 8000206:	2200      	movs	r2, #0
 8000208:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800020a:	4b34      	ldr	r3, [pc, #208]	; (80002dc <MX_ADC1_Init+0x114>)
 800020c:	2201      	movs	r2, #1
 800020e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8000210:	4b32      	ldr	r3, [pc, #200]	; (80002dc <MX_ADC1_Init+0x114>)
 8000212:	2204      	movs	r2, #4
 8000214:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000216:	4b31      	ldr	r3, [pc, #196]	; (80002dc <MX_ADC1_Init+0x114>)
 8000218:	2200      	movs	r2, #0
 800021a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800021e:	4b2f      	ldr	r3, [pc, #188]	; (80002dc <MX_ADC1_Init+0x114>)
 8000220:	2200      	movs	r2, #0
 8000222:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000224:	4b2d      	ldr	r3, [pc, #180]	; (80002dc <MX_ADC1_Init+0x114>)
 8000226:	2200      	movs	r2, #0
 8000228:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800022a:	4b2c      	ldr	r3, [pc, #176]	; (80002dc <MX_ADC1_Init+0x114>)
 800022c:	2201      	movs	r2, #1
 800022e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000232:	4b2a      	ldr	r3, [pc, #168]	; (80002dc <MX_ADC1_Init+0x114>)
 8000234:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000238:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800023a:	4b28      	ldr	r3, [pc, #160]	; (80002dc <MX_ADC1_Init+0x114>)
 800023c:	2200      	movs	r2, #0
 800023e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000242:	4826      	ldr	r0, [pc, #152]	; (80002dc <MX_ADC1_Init+0x114>)
 8000244:	f002 f8d6 	bl	80023f4 <HAL_ADC_Init>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800024e:	f001 fb5f 	bl	8001910 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000252:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <MX_ADC1_Init+0x11c>)
 8000254:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000256:	2306      	movs	r3, #6
 8000258:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800025a:	2303      	movs	r3, #3
 800025c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800025e:	237f      	movs	r3, #127	; 0x7f
 8000260:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000262:	2304      	movs	r3, #4
 8000264:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026a:	463b      	mov	r3, r7
 800026c:	4619      	mov	r1, r3
 800026e:	481b      	ldr	r0, [pc, #108]	; (80002dc <MX_ADC1_Init+0x114>)
 8000270:	f002 fbde 	bl	8002a30 <HAL_ADC_ConfigChannel>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800027a:	f001 fb49 	bl	8001910 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800027e:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <MX_ADC1_Init+0x120>)
 8000280:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000282:	230c      	movs	r3, #12
 8000284:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000286:	463b      	mov	r3, r7
 8000288:	4619      	mov	r1, r3
 800028a:	4814      	ldr	r0, [pc, #80]	; (80002dc <MX_ADC1_Init+0x114>)
 800028c:	f002 fbd0 	bl	8002a30 <HAL_ADC_ConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000296:	f001 fb3b 	bl	8001910 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800029a:	4b14      	ldr	r3, [pc, #80]	; (80002ec <MX_ADC1_Init+0x124>)
 800029c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800029e:	2312      	movs	r3, #18
 80002a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a2:	463b      	mov	r3, r7
 80002a4:	4619      	mov	r1, r3
 80002a6:	480d      	ldr	r0, [pc, #52]	; (80002dc <MX_ADC1_Init+0x114>)
 80002a8:	f002 fbc2 	bl	8002a30 <HAL_ADC_ConfigChannel>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80002b2:	f001 fb2d 	bl	8001910 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <MX_ADC1_Init+0x128>)
 80002b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002ba:	2318      	movs	r3, #24
 80002bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002be:	463b      	mov	r3, r7
 80002c0:	4619      	mov	r1, r3
 80002c2:	4806      	ldr	r0, [pc, #24]	; (80002dc <MX_ADC1_Init+0x114>)
 80002c4:	f002 fbb4 	bl	8002a30 <HAL_ADC_ConfigChannel>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80002ce:	f001 fb1f 	bl	8001910 <Error_Handler>
  }

}
 80002d2:	bf00      	nop
 80002d4:	3718      	adds	r7, #24
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20004cf8 	.word	0x20004cf8
 80002e0:	50040000 	.word	0x50040000
 80002e4:	04300002 	.word	0x04300002
 80002e8:	08600004 	.word	0x08600004
 80002ec:	0c900008 	.word	0x0c900008
 80002f0:	1d500080 	.word	0x1d500080

080002f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fc:	f107 030c 	add.w	r3, r7, #12
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a2e      	ldr	r2, [pc, #184]	; (80003cc <HAL_ADC_MspInit+0xd8>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d155      	bne.n	80003c2 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000316:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800031a:	f7ff ff3b 	bl	8000194 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800031e:	2004      	movs	r0, #4
 8000320:	f7ff ff38 	bl	8000194 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000324:	2001      	movs	r0, #1
 8000326:	f7ff ff35 	bl	8000194 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MAG_BASE_Pin|MAG_LIGHT_Pin|MAIN_BOARD_TEMP_Pin;
 800032a:	2307      	movs	r3, #7
 800032c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800032e:	2303      	movs	r3, #3
 8000330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	4619      	mov	r1, r3
 800033c:	4824      	ldr	r0, [pc, #144]	; (80003d0 <HAL_ADC_MspInit+0xdc>)
 800033e:	f003 faab 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_TEMP_Pin;
 8000342:	2304      	movs	r3, #4
 8000344:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000346:	2303      	movs	r3, #3
 8000348:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034a:	2300      	movs	r3, #0
 800034c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_TEMP_GPIO_Port, &GPIO_InitStruct);
 800034e:	f107 030c 	add.w	r3, r7, #12
 8000352:	4619      	mov	r1, r3
 8000354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000358:	f003 fa9e 	bl	8003898 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 800035e:	4a1e      	ldr	r2, [pc, #120]	; (80003d8 <HAL_ADC_MspInit+0xe4>)
 8000360:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 8000364:	2205      	movs	r2, #5
 8000366:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 800037c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000380:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 8000384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000388:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 800038c:	2220      	movs	r2, #32
 800038e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 8000392:	2200      	movs	r2, #0
 8000394:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000396:	480f      	ldr	r0, [pc, #60]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 8000398:	f003 f8c2 	bl	8003520 <HAL_DMA_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80003a2:	f001 fab5 	bl	8001910 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 80003aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80003ac:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <HAL_ADC_MspInit+0xe0>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2105      	movs	r1, #5
 80003b6:	2012      	movs	r0, #18
 80003b8:	f003 f85b 	bl	8003472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80003bc:	2012      	movs	r0, #18
 80003be:	f003 f872 	bl	80034a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	50040000 	.word	0x50040000
 80003d0:	48000800 	.word	0x48000800
 80003d4:	20004d5c 	.word	0x20004d5c
 80003d8:	40020008 	.word	0x40020008

080003dc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <LL_C2_PWR_SetPowerMode+0x28>)
 80003e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003ea:	f023 0207 	bic.w	r2, r3, #7
 80003ee:	4905      	ldr	r1, [pc, #20]	; (8000404 <LL_C2_PWR_SetPowerMode+0x28>)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4313      	orrs	r3, r2
 80003f4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	58000400 	.word	0x58000400

08000408 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800041a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4313      	orrs	r3, r2
 8000422:	608b      	str	r3, [r1, #8]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000434:	f000 f80a 	bl	800044c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000438:	4903      	ldr	r1, [pc, #12]	; (8000448 <APPE_Init+0x18>)
 800043a:	2000      	movs	r0, #0
 800043c:	f000 fe20 	bl	8001080 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000440:	f000 f812 	bl	8000468 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000444:	bf00      	nop
}
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20004dc8 	.word	0x20004dc8

0800044c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000450:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000454:	f7ff ffd8 	bl	8000408 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000458:	f011 f9ea 	bl	8011830 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800045c:	2004      	movs	r0, #4
 800045e:	f7ff ffbd 	bl	80003dc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000462:	bf00      	nop
}
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800046e:	f00a fbab 	bl	800abc8 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8000472:	2000      	movs	r0, #0
 8000474:	f00c f856 	bl	800c524 <osMutexNew>
 8000478:	4602      	mov	r2, r0
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <appe_Tl_Init+0x70>)
 800047c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800047e:	2200      	movs	r2, #0
 8000480:	2100      	movs	r1, #0
 8000482:	2001      	movs	r0, #1
 8000484:	f00c f996 	bl	800c7b4 <osSemaphoreNew>
 8000488:	4602      	mov	r2, r0
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <appe_Tl_Init+0x74>)
 800048c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 800048e:	4a14      	ldr	r2, [pc, #80]	; (80004e0 <appe_Tl_Init+0x78>)
 8000490:	2100      	movs	r1, #0
 8000492:	4814      	ldr	r0, [pc, #80]	; (80004e4 <appe_Tl_Init+0x7c>)
 8000494:	f00b feaa 	bl	800c1ec <osThreadNew>
 8000498:	4602      	mov	r2, r0
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <appe_Tl_Init+0x80>)
 800049c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <appe_Tl_Init+0x84>)
 80004a0:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <appe_Tl_Init+0x88>)
 80004a4:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80004a6:	463b      	mov	r3, r7
 80004a8:	4619      	mov	r1, r3
 80004aa:	4812      	ldr	r0, [pc, #72]	; (80004f4 <appe_Tl_Init+0x8c>)
 80004ac:	f00a fa52 	bl	800a954 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <appe_Tl_Init+0x90>)
 80004b6:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80004b8:	4b10      	ldr	r3, [pc, #64]	; (80004fc <appe_Tl_Init+0x94>)
 80004ba:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80004bc:	f240 533c 	movw	r3, #1340	; 0x53c
 80004c0:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80004c2:	f107 0308 	add.w	r3, r7, #8
 80004c6:	4618      	mov	r0, r3
 80004c8:	f00a fce8 	bl	800ae9c <TL_MM_Init>

  TL_Enable();
 80004cc:	f00a fb76 	bl	800abbc <TL_Enable>

  return;
 80004d0:	bf00      	nop
}
 80004d2:	3720      	adds	r7, #32
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20004dbc 	.word	0x20004dbc
 80004dc:	20004dc4 	.word	0x20004dc4
 80004e0:	08011c60 	.word	0x08011c60
 80004e4:	080005e9 	.word	0x080005e9
 80004e8:	20004dc0 	.word	0x20004dc0
 80004ec:	2003061c 	.word	0x2003061c
 80004f0:	08000501 	.word	0x08000501
 80004f4:	08000541 	.word	0x08000541
 80004f8:	20030728 	.word	0x20030728
 80004fc:	200300e0 	.word	0x200300e0

08000500 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d002      	beq.n	8000516 <APPE_SysStatusNot+0x16>
 8000510:	2b01      	cmp	r3, #1
 8000512:	d008      	beq.n	8000526 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8000514:	e00d      	b.n	8000532 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <APPE_SysStatusNot+0x3c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f04f 31ff 	mov.w	r1, #4294967295
 800051e:	4618      	mov	r0, r3
 8000520:	f00c f89a 	bl	800c658 <osMutexAcquire>
      break;
 8000524:	e005      	b.n	8000532 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <APPE_SysStatusNot+0x3c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	f00c f8f2 	bl	800c714 <osMutexRelease>
      break;
 8000530:	bf00      	nop
  }
  return;
 8000532:	bf00      	nop
}
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20004dbc 	.word	0x20004dbc

08000540 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	330b      	adds	r3, #11
 800054e:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	b29b      	uxth	r3, r3
 8000556:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 800055a:	d004      	beq.n	8000566 <APPE_SysUserEvtRx+0x26>
 800055c:	f249 2201 	movw	r2, #37377	; 0x9201
 8000560:	4293      	cmp	r3, r2
 8000562:	d003      	beq.n	800056c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8000564:	e008      	b.n	8000578 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8000566:	f000 f833 	bl	80005d0 <APPE_SysEvtReadyProcessing>
         break;
 800056a:	e005      	b.n	8000578 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	789b      	ldrb	r3, [r3, #2]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f805 	bl	8000580 <APPE_SysEvtError>
         break;
 8000576:	bf00      	nop
  }
  return;
 8000578:	bf00      	nop
}
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b7d      	cmp	r3, #125	; 0x7d
 800058e:	d002      	beq.n	8000596 <APPE_SysEvtError+0x16>
 8000590:	2b7e      	cmp	r3, #126	; 0x7e
 8000592:	d006      	beq.n	80005a2 <APPE_SysEvtError+0x22>
 8000594:	e00b      	b.n	80005ae <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <APPE_SysEvtError+0x44>)
 8000598:	2101      	movs	r1, #1
 800059a:	2000      	movs	r0, #0
 800059c:	f001 fb22 	bl	8001be4 <logApplication>
       break;
 80005a0:	e00c      	b.n	80005bc <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 80005a2:	4a09      	ldr	r2, [pc, #36]	; (80005c8 <APPE_SysEvtError+0x48>)
 80005a4:	2101      	movs	r1, #1
 80005a6:	2000      	movs	r0, #0
 80005a8:	f001 fb1c 	bl	8001be4 <logApplication>
       break;
 80005ac:	e006      	b.n	80005bc <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <APPE_SysEvtError+0x4c>)
 80005b2:	2101      	movs	r1, #1
 80005b4:	2000      	movs	r0, #0
 80005b6:	f001 fb15 	bl	8001be4 <logApplication>
       break;
 80005ba:	bf00      	nop
  }
  return;
 80005bc:	bf00      	nop
}
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	08011950 	.word	0x08011950
 80005c8:	08011974 	.word	0x08011974
 80005cc:	08011994 	.word	0x08011994

080005d0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 80005d4:	f00a fcd6 	bl	800af84 <TL_TRACES_Init>

  APP_THREAD_Init();
 80005d8:	f00f fd38 	bl	801004c <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80005dc:	2100      	movs	r1, #0
 80005de:	2001      	movs	r0, #1
 80005e0:	f011 f938 	bl	8011854 <UTIL_LPM_SetOffMode>
  return;
 80005e4:	bf00      	nop
}
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80005f0:	f04f 32ff 	mov.w	r2, #4294967295
 80005f4:	2100      	movs	r1, #0
 80005f6:	2001      	movs	r0, #1
 80005f8:	f00b ff00 	bl	800c3fc <osThreadFlagsWait>
     shci_user_evt_proc();
 80005fc:	f00a f9c6 	bl	800a98c <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000600:	e7f6      	b.n	80005f0 <ShciUserEvtProcess+0x8>
	...

08000604 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <shci_notify_asynch_evt+0x1c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2101      	movs	r1, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f00b fe90 	bl	800c338 <osThreadFlagsSet>
  return;
 8000618:	bf00      	nop
}
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20004dc0 	.word	0x20004dc0

08000624 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <shci_cmd_resp_release+0x1c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f00c f9c3 	bl	800c9bc <osSemaphoreRelease>
  return;
 8000636:	bf00      	nop
}
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20004dc4 	.word	0x20004dc4

08000644 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <shci_cmd_resp_wait+0x20>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f04f 31ff 	mov.w	r1, #4294967295
 8000654:	4618      	mov	r0, r3
 8000656:	f00c f94b 	bl	800c8f0 <osSemaphoreAcquire>
  return;
 800065a:	bf00      	nop
}
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20004dc4 	.word	0x20004dc4

08000668 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f00a fc4f 	bl	800af14 <TL_MM_EvtDone>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000684:	4a05      	ldr	r2, [pc, #20]	; (800069c <_Z16MX_FREERTOS_Initv+0x1c>)
 8000686:	2100      	movs	r1, #0
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <_Z16MX_FREERTOS_Initv+0x20>)
 800068a:	f00b fdaf 	bl	800c1ec <osThreadNew>
 800068e:	4602      	mov	r2, r0
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <_Z16MX_FREERTOS_Initv+0x24>)
 8000692:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  APPE_Init();
 8000694:	f7ff fecc 	bl	8000430 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08011c84 	.word	0x08011c84
 80006a0:	080006a9 	.word	0x080006a9
 80006a4:	20000268 	.word	0x20000268

080006a8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 80006b0:	f04f 32ff 	mov.w	r2, #4294967295
 80006b4:	2101      	movs	r1, #1
 80006b6:	2001      	movs	r0, #1
 80006b8:	f00b fea0 	bl	800c3fc <osThreadFlagsWait>
 80006bc:	e7f8      	b.n	80006b0 <_Z16StartDefaultTaskPv+0x8>

080006be <LL_AHB1_GRP1_EnableClock>:
{
 80006be:	b480      	push	{r7}
 80006c0:	b085      	sub	sp, #20
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80006cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4013      	ands	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006e2:	68fb      	ldr	r3, [r7, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006f4:	2004      	movs	r0, #4
 80006f6:	f7ff ffe2 	bl	80006be <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff ffdf 	bl	80006be <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2105      	movs	r1, #5
 8000704:	200b      	movs	r0, #11
 8000706:	f002 feb4 	bl	8003472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800070a:	200b      	movs	r0, #11
 800070c:	f002 fecb 	bl	80034a6 <HAL_NVIC_EnableIRQ>

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <LL_AHB2_GRP1_EnableClock>:
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000734:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4313      	orrs	r3, r2
 800073e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4013      	ands	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800074c:	68fb      	ldr	r3, [r7, #12]
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000770:	2004      	movs	r0, #4
 8000772:	f7ff ffd9 	bl	8000728 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2002      	movs	r0, #2
 8000778:	f7ff ffd6 	bl	8000728 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff ffd3 	bl	8000728 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	2010      	movs	r0, #16
 8000784:	f7ff ffd0 	bl	8000728 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 8000788:	2200      	movs	r2, #0
 800078a:	f240 3193 	movw	r1, #915	; 0x393
 800078e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000792:	f003 f9f1 	bl	8003b78 <HAL_GPIO_WritePin>
                          |AIN1_1_Pin|BIN1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN1_2_Pin|BIN2_2_Pin|BIN2_1_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 800079c:	4823      	ldr	r0, [pc, #140]	; (800082c <MX_GPIO_Init+0xd0>)
 800079e:	f003 f9eb 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2103      	movs	r1, #3
 80007a6:	4821      	ldr	r0, [pc, #132]	; (800082c <MX_GPIO_Init+0xd0>)
 80007a8:	f003 f9e6 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2110      	movs	r1, #16
 80007b0:	481f      	ldr	r0, [pc, #124]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007b2:	f003 f9e1 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 80007b6:	f240 3393 	movw	r3, #915	; 0x393
 80007ba:	607b      	str	r3, [r7, #4]
                          |AIN1_1_Pin|BIN1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f003 f862 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_LED_DISC_Pin;
 80007d4:	2308      	movs	r3, #8
 80007d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT_LED_DISC_GPIO_Port, &GPIO_InitStruct);
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f003 f856 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BIN1_2_Pin|BIN2_2_Pin|BLUE_LED_Pin|GREEN_LED_Pin
 80007ec:	f644 4303 	movw	r3, #19459	; 0x4c03
 80007f0:	607b      	str	r3, [r7, #4]
                          |BIN2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	480a      	ldr	r0, [pc, #40]	; (800082c <MX_GPIO_Init+0xd0>)
 8000804:	f003 f848 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000808:	2310      	movs	r3, #16
 800080a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4619      	mov	r1, r3
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_GPIO_Init+0xd4>)
 800081e:	f003 f83b 	bl	8003898 <HAL_GPIO_Init>

}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	48000400 	.word	0x48000400
 8000830:	48001000 	.word	0x48001000

08000834 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <LL_EXTI_EnableIT_0_31+0x24>)
 800083e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000842:	4905      	ldr	r1, [pc, #20]	; (8000858 <LL_EXTI_EnableIT_0_31+0x24>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4313      	orrs	r3, r2
 8000848:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	58000800 	.word	0x58000800

0800085c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4904      	ldr	r1, [pc, #16]	; (800087c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4313      	orrs	r3, r2
 800086e:	600b      	str	r3, [r1, #0]

}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	58000800 	.word	0x58000800

08000880 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <ReadRtcSsrValue+0x3c>)
 8000888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088a:	b29b      	uxth	r3, r3
 800088c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <ReadRtcSsrValue+0x3c>)
 8000890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000892:	b29b      	uxth	r3, r3
 8000894:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000896:	e005      	b.n	80008a4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <ReadRtcSsrValue+0x3c>)
 800089e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d1f5      	bne.n	8000898 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80008ac:	683b      	ldr	r3, [r7, #0]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40002800 	.word	0x40002800

080008c0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80008d0:	79ba      	ldrb	r2, [r7, #6]
 80008d2:	491d      	ldr	r1, [pc, #116]	; (8000948 <LinkTimerAfter+0x88>)
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	440b      	add	r3, r1
 80008de:	3315      	adds	r3, #21
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d009      	beq.n	80008fe <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80008ea:	7bfa      	ldrb	r2, [r7, #15]
 80008ec:	4916      	ldr	r1, [pc, #88]	; (8000948 <LinkTimerAfter+0x88>)
 80008ee:	4613      	mov	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	440b      	add	r3, r1
 80008f8:	3314      	adds	r3, #20
 80008fa:	79fa      	ldrb	r2, [r7, #7]
 80008fc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80008fe:	79fa      	ldrb	r2, [r7, #7]
 8000900:	4911      	ldr	r1, [pc, #68]	; (8000948 <LinkTimerAfter+0x88>)
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	440b      	add	r3, r1
 800090c:	3315      	adds	r3, #21
 800090e:	7bfa      	ldrb	r2, [r7, #15]
 8000910:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000912:	79fa      	ldrb	r2, [r7, #7]
 8000914:	490c      	ldr	r1, [pc, #48]	; (8000948 <LinkTimerAfter+0x88>)
 8000916:	4613      	mov	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	440b      	add	r3, r1
 8000920:	3314      	adds	r3, #20
 8000922:	79ba      	ldrb	r2, [r7, #6]
 8000924:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000926:	79ba      	ldrb	r2, [r7, #6]
 8000928:	4907      	ldr	r1, [pc, #28]	; (8000948 <LinkTimerAfter+0x88>)
 800092a:	4613      	mov	r3, r2
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	4413      	add	r3, r2
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	440b      	add	r3, r1
 8000934:	3315      	adds	r3, #21
 8000936:	79fa      	ldrb	r2, [r7, #7]
 8000938:	701a      	strb	r2, [r3, #0]

  return;
 800093a:	bf00      	nop
}
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	2000019c 	.word	0x2000019c

0800094c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	460a      	mov	r2, r1
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	4613      	mov	r3, r2
 800095a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800095c:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <LinkTimerBefore+0xb8>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	79ba      	ldrb	r2, [r7, #6]
 8000964:	429a      	cmp	r2, r3
 8000966:	d032      	beq.n	80009ce <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000968:	79ba      	ldrb	r2, [r7, #6]
 800096a:	4927      	ldr	r1, [pc, #156]	; (8000a08 <LinkTimerBefore+0xbc>)
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	440b      	add	r3, r1
 8000976:	3314      	adds	r3, #20
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800097c:	7bfa      	ldrb	r2, [r7, #15]
 800097e:	4922      	ldr	r1, [pc, #136]	; (8000a08 <LinkTimerBefore+0xbc>)
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	440b      	add	r3, r1
 800098a:	3315      	adds	r3, #21
 800098c:	79fa      	ldrb	r2, [r7, #7]
 800098e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000990:	79fa      	ldrb	r2, [r7, #7]
 8000992:	491d      	ldr	r1, [pc, #116]	; (8000a08 <LinkTimerBefore+0xbc>)
 8000994:	4613      	mov	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	4413      	add	r3, r2
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	440b      	add	r3, r1
 800099e:	3315      	adds	r3, #21
 80009a0:	79ba      	ldrb	r2, [r7, #6]
 80009a2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80009a4:	79fa      	ldrb	r2, [r7, #7]
 80009a6:	4918      	ldr	r1, [pc, #96]	; (8000a08 <LinkTimerBefore+0xbc>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	440b      	add	r3, r1
 80009b2:	3314      	adds	r3, #20
 80009b4:	7bfa      	ldrb	r2, [r7, #15]
 80009b6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80009b8:	79ba      	ldrb	r2, [r7, #6]
 80009ba:	4913      	ldr	r1, [pc, #76]	; (8000a08 <LinkTimerBefore+0xbc>)
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	440b      	add	r3, r1
 80009c6:	3314      	adds	r3, #20
 80009c8:	79fa      	ldrb	r2, [r7, #7]
 80009ca:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80009cc:	e014      	b.n	80009f8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	490d      	ldr	r1, [pc, #52]	; (8000a08 <LinkTimerBefore+0xbc>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3315      	adds	r3, #21
 80009de:	79ba      	ldrb	r2, [r7, #6]
 80009e0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80009e2:	79ba      	ldrb	r2, [r7, #6]
 80009e4:	4908      	ldr	r1, [pc, #32]	; (8000a08 <LinkTimerBefore+0xbc>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	3314      	adds	r3, #20
 80009f2:	79fa      	ldrb	r2, [r7, #7]
 80009f4:	701a      	strb	r2, [r3, #0]
  return;
 80009f6:	bf00      	nop
}
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	2000022c 	.word	0x2000022c
 8000a08:	2000019c 	.word	0x2000019c

08000a0c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a16:	4b4e      	ldr	r3, [pc, #312]	; (8000b50 <linkTimer+0x144>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b06      	cmp	r3, #6
 8000a1e:	d118      	bne.n	8000a52 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000a20:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <linkTimer+0x144>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b4b      	ldr	r3, [pc, #300]	; (8000b54 <linkTimer+0x148>)
 8000a28:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000a2a:	4a49      	ldr	r2, [pc, #292]	; (8000b50 <linkTimer+0x144>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	4949      	ldr	r1, [pc, #292]	; (8000b58 <linkTimer+0x14c>)
 8000a34:	4613      	mov	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4413      	add	r3, r2
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	440b      	add	r3, r1
 8000a3e:	3315      	adds	r3, #21
 8000a40:	2206      	movs	r2, #6
 8000a42:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a44:	4b45      	ldr	r3, [pc, #276]	; (8000b5c <linkTimer+0x150>)
 8000a46:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	81fb      	strh	r3, [r7, #14]
 8000a50:	e078      	b.n	8000b44 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000a52:	f000 f909 	bl	8000c68 <ReturnTimeElapsed>
 8000a56:	4603      	mov	r3, r0
 8000a58:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	493e      	ldr	r1, [pc, #248]	; (8000b58 <linkTimer+0x14c>)
 8000a5e:	4613      	mov	r3, r2
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	4413      	add	r3, r2
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	440b      	add	r3, r1
 8000a68:	3308      	adds	r3, #8
 8000a6a:	6819      	ldr	r1, [r3, #0]
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	4419      	add	r1, r3
 8000a72:	4839      	ldr	r0, [pc, #228]	; (8000b58 <linkTimer+0x14c>)
 8000a74:	4613      	mov	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4413      	add	r3, r2
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	4403      	add	r3, r0
 8000a7e:	3308      	adds	r3, #8
 8000a80:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	4934      	ldr	r1, [pc, #208]	; (8000b58 <linkTimer+0x14c>)
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	440b      	add	r3, r1
 8000a90:	3308      	adds	r3, #8
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <linkTimer+0x144>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4a2e      	ldr	r2, [pc, #184]	; (8000b58 <linkTimer+0x14c>)
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	440b      	add	r3, r1
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	4413      	add	r3, r2
 8000aaa:	3308      	adds	r3, #8
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d337      	bcc.n	8000b24 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000ab4:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <linkTimer+0x144>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000aba:	7b7a      	ldrb	r2, [r7, #13]
 8000abc:	4926      	ldr	r1, [pc, #152]	; (8000b58 <linkTimer+0x14c>)
 8000abe:	4613      	mov	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	440b      	add	r3, r1
 8000ac8:	3315      	adds	r3, #21
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ace:	e013      	b.n	8000af8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ad0:	7b7a      	ldrb	r2, [r7, #13]
 8000ad2:	4921      	ldr	r1, [pc, #132]	; (8000b58 <linkTimer+0x14c>)
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	440b      	add	r3, r1
 8000ade:	3315      	adds	r3, #21
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ae4:	7b7a      	ldrb	r2, [r7, #13]
 8000ae6:	491c      	ldr	r1, [pc, #112]	; (8000b58 <linkTimer+0x14c>)
 8000ae8:	4613      	mov	r3, r2
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	4413      	add	r3, r2
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	440b      	add	r3, r1
 8000af2:	3315      	adds	r3, #21
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000af8:	7b3b      	ldrb	r3, [r7, #12]
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d00b      	beq.n	8000b16 <linkTimer+0x10a>
 8000afe:	7b3a      	ldrb	r2, [r7, #12]
 8000b00:	4915      	ldr	r1, [pc, #84]	; (8000b58 <linkTimer+0x14c>)
 8000b02:	4613      	mov	r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4413      	add	r3, r2
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	440b      	add	r3, r1
 8000b0c:	3308      	adds	r3, #8
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d2dc      	bcs.n	8000ad0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000b16:	7b7a      	ldrb	r2, [r7, #13]
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fecf 	bl	80008c0 <LinkTimerAfter>
 8000b22:	e00f      	b.n	8000b44 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <linkTimer+0x144>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff0c 	bl	800094c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <linkTimer+0x144>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <linkTimer+0x148>)
 8000b3c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <linkTimer+0x144>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000b44:	89fb      	ldrh	r3, [r7, #14]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000022c 	.word	0x2000022c
 8000b54:	2000022d 	.word	0x2000022d
 8000b58:	2000019c 	.word	0x2000019c
 8000b5c:	20000230 	.word	0x20000230

08000b60 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	460a      	mov	r2, r1
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000b70:	4b39      	ldr	r3, [pc, #228]	; (8000c58 <UnlinkTimer+0xf8>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d111      	bne.n	8000ba0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b7c:	4b36      	ldr	r3, [pc, #216]	; (8000c58 <UnlinkTimer+0xf8>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <UnlinkTimer+0xfc>)
 8000b84:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000b86:	79fa      	ldrb	r2, [r7, #7]
 8000b88:	4935      	ldr	r1, [pc, #212]	; (8000c60 <UnlinkTimer+0x100>)
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4413      	add	r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	440b      	add	r3, r1
 8000b94:	3315      	adds	r3, #21
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <UnlinkTimer+0xf8>)
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e03e      	b.n	8000c1e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000ba0:	79fa      	ldrb	r2, [r7, #7]
 8000ba2:	492f      	ldr	r1, [pc, #188]	; (8000c60 <UnlinkTimer+0x100>)
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	440b      	add	r3, r1
 8000bae:	3314      	adds	r3, #20
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000bb4:	79fa      	ldrb	r2, [r7, #7]
 8000bb6:	492a      	ldr	r1, [pc, #168]	; (8000c60 <UnlinkTimer+0x100>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3315      	adds	r3, #21
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000bc8:	79f9      	ldrb	r1, [r7, #7]
 8000bca:	7bfa      	ldrb	r2, [r7, #15]
 8000bcc:	4824      	ldr	r0, [pc, #144]	; (8000c60 <UnlinkTimer+0x100>)
 8000bce:	460b      	mov	r3, r1
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	440b      	add	r3, r1
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	4403      	add	r3, r0
 8000bd8:	3315      	adds	r3, #21
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2d8      	uxtb	r0, r3
 8000bde:	4920      	ldr	r1, [pc, #128]	; (8000c60 <UnlinkTimer+0x100>)
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	440b      	add	r3, r1
 8000bea:	3315      	adds	r3, #21
 8000bec:	4602      	mov	r2, r0
 8000bee:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d013      	beq.n	8000c1e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000bf6:	79f9      	ldrb	r1, [r7, #7]
 8000bf8:	7bba      	ldrb	r2, [r7, #14]
 8000bfa:	4819      	ldr	r0, [pc, #100]	; (8000c60 <UnlinkTimer+0x100>)
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	440b      	add	r3, r1
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	4403      	add	r3, r0
 8000c06:	3314      	adds	r3, #20
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2d8      	uxtb	r0, r3
 8000c0c:	4914      	ldr	r1, [pc, #80]	; (8000c60 <UnlinkTimer+0x100>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3314      	adds	r3, #20
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000c1e:	79fa      	ldrb	r2, [r7, #7]
 8000c20:	490f      	ldr	r1, [pc, #60]	; (8000c60 <UnlinkTimer+0x100>)
 8000c22:	4613      	mov	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	440b      	add	r3, r1
 8000c2c:	330c      	adds	r3, #12
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <UnlinkTimer+0xf8>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b06      	cmp	r3, #6
 8000c3a:	d107      	bne.n	8000c4c <UnlinkTimer+0xec>
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d104      	bne.n	8000c4c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <UnlinkTimer+0x104>)
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	601a      	str	r2, [r3, #0]
  }

  return;
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
}
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	2000022c 	.word	0x2000022c
 8000c5c:	2000022d 	.word	0x2000022d
 8000c60:	2000019c 	.word	0x2000019c
 8000c64:	20000230 	.word	0x20000230

08000c68 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <ReturnTimeElapsed+0x70>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c76:	d026      	beq.n	8000cc6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000c78:	f7ff fe02 	bl	8000880 <ReadRtcSsrValue>
 8000c7c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <ReturnTimeElapsed+0x70>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d805      	bhi.n	8000c94 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <ReturnTimeElapsed+0x70>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	e00a      	b.n	8000caa <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <ReturnTimeElapsed+0x74>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <ReturnTimeElapsed+0x70>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <ReturnTimeElapsed+0x78>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	fb02 f303 	mul.w	r3, r2, r3
 8000cb6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <ReturnTimeElapsed+0x7c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	40d3      	lsrs	r3, r2
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	e001      	b.n	8000cca <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	b29b      	uxth	r3, r3
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000230 	.word	0x20000230
 8000cdc:	20000272 	.word	0x20000272
 8000ce0:	20000271 	.word	0x20000271
 8000ce4:	20000270 	.word	0x20000270

08000ce8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d108      	bne.n	8000d0a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000cf8:	f7ff fdc2 	bl	8000880 <ReadRtcSsrValue>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <RestartWakeupCounter+0xa8>)
 8000d00:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000d02:	2003      	movs	r0, #3
 8000d04:	f002 fbef 	bl	80034e6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000d08:	e03e      	b.n	8000d88 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d803      	bhi.n	8000d18 <RestartWakeupCounter+0x30>
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <RestartWakeupCounter+0xac>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d002      	beq.n	8000d1e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d1e:	bf00      	nop
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <RestartWakeupCounter+0xb0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d0f7      	beq.n	8000d20 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <RestartWakeupCounter+0xb0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <RestartWakeupCounter+0xb0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d44:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <RestartWakeupCounter+0xb4>)
 8000d48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d4c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f002 fbd7 	bl	8003502 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <RestartWakeupCounter+0xb8>)
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	0c1b      	lsrs	r3, r3, #16
 8000d5a:	041b      	lsls	r3, r3, #16
 8000d5c:	88fa      	ldrh	r2, [r7, #6]
 8000d5e:	4910      	ldr	r1, [pc, #64]	; (8000da0 <RestartWakeupCounter+0xb8>)
 8000d60:	4313      	orrs	r3, r2
 8000d62:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000d64:	f7ff fd8c 	bl	8000880 <ReadRtcSsrValue>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <RestartWakeupCounter+0xa8>)
 8000d6c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <RestartWakeupCounter+0xb0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <RestartWakeupCounter+0xb0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d80:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000d82:	f3af 8000 	nop.w
  return ;
 8000d86:	bf00      	nop
}
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000230 	.word	0x20000230
 8000d94:	20000270 	.word	0x20000270
 8000d98:	2000026c 	.word	0x2000026c
 8000d9c:	58000800 	.word	0x58000800
 8000da0:	40002800 	.word	0x40002800

08000da4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000daa:	4b47      	ldr	r3, [pc, #284]	; (8000ec8 <RescheduleTimerList+0x124>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000db6:	d108      	bne.n	8000dca <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000db8:	bf00      	nop
 8000dba:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <RescheduleTimerList+0x128>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f7      	bne.n	8000dba <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000dca:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <RescheduleTimerList+0x128>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <RescheduleTimerList+0x128>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ddc:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000dde:	4b3c      	ldr	r3, [pc, #240]	; (8000ed0 <RescheduleTimerList+0x12c>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000de4:	7bfa      	ldrb	r2, [r7, #15]
 8000de6:	493b      	ldr	r1, [pc, #236]	; (8000ed4 <RescheduleTimerList+0x130>)
 8000de8:	4613      	mov	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4413      	add	r3, r2
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	440b      	add	r3, r1
 8000df2:	3308      	adds	r3, #8
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000df8:	f7ff ff36 	bl	8000c68 <ReturnTimeElapsed>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d205      	bcs.n	8000e14 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000e0c:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <RescheduleTimerList+0x134>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e04d      	b.n	8000eb0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	4a31      	ldr	r2, [pc, #196]	; (8000edc <RescheduleTimerList+0x138>)
 8000e18:	8812      	ldrh	r2, [r2, #0]
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d906      	bls.n	8000e34 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000e26:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <RescheduleTimerList+0x138>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <RescheduleTimerList+0x134>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	e03d      	b.n	8000eb0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <RescheduleTimerList+0x134>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e44:	e034      	b.n	8000eb0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	4922      	ldr	r1, [pc, #136]	; (8000ed4 <RescheduleTimerList+0x130>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	440b      	add	r3, r1
 8000e54:	3308      	adds	r3, #8
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d20a      	bcs.n	8000e74 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000e5e:	7bfa      	ldrb	r2, [r7, #15]
 8000e60:	491c      	ldr	r1, [pc, #112]	; (8000ed4 <RescheduleTimerList+0x130>)
 8000e62:	4613      	mov	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	440b      	add	r3, r1
 8000e6c:	3308      	adds	r3, #8
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e013      	b.n	8000e9c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000e74:	7bfa      	ldrb	r2, [r7, #15]
 8000e76:	4917      	ldr	r1, [pc, #92]	; (8000ed4 <RescheduleTimerList+0x130>)
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	440b      	add	r3, r1
 8000e82:	3308      	adds	r3, #8
 8000e84:	6819      	ldr	r1, [r3, #0]
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	7bfa      	ldrb	r2, [r7, #15]
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <RescheduleTimerList+0x130>)
 8000e8e:	4613      	mov	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	4403      	add	r3, r0
 8000e98:	3308      	adds	r3, #8
 8000e9a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	490d      	ldr	r1, [pc, #52]	; (8000ed4 <RescheduleTimerList+0x130>)
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3315      	adds	r3, #21
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d1c7      	bne.n	8000e46 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000eb6:	89bb      	ldrh	r3, [r7, #12]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff15 	bl	8000ce8 <RestartWakeupCounter>

  return ;
 8000ebe:	bf00      	nop
}
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40002800 	.word	0x40002800
 8000ecc:	2000026c 	.word	0x2000026c
 8000ed0:	2000022c 	.word	0x2000022c
 8000ed4:	2000019c 	.word	0x2000019c
 8000ed8:	20000234 	.word	0x20000234
 8000edc:	20000274 	.word	0x20000274

08000ee0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8000eea:	617b      	str	r3, [r7, #20]
  return(result);
 8000eec:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ef2:	4b5e      	ldr	r3, [pc, #376]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	22ca      	movs	r2, #202	; 0xca
 8000efa:	625a      	str	r2, [r3, #36]	; 0x24
 8000efc:	4b5b      	ldr	r3, [pc, #364]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2253      	movs	r2, #83	; 0x53
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000f06:	4b59      	ldr	r3, [pc, #356]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	4b57      	ldr	r3, [pc, #348]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f18:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000f1a:	4b55      	ldr	r3, [pc, #340]	; (8001070 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000f22:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f26:	4953      	ldr	r1, [pc, #332]	; (8001074 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	440b      	add	r3, r1
 8000f32:	330c      	adds	r3, #12
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d170      	bne.n	800101e <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000f3c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f40:	494c      	ldr	r1, [pc, #304]	; (8001074 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	440b      	add	r3, r1
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000f50:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f54:	4947      	ldr	r1, [pc, #284]	; (8001074 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	440b      	add	r3, r1
 8000f60:	3310      	adds	r3, #16
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000f66:	4b44      	ldr	r3, [pc, #272]	; (8001078 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d04e      	beq.n	800100e <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000f70:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f74:	493f      	ldr	r1, [pc, #252]	; (8001074 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	330d      	adds	r3, #13
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d125      	bne.n	8000fd6 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000f8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fde5 	bl	8000b60 <UnlinkTimer>
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000fa0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000fa4:	4933      	ldr	r1, [pc, #204]	; (8001074 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	440b      	add	r3, r1
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f9d0 	bl	8001360 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	22ca      	movs	r2, #202	; 0xca
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2253      	movs	r2, #83	; 0x53
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
 8000fd4:	e013      	b.n	8000ffe <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f931 	bl	800124c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	22ca      	movs	r2, #202	; 0xca
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2253      	movs	r2, #83	; 0x53
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000ffe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	4619      	mov	r1, r3
 8001006:	69b8      	ldr	r0, [r7, #24]
 8001008:	f000 fa30 	bl	800146c <HW_TS_RTC_Int_AppNot>
 800100c:	e024      	b.n	8001058 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 800100e:	f7ff fec9 	bl	8000da4 <RescheduleTimerList>
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f383 8810 	msr	PRIMASK, r3
 800101c:	e01c      	b.n	8001058 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800101e:	bf00      	nop
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f7      	beq.n	8001020 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001044:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001048:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	22ff      	movs	r2, #255	; 0xff
 8001060:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001062:	bf00      	nop
}
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000026c 	.word	0x2000026c
 8001070:	2000022c 	.word	0x2000022c
 8001074:	2000019c 	.word	0x2000019c
 8001078:	20000234 	.word	0x20000234
 800107c:	58000800 	.word	0x58000800

08001080 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800108c:	4a64      	ldr	r2, [pc, #400]	; (8001220 <HW_TS_Init+0x1a0>)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001092:	4b63      	ldr	r3, [pc, #396]	; (8001220 <HW_TS_Init+0x1a0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	22ca      	movs	r2, #202	; 0xca
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
 800109c:	4b60      	ldr	r3, [pc, #384]	; (8001220 <HW_TS_Init+0x1a0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2253      	movs	r2, #83	; 0x53
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80010a6:	4b5f      	ldr	r3, [pc, #380]	; (8001224 <HW_TS_Init+0x1a4>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	4a5e      	ldr	r2, [pc, #376]	; (8001224 <HW_TS_Init+0x1a4>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80010b2:	4b5c      	ldr	r3, [pc, #368]	; (8001224 <HW_TS_Init+0x1a4>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	f1c3 0304 	rsb	r3, r3, #4
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b58      	ldr	r3, [pc, #352]	; (8001228 <HW_TS_Init+0x1a8>)
 80010c6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80010c8:	4b56      	ldr	r3, [pc, #344]	; (8001224 <HW_TS_Init+0x1a4>)
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80010d0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80010d4:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	fa92 f2a2 	rbit	r2, r2
 80010dc:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	d101      	bne.n	80010ec <HW_TS_Init+0x6c>
  {
    return 32U;
 80010e8:	2220      	movs	r2, #32
 80010ea:	e003      	b.n	80010f4 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	fab2 f282 	clz	r2, r2
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	40d3      	lsrs	r3, r2
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b4b      	ldr	r3, [pc, #300]	; (800122c <HW_TS_Init+0x1ac>)
 80010fe:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001100:	4b48      	ldr	r3, [pc, #288]	; (8001224 <HW_TS_Init+0x1a4>)
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	b29b      	uxth	r3, r3
 8001106:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800110a:	b29b      	uxth	r3, r3
 800110c:	3301      	adds	r3, #1
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b47      	ldr	r3, [pc, #284]	; (8001230 <HW_TS_Init+0x1b0>)
 8001112:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001114:	4b46      	ldr	r3, [pc, #280]	; (8001230 <HW_TS_Init+0x1b0>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	3b01      	subs	r3, #1
 800111a:	4a44      	ldr	r2, [pc, #272]	; (800122c <HW_TS_Init+0x1ac>)
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	fb02 f303 	mul.w	r3, r2, r3
 8001122:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001126:	4a40      	ldr	r2, [pc, #256]	; (8001228 <HW_TS_Init+0x1a8>)
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	40d3      	lsrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001134:	4293      	cmp	r3, r2
 8001136:	d904      	bls.n	8001142 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001138:	4b3e      	ldr	r3, [pc, #248]	; (8001234 <HW_TS_Init+0x1b4>)
 800113a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800113e:	801a      	strh	r2, [r3, #0]
 8001140:	e003      	b.n	800114a <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <HW_TS_Init+0x1b4>)
 8001148:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800114a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800114e:	f7ff fb85 	bl	800085c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001152:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001156:	f7ff fb6d 	bl	8000834 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d143      	bne.n	80011e8 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <HW_TS_Init+0x1b8>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001166:	4b35      	ldr	r3, [pc, #212]	; (800123c <HW_TS_Init+0x1bc>)
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800116e:	2300      	movs	r3, #0
 8001170:	77fb      	strb	r3, [r7, #31]
 8001172:	e00c      	b.n	800118e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001174:	7ffa      	ldrb	r2, [r7, #31]
 8001176:	4932      	ldr	r1, [pc, #200]	; (8001240 <HW_TS_Init+0x1c0>)
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	440b      	add	r3, r1
 8001182:	330c      	adds	r3, #12
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001188:	7ffb      	ldrb	r3, [r7, #31]
 800118a:	3301      	adds	r3, #1
 800118c:	77fb      	strb	r3, [r7, #31]
 800118e:	7ffb      	ldrb	r3, [r7, #31]
 8001190:	2b05      	cmp	r3, #5
 8001192:	d9ef      	bls.n	8001174 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HW_TS_Init+0x1c4>)
 8001196:	2206      	movs	r2, #6
 8001198:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <HW_TS_Init+0x1a0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <HW_TS_Init+0x1a0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011ac:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <HW_TS_Init+0x1a0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HW_TS_Init+0x1a0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011c2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HW_TS_Init+0x1c8>)
 80011c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011ca:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80011cc:	2003      	movs	r0, #3
 80011ce:	f002 f998 	bl	8003502 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <HW_TS_Init+0x1a0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HW_TS_Init+0x1a0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	e00a      	b.n	80011fe <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HW_TS_Init+0x1a0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f002 f974 	bl	80034e6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HW_TS_Init+0x1a0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	22ff      	movs	r2, #255	; 0xff
 8001206:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001208:	2200      	movs	r2, #0
 800120a:	2106      	movs	r1, #6
 800120c:	2003      	movs	r0, #3
 800120e:	f002 f930 	bl	8003472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001212:	2003      	movs	r0, #3
 8001214:	f002 f947 	bl	80034a6 <HAL_NVIC_EnableIRQ>

  return;
 8001218:	bf00      	nop
}
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000026c 	.word	0x2000026c
 8001224:	40002800 	.word	0x40002800
 8001228:	20000270 	.word	0x20000270
 800122c:	20000271 	.word	0x20000271
 8001230:	20000272 	.word	0x20000272
 8001234:	20000274 	.word	0x20000274
 8001238:	20000234 	.word	0x20000234
 800123c:	20000230 	.word	0x20000230
 8001240:	2000019c 	.word	0x2000019c
 8001244:	2000022c 	.word	0x2000022c
 8001248:	58000800 	.word	0x58000800

0800124c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001256:	f3ef 8310 	mrs	r3, PRIMASK
 800125a:	60fb      	str	r3, [r7, #12]
  return(result);
 800125c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800125e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001262:	2003      	movs	r0, #3
 8001264:	f002 f92d 	bl	80034c2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001268:	4b37      	ldr	r3, [pc, #220]	; (8001348 <HW_TS_Stop+0xfc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	22ca      	movs	r2, #202	; 0xca
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <HW_TS_Stop+0xfc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2253      	movs	r2, #83	; 0x53
 800127a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	4933      	ldr	r1, [pc, #204]	; (800134c <HW_TS_Stop+0x100>)
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	440b      	add	r3, r1
 800128a:	330c      	adds	r3, #12
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d148      	bne.n	8001326 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fc61 	bl	8000b60 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800129e:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <HW_TS_Stop+0x104>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012a4:	7cfb      	ldrb	r3, [r7, #19]
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d135      	bne.n	8001316 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <HW_TS_Stop+0x108>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b6:	d108      	bne.n	80012ca <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80012b8:	bf00      	nop
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <HW_TS_Stop+0xfc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f7      	bne.n	80012ba <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HW_TS_Stop+0xfc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HW_TS_Stop+0xfc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012dc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80012de:	bf00      	nop
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HW_TS_Stop+0xfc>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f7      	beq.n	80012e0 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HW_TS_Stop+0xfc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HW_TS_Stop+0xfc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001304:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HW_TS_Stop+0x10c>)
 8001308:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800130c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800130e:	2003      	movs	r0, #3
 8001310:	f002 f8f7 	bl	8003502 <HAL_NVIC_ClearPendingIRQ>
 8001314:	e007      	b.n	8001326 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <HW_TS_Stop+0x110>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	7cfa      	ldrb	r2, [r7, #19]
 800131e:	429a      	cmp	r2, r3
 8001320:	d001      	beq.n	8001326 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001322:	f7ff fd3f 	bl	8000da4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HW_TS_Stop+0xfc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	22ff      	movs	r2, #255	; 0xff
 800132e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001330:	2003      	movs	r0, #3
 8001332:	f002 f8b8 	bl	80034a6 <HAL_NVIC_EnableIRQ>
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001340:	bf00      	nop
}
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000026c 	.word	0x2000026c
 800134c:	2000019c 	.word	0x2000019c
 8001350:	2000022c 	.word	0x2000022c
 8001354:	40002800 	.word	0x40002800
 8001358:	58000800 	.word	0x58000800
 800135c:	2000022d 	.word	0x2000022d

08001360 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800136c:	79fa      	ldrb	r2, [r7, #7]
 800136e:	493b      	ldr	r1, [pc, #236]	; (800145c <HW_TS_Start+0xfc>)
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	330c      	adds	r3, #12
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d103      	bne.n	800138c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff60 	bl	800124c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800138c:	f3ef 8310 	mrs	r3, PRIMASK
 8001390:	60fb      	str	r3, [r7, #12]
  return(result);
 8001392:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001394:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001396:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001398:	2003      	movs	r0, #3
 800139a:	f002 f892 	bl	80034c2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <HW_TS_Start+0x100>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	22ca      	movs	r2, #202	; 0xca
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <HW_TS_Start+0x100>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2253      	movs	r2, #83	; 0x53
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80013b2:	79fa      	ldrb	r2, [r7, #7]
 80013b4:	4929      	ldr	r1, [pc, #164]	; (800145c <HW_TS_Start+0xfc>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	440b      	add	r3, r1
 80013c0:	330c      	adds	r3, #12
 80013c2:	2202      	movs	r2, #2
 80013c4:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80013c6:	79fa      	ldrb	r2, [r7, #7]
 80013c8:	4924      	ldr	r1, [pc, #144]	; (800145c <HW_TS_Start+0xfc>)
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	440b      	add	r3, r1
 80013d4:	3308      	adds	r3, #8
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80013da:	79fa      	ldrb	r2, [r7, #7]
 80013dc:	491f      	ldr	r1, [pc, #124]	; (800145c <HW_TS_Start+0xfc>)
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	3304      	adds	r3, #4
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fb0b 	bl	8000a0c <linkTimer>
 80013f6:	4603      	mov	r3, r0
 80013f8:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HW_TS_Start+0x104>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HW_TS_Start+0x108>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	7c7a      	ldrb	r2, [r7, #17]
 8001408:	429a      	cmp	r2, r3
 800140a:	d002      	beq.n	8001412 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 800140c:	f7ff fcca 	bl	8000da4 <RescheduleTimerList>
 8001410:	e013      	b.n	800143a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001412:	79fa      	ldrb	r2, [r7, #7]
 8001414:	4911      	ldr	r1, [pc, #68]	; (800145c <HW_TS_Start+0xfc>)
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	440b      	add	r3, r1
 8001420:	3308      	adds	r3, #8
 8001422:	6819      	ldr	r1, [r3, #0]
 8001424:	8a7b      	ldrh	r3, [r7, #18]
 8001426:	79fa      	ldrb	r2, [r7, #7]
 8001428:	1ac9      	subs	r1, r1, r3
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <HW_TS_Start+0xfc>)
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4403      	add	r3, r0
 8001436:	3308      	adds	r3, #8
 8001438:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HW_TS_Start+0x100>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	22ff      	movs	r2, #255	; 0xff
 8001442:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001444:	2003      	movs	r0, #3
 8001446:	f002 f82e 	bl	80034a6 <HAL_NVIC_EnableIRQ>
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001454:	bf00      	nop
}
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000019c 	.word	0x2000019c
 8001460:	2000026c 	.word	0x2000026c
 8001464:	2000022c 	.word	0x2000022c
 8001468:	2000022d 	.word	0x2000022d

0800146c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	460b      	mov	r3, r1
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4798      	blx	r3

  return;
 800147e:	bf00      	nop
}
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <LL_EXTI_DisableIT_0_31>:
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <LL_EXTI_DisableIT_0_31+0x28>)
 8001492:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	43db      	mvns	r3, r3
 800149a:	4905      	ldr	r1, [pc, #20]	; (80014b0 <LL_EXTI_DisableIT_0_31+0x28>)
 800149c:	4013      	ands	r3, r2
 800149e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	58000800 	.word	0x58000800

080014b4 <LL_EXTI_DisableIT_32_63>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <LL_EXTI_DisableIT_32_63+0x28>)
 80014be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	4905      	ldr	r1, [pc, #20]	; (80014dc <LL_EXTI_DisableIT_32_63+0x28>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	58000800 	.word	0x58000800

080014e0 <LL_RCC_LSE_SetDriveCapability>:
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80014e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f0:	f023 0218 	bic.w	r2, r3, #24
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014fa:	4313      	orrs	r3, r2
 80014fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800153e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001560:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001564:	d101      	bne.n	800156a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800158a:	d101      	bne.n	8001590 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80015a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015b0:	4313      	orrs	r3, r2
 80015b2:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80015b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4013      	ands	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015c0:	68fb      	ldr	r3, [r7, #12]
}
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	041b      	lsls	r3, r3, #16
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	605a      	str	r2, [r3, #4]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	605a      	str	r2, [r3, #4]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	041b      	lsls	r3, r3, #16
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	615a      	str	r2, [r3, #20]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	615a      	str	r2, [r3, #20]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	609a      	str	r2, [r3, #8]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	619a      	str	r2, [r3, #24]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
			  /**
			   * The OPTVERR flag is wrongly set at power on
			   * It shall be cleared before using any HAL_FLASH_xxx() api
			   */
			  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <main+0x4c>)
 800169a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800169e:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a0:	f000 fc9c 	bl	8001fdc <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 80016a4:	f000 f8ec 	bl	8001880 <_ZL12Reset_Devicev>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a8:	f000 f81c 	bl	80016e4 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  Init_Exti( );
 80016ac:	f000 f912 	bl	80018d4 <_ZL9Init_Extiv>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b0:	f7ff f854 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 80016b4:	f7ff f81c 	bl	80006f0 <MX_DMA_Init>
  MX_TIM2_Init();
 80016b8:	f000 fb46 	bl	8001d48 <MX_TIM2_Init>
  MX_TIM17_Init();
 80016bc:	f000 fb92 	bl	8001de4 <MX_TIM17_Init>
  MX_ADC1_Init();
 80016c0:	f7fe fd82 	bl	80001c8 <MX_ADC1_Init>
  MX_USB_Device_Init();
 80016c4:	f00f fbac 	bl	8010e20 <MX_USB_Device_Init>
  MX_RF_Init();
 80016c8:	f000 f926 	bl	8001918 <MX_RF_Init>
  MX_RTC_Init();
 80016cc:	f000 f956 	bl	800197c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//  myMain();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80016d0:	f00a fd22 	bl	800c118 <osKernelInitialize>
  MX_FREERTOS_Init();
 80016d4:	f7fe ffd4 	bl	8000680 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 80016d8:	f00a fd52 	bl	800c180 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <main+0x48>
 80016de:	bf00      	nop
 80016e0:	58004000 	.word	0x58004000

080016e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b0ae      	sub	sp, #184	; 0xb8
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016ee:	2248      	movs	r2, #72	; 0x48
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f010 f90b 	bl	801190e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	615a      	str	r2, [r3, #20]
 800170a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2250      	movs	r2, #80	; 0x50
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f010 f8fb 	bl	801190e <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8001718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001736:	f043 0303 	orr.w	r3, r3, #3
 800173a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800173c:	f003 f992 	bl	8004a64 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff fecd 	bl	80014e0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001746:	4b3f      	ldr	r3, [pc, #252]	; (8001844 <_Z18SystemClock_Configv+0x160>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800174e:	4a3d      	ldr	r2, [pc, #244]	; (8001844 <_Z18SystemClock_Configv+0x160>)
 8001750:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <_Z18SystemClock_Configv+0x160>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001762:	2307      	movs	r3, #7
 8001764:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800176c:	2301      	movs	r3, #1
 800176e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001774:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001776:	2340      	movs	r3, #64	; 0x40
 8001778:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001782:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fd1c 	bl	80051c4 <HAL_RCC_OscConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	bf14      	ite	ne
 8001792:	2301      	movne	r3, #1
 8001794:	2300      	moveq	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 800179c:	f000 f8b8 	bl	8001910 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80017a0:	236f      	movs	r3, #111	; 0x6f
 80017a2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80017a4:	2302      	movs	r3, #2
 80017a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017c0:	2101      	movs	r1, #1
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 f88a 	bl	80058dc <HAL_RCC_ClockConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	bf14      	ite	ne
 80017ce:	2301      	movne	r3, #1
 80017d0:	2300      	moveq	r3, #0
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 80017d8:	f000 f89a 	bl	8001910 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80017dc:	f44f 5374 	mov.w	r3, #15616	; 0x3d00
 80017e0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80017e2:	2306      	movs	r3, #6
 80017e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80017e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80017ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80017f2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017f6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80017f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80017fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001802:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001804:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001808:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800180a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800180e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001810:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001814:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001816:	2300      	movs	r3, #0
 8001818:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800181a:	2310      	movs	r3, #16
 800181c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4618      	mov	r0, r3
 8001822:	f004 fcb6 	bl	8006192 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <_Z18SystemClock_Configv+0x156>
  {
    Error_Handler();
 8001836:	f000 f86b 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800183a:	bf00      	nop
 800183c:	37b8      	adds	r7, #184	; 0xb8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	58000400 	.word	0x58000400

08001848 <_ZL18Reset_BackupDomainv>:

/* USER CODE BEGIN 4 */

static void Reset_BackupDomain( void )
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800184c:	f7ff fe80 	bl	8001550 <LL_RCC_IsActiveFlag_PINRST>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <_ZL18Reset_BackupDomainv+0x1c>
 8001856:	f7ff fe8e 	bl	8001576 <LL_RCC_IsActiveFlag_SFTRST>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <_ZL18Reset_BackupDomainv+0x1c>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <_ZL18Reset_BackupDomainv+0x1e>
 8001864:	2300      	movs	r3, #0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <_ZL18Reset_BackupDomainv+0x34>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800186a:	f003 f8fb 	bl	8004a64 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800186e:	f003 f8f9 	bl	8004a64 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001872:	f7ff fe4b 	bl	800150c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001876:	f7ff fe5a 	bl	800152e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800187a:	bf00      	nop
 800187c:	bf00      	nop
}
 800187e:	bd80      	pop	{r7, pc}

08001880 <_ZL12Reset_Devicev>:

static void Reset_Device( void )
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8001884:	f7ff ffe0 	bl	8001848 <_ZL18Reset_BackupDomainv>

  Reset_IPCC();
 8001888:	f000 f802 	bl	8001890 <_ZL10Reset_IPCCv>
#endif

  return;
 800188c:	bf00      	nop
}
 800188e:	bd80      	pop	{r7, pc}

08001890 <_ZL10Reset_IPCCv>:

static void Reset_IPCC( void )
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001894:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001898:	f7ff fe80 	bl	800159c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800189c:	213f      	movs	r1, #63	; 0x3f
 800189e:	480c      	ldr	r0, [pc, #48]	; (80018d0 <_ZL10Reset_IPCCv+0x40>)
 80018a0:	f7ff fedb 	bl	800165a <LL_C1_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80018a4:	213f      	movs	r1, #63	; 0x3f
 80018a6:	480a      	ldr	r0, [pc, #40]	; (80018d0 <_ZL10Reset_IPCCv+0x40>)
 80018a8:	f7ff fee5 	bl	8001676 <LL_C2_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80018ac:	213f      	movs	r1, #63	; 0x3f
 80018ae:	4808      	ldr	r0, [pc, #32]	; (80018d0 <_ZL10Reset_IPCCv+0x40>)
 80018b0:	f7ff fe8d 	bl	80015ce <LL_C1_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80018b4:	213f      	movs	r1, #63	; 0x3f
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <_ZL10Reset_IPCCv+0x40>)
 80018b8:	f7ff feac 	bl	8001614 <LL_C2_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80018bc:	213f      	movs	r1, #63	; 0x3f
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <_ZL10Reset_IPCCv+0x40>)
 80018c0:	f7ff fe97 	bl	80015f2 <LL_C1_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80018c4:	213f      	movs	r1, #63	; 0x3f
 80018c6:	4802      	ldr	r0, [pc, #8]	; (80018d0 <_ZL10Reset_IPCCv+0x40>)
 80018c8:	f7ff feb6 	bl	8001638 <LL_C2_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80018cc:	bf00      	nop
}
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	58000c00 	.word	0x58000c00

080018d4 <_ZL9Init_Extiv>:

static void Init_Exti( void )
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff fdd4 	bl	8001488 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80018e0:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80018e4:	f7ff fde6 	bl	80014b4 <LL_EXTI_DisableIT_32_63>

  return;
 80018e8:	bf00      	nop
}
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d101      	bne.n	8001902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018fe:	f000 fb8d 	bl	800201c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40012c00 	.word	0x40012c00

08001910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001916:	e7fe      	b.n	8001916 <Error_Handler+0x6>

08001918 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_RCC_EnableRTC>:
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800193a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001954:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4313      	orrs	r3, r2
 800195e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800196c:	68fb      	ldr	r3, [r7, #12]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_RTC_Init+0x4c>)
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <MX_RTC_Init+0x50>)
 8001984:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <MX_RTC_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_RTC_Init+0x4c>)
 800198e:	220f      	movs	r2, #15
 8001990:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <MX_RTC_Init+0x4c>)
 8001994:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001998:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_RTC_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_RTC_Init+0x4c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <MX_RTC_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_RTC_Init+0x4c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_RTC_Init+0x4c>)
 80019b4:	f004 fe73 	bl	800669e <HAL_RTC_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80019be:	f7ff ffa7 	bl	8001910 <Error_Handler>
  }

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20004dc8 	.word	0x20004dc8
 80019cc:	40002800 	.word	0x40002800

080019d0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_RTC_MspInit+0x28>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d105      	bne.n	80019ee <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019e2:	f7ff ffa0 	bl	8001926 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80019e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019ea:	f7ff ffad 	bl	8001948 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40002800 	.word	0x40002800

080019fc <LL_AHB3_GRP1_EnableClock>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a20:	68fb      	ldr	r3, [r7, #12]
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001a32:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001a36:	f7ff ffe1 	bl	80019fc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	210f      	movs	r1, #15
 8001a3e:	f06f 0001 	mvn.w	r0, #1
 8001a42:	f001 fd16 	bl	8003472 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2105      	movs	r1, #5
 8001a4a:	202e      	movs	r0, #46	; 0x2e
 8001a4c:	f001 fd11 	bl	8003472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001a50:	202e      	movs	r0, #46	; 0x2e
 8001a52:	f001 fd28 	bl	80034a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	210f      	movs	r1, #15
 8001a5a:	202c      	movs	r0, #44	; 0x2c
 8001a5c:	f001 fd09 	bl	8003472 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	210f      	movs	r1, #15
 8001a64:	202d      	movs	r0, #45	; 0x2d
 8001a66:	f001 fd04 	bl	8003472 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	2019      	movs	r0, #25
 8001ab6:	f001 fcdc 	bl	8003472 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001aba:	2019      	movs	r0, #25
 8001abc:	f001 fcf3 	bl	80034a6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ac0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ac4:	f7ff ffd3 	bl	8001a6e <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ac8:	f107 0208 	add.w	r2, r7, #8
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f004 f8d6 	bl	8005c84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ad8:	f004 f8be 	bl	8005c58 <HAL_RCC_GetPCLK2Freq>
 8001adc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_InitTick+0x8c>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	0c9b      	lsrs	r3, r3, #18
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_InitTick+0x90>)
 8001aee:	4a11      	ldr	r2, [pc, #68]	; (8001b34 <HAL_InitTick+0x94>)
 8001af0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_InitTick+0x90>)
 8001af4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001af8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001afa:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <HAL_InitTick+0x90>)
 8001afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_InitTick+0x90>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_InitTick+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b0c:	4808      	ldr	r0, [pc, #32]	; (8001b30 <HAL_InitTick+0x90>)
 8001b0e:	f004 feb4 	bl	800687a <HAL_TIM_Base_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d104      	bne.n	8001b22 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_InitTick+0x90>)
 8001b1a:	f004 ff05 	bl	8006928 <HAL_TIM_Base_Start_IT>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	e000      	b.n	8001b24 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3730      	adds	r7, #48	; 0x30
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	431bde83 	.word	0x431bde83
 8001b30:	20004dec 	.word	0x20004dec
 8001b34:	40012c00 	.word	0x40012c00

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <NMI_Handler+0x4>

08001b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <HardFault_Handler+0x4>

08001b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <MemManage_Handler+0x4>

08001b4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <BusFault_Handler+0x4>

08001b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <UsageFault_Handler+0x4>

08001b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <DMA1_Channel1_IRQHandler+0x10>)
 8001b6a:	f001 fd81 	bl	8003670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20004d5c 	.word	0x20004d5c

08001b78 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <ADC1_IRQHandler+0x10>)
 8001b7e:	f000 fd83 	bl	8002688 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20004cf8 	.word	0x20004cf8

08001b8c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <USB_LP_IRQHandler+0x10>)
 8001b92:	f002 f90a 	bl	8003daa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20006420 	.word	0x20006420

08001ba0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ba6:	f004 ff6e 	bl	8006a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20004dec 	.word	0x20004dec

08001bb4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001bb8:	f001 fff6 	bl	8003ba8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8001bc4:	f7ff f98c 	bl	8000ee0 <HW_TS_RTC_Wakeup_Handler>
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001bd0:	f00e ffa6 	bl	8010b20 <HW_IPCC_Tx_Handler>
  return;
 8001bd4:	bf00      	nop
}
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001bdc:	f00e ff46 	bl	8010a6c <HW_IPCC_Rx_Handler>
  return;
 8001be0:	bf00      	nop
}
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8001be4:	b40c      	push	{r2, r3}
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	460a      	mov	r2, r1
 8001bf0:	71fb      	strb	r3, [r7, #7]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	b002      	add	sp, #8
 8001c02:	4770      	bx	lr

08001c04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001c08:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <SystemInit+0xa0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001c0e:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <SystemInit+0xa0>)
 8001c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <SystemInit+0xa0>)
 8001c16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c32:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001c36:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <SystemInit+0xa4>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c54:	f023 0305 	bic.w	r3, r3, #5
 8001c58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <SystemInit+0xa8>)
 8001c76:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <SystemInit+0xa8>)
 8001c7e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00
 8001ca8:	faf6fefb 	.word	0xfaf6fefb
 8001cac:	22041000 	.word	0x22041000

08001cb0 <LL_AHB2_GRP1_EnableClock>:
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ccc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_APB1_GRP1_EnableClock>:
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b085      	sub	sp, #20
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4013      	ands	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_APB2_GRP1_EnableClock>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d38:	68fb      	ldr	r3, [r7, #12]
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	f107 0310 	add.w	r3, r7, #16
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001d66:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <MX_TIM2_Init+0x98>)
 8001d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <MX_TIM2_Init+0x98>)
 8001d70:	221f      	movs	r2, #31
 8001d72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_TIM2_Init+0x98>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <MX_TIM2_Init+0x98>)
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <MX_TIM2_Init+0x98>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <MX_TIM2_Init+0x98>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d8e:	4814      	ldr	r0, [pc, #80]	; (8001de0 <MX_TIM2_Init+0x98>)
 8001d90:	f004 fd73 	bl	800687a <HAL_TIM_Base_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d9a:	f7ff fdb9 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	4619      	mov	r1, r3
 8001daa:	480d      	ldr	r0, [pc, #52]	; (8001de0 <MX_TIM2_Init+0x98>)
 8001dac:	f005 f89a 	bl	8006ee4 <HAL_TIM_ConfigClockSource>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001db6:	f7ff fdab 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4806      	ldr	r0, [pc, #24]	; (8001de0 <MX_TIM2_Init+0x98>)
 8001dc8:	f005 fcec 	bl	80077a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001dd2:	f7ff fd9d 	bl	8001910 <Error_Handler>
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3720      	adds	r7, #32
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20004e84 	.word	0x20004e84

08001de4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b094      	sub	sp, #80	; 0x50
 8001de8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	611a      	str	r2, [r3, #16]
 8001dfa:	615a      	str	r2, [r3, #20]
 8001dfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dfe:	463b      	mov	r3, r7
 8001e00:	2234      	movs	r2, #52	; 0x34
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f00f fd82 	bl	801190e <memset>

  htim17.Instance = TIM17;
 8001e0a:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <MX_TIM17_Init+0xec>)
 8001e0c:	4a31      	ldr	r2, [pc, #196]	; (8001ed4 <MX_TIM17_Init+0xf0>)
 8001e0e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3199;
 8001e10:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <MX_TIM17_Init+0xec>)
 8001e12:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001e16:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e18:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <MX_TIM17_Init+0xec>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <MX_TIM17_Init+0xec>)
 8001e20:	2264      	movs	r2, #100	; 0x64
 8001e22:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e24:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <MX_TIM17_Init+0xec>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e2a:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <MX_TIM17_Init+0xec>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <MX_TIM17_Init+0xec>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e36:	4826      	ldr	r0, [pc, #152]	; (8001ed0 <MX_TIM17_Init+0xec>)
 8001e38:	f004 fd1f 	bl	800687a <HAL_TIM_Base_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001e42:	f7ff fd65 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001e46:	4822      	ldr	r0, [pc, #136]	; (8001ed0 <MX_TIM17_Init+0xec>)
 8001e48:	f004 fdbc 	bl	80069c4 <HAL_TIM_PWM_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001e52:	f7ff fd5d 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e56:	2360      	movs	r3, #96	; 0x60
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e62:	2300      	movs	r3, #0
 8001e64:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e76:	2200      	movs	r2, #0
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4815      	ldr	r0, [pc, #84]	; (8001ed0 <MX_TIM17_Init+0xec>)
 8001e7c:	f004 ff22 	bl	8006cc4 <HAL_TIM_PWM_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001e86:	f7ff fd43 	bl	8001910 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001eac:	463b      	mov	r3, r7
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <MX_TIM17_Init+0xec>)
 8001eb2:	f005 fcd7 	bl	8007864 <HAL_TIMEx_ConfigBreakDeadTime>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001ebc:	f7ff fd28 	bl	8001910 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <MX_TIM17_Init+0xec>)
 8001ec2:	f000 f825 	bl	8001f10 <HAL_TIM_MspPostInit>

}
 8001ec6:	bf00      	nop
 8001ec8:	3750      	adds	r7, #80	; 0x50
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20004e38 	.word	0x20004e38
 8001ed4:	40014800 	.word	0x40014800

08001ed8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee8:	d103      	bne.n	8001ef2 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eea:	2001      	movs	r0, #1
 8001eec:	f7ff fef9 	bl	8001ce2 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001ef0:	e008      	b.n	8001f04 <HAL_TIM_Base_MspInit+0x2c>
  else if(tim_baseHandle->Instance==TIM17)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <HAL_TIM_Base_MspInit+0x34>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d103      	bne.n	8001f04 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001efc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001f00:	f7ff ff08 	bl	8001d14 <LL_APB2_GRP1_EnableClock>
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40014800 	.word	0x40014800

08001f10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM17)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_TIM_MspPostInit+0x54>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d113      	bne.n	8001f5a <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	2002      	movs	r0, #2
 8001f34:	f7ff febc 	bl	8001cb0 <LL_AHB2_GRP1_EnableClock>
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8001f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8001f4a:	230e      	movs	r3, #14
 8001f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	4619      	mov	r1, r3
 8001f54:	4804      	ldr	r0, [pc, #16]	; (8001f68 <HAL_TIM_MspPostInit+0x58>)
 8001f56:	f001 fc9f 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001f5a:	bf00      	nop
 8001f5c:	3720      	adds	r7, #32
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40014800 	.word	0x40014800
 8001f68:	48000400 	.word	0x48000400

08001f6c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001f6c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f70:	3304      	adds	r3, #4

08001f72 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f72:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f74:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001f76:	d3f9      	bcc.n	8001f6c <CopyDataInit>
  bx lr
 8001f78:	4770      	bx	lr

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001f7a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001f7c:	3004      	adds	r0, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001f7e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>
  bx lr
 8001f82:	4770      	bx	lr

08001f84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f84:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001f86:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f88:	f7ff fe3c 	bl	8001c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001f8c:	480b      	ldr	r0, [pc, #44]	; (8001fbc <LoopForever+0x8>)
 8001f8e:	490c      	ldr	r1, [pc, #48]	; (8001fc0 <LoopForever+0xc>)
 8001f90:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <LoopForever+0x10>)
 8001f92:	2300      	movs	r3, #0
 8001f94:	f7ff ffed 	bl	8001f72 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001f98:	480b      	ldr	r0, [pc, #44]	; (8001fc8 <LoopForever+0x14>)
 8001f9a:	490c      	ldr	r1, [pc, #48]	; (8001fcc <LoopForever+0x18>)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f7ff ffee 	bl	8001f7e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001fa2:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <LoopForever+0x1c>)
 8001fa4:	490b      	ldr	r1, [pc, #44]	; (8001fd4 <LoopForever+0x20>)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f7ff ffe9 	bl	8001f7e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fac:	f00f fc80 	bl	80118b0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001fb0:	f7ff fb70 	bl	8001694 <main>

08001fb4 <LoopForever>:

LoopForever:
  b LoopForever
 8001fb4:	e7fe      	b.n	8001fb4 <LoopForever>
 8001fb6:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001fb8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001fbc:	20000004 	.word	0x20000004
 8001fc0:	2000019c 	.word	0x2000019c
 8001fc4:	08011dc4 	.word	0x08011dc4
  INIT_BSS _sbss, _ebss
 8001fc8:	2000024c 	.word	0x2000024c
 8001fcc:	20006694 	.word	0x20006694
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001fd0:	200300e0 	.word	0x200300e0
 8001fd4:	20030b57 	.word	0x20030b57

08001fd8 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fd8:	e7fe      	b.n	8001fd8 <AES1_IRQHandler>
	...

08001fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <HAL_Init+0x3c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <HAL_Init+0x3c>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	f001 fa32 	bl	800345c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7ff fd51 	bl	8001aa0 <HAL_InitTick>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	71fb      	strb	r3, [r7, #7]
 8002008:	e001      	b.n	800200e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800200a:	f7ff fd10 	bl	8001a2e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800200e:	79fb      	ldrb	r3, [r7, #7]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	58004000 	.word	0x58004000

0800201c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	2000000c 	.word	0x2000000c
 8002040:	20004ed0 	.word	0x20004ed0

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20004ed0 	.word	0x20004ed0

0800205c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_GetTickPrio+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000008 	.word	0x20000008

08002074 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	609a      	str	r2, [r3, #8]
#endif
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3360      	adds	r3, #96	; 0x60
 80020ee:	461a      	mov	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <LL_ADC_SetOffset+0x44>)
 80020fe:	4013      	ands	r3, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	4313      	orrs	r3, r2
 800210c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002114:	bf00      	nop
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	03fff000 	.word	0x03fff000

08002124 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3360      	adds	r3, #96	; 0x60
 8002132:	461a      	mov	r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3360      	adds	r3, #96	; 0x60
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	431a      	orrs	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800217a:	bf00      	nop
 800217c:	371c      	adds	r7, #28
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800219e:	2300      	movs	r3, #0
#endif
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3330      	adds	r3, #48	; 0x30
 80021bc:	461a      	mov	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	4413      	add	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	211f      	movs	r1, #31
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	401a      	ands	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	f003 011f 	and.w	r1, r3, #31
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	431a      	orrs	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 80021f8:	bf00      	nop
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0303 	and.w	r3, r3, #3
#endif
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002246:	b480      	push	{r7}
 8002248:	b087      	sub	sp, #28
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	3314      	adds	r3, #20
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	0e5b      	lsrs	r3, r3, #25
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	4413      	add	r3, r2
 8002264:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	0d1b      	lsrs	r3, r3, #20
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2107      	movs	r1, #7
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	0d1b      	lsrs	r3, r3, #20
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	431a      	orrs	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8002290:	bf00      	nop
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b4:	43db      	mvns	r3, r3
 80022b6:	401a      	ands	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0318 	and.w	r3, r3, #24
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022c0:	40d9      	lsrs	r1, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	400b      	ands	r3, r1
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	431a      	orrs	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	0007ffff 	.word	0x0007ffff

080022e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6093      	str	r3, [r2, #8]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800231c:	d101      	bne.n	8002322 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002344:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800236c:	d101      	bne.n	8002372 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <LL_ADC_IsEnabled+0x18>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <LL_ADC_IsEnabled+0x1a>
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d101      	bne.n	80023be <LL_ADC_REG_IsConversionOngoing+0x18>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d101      	bne.n	80023e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e12c      	b.n	800266c <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7fd ff67 	bl	80002f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff65 	bl	8002308 <LL_ADC_IsDeepPowerDownEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff4b 	bl	80022e4 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff80 	bl	8002358 <LL_ADC_IsInternalRegulatorEnabled>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d113      	bne.n	8002486 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff64 	bl	8002330 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002468:	4b82      	ldr	r3, [pc, #520]	; (8002674 <HAL_ADC_Init+0x280>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	4a82      	ldr	r2, [pc, #520]	; (8002678 <HAL_ADC_Init+0x284>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	099b      	lsrs	r3, r3, #6
 8002476:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002478:	e002      	b.n	8002480 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	3b01      	subs	r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f9      	bne.n	800247a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff64 	bl	8002358 <LL_ADC_IsInternalRegulatorEnabled>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10d      	bne.n	80024b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	f043 0210 	orr.w	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	f043 0201 	orr.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff75 	bl	80023a6 <LL_ADC_REG_IsConversionOngoing>
 80024bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 80c7 	bne.w	800265a <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 80c3 	bne.w	800265a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024dc:	f043 0202 	orr.w	r2, r3, #2
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff49 	bl	8002380 <LL_ADC_IsEnabled>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024f4:	4861      	ldr	r0, [pc, #388]	; (800267c <HAL_ADC_Init+0x288>)
 80024f6:	f7ff ff43 	bl	8002380 <LL_ADC_IsEnabled>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4619      	mov	r1, r3
 8002506:	485e      	ldr	r0, [pc, #376]	; (8002680 <HAL_ADC_Init+0x28c>)
 8002508:	f7ff fdb4 	bl	8002074 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7e5b      	ldrb	r3, [r3, #25]
 8002510:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002516:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800251c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002522:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800252a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800252c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d106      	bne.n	800254c <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	3b01      	subs	r3, #1
 8002544:	045b      	lsls	r3, r3, #17
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	4b45      	ldr	r3, [pc, #276]	; (8002684 <HAL_ADC_Init+0x290>)
 8002570:	4013      	ands	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	69b9      	ldr	r1, [r7, #24]
 8002578:	430b      	orrs	r3, r1
 800257a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff10 	bl	80023a6 <LL_ADC_REG_IsConversionOngoing>
 8002586:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff1d 	bl	80023cc <LL_ADC_INJ_IsConversionOngoing>
 8002592:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d13d      	bne.n	8002616 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d13a      	bne.n	8002616 <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025a4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025ac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025bc:	f023 0302 	bic.w	r3, r3, #2
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	69b9      	ldr	r1, [r7, #24]
 80025c6:	430b      	orrs	r3, r1
 80025c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d118      	bne.n	8002606 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025de:	f023 0304 	bic.w	r3, r3, #4
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025ea:	4311      	orrs	r1, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025f0:	4311      	orrs	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025f6:	430a      	orrs	r2, r1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	611a      	str	r2, [r3, #16]
 8002604:	e007      	b.n	8002616 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d10c      	bne.n	8002638 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	f023 010f 	bic.w	r1, r3, #15
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	1e5a      	subs	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
 8002636:	e007      	b.n	8002648 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 020f 	bic.w	r2, r2, #15
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	f023 0303 	bic.w	r3, r3, #3
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	655a      	str	r2, [r3, #84]	; 0x54
 8002658:	e007      	b.n	800266a <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	f043 0210 	orr.w	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800266a:	7ffb      	ldrb	r3, [r7, #31]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000004 	.word	0x20000004
 8002678:	053e2d63 	.word	0x053e2d63
 800267c:	50040000 	.word	0x50040000
 8002680:	50040300 	.word	0x50040300
 8002684:	fff0c007 	.word	0xfff0c007

08002688 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d017      	beq.n	80026de <HAL_ADC_IRQHandler+0x56>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d012      	beq.n	80026de <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fd99 	bl	8003208 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2202      	movs	r2, #2
 80026dc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <HAL_ADC_IRQHandler+0x6a>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d05d      	beq.n	80027b8 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d058      	beq.n	80027b8 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fd2f 	bl	8002186 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d03d      	beq.n	80027aa <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if defined (ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273c:	d035      	beq.n	80027aa <HAL_ADC_IRQHandler+0x122>
#endif
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b08      	cmp	r3, #8
 800274a:	d12e      	bne.n	80027aa <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fe28 	bl	80023a6 <LL_ADC_REG_IsConversionOngoing>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d11a      	bne.n	8002792 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 020c 	bic.w	r2, r2, #12
 800276a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d112      	bne.n	80027aa <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002788:	f043 0201 	orr.w	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	655a      	str	r2, [r3, #84]	; 0x54
 8002790:	e00b      	b.n	80027aa <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002796:	f043 0210 	orr.w	r2, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f922 	bl	80029f4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	220c      	movs	r2, #12
 80027b6:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d004      	beq.n	80027cc <HAL_ADC_IRQHandler+0x144>
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d074      	beq.n	80028c0 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d06f      	beq.n	80028c0 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fd0f 	bl	8002220 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002802:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fcbc 	bl	8002186 <LL_ADC_REG_IsTriggerSourceSWStart>
 800280e:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d049      	beq.n	80028b2 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_ADC_IRQHandler+0x1b0>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d041      	beq.n	80028b2 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002834:	2b00      	cmp	r3, #0
 8002836:	d13c      	bne.n	80028b2 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	2b40      	cmp	r3, #64	; 0x40
 8002844:	d135      	bne.n	80028b2 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d12e      	bne.n	80028b2 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fdb7 	bl	80023cc <LL_ADC_INJ_IsConversionOngoing>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d11a      	bne.n	800289a <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002872:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d112      	bne.n	80028b2 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
 8002898:	e00b      	b.n	80028b2 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f043 0210 	orr.w	r2, r3, #16
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fc80 	bl	80031b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2260      	movs	r2, #96	; 0x60
 80028be:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d011      	beq.n	80028ee <HAL_ADC_IRQHandler+0x266>
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00c      	beq.n	80028ee <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f891 	bl	8002a08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d012      	beq.n	800291e <HAL_ADC_IRQHandler+0x296>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fc66 	bl	80031e0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800291c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002924:	2b00      	cmp	r3, #0
 8002926:	d012      	beq.n	800294e <HAL_ADC_IRQHandler+0x2c6>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00d      	beq.n	800294e <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002936:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fc58 	bl	80031f4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800294c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	d02b      	beq.n	80029b0 <HAL_ADC_IRQHandler+0x328>
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	d026      	beq.n	80029b0 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
 800296e:	e009      	b.n	8002984 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fc45 	bl	8002204 <LL_ADC_REG_GetDMATransfer>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8002980:	2301      	movs	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d10e      	bne.n	80029a8 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299a:	f043 0202 	orr.w	r2, r3, #2
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f83a 	bl	8002a1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2210      	movs	r2, #16
 80029ae:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d018      	beq.n	80029ec <HAL_ADC_IRQHandler+0x364>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	f043 0208 	orr.w	r2, r3, #8
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fbf0 	bl	80031cc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 80029ec:	bf00      	nop
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b0b6      	sub	sp, #216	; 0xd8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x22>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e39e      	b.n	8003190 <HAL_ADC_ConfigChannel+0x760>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fca1 	bl	80023a6 <LL_ADC_REG_IsConversionOngoing>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 8383 	bne.w	8003172 <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f7ff fb97 	bl	80021ac <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fc8f 	bl	80023a6 <LL_ADC_REG_IsConversionOngoing>
 8002a88:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fc9b 	bl	80023cc <LL_ADC_INJ_IsConversionOngoing>
 8002a96:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 81a6 	bne.w	8002df0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f040 81a1 	bne.w	8002df0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6819      	ldr	r1, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f7ff fbc3 	bl	8002246 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	08db      	lsrs	r3, r3, #3
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d00a      	beq.n	8002af8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6919      	ldr	r1, [r3, #16]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002af2:	f7ff faf3 	bl	80020dc <LL_ADC_SetOffset>
 8002af6:	e17b      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fb10 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10a      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0xf4>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fb05 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	0e9b      	lsrs	r3, r3, #26
 8002b1e:	f003 021f 	and.w	r2, r3, #31
 8002b22:	e01e      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x132>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fafa 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8002b42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8002b4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8002b52:	2320      	movs	r3, #32
 8002b54:	e004      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8002b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x14a>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	0e9b      	lsrs	r3, r3, #26
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	e018      	b.n	8002bac <HAL_ADC_ConfigChannel+0x17c>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	e004      	b.n	8002bac <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d106      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fac9 	bl	8002150 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff faad 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x1ba>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2101      	movs	r1, #1
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff faa2 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002be0:	4603      	mov	r3, r0
 8002be2:	0e9b      	lsrs	r3, r3, #26
 8002be4:	f003 021f 	and.w	r2, r3, #31
 8002be8:	e01e      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x1f8>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2101      	movs	r1, #1
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fa97 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	e004      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x210>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	e018      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x242>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002c64:	2320      	movs	r3, #32
 8002c66:	e004      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c6c:	fab3 f383 	clz	r3, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d106      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fa66 	bl	8002150 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2102      	movs	r1, #2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fa4a 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x280>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fa3f 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	0e9b      	lsrs	r3, r3, #26
 8002caa:	f003 021f 	and.w	r2, r3, #31
 8002cae:	e01e      	b.n	8002cee <HAL_ADC_ConfigChannel+0x2be>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fa34 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002cd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002cde:	2320      	movs	r3, #32
 8002ce0:	e004      	b.n	8002cec <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x2d6>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	0e9b      	lsrs	r3, r3, #26
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	e016      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x304>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002d26:	2320      	movs	r3, #32
 8002d28:	e004      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d106      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2102      	movs	r1, #2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fa05 	bl	8002150 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2103      	movs	r1, #3
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff f9e9 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x342>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2103      	movs	r1, #3
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff f9de 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	0e9b      	lsrs	r3, r3, #26
 8002d6c:	f003 021f 	and.w	r2, r3, #31
 8002d70:	e017      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x372>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2103      	movs	r1, #3
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff f9d3 	bl	8002124 <LL_ADC_GetOffsetChannel>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e003      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x38a>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	0e9b      	lsrs	r3, r3, #26
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	e011      	b.n	8002dde <HAL_ADC_ConfigChannel+0x3ae>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	e003      	b.n	8002dde <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d106      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2200      	movs	r2, #0
 8002de8:	2103      	movs	r1, #3
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff f9b0 	bl	8002150 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fac3 	bl	8002380 <LL_ADC_IsEnabled>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 81c1 	bne.w	8003184 <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6819      	ldr	r1, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f7ff fa44 	bl	800229c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a8e      	ldr	r2, [pc, #568]	; (8003054 <HAL_ADC_ConfigChannel+0x624>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	f040 8130 	bne.w	8003080 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10b      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x418>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	3301      	adds	r3, #1
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	2b09      	cmp	r3, #9
 8002e3e:	bf94      	ite	ls
 8002e40:	2301      	movls	r3, #1
 8002e42:	2300      	movhi	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	e019      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x44c>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002e60:	2320      	movs	r3, #32
 8002e62:	e003      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	2b09      	cmp	r3, #9
 8002e74:	bf94      	ite	ls
 8002e76:	2301      	movls	r3, #1
 8002e78:	2300      	movhi	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d079      	beq.n	8002f74 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d107      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x46c>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0e9b      	lsrs	r3, r3, #26
 8002e92:	3301      	adds	r3, #1
 8002e94:	069b      	lsls	r3, r3, #26
 8002e96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e9a:	e015      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x498>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	e003      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	069b      	lsls	r3, r3, #26
 8002ec4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x4b8>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0e9b      	lsrs	r3, r3, #26
 8002eda:	3301      	adds	r3, #1
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	e017      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x4e8>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002f00:	2320      	movs	r3, #32
 8002f02:	e003      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	2101      	movs	r1, #1
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	ea42 0103 	orr.w	r1, r2, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x50e>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	0e9b      	lsrs	r3, r3, #26
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	051b      	lsls	r3, r3, #20
 8002f3c:	e018      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x540>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002f56:	2320      	movs	r3, #32
 8002f58:	e003      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f5c:	fab3 f383 	clz	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	4613      	mov	r3, r2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4413      	add	r3, r2
 8002f6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f70:	430b      	orrs	r3, r1
 8002f72:	e080      	b.n	8003076 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d107      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x560>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0e9b      	lsrs	r3, r3, #26
 8002f86:	3301      	adds	r3, #1
 8002f88:	069b      	lsls	r3, r3, #26
 8002f8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f8e:	e015      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x58c>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002fa8:	2320      	movs	r3, #32
 8002faa:	e003      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	069b      	lsls	r3, r3, #26
 8002fb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x5ac>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	e017      	b.n	800300c <HAL_ADC_ConfigChannel+0x5dc>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	61fb      	str	r3, [r7, #28]
  return result;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002ff4:	2320      	movs	r3, #32
 8002ff6:	e003      	b.n	8003000 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	3301      	adds	r3, #1
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	2101      	movs	r1, #1
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	ea42 0103 	orr.w	r1, r2, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10d      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x608>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	0e9b      	lsrs	r3, r3, #26
 8003022:	3301      	adds	r3, #1
 8003024:	f003 021f 	and.w	r2, r3, #31
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	3b1e      	subs	r3, #30
 8003030:	051b      	lsls	r3, r3, #20
 8003032:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003036:	e01d      	b.n	8003074 <HAL_ADC_ConfigChannel+0x644>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	613b      	str	r3, [r7, #16]
  return result;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d103      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003050:	2320      	movs	r3, #32
 8003052:	e005      	b.n	8003060 <HAL_ADC_ConfigChannel+0x630>
 8003054:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	3301      	adds	r3, #1
 8003062:	f003 021f 	and.w	r2, r3, #31
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	3b1e      	subs	r3, #30
 800306e:	051b      	lsls	r3, r3, #20
 8003070:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003074:	430b      	orrs	r3, r1
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	6892      	ldr	r2, [r2, #8]
 800307a:	4619      	mov	r1, r3
 800307c:	f7ff f8e3 	bl	8002246 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b44      	ldr	r3, [pc, #272]	; (8003198 <HAL_ADC_ConfigChannel+0x768>)
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d07b      	beq.n	8003184 <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800308c:	4843      	ldr	r0, [pc, #268]	; (800319c <HAL_ADC_ConfigChannel+0x76c>)
 800308e:	f7ff f817 	bl	80020c0 <LL_ADC_GetCommonPathInternalCh>
 8003092:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003096:	4842      	ldr	r0, [pc, #264]	; (80031a0 <HAL_ADC_ConfigChannel+0x770>)
 8003098:	f7ff f972 	bl	8002380 <LL_ADC_IsEnabled>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d15d      	bne.n	800315e <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a3f      	ldr	r2, [pc, #252]	; (80031a4 <HAL_ADC_ConfigChannel+0x774>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d126      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x6ca>
 80030ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d120      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a38      	ldr	r2, [pc, #224]	; (80031a0 <HAL_ADC_ConfigChannel+0x770>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d160      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80030c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030ca:	4619      	mov	r1, r3
 80030cc:	4833      	ldr	r0, [pc, #204]	; (800319c <HAL_ADC_ConfigChannel+0x76c>)
 80030ce:	f7fe ffe4 	bl	800209a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80030d2:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <HAL_ADC_ConfigChannel+0x778>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	099b      	lsrs	r3, r3, #6
 80030d8:	4a34      	ldr	r2, [pc, #208]	; (80031ac <HAL_ADC_ConfigChannel+0x77c>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	099a      	lsrs	r2, r3, #6
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80030ea:	e002      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f9      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030f8:	e044      	b.n	8003184 <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <HAL_ADC_ConfigChannel+0x780>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d113      	bne.n	800312c <HAL_ADC_ConfigChannel+0x6fc>
 8003104:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10d      	bne.n	800312c <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <HAL_ADC_ConfigChannel+0x770>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d134      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800311a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800311e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003122:	4619      	mov	r1, r3
 8003124:	481d      	ldr	r0, [pc, #116]	; (800319c <HAL_ADC_ConfigChannel+0x76c>)
 8003126:	f7fe ffb8 	bl	800209a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800312a:	e02b      	b.n	8003184 <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a20      	ldr	r2, [pc, #128]	; (80031b4 <HAL_ADC_ConfigChannel+0x784>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d126      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x754>
 8003136:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800313a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d120      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a16      	ldr	r2, [pc, #88]	; (80031a0 <HAL_ADC_ConfigChannel+0x770>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d11b      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800314c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003150:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003154:	4619      	mov	r1, r3
 8003156:	4811      	ldr	r0, [pc, #68]	; (800319c <HAL_ADC_ConfigChannel+0x76c>)
 8003158:	f7fe ff9f 	bl	800209a <LL_ADC_SetCommonPathInternalCh>
 800315c:	e012      	b.n	8003184 <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003170:	e008      	b.n	8003184 <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	f043 0220 	orr.w	r2, r3, #32
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800318c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003190:	4618      	mov	r0, r3
 8003192:	37d8      	adds	r7, #216	; 0xd8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	80080000 	.word	0x80080000
 800319c:	50040300 	.word	0x50040300
 80031a0:	50040000 	.word	0x50040000
 80031a4:	c7520000 	.word	0xc7520000
 80031a8:	20000004 	.word	0x20000004
 80031ac:	053e2d63 	.word	0x053e2d63
 80031b0:	cb840000 	.word	0xcb840000
 80031b4:	80000001 	.word	0x80000001

080031b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003238:	4013      	ands	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324e:	4a04      	ldr	r2, [pc, #16]	; (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	60d3      	str	r3, [r2, #12]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <__NVIC_GetPriorityGrouping+0x18>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 0307 	and.w	r3, r3, #7
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	2b00      	cmp	r3, #0
 8003290:	db0b      	blt.n	80032aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	f003 021f 	and.w	r2, r3, #31
 8003298:	4907      	ldr	r1, [pc, #28]	; (80032b8 <__NVIC_EnableIRQ+0x38>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2001      	movs	r0, #1
 80032a2:	fa00 f202 	lsl.w	r2, r0, r2
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000e100 	.word	0xe000e100

080032bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	db10      	blt.n	80032f0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	f003 021f 	and.w	r2, r3, #31
 80032d4:	4909      	ldr	r1, [pc, #36]	; (80032fc <__NVIC_DisableIRQ+0x40>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2001      	movs	r0, #1
 80032de:	fa00 f202 	lsl.w	r2, r0, r2
 80032e2:	3320      	adds	r3, #32
 80032e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80032e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032ec:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000e100 	.word	0xe000e100

08003300 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	2b00      	cmp	r3, #0
 8003310:	db0c      	blt.n	800332c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	4907      	ldr	r1, [pc, #28]	; (8003338 <__NVIC_SetPendingIRQ+0x38>)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2001      	movs	r0, #1
 8003322:	fa00 f202 	lsl.w	r2, r0, r2
 8003326:	3340      	adds	r3, #64	; 0x40
 8003328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000e100 	.word	0xe000e100

0800333c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	2b00      	cmp	r3, #0
 800334c:	db0c      	blt.n	8003368 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	f003 021f 	and.w	r2, r3, #31
 8003354:	4907      	ldr	r1, [pc, #28]	; (8003374 <__NVIC_ClearPendingIRQ+0x38>)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2001      	movs	r0, #1
 800335e:	fa00 f202 	lsl.w	r2, r0, r2
 8003362:	3360      	adds	r3, #96	; 0x60
 8003364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000e100 	.word	0xe000e100

08003378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003388:	2b00      	cmp	r3, #0
 800338a:	db0a      	blt.n	80033a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	490c      	ldr	r1, [pc, #48]	; (80033c4 <__NVIC_SetPriority+0x4c>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	0112      	lsls	r2, r2, #4
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	440b      	add	r3, r1
 800339c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a0:	e00a      	b.n	80033b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4908      	ldr	r1, [pc, #32]	; (80033c8 <__NVIC_SetPriority+0x50>)
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	3b04      	subs	r3, #4
 80033b0:	0112      	lsls	r2, r2, #4
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	440b      	add	r3, r1
 80033b6:	761a      	strb	r2, [r3, #24]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000e100 	.word	0xe000e100
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f1c3 0307 	rsb	r3, r3, #7
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	bf28      	it	cs
 80033ea:	2304      	movcs	r3, #4
 80033ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3304      	adds	r3, #4
 80033f2:	2b06      	cmp	r3, #6
 80033f4:	d902      	bls.n	80033fc <NVIC_EncodePriority+0x30>
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3b03      	subs	r3, #3
 80033fa:	e000      	b.n	80033fe <NVIC_EncodePriority+0x32>
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	f04f 32ff 	mov.w	r2, #4294967295
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	401a      	ands	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003414:	f04f 31ff 	mov.w	r1, #4294967295
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	43d9      	mvns	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	4313      	orrs	r3, r2
         );
}
 8003426:	4618      	mov	r0, r3
 8003428:	3724      	adds	r7, #36	; 0x24
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003438:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <__NVIC_SystemReset+0x20>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003444:	4903      	ldr	r1, [pc, #12]	; (8003454 <__NVIC_SystemReset+0x20>)
 8003446:	4b04      	ldr	r3, [pc, #16]	; (8003458 <__NVIC_SystemReset+0x24>)
 8003448:	4313      	orrs	r3, r2
 800344a:	60cb      	str	r3, [r1, #12]
 800344c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <__NVIC_SystemReset+0x1c>
 8003454:	e000ed00 	.word	0xe000ed00
 8003458:	05fa0004 	.word	0x05fa0004

0800345c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff fed9 	bl	800321c <__NVIC_SetPriorityGrouping>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	4603      	mov	r3, r0
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003480:	f7ff fef0 	bl	8003264 <__NVIC_GetPriorityGrouping>
 8003484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f7ff ff9e 	bl	80033cc <NVIC_EncodePriority>
 8003490:	4602      	mov	r2, r0
 8003492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff6d 	bl	8003378 <__NVIC_SetPriority>
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	4603      	mov	r3, r0
 80034ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fee3 	bl	8003280 <__NVIC_EnableIRQ>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fef3 	bl	80032bc <__NVIC_DisableIRQ>
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80034e2:	f7ff ffa7 	bl	8003434 <__NVIC_SystemReset>

080034e6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff03 	bl	8003300 <__NVIC_SetPendingIRQ>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff13 	bl	800333c <__NVIC_ClearPendingIRQ>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e08e      	b.n	8003650 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	4b47      	ldr	r3, [pc, #284]	; (8003658 <HAL_DMA_Init+0x138>)
 800353a:	429a      	cmp	r2, r3
 800353c:	d80f      	bhi.n	800355e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	4b45      	ldr	r3, [pc, #276]	; (800365c <HAL_DMA_Init+0x13c>)
 8003546:	4413      	add	r3, r2
 8003548:	4a45      	ldr	r2, [pc, #276]	; (8003660 <HAL_DMA_Init+0x140>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	009a      	lsls	r2, r3, #2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a42      	ldr	r2, [pc, #264]	; (8003664 <HAL_DMA_Init+0x144>)
 800355a:	641a      	str	r2, [r3, #64]	; 0x40
 800355c:	e00e      	b.n	800357c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	4b40      	ldr	r3, [pc, #256]	; (8003668 <HAL_DMA_Init+0x148>)
 8003566:	4413      	add	r3, r2
 8003568:	4a3d      	ldr	r2, [pc, #244]	; (8003660 <HAL_DMA_Init+0x140>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	009a      	lsls	r2, r3, #2
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a3c      	ldr	r2, [pc, #240]	; (800366c <HAL_DMA_Init+0x14c>)
 800357a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8fe 	bl	80037d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035dc:	d102      	bne.n	80035e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80035f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d010      	beq.n	8003626 <HAL_DMA_Init+0x106>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d80c      	bhi.n	8003626 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f91d 	bl	800384c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	e008      	b.n	8003638 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40020407 	.word	0x40020407
 800365c:	bffdfff8 	.word	0xbffdfff8
 8003660:	cccccccd 	.word	0xcccccccd
 8003664:	40020000 	.word	0x40020000
 8003668:	bffdfbf8 	.word	0xbffdfbf8
 800366c:	40020400 	.word	0x40020400

08003670 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	f003 031c 	and.w	r3, r3, #28
 8003690:	2204      	movs	r2, #4
 8003692:	409a      	lsls	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d026      	beq.n	80036ea <HAL_DMA_IRQHandler+0x7a>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d021      	beq.n	80036ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d107      	bne.n	80036c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0204 	bic.w	r2, r2, #4
 80036c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	f003 021c 	and.w	r2, r3, #28
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	2104      	movs	r1, #4
 80036d2:	fa01 f202 	lsl.w	r2, r1, r2
 80036d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d071      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036e8:	e06c      	b.n	80037c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	f003 031c 	and.w	r3, r3, #28
 80036f2:	2202      	movs	r2, #2
 80036f4:	409a      	lsls	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d02e      	beq.n	800375c <HAL_DMA_IRQHandler+0xec>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d029      	beq.n	800375c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 020a 	bic.w	r2, r2, #10
 8003724:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f003 021c 	and.w	r2, r3, #28
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2102      	movs	r1, #2
 800373c:	fa01 f202 	lsl.w	r2, r1, r2
 8003740:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d038      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800375a:	e033      	b.n	80037c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	f003 031c 	and.w	r3, r3, #28
 8003764:	2208      	movs	r2, #8
 8003766:	409a      	lsls	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02a      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x156>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d025      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 020e 	bic.w	r2, r2, #14
 8003788:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f003 021c 	and.w	r2, r3, #28
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2101      	movs	r1, #1
 8003798:	fa01 f202 	lsl.w	r2, r1, r2
 800379c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
}
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	4b17      	ldr	r3, [pc, #92]	; (800383c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d80a      	bhi.n	80037fa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037f0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6493      	str	r3, [r2, #72]	; 0x48
 80037f8:	e007      	b.n	800380a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	089b      	lsrs	r3, r3, #2
 8003800:	009a      	lsls	r2, r3, #2
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003804:	4413      	add	r3, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3b08      	subs	r3, #8
 8003812:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003820:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2201      	movs	r2, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40020407 	.word	0x40020407
 8003840:	4002081c 	.word	0x4002081c
 8003844:	cccccccd 	.word	0xcccccccd
 8003848:	40020880 	.word	0x40020880

0800384c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800385c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	461a      	mov	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a09      	ldr	r2, [pc, #36]	; (8003894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003870:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3b01      	subs	r3, #1
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2201      	movs	r2, #1
 800387c:	409a      	lsls	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	1000823f 	.word	0x1000823f
 8003894:	40020940 	.word	0x40020940

08003898 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a6:	e14c      	b.n	8003b42 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	2101      	movs	r1, #1
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	4013      	ands	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 813e 	beq.w	8003b3c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d00b      	beq.n	80038e0 <HAL_GPIO_Init+0x48>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d007      	beq.n	80038e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038d4:	2b11      	cmp	r3, #17
 80038d6:	d003      	beq.n	80038e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b12      	cmp	r3, #18
 80038de:	d130      	bne.n	8003942 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2203      	movs	r2, #3
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003916:	2201      	movs	r2, #1
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43db      	mvns	r3, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4013      	ands	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f003 0201 	and.w	r2, r3, #1
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	2203      	movs	r2, #3
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4013      	ands	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_Init+0xea>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b12      	cmp	r3, #18
 8003980:	d123      	bne.n	80039ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	08da      	lsrs	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3208      	adds	r2, #8
 800398a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	220f      	movs	r2, #15
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	08da      	lsrs	r2, r3, #3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3208      	adds	r2, #8
 80039c4:	6939      	ldr	r1, [r7, #16]
 80039c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	2203      	movs	r2, #3
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 0203 	and.w	r2, r3, #3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8098 	beq.w	8003b3c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003a0c:	4a54      	ldr	r2, [pc, #336]	; (8003b60 <HAL_GPIO_Init+0x2c8>)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	3302      	adds	r3, #2
 8003a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	220f      	movs	r2, #15
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a36:	d019      	beq.n	8003a6c <HAL_GPIO_Init+0x1d4>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a4a      	ldr	r2, [pc, #296]	; (8003b64 <HAL_GPIO_Init+0x2cc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d013      	beq.n	8003a68 <HAL_GPIO_Init+0x1d0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a49      	ldr	r2, [pc, #292]	; (8003b68 <HAL_GPIO_Init+0x2d0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00d      	beq.n	8003a64 <HAL_GPIO_Init+0x1cc>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a48      	ldr	r2, [pc, #288]	; (8003b6c <HAL_GPIO_Init+0x2d4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <HAL_GPIO_Init+0x1c8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a47      	ldr	r2, [pc, #284]	; (8003b70 <HAL_GPIO_Init+0x2d8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d101      	bne.n	8003a5c <HAL_GPIO_Init+0x1c4>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	e008      	b.n	8003a6e <HAL_GPIO_Init+0x1d6>
 8003a5c:	2307      	movs	r3, #7
 8003a5e:	e006      	b.n	8003a6e <HAL_GPIO_Init+0x1d6>
 8003a60:	2303      	movs	r3, #3
 8003a62:	e004      	b.n	8003a6e <HAL_GPIO_Init+0x1d6>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e002      	b.n	8003a6e <HAL_GPIO_Init+0x1d6>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <HAL_GPIO_Init+0x1d6>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	f002 0203 	and.w	r2, r2, #3
 8003a74:	0092      	lsls	r2, r2, #2
 8003a76:	4093      	lsls	r3, r2
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a7e:	4938      	ldr	r1, [pc, #224]	; (8003b60 <HAL_GPIO_Init+0x2c8>)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	089b      	lsrs	r3, r3, #2
 8003a84:	3302      	adds	r3, #2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a8c:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <HAL_GPIO_Init+0x2dc>)
 8003a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	43db      	mvns	r3, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ab2:	4a30      	ldr	r2, [pc, #192]	; (8003b74 <HAL_GPIO_Init+0x2dc>)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003aba:	4b2e      	ldr	r3, [pc, #184]	; (8003b74 <HAL_GPIO_Init+0x2dc>)
 8003abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ae0:	4a24      	ldr	r2, [pc, #144]	; (8003b74 <HAL_GPIO_Init+0x2dc>)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ae8:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <HAL_GPIO_Init+0x2dc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b0c:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <HAL_GPIO_Init+0x2dc>)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b12:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <HAL_GPIO_Init+0x2dc>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b36:	4a0f      	ldr	r2, [pc, #60]	; (8003b74 <HAL_GPIO_Init+0x2dc>)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f47f aeab 	bne.w	80038a8 <HAL_GPIO_Init+0x10>
  }
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40010000 	.word	0x40010000
 8003b64:	48000400 	.word	0x48000400
 8003b68:	48000800 	.word	0x48000800
 8003b6c:	48000c00 	.word	0x48000c00
 8003b70:	48001000 	.word	0x48001000
 8003b74:	58000800 	.word	0x58000800

08003b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
 8003b84:	4613      	mov	r3, r2
 8003b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b88:	787b      	ldrb	r3, [r7, #1]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_HSEM_IRQHandler+0x30>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <HAL_HSEM_IRQHandler+0x30>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	4906      	ldr	r1, [pc, #24]	; (8003bd8 <HAL_HSEM_IRQHandler+0x30>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003bc2:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <HAL_HSEM_IRQHandler+0x30>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f807 	bl	8003bdc <HAL_HSEM_FreeCallback>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	58001500 	.word	0x58001500

08003bdc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf2:	b08b      	sub	sp, #44	; 0x2c
 8003bf4:	af06      	add	r7, sp, #24
 8003bf6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0ad      	b.n	8003d5e <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f00d fb12 	bl	8011240 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2203      	movs	r2, #3
 8003c20:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f003 fee2 	bl	80079f2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
 8003c32:	e035      	b.n	8003ca0 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	015b      	lsls	r3, r3, #5
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3329      	adds	r3, #41	; 0x29
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	015b      	lsls	r3, r3, #5
 8003c48:	4413      	add	r3, r2
 8003c4a:	3328      	adds	r3, #40	; 0x28
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	b291      	uxth	r1, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	015b      	lsls	r3, r3, #5
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3336      	adds	r3, #54	; 0x36
 8003c5e:	460a      	mov	r2, r1
 8003c60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	015b      	lsls	r3, r3, #5
 8003c68:	4413      	add	r3, r2
 8003c6a:	332b      	adds	r3, #43	; 0x2b
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	015b      	lsls	r3, r3, #5
 8003c76:	4413      	add	r3, r2
 8003c78:	3338      	adds	r3, #56	; 0x38
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	015b      	lsls	r3, r3, #5
 8003c84:	4413      	add	r3, r2
 8003c86:	333c      	adds	r3, #60	; 0x3c
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	3302      	adds	r3, #2
 8003c92:	015b      	lsls	r3, r3, #5
 8003c94:	4413      	add	r3, r2
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d3c4      	bcc.n	8003c34 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
 8003cae:	e031      	b.n	8003d14 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	015b      	lsls	r3, r3, #5
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	015b      	lsls	r3, r3, #5
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ccc:	7bfa      	ldrb	r2, [r7, #15]
 8003cce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	015b      	lsls	r3, r3, #5
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	015b      	lsls	r3, r3, #5
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	015b      	lsls	r3, r3, #5
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	330a      	adds	r3, #10
 8003d06:	015b      	lsls	r3, r3, #5
 8003d08:	4413      	add	r3, r2
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	3301      	adds	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
 8003d14:	7bfa      	ldrb	r2, [r7, #15]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d3c8      	bcc.n	8003cb0 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	687e      	ldr	r6, [r7, #4]
 8003d26:	466d      	mov	r5, sp
 8003d28:	f106 0410 	add.w	r4, r6, #16
 8003d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	602b      	str	r3, [r5, #0]
 8003d34:	1d33      	adds	r3, r6, #4
 8003d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d38:	6838      	ldr	r0, [r7, #0]
 8003d3a:	f003 fe75 	bl	8007a28 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d102      	bne.n	8003d5c <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fe59 	bl	8004a0e <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_PCD_Start+0x16>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e012      	b.n	8003da2 <HAL_PCD_Start+0x3c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f005 f845 	bl	8008e18 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 fe14 	bl	80079c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f005 f845 	bl	8008e46 <USB_ReadInterrupts>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc6:	d102      	bne.n	8003dce <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fb33 	bl	8004434 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f005 f837 	bl	8008e46 <USB_ReadInterrupts>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de2:	d112      	bne.n	8003e0a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df6:	b292      	uxth	r2, r2
 8003df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f00d faa6 	bl	801134e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003e02:	2100      	movs	r1, #0
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f91e 	bl	8004046 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f005 f819 	bl	8008e46 <USB_ReadInterrupts>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1e:	d10b      	bne.n	8003e38 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e32:	b292      	uxth	r2, r2
 8003e34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f005 f802 	bl	8008e46 <USB_ReadInterrupts>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4c:	d10b      	bne.n	8003e66 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e60:	b292      	uxth	r2, r2
 8003e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f004 ffeb 	bl	8008e46 <USB_ReadInterrupts>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7a:	d133      	bne.n	8003ee4 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0204 	bic.w	r2, r2, #4
 8003e8e:	b292      	uxth	r2, r2
 8003e90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0208 	bic.w	r2, r2, #8
 8003ea6:	b292      	uxth	r2, r2
 8003ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d107      	bne.n	8003ec6 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f00d fc33 	bl	801172c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f00d fa7a 	bl	80113c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ede:	b292      	uxth	r2, r2
 8003ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f004 ffac 	bl	8008e46 <USB_ReadInterrupts>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef8:	d126      	bne.n	8003f48 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0208 	orr.w	r2, r2, #8
 8003f0c:	b292      	uxth	r2, r2
 8003f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f24:	b292      	uxth	r2, r2
 8003f26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0204 	orr.w	r2, r2, #4
 8003f3c:	b292      	uxth	r2, r2
 8003f3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f00d fa22 	bl	801138c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f004 ff7a 	bl	8008e46 <USB_ReadInterrupts>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f58:	2b80      	cmp	r3, #128	; 0x80
 8003f5a:	d13f      	bne.n	8003fdc <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f6e:	b292      	uxth	r2, r2
 8003f70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d12b      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0204 	orr.w	r2, r2, #4
 8003f90:	b292      	uxth	r2, r2
 8003f92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0208 	orr.w	r2, r2, #8
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	089b      	lsrs	r3, r3, #2
 8003fc2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003fcc:	2101      	movs	r1, #1
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f00d fbac 	bl	801172c <HAL_PCDEx_LPM_Callback>
 8003fd4:	e002      	b.n	8003fdc <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f00d f9d8 	bl	801138c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f004 ff30 	bl	8008e46 <USB_ReadInterrupts>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff0:	d10e      	bne.n	8004010 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004004:	b292      	uxth	r2, r2
 8004006:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f00d f991 	bl	8011332 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f004 ff16 	bl	8008e46 <USB_ReadInterrupts>
 800401a:	4603      	mov	r3, r0
 800401c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004024:	d10b      	bne.n	800403e <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800402e:	b29a      	uxth	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004038:	b292      	uxth	r2, r2
 800403a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_PCD_SetAddress+0x1a>
 800405c:	2302      	movs	r3, #2
 800405e:	e013      	b.n	8004088 <HAL_PCD_SetAddress+0x42>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f004 feb9 	bl	8008df0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	4608      	mov	r0, r1
 800409a:	4611      	mov	r1, r2
 800409c:	461a      	mov	r2, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	70fb      	strb	r3, [r7, #3]
 80040a2:	460b      	mov	r3, r1
 80040a4:	803b      	strh	r3, [r7, #0]
 80040a6:	4613      	mov	r3, r2
 80040a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	da0b      	bge.n	80040ce <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	015b      	lsls	r3, r3, #5
 80040be:	3328      	adds	r3, #40	; 0x28
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4413      	add	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	705a      	strb	r2, [r3, #1]
 80040cc:	e00b      	b.n	80040e6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	015b      	lsls	r3, r3, #5
 80040d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040f2:	883a      	ldrh	r2, [r7, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	78ba      	ldrb	r2, [r7, #2]
 80040fc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	785b      	ldrb	r3, [r3, #1]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d004      	beq.n	8004110 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004110:	78bb      	ldrb	r3, [r7, #2]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d102      	bne.n	800411c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_PCD_EP_Open+0x9a>
 8004126:	2302      	movs	r3, #2
 8004128:	e00e      	b.n	8004148 <HAL_PCD_EP_Open+0xb8>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	4618      	mov	r0, r3
 800413a:	f003 fc99 	bl	8007a70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8004146:	7afb      	ldrb	r3, [r7, #11]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800415c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004160:	2b00      	cmp	r3, #0
 8004162:	da0b      	bge.n	800417c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	015b      	lsls	r3, r3, #5
 800416c:	3328      	adds	r3, #40	; 0x28
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	705a      	strb	r2, [r3, #1]
 800417a:	e00b      	b.n	8004194 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	015b      	lsls	r3, r3, #5
 8004184:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4413      	add	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	b2da      	uxtb	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_PCD_EP_Close+0x5e>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e00e      	b.n	80041cc <HAL_PCD_EP_Close+0x7c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	4618      	mov	r0, r3
 80041be:	f004 f805 	bl	80081cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	460b      	mov	r3, r1
 80041e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e4:	7afb      	ldrb	r3, [r7, #11]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	015b      	lsls	r3, r3, #5
 80041ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2200      	movs	r2, #0
 8004206:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800420e:	7afb      	ldrb	r3, [r7, #11]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	b2da      	uxtb	r2, r3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800421a:	7afb      	ldrb	r3, [r7, #11]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6979      	ldr	r1, [r7, #20]
 800422a:	4618      	mov	r0, r3
 800422c:	f004 f9bb 	bl	80085a6 <USB_EPStartXfer>
 8004230:	e005      	b.n	800423e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6979      	ldr	r1, [r7, #20]
 8004238:	4618      	mov	r0, r3
 800423a:	f004 f9b4 	bl	80085a6 <USB_EPStartXfer>
  }

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	330a      	adds	r3, #10
 800425e:	015b      	lsls	r3, r3, #5
 8004260:	4413      	add	r3, r2
 8004262:	3304      	adds	r3, #4
 8004264:	681b      	ldr	r3, [r3, #0]
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b086      	sub	sp, #24
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	460b      	mov	r3, r1
 8004280:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004282:	7afb      	ldrb	r3, [r7, #11]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	015b      	lsls	r3, r3, #5
 800428a:	3328      	adds	r3, #40	; 0x28
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2200      	movs	r2, #0
 80042a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2201      	movs	r2, #1
 80042a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042aa:	7afb      	ldrb	r3, [r7, #11]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042b6:	7afb      	ldrb	r3, [r7, #11]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d106      	bne.n	80042ce <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6979      	ldr	r1, [r7, #20]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f004 f96d 	bl	80085a6 <USB_EPStartXfer>
 80042cc:	e005      	b.n	80042da <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6979      	ldr	r1, [r7, #20]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f004 f966 	bl	80085a6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	f003 0207 	and.w	r2, r3, #7
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d901      	bls.n	8004302 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e046      	b.n	8004390 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004306:	2b00      	cmp	r3, #0
 8004308:	da0b      	bge.n	8004322 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	015b      	lsls	r3, r3, #5
 8004312:	3328      	adds	r3, #40	; 0x28
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	4413      	add	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	705a      	strb	r2, [r3, #1]
 8004320:	e009      	b.n	8004336 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	015b      	lsls	r3, r3, #5
 8004326:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4413      	add	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_PCD_EP_SetStall+0x72>
 8004352:	2302      	movs	r3, #2
 8004354:	e01c      	b.n	8004390 <HAL_PCD_EP_SetStall+0xac>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68f9      	ldr	r1, [r7, #12]
 8004364:	4618      	mov	r0, r3
 8004366:	f004 fc44 	bl	8008bf2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	2b00      	cmp	r3, #0
 8004372:	d108      	bne.n	8004386 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f004 fd70 	bl	8008e66 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	f003 020f 	and.w	r2, r3, #15
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d901      	bls.n	80043b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e03a      	b.n	800442c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da0b      	bge.n	80043d6 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	015b      	lsls	r3, r3, #5
 80043c6:	3328      	adds	r3, #40	; 0x28
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	705a      	strb	r2, [r3, #1]
 80043d4:	e00b      	b.n	80043ee <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	015b      	lsls	r3, r3, #5
 80043de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	4413      	add	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_PCD_EP_ClrStall+0x76>
 800440a:	2302      	movs	r3, #2
 800440c:	e00e      	b.n	800442c <HAL_PCD_EP_ClrStall+0x94>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68f9      	ldr	r1, [r7, #12]
 800441c:	4618      	mov	r0, r3
 800441e:	f004 fc39 	bl	8008c94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08e      	sub	sp, #56	; 0x38
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800443c:	e29c      	b.n	8004978 <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004446:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004448:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004454:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004458:	2b00      	cmp	r3, #0
 800445a:	f040 8152 	bne.w	8004702 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800445e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	d150      	bne.n	800450a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	81fb      	strh	r3, [r7, #14]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	89fb      	ldrh	r3, [r7, #14]
 8004480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004488:	b29b      	uxth	r3, r3
 800448a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3328      	adds	r3, #40	; 0x28
 8004490:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800449a:	b29b      	uxth	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	4413      	add	r3, r2
 80044ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	441a      	add	r2, r3
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80044c8:	2100      	movs	r1, #0
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f00c ff1a 	bl	8011304 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 824d 	beq.w	8004978 <PCD_EP_ISR_Handler+0x544>
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 8248 	bne.w	8004978 <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	b292      	uxth	r2, r2
 80044fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004508:	e236      	b.n	8004978 <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800451a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800451c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004520:	2b00      	cmp	r3, #0
 8004522:	d032      	beq.n	800458a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452c:	b29b      	uxth	r3, r3
 800452e:	461a      	mov	r2, r3
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4413      	add	r3, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	4413      	add	r3, r2
 800453e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800455e:	b29b      	uxth	r3, r3
 8004560:	f004 fcce 	bl	8008f00 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29a      	uxth	r2, r3
 800456c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004570:	4013      	ands	r3, r2
 8004572:	823b      	strh	r3, [r7, #16]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	8a3a      	ldrh	r2, [r7, #16]
 800457a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800457e:	b292      	uxth	r2, r2
 8004580:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f00c fe94 	bl	80112b0 <HAL_PCD_SetupStageCallback>
 8004588:	e1f6      	b.n	8004978 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800458a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800458e:	2b00      	cmp	r3, #0
 8004590:	f280 81f2 	bge.w	8004978 <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29a      	uxth	r2, r3
 800459c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80045a0:	4013      	ands	r3, r2
 80045a2:	83fb      	strh	r3, [r7, #30]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	8bfa      	ldrh	r2, [r7, #30]
 80045aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045ae:	b292      	uxth	r2, r2
 80045b0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4413      	add	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	4413      	add	r3, r2
 80045cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d019      	beq.n	8004616 <PCD_EP_ISR_Handler+0x1e2>
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d015      	beq.n	8004616 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	6959      	ldr	r1, [r3, #20]
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f004 fc80 	bl	8008f00 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	441a      	add	r2, r3
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800460e:	2100      	movs	r1, #0
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f00c fe5f 	bl	80112d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004624:	b29b      	uxth	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	4413      	add	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d112      	bne.n	8004664 <PCD_EP_ISR_Handler+0x230>
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004648:	b29a      	uxth	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	801a      	strh	r2, [r3, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465c:	b29a      	uxth	r2, r3
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	e02f      	b.n	80046c4 <PCD_EP_ISR_Handler+0x290>
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2b3e      	cmp	r3, #62	; 0x3e
 800466a:	d813      	bhi.n	8004694 <PCD_EP_ISR_Handler+0x260>
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	633b      	str	r3, [r7, #48]	; 0x30
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <PCD_EP_ISR_Handler+0x252>
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	3301      	adds	r3, #1
 8004684:	633b      	str	r3, [r7, #48]	; 0x30
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	b29b      	uxth	r3, r3
 800468a:	029b      	lsls	r3, r3, #10
 800468c:	b29a      	uxth	r2, r3
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	801a      	strh	r2, [r3, #0]
 8004692:	e017      	b.n	80046c4 <PCD_EP_ISR_Handler+0x290>
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	633b      	str	r3, [r7, #48]	; 0x30
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d102      	bne.n	80046ae <PCD_EP_ISR_Handler+0x27a>
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	3b01      	subs	r3, #1
 80046ac:	633b      	str	r3, [r7, #48]	; 0x30
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	029b      	lsls	r3, r3, #10
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046be:	b29a      	uxth	r2, r3
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d4:	827b      	strh	r3, [r7, #18]
 80046d6:	8a7b      	ldrh	r3, [r7, #18]
 80046d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046dc:	827b      	strh	r3, [r7, #18]
 80046de:	8a7b      	ldrh	r3, [r7, #18]
 80046e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046e4:	827b      	strh	r3, [r7, #18]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	8a7b      	ldrh	r3, [r7, #18]
 80046ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	8013      	strh	r3, [r2, #0]
 8004700:	e13a      	b.n	8004978 <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004714:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004718:	2b00      	cmp	r3, #0
 800471a:	f280 80d6 	bge.w	80048ca <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	b29a      	uxth	r2, r3
 8004730:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004734:	4013      	ands	r3, r2
 8004736:	853b      	strh	r3, [r7, #40]	; 0x28
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004748:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800474c:	b292      	uxth	r2, r2
 800474e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004750:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004754:	015b      	lsls	r3, r3, #5
 8004756:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	7b1b      	ldrb	r3, [r3, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d11f      	bne.n	80047a8 <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004770:	b29b      	uxth	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4413      	add	r3, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	4413      	add	r3, r2
 8004782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800478c:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 800478e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004790:	2b00      	cmp	r3, #0
 8004792:	d075      	beq.n	8004880 <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	6959      	ldr	r1, [r3, #20]
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	88da      	ldrh	r2, [r3, #6]
 80047a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047a2:	f004 fbad 	bl	8008f00 <USB_ReadPMA>
 80047a6:	e06b      	b.n	8004880 <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01f      	beq.n	8004842 <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480a:	b29b      	uxth	r3, r3
 800480c:	461a      	mov	r2, r3
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	4413      	add	r3, r2
 800481c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004826:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8004828:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800482a:	2b00      	cmp	r3, #0
 800482c:	d028      	beq.n	8004880 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	6959      	ldr	r1, [r3, #20]
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	891a      	ldrh	r2, [r3, #8]
 800483a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800483c:	f004 fb60 	bl	8008f00 <USB_ReadPMA>
 8004840:	e01e      	b.n	8004880 <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484a:	b29b      	uxth	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4413      	add	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	4413      	add	r3, r2
 800485c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004866:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8004868:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800486a:	2b00      	cmp	r3, #0
 800486c:	d008      	beq.n	8004880 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	6959      	ldr	r1, [r3, #20]
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	895a      	ldrh	r2, [r3, #10]
 800487a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800487c:	f004 fb40 	bl	8008f00 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004886:	441a      	add	r2, r3
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	695a      	ldr	r2, [r3, #20]
 8004890:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004892:	441a      	add	r2, r3
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <PCD_EP_ISR_Handler+0x476>
 80048a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d206      	bcs.n	80048b8 <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	4619      	mov	r1, r3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f00c fd0f 	bl	80112d4 <HAL_PCD_DataOutStageCallback>
 80048b6:	e008      	b.n	80048ca <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	7819      	ldrb	r1, [r3, #0]
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fc85 	bl	80041d4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80048ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80048cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d051      	beq.n	8004978 <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 80048d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048d8:	015b      	lsls	r3, r3, #5
 80048da:	3328      	adds	r3, #40	; 0x28
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	4413      	add	r3, r2
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80048f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fc:	843b      	strh	r3, [r7, #32]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	441a      	add	r2, r3
 800490c:	8c3b      	ldrh	r3, [r7, #32]
 800490e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004916:	b29b      	uxth	r3, r3
 8004918:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004922:	b29b      	uxth	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	4413      	add	r3, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	4413      	add	r3, r2
 8004934:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	695a      	ldr	r2, [r3, #20]
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	441a      	add	r2, r3
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d106      	bne.n	8004966 <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f00c fcd0 	bl	8011304 <HAL_PCD_DataInStageCallback>
 8004964:	e008      	b.n	8004978 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	7819      	ldrb	r1, [r3, #0]
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	695a      	ldr	r2, [r3, #20]
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff fc7d 	bl	8004272 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004980:	b29b      	uxth	r3, r3
 8004982:	b21b      	sxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	f6ff ad5a 	blt.w	800443e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3738      	adds	r7, #56	; 0x38
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	460b      	mov	r3, r1
 80049a0:	817b      	strh	r3, [r7, #10]
 80049a2:	4613      	mov	r3, r2
 80049a4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80049a6:	897b      	ldrh	r3, [r7, #10]
 80049a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049b2:	897b      	ldrh	r3, [r7, #10]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	015b      	lsls	r3, r3, #5
 80049ba:	3328      	adds	r3, #40	; 0x28
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e006      	b.n	80049d2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049c4:	897b      	ldrh	r3, [r7, #10]
 80049c6:	015b      	lsls	r3, r3, #5
 80049c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80049d2:	893b      	ldrh	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d107      	bne.n	80049e8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2200      	movs	r2, #0
 80049dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	80da      	strh	r2, [r3, #6]
 80049e6:	e00b      	b.n	8004a00 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2201      	movs	r2, #1
 80049ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f043 0302 	orr.w	r3, r3, #2
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a04      	ldr	r2, [pc, #16]	; (8004a80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a72:	6013      	str	r3, [r2, #0]
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	58000400 	.word	0x58000400

08004a84 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a88:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <HAL_PWREx_GetVoltageRange+0x18>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	58000400 	.word	0x58000400

08004aa0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4a04      	ldr	r2, [pc, #16]	; (8004abc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aae:	6053      	str	r3, [r2, #4]
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	58000400 	.word	0x58000400

08004ac0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad2:	d101      	bne.n	8004ad8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <LL_RCC_HSE_Enable>:
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af6:	6013      	str	r3, [r2, #0]
}
 8004af8:	bf00      	nop
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <LL_RCC_HSE_Disable>:
{
 8004b02:	b480      	push	{r7}
 8004b04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
}
 8004b16:	bf00      	nop
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <LL_RCC_HSE_IsReady>:
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b32:	d101      	bne.n	8004b38 <LL_RCC_HSE_IsReady+0x18>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <LL_RCC_HSE_IsReady+0x1a>
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <LL_RCC_HSI_Enable>:
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b56:	6013      	str	r3, [r2, #0]
}
 8004b58:	bf00      	nop
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <LL_RCC_HSI_Disable>:
{
 8004b62:	b480      	push	{r7}
 8004b64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b74:	6013      	str	r3, [r2, #0]
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <LL_RCC_HSI_IsReady>:
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b92:	d101      	bne.n	8004b98 <LL_RCC_HSI_IsReady+0x18>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <LL_RCC_HSI_IsReady+0x1a>
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	061b      	lsls	r3, r3, #24
 8004bba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	604b      	str	r3, [r1, #4]
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <LL_RCC_HSI48_Enable>:
{
 8004bce:	b480      	push	{r7}
 8004bd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004be6:	bf00      	nop
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <LL_RCC_HSI48_Disable>:
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c00:	f023 0301 	bic.w	r3, r3, #1
 8004c04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004c08:	bf00      	nop
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <LL_RCC_HSI48_IsReady>:
{
 8004c12:	b480      	push	{r7}
 8004c14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d101      	bne.n	8004c2a <LL_RCC_HSI48_IsReady+0x18>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <LL_RCC_HSI48_IsReady+0x1a>
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <LL_RCC_LSE_Enable>:
{
 8004c36:	b480      	push	{r7}
 8004c38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c4e:	bf00      	nop
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <LL_RCC_LSE_Disable>:
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c70:	bf00      	nop
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <LL_RCC_LSE_EnableBypass>:
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c8a:	f043 0304 	orr.w	r3, r3, #4
 8004c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c92:	bf00      	nop
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <LL_RCC_LSE_DisableBypass>:
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cac:	f023 0304 	bic.w	r3, r3, #4
 8004cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <LL_RCC_LSE_IsReady>:
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d101      	bne.n	8004cd6 <LL_RCC_LSE_IsReady+0x18>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <LL_RCC_LSE_IsReady+0x1a>
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <LL_RCC_LSI1_Enable>:
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004cfa:	bf00      	nop
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <LL_RCC_LSI1_Disable>:
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d1c:	bf00      	nop
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <LL_RCC_LSI1_IsReady>:
{
 8004d26:	b480      	push	{r7}
 8004d28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d101      	bne.n	8004d3e <LL_RCC_LSI1_IsReady+0x18>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <LL_RCC_LSI1_IsReady+0x1a>
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <LL_RCC_LSI2_Enable>:
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d5a:	f043 0304 	orr.w	r3, r3, #4
 8004d5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d62:	bf00      	nop
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <LL_RCC_LSI2_Disable>:
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d7c:	f023 0304 	bic.w	r3, r3, #4
 8004d80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d84:	bf00      	nop
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <LL_RCC_LSI2_IsReady>:
{
 8004d8e:	b480      	push	{r7}
 8004d90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d101      	bne.n	8004da6 <LL_RCC_LSI2_IsReady+0x18>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <LL_RCC_LSI2_IsReady+0x1a>
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <LL_RCC_LSI2_SetTrimming>:
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_RCC_MSI_Enable>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	6013      	str	r3, [r2, #0]
}
 8004df4:	bf00      	nop
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <LL_RCC_MSI_Disable>:
{
 8004dfe:	b480      	push	{r7}
 8004e00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	6013      	str	r3, [r2, #0]
}
 8004e12:	bf00      	nop
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <LL_RCC_MSI_IsReady>:
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d101      	bne.n	8004e32 <LL_RCC_MSI_IsReady+0x16>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <LL_RCC_MSI_IsReady+0x18>
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <LL_RCC_MSI_SetRange>:
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	600b      	str	r3, [r1, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <LL_RCC_MSI_GetRange>:
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e76:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2bb0      	cmp	r3, #176	; 0xb0
 8004e7c:	d901      	bls.n	8004e82 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004e7e:	23b0      	movs	r3, #176	; 0xb0
 8004e80:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004e82:	687b      	ldr	r3, [r7, #4]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	604b      	str	r3, [r1, #4]
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_RCC_SetSysClkSource>:
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f023 0203 	bic.w	r2, r3, #3
 8004ecc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	608b      	str	r3, [r1, #8]
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <LL_RCC_GetSysClkSource>:
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f003 030c 	and.w	r3, r3, #12
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <LL_RCC_SetAHBPrescaler>:
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	608b      	str	r3, [r1, #8]
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <LL_RCC_SetAHB4Prescaler>:
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f5e:	f023 020f 	bic.w	r2, r3, #15
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	091b      	lsrs	r3, r3, #4
 8004f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <LL_RCC_SetAPB1Prescaler>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	608b      	str	r3, [r1, #8]
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <LL_RCC_SetAPB2Prescaler>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	608b      	str	r3, [r1, #8]
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <LL_RCC_GetAHBPrescaler>:
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <LL_C2_RCC_GetAHBPrescaler>:
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <LL_RCC_GetAHB4Prescaler>:
{
 8004ffe:	b480      	push	{r7}
 8005000:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005006:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <LL_RCC_GetAPB1Prescaler>:
{
 800501a:	b480      	push	{r7}
 800501c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800501e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <LL_RCC_GetAPB2Prescaler>:
{
 8005032:	b480      	push	{r7}
 8005034:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005040:	4618      	mov	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <LL_RCC_PLL_Enable>:
{
 800504a:	b480      	push	{r7}
 800504c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800504e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005058:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800505c:	6013      	str	r3, [r2, #0]
}
 800505e:	bf00      	nop
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <LL_RCC_PLL_Disable>:
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800506c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800507a:	6013      	str	r3, [r2, #0]
}
 800507c:	bf00      	nop
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <LL_RCC_PLL_IsReady>:
{
 8005086:	b480      	push	{r7}
 8005088:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800508a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005098:	d101      	bne.n	800509e <LL_RCC_PLL_IsReady+0x18>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <LL_RCC_PLL_IsReady+0x1a>
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <LL_RCC_PLL_GetN>:
{
 80050aa:	b480      	push	{r7}
 80050ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80050ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <LL_RCC_PLL_GetR>:
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80050c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <LL_RCC_PLL_GetDivider>:
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80050e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <LL_RCC_PLL_GetMainSource>:
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80050f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f003 0303 	and.w	r3, r3, #3
}
 8005102:	4618      	mov	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <LL_RCC_IsActiveFlag_HPRE>:
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511e:	d101      	bne.n	8005124 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005138:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800513c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005144:	d101      	bne.n	800514a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005156:	b480      	push	{r7}
 8005158:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800515a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800516a:	d101      	bne.n	8005170 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <LL_RCC_IsActiveFlag_PPRE1>:
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800518e:	d101      	bne.n	8005194 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80051a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051b2:	d101      	bne.n	80051b8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051c4:	b590      	push	{r4, r7, lr}
 80051c6:	b08d      	sub	sp, #52	; 0x34
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e37e      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 8092 	beq.w	8005308 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051e4:	f7ff fe7d 	bl	8004ee2 <LL_RCC_GetSysClkSource>
 80051e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051ea:	f7ff ff83 	bl	80050f4 <LL_RCC_PLL_GetMainSource>
 80051ee:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80051f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <HAL_RCC_OscConfig+0x3e>
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	2b0c      	cmp	r3, #12
 80051fa:	d14c      	bne.n	8005296 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d149      	bne.n	8005296 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005202:	f7ff fe0b 	bl	8004e1c <LL_RCC_MSI_IsReady>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <HAL_RCC_OscConfig+0x54>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e35d      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800521c:	f7ff fe23 	bl	8004e66 <LL_RCC_MSI_GetRange>
 8005220:	4603      	mov	r3, r0
 8005222:	429c      	cmp	r4, r3
 8005224:	d914      	bls.n	8005250 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fd5c 	bl	8005ce8 <RCC_SetFlashLatencyFromMSIRange>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e34c      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff fdfd 	bl	8004e3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fe21 	bl	8004e90 <LL_RCC_MSI_SetCalibTrimming>
 800524e:	e013      	b.n	8005278 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff fdf2 	bl	8004e3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff fe16 	bl	8004e90 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	4618      	mov	r0, r3
 800526a:	f000 fd3d 	bl	8005ce8 <RCC_SetFlashLatencyFromMSIRange>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e32d      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005278:	f000 fcda 	bl	8005c30 <HAL_RCC_GetHCLKFreq>
 800527c:	4602      	mov	r2, r0
 800527e:	4bb3      	ldr	r3, [pc, #716]	; (800554c <HAL_RCC_OscConfig+0x388>)
 8005280:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005282:	4bb3      	ldr	r3, [pc, #716]	; (8005550 <HAL_RCC_OscConfig+0x38c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fc fc0a 	bl	8001aa0 <HAL_InitTick>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d039      	beq.n	8005306 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e31e      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01e      	beq.n	80052dc <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800529e:	f7ff fd9f 	bl	8004de0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052a2:	f7fc fecf 	bl	8002044 <HAL_GetTick>
 80052a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052aa:	f7fc fecb 	bl	8002044 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e30b      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80052bc:	f7ff fdae 	bl	8004e1c <LL_RCC_MSI_IsReady>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f1      	beq.n	80052aa <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff fdb7 	bl	8004e3e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fddb 	bl	8004e90 <LL_RCC_MSI_SetCalibTrimming>
 80052da:	e015      	b.n	8005308 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052dc:	f7ff fd8f 	bl	8004dfe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052e0:	f7fc feb0 	bl	8002044 <HAL_GetTick>
 80052e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052e8:	f7fc feac 	bl	8002044 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e2ec      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80052fa:	f7ff fd8f 	bl	8004e1c <LL_RCC_MSI_IsReady>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1f1      	bne.n	80052e8 <HAL_RCC_OscConfig+0x124>
 8005304:	e000      	b.n	8005308 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005306:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d04e      	beq.n	80053b2 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005314:	f7ff fde5 	bl	8004ee2 <LL_RCC_GetSysClkSource>
 8005318:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800531a:	f7ff feeb 	bl	80050f4 <LL_RCC_PLL_GetMainSource>
 800531e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	2b08      	cmp	r3, #8
 8005324:	d005      	beq.n	8005332 <HAL_RCC_OscConfig+0x16e>
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	2b0c      	cmp	r3, #12
 800532a:	d10d      	bne.n	8005348 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2b03      	cmp	r3, #3
 8005330:	d10a      	bne.n	8005348 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005332:	f7ff fbf5 	bl	8004b20 <LL_RCC_HSE_IsReady>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d039      	beq.n	80053b0 <HAL_RCC_OscConfig+0x1ec>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d135      	bne.n	80053b0 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e2c5      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005350:	d102      	bne.n	8005358 <HAL_RCC_OscConfig+0x194>
 8005352:	f7ff fbc7 	bl	8004ae4 <LL_RCC_HSE_Enable>
 8005356:	e001      	b.n	800535c <HAL_RCC_OscConfig+0x198>
 8005358:	f7ff fbd3 	bl	8004b02 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d012      	beq.n	800538a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005364:	f7fc fe6e 	bl	8002044 <HAL_GetTick>
 8005368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800536c:	f7fc fe6a 	bl	8002044 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b64      	cmp	r3, #100	; 0x64
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e2aa      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800537e:	f7ff fbcf 	bl	8004b20 <LL_RCC_HSE_IsReady>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f1      	beq.n	800536c <HAL_RCC_OscConfig+0x1a8>
 8005388:	e013      	b.n	80053b2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538a:	f7fc fe5b 	bl	8002044 <HAL_GetTick>
 800538e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005392:	f7fc fe57 	bl	8002044 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b64      	cmp	r3, #100	; 0x64
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e297      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80053a4:	f7ff fbbc 	bl	8004b20 <LL_RCC_HSE_IsReady>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1f1      	bne.n	8005392 <HAL_RCC_OscConfig+0x1ce>
 80053ae:	e000      	b.n	80053b2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d051      	beq.n	8005462 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053be:	f7ff fd90 	bl	8004ee2 <LL_RCC_GetSysClkSource>
 80053c2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053c4:	f7ff fe96 	bl	80050f4 <LL_RCC_PLL_GetMainSource>
 80053c8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_OscConfig+0x218>
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2b0c      	cmp	r3, #12
 80053d4:	d113      	bne.n	80053fe <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d110      	bne.n	80053fe <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053dc:	f7ff fbd0 	bl	8004b80 <LL_RCC_HSI_IsReady>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <HAL_RCC_OscConfig+0x22e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e270      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff fbd4 	bl	8004ba4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053fc:	e031      	b.n	8005462 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d019      	beq.n	800543a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005406:	f7ff fb9d 	bl	8004b44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540a:	f7fc fe1b 	bl	8002044 <HAL_GetTick>
 800540e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005412:	f7fc fe17 	bl	8002044 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e257      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005424:	f7ff fbac 	bl	8004b80 <LL_RCC_HSI_IsReady>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f1      	beq.n	8005412 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fbb6 	bl	8004ba4 <LL_RCC_HSI_SetCalibTrimming>
 8005438:	e013      	b.n	8005462 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800543a:	f7ff fb92 	bl	8004b62 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543e:	f7fc fe01 	bl	8002044 <HAL_GetTick>
 8005442:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005446:	f7fc fdfd 	bl	8002044 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e23d      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005458:	f7ff fb92 	bl	8004b80 <LL_RCC_HSI_IsReady>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f1      	bne.n	8005446 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 80a3 	beq.w	80055c2 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d076      	beq.n	8005572 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	d046      	beq.n	800551e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005490:	f7ff fc49 	bl	8004d26 <LL_RCC_LSI1_IsReady>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d113      	bne.n	80054c2 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800549a:	f7ff fc22 	bl	8004ce2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800549e:	f7fc fdd1 	bl	8002044 <HAL_GetTick>
 80054a2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80054a6:	f7fc fdcd 	bl	8002044 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e20d      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80054b8:	f7ff fc35 	bl	8004d26 <LL_RCC_LSI1_IsReady>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0f1      	beq.n	80054a6 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80054c2:	f7ff fc42 	bl	8004d4a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c6:	f7fc fdbd 	bl	8002044 <HAL_GetTick>
 80054ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80054ce:	f7fc fdb9 	bl	8002044 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e1f9      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80054e0:	f7ff fc55 	bl	8004d8e <LL_RCC_LSI2_IsReady>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f1      	beq.n	80054ce <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff fc5f 	bl	8004db2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80054f4:	f7ff fc06 	bl	8004d04 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fc fda4 	bl	8002044 <HAL_GetTick>
 80054fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005500:	f7fc fda0 	bl	8002044 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e1e0      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005512:	f7ff fc08 	bl	8004d26 <LL_RCC_LSI1_IsReady>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f1      	bne.n	8005500 <HAL_RCC_OscConfig+0x33c>
 800551c:	e051      	b.n	80055c2 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800551e:	f7ff fbe0 	bl	8004ce2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005522:	f7fc fd8f 	bl	8002044 <HAL_GetTick>
 8005526:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800552a:	f7fc fd8b 	bl	8002044 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e1cb      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800553c:	f7ff fbf3 	bl	8004d26 <LL_RCC_LSI1_IsReady>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f1      	beq.n	800552a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005546:	f7ff fc11 	bl	8004d6c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800554a:	e00c      	b.n	8005566 <HAL_RCC_OscConfig+0x3a2>
 800554c:	20000004 	.word	0x20000004
 8005550:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005554:	f7fc fd76 	bl	8002044 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b03      	cmp	r3, #3
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e1b6      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005566:	f7ff fc12 	bl	8004d8e <LL_RCC_LSI2_IsReady>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1f1      	bne.n	8005554 <HAL_RCC_OscConfig+0x390>
 8005570:	e027      	b.n	80055c2 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005572:	f7ff fbfb 	bl	8004d6c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005576:	f7fc fd65 	bl	8002044 <HAL_GetTick>
 800557a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800557e:	f7fc fd61 	bl	8002044 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b03      	cmp	r3, #3
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e1a1      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005590:	f7ff fbfd 	bl	8004d8e <LL_RCC_LSI2_IsReady>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f1      	bne.n	800557e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800559a:	f7ff fbb3 	bl	8004d04 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559e:	f7fc fd51 	bl	8002044 <HAL_GetTick>
 80055a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80055a6:	f7fc fd4d 	bl	8002044 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e18d      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80055b8:	f7ff fbb5 	bl	8004d26 <LL_RCC_LSI1_IsReady>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f1      	bne.n	80055a6 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d05b      	beq.n	8005686 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ce:	4bb5      	ldr	r3, [pc, #724]	; (80058a4 <HAL_RCC_OscConfig+0x6e0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d114      	bne.n	8005604 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80055da:	f7ff fa43 	bl	8004a64 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055de:	f7fc fd31 	bl	8002044 <HAL_GetTick>
 80055e2:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e6:	f7fc fd2d 	bl	8002044 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e16d      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055f8:	4baa      	ldr	r3, [pc, #680]	; (80058a4 <HAL_RCC_OscConfig+0x6e0>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f0      	beq.n	80055e6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d102      	bne.n	8005612 <HAL_RCC_OscConfig+0x44e>
 800560c:	f7ff fb13 	bl	8004c36 <LL_RCC_LSE_Enable>
 8005610:	e00c      	b.n	800562c <HAL_RCC_OscConfig+0x468>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b05      	cmp	r3, #5
 8005618:	d104      	bne.n	8005624 <HAL_RCC_OscConfig+0x460>
 800561a:	f7ff fb2e 	bl	8004c7a <LL_RCC_LSE_EnableBypass>
 800561e:	f7ff fb0a 	bl	8004c36 <LL_RCC_LSE_Enable>
 8005622:	e003      	b.n	800562c <HAL_RCC_OscConfig+0x468>
 8005624:	f7ff fb18 	bl	8004c58 <LL_RCC_LSE_Disable>
 8005628:	f7ff fb38 	bl	8004c9c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d014      	beq.n	800565e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005634:	f7fc fd06 	bl	8002044 <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800563a:	e00a      	b.n	8005652 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800563c:	f7fc fd02 	bl	8002044 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	f241 3288 	movw	r2, #5000	; 0x1388
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e140      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005652:	f7ff fb34 	bl	8004cbe <LL_RCC_LSE_IsReady>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0ef      	beq.n	800563c <HAL_RCC_OscConfig+0x478>
 800565c:	e013      	b.n	8005686 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565e:	f7fc fcf1 	bl	8002044 <HAL_GetTick>
 8005662:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005664:	e00a      	b.n	800567c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005666:	f7fc fced 	bl	8002044 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	f241 3288 	movw	r2, #5000	; 0x1388
 8005674:	4293      	cmp	r3, r2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e12b      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 800567c:	f7ff fb1f 	bl	8004cbe <LL_RCC_LSE_IsReady>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1ef      	bne.n	8005666 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d02c      	beq.n	80056ec <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	2b00      	cmp	r3, #0
 8005698:	d014      	beq.n	80056c4 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800569a:	f7ff fa98 	bl	8004bce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569e:	f7fc fcd1 	bl	8002044 <HAL_GetTick>
 80056a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056a6:	f7fc fccd 	bl	8002044 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e10d      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80056b8:	f7ff faab 	bl	8004c12 <LL_RCC_HSI48_IsReady>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f1      	beq.n	80056a6 <HAL_RCC_OscConfig+0x4e2>
 80056c2:	e013      	b.n	80056ec <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056c4:	f7ff fa94 	bl	8004bf0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fc fcbc 	bl	8002044 <HAL_GetTick>
 80056cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056d0:	f7fc fcb8 	bl	8002044 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e0f8      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80056e2:	f7ff fa96 	bl	8004c12 <LL_RCC_HSI48_IsReady>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f1      	bne.n	80056d0 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 80ee 	beq.w	80058d2 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056f6:	f7ff fbf4 	bl	8004ee2 <LL_RCC_GetSysClkSource>
 80056fa:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80056fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	2b02      	cmp	r3, #2
 800570a:	f040 80af 	bne.w	800586c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f003 0203 	and.w	r2, r3, #3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	429a      	cmp	r2, r3
 800571a:	d123      	bne.n	8005764 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005726:	429a      	cmp	r2, r3
 8005728:	d11c      	bne.n	8005764 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	0a1b      	lsrs	r3, r3, #8
 800572e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005736:	429a      	cmp	r2, r3
 8005738:	d114      	bne.n	8005764 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005744:	429a      	cmp	r2, r3
 8005746:	d10d      	bne.n	8005764 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005752:	429a      	cmp	r2, r3
 8005754:	d106      	bne.n	8005764 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005760:	429a      	cmp	r2, r3
 8005762:	d05d      	beq.n	8005820 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b0c      	cmp	r3, #12
 8005768:	d058      	beq.n	800581c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800576a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0ab      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800577c:	f7ff fc74 	bl	8005068 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005780:	f7fc fc60 	bl	8002044 <HAL_GetTick>
 8005784:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005788:	f7fc fc5c 	bl	8002044 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e09c      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800579a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1ef      	bne.n	8005788 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	4b3e      	ldr	r3, [pc, #248]	; (80058a8 <HAL_RCC_OscConfig+0x6e4>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057ba:	4311      	orrs	r1, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057c0:	0212      	lsls	r2, r2, #8
 80057c2:	4311      	orrs	r1, r2
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80057c8:	4311      	orrs	r1, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057ce:	4311      	orrs	r1, r2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057d4:	430a      	orrs	r2, r1
 80057d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057da:	4313      	orrs	r3, r2
 80057dc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057de:	f7ff fc34 	bl	800504a <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057f2:	f7fc fc27 	bl	8002044 <HAL_GetTick>
 80057f6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057fa:	f7fc fc23 	bl	8002044 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e063      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800580c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0ef      	beq.n	80057fa <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800581a:	e05a      	b.n	80058d2 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e059      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d151      	bne.n	80058d2 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800582e:	f7ff fc0c 	bl	800504a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800583c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005840:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005842:	f7fc fbff 	bl	8002044 <HAL_GetTick>
 8005846:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584a:	f7fc fbfb 	bl	8002044 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e03b      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800585c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0ef      	beq.n	800584a <HAL_RCC_OscConfig+0x686>
 800586a:	e032      	b.n	80058d2 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2b0c      	cmp	r3, #12
 8005870:	d02d      	beq.n	80058ce <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005872:	f7ff fbf9 	bl	8005068 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005880:	f023 0303 	bic.w	r3, r3, #3
 8005884:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005890:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005898:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589a:	f7fc fbd3 	bl	8002044 <HAL_GetTick>
 800589e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058a0:	e00d      	b.n	80058be <HAL_RCC_OscConfig+0x6fa>
 80058a2:	bf00      	nop
 80058a4:	58000400 	.word	0x58000400
 80058a8:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ac:	f7fc fbca 	bl	8002044 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e00a      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1ef      	bne.n	80058ac <HAL_RCC_OscConfig+0x6e8>
 80058cc:	e001      	b.n	80058d2 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3734      	adds	r7, #52	; 0x34
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd90      	pop	{r4, r7, pc}

080058dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e12d      	b.n	8005b4c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058f0:	4b98      	ldr	r3, [pc, #608]	; (8005b54 <HAL_RCC_ClockConfig+0x278>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d91b      	bls.n	8005936 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fe:	4b95      	ldr	r3, [pc, #596]	; (8005b54 <HAL_RCC_ClockConfig+0x278>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f023 0207 	bic.w	r2, r3, #7
 8005906:	4993      	ldr	r1, [pc, #588]	; (8005b54 <HAL_RCC_ClockConfig+0x278>)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	4313      	orrs	r3, r2
 800590c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800590e:	f7fc fb99 	bl	8002044 <HAL_GetTick>
 8005912:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005914:	e008      	b.n	8005928 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005916:	f7fc fb95 	bl	8002044 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e111      	b.n	8005b4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005928:	4b8a      	ldr	r3, [pc, #552]	; (8005b54 <HAL_RCC_ClockConfig+0x278>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d1ef      	bne.n	8005916 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d016      	beq.n	8005970 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fad7 	bl	8004efa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800594c:	f7fc fb7a 	bl	8002044 <HAL_GetTick>
 8005950:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005954:	f7fc fb76 	bl	8002044 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e0f2      	b.n	8005b4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005966:	f7ff fbd1 	bl	800510c <LL_RCC_IsActiveFlag_HPRE>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f1      	beq.n	8005954 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d016      	beq.n	80059aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff face 	bl	8004f22 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005986:	f7fc fb5d 	bl	8002044 <HAL_GetTick>
 800598a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800598e:	f7fc fb59 	bl	8002044 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e0d5      	b.n	8005b4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80059a0:	f7ff fbc6 	bl	8005130 <LL_RCC_IsActiveFlag_C2HPRE>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f1      	beq.n	800598e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d016      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff fac7 	bl	8004f4e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059c0:	f7fc fb40 	bl	8002044 <HAL_GetTick>
 80059c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059c8:	f7fc fb3c 	bl	8002044 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e0b8      	b.n	8005b4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80059da:	f7ff fbbc 	bl	8005156 <LL_RCC_IsActiveFlag_SHDHPRE>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f1      	beq.n	80059c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d016      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff fac1 	bl	8004f7c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059fa:	f7fc fb23 	bl	8002044 <HAL_GetTick>
 80059fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a02:	f7fc fb1f 	bl	8002044 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e09b      	b.n	8005b4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a14:	f7ff fbb2 	bl	800517c <LL_RCC_IsActiveFlag_PPRE1>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0f1      	beq.n	8005a02 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d017      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff fab7 	bl	8004fa4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a36:	f7fc fb05 	bl	8002044 <HAL_GetTick>
 8005a3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a3e:	f7fc fb01 	bl	8002044 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e07d      	b.n	8005b4c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a50:	f7ff fba6 	bl	80051a0 <LL_RCC_IsActiveFlag_PPRE2>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f1      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d043      	beq.n	8005aee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d106      	bne.n	8005a7c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005a6e:	f7ff f857 	bl	8004b20 <LL_RCC_HSE_IsReady>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d11e      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e067      	b.n	8005b4c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d106      	bne.n	8005a92 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005a84:	f7ff faff 	bl	8005086 <LL_RCC_PLL_IsReady>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d113      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e05c      	b.n	8005b4c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005a9a:	f7ff f9bf 	bl	8004e1c <LL_RCC_MSI_IsReady>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d108      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e051      	b.n	8005b4c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005aa8:	f7ff f86a 	bl	8004b80 <LL_RCC_HSI_IsReady>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e04a      	b.n	8005b4c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff f9fd 	bl	8004eba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac0:	f7fc fac0 	bl	8002044 <HAL_GetTick>
 8005ac4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac6:	e00a      	b.n	8005ade <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac8:	f7fc fabc 	bl	8002044 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e036      	b.n	8005b4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ade:	f7ff fa00 	bl	8004ee2 <LL_RCC_GetSysClkSource>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d1ec      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005aee:	4b19      	ldr	r3, [pc, #100]	; (8005b54 <HAL_RCC_ClockConfig+0x278>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d21b      	bcs.n	8005b34 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afc:	4b15      	ldr	r3, [pc, #84]	; (8005b54 <HAL_RCC_ClockConfig+0x278>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f023 0207 	bic.w	r2, r3, #7
 8005b04:	4913      	ldr	r1, [pc, #76]	; (8005b54 <HAL_RCC_ClockConfig+0x278>)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b0c:	f7fc fa9a 	bl	8002044 <HAL_GetTick>
 8005b10:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b14:	f7fc fa96 	bl	8002044 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e012      	b.n	8005b4c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b26:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <HAL_RCC_ClockConfig+0x278>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d1ef      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b34:	f000 f87c 	bl	8005c30 <HAL_RCC_GetHCLKFreq>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <HAL_RCC_ClockConfig+0x27c>)
 8005b3c:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005b3e:	f7fc fa8d 	bl	800205c <HAL_GetTickPrio>
 8005b42:	4603      	mov	r3, r0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fb ffab 	bl	8001aa0 <HAL_InitTick>
 8005b4a:	4603      	mov	r3, r0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	58004000 	.word	0x58004000
 8005b58:	20000004 	.word	0x20000004

08005b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b5c:	b590      	push	{r4, r7, lr}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b62:	f7ff f9be 	bl	8004ee2 <LL_RCC_GetSysClkSource>
 8005b66:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005b6e:	f7ff f97a 	bl	8004e66 <LL_RCC_MSI_GetRange>
 8005b72:	4603      	mov	r3, r0
 8005b74:	091b      	lsrs	r3, r3, #4
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	4a2a      	ldr	r2, [pc, #168]	; (8005c24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	e04a      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d102      	bne.n	8005b90 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b8a:	4b27      	ldr	r3, [pc, #156]	; (8005c28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e044      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d10a      	bne.n	8005bac <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005b96:	f7fe ff93 	bl	8004ac0 <LL_RCC_HSE_IsEnabledDiv2>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d102      	bne.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005ba0:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e039      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005ba6:	4b21      	ldr	r3, [pc, #132]	; (8005c2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	e036      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005bac:	f7ff faa2 	bl	80050f4 <LL_RCC_PLL_GetMainSource>
 8005bb0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d002      	beq.n	8005bbe <HAL_RCC_GetSysClockFreq+0x62>
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d003      	beq.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x68>
 8005bbc:	e00d      	b.n	8005bda <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005bbe:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bc0:	60bb      	str	r3, [r7, #8]
        break;
 8005bc2:	e015      	b.n	8005bf0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005bc4:	f7fe ff7c 	bl	8004ac0 <LL_RCC_HSE_IsEnabledDiv2>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d102      	bne.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005bce:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bd0:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005bd2:	e00d      	b.n	8005bf0 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8005bd4:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bd6:	60bb      	str	r3, [r7, #8]
        break;
 8005bd8:	e00a      	b.n	8005bf0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005bda:	f7ff f944 	bl	8004e66 <LL_RCC_MSI_GetRange>
 8005bde:	4603      	mov	r3, r0
 8005be0:	091b      	lsrs	r3, r3, #4
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	4a0f      	ldr	r2, [pc, #60]	; (8005c24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bec:	60bb      	str	r3, [r7, #8]
        break;
 8005bee:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005bf0:	f7ff fa5b 	bl	80050aa <LL_RCC_PLL_GetN>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	fb03 f402 	mul.w	r4, r3, r2
 8005bfc:	f7ff fa6e 	bl	80050dc <LL_RCC_PLL_GetDivider>
 8005c00:	4603      	mov	r3, r0
 8005c02:	091b      	lsrs	r3, r3, #4
 8005c04:	3301      	adds	r3, #1
 8005c06:	fbb4 f4f3 	udiv	r4, r4, r3
 8005c0a:	f7ff fa5b 	bl	80050c4 <LL_RCC_PLL_GetR>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	0f5b      	lsrs	r3, r3, #29
 8005c12:	3301      	adds	r3, #1
 8005c14:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c18:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd90      	pop	{r4, r7, pc}
 8005c24:	08011d08 	.word	0x08011d08
 8005c28:	00f42400 	.word	0x00f42400
 8005c2c:	01e84800 	.word	0x01e84800

08005c30 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c30:	b598      	push	{r3, r4, r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005c34:	f7ff ff92 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
 8005c38:	4604      	mov	r4, r0
 8005c3a:	f7ff f9c7 	bl	8004fcc <LL_RCC_GetAHBPrescaler>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	091b      	lsrs	r3, r3, #4
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	4a03      	ldr	r2, [pc, #12]	; (8005c54 <HAL_RCC_GetHCLKFreq+0x24>)
 8005c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	bd98      	pop	{r3, r4, r7, pc}
 8005c54:	08011ca8 	.word	0x08011ca8

08005c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c58:	b598      	push	{r3, r4, r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005c5c:	f7ff ffe8 	bl	8005c30 <HAL_RCC_GetHCLKFreq>
 8005c60:	4604      	mov	r4, r0
 8005c62:	f7ff f9e6 	bl	8005032 <LL_RCC_GetAPB2Prescaler>
 8005c66:	4603      	mov	r3, r0
 8005c68:	0adb      	lsrs	r3, r3, #11
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	4a04      	ldr	r2, [pc, #16]	; (8005c80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c74:	f003 031f 	and.w	r3, r3, #31
 8005c78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd98      	pop	{r3, r4, r7, pc}
 8005c80:	08011ce8 	.word	0x08011ce8

08005c84 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	226f      	movs	r2, #111	; 0x6f
 8005c92:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005c94:	f7ff f925 	bl	8004ee2 <LL_RCC_GetSysClkSource>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005c9e:	f7ff f995 	bl	8004fcc <LL_RCC_GetAHBPrescaler>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005ca8:	f7ff f9b7 	bl	800501a <LL_RCC_GetAPB1Prescaler>
 8005cac:	4602      	mov	r2, r0
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005cb2:	f7ff f9be 	bl	8005032 <LL_RCC_GetAPB2Prescaler>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005cbc:	f7ff f992 	bl	8004fe4 <LL_C2_RCC_GetAHBPrescaler>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005cc6:	f7ff f99a 	bl	8004ffe <LL_RCC_GetAHB4Prescaler>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005cd0:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <HAL_RCC_GetClockConfig+0x60>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0207 	and.w	r2, r3, #7
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	601a      	str	r2, [r3, #0]
}
 8005cdc:	bf00      	nop
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	58004000 	.word	0x58004000

08005ce8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005ce8:	b590      	push	{r4, r7, lr}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2bb0      	cmp	r3, #176	; 0xb0
 8005cf4:	d903      	bls.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005cf6:	4b15      	ldr	r3, [pc, #84]	; (8005d4c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e007      	b.n	8005d0e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	091b      	lsrs	r3, r3, #4
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	4a11      	ldr	r2, [pc, #68]	; (8005d4c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005d0e:	f7ff f976 	bl	8004ffe <LL_RCC_GetAHB4Prescaler>
 8005d12:	4603      	mov	r3, r0
 8005d14:	091b      	lsrs	r3, r3, #4
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	4a0d      	ldr	r2, [pc, #52]	; (8005d50 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4a0a      	ldr	r2, [pc, #40]	; (8005d54 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d30:	0c9c      	lsrs	r4, r3, #18
 8005d32:	f7fe fea7 	bl	8004a84 <HAL_PWREx_GetVoltageRange>
 8005d36:	4603      	mov	r3, r0
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 f80c 	bl	8005d58 <RCC_SetFlashLatency>
 8005d40:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd90      	pop	{r4, r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	08011d08 	.word	0x08011d08
 8005d50:	08011ca8 	.word	0x08011ca8
 8005d54:	431bde83 	.word	0x431bde83

08005d58 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005d58:	b590      	push	{r4, r7, lr}
 8005d5a:	b093      	sub	sp, #76	; 0x4c
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005d62:	4b39      	ldr	r3, [pc, #228]	; (8005e48 <RCC_SetFlashLatency+0xf0>)
 8005d64:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005d68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005d6e:	4a37      	ldr	r2, [pc, #220]	; (8005e4c <RCC_SetFlashLatency+0xf4>)
 8005d70:	f107 031c 	add.w	r3, r7, #28
 8005d74:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005d7a:	4b35      	ldr	r3, [pc, #212]	; (8005e50 <RCC_SetFlashLatency+0xf8>)
 8005d7c:	f107 040c 	add.w	r4, r7, #12
 8005d80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005d86:	2300      	movs	r3, #0
 8005d88:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d90:	d11c      	bne.n	8005dcc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005d92:	2300      	movs	r3, #0
 8005d94:	643b      	str	r3, [r7, #64]	; 0x40
 8005d96:	e015      	b.n	8005dc4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005da0:	4413      	add	r3, r2
 8005da2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d808      	bhi.n	8005dbe <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005db4:	4413      	add	r3, r2
 8005db6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005dba:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005dbc:	e022      	b.n	8005e04 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	643b      	str	r3, [r7, #64]	; 0x40
 8005dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d9e6      	bls.n	8005d98 <RCC_SetFlashLatency+0x40>
 8005dca:	e01b      	b.n	8005e04 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005dcc:	2300      	movs	r3, #0
 8005dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dd0:	e015      	b.n	8005dfe <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005dda:	4413      	add	r3, r2
 8005ddc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d808      	bhi.n	8005df8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005dee:	4413      	add	r3, r2
 8005df0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005df4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005df6:	e005      	b.n	8005e04 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d9e6      	bls.n	8005dd2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005e04:	4b13      	ldr	r3, [pc, #76]	; (8005e54 <RCC_SetFlashLatency+0xfc>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f023 0207 	bic.w	r2, r3, #7
 8005e0c:	4911      	ldr	r1, [pc, #68]	; (8005e54 <RCC_SetFlashLatency+0xfc>)
 8005e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e10:	4313      	orrs	r3, r2
 8005e12:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e14:	f7fc f916 	bl	8002044 <HAL_GetTick>
 8005e18:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005e1a:	e008      	b.n	8005e2e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e1c:	f7fc f912 	bl	8002044 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e007      	b.n	8005e3e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <RCC_SetFlashLatency+0xfc>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d1ef      	bne.n	8005e1c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	374c      	adds	r7, #76	; 0x4c
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd90      	pop	{r4, r7, pc}
 8005e46:	bf00      	nop
 8005e48:	080119c0 	.word	0x080119c0
 8005e4c:	080119d0 	.word	0x080119d0
 8005e50:	080119dc 	.word	0x080119dc
 8005e54:	58004000 	.word	0x58004000

08005e58 <LL_RCC_LSE_IsEnabled>:
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <LL_RCC_LSE_IsEnabled+0x18>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <LL_RCC_LSE_IsEnabled+0x1a>
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <LL_RCC_LSE_IsReady>:
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d101      	bne.n	8005e94 <LL_RCC_LSE_IsReady+0x18>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <LL_RCC_LSE_IsReady+0x1a>
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <LL_RCC_SetRFWKPClockSource>:
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005eb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <LL_RCC_SetSMPSClockSource>:
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	f023 0203 	bic.w	r2, r3, #3
 8005ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <LL_RCC_SetSMPSPrescaler>:
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <LL_RCC_SetUSARTClockSource>:
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2c:	f023 0203 	bic.w	r2, r3, #3
 8005f30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <LL_RCC_SetLPUARTClockSource>:
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <LL_RCC_SetI2CClockSource>:
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	091b      	lsrs	r3, r3, #4
 8005f88:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	401a      	ands	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <LL_RCC_SetLPTIMClockSource>:
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	0c1b      	lsrs	r3, r3, #16
 8005fc2:	041b      	lsls	r3, r3, #16
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	041b      	lsls	r3, r3, #16
 8005fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <LL_RCC_SetSAIClockSource>:
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b083      	sub	sp, #12
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <LL_RCC_SetRNGClockSource>:
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <LL_RCC_SetCLK48ClockSource>:
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800604e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <LL_RCC_SetUSBClockSource>:
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff ffe3 	bl	800603a <LL_RCC_SetCLK48ClockSource>
}
 8006074:	bf00      	nop
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <LL_RCC_SetADCClockSource>:
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006090:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <LL_RCC_SetRTCClockSource>:
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80060b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <LL_RCC_GetRTCClockSource>:
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80060d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <LL_RCC_ForceBackupDomainReset>:
{
 80060ee:	b480      	push	{r7}
 80060f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80060f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006106:	bf00      	nop
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006128:	bf00      	nop
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <LL_RCC_PLLSAI1_Enable>:
{
 8006132:	b480      	push	{r7}
 8006134:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006140:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006144:	6013      	str	r3, [r2, #0]
}
 8006146:	bf00      	nop
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <LL_RCC_PLLSAI1_Disable>:
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800615e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006162:	6013      	str	r3, [r2, #0]
}
 8006164:	bf00      	nop
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <LL_RCC_PLLSAI1_IsReady>:
{
 800616e:	b480      	push	{r7}
 8006170:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800617c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006180:	d101      	bne.n	8006186 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006182:	2301      	movs	r3, #1
 8006184:	e000      	b.n	8006188 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b088      	sub	sp, #32
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800619a:	2300      	movs	r3, #0
 800619c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800619e:	2300      	movs	r3, #0
 80061a0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d033      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061b6:	d00c      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80061b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061bc:	d802      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d010      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061c2:	e017      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80061c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061c8:	d017      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x68>
 80061ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061ce:	d016      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80061d0:	e010      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80061e2:	e00d      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3304      	adds	r3, #4
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 f947 	bl	800647c <RCCEx_PLLSAI1_ConfigNP>
 80061ee:	4603      	mov	r3, r0
 80061f0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061f2:	e005      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	77fb      	strb	r3, [r7, #31]
        break;
 80061f8:	e002      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80061fa:	bf00      	nop
 80061fc:	e000      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80061fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006200:	7ffb      	ldrb	r3, [r7, #31]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d105      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fee9 	bl	8005fe2 <LL_RCC_SetSAIClockSource>
 8006210:	e001      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006212:	7ffb      	ldrb	r3, [r7, #31]
 8006214:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800621e:	2b00      	cmp	r3, #0
 8006220:	d046      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006222:	f7ff ff57 	bl	80060d4 <LL_RCC_GetRTCClockSource>
 8006226:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	429a      	cmp	r2, r3
 8006230:	d03c      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006232:	f7fe fc17 	bl	8004a64 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d105      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff ff31 	bl	80060a8 <LL_RCC_SetRTCClockSource>
 8006246:	e02e      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006250:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006252:	f7ff ff4c 	bl	80060ee <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006256:	f7ff ff5b 	bl	8006110 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006272:	f7ff fdf1 	bl	8005e58 <LL_RCC_LSE_IsEnabled>
 8006276:	4603      	mov	r3, r0
 8006278:	2b01      	cmp	r3, #1
 800627a:	d114      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800627c:	f7fb fee2 	bl	8002044 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006282:	e00b      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006284:	f7fb fede 	bl	8002044 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006292:	4293      	cmp	r3, r2
 8006294:	d902      	bls.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	77fb      	strb	r3, [r7, #31]
              break;
 800629a:	e004      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800629c:	f7ff fdee 	bl	8005e7c <LL_RCC_LSE_IsReady>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d1ee      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80062a6:	7ffb      	ldrb	r3, [r7, #31]
 80062a8:	77bb      	strb	r3, [r7, #30]
 80062aa:	e001      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ac:	7ffb      	ldrb	r3, [r7, #31]
 80062ae:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d004      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fe2b 	bl	8005f1c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff fe36 	bl	8005f48 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff fe5e 	bl	8005fae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff fe53 	bl	8005fae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d004      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff fe2b 	bl	8005f74 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff fe20 	bl	8005f74 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633c:	2b00      	cmp	r3, #0
 800633e:	d022      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fe8e 	bl	8006066 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006352:	d107      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800635e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006362:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006368:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800636c:	d10b      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	3304      	adds	r3, #4
 8006372:	4618      	mov	r0, r3
 8006374:	f000 f8dd 	bl	8006532 <RCCEx_PLLSAI1_ConfigNQ>
 8006378:	4603      	mov	r3, r0
 800637a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800637c:	7ffb      	ldrb	r3, [r7, #31]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8006382:	7ffb      	ldrb	r3, [r7, #31]
 8006384:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800638e:	2b00      	cmp	r3, #0
 8006390:	d02b      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639a:	d008      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063a4:	d003      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d105      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x228>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fe2b 	bl	800600e <LL_RCC_SetRNGClockSource>
 80063b8:	e00a      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	2000      	movs	r0, #0
 80063c6:	f7ff fe22 	bl	800600e <LL_RCC_SetRNGClockSource>
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7ff fe35 	bl	800603a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80063d8:	d107      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80063da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063e8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d022      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff fe3e 	bl	800607c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006408:	d107      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800640a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006418:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006422:	d10b      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3304      	adds	r3, #4
 8006428:	4618      	mov	r0, r3
 800642a:	f000 f8dd 	bl	80065e8 <RCCEx_PLLSAI1_ConfigNR>
 800642e:	4603      	mov	r3, r0
 8006430:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8006432:	7ffb      	ldrb	r3, [r7, #31]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8006438:	7ffb      	ldrb	r3, [r7, #31]
 800643a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d004      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff fd27 	bl	8005ea0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff fd46 	bl	8005ef4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fd2d 	bl	8005ecc <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8006472:	7fbb      	ldrb	r3, [r7, #30]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3720      	adds	r7, #32
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006488:	f7ff fe62 	bl	8006150 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800648c:	f7fb fdda 	bl	8002044 <HAL_GetTick>
 8006490:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006492:	e009      	b.n	80064a8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006494:	f7fb fdd6 	bl	8002044 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d902      	bls.n	80064a8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	73fb      	strb	r3, [r7, #15]
      break;
 80064a6:	e004      	b.n	80064b2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80064a8:	f7ff fe61 	bl	800616e <LL_RCC_PLLSAI1_IsReady>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f0      	bne.n	8006494 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d137      	bne.n	8006528 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80064b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064cc:	4313      	orrs	r3, r2
 80064ce:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80064d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064e2:	4313      	orrs	r3, r2
 80064e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80064e6:	f7ff fe24 	bl	8006132 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ea:	f7fb fdab 	bl	8002044 <HAL_GetTick>
 80064ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064f0:	e009      	b.n	8006506 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064f2:	f7fb fda7 	bl	8002044 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d902      	bls.n	8006506 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	73fb      	strb	r3, [r7, #15]
        break;
 8006504:	e004      	b.n	8006510 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006506:	f7ff fe32 	bl	800616e <LL_RCC_PLLSAI1_IsReady>
 800650a:	4603      	mov	r3, r0
 800650c:	2b01      	cmp	r3, #1
 800650e:	d1f0      	bne.n	80064f2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d108      	bne.n	8006528 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006524:	4313      	orrs	r3, r2
 8006526:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800653e:	f7ff fe07 	bl	8006150 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006542:	f7fb fd7f 	bl	8002044 <HAL_GetTick>
 8006546:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006548:	e009      	b.n	800655e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800654a:	f7fb fd7b 	bl	8002044 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d902      	bls.n	800655e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	73fb      	strb	r3, [r7, #15]
      break;
 800655c:	e004      	b.n	8006568 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800655e:	f7ff fe06 	bl	800616e <LL_RCC_PLLSAI1_IsReady>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f0      	bne.n	800654a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d137      	bne.n	80065de <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800656e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006582:	4313      	orrs	r3, r2
 8006584:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006598:	4313      	orrs	r3, r2
 800659a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800659c:	f7ff fdc9 	bl	8006132 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a0:	f7fb fd50 	bl	8002044 <HAL_GetTick>
 80065a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065a6:	e009      	b.n	80065bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065a8:	f7fb fd4c 	bl	8002044 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d902      	bls.n	80065bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	73fb      	strb	r3, [r7, #15]
        break;
 80065ba:	e004      	b.n	80065c6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065bc:	f7ff fdd7 	bl	800616e <LL_RCC_PLLSAI1_IsReady>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d1f0      	bne.n	80065a8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d108      	bne.n	80065de <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80065cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d0:	691a      	ldr	r2, [r3, #16]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065da:	4313      	orrs	r3, r2
 80065dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80065f4:	f7ff fdac 	bl	8006150 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80065f8:	f7fb fd24 	bl	8002044 <HAL_GetTick>
 80065fc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80065fe:	e009      	b.n	8006614 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006600:	f7fb fd20 	bl	8002044 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d902      	bls.n	8006614 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	73fb      	strb	r3, [r7, #15]
      break;
 8006612:	e004      	b.n	800661e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006614:	f7ff fdab 	bl	800616e <LL_RCC_PLLSAI1_IsReady>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f0      	bne.n	8006600 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d137      	bne.n	8006694 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006638:	4313      	orrs	r3, r2
 800663a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800663c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800664e:	4313      	orrs	r3, r2
 8006650:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006652:	f7ff fd6e 	bl	8006132 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006656:	f7fb fcf5 	bl	8002044 <HAL_GetTick>
 800665a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800665c:	e009      	b.n	8006672 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800665e:	f7fb fcf1 	bl	8002044 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d902      	bls.n	8006672 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	73fb      	strb	r3, [r7, #15]
        break;
 8006670:	e004      	b.n	800667c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006672:	f7ff fd7c 	bl	800616e <LL_RCC_PLLSAI1_IsReady>
 8006676:	4603      	mov	r3, r0
 8006678:	2b01      	cmp	r3, #1
 800667a:	d1f0      	bne.n	800665e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d108      	bne.n	8006694 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006690:	4313      	orrs	r3, r2
 8006692:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b082      	sub	sp, #8
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e090      	b.n	80067d2 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d106      	bne.n	80066ca <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7fb f983 	bl	80019d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2202      	movs	r2, #2
 80066ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	22ca      	movs	r2, #202	; 0xca
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2253      	movs	r2, #83	; 0x53
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f89f 	bl	8006826 <RTC_EnterInitMode>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	22ff      	movs	r2, #255	; 0xff
 80066f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2204      	movs	r2, #4
 80066fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e067      	b.n	80067d2 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6812      	ldr	r2, [r2, #0]
 800670c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006714:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6899      	ldr	r1, [r3, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	431a      	orrs	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	68d2      	ldr	r2, [r2, #12]
 800673c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6919      	ldr	r1, [r3, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	041a      	lsls	r2, r3, #16
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006760:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0203 	bic.w	r2, r2, #3
 8006770:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d113      	bne.n	80067c0 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f81e 	bl	80067da <HAL_RTC_WaitForSynchro>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00d      	beq.n	80067c0 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	22ff      	movs	r2, #255	; 0xff
 80067aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2204      	movs	r2, #4
 80067b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e008      	b.n	80067d2 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	22ff      	movs	r2, #255	; 0xff
 80067c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80067d0:	2300      	movs	r3, #0
  }
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067f0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80067f2:	f7fb fc27 	bl	8002044 <HAL_GetTick>
 80067f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80067f8:	e009      	b.n	800680e <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80067fa:	f7fb fc23 	bl	8002044 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006808:	d901      	bls.n	800680e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e007      	b.n	800681e <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0ee      	beq.n	80067fa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d119      	bne.n	8006870 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f04f 32ff 	mov.w	r2, #4294967295
 8006844:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006846:	f7fb fbfd 	bl	8002044 <HAL_GetTick>
 800684a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800684c:	e009      	b.n	8006862 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800684e:	f7fb fbf9 	bl	8002044 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800685c:	d901      	bls.n	8006862 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e007      	b.n	8006872 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0ee      	beq.n	800684e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b082      	sub	sp, #8
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e049      	b.n	8006920 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d106      	bne.n	80068a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7fb fb19 	bl	8001ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3304      	adds	r3, #4
 80068b6:	4619      	mov	r1, r3
 80068b8:	4610      	mov	r0, r2
 80068ba:	f000 fbf5 	bl	80070a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b01      	cmp	r3, #1
 800693a:	d001      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e036      	b.n	80069ae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0201 	orr.w	r2, r2, #1
 8006956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a17      	ldr	r2, [pc, #92]	; (80069bc <HAL_TIM_Base_Start_IT+0x94>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d004      	beq.n	800696c <HAL_TIM_Base_Start_IT+0x44>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696a:	d115      	bne.n	8006998 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	4b13      	ldr	r3, [pc, #76]	; (80069c0 <HAL_TIM_Base_Start_IT+0x98>)
 8006974:	4013      	ands	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2b06      	cmp	r3, #6
 800697c:	d015      	beq.n	80069aa <HAL_TIM_Base_Start_IT+0x82>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006984:	d011      	beq.n	80069aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0201 	orr.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006996:	e008      	b.n	80069aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	e000      	b.n	80069ac <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	40012c00 	.word	0x40012c00
 80069c0:	00010007 	.word	0x00010007

080069c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e049      	b.n	8006a6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f841 	bl	8006a72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3304      	adds	r3, #4
 8006a00:	4619      	mov	r1, r3
 8006a02:	4610      	mov	r0, r2
 8006a04:	f000 fb50 	bl	80070a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b083      	sub	sp, #12
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d122      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d11b      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f06f 0202 	mvn.w	r2, #2
 8006ab2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	f003 0303 	and.w	r3, r3, #3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 face 	bl	800706a <HAL_TIM_IC_CaptureCallback>
 8006ace:	e005      	b.n	8006adc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fac0 	bl	8007056 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fad1 	bl	800707e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d122      	bne.n	8006b36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f003 0304 	and.w	r3, r3, #4
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d11b      	bne.n	8006b36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f06f 0204 	mvn.w	r2, #4
 8006b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 faa4 	bl	800706a <HAL_TIM_IC_CaptureCallback>
 8006b22:	e005      	b.n	8006b30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fa96 	bl	8007056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 faa7 	bl	800707e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f003 0308 	and.w	r3, r3, #8
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d122      	bne.n	8006b8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d11b      	bne.n	8006b8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f06f 0208 	mvn.w	r2, #8
 8006b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2204      	movs	r2, #4
 8006b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	f003 0303 	and.w	r3, r3, #3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fa7a 	bl	800706a <HAL_TIM_IC_CaptureCallback>
 8006b76:	e005      	b.n	8006b84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fa6c 	bl	8007056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa7d 	bl	800707e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d122      	bne.n	8006bde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0310 	and.w	r3, r3, #16
 8006ba2:	2b10      	cmp	r3, #16
 8006ba4:	d11b      	bne.n	8006bde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f06f 0210 	mvn.w	r2, #16
 8006bae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2208      	movs	r2, #8
 8006bb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fa50 	bl	800706a <HAL_TIM_IC_CaptureCallback>
 8006bca:	e005      	b.n	8006bd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fa42 	bl	8007056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa53 	bl	800707e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d10e      	bne.n	8006c0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d107      	bne.n	8006c0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f06f 0201 	mvn.w	r2, #1
 8006c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7fa fe71 	bl	80018ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c14:	2b80      	cmp	r3, #128	; 0x80
 8006c16:	d10e      	bne.n	8006c36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c22:	2b80      	cmp	r3, #128	; 0x80
 8006c24:	d107      	bne.n	8006c36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 feb1 	bl	8007998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c44:	d10e      	bne.n	8006c64 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c50:	2b80      	cmp	r3, #128	; 0x80
 8006c52:	d107      	bne.n	8006c64 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fea4 	bl	80079ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6e:	2b40      	cmp	r3, #64	; 0x40
 8006c70:	d10e      	bne.n	8006c90 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7c:	2b40      	cmp	r3, #64	; 0x40
 8006c7e:	d107      	bne.n	8006c90 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa01 	bl	8007092 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	d10e      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d107      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f06f 0220 	mvn.w	r2, #32
 8006cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fe64 	bl	8007984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d101      	bne.n	8006cde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	e0fd      	b.n	8006eda <HAL_TIM_PWM_ConfigChannel+0x216>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b14      	cmp	r3, #20
 8006cea:	f200 80f0 	bhi.w	8006ece <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006cee:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf4:	08006d49 	.word	0x08006d49
 8006cf8:	08006ecf 	.word	0x08006ecf
 8006cfc:	08006ecf 	.word	0x08006ecf
 8006d00:	08006ecf 	.word	0x08006ecf
 8006d04:	08006d89 	.word	0x08006d89
 8006d08:	08006ecf 	.word	0x08006ecf
 8006d0c:	08006ecf 	.word	0x08006ecf
 8006d10:	08006ecf 	.word	0x08006ecf
 8006d14:	08006dcb 	.word	0x08006dcb
 8006d18:	08006ecf 	.word	0x08006ecf
 8006d1c:	08006ecf 	.word	0x08006ecf
 8006d20:	08006ecf 	.word	0x08006ecf
 8006d24:	08006e0b 	.word	0x08006e0b
 8006d28:	08006ecf 	.word	0x08006ecf
 8006d2c:	08006ecf 	.word	0x08006ecf
 8006d30:	08006ecf 	.word	0x08006ecf
 8006d34:	08006e4d 	.word	0x08006e4d
 8006d38:	08006ecf 	.word	0x08006ecf
 8006d3c:	08006ecf 	.word	0x08006ecf
 8006d40:	08006ecf 	.word	0x08006ecf
 8006d44:	08006e8d 	.word	0x08006e8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fa0e 	bl	8007170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0208 	orr.w	r2, r2, #8
 8006d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0204 	bic.w	r2, r2, #4
 8006d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6999      	ldr	r1, [r3, #24]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	691a      	ldr	r2, [r3, #16]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	619a      	str	r2, [r3, #24]
      break;
 8006d86:	e0a3      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fa6a 	bl	8007268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699a      	ldr	r2, [r3, #24]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6999      	ldr	r1, [r3, #24]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	021a      	lsls	r2, r3, #8
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	619a      	str	r2, [r3, #24]
      break;
 8006dc8:	e082      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68b9      	ldr	r1, [r7, #8]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fac3 	bl	800735c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69da      	ldr	r2, [r3, #28]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f042 0208 	orr.w	r2, r2, #8
 8006de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69da      	ldr	r2, [r3, #28]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0204 	bic.w	r2, r2, #4
 8006df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69d9      	ldr	r1, [r3, #28]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	61da      	str	r2, [r3, #28]
      break;
 8006e08:	e062      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fb1b 	bl	800744c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69da      	ldr	r2, [r3, #28]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69da      	ldr	r2, [r3, #28]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69d9      	ldr	r1, [r3, #28]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	021a      	lsls	r2, r3, #8
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	61da      	str	r2, [r3, #28]
      break;
 8006e4a:	e041      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fb58 	bl	8007508 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0208 	orr.w	r2, r2, #8
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0204 	bic.w	r2, r2, #4
 8006e76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	691a      	ldr	r2, [r3, #16]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e8a:	e021      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fb90 	bl	80075b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ea6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	021a      	lsls	r2, r3, #8
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ecc:	e000      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006ece:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop

08006ee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_TIM_ConfigClockSource+0x18>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e0a8      	b.n	800704e <HAL_TIM_ConfigClockSource+0x16a>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006f1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b40      	cmp	r3, #64	; 0x40
 8006f36:	d067      	beq.n	8007008 <HAL_TIM_ConfigClockSource+0x124>
 8006f38:	2b40      	cmp	r3, #64	; 0x40
 8006f3a:	d80b      	bhi.n	8006f54 <HAL_TIM_ConfigClockSource+0x70>
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d073      	beq.n	8007028 <HAL_TIM_ConfigClockSource+0x144>
 8006f40:	2b10      	cmp	r3, #16
 8006f42:	d802      	bhi.n	8006f4a <HAL_TIM_ConfigClockSource+0x66>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d06f      	beq.n	8007028 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006f48:	e078      	b.n	800703c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	d06c      	beq.n	8007028 <HAL_TIM_ConfigClockSource+0x144>
 8006f4e:	2b30      	cmp	r3, #48	; 0x30
 8006f50:	d06a      	beq.n	8007028 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006f52:	e073      	b.n	800703c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006f54:	2b70      	cmp	r3, #112	; 0x70
 8006f56:	d00d      	beq.n	8006f74 <HAL_TIM_ConfigClockSource+0x90>
 8006f58:	2b70      	cmp	r3, #112	; 0x70
 8006f5a:	d804      	bhi.n	8006f66 <HAL_TIM_ConfigClockSource+0x82>
 8006f5c:	2b50      	cmp	r3, #80	; 0x50
 8006f5e:	d033      	beq.n	8006fc8 <HAL_TIM_ConfigClockSource+0xe4>
 8006f60:	2b60      	cmp	r3, #96	; 0x60
 8006f62:	d041      	beq.n	8006fe8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006f64:	e06a      	b.n	800703c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6a:	d066      	beq.n	800703a <HAL_TIM_ConfigClockSource+0x156>
 8006f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f70:	d017      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006f72:	e063      	b.n	800703c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	6899      	ldr	r1, [r3, #8]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f000 fbee 	bl	8007764 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	609a      	str	r2, [r3, #8]
      break;
 8006fa0:	e04c      	b.n	800703c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	6899      	ldr	r1, [r3, #8]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f000 fbd7 	bl	8007764 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fc4:	609a      	str	r2, [r3, #8]
      break;
 8006fc6:	e039      	b.n	800703c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	6859      	ldr	r1, [r3, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f000 fb49 	bl	800766c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2150      	movs	r1, #80	; 0x50
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fba2 	bl	800772a <TIM_ITRx_SetConfig>
      break;
 8006fe6:	e029      	b.n	800703c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6818      	ldr	r0, [r3, #0]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	6859      	ldr	r1, [r3, #4]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f000 fb68 	bl	80076ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2160      	movs	r1, #96	; 0x60
 8007000:	4618      	mov	r0, r3
 8007002:	f000 fb92 	bl	800772a <TIM_ITRx_SetConfig>
      break;
 8007006:	e019      	b.n	800703c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	6859      	ldr	r1, [r3, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	461a      	mov	r2, r3
 8007016:	f000 fb29 	bl	800766c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2140      	movs	r1, #64	; 0x40
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fb82 	bl	800772a <TIM_ITRx_SetConfig>
      break;
 8007026:	e009      	b.n	800703c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4619      	mov	r1, r3
 8007032:	4610      	mov	r0, r2
 8007034:	f000 fb79 	bl	800772a <TIM_ITRx_SetConfig>
        break;
 8007038:	e000      	b.n	800703c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800703a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
	...

080070a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a2a      	ldr	r2, [pc, #168]	; (8007164 <TIM_Base_SetConfig+0xbc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d003      	beq.n	80070c8 <TIM_Base_SetConfig+0x20>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c6:	d108      	bne.n	80070da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a21      	ldr	r2, [pc, #132]	; (8007164 <TIM_Base_SetConfig+0xbc>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d00b      	beq.n	80070fa <TIM_Base_SetConfig+0x52>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e8:	d007      	beq.n	80070fa <TIM_Base_SetConfig+0x52>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a1e      	ldr	r2, [pc, #120]	; (8007168 <TIM_Base_SetConfig+0xc0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d003      	beq.n	80070fa <TIM_Base_SetConfig+0x52>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a1d      	ldr	r2, [pc, #116]	; (800716c <TIM_Base_SetConfig+0xc4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d108      	bne.n	800710c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	4313      	orrs	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a0c      	ldr	r2, [pc, #48]	; (8007164 <TIM_Base_SetConfig+0xbc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d007      	beq.n	8007148 <TIM_Base_SetConfig+0xa0>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a0b      	ldr	r2, [pc, #44]	; (8007168 <TIM_Base_SetConfig+0xc0>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d003      	beq.n	8007148 <TIM_Base_SetConfig+0xa0>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a0a      	ldr	r2, [pc, #40]	; (800716c <TIM_Base_SetConfig+0xc4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d103      	bne.n	8007150 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	691a      	ldr	r2, [r3, #16]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	615a      	str	r2, [r3, #20]
}
 8007156:	bf00      	nop
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	40012c00 	.word	0x40012c00
 8007168:	40014400 	.word	0x40014400
 800716c:	40014800 	.word	0x40014800

08007170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	f023 0201 	bic.w	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800719e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0303 	bic.w	r3, r3, #3
 80071aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f023 0302 	bic.w	r3, r3, #2
 80071bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a24      	ldr	r2, [pc, #144]	; (800725c <TIM_OC1_SetConfig+0xec>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d007      	beq.n	80071e0 <TIM_OC1_SetConfig+0x70>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a23      	ldr	r2, [pc, #140]	; (8007260 <TIM_OC1_SetConfig+0xf0>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d003      	beq.n	80071e0 <TIM_OC1_SetConfig+0x70>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a22      	ldr	r2, [pc, #136]	; (8007264 <TIM_OC1_SetConfig+0xf4>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d10c      	bne.n	80071fa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f023 0308 	bic.w	r3, r3, #8
 80071e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f023 0304 	bic.w	r3, r3, #4
 80071f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a17      	ldr	r2, [pc, #92]	; (800725c <TIM_OC1_SetConfig+0xec>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d007      	beq.n	8007212 <TIM_OC1_SetConfig+0xa2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a17      	ldr	r2, [pc, #92]	; (8007264 <TIM_OC1_SetConfig+0xf4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d003      	beq.n	8007212 <TIM_OC1_SetConfig+0xa2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a14      	ldr	r2, [pc, #80]	; (8007260 <TIM_OC1_SetConfig+0xf0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d111      	bne.n	8007236 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	621a      	str	r2, [r3, #32]
}
 8007250:	bf00      	nop
 8007252:	371c      	adds	r7, #28
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	40012c00 	.word	0x40012c00
 8007260:	40014800 	.word	0x40014800
 8007264:	40014400 	.word	0x40014400

08007268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	f023 0210 	bic.w	r2, r3, #16
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800729a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f023 0320 	bic.w	r3, r3, #32
 80072b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a22      	ldr	r2, [pc, #136]	; (8007350 <TIM_OC2_SetConfig+0xe8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d10d      	bne.n	80072e8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a19      	ldr	r2, [pc, #100]	; (8007350 <TIM_OC2_SetConfig+0xe8>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d007      	beq.n	8007300 <TIM_OC2_SetConfig+0x98>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a18      	ldr	r2, [pc, #96]	; (8007354 <TIM_OC2_SetConfig+0xec>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d003      	beq.n	8007300 <TIM_OC2_SetConfig+0x98>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a17      	ldr	r2, [pc, #92]	; (8007358 <TIM_OC2_SetConfig+0xf0>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d113      	bne.n	8007328 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800730e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	4313      	orrs	r3, r2
 800731a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	621a      	str	r2, [r3, #32]
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40012c00 	.word	0x40012c00
 8007354:	40014400 	.word	0x40014400
 8007358:	40014800 	.word	0x40014800

0800735c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800738a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 0303 	bic.w	r3, r3, #3
 8007396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	021b      	lsls	r3, r3, #8
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a21      	ldr	r2, [pc, #132]	; (8007440 <TIM_OC3_SetConfig+0xe4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d10d      	bne.n	80073da <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	021b      	lsls	r3, r3, #8
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a18      	ldr	r2, [pc, #96]	; (8007440 <TIM_OC3_SetConfig+0xe4>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d007      	beq.n	80073f2 <TIM_OC3_SetConfig+0x96>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a17      	ldr	r2, [pc, #92]	; (8007444 <TIM_OC3_SetConfig+0xe8>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d003      	beq.n	80073f2 <TIM_OC3_SetConfig+0x96>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a16      	ldr	r2, [pc, #88]	; (8007448 <TIM_OC3_SetConfig+0xec>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d113      	bne.n	800741a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	4313      	orrs	r3, r2
 800740c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	011b      	lsls	r3, r3, #4
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	621a      	str	r2, [r3, #32]
}
 8007434:	bf00      	nop
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	40012c00 	.word	0x40012c00
 8007444:	40014400 	.word	0x40014400
 8007448:	40014800 	.word	0x40014800

0800744c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800747a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	4313      	orrs	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800749a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	031b      	lsls	r3, r3, #12
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a14      	ldr	r2, [pc, #80]	; (80074fc <TIM_OC4_SetConfig+0xb0>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d007      	beq.n	80074c0 <TIM_OC4_SetConfig+0x74>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a13      	ldr	r2, [pc, #76]	; (8007500 <TIM_OC4_SetConfig+0xb4>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d003      	beq.n	80074c0 <TIM_OC4_SetConfig+0x74>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a12      	ldr	r2, [pc, #72]	; (8007504 <TIM_OC4_SetConfig+0xb8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d109      	bne.n	80074d4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	019b      	lsls	r3, r3, #6
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	621a      	str	r2, [r3, #32]
}
 80074ee:	bf00      	nop
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	40012c00 	.word	0x40012c00
 8007500:	40014400 	.word	0x40014400
 8007504:	40014800 	.word	0x40014800

08007508 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	4313      	orrs	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800754c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	041b      	lsls	r3, r3, #16
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	4313      	orrs	r3, r2
 8007558:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a13      	ldr	r2, [pc, #76]	; (80075ac <TIM_OC5_SetConfig+0xa4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d007      	beq.n	8007572 <TIM_OC5_SetConfig+0x6a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a12      	ldr	r2, [pc, #72]	; (80075b0 <TIM_OC5_SetConfig+0xa8>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d003      	beq.n	8007572 <TIM_OC5_SetConfig+0x6a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a11      	ldr	r2, [pc, #68]	; (80075b4 <TIM_OC5_SetConfig+0xac>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d109      	bne.n	8007586 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007578:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	021b      	lsls	r3, r3, #8
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	621a      	str	r2, [r3, #32]
}
 80075a0:	bf00      	nop
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	40012c00 	.word	0x40012c00
 80075b0:	40014400 	.word	0x40014400
 80075b4:	40014800 	.word	0x40014800

080075b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	021b      	lsls	r3, r3, #8
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	051b      	lsls	r3, r3, #20
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4313      	orrs	r3, r2
 800760a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a14      	ldr	r2, [pc, #80]	; (8007660 <TIM_OC6_SetConfig+0xa8>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d007      	beq.n	8007624 <TIM_OC6_SetConfig+0x6c>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a13      	ldr	r2, [pc, #76]	; (8007664 <TIM_OC6_SetConfig+0xac>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d003      	beq.n	8007624 <TIM_OC6_SetConfig+0x6c>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a12      	ldr	r2, [pc, #72]	; (8007668 <TIM_OC6_SetConfig+0xb0>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d109      	bne.n	8007638 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800762a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	029b      	lsls	r3, r3, #10
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	4313      	orrs	r3, r2
 8007636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	621a      	str	r2, [r3, #32]
}
 8007652:	bf00      	nop
 8007654:	371c      	adds	r7, #28
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	40012c00 	.word	0x40012c00
 8007664:	40014400 	.word	0x40014400
 8007668:	40014800 	.word	0x40014800

0800766c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	f023 0201 	bic.w	r2, r3, #1
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f023 030a 	bic.w	r3, r3, #10
 80076a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	621a      	str	r2, [r3, #32]
}
 80076be:	bf00      	nop
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b087      	sub	sp, #28
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	f023 0210 	bic.w	r2, r3, #16
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	031b      	lsls	r3, r3, #12
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007706:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	621a      	str	r2, [r3, #32]
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800772a:	b480      	push	{r7}
 800772c:	b085      	sub	sp, #20
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	f043 0307 	orr.w	r3, r3, #7
 8007750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	609a      	str	r2, [r3, #8]
}
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800777e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	021a      	lsls	r2, r3, #8
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	431a      	orrs	r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4313      	orrs	r3, r2
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	609a      	str	r2, [r3, #8]
}
 8007798:	bf00      	nop
 800779a:	371c      	adds	r7, #28
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e04a      	b.n	8007852 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a1f      	ldr	r2, [pc, #124]	; (8007860 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d108      	bne.n	80077f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a12      	ldr	r2, [pc, #72]	; (8007860 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d004      	beq.n	8007826 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007824:	d10c      	bne.n	8007840 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800782c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	4313      	orrs	r3, r2
 8007836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	40012c00 	.word	0x40012c00

08007864 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007878:	2b01      	cmp	r3, #1
 800787a:	d101      	bne.n	8007880 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800787c:	2302      	movs	r3, #2
 800787e:	e078      	b.n	8007972 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	4313      	orrs	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e6:	4313      	orrs	r3, r2
 80078e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	041b      	lsls	r3, r3, #16
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a20      	ldr	r2, [pc, #128]	; (8007980 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d106      	bne.n	8007912 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a1a      	ldr	r2, [pc, #104]	; (8007980 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d121      	bne.n	8007960 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007926:	051b      	lsls	r3, r3, #20
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	4313      	orrs	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a0c      	ldr	r2, [pc, #48]	; (8007980 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d106      	bne.n	8007960 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	4313      	orrs	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	40012c00 	.word	0x40012c00

08007984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80079c8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80079cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	4313      	orrs	r3, r2
 80079dc:	b29a      	uxth	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80079fa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80079fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	43db      	mvns	r3, r3
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	4013      	ands	r3, r2
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a28:	b084      	sub	sp, #16
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	f107 0014 	add.w	r0, r7, #20
 8007a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff ffb0 	bl	80079c0 <USB_EnableGlobalInt>

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a6c:	b004      	add	sp, #16
 8007a6e:	4770      	bx	lr

08007a70 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b09d      	sub	sp, #116	; 0x74
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a96:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	78db      	ldrb	r3, [r3, #3]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d81f      	bhi.n	8007ae2 <USB_ActivateEndpoint+0x72>
 8007aa2:	a201      	add	r2, pc, #4	; (adr r2, 8007aa8 <USB_ActivateEndpoint+0x38>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007ab9 	.word	0x08007ab9
 8007aac:	08007ad5 	.word	0x08007ad5
 8007ab0:	08007aeb 	.word	0x08007aeb
 8007ab4:	08007ac7 	.word	0x08007ac7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007ab8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ac0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007ac4:	e012      	b.n	8007aec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007ac6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007aca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007ace:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007ad2:	e00b      	b.n	8007aec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007ad4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007ad8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007adc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007ae0:	e004      	b.n	8007aec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007ae8:	e000      	b.n	8007aec <USB_ActivateEndpoint+0x7c>
      break;
 8007aea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	441a      	add	r2, r3
 8007af6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	b21b      	sxth	r3, r3
 8007b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b26:	b21a      	sxth	r2, r3
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	b21b      	sxth	r3, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	b21b      	sxth	r3, r3
 8007b32:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	441a      	add	r2, r3
 8007b40:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	7b1b      	ldrb	r3, [r3, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f040 8149 	bne.w	8007df4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	785b      	ldrb	r3, [r3, #1]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 8084 	beq.w	8007c74 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	61bb      	str	r3, [r7, #24]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	61bb      	str	r3, [r7, #24]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	00da      	lsls	r2, r3, #3
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b8e:	617b      	str	r3, [r7, #20]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	88db      	ldrh	r3, [r3, #6]
 8007b94:	085b      	lsrs	r3, r3, #1
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	827b      	strh	r3, [r7, #18]
 8007bae:	8a7b      	ldrh	r3, [r7, #18]
 8007bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01b      	beq.n	8007bf0 <USB_ActivateEndpoint+0x180>
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bce:	823b      	strh	r3, [r7, #16]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	441a      	add	r2, r3
 8007bda:	8a3b      	ldrh	r3, [r7, #16]
 8007bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	78db      	ldrb	r3, [r3, #3]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d020      	beq.n	8007c3a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c0e:	81bb      	strh	r3, [r7, #12]
 8007c10:	89bb      	ldrh	r3, [r7, #12]
 8007c12:	f083 0320 	eor.w	r3, r3, #32
 8007c16:	81bb      	strh	r3, [r7, #12]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	441a      	add	r2, r3
 8007c22:	89bb      	ldrh	r3, [r7, #12]
 8007c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	8013      	strh	r3, [r2, #0]
 8007c38:	e2bf      	b.n	80081ba <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c50:	81fb      	strh	r3, [r7, #14]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	441a      	add	r2, r3
 8007c5c:	89fb      	ldrh	r3, [r7, #14]
 8007c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	8013      	strh	r3, [r2, #0]
 8007c72:	e2a2      	b.n	80081ba <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	633b      	str	r3, [r7, #48]	; 0x30
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	461a      	mov	r2, r3
 8007c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c84:	4413      	add	r3, r2
 8007c86:	633b      	str	r3, [r7, #48]	; 0x30
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	00da      	lsls	r2, r3, #3
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	4413      	add	r3, r2
 8007c92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	88db      	ldrh	r3, [r3, #6]
 8007c9c:	085b      	lsrs	r3, r3, #1
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	4413      	add	r3, r2
 8007cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	00da      	lsls	r2, r3, #3
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d112      	bne.n	8007cfa <USB_ActivateEndpoint+0x28a>
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	801a      	strh	r2, [r3, #0]
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	801a      	strh	r2, [r3, #0]
 8007cf8:	e02f      	b.n	8007d5a <USB_ActivateEndpoint+0x2ea>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	2b3e      	cmp	r3, #62	; 0x3e
 8007d00:	d813      	bhi.n	8007d2a <USB_ActivateEndpoint+0x2ba>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	085b      	lsrs	r3, r3, #1
 8007d08:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <USB_ActivateEndpoint+0x2ac>
 8007d16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d18:	3301      	adds	r3, #1
 8007d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	029b      	lsls	r3, r3, #10
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	801a      	strh	r2, [r3, #0]
 8007d28:	e017      	b.n	8007d5a <USB_ActivateEndpoint+0x2ea>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	095b      	lsrs	r3, r3, #5
 8007d30:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f003 031f 	and.w	r3, r3, #31
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d102      	bne.n	8007d44 <USB_ActivateEndpoint+0x2d4>
 8007d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d40:	3b01      	subs	r3, #1
 8007d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	029b      	lsls	r3, r3, #10
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	847b      	strh	r3, [r7, #34]	; 0x22
 8007d68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d01b      	beq.n	8007daa <USB_ActivateEndpoint+0x33a>
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d88:	843b      	strh	r3, [r7, #32]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	441a      	add	r2, r3
 8007d94:	8c3b      	ldrh	r3, [r7, #32]
 8007d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc0:	83fb      	strh	r3, [r7, #30]
 8007dc2:	8bfb      	ldrh	r3, [r7, #30]
 8007dc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007dc8:	83fb      	strh	r3, [r7, #30]
 8007dca:	8bfb      	ldrh	r3, [r7, #30]
 8007dcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007dd0:	83fb      	strh	r3, [r7, #30]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	441a      	add	r2, r3
 8007ddc:	8bfb      	ldrh	r3, [r7, #30]
 8007dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	8013      	strh	r3, [r2, #0]
 8007df2:	e1e2      	b.n	80081ba <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	441a      	add	r2, r3
 8007e18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e24:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	663b      	str	r3, [r7, #96]	; 0x60
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e40:	4413      	add	r3, r2
 8007e42:	663b      	str	r3, [r7, #96]	; 0x60
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	00da      	lsls	r2, r3, #3
 8007e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	891b      	ldrh	r3, [r3, #8]
 8007e58:	085b      	lsrs	r3, r3, #1
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e62:	801a      	strh	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e74:	4413      	add	r3, r2
 8007e76:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	00da      	lsls	r2, r3, #3
 8007e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e80:	4413      	add	r3, r2
 8007e82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e86:	657b      	str	r3, [r7, #84]	; 0x54
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	895b      	ldrh	r3, [r3, #10]
 8007e8c:	085b      	lsrs	r3, r3, #1
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e96:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	785b      	ldrb	r3, [r3, #1]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f040 80b1 	bne.w	8008004 <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007eb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01d      	beq.n	8007efa <USB_ActivateEndpoint+0x48a>
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	441a      	add	r2, r3
 8007ee2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007f08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01b      	beq.n	8007f4a <USB_ActivateEndpoint+0x4da>
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f28:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	441a      	add	r2, r3
 8007f34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f60:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	441a      	add	r2, r3
 8007f6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f98:	873b      	strh	r3, [r7, #56]	; 0x38
 8007f9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007f9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fa0:	873b      	strh	r3, [r7, #56]	; 0x38
 8007fa2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007fa4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007fa8:	873b      	strh	r3, [r7, #56]	; 0x38
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	441a      	add	r2, r3
 8007fb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fe0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	441a      	add	r2, r3
 8007fec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	8013      	strh	r3, [r2, #0]
 8008002:	e0da      	b.n	80081ba <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8008014:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d01d      	beq.n	800805c <USB_ActivateEndpoint+0x5ec>
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29b      	uxth	r3, r3
 800802e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008036:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	441a      	add	r2, r3
 8008044:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800804c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008058:	b29b      	uxth	r3, r3
 800805a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800806c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01d      	beq.n	80080b4 <USB_ActivateEndpoint+0x644>
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	441a      	add	r2, r3
 800809c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80080a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	441a      	add	r2, r3
 80080d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80080dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	78db      	ldrb	r3, [r3, #3]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d024      	beq.n	8008142 <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	b29b      	uxth	r3, r3
 8008106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800810a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800810e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008112:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008116:	f083 0320 	eor.w	r3, r3, #32
 800811a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	441a      	add	r2, r3
 8008128:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800812c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813c:	b29b      	uxth	r3, r3
 800813e:	8013      	strh	r3, [r2, #0]
 8008140:	e01d      	b.n	800817e <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008158:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	441a      	add	r2, r3
 8008166:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800816a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817a:	b29b      	uxth	r3, r3
 800817c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008194:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	441a      	add	r2, r3
 80081a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80081a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80081ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3774      	adds	r7, #116	; 0x74
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop

080081cc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b08d      	sub	sp, #52	; 0x34
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	7b1b      	ldrb	r3, [r3, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f040 808e 	bne.w	80082fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	785b      	ldrb	r3, [r3, #1]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d044      	beq.n	8008272 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	881b      	ldrh	r3, [r3, #0]
 80081f4:	81bb      	strh	r3, [r7, #12]
 80081f6:	89bb      	ldrh	r3, [r7, #12]
 80081f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d01b      	beq.n	8008238 <USB_DeactivateEndpoint+0x6c>
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	b29b      	uxth	r3, r3
 800820e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008216:	817b      	strh	r3, [r7, #10]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	441a      	add	r2, r3
 8008222:	897b      	ldrh	r3, [r7, #10]
 8008224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008234:	b29b      	uxth	r3, r3
 8008236:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	b29b      	uxth	r3, r3
 8008246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800824a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800824e:	813b      	strh	r3, [r7, #8]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	441a      	add	r2, r3
 800825a:	893b      	ldrh	r3, [r7, #8]
 800825c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800826c:	b29b      	uxth	r3, r3
 800826e:	8013      	strh	r3, [r2, #0]
 8008270:	e192      	b.n	8008598 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	827b      	strh	r3, [r7, #18]
 8008280:	8a7b      	ldrh	r3, [r7, #18]
 8008282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d01b      	beq.n	80082c2 <USB_DeactivateEndpoint+0xf6>
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	b29b      	uxth	r3, r3
 8008298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800829c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082a0:	823b      	strh	r3, [r7, #16]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	441a      	add	r2, r3
 80082ac:	8a3b      	ldrh	r3, [r7, #16]
 80082ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082be:	b29b      	uxth	r3, r3
 80082c0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d8:	81fb      	strh	r3, [r7, #14]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	441a      	add	r2, r3
 80082e4:	89fb      	ldrh	r3, [r7, #14]
 80082e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	8013      	strh	r3, [r2, #0]
 80082fa:	e14d      	b.n	8008598 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	785b      	ldrb	r3, [r3, #1]
 8008300:	2b00      	cmp	r3, #0
 8008302:	f040 80a5 	bne.w	8008450 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	843b      	strh	r3, [r7, #32]
 8008314:	8c3b      	ldrh	r3, [r7, #32]
 8008316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d01b      	beq.n	8008356 <USB_DeactivateEndpoint+0x18a>
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	b29b      	uxth	r3, r3
 800832c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008334:	83fb      	strh	r3, [r7, #30]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	441a      	add	r2, r3
 8008340:	8bfb      	ldrh	r3, [r7, #30]
 8008342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800834a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800834e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008352:	b29b      	uxth	r3, r3
 8008354:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	83bb      	strh	r3, [r7, #28]
 8008364:	8bbb      	ldrh	r3, [r7, #28]
 8008366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836a:	2b00      	cmp	r3, #0
 800836c:	d01b      	beq.n	80083a6 <USB_DeactivateEndpoint+0x1da>
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	b29b      	uxth	r3, r3
 800837c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008384:	837b      	strh	r3, [r7, #26]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	441a      	add	r2, r3
 8008390:	8b7b      	ldrh	r3, [r7, #26]
 8008392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800839a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800839e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083bc:	833b      	strh	r3, [r7, #24]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	441a      	add	r2, r3
 80083c8:	8b3b      	ldrh	r3, [r7, #24]
 80083ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083da:	b29b      	uxth	r3, r3
 80083dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f4:	82fb      	strh	r3, [r7, #22]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	441a      	add	r2, r3
 8008400:	8afb      	ldrh	r3, [r7, #22]
 8008402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800840a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800840e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008412:	b29b      	uxth	r3, r3
 8008414:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	b29b      	uxth	r3, r3
 8008424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800842c:	82bb      	strh	r3, [r7, #20]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	441a      	add	r2, r3
 8008438:	8abb      	ldrh	r3, [r7, #20]
 800843a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800843e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800844a:	b29b      	uxth	r3, r3
 800844c:	8013      	strh	r3, [r2, #0]
 800844e:	e0a3      	b.n	8008598 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800845e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01b      	beq.n	80084a0 <USB_DeactivateEndpoint+0x2d4>
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	b29b      	uxth	r3, r3
 8008476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800847a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800847e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	441a      	add	r2, r3
 800848a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800848c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800849c:	b29b      	uxth	r3, r3
 800849e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80084ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80084b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01b      	beq.n	80084f0 <USB_DeactivateEndpoint+0x324>
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	441a      	add	r2, r3
 80084da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008506:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	441a      	add	r2, r3
 8008512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800851c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008524:	b29b      	uxth	r3, r3
 8008526:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29b      	uxth	r3, r3
 8008536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800853a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800853e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	441a      	add	r2, r3
 800854a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800854c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855c:	b29b      	uxth	r3, r3
 800855e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	b29b      	uxth	r3, r3
 800856e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008576:	847b      	strh	r3, [r7, #34]	; 0x22
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	441a      	add	r2, r3
 8008582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800858c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008594:	b29b      	uxth	r3, r3
 8008596:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3734      	adds	r7, #52	; 0x34
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b0a0      	sub	sp, #128	; 0x80
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	785b      	ldrb	r3, [r3, #1]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	f040 81a1 	bne.w	80088fc <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	699a      	ldr	r2, [r3, #24]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d909      	bls.n	80085da <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	699a      	ldr	r2, [r3, #24]
 80085d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085d2:	1ad2      	subs	r2, r2, r3
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	619a      	str	r2, [r3, #24]
 80085d8:	e005      	b.n	80085e6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2200      	movs	r2, #0
 80085e4:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	7b1b      	ldrb	r3, [r3, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d11f      	bne.n	800862e <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	6959      	ldr	r1, [r3, #20]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	88da      	ldrh	r2, [r3, #6]
 80085f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fc3f 	bl	8008e7e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	613b      	str	r3, [r7, #16]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800860a:	b29b      	uxth	r3, r3
 800860c:	461a      	mov	r2, r3
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	4413      	add	r3, r2
 8008612:	613b      	str	r3, [r7, #16]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	00da      	lsls	r2, r3, #3
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	4413      	add	r3, r2
 800861e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008626:	b29a      	uxth	r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	801a      	strh	r2, [r3, #0]
 800862c:	e141      	b.n	80088b2 <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b29b      	uxth	r3, r3
 800863c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	d076      	beq.n	8008732 <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	785b      	ldrb	r3, [r3, #1]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d153      	bne.n	80086f8 <USB_EPStartXfer+0x152>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	61fb      	str	r3, [r7, #28]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800865a:	b29b      	uxth	r3, r3
 800865c:	461a      	mov	r2, r3
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	4413      	add	r3, r2
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	00da      	lsls	r2, r3, #3
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	4413      	add	r3, r2
 800866e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008672:	61bb      	str	r3, [r7, #24]
 8008674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008676:	2b00      	cmp	r3, #0
 8008678:	d112      	bne.n	80086a0 <USB_EPStartXfer+0xfa>
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008684:	b29a      	uxth	r2, r3
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	801a      	strh	r2, [r3, #0]
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008698:	b29a      	uxth	r2, r3
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	801a      	strh	r2, [r3, #0]
 800869e:	e043      	b.n	8008728 <USB_EPStartXfer+0x182>
 80086a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086a2:	2b3e      	cmp	r3, #62	; 0x3e
 80086a4:	d811      	bhi.n	80086ca <USB_EPStartXfer+0x124>
 80086a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086a8:	085b      	lsrs	r3, r3, #1
 80086aa:	677b      	str	r3, [r7, #116]	; 0x74
 80086ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d002      	beq.n	80086bc <USB_EPStartXfer+0x116>
 80086b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086b8:	3301      	adds	r3, #1
 80086ba:	677b      	str	r3, [r7, #116]	; 0x74
 80086bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086be:	b29b      	uxth	r3, r3
 80086c0:	029b      	lsls	r3, r3, #10
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	801a      	strh	r2, [r3, #0]
 80086c8:	e02e      	b.n	8008728 <USB_EPStartXfer+0x182>
 80086ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086cc:	095b      	lsrs	r3, r3, #5
 80086ce:	677b      	str	r3, [r7, #116]	; 0x74
 80086d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086d2:	f003 031f 	and.w	r3, r3, #31
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d102      	bne.n	80086e0 <USB_EPStartXfer+0x13a>
 80086da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086dc:	3b01      	subs	r3, #1
 80086de:	677b      	str	r3, [r7, #116]	; 0x74
 80086e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	029b      	lsls	r3, r3, #10
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	801a      	strh	r2, [r3, #0]
 80086f6:	e017      	b.n	8008728 <USB_EPStartXfer+0x182>
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	785b      	ldrb	r3, [r3, #1]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d113      	bne.n	8008728 <USB_EPStartXfer+0x182>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008706:	b29b      	uxth	r3, r3
 8008708:	461a      	mov	r2, r3
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	4413      	add	r3, r2
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	00da      	lsls	r2, r3, #3
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	4413      	add	r3, r2
 800871a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800871e:	623b      	str	r3, [r7, #32]
 8008720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008722:	b29a      	uxth	r2, r3
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	895b      	ldrh	r3, [r3, #10]
 800872c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8008730:	e075      	b.n	800881e <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	785b      	ldrb	r3, [r3, #1]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d153      	bne.n	80087e2 <USB_EPStartXfer+0x23c>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008744:	b29b      	uxth	r3, r3
 8008746:	461a      	mov	r2, r3
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	4413      	add	r3, r2
 800874c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	00da      	lsls	r2, r3, #3
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	4413      	add	r3, r2
 8008758:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
 800875e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008760:	2b00      	cmp	r3, #0
 8008762:	d112      	bne.n	800878a <USB_EPStartXfer+0x1e4>
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	b29b      	uxth	r3, r3
 800876a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800876e:	b29a      	uxth	r2, r3
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	801a      	strh	r2, [r3, #0]
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	b29b      	uxth	r3, r3
 800877a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800877e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008782:	b29a      	uxth	r2, r3
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	801a      	strh	r2, [r3, #0]
 8008788:	e045      	b.n	8008816 <USB_EPStartXfer+0x270>
 800878a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800878c:	2b3e      	cmp	r3, #62	; 0x3e
 800878e:	d811      	bhi.n	80087b4 <USB_EPStartXfer+0x20e>
 8008790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008792:	085b      	lsrs	r3, r3, #1
 8008794:	673b      	str	r3, [r7, #112]	; 0x70
 8008796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <USB_EPStartXfer+0x200>
 80087a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087a2:	3301      	adds	r3, #1
 80087a4:	673b      	str	r3, [r7, #112]	; 0x70
 80087a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	029b      	lsls	r3, r3, #10
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b0:	801a      	strh	r2, [r3, #0]
 80087b2:	e030      	b.n	8008816 <USB_EPStartXfer+0x270>
 80087b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087b6:	095b      	lsrs	r3, r3, #5
 80087b8:	673b      	str	r3, [r7, #112]	; 0x70
 80087ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087bc:	f003 031f 	and.w	r3, r3, #31
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d102      	bne.n	80087ca <USB_EPStartXfer+0x224>
 80087c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087c6:	3b01      	subs	r3, #1
 80087c8:	673b      	str	r3, [r7, #112]	; 0x70
 80087ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	029b      	lsls	r3, r3, #10
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087da:	b29a      	uxth	r2, r3
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	801a      	strh	r2, [r3, #0]
 80087e0:	e019      	b.n	8008816 <USB_EPStartXfer+0x270>
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d115      	bne.n	8008816 <USB_EPStartXfer+0x270>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	637b      	str	r3, [r7, #52]	; 0x34
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	461a      	mov	r2, r3
 80087f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fa:	4413      	add	r3, r2
 80087fc:	637b      	str	r3, [r7, #52]	; 0x34
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	00da      	lsls	r2, r3, #3
 8008804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008806:	4413      	add	r3, r2
 8008808:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800880c:	633b      	str	r3, [r7, #48]	; 0x30
 800880e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008810:	b29a      	uxth	r2, r3
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	891b      	ldrh	r3, [r3, #8]
 800881a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	6959      	ldr	r1, [r3, #20]
 8008822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008824:	b29b      	uxth	r3, r3
 8008826:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fb27 	bl	8008e7e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	785b      	ldrb	r3, [r3, #1]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d11c      	bne.n	8008872 <USB_EPStartXfer+0x2cc>
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800884a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800884e:	82bb      	strh	r3, [r7, #20]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	441a      	add	r2, r3
 800885a:	8abb      	ldrh	r3, [r7, #20]
 800885c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008868:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800886c:	b29b      	uxth	r3, r3
 800886e:	8013      	strh	r3, [r2, #0]
 8008870:	e01f      	b.n	80088b2 <USB_EPStartXfer+0x30c>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	785b      	ldrb	r3, [r3, #1]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d11b      	bne.n	80088b2 <USB_EPStartXfer+0x30c>
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29b      	uxth	r3, r3
 8008888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800888c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008890:	82fb      	strh	r3, [r7, #22]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	441a      	add	r2, r3
 800889c:	8afb      	ldrh	r3, [r7, #22]
 800889e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088c8:	817b      	strh	r3, [r7, #10]
 80088ca:	897b      	ldrh	r3, [r7, #10]
 80088cc:	f083 0310 	eor.w	r3, r3, #16
 80088d0:	817b      	strh	r3, [r7, #10]
 80088d2:	897b      	ldrh	r3, [r7, #10]
 80088d4:	f083 0320 	eor.w	r3, r3, #32
 80088d8:	817b      	strh	r3, [r7, #10]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	441a      	add	r2, r3
 80088e4:	897b      	ldrh	r3, [r7, #10]
 80088e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	8013      	strh	r3, [r2, #0]
 80088fa:	e175      	b.n	8008be8 <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	699a      	ldr	r2, [r3, #24]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	429a      	cmp	r2, r3
 8008906:	d909      	bls.n	800891c <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008914:	1ad2      	subs	r2, r2, r3
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	619a      	str	r2, [r3, #24]
 800891a:	e005      	b.n	8008928 <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2200      	movs	r2, #0
 8008926:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	7b1b      	ldrb	r3, [r3, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d153      	bne.n	80089d8 <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	643b      	str	r3, [r7, #64]	; 0x40
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800893a:	b29b      	uxth	r3, r3
 800893c:	461a      	mov	r2, r3
 800893e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008940:	4413      	add	r3, r2
 8008942:	643b      	str	r3, [r7, #64]	; 0x40
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	00da      	lsls	r2, r3, #3
 800894a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800894c:	4413      	add	r3, r2
 800894e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008956:	2b00      	cmp	r3, #0
 8008958:	d112      	bne.n	8008980 <USB_EPStartXfer+0x3da>
 800895a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	b29b      	uxth	r3, r3
 8008960:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008964:	b29a      	uxth	r2, r3
 8008966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008968:	801a      	strh	r2, [r3, #0]
 800896a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	b29b      	uxth	r3, r3
 8008970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008978:	b29a      	uxth	r2, r3
 800897a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800897c:	801a      	strh	r2, [r3, #0]
 800897e:	e10f      	b.n	8008ba0 <USB_EPStartXfer+0x5fa>
 8008980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008982:	2b3e      	cmp	r3, #62	; 0x3e
 8008984:	d811      	bhi.n	80089aa <USB_EPStartXfer+0x404>
 8008986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008988:	085b      	lsrs	r3, r3, #1
 800898a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800898c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	2b00      	cmp	r3, #0
 8008994:	d002      	beq.n	800899c <USB_EPStartXfer+0x3f6>
 8008996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008998:	3301      	adds	r3, #1
 800899a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800899c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800899e:	b29b      	uxth	r3, r3
 80089a0:	029b      	lsls	r3, r3, #10
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a6:	801a      	strh	r2, [r3, #0]
 80089a8:	e0fa      	b.n	8008ba0 <USB_EPStartXfer+0x5fa>
 80089aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ac:	095b      	lsrs	r3, r3, #5
 80089ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089b2:	f003 031f 	and.w	r3, r3, #31
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d102      	bne.n	80089c0 <USB_EPStartXfer+0x41a>
 80089ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089bc:	3b01      	subs	r3, #1
 80089be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	029b      	lsls	r3, r3, #10
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d4:	801a      	strh	r2, [r3, #0]
 80089d6:	e0e3      	b.n	8008ba0 <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	785b      	ldrb	r3, [r3, #1]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d153      	bne.n	8008a88 <USB_EPStartXfer+0x4e2>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	461a      	mov	r2, r3
 80089ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089f0:	4413      	add	r3, r2
 80089f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	00da      	lsls	r2, r3, #3
 80089fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089fc:	4413      	add	r3, r2
 80089fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a02:	657b      	str	r3, [r7, #84]	; 0x54
 8008a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d112      	bne.n	8008a30 <USB_EPStartXfer+0x48a>
 8008a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a18:	801a      	strh	r2, [r3, #0]
 8008a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a2c:	801a      	strh	r2, [r3, #0]
 8008a2e:	e045      	b.n	8008abc <USB_EPStartXfer+0x516>
 8008a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a32:	2b3e      	cmp	r3, #62	; 0x3e
 8008a34:	d811      	bhi.n	8008a5a <USB_EPStartXfer+0x4b4>
 8008a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a38:	085b      	lsrs	r3, r3, #1
 8008a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <USB_EPStartXfer+0x4a6>
 8008a46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a48:	3301      	adds	r3, #1
 8008a4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	029b      	lsls	r3, r3, #10
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a56:	801a      	strh	r2, [r3, #0]
 8008a58:	e030      	b.n	8008abc <USB_EPStartXfer+0x516>
 8008a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a5c:	095b      	lsrs	r3, r3, #5
 8008a5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a62:	f003 031f 	and.w	r3, r3, #31
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d102      	bne.n	8008a70 <USB_EPStartXfer+0x4ca>
 8008a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	029b      	lsls	r3, r3, #10
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a84:	801a      	strh	r2, [r3, #0]
 8008a86:	e019      	b.n	8008abc <USB_EPStartXfer+0x516>
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	785b      	ldrb	r3, [r3, #1]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d115      	bne.n	8008abc <USB_EPStartXfer+0x516>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	663b      	str	r3, [r7, #96]	; 0x60
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aa0:	4413      	add	r3, r2
 8008aa2:	663b      	str	r3, [r7, #96]	; 0x60
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	00da      	lsls	r2, r3, #3
 8008aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aac:	4413      	add	r3, r2
 8008aae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aba:	801a      	strh	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	653b      	str	r3, [r7, #80]	; 0x50
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	785b      	ldrb	r3, [r3, #1]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d153      	bne.n	8008b70 <USB_EPStartXfer+0x5ca>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad8:	4413      	add	r3, r2
 8008ada:	64bb      	str	r3, [r7, #72]	; 0x48
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	00da      	lsls	r2, r3, #3
 8008ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008aea:	647b      	str	r3, [r7, #68]	; 0x44
 8008aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d112      	bne.n	8008b18 <USB_EPStartXfer+0x572>
 8008af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b00:	801a      	strh	r2, [r3, #0]
 8008b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b14:	801a      	strh	r2, [r3, #0]
 8008b16:	e043      	b.n	8008ba0 <USB_EPStartXfer+0x5fa>
 8008b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b1a:	2b3e      	cmp	r3, #62	; 0x3e
 8008b1c:	d811      	bhi.n	8008b42 <USB_EPStartXfer+0x59c>
 8008b1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b20:	085b      	lsrs	r3, r3, #1
 8008b22:	667b      	str	r3, [r7, #100]	; 0x64
 8008b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <USB_EPStartXfer+0x58e>
 8008b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b30:	3301      	adds	r3, #1
 8008b32:	667b      	str	r3, [r7, #100]	; 0x64
 8008b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	029b      	lsls	r3, r3, #10
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b3e:	801a      	strh	r2, [r3, #0]
 8008b40:	e02e      	b.n	8008ba0 <USB_EPStartXfer+0x5fa>
 8008b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b44:	095b      	lsrs	r3, r3, #5
 8008b46:	667b      	str	r3, [r7, #100]	; 0x64
 8008b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b4a:	f003 031f 	and.w	r3, r3, #31
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d102      	bne.n	8008b58 <USB_EPStartXfer+0x5b2>
 8008b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b54:	3b01      	subs	r3, #1
 8008b56:	667b      	str	r3, [r7, #100]	; 0x64
 8008b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	029b      	lsls	r3, r3, #10
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b6c:	801a      	strh	r2, [r3, #0]
 8008b6e:	e017      	b.n	8008ba0 <USB_EPStartXfer+0x5fa>
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	785b      	ldrb	r3, [r3, #1]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d113      	bne.n	8008ba0 <USB_EPStartXfer+0x5fa>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	461a      	mov	r2, r3
 8008b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b84:	4413      	add	r3, r2
 8008b86:	653b      	str	r3, [r7, #80]	; 0x50
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	00da      	lsls	r2, r3, #3
 8008b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b90:	4413      	add	r3, r2
 8008b92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b9e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb6:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008bb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008bba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bbe:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008bc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008bc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008bc6:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	441a      	add	r2, r3
 8008bd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3780      	adds	r7, #128	; 0x80
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	785b      	ldrb	r3, [r3, #1]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d020      	beq.n	8008c46 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c1a:	81bb      	strh	r3, [r7, #12]
 8008c1c:	89bb      	ldrh	r3, [r7, #12]
 8008c1e:	f083 0310 	eor.w	r3, r3, #16
 8008c22:	81bb      	strh	r3, [r7, #12]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	441a      	add	r2, r3
 8008c2e:	89bb      	ldrh	r3, [r7, #12]
 8008c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	8013      	strh	r3, [r2, #0]
 8008c44:	e01f      	b.n	8008c86 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c5c:	81fb      	strh	r3, [r7, #14]
 8008c5e:	89fb      	ldrh	r3, [r7, #14]
 8008c60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c64:	81fb      	strh	r3, [r7, #14]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	441a      	add	r2, r3
 8008c70:	89fb      	ldrh	r3, [r7, #14]
 8008c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	7b1b      	ldrb	r3, [r3, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f040 809d 	bne.w	8008de2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	785b      	ldrb	r3, [r3, #1]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d04c      	beq.n	8008d4a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	823b      	strh	r3, [r7, #16]
 8008cbe:	8a3b      	ldrh	r3, [r7, #16]
 8008cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d01b      	beq.n	8008d00 <USB_EPClearStall+0x6c>
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cde:	81fb      	strh	r3, [r7, #14]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	441a      	add	r2, r3
 8008cea:	89fb      	ldrh	r3, [r7, #14]
 8008cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	78db      	ldrb	r3, [r3, #3]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d06c      	beq.n	8008de2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d1e:	81bb      	strh	r3, [r7, #12]
 8008d20:	89bb      	ldrh	r3, [r7, #12]
 8008d22:	f083 0320 	eor.w	r3, r3, #32
 8008d26:	81bb      	strh	r3, [r7, #12]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	441a      	add	r2, r3
 8008d32:	89bb      	ldrh	r3, [r7, #12]
 8008d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	8013      	strh	r3, [r2, #0]
 8008d48:	e04b      	b.n	8008de2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	82fb      	strh	r3, [r7, #22]
 8008d58:	8afb      	ldrh	r3, [r7, #22]
 8008d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d01b      	beq.n	8008d9a <USB_EPClearStall+0x106>
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d78:	82bb      	strh	r3, [r7, #20]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	441a      	add	r2, r3
 8008d84:	8abb      	ldrh	r3, [r7, #20]
 8008d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db0:	827b      	strh	r3, [r7, #18]
 8008db2:	8a7b      	ldrh	r3, [r7, #18]
 8008db4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008db8:	827b      	strh	r3, [r7, #18]
 8008dba:	8a7b      	ldrh	r3, [r7, #18]
 8008dbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008dc0:	827b      	strh	r3, [r7, #18]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	441a      	add	r2, r3
 8008dcc:	8a7b      	ldrh	r3, [r7, #18]
 8008dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	371c      	adds	r7, #28
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d103      	bne.n	8008e0a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2280      	movs	r2, #128	; 0x80
 8008e06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008e58:	68fb      	ldr	r3, [r7, #12]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b083      	sub	sp, #12
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b08d      	sub	sp, #52	; 0x34
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	80fb      	strh	r3, [r7, #6]
 8008e90:	4613      	mov	r3, r2
 8008e92:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008e94:	88bb      	ldrh	r3, [r7, #4]
 8008e96:	3301      	adds	r3, #1
 8008e98:	085b      	lsrs	r3, r3, #1
 8008e9a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ea4:	88fa      	ldrh	r2, [r7, #6]
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eae:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eb4:	e01b      	b.n	8008eee <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	461a      	mov	r2, r3
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	3302      	adds	r3, #2
 8008ee0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eea:	3b01      	subs	r3, #1
 8008eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1e0      	bne.n	8008eb6 <USB_WritePMA+0x38>
  }
}
 8008ef4:	bf00      	nop
 8008ef6:	3734      	adds	r7, #52	; 0x34
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b08b      	sub	sp, #44	; 0x2c
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	460b      	mov	r3, r1
 8008f10:	80fb      	strh	r3, [r7, #6]
 8008f12:	4613      	mov	r3, r2
 8008f14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008f16:	88bb      	ldrh	r3, [r7, #4]
 8008f18:	085b      	lsrs	r3, r3, #1
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f26:	88fa      	ldrh	r2, [r7, #6]
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f30:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
 8008f36:	e018      	b.n	8008f6a <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	3302      	adds	r3, #2
 8008f44:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	3301      	adds	r3, #1
 8008f52:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	0a1b      	lsrs	r3, r3, #8
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	3301      	adds	r3, #1
 8008f62:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	3b01      	subs	r3, #1
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e3      	bne.n	8008f38 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008f70:	88bb      	ldrh	r3, [r7, #4]
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d007      	beq.n	8008f8c <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	701a      	strb	r2, [r3, #0]
  }
}
 8008f8c:	bf00      	nop
 8008f8e:	372c      	adds	r7, #44	; 0x2c
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008fa4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008fa8:	f008 fbf6 	bl	8011798 <USBD_static_malloc>
 8008fac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d105      	bne.n	8008fc0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	e066      	b.n	800908e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	7c1b      	ldrb	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d119      	bne.n	8009004 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	2181      	movs	r1, #129	; 0x81
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f008 fa8a 	bl	80114f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fe8:	2202      	movs	r2, #2
 8008fea:	2101      	movs	r1, #1
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f008 fa80 	bl	80114f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2210      	movs	r2, #16
 8008ffe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009002:	e016      	b.n	8009032 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009004:	2340      	movs	r3, #64	; 0x40
 8009006:	2202      	movs	r2, #2
 8009008:	2181      	movs	r1, #129	; 0x81
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f008 fa71 	bl	80114f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009016:	2340      	movs	r3, #64	; 0x40
 8009018:	2202      	movs	r2, #2
 800901a:	2101      	movs	r1, #1
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f008 fa68 	bl	80114f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2210      	movs	r2, #16
 800902e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009032:	2308      	movs	r3, #8
 8009034:	2203      	movs	r2, #3
 8009036:	2182      	movs	r1, #130	; 0x82
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f008 fa5a 	bl	80114f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	7c1b      	ldrb	r3, [r3, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d109      	bne.n	800907c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800906e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009072:	2101      	movs	r1, #1
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f008 fb25 	bl	80116c4 <USBD_LL_PrepareReceive>
 800907a:	e007      	b.n	800908c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009082:	2340      	movs	r3, #64	; 0x40
 8009084:	2101      	movs	r1, #1
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f008 fb1c 	bl	80116c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80090a2:	2181      	movs	r1, #129	; 0x81
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f008 fa4a 	bl	801153e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80090b0:	2101      	movs	r1, #1
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f008 fa43 	bl	801153e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80090c0:	2182      	movs	r1, #130	; 0x82
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f008 fa3b 	bl	801153e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00e      	beq.n	8009100 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090f2:	4618      	mov	r0, r3
 80090f4:	f008 fb5e 	bl	80117b4 <USBD_static_free>
    pdev->pClassData = NULL;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800911c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009122:	2300      	movs	r3, #0
 8009124:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009130:	2303      	movs	r3, #3
 8009132:	e0af      	b.n	8009294 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800913c:	2b00      	cmp	r3, #0
 800913e:	d03f      	beq.n	80091c0 <USBD_CDC_Setup+0xb4>
 8009140:	2b20      	cmp	r3, #32
 8009142:	f040 809f 	bne.w	8009284 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	88db      	ldrh	r3, [r3, #6]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d02e      	beq.n	80091ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	b25b      	sxtb	r3, r3
 8009154:	2b00      	cmp	r3, #0
 8009156:	da16      	bge.n	8009186 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009164:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	88d2      	ldrh	r2, [r2, #6]
 800916a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	88db      	ldrh	r3, [r3, #6]
 8009170:	2b07      	cmp	r3, #7
 8009172:	bf28      	it	cs
 8009174:	2307      	movcs	r3, #7
 8009176:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	89fa      	ldrh	r2, [r7, #14]
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 fa8e 	bl	800a6a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009184:	e085      	b.n	8009292 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	785a      	ldrb	r2, [r3, #1]
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	88db      	ldrh	r3, [r3, #6]
 8009194:	b2da      	uxtb	r2, r3
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800919c:	6939      	ldr	r1, [r7, #16]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	88db      	ldrh	r3, [r3, #6]
 80091a2:	461a      	mov	r2, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f001 faa7 	bl	800a6f8 <USBD_CtlPrepareRx>
      break;
 80091aa:	e072      	b.n	8009292 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	683a      	ldr	r2, [r7, #0]
 80091b6:	7850      	ldrb	r0, [r2, #1]
 80091b8:	2200      	movs	r2, #0
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	4798      	blx	r3
      break;
 80091be:	e068      	b.n	8009292 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	2b0b      	cmp	r3, #11
 80091c6:	d852      	bhi.n	800926e <USBD_CDC_Setup+0x162>
 80091c8:	a201      	add	r2, pc, #4	; (adr r2, 80091d0 <USBD_CDC_Setup+0xc4>)
 80091ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ce:	bf00      	nop
 80091d0:	08009201 	.word	0x08009201
 80091d4:	0800927d 	.word	0x0800927d
 80091d8:	0800926f 	.word	0x0800926f
 80091dc:	0800926f 	.word	0x0800926f
 80091e0:	0800926f 	.word	0x0800926f
 80091e4:	0800926f 	.word	0x0800926f
 80091e8:	0800926f 	.word	0x0800926f
 80091ec:	0800926f 	.word	0x0800926f
 80091f0:	0800926f 	.word	0x0800926f
 80091f4:	0800926f 	.word	0x0800926f
 80091f8:	0800922b 	.word	0x0800922b
 80091fc:	08009255 	.word	0x08009255
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b03      	cmp	r3, #3
 800920a:	d107      	bne.n	800921c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800920c:	f107 030a 	add.w	r3, r7, #10
 8009210:	2202      	movs	r2, #2
 8009212:	4619      	mov	r1, r3
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f001 fa43 	bl	800a6a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800921a:	e032      	b.n	8009282 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 f9cd 	bl	800a5be <USBD_CtlError>
            ret = USBD_FAIL;
 8009224:	2303      	movs	r3, #3
 8009226:	75fb      	strb	r3, [r7, #23]
          break;
 8009228:	e02b      	b.n	8009282 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b03      	cmp	r3, #3
 8009234:	d107      	bne.n	8009246 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009236:	f107 030d 	add.w	r3, r7, #13
 800923a:	2201      	movs	r2, #1
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 fa2e 	bl	800a6a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009244:	e01d      	b.n	8009282 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 f9b8 	bl	800a5be <USBD_CtlError>
            ret = USBD_FAIL;
 800924e:	2303      	movs	r3, #3
 8009250:	75fb      	strb	r3, [r7, #23]
          break;
 8009252:	e016      	b.n	8009282 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b03      	cmp	r3, #3
 800925e:	d00f      	beq.n	8009280 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f001 f9ab 	bl	800a5be <USBD_CtlError>
            ret = USBD_FAIL;
 8009268:	2303      	movs	r3, #3
 800926a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800926c:	e008      	b.n	8009280 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 f9a4 	bl	800a5be <USBD_CtlError>
          ret = USBD_FAIL;
 8009276:	2303      	movs	r3, #3
 8009278:	75fb      	strb	r3, [r7, #23]
          break;
 800927a:	e002      	b.n	8009282 <USBD_CDC_Setup+0x176>
          break;
 800927c:	bf00      	nop
 800927e:	e008      	b.n	8009292 <USBD_CDC_Setup+0x186>
          break;
 8009280:	bf00      	nop
      }
      break;
 8009282:	e006      	b.n	8009292 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f001 f999 	bl	800a5be <USBD_CtlError>
      ret = USBD_FAIL;
 800928c:	2303      	movs	r3, #3
 800928e:	75fb      	strb	r3, [r7, #23]
      break;
 8009290:	bf00      	nop
  }

  return (uint8_t)ret;
 8009292:	7dfb      	ldrb	r3, [r7, #23]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e04c      	b.n	8009358 <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80092c6:	78fa      	ldrb	r2, [r7, #3]
 80092c8:	6879      	ldr	r1, [r7, #4]
 80092ca:	4613      	mov	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	440b      	add	r3, r1
 80092d4:	3318      	adds	r3, #24
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d026      	beq.n	800932a <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80092dc:	78fa      	ldrb	r2, [r7, #3]
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	4613      	mov	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	440b      	add	r3, r1
 80092ea:	3318      	adds	r3, #24
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	78fa      	ldrb	r2, [r7, #3]
 80092f0:	68f9      	ldr	r1, [r7, #12]
 80092f2:	0152      	lsls	r2, r2, #5
 80092f4:	440a      	add	r2, r1
 80092f6:	3238      	adds	r2, #56	; 0x38
 80092f8:	6812      	ldr	r2, [r2, #0]
 80092fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80092fe:	fb02 f201 	mul.w	r2, r2, r1
 8009302:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009304:	2b00      	cmp	r3, #0
 8009306:	d110      	bne.n	800932a <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009308:	78fa      	ldrb	r2, [r7, #3]
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	3318      	adds	r3, #24
 8009318:	2200      	movs	r2, #0
 800931a:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800931c:	78f9      	ldrb	r1, [r7, #3]
 800931e:	2300      	movs	r3, #0
 8009320:	2200      	movs	r2, #0
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f008 f9ad 	bl	8011682 <USBD_LL_Transmit>
 8009328:	e015      	b.n	8009356 <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	2200      	movs	r2, #0
 800932e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00b      	beq.n	8009356 <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800937e:	2303      	movs	r3, #3
 8009380:	e015      	b.n	80093ae <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009382:	78fb      	ldrb	r3, [r7, #3]
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f008 f9bd 	bl	8011706 <USBD_LL_GetRxDataSize>
 800938c:	4602      	mov	r2, r0
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80093a8:	4611      	mov	r1, r2
 80093aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d101      	bne.n	80093d0 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e01b      	b.n	8009408 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d015      	beq.n	8009406 <USBD_CDC_EP0_RxReady+0x50>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80093e0:	2bff      	cmp	r3, #255	; 0xff
 80093e2:	d010      	beq.n	8009406 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80093f2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093fa:	b292      	uxth	r2, r2
 80093fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	22ff      	movs	r2, #255	; 0xff
 8009402:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2243      	movs	r2, #67	; 0x43
 800941c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800941e:	4b03      	ldr	r3, [pc, #12]	; (800942c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009420:	4618      	mov	r0, r3
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	20000098 	.word	0x20000098

08009430 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2243      	movs	r2, #67	; 0x43
 800943c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800943e:	4b03      	ldr	r3, [pc, #12]	; (800944c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009440:	4618      	mov	r0, r3
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	20000054 	.word	0x20000054

08009450 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2243      	movs	r2, #67	; 0x43
 800945c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800945e:	4b03      	ldr	r3, [pc, #12]	; (800946c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	200000dc 	.word	0x200000dc

08009470 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	220a      	movs	r2, #10
 800947c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800947e:	4b03      	ldr	r3, [pc, #12]	; (800948c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009480:	4618      	mov	r0, r3
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr
 800948c:	20000010 	.word	0x20000010

08009490 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e004      	b.n	80094ae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b087      	sub	sp, #28
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094cc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80094d4:	2303      	movs	r3, #3
 80094d6:	e008      	b.n	80094ea <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	371c      	adds	r7, #28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b085      	sub	sp, #20
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009506:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800950e:	2303      	movs	r3, #3
 8009510:	e004      	b.n	800951c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	683a      	ldr	r2, [r7, #0]
 8009516:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009536:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009542:	2303      	movs	r3, #3
 8009544:	e016      	b.n	8009574 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	7c1b      	ldrb	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d109      	bne.n	8009562 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009558:	2101      	movs	r1, #1
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f008 f8b2 	bl	80116c4 <USBD_LL_PrepareReceive>
 8009560:	e007      	b.n	8009572 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009568:	2340      	movs	r3, #64	; 0x40
 800956a:	2101      	movs	r1, #1
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f008 f8a9 	bl	80116c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009590:	2303      	movs	r3, #3
 8009592:	e01f      	b.n	80095d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	79fa      	ldrb	r2, [r7, #7]
 80095c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f007 ff15 	bl	80113f8 <USBD_LL_Init>
 80095ce:	4603      	mov	r3, r0
 80095d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80095d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095e6:	2300      	movs	r3, #0
 80095e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e016      	b.n	8009622 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00b      	beq.n	8009620 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800960e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009610:	f107 020e 	add.w	r2, r7, #14
 8009614:	4610      	mov	r0, r2
 8009616:	4798      	blx	r3
 8009618:	4602      	mov	r2, r0
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f007 ff42 	bl	80114bc <USBD_LL_Start>
 8009638:	4603      	mov	r3, r0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009642:	b480      	push	{r7}
 8009644:	b083      	sub	sp, #12
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009664:	2303      	movs	r3, #3
 8009666:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966e:	2b00      	cmp	r3, #0
 8009670:	d009      	beq.n	8009686 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	78fa      	ldrb	r2, [r7, #3]
 800967c:	4611      	mov	r1, r2
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	4798      	blx	r3
 8009682:	4603      	mov	r3, r0
 8009684:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009686:	7bfb      	ldrb	r3, [r7, #15]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d007      	beq.n	80096b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	78fa      	ldrb	r2, [r7, #3]
 80096b0:	4611      	mov	r1, r2
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
  }

  return USBD_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 ff39 	bl	800a54a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80096e6:	461a      	mov	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80096f4:	f003 031f 	and.w	r3, r3, #31
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d00e      	beq.n	800971a <USBD_LL_SetupStage+0x5a>
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d302      	bcc.n	8009706 <USBD_LL_SetupStage+0x46>
 8009700:	2b02      	cmp	r3, #2
 8009702:	d014      	beq.n	800972e <USBD_LL_SetupStage+0x6e>
 8009704:	e01d      	b.n	8009742 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f9ee 	bl	8009af0 <USBD_StdDevReq>
 8009714:	4603      	mov	r3, r0
 8009716:	73fb      	strb	r3, [r7, #15]
      break;
 8009718:	e020      	b.n	800975c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fa52 	bl	8009bcc <USBD_StdItfReq>
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]
      break;
 800972c:	e016      	b.n	800975c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fa8f 	bl	8009c5a <USBD_StdEPReq>
 800973c:	4603      	mov	r3, r0
 800973e:	73fb      	strb	r3, [r7, #15]
      break;
 8009740:	e00c      	b.n	800975c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009748:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800974c:	b2db      	uxtb	r3, r3
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f007 ff13 	bl	801157c <USBD_LL_StallEP>
 8009756:	4603      	mov	r3, r0
 8009758:	73fb      	strb	r3, [r7, #15]
      break;
 800975a:	bf00      	nop
  }

  return ret;
 800975c:	7bfb      	ldrb	r3, [r7, #15]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b086      	sub	sp, #24
 800976a:	af00      	add	r7, sp, #0
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	460b      	mov	r3, r1
 8009770:	607a      	str	r2, [r7, #4]
 8009772:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009774:	7afb      	ldrb	r3, [r7, #11]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d138      	bne.n	80097ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009780:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009788:	2b03      	cmp	r3, #3
 800978a:	d14a      	bne.n	8009822 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	689a      	ldr	r2, [r3, #8]
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	429a      	cmp	r2, r3
 8009796:	d913      	bls.n	80097c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	689a      	ldr	r2, [r3, #8]
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	1ad2      	subs	r2, r2, r3
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	4293      	cmp	r3, r2
 80097b0:	bf28      	it	cs
 80097b2:	4613      	movcs	r3, r2
 80097b4:	461a      	mov	r2, r3
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f000 ffba 	bl	800a732 <USBD_CtlContinueRx>
 80097be:	e030      	b.n	8009822 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b03      	cmp	r3, #3
 80097ca:	d10b      	bne.n	80097e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d005      	beq.n	80097e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 ffb5 	bl	800a754 <USBD_CtlSendStatus>
 80097ea:	e01a      	b.n	8009822 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b03      	cmp	r3, #3
 80097f6:	d114      	bne.n	8009822 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00e      	beq.n	8009822 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	7afa      	ldrb	r2, [r7, #11]
 800980e:	4611      	mov	r1, r2
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	4798      	blx	r3
 8009814:	4603      	mov	r3, r0
 8009816:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009818:	7dfb      	ldrb	r3, [r7, #23]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	e000      	b.n	8009824 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	460b      	mov	r3, r1
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800983a:	7afb      	ldrb	r3, [r7, #11]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d16b      	bne.n	8009918 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3314      	adds	r3, #20
 8009844:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800984c:	2b02      	cmp	r3, #2
 800984e:	d156      	bne.n	80098fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	689a      	ldr	r2, [r3, #8]
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	429a      	cmp	r2, r3
 800985a:	d914      	bls.n	8009886 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	689a      	ldr	r2, [r3, #8]
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	1ad2      	subs	r2, r2, r3
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	461a      	mov	r2, r3
 8009870:	6879      	ldr	r1, [r7, #4]
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 ff2f 	bl	800a6d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009878:	2300      	movs	r3, #0
 800987a:	2200      	movs	r2, #0
 800987c:	2100      	movs	r1, #0
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f007 ff20 	bl	80116c4 <USBD_LL_PrepareReceive>
 8009884:	e03b      	b.n	80098fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	68da      	ldr	r2, [r3, #12]
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	429a      	cmp	r2, r3
 8009890:	d11c      	bne.n	80098cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800989a:	429a      	cmp	r2, r3
 800989c:	d316      	bcc.n	80098cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d20f      	bcs.n	80098cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098ac:	2200      	movs	r2, #0
 80098ae:	2100      	movs	r1, #0
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 ff10 	bl	800a6d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098be:	2300      	movs	r3, #0
 80098c0:	2200      	movs	r2, #0
 80098c2:	2100      	movs	r1, #0
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f007 fefd 	bl	80116c4 <USBD_LL_PrepareReceive>
 80098ca:	e018      	b.n	80098fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b03      	cmp	r3, #3
 80098d6:	d10b      	bne.n	80098f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d005      	beq.n	80098f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80098f0:	2180      	movs	r1, #128	; 0x80
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f007 fe42 	bl	801157c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 ff3e 	bl	800a77a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009904:	2b01      	cmp	r3, #1
 8009906:	d122      	bne.n	800994e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f7ff fe9a 	bl	8009642 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009916:	e01a      	b.n	800994e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b03      	cmp	r3, #3
 8009922:	d114      	bne.n	800994e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00e      	beq.n	800994e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	7afa      	ldrb	r2, [r7, #11]
 800993a:	4611      	mov	r1, r2
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	4798      	blx	r3
 8009940:	4603      	mov	r3, r0
 8009942:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009944:	7dfb      	ldrb	r3, [r7, #23]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800994a:	7dfb      	ldrb	r3, [r7, #23]
 800994c:	e000      	b.n	8009950 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3718      	adds	r7, #24
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009988:	2303      	movs	r3, #3
 800998a:	e02f      	b.n	80099ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00f      	beq.n	80099b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d009      	beq.n	80099b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	6852      	ldr	r2, [r2, #4]
 80099ae:	b2d2      	uxtb	r2, r2
 80099b0:	4611      	mov	r1, r2
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099b6:	2340      	movs	r3, #64	; 0x40
 80099b8:	2200      	movs	r2, #0
 80099ba:	2100      	movs	r1, #0
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f007 fd98 	bl	80114f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2240      	movs	r2, #64	; 0x40
 80099ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099d2:	2340      	movs	r3, #64	; 0x40
 80099d4:	2200      	movs	r2, #0
 80099d6:	2180      	movs	r1, #128	; 0x80
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f007 fd8a 	bl	80114f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2240      	movs	r2, #64	; 0x40
 80099e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	78fa      	ldrb	r2, [r7, #3]
 8009a04:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2204      	movs	r2, #4
 8009a2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b04      	cmp	r3, #4
 8009a52:	d106      	bne.n	8009a62 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009a82:	2303      	movs	r3, #3
 8009a84:	e012      	b.n	8009aac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d10b      	bne.n	8009aaa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a98:	69db      	ldr	r3, [r3, #28]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d005      	beq.n	8009aaa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa4:	69db      	ldr	r3, [r3, #28]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ad2:	8a3b      	ldrh	r3, [r7, #16]
 8009ad4:	021b      	lsls	r3, r3, #8
 8009ad6:	b21a      	sxth	r2, r3
 8009ad8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	b21b      	sxth	r3, r3
 8009ae0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ae2:	89fb      	ldrh	r3, [r7, #14]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	371c      	adds	r7, #28
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	d004      	beq.n	8009b14 <USBD_StdDevReq+0x24>
 8009b0a:	2b40      	cmp	r3, #64	; 0x40
 8009b0c:	d002      	beq.n	8009b14 <USBD_StdDevReq+0x24>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00a      	beq.n	8009b28 <USBD_StdDevReq+0x38>
 8009b12:	e050      	b.n	8009bb6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	4798      	blx	r3
 8009b22:	4603      	mov	r3, r0
 8009b24:	73fb      	strb	r3, [r7, #15]
      break;
 8009b26:	e04b      	b.n	8009bc0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	785b      	ldrb	r3, [r3, #1]
 8009b2c:	2b09      	cmp	r3, #9
 8009b2e:	d83c      	bhi.n	8009baa <USBD_StdDevReq+0xba>
 8009b30:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <USBD_StdDevReq+0x48>)
 8009b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b36:	bf00      	nop
 8009b38:	08009b8d 	.word	0x08009b8d
 8009b3c:	08009ba1 	.word	0x08009ba1
 8009b40:	08009bab 	.word	0x08009bab
 8009b44:	08009b97 	.word	0x08009b97
 8009b48:	08009bab 	.word	0x08009bab
 8009b4c:	08009b6b 	.word	0x08009b6b
 8009b50:	08009b61 	.word	0x08009b61
 8009b54:	08009bab 	.word	0x08009bab
 8009b58:	08009b83 	.word	0x08009b83
 8009b5c:	08009b75 	.word	0x08009b75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f9d4 	bl	8009f10 <USBD_GetDescriptor>
          break;
 8009b68:	e024      	b.n	8009bb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fb63 	bl	800a238 <USBD_SetAddress>
          break;
 8009b72:	e01f      	b.n	8009bb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fba2 	bl	800a2c0 <USBD_SetConfig>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]
          break;
 8009b80:	e018      	b.n	8009bb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fc41 	bl	800a40c <USBD_GetConfig>
          break;
 8009b8a:	e013      	b.n	8009bb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fc71 	bl	800a476 <USBD_GetStatus>
          break;
 8009b94:	e00e      	b.n	8009bb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fca0 	bl	800a4de <USBD_SetFeature>
          break;
 8009b9e:	e009      	b.n	8009bb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fcaf 	bl	800a506 <USBD_ClrFeature>
          break;
 8009ba8:	e004      	b.n	8009bb4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fd06 	bl	800a5be <USBD_CtlError>
          break;
 8009bb2:	bf00      	nop
      }
      break;
 8009bb4:	e004      	b.n	8009bc0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fd00 	bl	800a5be <USBD_CtlError>
      break;
 8009bbe:	bf00      	nop
  }

  return ret;
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop

08009bcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009be2:	2b20      	cmp	r3, #32
 8009be4:	d003      	beq.n	8009bee <USBD_StdItfReq+0x22>
 8009be6:	2b40      	cmp	r3, #64	; 0x40
 8009be8:	d001      	beq.n	8009bee <USBD_StdItfReq+0x22>
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d12b      	bne.n	8009c46 <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d81d      	bhi.n	8009c38 <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	889b      	ldrh	r3, [r3, #4]
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d813      	bhi.n	8009c2e <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	4798      	blx	r3
 8009c14:	4603      	mov	r3, r0
 8009c16:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	88db      	ldrh	r3, [r3, #6]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d110      	bne.n	8009c42 <USBD_StdItfReq+0x76>
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d10d      	bne.n	8009c42 <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fd94 	bl	800a754 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c2c:	e009      	b.n	8009c42 <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fcc4 	bl	800a5be <USBD_CtlError>
          break;
 8009c36:	e004      	b.n	8009c42 <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fcbf 	bl	800a5be <USBD_CtlError>
          break;
 8009c40:	e000      	b.n	8009c44 <USBD_StdItfReq+0x78>
          break;
 8009c42:	bf00      	nop
      }
      break;
 8009c44:	e004      	b.n	8009c50 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fcb8 	bl	800a5be <USBD_CtlError>
      break;
 8009c4e:	bf00      	nop
  }

  return ret;
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	889b      	ldrh	r3, [r3, #4]
 8009c6c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c76:	2b20      	cmp	r3, #32
 8009c78:	d004      	beq.n	8009c84 <USBD_StdEPReq+0x2a>
 8009c7a:	2b40      	cmp	r3, #64	; 0x40
 8009c7c:	d002      	beq.n	8009c84 <USBD_StdEPReq+0x2a>
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00a      	beq.n	8009c98 <USBD_StdEPReq+0x3e>
 8009c82:	e13a      	b.n	8009efa <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	4798      	blx	r3
 8009c92:	4603      	mov	r3, r0
 8009c94:	73fb      	strb	r3, [r7, #15]
      break;
 8009c96:	e135      	b.n	8009f04 <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	785b      	ldrb	r3, [r3, #1]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d03f      	beq.n	8009d20 <USBD_StdEPReq+0xc6>
 8009ca0:	2b03      	cmp	r3, #3
 8009ca2:	d002      	beq.n	8009caa <USBD_StdEPReq+0x50>
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d07b      	beq.n	8009da0 <USBD_StdEPReq+0x146>
 8009ca8:	e121      	b.n	8009eee <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d002      	beq.n	8009cbc <USBD_StdEPReq+0x62>
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d015      	beq.n	8009ce6 <USBD_StdEPReq+0x8c>
 8009cba:	e02b      	b.n	8009d14 <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cbc:	7bbb      	ldrb	r3, [r7, #14]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00c      	beq.n	8009cdc <USBD_StdEPReq+0x82>
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
 8009cc4:	2b80      	cmp	r3, #128	; 0x80
 8009cc6:	d009      	beq.n	8009cdc <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cc8:	7bbb      	ldrb	r3, [r7, #14]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f007 fc55 	bl	801157c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cd2:	2180      	movs	r1, #128	; 0x80
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f007 fc51 	bl	801157c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cda:	e020      	b.n	8009d1e <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fc6d 	bl	800a5be <USBD_CtlError>
              break;
 8009ce4:	e01b      	b.n	8009d1e <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	885b      	ldrh	r3, [r3, #2]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10e      	bne.n	8009d0c <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00b      	beq.n	8009d0c <USBD_StdEPReq+0xb2>
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	2b80      	cmp	r3, #128	; 0x80
 8009cf8:	d008      	beq.n	8009d0c <USBD_StdEPReq+0xb2>
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	88db      	ldrh	r3, [r3, #6]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d104      	bne.n	8009d0c <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f007 fc38 	bl	801157c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fd21 	bl	800a754 <USBD_CtlSendStatus>

              break;
 8009d12:	e004      	b.n	8009d1e <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fc51 	bl	800a5be <USBD_CtlError>
              break;
 8009d1c:	bf00      	nop
          }
          break;
 8009d1e:	e0eb      	b.n	8009ef8 <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d002      	beq.n	8009d32 <USBD_StdEPReq+0xd8>
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d015      	beq.n	8009d5c <USBD_StdEPReq+0x102>
 8009d30:	e02f      	b.n	8009d92 <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d32:	7bbb      	ldrb	r3, [r7, #14]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00c      	beq.n	8009d52 <USBD_StdEPReq+0xf8>
 8009d38:	7bbb      	ldrb	r3, [r7, #14]
 8009d3a:	2b80      	cmp	r3, #128	; 0x80
 8009d3c:	d009      	beq.n	8009d52 <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f007 fc1a 	bl	801157c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d48:	2180      	movs	r1, #128	; 0x80
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f007 fc16 	bl	801157c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d50:	e025      	b.n	8009d9e <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fc32 	bl	800a5be <USBD_CtlError>
              break;
 8009d5a:	e020      	b.n	8009d9e <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	885b      	ldrh	r3, [r3, #2]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d11b      	bne.n	8009d9c <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d004      	beq.n	8009d78 <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d6e:	7bbb      	ldrb	r3, [r7, #14]
 8009d70:	4619      	mov	r1, r3
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f007 fc21 	bl	80115ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fceb 	bl	800a754 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	4798      	blx	r3
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009d90:	e004      	b.n	8009d9c <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fc12 	bl	800a5be <USBD_CtlError>
              break;
 8009d9a:	e000      	b.n	8009d9e <USBD_StdEPReq+0x144>
              break;
 8009d9c:	bf00      	nop
          }
          break;
 8009d9e:	e0ab      	b.n	8009ef8 <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d002      	beq.n	8009db2 <USBD_StdEPReq+0x158>
 8009dac:	2b03      	cmp	r3, #3
 8009dae:	d032      	beq.n	8009e16 <USBD_StdEPReq+0x1bc>
 8009db0:	e097      	b.n	8009ee2 <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d007      	beq.n	8009dc8 <USBD_StdEPReq+0x16e>
 8009db8:	7bbb      	ldrb	r3, [r7, #14]
 8009dba:	2b80      	cmp	r3, #128	; 0x80
 8009dbc:	d004      	beq.n	8009dc8 <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 fbfc 	bl	800a5be <USBD_CtlError>
                break;
 8009dc6:	e091      	b.n	8009eec <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	da0b      	bge.n	8009de8 <USBD_StdEPReq+0x18e>
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	3310      	adds	r3, #16
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	4413      	add	r3, r2
 8009de4:	3304      	adds	r3, #4
 8009de6:	e00b      	b.n	8009e00 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dee:	4613      	mov	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	3304      	adds	r3, #4
 8009e00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2200      	movs	r2, #0
 8009e06:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fc46 	bl	800a6a0 <USBD_CtlSendData>
              break;
 8009e14:	e06a      	b.n	8009eec <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	da11      	bge.n	8009e42 <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	f003 020f 	and.w	r2, r3, #15
 8009e24:	6879      	ldr	r1, [r7, #4]
 8009e26:	4613      	mov	r3, r2
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	440b      	add	r3, r1
 8009e30:	3324      	adds	r3, #36	; 0x24
 8009e32:	881b      	ldrh	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d117      	bne.n	8009e68 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fbbf 	bl	800a5be <USBD_CtlError>
                  break;
 8009e40:	e054      	b.n	8009eec <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	f003 020f 	and.w	r2, r3, #15
 8009e48:	6879      	ldr	r1, [r7, #4]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	440b      	add	r3, r1
 8009e54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d104      	bne.n	8009e68 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 8009e5e:	6839      	ldr	r1, [r7, #0]
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fbac 	bl	800a5be <USBD_CtlError>
                  break;
 8009e66:	e041      	b.n	8009eec <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	da0b      	bge.n	8009e88 <USBD_StdEPReq+0x22e>
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e76:	4613      	mov	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	3310      	adds	r3, #16
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	4413      	add	r3, r2
 8009e84:	3304      	adds	r3, #4
 8009e86:	e00b      	b.n	8009ea0 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e8e:	4613      	mov	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	3304      	adds	r3, #4
 8009ea0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ea2:	7bbb      	ldrb	r3, [r7, #14]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <USBD_StdEPReq+0x254>
 8009ea8:	7bbb      	ldrb	r3, [r7, #14]
 8009eaa:	2b80      	cmp	r3, #128	; 0x80
 8009eac:	d103      	bne.n	8009eb6 <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	e00e      	b.n	8009ed4 <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
 8009eb8:	4619      	mov	r1, r3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f007 fb9c 	bl	80115f8 <USBD_LL_IsStallEP>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d003      	beq.n	8009ece <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	601a      	str	r2, [r3, #0]
 8009ecc:	e002      	b.n	8009ed4 <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fbe0 	bl	800a6a0 <USBD_CtlSendData>
              break;
 8009ee0:	e004      	b.n	8009eec <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fb6a 	bl	800a5be <USBD_CtlError>
              break;
 8009eea:	bf00      	nop
          }
          break;
 8009eec:	e004      	b.n	8009ef8 <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fb64 	bl	800a5be <USBD_CtlError>
          break;
 8009ef6:	bf00      	nop
      }
      break;
 8009ef8:	e004      	b.n	8009f04 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 8009efa:	6839      	ldr	r1, [r7, #0]
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fb5e 	bl	800a5be <USBD_CtlError>
      break;
 8009f02:	bf00      	nop
  }

  return ret;
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
	...

08009f10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f22:	2300      	movs	r3, #0
 8009f24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	885b      	ldrh	r3, [r3, #2]
 8009f2a:	0a1b      	lsrs	r3, r3, #8
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	2b0e      	cmp	r3, #14
 8009f32:	f200 8152 	bhi.w	800a1da <USBD_GetDescriptor+0x2ca>
 8009f36:	a201      	add	r2, pc, #4	; (adr r2, 8009f3c <USBD_GetDescriptor+0x2c>)
 8009f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3c:	08009fad 	.word	0x08009fad
 8009f40:	08009fc5 	.word	0x08009fc5
 8009f44:	0800a005 	.word	0x0800a005
 8009f48:	0800a1db 	.word	0x0800a1db
 8009f4c:	0800a1db 	.word	0x0800a1db
 8009f50:	0800a17b 	.word	0x0800a17b
 8009f54:	0800a1a7 	.word	0x0800a1a7
 8009f58:	0800a1db 	.word	0x0800a1db
 8009f5c:	0800a1db 	.word	0x0800a1db
 8009f60:	0800a1db 	.word	0x0800a1db
 8009f64:	0800a1db 	.word	0x0800a1db
 8009f68:	0800a1db 	.word	0x0800a1db
 8009f6c:	0800a1db 	.word	0x0800a1db
 8009f70:	0800a1db 	.word	0x0800a1db
 8009f74:	08009f79 	.word	0x08009f79
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00b      	beq.n	8009f9c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	7c12      	ldrb	r2, [r2, #16]
 8009f90:	f107 0108 	add.w	r1, r7, #8
 8009f94:	4610      	mov	r0, r2
 8009f96:	4798      	blx	r3
 8009f98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f9a:	e126      	b.n	800a1ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fb0d 	bl	800a5be <USBD_CtlError>
        err++;
 8009fa4:	7afb      	ldrb	r3, [r7, #11]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	72fb      	strb	r3, [r7, #11]
      break;
 8009faa:	e11e      	b.n	800a1ea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	7c12      	ldrb	r2, [r2, #16]
 8009fb8:	f107 0108 	add.w	r1, r7, #8
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	4798      	blx	r3
 8009fc0:	60f8      	str	r0, [r7, #12]
      break;
 8009fc2:	e112      	b.n	800a1ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	7c1b      	ldrb	r3, [r3, #16]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10d      	bne.n	8009fe8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd4:	f107 0208 	add.w	r2, r7, #8
 8009fd8:	4610      	mov	r0, r2
 8009fda:	4798      	blx	r3
 8009fdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009fe6:	e100      	b.n	800a1ea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff0:	f107 0208 	add.w	r2, r7, #8
 8009ff4:	4610      	mov	r0, r2
 8009ff6:	4798      	blx	r3
 8009ff8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	2202      	movs	r2, #2
 800a000:	701a      	strb	r2, [r3, #0]
      break;
 800a002:	e0f2      	b.n	800a1ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	885b      	ldrh	r3, [r3, #2]
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	2b05      	cmp	r3, #5
 800a00c:	f200 80ac 	bhi.w	800a168 <USBD_GetDescriptor+0x258>
 800a010:	a201      	add	r2, pc, #4	; (adr r2, 800a018 <USBD_GetDescriptor+0x108>)
 800a012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a016:	bf00      	nop
 800a018:	0800a031 	.word	0x0800a031
 800a01c:	0800a065 	.word	0x0800a065
 800a020:	0800a099 	.word	0x0800a099
 800a024:	0800a0cd 	.word	0x0800a0cd
 800a028:	0800a101 	.word	0x0800a101
 800a02c:	0800a135 	.word	0x0800a135
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00b      	beq.n	800a054 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	7c12      	ldrb	r2, [r2, #16]
 800a048:	f107 0108 	add.w	r1, r7, #8
 800a04c:	4610      	mov	r0, r2
 800a04e:	4798      	blx	r3
 800a050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a052:	e091      	b.n	800a178 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fab1 	bl	800a5be <USBD_CtlError>
            err++;
 800a05c:	7afb      	ldrb	r3, [r7, #11]
 800a05e:	3301      	adds	r3, #1
 800a060:	72fb      	strb	r3, [r7, #11]
          break;
 800a062:	e089      	b.n	800a178 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00b      	beq.n	800a088 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	7c12      	ldrb	r2, [r2, #16]
 800a07c:	f107 0108 	add.w	r1, r7, #8
 800a080:	4610      	mov	r0, r2
 800a082:	4798      	blx	r3
 800a084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a086:	e077      	b.n	800a178 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fa97 	bl	800a5be <USBD_CtlError>
            err++;
 800a090:	7afb      	ldrb	r3, [r7, #11]
 800a092:	3301      	adds	r3, #1
 800a094:	72fb      	strb	r3, [r7, #11]
          break;
 800a096:	e06f      	b.n	800a178 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00b      	beq.n	800a0bc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	7c12      	ldrb	r2, [r2, #16]
 800a0b0:	f107 0108 	add.w	r1, r7, #8
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	4798      	blx	r3
 800a0b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ba:	e05d      	b.n	800a178 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fa7d 	bl	800a5be <USBD_CtlError>
            err++;
 800a0c4:	7afb      	ldrb	r3, [r7, #11]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ca:	e055      	b.n	800a178 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00b      	beq.n	800a0f0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	7c12      	ldrb	r2, [r2, #16]
 800a0e4:	f107 0108 	add.w	r1, r7, #8
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	4798      	blx	r3
 800a0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ee:	e043      	b.n	800a178 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fa63 	bl	800a5be <USBD_CtlError>
            err++;
 800a0f8:	7afb      	ldrb	r3, [r7, #11]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0fe:	e03b      	b.n	800a178 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a106:	695b      	ldr	r3, [r3, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00b      	beq.n	800a124 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	7c12      	ldrb	r2, [r2, #16]
 800a118:	f107 0108 	add.w	r1, r7, #8
 800a11c:	4610      	mov	r0, r2
 800a11e:	4798      	blx	r3
 800a120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a122:	e029      	b.n	800a178 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fa49 	bl	800a5be <USBD_CtlError>
            err++;
 800a12c:	7afb      	ldrb	r3, [r7, #11]
 800a12e:	3301      	adds	r3, #1
 800a130:	72fb      	strb	r3, [r7, #11]
          break;
 800a132:	e021      	b.n	800a178 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00b      	beq.n	800a158 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a146:	699b      	ldr	r3, [r3, #24]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	7c12      	ldrb	r2, [r2, #16]
 800a14c:	f107 0108 	add.w	r1, r7, #8
 800a150:	4610      	mov	r0, r2
 800a152:	4798      	blx	r3
 800a154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a156:	e00f      	b.n	800a178 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fa2f 	bl	800a5be <USBD_CtlError>
            err++;
 800a160:	7afb      	ldrb	r3, [r7, #11]
 800a162:	3301      	adds	r3, #1
 800a164:	72fb      	strb	r3, [r7, #11]
          break;
 800a166:	e007      	b.n	800a178 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fa27 	bl	800a5be <USBD_CtlError>
          err++;
 800a170:	7afb      	ldrb	r3, [r7, #11]
 800a172:	3301      	adds	r3, #1
 800a174:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a176:	bf00      	nop
      }
      break;
 800a178:	e037      	b.n	800a1ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	7c1b      	ldrb	r3, [r3, #16]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d109      	bne.n	800a196 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a18a:	f107 0208 	add.w	r2, r7, #8
 800a18e:	4610      	mov	r0, r2
 800a190:	4798      	blx	r3
 800a192:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a194:	e029      	b.n	800a1ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fa10 	bl	800a5be <USBD_CtlError>
        err++;
 800a19e:	7afb      	ldrb	r3, [r7, #11]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1a4:	e021      	b.n	800a1ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	7c1b      	ldrb	r3, [r3, #16]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10d      	bne.n	800a1ca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b6:	f107 0208 	add.w	r2, r7, #8
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	4798      	blx	r3
 800a1be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	2207      	movs	r2, #7
 800a1c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1c8:	e00f      	b.n	800a1ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f9f6 	bl	800a5be <USBD_CtlError>
        err++;
 800a1d2:	7afb      	ldrb	r3, [r7, #11]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	72fb      	strb	r3, [r7, #11]
      break;
 800a1d8:	e007      	b.n	800a1ea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f9ee 	bl	800a5be <USBD_CtlError>
      err++;
 800a1e2:	7afb      	ldrb	r3, [r7, #11]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	72fb      	strb	r3, [r7, #11]
      break;
 800a1e8:	bf00      	nop
  }

  if (err != 0U)
 800a1ea:	7afb      	ldrb	r3, [r7, #11]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d11e      	bne.n	800a22e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	88db      	ldrh	r3, [r3, #6]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d016      	beq.n	800a226 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a1f8:	893b      	ldrh	r3, [r7, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00e      	beq.n	800a21c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	88da      	ldrh	r2, [r3, #6]
 800a202:	893b      	ldrh	r3, [r7, #8]
 800a204:	4293      	cmp	r3, r2
 800a206:	bf28      	it	cs
 800a208:	4613      	movcs	r3, r2
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a20e:	893b      	ldrh	r3, [r7, #8]
 800a210:	461a      	mov	r2, r3
 800a212:	68f9      	ldr	r1, [r7, #12]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fa43 	bl	800a6a0 <USBD_CtlSendData>
 800a21a:	e009      	b.n	800a230 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a21c:	6839      	ldr	r1, [r7, #0]
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f9cd 	bl	800a5be <USBD_CtlError>
 800a224:	e004      	b.n	800a230 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fa94 	bl	800a754 <USBD_CtlSendStatus>
 800a22c:	e000      	b.n	800a230 <USBD_GetDescriptor+0x320>
    return;
 800a22e:	bf00      	nop
  }
}
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop

0800a238 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	889b      	ldrh	r3, [r3, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d131      	bne.n	800a2ae <USBD_SetAddress+0x76>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	88db      	ldrh	r3, [r3, #6]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d12d      	bne.n	800a2ae <USBD_SetAddress+0x76>
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	885b      	ldrh	r3, [r3, #2]
 800a256:	2b7f      	cmp	r3, #127	; 0x7f
 800a258:	d829      	bhi.n	800a2ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	885b      	ldrh	r3, [r3, #2]
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a264:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d104      	bne.n	800a27c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f9a2 	bl	800a5be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a27a:	e01c      	b.n	800a2b6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	7bfa      	ldrb	r2, [r7, #15]
 800a280:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a284:	7bfb      	ldrb	r3, [r7, #15]
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f007 f9db 	bl	8011644 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 fa60 	bl	800a754 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d004      	beq.n	800a2a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2202      	movs	r2, #2
 800a29e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2a2:	e008      	b.n	800a2b6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ac:	e003      	b.n	800a2b6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f984 	bl	800a5be <USBD_CtlError>
  }
}
 800a2b6:	bf00      	nop
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	885b      	ldrh	r3, [r3, #2]
 800a2d2:	b2da      	uxtb	r2, r3
 800a2d4:	4b4c      	ldr	r3, [pc, #304]	; (800a408 <USBD_SetConfig+0x148>)
 800a2d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2d8:	4b4b      	ldr	r3, [pc, #300]	; (800a408 <USBD_SetConfig+0x148>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d905      	bls.n	800a2ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f96b 	bl	800a5be <USBD_CtlError>
    return USBD_FAIL;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e088      	b.n	800a3fe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d002      	beq.n	800a2fe <USBD_SetConfig+0x3e>
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d025      	beq.n	800a348 <USBD_SetConfig+0x88>
 800a2fc:	e071      	b.n	800a3e2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a2fe:	4b42      	ldr	r3, [pc, #264]	; (800a408 <USBD_SetConfig+0x148>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d01c      	beq.n	800a340 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a306:	4b40      	ldr	r3, [pc, #256]	; (800a408 <USBD_SetConfig+0x148>)
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a310:	4b3d      	ldr	r3, [pc, #244]	; (800a408 <USBD_SetConfig+0x148>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	4619      	mov	r1, r3
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7ff f99e 	bl	8009658 <USBD_SetClassConfig>
 800a31c:	4603      	mov	r3, r0
 800a31e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d004      	beq.n	800a330 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f948 	bl	800a5be <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a32e:	e065      	b.n	800a3fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fa0f 	bl	800a754 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2203      	movs	r2, #3
 800a33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a33e:	e05d      	b.n	800a3fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fa07 	bl	800a754 <USBD_CtlSendStatus>
      break;
 800a346:	e059      	b.n	800a3fc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a348:	4b2f      	ldr	r3, [pc, #188]	; (800a408 <USBD_SetConfig+0x148>)
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d112      	bne.n	800a376 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2202      	movs	r2, #2
 800a354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a358:	4b2b      	ldr	r3, [pc, #172]	; (800a408 <USBD_SetConfig+0x148>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	461a      	mov	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a362:	4b29      	ldr	r3, [pc, #164]	; (800a408 <USBD_SetConfig+0x148>)
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7ff f991 	bl	8009690 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f9f0 	bl	800a754 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a374:	e042      	b.n	800a3fc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a376:	4b24      	ldr	r3, [pc, #144]	; (800a408 <USBD_SetConfig+0x148>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	429a      	cmp	r2, r3
 800a382:	d02a      	beq.n	800a3da <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7ff f97f 	bl	8009690 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a392:	4b1d      	ldr	r3, [pc, #116]	; (800a408 <USBD_SetConfig+0x148>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a39c:	4b1a      	ldr	r3, [pc, #104]	; (800a408 <USBD_SetConfig+0x148>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7ff f958 	bl	8009658 <USBD_SetClassConfig>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00f      	beq.n	800a3d2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f902 	bl	800a5be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7ff f964 	bl	8009690 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a3d0:	e014      	b.n	800a3fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f9be 	bl	800a754 <USBD_CtlSendStatus>
      break;
 800a3d8:	e010      	b.n	800a3fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f9ba 	bl	800a754 <USBD_CtlSendStatus>
      break;
 800a3e0:	e00c      	b.n	800a3fc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f8ea 	bl	800a5be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3ea:	4b07      	ldr	r3, [pc, #28]	; (800a408 <USBD_SetConfig+0x148>)
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7ff f94d 	bl	8009690 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a3fa:	bf00      	nop
  }

  return ret;
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20000276 	.word	0x20000276

0800a40c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	88db      	ldrh	r3, [r3, #6]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d004      	beq.n	800a428 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f8cc 	bl	800a5be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a426:	e022      	b.n	800a46e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b01      	cmp	r3, #1
 800a432:	db17      	blt.n	800a464 <USBD_GetConfig+0x58>
 800a434:	2b02      	cmp	r3, #2
 800a436:	dd02      	ble.n	800a43e <USBD_GetConfig+0x32>
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d00b      	beq.n	800a454 <USBD_GetConfig+0x48>
 800a43c:	e012      	b.n	800a464 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	3308      	adds	r3, #8
 800a448:	2201      	movs	r2, #1
 800a44a:	4619      	mov	r1, r3
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f927 	bl	800a6a0 <USBD_CtlSendData>
        break;
 800a452:	e00c      	b.n	800a46e <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3304      	adds	r3, #4
 800a458:	2201      	movs	r2, #1
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 f91f 	bl	800a6a0 <USBD_CtlSendData>
        break;
 800a462:	e004      	b.n	800a46e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f8a9 	bl	800a5be <USBD_CtlError>
        break;
 800a46c:	bf00      	nop
}
 800a46e:	bf00      	nop
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b082      	sub	sp, #8
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a486:	b2db      	uxtb	r3, r3
 800a488:	3b01      	subs	r3, #1
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d81e      	bhi.n	800a4cc <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	88db      	ldrh	r3, [r3, #6]
 800a492:	2b02      	cmp	r3, #2
 800a494:	d004      	beq.n	800a4a0 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f890 	bl	800a5be <USBD_CtlError>
        break;
 800a49e:	e01a      	b.n	800a4d6 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d005      	beq.n	800a4bc <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	f043 0202 	orr.w	r2, r3, #2
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	330c      	adds	r3, #12
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f8eb 	bl	800a6a0 <USBD_CtlSendData>
      break;
 800a4ca:	e004      	b.n	800a4d6 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a4cc:	6839      	ldr	r1, [r7, #0]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f875 	bl	800a5be <USBD_CtlError>
      break;
 800a4d4:	bf00      	nop
  }
}
 800a4d6:	bf00      	nop
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b082      	sub	sp, #8
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	885b      	ldrh	r3, [r3, #2]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d106      	bne.n	800a4fe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f92b 	bl	800a754 <USBD_CtlSendStatus>
  }
}
 800a4fe:	bf00      	nop
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b082      	sub	sp, #8
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a516:	b2db      	uxtb	r3, r3
 800a518:	3b01      	subs	r3, #1
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d80b      	bhi.n	800a536 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	885b      	ldrh	r3, [r3, #2]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d10c      	bne.n	800a540 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f910 	bl	800a754 <USBD_CtlSendStatus>
      }
      break;
 800a534:	e004      	b.n	800a540 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a536:	6839      	ldr	r1, [r7, #0]
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f840 	bl	800a5be <USBD_CtlError>
      break;
 800a53e:	e000      	b.n	800a542 <USBD_ClrFeature+0x3c>
      break;
 800a540:	bf00      	nop
  }
}
 800a542:	bf00      	nop
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	781a      	ldrb	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	3301      	adds	r3, #1
 800a564:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	781a      	ldrb	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3301      	adds	r3, #1
 800a572:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f7ff fa9d 	bl	8009ab4 <SWAPBYTE>
 800a57a:	4603      	mov	r3, r0
 800a57c:	461a      	mov	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3301      	adds	r3, #1
 800a586:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	3301      	adds	r3, #1
 800a58c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f7ff fa90 	bl	8009ab4 <SWAPBYTE>
 800a594:	4603      	mov	r3, r0
 800a596:	461a      	mov	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f7ff fa83 	bl	8009ab4 <SWAPBYTE>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	80da      	strh	r2, [r3, #6]
}
 800a5b6:	bf00      	nop
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b082      	sub	sp, #8
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5c8:	2180      	movs	r1, #128	; 0x80
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f006 ffd6 	bl	801157c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f006 ffd2 	bl	801157c <USBD_LL_StallEP>
}
 800a5d8:	bf00      	nop
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d036      	beq.n	800a664 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5fa:	6938      	ldr	r0, [r7, #16]
 800a5fc:	f000 f836 	bl	800a66c <USBD_GetLen>
 800a600:	4603      	mov	r3, r0
 800a602:	3301      	adds	r3, #1
 800a604:	b29b      	uxth	r3, r3
 800a606:	005b      	lsls	r3, r3, #1
 800a608:	b29a      	uxth	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	4413      	add	r3, r2
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	7812      	ldrb	r2, [r2, #0]
 800a618:	701a      	strb	r2, [r3, #0]
  idx++;
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
 800a61c:	3301      	adds	r3, #1
 800a61e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a620:	7dfb      	ldrb	r3, [r7, #23]
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	4413      	add	r3, r2
 800a626:	2203      	movs	r2, #3
 800a628:	701a      	strb	r2, [r3, #0]
  idx++;
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
 800a62c:	3301      	adds	r3, #1
 800a62e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a630:	e013      	b.n	800a65a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a632:	7dfb      	ldrb	r3, [r7, #23]
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	4413      	add	r3, r2
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	7812      	ldrb	r2, [r2, #0]
 800a63c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	3301      	adds	r3, #1
 800a642:	613b      	str	r3, [r7, #16]
    idx++;
 800a644:	7dfb      	ldrb	r3, [r7, #23]
 800a646:	3301      	adds	r3, #1
 800a648:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a64a:	7dfb      	ldrb	r3, [r7, #23]
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	4413      	add	r3, r2
 800a650:	2200      	movs	r2, #0
 800a652:	701a      	strb	r2, [r3, #0]
    idx++;
 800a654:	7dfb      	ldrb	r3, [r7, #23]
 800a656:	3301      	adds	r3, #1
 800a658:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1e7      	bne.n	800a632 <USBD_GetString+0x52>
 800a662:	e000      	b.n	800a666 <USBD_GetString+0x86>
    return;
 800a664:	bf00      	nop
  }
}
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a674:	2300      	movs	r3, #0
 800a676:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a67c:	e005      	b.n	800a68a <USBD_GetLen+0x1e>
  {
    len++;
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
 800a680:	3301      	adds	r3, #1
 800a682:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	3301      	adds	r3, #1
 800a688:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1f5      	bne.n	800a67e <USBD_GetLen+0x12>
  }

  return len;
 800a692:	7bfb      	ldrb	r3, [r7, #15]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f006 ffdb 	bl	8011682 <USBD_LL_Transmit>

  return USBD_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	60b9      	str	r1, [r7, #8]
 800a6e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f006 ffca 	bl	8011682 <USBD_LL_Transmit>

  return USBD_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2203      	movs	r2, #3
 800a708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	2100      	movs	r1, #0
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f006 ffce 	bl	80116c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	60f8      	str	r0, [r7, #12]
 800a73a:	60b9      	str	r1, [r7, #8]
 800a73c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	2100      	movs	r1, #0
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f006 ffbd 	bl	80116c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2204      	movs	r2, #4
 800a760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a764:	2300      	movs	r3, #0
 800a766:	2200      	movs	r2, #0
 800a768:	2100      	movs	r1, #0
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f006 ff89 	bl	8011682 <USBD_LL_Transmit>

  return USBD_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b082      	sub	sp, #8
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2205      	movs	r2, #5
 800a786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a78a:	2300      	movs	r3, #0
 800a78c:	2200      	movs	r2, #0
 800a78e:	2100      	movs	r1, #0
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f006 ff97 	bl	80116c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a7a6:	1d3b      	adds	r3, r7, #4
 800a7a8:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800a7b4:	f000 f938 	bl	800aa28 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	330b      	adds	r3, #11
 800a7bc:	78db      	ldrb	r3, [r3, #3]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b088      	sub	sp, #32
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a7d0:	f107 030c 	add.w	r3, r7, #12
 800a7d4:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800a7da:	f107 020c 	add.w	r2, r7, #12
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800a7e6:	f000 f91f 	bl	800aa28 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	330b      	adds	r3, #11
 800a7ee:	78db      	ldrb	r3, [r3, #3]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3720      	adds	r7, #32
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b08b      	sub	sp, #44	; 0x2c
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a804:	2300      	movs	r3, #0
 800a806:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a810:	2300      	movs	r3, #0
 800a812:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a814:	2300      	movs	r3, #0
 800a816:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a818:	2300      	movs	r3, #0
 800a81a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a820:	4b4a      	ldr	r3, [pc, #296]	; (800a94c <SHCI_GetWirelessFwInfo+0x154>)
 800a822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a824:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a828:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a832:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a44      	ldr	r2, [pc, #272]	; (800a950 <SHCI_GetWirelessFwInfo+0x158>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d10f      	bne.n	800a864 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	695b      	ldr	r3, [r3, #20]
 800a848:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	69db      	ldr	r3, [r3, #28]
 800a854:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	617b      	str	r3, [r7, #20]
 800a862:	e01a      	b.n	800a89a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a86c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a870:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	695b      	ldr	r3, [r3, #20]
 800a880:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89c:	0e1b      	lsrs	r3, r3, #24
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a6:	0c1b      	lsrs	r3, r3, #16
 800a8a8:	b2da      	uxtb	r2, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b0:	0a1b      	lsrs	r3, r3, #8
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	091b      	lsrs	r3, r3, #4
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	f003 030f 	and.w	r3, r3, #15
 800a8c2:	b2da      	uxtb	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	f003 030f 	and.w	r3, r3, #15
 800a8d0:	b2da      	uxtb	r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a8d6:	6a3b      	ldr	r3, [r7, #32]
 800a8d8:	0e1b      	lsrs	r3, r3, #24
 800a8da:	b2da      	uxtb	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	0c1b      	lsrs	r3, r3, #16
 800a8e4:	b2da      	uxtb	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	0a1b      	lsrs	r3, r3, #8
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	b2da      	uxtb	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	0e1b      	lsrs	r3, r3, #24
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	0c1b      	lsrs	r3, r3, #16
 800a912:	b2da      	uxtb	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	0a1b      	lsrs	r3, r3, #8
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	0e1b      	lsrs	r3, r3, #24
 800a926:	b2da      	uxtb	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	0c1b      	lsrs	r3, r3, #16
 800a930:	b2da      	uxtb	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	372c      	adds	r7, #44	; 0x2c
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	58004000 	.word	0x58004000
 800a950:	a94656b9 	.word	0xa94656b9

0800a954 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	4a08      	ldr	r2, [pc, #32]	; (800a984 <shci_init+0x30>)
 800a964:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a966:	4a08      	ldr	r2, [pc, #32]	; (800a988 <shci_init+0x34>)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a96c:	4806      	ldr	r0, [pc, #24]	; (800a988 <shci_init+0x34>)
 800a96e:	f000 f911 	bl	800ab94 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4618      	mov	r0, r3
 800a978:	f000 f894 	bl	800aaa4 <TlInit>

  return;
 800a97c:	bf00      	nop
}
 800a97e:	3708      	adds	r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	20000298 	.word	0x20000298
 800a988:	20000278 	.word	0x20000278

0800a98c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a992:	4822      	ldr	r0, [pc, #136]	; (800aa1c <shci_user_evt_proc+0x90>)
 800a994:	f001 fb15 	bl	800bfc2 <LST_is_empty>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d12b      	bne.n	800a9f6 <shci_user_evt_proc+0x6a>
 800a99e:	4b20      	ldr	r3, [pc, #128]	; (800aa20 <shci_user_evt_proc+0x94>)
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d027      	beq.n	800a9f6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a9a6:	f107 030c 	add.w	r3, r7, #12
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	481b      	ldr	r0, [pc, #108]	; (800aa1c <shci_user_evt_proc+0x90>)
 800a9ae:	f001 fb8f 	bl	800c0d0 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a9b2:	4b1c      	ldr	r3, [pc, #112]	; (800aa24 <shci_user_evt_proc+0x98>)
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00c      	beq.n	800a9d4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a9c2:	4b18      	ldr	r3, [pc, #96]	; (800aa24 <shci_user_evt_proc+0x98>)
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	1d3a      	adds	r2, r7, #4
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a9cc:	793a      	ldrb	r2, [r7, #4]
 800a9ce:	4b14      	ldr	r3, [pc, #80]	; (800aa20 <shci_user_evt_proc+0x94>)
 800a9d0:	701a      	strb	r2, [r3, #0]
 800a9d2:	e002      	b.n	800a9da <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a9d4:	4b12      	ldr	r3, [pc, #72]	; (800aa20 <shci_user_evt_proc+0x94>)
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a9da:	4b11      	ldr	r3, [pc, #68]	; (800aa20 <shci_user_evt_proc+0x94>)
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d004      	beq.n	800a9ec <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f000 fa95 	bl	800af14 <TL_MM_EvtDone>
 800a9ea:	e004      	b.n	800a9f6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	480a      	ldr	r0, [pc, #40]	; (800aa1c <shci_user_evt_proc+0x90>)
 800a9f2:	f001 fb06 	bl	800c002 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a9f6:	4809      	ldr	r0, [pc, #36]	; (800aa1c <shci_user_evt_proc+0x90>)
 800a9f8:	f001 fae3 	bl	800bfc2 <LST_is_empty>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d107      	bne.n	800aa12 <shci_user_evt_proc+0x86>
 800aa02:	4b07      	ldr	r3, [pc, #28]	; (800aa20 <shci_user_evt_proc+0x94>)
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d003      	beq.n	800aa12 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800aa0a:	4804      	ldr	r0, [pc, #16]	; (800aa1c <shci_user_evt_proc+0x90>)
 800aa0c:	f7f5 fdfa 	bl	8000604 <shci_notify_asynch_evt>
  }


  return;
 800aa10:	bf00      	nop
 800aa12:	bf00      	nop
}
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	20000238 	.word	0x20000238
 800aa20:	20000248 	.word	0x20000248
 800aa24:	20000278 	.word	0x20000278

0800aa28 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60ba      	str	r2, [r7, #8]
 800aa30:	607b      	str	r3, [r7, #4]
 800aa32:	4603      	mov	r3, r0
 800aa34:	81fb      	strh	r3, [r7, #14]
 800aa36:	460b      	mov	r3, r1
 800aa38:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	f000 f864 	bl	800ab08 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800aa40:	4b16      	ldr	r3, [pc, #88]	; (800aa9c <shci_send+0x74>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	89fa      	ldrh	r2, [r7, #14]
 800aa46:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800aa4a:	4b14      	ldr	r3, [pc, #80]	; (800aa9c <shci_send+0x74>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	7b7a      	ldrb	r2, [r7, #13]
 800aa50:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800aa52:	4b12      	ldr	r3, [pc, #72]	; (800aa9c <shci_send+0x74>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	330c      	adds	r3, #12
 800aa58:	7b7a      	ldrb	r2, [r7, #13]
 800aa5a:	68b9      	ldr	r1, [r7, #8]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f006 ff4b 	bl	80118f8 <memcpy>

  shciContext.io.Send(0,0);
 800aa62:	4b0f      	ldr	r3, [pc, #60]	; (800aaa0 <shci_send+0x78>)
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	2100      	movs	r1, #0
 800aa68:	2000      	movs	r0, #0
 800aa6a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800aa6c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800aa70:	f7f5 fde8 	bl	8000644 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f103 0008 	add.w	r0, r3, #8
 800aa7a:	4b08      	ldr	r3, [pc, #32]	; (800aa9c <shci_send+0x74>)
 800aa7c:	6819      	ldr	r1, [r3, #0]
 800aa7e:	4b07      	ldr	r3, [pc, #28]	; (800aa9c <shci_send+0x74>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	789b      	ldrb	r3, [r3, #2]
 800aa84:	3303      	adds	r3, #3
 800aa86:	461a      	mov	r2, r3
 800aa88:	f006 ff36 	bl	80118f8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800aa8c:	2001      	movs	r0, #1
 800aa8e:	f000 f83b 	bl	800ab08 <Cmd_SetStatus>

  return;
 800aa92:	bf00      	nop
}
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20000244 	.word	0x20000244
 800aaa0:	20000278 	.word	0x20000278

0800aaa4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800aaac:	4a10      	ldr	r2, [pc, #64]	; (800aaf0 <TlInit+0x4c>)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800aab2:	4810      	ldr	r0, [pc, #64]	; (800aaf4 <TlInit+0x50>)
 800aab4:	f001 fa75 	bl	800bfa2 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800aab8:	2001      	movs	r0, #1
 800aaba:	f000 f825 	bl	800ab08 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800aabe:	4b0e      	ldr	r3, [pc, #56]	; (800aaf8 <TlInit+0x54>)
 800aac0:	2201      	movs	r2, #1
 800aac2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800aac4:	4b0d      	ldr	r3, [pc, #52]	; (800aafc <TlInit+0x58>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00c      	beq.n	800aae6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800aad0:	4b0b      	ldr	r3, [pc, #44]	; (800ab00 <TlInit+0x5c>)
 800aad2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800aad4:	4b0b      	ldr	r3, [pc, #44]	; (800ab04 <TlInit+0x60>)
 800aad6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800aad8:	4b08      	ldr	r3, [pc, #32]	; (800aafc <TlInit+0x58>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f107 020c 	add.w	r2, r7, #12
 800aae0:	4610      	mov	r0, r2
 800aae2:	4798      	blx	r3
  }

  return;
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop
}
 800aae8:	3718      	adds	r7, #24
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	20000244 	.word	0x20000244
 800aaf4:	20000238 	.word	0x20000238
 800aaf8:	20000248 	.word	0x20000248
 800aafc:	20000278 	.word	0x20000278
 800ab00:	0800ab59 	.word	0x0800ab59
 800ab04:	0800ab71 	.word	0x0800ab71

0800ab08 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800ab12:	79fb      	ldrb	r3, [r7, #7]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10b      	bne.n	800ab30 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800ab18:	4b0d      	ldr	r3, [pc, #52]	; (800ab50 <Cmd_SetStatus+0x48>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d003      	beq.n	800ab28 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800ab20:	4b0b      	ldr	r3, [pc, #44]	; (800ab50 <Cmd_SetStatus+0x48>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2000      	movs	r0, #0
 800ab26:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800ab28:	4b0a      	ldr	r3, [pc, #40]	; (800ab54 <Cmd_SetStatus+0x4c>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800ab2e:	e00b      	b.n	800ab48 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800ab30:	4b08      	ldr	r3, [pc, #32]	; (800ab54 <Cmd_SetStatus+0x4c>)
 800ab32:	2201      	movs	r2, #1
 800ab34:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800ab36:	4b06      	ldr	r3, [pc, #24]	; (800ab50 <Cmd_SetStatus+0x48>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d004      	beq.n	800ab48 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800ab3e:	4b04      	ldr	r3, [pc, #16]	; (800ab50 <Cmd_SetStatus+0x48>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2001      	movs	r0, #1
 800ab44:	4798      	blx	r3
  return;
 800ab46:	bf00      	nop
 800ab48:	bf00      	nop
}
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	20000298 	.word	0x20000298
 800ab54:	20000240 	.word	0x20000240

0800ab58 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800ab60:	2000      	movs	r0, #0
 800ab62:	f7f5 fd5f 	bl	8000624 <shci_cmd_resp_release>

  return;
 800ab66:	bf00      	nop
}
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
	...

0800ab70 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800ab78:	6879      	ldr	r1, [r7, #4]
 800ab7a:	4805      	ldr	r0, [pc, #20]	; (800ab90 <TlUserEvtReceived+0x20>)
 800ab7c:	f001 fa65 	bl	800c04a <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ab80:	4803      	ldr	r0, [pc, #12]	; (800ab90 <TlUserEvtReceived+0x20>)
 800ab82:	f7f5 fd3f 	bl	8000604 <shci_notify_asynch_evt>

  return;
 800ab86:	bf00      	nop
}
 800ab88:	3708      	adds	r7, #8
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	20000238 	.word	0x20000238

0800ab94 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a05      	ldr	r2, [pc, #20]	; (800abb4 <shci_register_io_bus+0x20>)
 800aba0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a04      	ldr	r2, [pc, #16]	; (800abb8 <shci_register_io_bus+0x24>)
 800aba6:	611a      	str	r2, [r3, #16]

  return;
 800aba8:	bf00      	nop
}
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	0800acb1 	.word	0x0800acb1
 800abb8:	0800ad05 	.word	0x0800ad05

0800abbc <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800abc0:	f006 f80a 	bl	8010bd8 <HW_IPCC_Enable>

  return;
 800abc4:	bf00      	nop
}
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <TL_Init>:


void TL_Init( void )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800abcc:	4b10      	ldr	r3, [pc, #64]	; (800ac10 <TL_Init+0x48>)
 800abce:	4a11      	ldr	r2, [pc, #68]	; (800ac14 <TL_Init+0x4c>)
 800abd0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800abd2:	4b0f      	ldr	r3, [pc, #60]	; (800ac10 <TL_Init+0x48>)
 800abd4:	4a10      	ldr	r2, [pc, #64]	; (800ac18 <TL_Init+0x50>)
 800abd6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800abd8:	4b0d      	ldr	r3, [pc, #52]	; (800ac10 <TL_Init+0x48>)
 800abda:	4a10      	ldr	r2, [pc, #64]	; (800ac1c <TL_Init+0x54>)
 800abdc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800abde:	4b0c      	ldr	r3, [pc, #48]	; (800ac10 <TL_Init+0x48>)
 800abe0:	4a0f      	ldr	r2, [pc, #60]	; (800ac20 <TL_Init+0x58>)
 800abe2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800abe4:	4b0a      	ldr	r3, [pc, #40]	; (800ac10 <TL_Init+0x48>)
 800abe6:	4a0f      	ldr	r2, [pc, #60]	; (800ac24 <TL_Init+0x5c>)
 800abe8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800abea:	4b09      	ldr	r3, [pc, #36]	; (800ac10 <TL_Init+0x48>)
 800abec:	4a0e      	ldr	r2, [pc, #56]	; (800ac28 <TL_Init+0x60>)
 800abee:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800abf0:	4b07      	ldr	r3, [pc, #28]	; (800ac10 <TL_Init+0x48>)
 800abf2:	4a0e      	ldr	r2, [pc, #56]	; (800ac2c <TL_Init+0x64>)
 800abf4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800abf6:	4b06      	ldr	r3, [pc, #24]	; (800ac10 <TL_Init+0x48>)
 800abf8:	4a0d      	ldr	r2, [pc, #52]	; (800ac30 <TL_Init+0x68>)
 800abfa:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800abfc:	4b04      	ldr	r3, [pc, #16]	; (800ac10 <TL_Init+0x48>)
 800abfe:	4a0d      	ldr	r2, [pc, #52]	; (800ac34 <TL_Init+0x6c>)
 800ac00:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ac02:	4b03      	ldr	r3, [pc, #12]	; (800ac10 <TL_Init+0x48>)
 800ac04:	4a0c      	ldr	r2, [pc, #48]	; (800ac38 <TL_Init+0x70>)
 800ac06:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ac08:	f005 fffa 	bl	8010c00 <HW_IPCC_Init>

  return;
 800ac0c:	bf00      	nop
}
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	20030000 	.word	0x20030000
 800ac14:	20030028 	.word	0x20030028
 800ac18:	20030048 	.word	0x20030048
 800ac1c:	20030058 	.word	0x20030058
 800ac20:	20030064 	.word	0x20030064
 800ac24:	2003006c 	.word	0x2003006c
 800ac28:	20030074 	.word	0x20030074
 800ac2c:	2003007c 	.word	0x2003007c
 800ac30:	20030098 	.word	0x20030098
 800ac34:	2003009c 	.word	0x2003009c
 800ac38:	200300a8 	.word	0x200300a8

0800ac3c <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ac42:	e01c      	b.n	800ac7e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ac44:	1d3b      	adds	r3, r7, #4
 800ac46:	4619      	mov	r1, r3
 800ac48:	4812      	ldr	r0, [pc, #72]	; (800ac94 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ac4a:	f001 fa41 	bl	800c0d0 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	7a5b      	ldrb	r3, [r3, #9]
 800ac52:	2b0f      	cmp	r3, #15
 800ac54:	d003      	beq.n	800ac5e <HW_IPCC_BLE_RxEvtNot+0x22>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	7a5b      	ldrb	r3, [r3, #9]
 800ac5a:	2b0e      	cmp	r3, #14
 800ac5c:	d105      	bne.n	800ac6a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4619      	mov	r1, r3
 800ac62:	2002      	movs	r0, #2
 800ac64:	f000 f9ba 	bl	800afdc <OutputDbgTrace>
 800ac68:	e004      	b.n	800ac74 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	2003      	movs	r0, #3
 800ac70:	f000 f9b4 	bl	800afdc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800ac74:	4b08      	ldr	r3, [pc, #32]	; (800ac98 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ac7e:	4805      	ldr	r0, [pc, #20]	; (800ac94 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ac80:	f001 f99f 	bl	800bfc2 <LST_is_empty>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d0dc      	beq.n	800ac44 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ac8a:	bf00      	nop
}
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	200300c4 	.word	0x200300c4
 800ac98:	200002a4 	.word	0x200002a4

0800ac9c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800aca0:	4b02      	ldr	r3, [pc, #8]	; (800acac <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4798      	blx	r3

  return;
 800aca6:	bf00      	nop
}
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	200002a8 	.word	0x200002a8

0800acb0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800acbc:	480d      	ldr	r0, [pc, #52]	; (800acf4 <TL_SYS_Init+0x44>)
 800acbe:	f001 f970 	bl	800bfa2 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800acc2:	4b0d      	ldr	r3, [pc, #52]	; (800acf8 <TL_SYS_Init+0x48>)
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	689a      	ldr	r2, [r3, #8]
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	4a08      	ldr	r2, [pc, #32]	; (800acf4 <TL_SYS_Init+0x44>)
 800acd4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800acd6:	f005 ffc1 	bl	8010c5c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a07      	ldr	r2, [pc, #28]	; (800acfc <TL_SYS_Init+0x4c>)
 800ace0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	4a06      	ldr	r2, [pc, #24]	; (800ad00 <TL_SYS_Init+0x50>)
 800ace8:	6013      	str	r3, [r2, #0]

  return 0;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	200300cc 	.word	0x200300cc
 800acf8:	20030000 	.word	0x20030000
 800acfc:	200002ac 	.word	0x200002ac
 800ad00:	200002b0 	.word	0x200002b0

0800ad04 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ad10:	4b09      	ldr	r3, [pc, #36]	; (800ad38 <TL_SYS_SendCmd+0x34>)
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2210      	movs	r2, #16
 800ad18:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ad1a:	4b07      	ldr	r3, [pc, #28]	; (800ad38 <TL_SYS_SendCmd+0x34>)
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4619      	mov	r1, r3
 800ad22:	2004      	movs	r0, #4
 800ad24:	f000 f95a 	bl	800afdc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ad28:	f005 ffa2 	bl	8010c70 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20030000 	.word	0x20030000

0800ad3c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ad40:	4b07      	ldr	r3, [pc, #28]	; (800ad60 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4619      	mov	r1, r3
 800ad48:	2005      	movs	r0, #5
 800ad4a:	f000 f947 	bl	800afdc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ad4e:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a03      	ldr	r2, [pc, #12]	; (800ad60 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ad54:	68d2      	ldr	r2, [r2, #12]
 800ad56:	6812      	ldr	r2, [r2, #0]
 800ad58:	4610      	mov	r0, r2
 800ad5a:	4798      	blx	r3

  return;
 800ad5c:	bf00      	nop
}
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	20030000 	.word	0x20030000
 800ad64:	200002ac 	.word	0x200002ac

0800ad68 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ad6e:	e00e      	b.n	800ad8e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ad70:	1d3b      	adds	r3, r7, #4
 800ad72:	4619      	mov	r1, r3
 800ad74:	480b      	ldr	r0, [pc, #44]	; (800ada4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ad76:	f001 f9ab 	bl	800c0d0 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	2006      	movs	r0, #6
 800ad80:	f000 f92c 	bl	800afdc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ad84:	4b08      	ldr	r3, [pc, #32]	; (800ada8 <HW_IPCC_SYS_EvtNot+0x40>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ad8e:	4805      	ldr	r0, [pc, #20]	; (800ada4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ad90:	f001 f917 	bl	800bfc2 <LST_is_empty>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d0ea      	beq.n	800ad70 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ad9a:	bf00      	nop
}
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	200300cc 	.word	0x200300cc
 800ada8:	200002b0 	.word	0x200002b0

0800adac <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800adb4:	4b0a      	ldr	r3, [pc, #40]	; (800ade0 <TL_THREAD_Init+0x34>)
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	685a      	ldr	r2, [r3, #4]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	689a      	ldr	r2, [r3, #8]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 800add2:	f005 ff73 	bl	8010cbc <HW_IPCC_THREAD_Init>

  return;
 800add6:	bf00      	nop
}
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	20030000 	.word	0x20030000

0800ade4 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800ade8:	4b04      	ldr	r3, [pc, #16]	; (800adfc <TL_OT_SendCmd+0x18>)
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	2208      	movs	r2, #8
 800adf0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800adf2:	f005 ff71 	bl	8010cd8 <HW_IPCC_OT_SendCmd>

  return;
 800adf6:	bf00      	nop
}
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20030000 	.word	0x20030000

0800ae00 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800ae04:	4b04      	ldr	r3, [pc, #16]	; (800ae18 <TL_CLI_SendCmd+0x18>)
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	220a      	movs	r2, #10
 800ae0c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800ae0e:	f005 ff71 	bl	8010cf4 <HW_IPCC_CLI_SendCmd>

  return;
 800ae12:	bf00      	nop
}
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20030000 	.word	0x20030000

0800ae1c <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800ae20:	4b04      	ldr	r3, [pc, #16]	; (800ae34 <TL_THREAD_SendAck+0x18>)
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	220d      	movs	r2, #13
 800ae28:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800ae2a:	f005 ff6d 	bl	8010d08 <HW_IPCC_THREAD_SendAck>

  return;
 800ae2e:	bf00      	nop
}
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20030000 	.word	0x20030000

0800ae38 <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800ae3c:	4b04      	ldr	r3, [pc, #16]	; (800ae50 <TL_THREAD_CliSendAck+0x18>)
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	220d      	movs	r2, #13
 800ae44:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800ae46:	f005 ff6d 	bl	8010d24 <HW_IPCC_THREAD_CliSendAck>

  return;
 800ae4a:	bf00      	nop
}
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	20030000 	.word	0x20030000

0800ae54 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800ae58:	4b03      	ldr	r3, [pc, #12]	; (800ae68 <HW_IPCC_OT_CmdEvtNot+0x14>)
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f005 fc00 	bl	8010664 <TL_OT_CmdEvtReceived>

  return;
 800ae64:	bf00      	nop
}
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	20030000 	.word	0x20030000

0800ae6c <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800ae70:	4b03      	ldr	r3, [pc, #12]	; (800ae80 <HW_IPCC_THREAD_EvtNot+0x14>)
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f005 fbfe 	bl	8010678 <TL_THREAD_NotReceived>

  return;
 800ae7c:	bf00      	nop
}
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	20030000 	.word	0x20030000

0800ae84 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800ae88:	4b03      	ldr	r3, [pc, #12]	; (800ae98 <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f005 fca0 	bl	80107d4 <TL_THREAD_CliNotReceived>

  return;
 800ae94:	bf00      	nop
}
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	20030000 	.word	0x20030000

0800ae9c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800aea4:	4817      	ldr	r0, [pc, #92]	; (800af04 <TL_MM_Init+0x68>)
 800aea6:	f001 f87c 	bl	800bfa2 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800aeaa:	4817      	ldr	r0, [pc, #92]	; (800af08 <TL_MM_Init+0x6c>)
 800aeac:	f001 f879 	bl	800bfa2 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800aeb0:	4b16      	ldr	r3, [pc, #88]	; (800af0c <TL_MM_Init+0x70>)
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	4a16      	ldr	r2, [pc, #88]	; (800af10 <TL_MM_Init+0x74>)
 800aeb6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800aeb8:	4b15      	ldr	r3, [pc, #84]	; (800af10 <TL_MM_Init+0x74>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	6892      	ldr	r2, [r2, #8]
 800aec0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800aec2:	4b13      	ldr	r3, [pc, #76]	; (800af10 <TL_MM_Init+0x74>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	68d2      	ldr	r2, [r2, #12]
 800aeca:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800aecc:	4b10      	ldr	r3, [pc, #64]	; (800af10 <TL_MM_Init+0x74>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a0c      	ldr	r2, [pc, #48]	; (800af04 <TL_MM_Init+0x68>)
 800aed2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800aed4:	4b0e      	ldr	r3, [pc, #56]	; (800af10 <TL_MM_Init+0x74>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	6812      	ldr	r2, [r2, #0]
 800aedc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800aede:	4b0c      	ldr	r3, [pc, #48]	; (800af10 <TL_MM_Init+0x74>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	6852      	ldr	r2, [r2, #4]
 800aee6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800aee8:	4b09      	ldr	r3, [pc, #36]	; (800af10 <TL_MM_Init+0x74>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	6912      	ldr	r2, [r2, #16]
 800aef0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800aef2:	4b07      	ldr	r3, [pc, #28]	; (800af10 <TL_MM_Init+0x74>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	6952      	ldr	r2, [r2, #20]
 800aefa:	619a      	str	r2, [r3, #24]

  return;
 800aefc:	bf00      	nop
}
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	200300b4 	.word	0x200300b4
 800af08:	2000029c 	.word	0x2000029c
 800af0c:	20030000 	.word	0x20030000
 800af10:	200002b4 	.word	0x200002b4

0800af14 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800af1c:	6879      	ldr	r1, [r7, #4]
 800af1e:	4807      	ldr	r0, [pc, #28]	; (800af3c <TL_MM_EvtDone+0x28>)
 800af20:	f001 f893 	bl	800c04a <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800af24:	6879      	ldr	r1, [r7, #4]
 800af26:	2000      	movs	r0, #0
 800af28:	f000 f858 	bl	800afdc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800af2c:	4804      	ldr	r0, [pc, #16]	; (800af40 <TL_MM_EvtDone+0x2c>)
 800af2e:	f005 ff2b 	bl	8010d88 <HW_IPCC_MM_SendFreeBuf>

  return;
 800af32:	bf00      	nop
}
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	2000029c 	.word	0x2000029c
 800af40:	0800af45 	.word	0x0800af45

0800af44 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800af4a:	e00c      	b.n	800af66 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800af4c:	1d3b      	adds	r3, r7, #4
 800af4e:	4619      	mov	r1, r3
 800af50:	480a      	ldr	r0, [pc, #40]	; (800af7c <SendFreeBuf+0x38>)
 800af52:	f001 f8bd 	bl	800c0d0 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800af56:	4b0a      	ldr	r3, [pc, #40]	; (800af80 <SendFreeBuf+0x3c>)
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	4611      	mov	r1, r2
 800af60:	4618      	mov	r0, r3
 800af62:	f001 f872 	bl	800c04a <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800af66:	4805      	ldr	r0, [pc, #20]	; (800af7c <SendFreeBuf+0x38>)
 800af68:	f001 f82b 	bl	800bfc2 <LST_is_empty>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0ec      	beq.n	800af4c <SendFreeBuf+0x8>
  }

  return;
 800af72:	bf00      	nop
}
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	2000029c 	.word	0x2000029c
 800af80:	20030000 	.word	0x20030000

0800af84 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800af88:	4805      	ldr	r0, [pc, #20]	; (800afa0 <TL_TRACES_Init+0x1c>)
 800af8a:	f001 f80a 	bl	800bfa2 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800af8e:	4b05      	ldr	r3, [pc, #20]	; (800afa4 <TL_TRACES_Init+0x20>)
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	4a03      	ldr	r2, [pc, #12]	; (800afa0 <TL_TRACES_Init+0x1c>)
 800af94:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800af96:	f005 ff2d 	bl	8010df4 <HW_IPCC_TRACES_Init>

  return;
 800af9a:	bf00      	nop
}
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	200300bc 	.word	0x200300bc
 800afa4:	20030000 	.word	0x20030000

0800afa8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800afae:	e008      	b.n	800afc2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800afb0:	1d3b      	adds	r3, r7, #4
 800afb2:	4619      	mov	r1, r3
 800afb4:	4808      	ldr	r0, [pc, #32]	; (800afd8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800afb6:	f001 f88b 	bl	800c0d0 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7f5 fb53 	bl	8000668 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800afc2:	4805      	ldr	r0, [pc, #20]	; (800afd8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800afc4:	f000 fffd 	bl	800bfc2 <LST_is_empty>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0f0      	beq.n	800afb0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800afce:	bf00      	nop
}
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	200300bc 	.word	0x200300bc

0800afdc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	6039      	str	r1, [r7, #0]
 800afe6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800afe8:	79fb      	ldrb	r3, [r7, #7]
 800afea:	2b06      	cmp	r3, #6
 800afec:	d849      	bhi.n	800b082 <OutputDbgTrace+0xa6>
 800afee:	a201      	add	r2, pc, #4	; (adr r2, 800aff4 <OutputDbgTrace+0x18>)
 800aff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff4:	0800b011 	.word	0x0800b011
 800aff8:	0800b033 	.word	0x0800b033
 800affc:	0800b039 	.word	0x0800b039
 800b000:	0800b053 	.word	0x0800b053
 800b004:	0800b05f 	.word	0x0800b05f
 800b008:	0800b065 	.word	0x0800b065
 800b00c:	0800b077 	.word	0x0800b077
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	7a5b      	ldrb	r3, [r3, #9]
 800b018:	2b0f      	cmp	r3, #15
 800b01a:	d004      	beq.n	800b026 <OutputDbgTrace+0x4a>
 800b01c:	2bff      	cmp	r3, #255	; 0xff
 800b01e:	d004      	beq.n	800b02a <OutputDbgTrace+0x4e>
 800b020:	2b0e      	cmp	r3, #14
 800b022:	d004      	beq.n	800b02e <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b024:	e004      	b.n	800b030 <OutputDbgTrace+0x54>
          break;
 800b026:	bf00      	nop
 800b028:	e02c      	b.n	800b084 <OutputDbgTrace+0xa8>
          break;
 800b02a:	bf00      	nop
 800b02c:	e02a      	b.n	800b084 <OutputDbgTrace+0xa8>
          break;
 800b02e:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b030:	e028      	b.n	800b084 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b036:	e025      	b.n	800b084 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	7a5b      	ldrb	r3, [r3, #9]
 800b040:	2b0e      	cmp	r3, #14
 800b042:	d002      	beq.n	800b04a <OutputDbgTrace+0x6e>
 800b044:	2b0f      	cmp	r3, #15
 800b046:	d002      	beq.n	800b04e <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b048:	e002      	b.n	800b050 <OutputDbgTrace+0x74>
          break;
 800b04a:	bf00      	nop
 800b04c:	e01a      	b.n	800b084 <OutputDbgTrace+0xa8>
          break;
 800b04e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b050:	e018      	b.n	800b084 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	7a5b      	ldrb	r3, [r3, #9]
 800b05a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b05c:	e012      	b.n	800b084 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b062:	e00f      	b.n	800b084 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	7a5b      	ldrb	r3, [r3, #9]
 800b06c:	2b0e      	cmp	r3, #14
 800b06e:	d000      	beq.n	800b072 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b070:	e000      	b.n	800b074 <OutputDbgTrace+0x98>
          break;
 800b072:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b074:	e006      	b.n	800b084 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	7a5b      	ldrb	r3, [r3, #9]
 800b07e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b080:	e000      	b.n	800b084 <OutputDbgTrace+0xa8>

    default:
      break;
 800b082:	bf00      	nop
  }

  return;
 800b084:	bf00      	nop
}
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <otCoapHeaderInit>:
extern otCoapRequestHandler defaultCoapRequestHandlerCb;

#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	460b      	mov	r3, r1
 800b09a:	70fb      	strb	r3, [r7, #3]
 800b09c:	4613      	mov	r3, r2
 800b09e:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800b0a0:	f005 fafa 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b0a4:	f005 fa96 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b0a8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f062 0260 	orn	r2, r2, #96	; 0x60
 800b0b2:	701a      	strb	r2, [r3, #0]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	705a      	strb	r2, [r3, #1]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	709a      	strb	r2, [r3, #2]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f042 0203 	orr.w	r2, r2, #3
 800b0c8:	711a      	strb	r2, [r3, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	715a      	strb	r2, [r3, #5]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	719a      	strb	r2, [r3, #6]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 800b0dc:	78fa      	ldrb	r2, [r7, #3]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 800b0e2:	78ba      	ldrb	r2, [r7, #2]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800b0e8:	f005 fa98 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b0ec:	f005 fa7e 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b0f0:	60f8      	str	r0, [r7, #12]
}
 800b0f2:	bf00      	nop
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b086      	sub	sp, #24
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	60f8      	str	r0, [r7, #12]
 800b102:	60b9      	str	r1, [r7, #8]
 800b104:	4613      	mov	r3, r2
 800b106:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 800b108:	f005 fac6 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b10c:	f005 fa62 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b110:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2200      	movs	r2, #0
 800b116:	f062 025f 	orn	r2, r2, #95	; 0x5f
 800b11a:	701a      	strb	r2, [r3, #0]
 800b11c:	2200      	movs	r2, #0
 800b11e:	705a      	strb	r2, [r3, #1]
 800b120:	2200      	movs	r2, #0
 800b122:	709a      	strb	r2, [r3, #2]
 800b124:	2200      	movs	r2, #0
 800b126:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f042 0203 	orr.w	r2, r2, #3
 800b130:	711a      	strb	r2, [r3, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	715a      	strb	r2, [r3, #5]
 800b136:	2200      	movs	r2, #0
 800b138:	719a      	strb	r2, [r3, #6]
 800b13a:	2200      	movs	r2, #0
 800b13c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 800b14a:	79fa      	ldrb	r2, [r7, #7]
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800b150:	f005 fa64 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b154:	f005 fa4a 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b158:	6178      	str	r0, [r7, #20]
}
 800b15a:	bf00      	nop
 800b15c:	3718      	adds	r7, #24
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <otCoapHeaderAppendContentFormatOption>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	460b      	mov	r3, r1
 800b16c:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800b16e:	f005 fa93 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b172:	f005 fa2f 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b176:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f062 025d 	orn	r2, r2, #93	; 0x5d
 800b180:	701a      	strb	r2, [r3, #0]
 800b182:	2200      	movs	r2, #0
 800b184:	705a      	strb	r2, [r3, #1]
 800b186:	2200      	movs	r2, #0
 800b188:	709a      	strb	r2, [r3, #2]
 800b18a:	2200      	movs	r2, #0
 800b18c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	f042 0202 	orr.w	r2, r2, #2
 800b196:	711a      	strb	r2, [r3, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	715a      	strb	r2, [r3, #5]
 800b19c:	2200      	movs	r2, #0
 800b19e:	719a      	strb	r2, [r3, #6]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 800b1aa:	78fa      	ldrb	r2, [r7, #3]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800b1b0:	f005 fa34 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b1b4:	f005 fa1a 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b1b8:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	b2db      	uxtb	r3, r3
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800b1d0:	f005 fa62 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b1d4:	f005 f9fe 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b1d8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f062 024d 	orn	r2, r2, #77	; 0x4d
 800b1e2:	701a      	strb	r2, [r3, #0]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	705a      	strb	r2, [r3, #1]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	709a      	strb	r2, [r3, #2]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f042 0201 	orr.w	r2, r2, #1
 800b1f8:	711a      	strb	r2, [r3, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	715a      	strb	r2, [r3, #5]
 800b1fe:	2200      	movs	r2, #0
 800b200:	719a      	strb	r2, [r3, #6]
 800b202:	2200      	movs	r2, #0
 800b204:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800b20c:	f005 fa06 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b210:	f005 f9ec 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b214:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	b2db      	uxtb	r3, r3
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	460b      	mov	r3, r1
 800b22e:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800b230:	f005 fa32 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b234:	f005 f9ce 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b238:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	f062 0256 	orn	r2, r2, #86	; 0x56
 800b242:	701a      	strb	r2, [r3, #0]
 800b244:	2200      	movs	r2, #0
 800b246:	705a      	strb	r2, [r3, #1]
 800b248:	2200      	movs	r2, #0
 800b24a:	709a      	strb	r2, [r3, #2]
 800b24c:	2200      	movs	r2, #0
 800b24e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f042 0202 	orr.w	r2, r2, #2
 800b258:	711a      	strb	r2, [r3, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	715a      	strb	r2, [r3, #5]
 800b25e:	2200      	movs	r2, #0
 800b260:	719a      	strb	r2, [r3, #6]
 800b262:	2200      	movs	r2, #0
 800b264:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 800b26c:	887a      	ldrh	r2, [r7, #2]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800b272:	f005 f9d3 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b276:	f005 f9b9 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b27a:	60f8      	str	r0, [r7, #12]
}
 800b27c:	bf00      	nop
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800b28c:	f005 fa04 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b290:	f005 f9a0 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b294:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	f062 0261 	orn	r2, r2, #97	; 0x61
 800b29e:	701a      	strb	r2, [r3, #0]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	705a      	strb	r2, [r3, #1]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	709a      	strb	r2, [r3, #2]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f042 0201 	orr.w	r2, r2, #1
 800b2b4:	711a      	strb	r2, [r3, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	715a      	strb	r2, [r3, #5]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	719a      	strb	r2, [r3, #6]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800b2c8:	f005 f9a8 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b2cc:	f005 f98e 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b2d0:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	b2db      	uxtb	r3, r3
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800b2e8:	f005 f9d6 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b2ec:	f005 f972 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b2f0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f062 024c 	orn	r2, r2, #76	; 0x4c
 800b2fa:	701a      	strb	r2, [r3, #0]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	705a      	strb	r2, [r3, #1]
 800b300:	2200      	movs	r2, #0
 800b302:	709a      	strb	r2, [r3, #2]
 800b304:	2200      	movs	r2, #0
 800b306:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f042 0201 	orr.w	r2, r2, #1
 800b310:	711a      	strb	r2, [r3, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	715a      	strb	r2, [r3, #5]
 800b316:	2200      	movs	r2, #0
 800b318:	719a      	strb	r2, [r3, #6]
 800b31a:	2200      	movs	r2, #0
 800b31c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800b324:	f005 f97a 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b328:	f005 f960 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b32c:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	b2db      	uxtb	r3, r3
}
 800b334:	4618      	mov	r0, r3
 800b336:	3710      	adds	r7, #16
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800b344:	f005 f9a8 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b348:	f005 f944 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b34c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	f062 0255 	orn	r2, r2, #85	; 0x55
 800b356:	701a      	strb	r2, [r3, #0]
 800b358:	2200      	movs	r2, #0
 800b35a:	705a      	strb	r2, [r3, #1]
 800b35c:	2200      	movs	r2, #0
 800b35e:	709a      	strb	r2, [r3, #2]
 800b360:	2200      	movs	r2, #0
 800b362:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	f042 0201 	orr.w	r2, r2, #1
 800b36c:	711a      	strb	r2, [r3, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	715a      	strb	r2, [r3, #5]
 800b372:	2200      	movs	r2, #0
 800b374:	719a      	strb	r2, [r3, #6]
 800b376:	2200      	movs	r2, #0
 800b378:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800b380:	f005 f94c 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b384:	f005 f932 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b388:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	b29b      	uxth	r3, r3
}
 800b390:	4618      	mov	r0, r3
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800b3a0:	f005 f97a 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b3a4:	f005 f916 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b3a8:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f062 0254 	orn	r2, r2, #84	; 0x54
 800b3b2:	701a      	strb	r2, [r3, #0]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	705a      	strb	r2, [r3, #1]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	709a      	strb	r2, [r3, #2]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f042 0201 	orr.w	r2, r2, #1
 800b3c8:	711a      	strb	r2, [r3, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	715a      	strb	r2, [r3, #5]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	719a      	strb	r2, [r3, #6]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800b3dc:	f005 f91e 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b3e0:	f005 f904 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b3e4:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	b2db      	uxtb	r3, r3
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800b3fc:	f005 f94c 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b400:	f005 f8e8 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b404:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f062 0253 	orn	r2, r2, #83	; 0x53
 800b40e:	701a      	strb	r2, [r3, #0]
 800b410:	2200      	movs	r2, #0
 800b412:	705a      	strb	r2, [r3, #1]
 800b414:	2200      	movs	r2, #0
 800b416:	709a      	strb	r2, [r3, #2]
 800b418:	2200      	movs	r2, #0
 800b41a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	f042 0201 	orr.w	r2, r2, #1
 800b424:	711a      	strb	r2, [r3, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	715a      	strb	r2, [r3, #5]
 800b42a:	2200      	movs	r2, #0
 800b42c:	719a      	strb	r2, [r3, #6]
 800b42e:	2200      	movs	r2, #0
 800b430:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800b438:	f005 f8f0 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b43c:	f005 f8d6 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b440:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	689b      	ldr	r3, [r3, #8]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800b458:	f005 f91e 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b45c:	f005 f8ba 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b460:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	f062 0259 	orn	r2, r2, #89	; 0x59
 800b46a:	701a      	strb	r2, [r3, #0]
 800b46c:	2200      	movs	r2, #0
 800b46e:	705a      	strb	r2, [r3, #1]
 800b470:	2200      	movs	r2, #0
 800b472:	709a      	strb	r2, [r3, #2]
 800b474:	2200      	movs	r2, #0
 800b476:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f042 0201 	orr.w	r2, r2, #1
 800b480:	711a      	strb	r2, [r3, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	715a      	strb	r2, [r3, #5]
 800b486:	2200      	movs	r2, #0
 800b488:	719a      	strb	r2, [r3, #6]
 800b48a:	2200      	movs	r2, #0
 800b48c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800b494:	f005 f8c2 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b498:	f005 f8a8 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b49c:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	689b      	ldr	r3, [r3, #8]

}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <otCoapStart>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b084      	sub	sp, #16
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800b4b6:	f005 f8ef 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b4ba:	f005 f88b 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b4be:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f062 024b 	orn	r2, r2, #75	; 0x4b
 800b4c8:	701a      	strb	r2, [r3, #0]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	705a      	strb	r2, [r3, #1]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	709a      	strb	r2, [r3, #2]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f042 0201 	orr.w	r2, r2, #1
 800b4de:	711a      	strb	r2, [r3, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	715a      	strb	r2, [r3, #5]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	719a      	strb	r2, [r3, #6]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 800b4ec:	887a      	ldrh	r2, [r7, #2]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800b4f2:	f005 f893 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b4f6:	f005 f879 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b4fa:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	b2db      	uxtb	r3, r3
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b084      	sub	sp, #16
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800b514:	f005 f8c0 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b518:	f005 f85c 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b51c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f062 0249 	orn	r2, r2, #73	; 0x49
 800b526:	701a      	strb	r2, [r3, #0]
 800b528:	2200      	movs	r2, #0
 800b52a:	705a      	strb	r2, [r3, #1]
 800b52c:	2200      	movs	r2, #0
 800b52e:	709a      	strb	r2, [r3, #2]
 800b530:	2200      	movs	r2, #0
 800b532:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	f042 0201 	orr.w	r2, r2, #1
 800b53c:	711a      	strb	r2, [r3, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	715a      	strb	r2, [r3, #5]
 800b542:	2200      	movs	r2, #0
 800b544:	719a      	strb	r2, [r3, #6]
 800b546:	2200      	movs	r2, #0
 800b548:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800b550:	f005 f864 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b554:	f005 f84a 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b558:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	b2db      	uxtb	r3, r3
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800b574:	f005 f890 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b578:	f005 f82c 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b57c:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	2200      	movs	r2, #0
 800b582:	f062 0257 	orn	r2, r2, #87	; 0x57
 800b586:	701a      	strb	r2, [r3, #0]
 800b588:	2200      	movs	r2, #0
 800b58a:	705a      	strb	r2, [r3, #1]
 800b58c:	2200      	movs	r2, #0
 800b58e:	709a      	strb	r2, [r3, #2]
 800b590:	2200      	movs	r2, #0
 800b592:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	2200      	movs	r2, #0
 800b598:	f042 0202 	orr.w	r2, r2, #2
 800b59c:	711a      	strb	r2, [r3, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	715a      	strb	r2, [r3, #5]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	719a      	strb	r2, [r3, #6]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800b5b6:	f005 f831 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b5ba:	f005 f817 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b5be:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	b2db      	uxtb	r3, r3
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3718      	adds	r7, #24
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 800b5d4:	f005 f860 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b5d8:	f004 fffc 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b5dc:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f062 026b 	orn	r2, r2, #107	; 0x6b
 800b5e6:	701a      	strb	r2, [r3, #0]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	705a      	strb	r2, [r3, #1]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	709a      	strb	r2, [r3, #2]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	711a      	strb	r2, [r3, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	715a      	strb	r2, [r3, #5]
 800b5fe:	2200      	movs	r2, #0
 800b600:	719a      	strb	r2, [r3, #6]
 800b602:	2200      	movs	r2, #0
 800b604:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800b606:	f005 f809 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b60a:	f004 ffef 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b60e:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	689b      	ldr	r3, [r3, #8]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3708      	adds	r7, #8
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800b624:	f005 f838 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b628:	f004 ffd4 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b62c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2200      	movs	r2, #0
 800b632:	f062 0269 	orn	r2, r2, #105	; 0x69
 800b636:	701a      	strb	r2, [r3, #0]
 800b638:	2200      	movs	r2, #0
 800b63a:	705a      	strb	r2, [r3, #1]
 800b63c:	2200      	movs	r2, #0
 800b63e:	709a      	strb	r2, [r3, #2]
 800b640:	2200      	movs	r2, #0
 800b642:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2200      	movs	r2, #0
 800b648:	711a      	strb	r2, [r3, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	715a      	strb	r2, [r3, #5]
 800b64e:	2200      	movs	r2, #0
 800b650:	719a      	strb	r2, [r3, #6]
 800b652:	2200      	movs	r2, #0
 800b654:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800b656:	f004 ffe1 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b65a:	f004 ffc7 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b65e:	60f8      	str	r0, [r7, #12]
}
 800b660:	bf00      	nop
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800b674:	f005 f810 	bl	8010698 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 800b678:	4a15      	ldr	r2, [pc, #84]	; (800b6d0 <otSetStateChangedCallback+0x68>)
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b67e:	f004 ffa9 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b682:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	2200      	movs	r2, #0
 800b688:	f062 0268 	orn	r2, r2, #104	; 0x68
 800b68c:	701a      	strb	r2, [r3, #0]
 800b68e:	2200      	movs	r2, #0
 800b690:	705a      	strb	r2, [r3, #1]
 800b692:	2200      	movs	r2, #0
 800b694:	709a      	strb	r2, [r3, #2]
 800b696:	2200      	movs	r2, #0
 800b698:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f042 0201 	orr.w	r2, r2, #1
 800b6a2:	711a      	strb	r2, [r3, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	715a      	strb	r2, [r3, #5]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	719a      	strb	r2, [r3, #6]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800b6b6:	f004 ffb1 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b6ba:	f004 ff97 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b6be:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	b2db      	uxtb	r3, r3
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3718      	adds	r7, #24
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	200002b8 	.word	0x200002b8

0800b6d4 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800b6dc:	f004 ffdc 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b6e0:	f004 ff78 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b6e4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f062 0264 	orn	r2, r2, #100	; 0x64
 800b6ee:	701a      	strb	r2, [r3, #0]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	705a      	strb	r2, [r3, #1]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	709a      	strb	r2, [r3, #2]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	711a      	strb	r2, [r3, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	715a      	strb	r2, [r3, #5]
 800b706:	2200      	movs	r2, #0
 800b708:	719a      	strb	r2, [r3, #6]
 800b70a:	2200      	movs	r2, #0
 800b70c:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800b70e:	f004 ff85 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b712:	f004 ff6b 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b716:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	b2db      	uxtb	r3, r3
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b084      	sub	sp, #16
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	460b      	mov	r3, r1
 800b730:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800b732:	f004 ffb1 	bl	8010698 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b736:	f004 ff4d 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b73a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2200      	movs	r2, #0
 800b740:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800b744:	701a      	strb	r2, [r3, #0]
 800b746:	2200      	movs	r2, #0
 800b748:	705a      	strb	r2, [r3, #1]
 800b74a:	2200      	movs	r2, #0
 800b74c:	709a      	strb	r2, [r3, #2]
 800b74e:	2200      	movs	r2, #0
 800b750:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	f042 0201 	orr.w	r2, r2, #1
 800b75a:	711a      	strb	r2, [r3, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	715a      	strb	r2, [r3, #5]
 800b760:	2200      	movs	r2, #0
 800b762:	719a      	strb	r2, [r3, #6]
 800b764:	2200      	movs	r2, #0
 800b766:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800b768:	78fa      	ldrb	r2, [r7, #3]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800b76e:	f004 ff55 	bl	801061c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b772:	f004 ff3b 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b776:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	b2db      	uxtb	r3, r3
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	460b      	mov	r3, r1
 800b790:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800b792:	f004 ff81 	bl	8010698 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b796:	f004 ff1d 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b79a:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f042 0208 	orr.w	r2, r2, #8
 800b7a4:	701a      	strb	r2, [r3, #0]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	705a      	strb	r2, [r3, #1]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	709a      	strb	r2, [r3, #2]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f042 0201 	orr.w	r2, r2, #1
 800b7ba:	711a      	strb	r2, [r3, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	715a      	strb	r2, [r3, #5]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	719a      	strb	r2, [r3, #6]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800b7c8:	78fa      	ldrb	r2, [r7, #3]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800b7ce:	f004 ff25 	bl	801061c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b7d2:	f004 ff0b 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b7d6:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	b2db      	uxtb	r3, r3
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b084      	sub	sp, #16
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800b7f2:	f004 ff51 	bl	8010698 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b7f6:	f004 feed 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b7fa:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f042 020f 	orr.w	r2, r2, #15
 800b804:	701a      	strb	r2, [r3, #0]
 800b806:	2200      	movs	r2, #0
 800b808:	705a      	strb	r2, [r3, #1]
 800b80a:	2200      	movs	r2, #0
 800b80c:	709a      	strb	r2, [r3, #2]
 800b80e:	2200      	movs	r2, #0
 800b810:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	f042 0201 	orr.w	r2, r2, #1
 800b81a:	711a      	strb	r2, [r3, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	715a      	strb	r2, [r3, #5]
 800b820:	2200      	movs	r2, #0
 800b822:	719a      	strb	r2, [r3, #6]
 800b824:	2200      	movs	r2, #0
 800b826:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800b828:	887a      	ldrh	r2, [r7, #2]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800b82e:	f004 fef5 	bl	801061c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b832:	f004 fedb 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b836:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	b2db      	uxtb	r3, r3
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b084      	sub	sp, #16
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800b84e:	f004 ff23 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b852:	f004 febf 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b856:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f062 0246 	orn	r2, r2, #70	; 0x46
 800b860:	701a      	strb	r2, [r3, #0]
 800b862:	2200      	movs	r2, #0
 800b864:	705a      	strb	r2, [r3, #1]
 800b866:	2200      	movs	r2, #0
 800b868:	709a      	strb	r2, [r3, #2]
 800b86a:	2200      	movs	r2, #0
 800b86c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	f042 0201 	orr.w	r2, r2, #1
 800b876:	711a      	strb	r2, [r3, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	715a      	strb	r2, [r3, #5]
 800b87c:	2200      	movs	r2, #0
 800b87e:	719a      	strb	r2, [r3, #6]
 800b880:	2200      	movs	r2, #0
 800b882:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800b88a:	f004 fec7 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b88e:	f004 fead 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b892:	60f8      	str	r0, [r7, #12]
}
 800b894:	bf00      	nop
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 800b8aa:	f004 fef5 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800b8ae:	f004 fe91 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800b8b2:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f062 023e 	orn	r2, r2, #62	; 0x3e
 800b8bc:	701a      	strb	r2, [r3, #0]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	705a      	strb	r2, [r3, #1]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	709a      	strb	r2, [r3, #2]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f042 0203 	orr.w	r2, r2, #3
 800b8d2:	711a      	strb	r2, [r3, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	715a      	strb	r2, [r3, #5]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	719a      	strb	r2, [r3, #6]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800b8e6:	68ba      	ldr	r2, [r7, #8]
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800b8ec:	88fa      	ldrh	r2, [r7, #6]
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800b8f2:	f004 fe93 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800b8f6:	f004 fe79 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800b8fa:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	b2db      	uxtb	r3, r3
}
 800b902:	4618      	mov	r0, r3
 800b904:	3718      	adds	r7, #24
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
	...

0800b90c <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800b90c:	b5b0      	push	{r4, r5, r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800b916:	f004 fe75 	bl	8010604 <THREAD_Get_NotificationPayloadBuffer>
 800b91a:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	3b01      	subs	r3, #1
 800b922:	2b17      	cmp	r3, #23
 800b924:	f200 81c3 	bhi.w	800bcae <OpenThread_CallBack_Processing+0x3a2>
 800b928:	a201      	add	r2, pc, #4	; (adr r2, 800b930 <OpenThread_CallBack_Processing+0x24>)
 800b92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b92e:	bf00      	nop
 800b930:	0800b991 	.word	0x0800b991
 800b934:	0800b9ad 	.word	0x0800b9ad
 800b938:	0800ba11 	.word	0x0800ba11
 800b93c:	0800ba59 	.word	0x0800ba59
 800b940:	0800ba65 	.word	0x0800ba65
 800b944:	0800ba83 	.word	0x0800ba83
 800b948:	0800baa1 	.word	0x0800baa1
 800b94c:	0800babf 	.word	0x0800babf
 800b950:	0800badd 	.word	0x0800badd
 800b954:	0800bafb 	.word	0x0800bafb
 800b958:	0800bb1d 	.word	0x0800bb1d
 800b95c:	0800bb3b 	.word	0x0800bb3b
 800b960:	0800bcaf 	.word	0x0800bcaf
 800b964:	0800bb61 	.word	0x0800bb61
 800b968:	0800bb95 	.word	0x0800bb95
 800b96c:	0800bbbd 	.word	0x0800bbbd
 800b970:	0800bbdb 	.word	0x0800bbdb
 800b974:	0800bc49 	.word	0x0800bc49
 800b978:	0800bc71 	.word	0x0800bc71
 800b97c:	0800bcaf 	.word	0x0800bcaf
 800b980:	0800bc8f 	.word	0x0800bc8f
 800b984:	0800bcaf 	.word	0x0800bcaf
 800b988:	0800bcaf 	.word	0x0800bcaf
 800b98c:	0800b9e9 	.word	0x0800b9e9
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800b990:	4b9b      	ldr	r3, [pc, #620]	; (800bc00 <OpenThread_CallBack_Processing+0x2f4>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 818d 	beq.w	800bcb4 <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800b99a:	4b99      	ldr	r3, [pc, #612]	; (800bc00 <OpenThread_CallBack_Processing+0x2f4>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	683a      	ldr	r2, [r7, #0]
 800b9a0:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	4798      	blx	r3
        }
        break;
 800b9aa:	e183      	b.n	800bcb4 <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	4b94      	ldr	r3, [pc, #592]	; (800bc04 <OpenThread_CallBack_Processing+0x2f8>)
 800b9b4:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 800b9b6:	4b93      	ldr	r3, [pc, #588]	; (800bc04 <OpenThread_CallBack_Processing+0x2f8>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	4a92      	ldr	r2, [pc, #584]	; (800bc08 <OpenThread_CallBack_Processing+0x2fc>)
 800b9be:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 800b9c0:	4b91      	ldr	r3, [pc, #580]	; (800bc08 <OpenThread_CallBack_Processing+0x2fc>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f000 8177 	beq.w	800bcb8 <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800b9ca:	4b8f      	ldr	r3, [pc, #572]	; (800bc08 <OpenThread_CallBack_Processing+0x2fc>)
 800b9cc:	681c      	ldr	r4, [r3, #0]
 800b9ce:	4b8d      	ldr	r3, [pc, #564]	; (800bc04 <OpenThread_CallBack_Processing+0x2f8>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800b9d8:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800b9de:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800b9e4:	47a0      	blx	r4
        }
        break;
 800b9e6:	e167      	b.n	800bcb8 <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 800b9e8:	4b88      	ldr	r3, [pc, #544]	; (800bc0c <OpenThread_CallBack_Processing+0x300>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f000 8165 	beq.w	800bcbc <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800b9f2:	4b86      	ldr	r3, [pc, #536]	; (800bc0c <OpenThread_CallBack_Processing+0x300>)
 800b9f4:	681c      	ldr	r4, [r3, #0]
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800ba00:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800ba06:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800ba0c:	47a0      	blx	r4
        }
        break;
 800ba0e:	e155      	b.n	800bcbc <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	461a      	mov	r2, r3
 800ba16:	4b7e      	ldr	r3, [pc, #504]	; (800bc10 <OpenThread_CallBack_Processing+0x304>)
 800ba18:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800ba1a:	4b7d      	ldr	r3, [pc, #500]	; (800bc10 <OpenThread_CallBack_Processing+0x304>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	4a7c      	ldr	r2, [pc, #496]	; (800bc14 <OpenThread_CallBack_Processing+0x308>)
 800ba22:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 800ba24:	4b7b      	ldr	r3, [pc, #492]	; (800bc14 <OpenThread_CallBack_Processing+0x308>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f000 8149 	beq.w	800bcc0 <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800ba2e:	4b79      	ldr	r3, [pc, #484]	; (800bc14 <OpenThread_CallBack_Processing+0x308>)
 800ba30:	681c      	ldr	r4, [r3, #0]
 800ba32:	4b77      	ldr	r3, [pc, #476]	; (800bc10 <OpenThread_CallBack_Processing+0x304>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800ba3c:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800ba42:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800ba48:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	462b      	mov	r3, r5
 800ba54:	47a0      	blx	r4
        }
        break;
 800ba56:	e133      	b.n	800bcc0 <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800ba58:	2001      	movs	r0, #1
 800ba5a:	f7fe feb4 	bl	800a7c6 <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800ba5e:	f7f7 fd3e 	bl	80034de <HAL_NVIC_SystemReset>
        break;
 800ba62:	e14c      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 800ba64:	4b6c      	ldr	r3, [pc, #432]	; (800bc18 <OpenThread_CallBack_Processing+0x30c>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f000 812b 	beq.w	800bcc4 <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800ba6e:	4b6a      	ldr	r3, [pc, #424]	; (800bc18 <OpenThread_CallBack_Processing+0x30c>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	6892      	ldr	r2, [r2, #8]
 800ba76:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800ba7c:	4611      	mov	r1, r2
 800ba7e:	4798      	blx	r3
        }
        break;
 800ba80:	e120      	b.n	800bcc4 <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 800ba82:	4b66      	ldr	r3, [pc, #408]	; (800bc1c <OpenThread_CallBack_Processing+0x310>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f000 811e 	beq.w	800bcc8 <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800ba8c:	4b63      	ldr	r3, [pc, #396]	; (800bc1c <OpenThread_CallBack_Processing+0x310>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	6892      	ldr	r2, [r2, #8]
 800ba94:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	4798      	blx	r3
        }
        break;
 800ba9e:	e113      	b.n	800bcc8 <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 800baa0:	4b5f      	ldr	r3, [pc, #380]	; (800bc20 <OpenThread_CallBack_Processing+0x314>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f000 8111 	beq.w	800bccc <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800baaa:	4b5d      	ldr	r3, [pc, #372]	; (800bc20 <OpenThread_CallBack_Processing+0x314>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	683a      	ldr	r2, [r7, #0]
 800bab0:	6892      	ldr	r2, [r2, #8]
 800bab2:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800bab8:	4611      	mov	r1, r2
 800baba:	4798      	blx	r3
        }
        break;
 800babc:	e106      	b.n	800bccc <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 800babe:	4b59      	ldr	r3, [pc, #356]	; (800bc24 <OpenThread_CallBack_Processing+0x318>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f000 8104 	beq.w	800bcd0 <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800bac8:	4b56      	ldr	r3, [pc, #344]	; (800bc24 <OpenThread_CallBack_Processing+0x318>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	6892      	ldr	r2, [r2, #8]
 800bad0:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800bad2:	683a      	ldr	r2, [r7, #0]
 800bad4:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800bad6:	4611      	mov	r1, r2
 800bad8:	4798      	blx	r3
        }
        break;
 800bada:	e0f9      	b.n	800bcd0 <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 800badc:	4b52      	ldr	r3, [pc, #328]	; (800bc28 <OpenThread_CallBack_Processing+0x31c>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f000 80f7 	beq.w	800bcd4 <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800bae6:	4b50      	ldr	r3, [pc, #320]	; (800bc28 <OpenThread_CallBack_Processing+0x31c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	683a      	ldr	r2, [r7, #0]
 800baec:	6892      	ldr	r2, [r2, #8]
 800baee:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800baf0:	683a      	ldr	r2, [r7, #0]
 800baf2:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800baf4:	4611      	mov	r1, r2
 800baf6:	4798      	blx	r3
        }
        break;
 800baf8:	e0ec      	b.n	800bcd4 <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800bafa:	4b4c      	ldr	r3, [pc, #304]	; (800bc2c <OpenThread_CallBack_Processing+0x320>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f000 80ea 	beq.w	800bcd8 <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800bb04:	4b49      	ldr	r3, [pc, #292]	; (800bc2c <OpenThread_CallBack_Processing+0x320>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	6892      	ldr	r2, [r2, #8]
 800bb0c:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800bb12:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 800bb14:	683a      	ldr	r2, [r7, #0]
 800bb16:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800bb18:	4798      	blx	r3
        }
        break;
 800bb1a:	e0dd      	b.n	800bcd8 <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800bb1c:	4b44      	ldr	r3, [pc, #272]	; (800bc30 <OpenThread_CallBack_Processing+0x324>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 80db 	beq.w	800bcdc <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800bb26:	4b42      	ldr	r3, [pc, #264]	; (800bc30 <OpenThread_CallBack_Processing+0x324>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	6892      	ldr	r2, [r2, #8]
 800bb2e:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 800bb30:	683a      	ldr	r2, [r7, #0]
 800bb32:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800bb34:	4611      	mov	r1, r2
 800bb36:	4798      	blx	r3
        }
        break;
 800bb38:	e0d0      	b.n	800bcdc <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800bb3a:	4b3e      	ldr	r3, [pc, #248]	; (800bc34 <OpenThread_CallBack_Processing+0x328>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f000 80ce 	beq.w	800bce0 <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800bb44:	4b3b      	ldr	r3, [pc, #236]	; (800bc34 <OpenThread_CallBack_Processing+0x328>)
 800bb46:	681c      	ldr	r4, [r3, #0]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800bb50:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800bb56:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800bb5c:	47a0      	blx	r4
        }
        break;
 800bb5e:	e0bf      	b.n	800bce0 <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 800bb60:	4b35      	ldr	r3, [pc, #212]	; (800bc38 <OpenThread_CallBack_Processing+0x32c>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 80bd 	beq.w	800bce4 <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800bb6a:	4b33      	ldr	r3, [pc, #204]	; (800bc38 <OpenThread_CallBack_Processing+0x32c>)
 800bb6c:	681c      	ldr	r4, [r3, #0]
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800bb78:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800bb7e:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	462a      	mov	r2, r5
 800bb90:	47a0      	blx	r4
        }
        break;
 800bb92:	e0a7      	b.n	800bce4 <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 800bb94:	4b29      	ldr	r3, [pc, #164]	; (800bc3c <OpenThread_CallBack_Processing+0x330>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f000 80a5 	beq.w	800bce8 <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800bb9e:	4b27      	ldr	r3, [pc, #156]	; (800bc3c <OpenThread_CallBack_Processing+0x330>)
 800bba0:	681c      	ldr	r4, [r3, #0]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	689b      	ldr	r3, [r3, #8]
 800bba6:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800bbac:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800bbb2:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800bbb8:	47a0      	blx	r4
        }
        break;
 800bbba:	e095      	b.n	800bce8 <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 800bbbc:	4b20      	ldr	r3, [pc, #128]	; (800bc40 <OpenThread_CallBack_Processing+0x334>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 8093 	beq.w	800bcec <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 800bbc6:	4b1e      	ldr	r3, [pc, #120]	; (800bc40 <OpenThread_CallBack_Processing+0x334>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	6892      	ldr	r2, [r2, #8]
 800bbce:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 800bbd0:	683a      	ldr	r2, [r7, #0]
 800bbd2:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	4798      	blx	r3
        }
        break;
 800bbd8:	e088      	b.n	800bcec <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 800bbda:	4b1a      	ldr	r3, [pc, #104]	; (800bc44 <OpenThread_CallBack_Processing+0x338>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 8086 	beq.w	800bcf0 <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800bbe4:	4b17      	ldr	r3, [pc, #92]	; (800bc44 <OpenThread_CallBack_Processing+0x338>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	683a      	ldr	r2, [r7, #0]
 800bbea:	6892      	ldr	r2, [r2, #8]
 800bbec:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800bbf2:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 800bbf4:	683a      	ldr	r2, [r7, #0]
 800bbf6:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800bbf8:	b2d2      	uxtb	r2, r2
 800bbfa:	4798      	blx	r3
        }
        break;
 800bbfc:	e078      	b.n	800bcf0 <OpenThread_CallBack_Processing+0x3e4>
 800bbfe:	bf00      	nop
 800bc00:	200002b8 	.word	0x200002b8
 800bc04:	20004ed8 	.word	0x20004ed8
 800bc08:	200002f8 	.word	0x200002f8
 800bc0c:	200002fc 	.word	0x200002fc
 800bc10:	20004ed4 	.word	0x20004ed4
 800bc14:	20000300 	.word	0x20000300
 800bc18:	200002c0 	.word	0x200002c0
 800bc1c:	200002bc 	.word	0x200002bc
 800bc20:	200002c4 	.word	0x200002c4
 800bc24:	200002c8 	.word	0x200002c8
 800bc28:	200002cc 	.word	0x200002cc
 800bc2c:	200002d0 	.word	0x200002d0
 800bc30:	200002d4 	.word	0x200002d4
 800bc34:	200002d8 	.word	0x200002d8
 800bc38:	200002dc 	.word	0x200002dc
 800bc3c:	200002e0 	.word	0x200002e0
 800bc40:	200002e4 	.word	0x200002e4
 800bc44:	200002e8 	.word	0x200002e8
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800bc48:	4b30      	ldr	r3, [pc, #192]	; (800bd0c <OpenThread_CallBack_Processing+0x400>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d051      	beq.n	800bcf4 <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800bc50:	4b2e      	ldr	r3, [pc, #184]	; (800bd0c <OpenThread_CallBack_Processing+0x400>)
 800bc52:	681c      	ldr	r4, [r3, #0]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800bc5e:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800bc64:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	47a0      	blx	r4
        }
        break;
 800bc6e:	e041      	b.n	800bcf4 <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 800bc70:	4b27      	ldr	r3, [pc, #156]	; (800bd10 <OpenThread_CallBack_Processing+0x404>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d03f      	beq.n	800bcf8 <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800bc78:	4b25      	ldr	r3, [pc, #148]	; (800bd10 <OpenThread_CallBack_Processing+0x404>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	683a      	ldr	r2, [r7, #0]
 800bc7e:	6892      	ldr	r2, [r2, #8]
 800bc80:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 800bc82:	683a      	ldr	r2, [r7, #0]
 800bc84:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800bc86:	b252      	sxtb	r2, r2
 800bc88:	4611      	mov	r1, r2
 800bc8a:	4798      	blx	r3
        }
        break;
 800bc8c:	e034      	b.n	800bcf8 <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800bc8e:	4b21      	ldr	r3, [pc, #132]	; (800bd14 <OpenThread_CallBack_Processing+0x408>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d032      	beq.n	800bcfc <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800bc96:	4b1f      	ldr	r3, [pc, #124]	; (800bd14 <OpenThread_CallBack_Processing+0x408>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	683a      	ldr	r2, [r7, #0]
 800bc9c:	6892      	ldr	r2, [r2, #8]
 800bc9e:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800bca4:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 800bca6:	683a      	ldr	r2, [r7, #0]
 800bca8:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800bcaa:	4798      	blx	r3
        }
        break;
 800bcac:	e026      	b.n	800bcfc <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	71fb      	strb	r3, [r7, #7]
        break;
 800bcb2:	e024      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcb4:	bf00      	nop
 800bcb6:	e022      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcb8:	bf00      	nop
 800bcba:	e020      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcbc:	bf00      	nop
 800bcbe:	e01e      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcc0:	bf00      	nop
 800bcc2:	e01c      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcc4:	bf00      	nop
 800bcc6:	e01a      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcc8:	bf00      	nop
 800bcca:	e018      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bccc:	bf00      	nop
 800bcce:	e016      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcd0:	bf00      	nop
 800bcd2:	e014      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcd4:	bf00      	nop
 800bcd6:	e012      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcd8:	bf00      	nop
 800bcda:	e010      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcdc:	bf00      	nop
 800bcde:	e00e      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bce0:	bf00      	nop
 800bce2:	e00c      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bce4:	bf00      	nop
 800bce6:	e00a      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bce8:	bf00      	nop
 800bcea:	e008      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcec:	bf00      	nop
 800bcee:	e006      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcf0:	bf00      	nop
 800bcf2:	e004      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcf4:	bf00      	nop
 800bcf6:	e002      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcf8:	bf00      	nop
 800bcfa:	e000      	b.n	800bcfe <OpenThread_CallBack_Processing+0x3f2>
        break;
 800bcfc:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800bcfe:	f7ff f88d 	bl	800ae1c <TL_THREAD_SendAck>
    return status;
 800bd02:	79fb      	ldrb	r3, [r7, #7]

}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3708      	adds	r7, #8
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bdb0      	pop	{r4, r5, r7, pc}
 800bd0c:	200002ec 	.word	0x200002ec
 800bd10:	200002f0 	.word	0x200002f0
 800bd14:	200002f4 	.word	0x200002f4

0800bd18 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800bd24:	f004 fcb8 	bl	8010698 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bd28:	f004 fc54 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800bd2c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 800bd36:	701a      	strb	r2, [r3, #0]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f042 0201 	orr.w	r2, r2, #1
 800bd3e:	705a      	strb	r2, [r3, #1]
 800bd40:	2200      	movs	r2, #0
 800bd42:	709a      	strb	r2, [r3, #2]
 800bd44:	2200      	movs	r2, #0
 800bd46:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f042 0201 	orr.w	r2, r2, #1
 800bd50:	711a      	strb	r2, [r3, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	715a      	strb	r2, [r3, #5]
 800bd56:	2200      	movs	r2, #0
 800bd58:	719a      	strb	r2, [r3, #6]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800bd5e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800bd66:	f004 fc59 	bl	801061c <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bd6a:	f004 fc3f 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800bd6e:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	b2db      	uxtb	r3, r3
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b084      	sub	sp, #16
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	460b      	mov	r3, r1
 800bd88:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800bd8a:	f004 fc85 	bl	8010698 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bd8e:	f004 fc21 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800bd92:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2200      	movs	r2, #0
 800bd98:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800bd9c:	701a      	strb	r2, [r3, #0]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	705a      	strb	r2, [r3, #1]
 800bda2:	2200      	movs	r2, #0
 800bda4:	709a      	strb	r2, [r3, #2]
 800bda6:	2200      	movs	r2, #0
 800bda8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f042 0201 	orr.w	r2, r2, #1
 800bdb2:	711a      	strb	r2, [r3, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	715a      	strb	r2, [r3, #5]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	719a      	strb	r2, [r3, #6]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800bdc0:	78fa      	ldrb	r2, [r7, #3]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800bdc6:	f004 fc29 	bl	801061c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bdca:	f004 fc0f 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800bdce:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	b2db      	uxtb	r3, r3
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <otThreadSetChildTimeout>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI void OTCALL otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b084      	sub	sp, #16
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800bde8:	f004 fc56 	bl	8010698 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bdec:	f004 fbf2 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800bdf0:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_CHILD_TIMEOUT;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 800bdfa:	701a      	strb	r2, [r3, #0]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	705a      	strb	r2, [r3, #1]
 800be00:	2200      	movs	r2, #0
 800be02:	709a      	strb	r2, [r3, #2]
 800be04:	2200      	movs	r2, #0
 800be06:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f042 0201 	orr.w	r2, r2, #1
 800be10:	711a      	strb	r2, [r3, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	715a      	strb	r2, [r3, #5]
 800be16:	2200      	movs	r2, #0
 800be18:	719a      	strb	r2, [r3, #6]
 800be1a:	2200      	movs	r2, #0
 800be1c:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aTimeout;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	683a      	ldr	r2, [r7, #0]
 800be22:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800be24:	f004 fbfa 	bl	801061c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800be28:	f004 fbe0 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800be2c:	60f8      	str	r0, [r7, #12]
}
 800be2e:	bf00      	nop
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <otThreadSetExtendedPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otExtendedPanId *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetExtendedPanId(otInstance *aInstance, const otExtendedPanId *aExtendedPanId)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b084      	sub	sp, #16
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800be40:	f004 fc2a 	bl	8010698 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800be44:	f004 fbc6 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800be48:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_EXTPANID;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	2200      	movs	r2, #0
 800be56:	705a      	strb	r2, [r3, #1]
 800be58:	2200      	movs	r2, #0
 800be5a:	709a      	strb	r2, [r3, #2]
 800be5c:	2200      	movs	r2, #0
 800be5e:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	f042 0201 	orr.w	r2, r2, #1
 800be68:	711a      	strb	r2, [r3, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	715a      	strb	r2, [r3, #5]
 800be6e:	2200      	movs	r2, #0
 800be70:	719a      	strb	r2, [r3, #6]
 800be72:	2200      	movs	r2, #0
 800be74:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aExtendedPanId;
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800be7c:	f004 fbce 	bl	801061c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800be80:	f004 fbb4 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800be84:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	b2db      	uxtb	r3, r3
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <otThreadSetMasterKey>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otMasterKey *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetMasterKey(otInstance *aInstance, const otMasterKey *aKey)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800be9e:	f004 fbfb 	bl	8010698 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bea2:	f004 fb97 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800bea6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_MASTER_KEY;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2200      	movs	r2, #0
 800beac:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800beb0:	701a      	strb	r2, [r3, #0]
 800beb2:	2200      	movs	r2, #0
 800beb4:	705a      	strb	r2, [r3, #1]
 800beb6:	2200      	movs	r2, #0
 800beb8:	709a      	strb	r2, [r3, #2]
 800beba:	2200      	movs	r2, #0
 800bebc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f042 0201 	orr.w	r2, r2, #1
 800bec6:	711a      	strb	r2, [r3, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	715a      	strb	r2, [r3, #5]
 800becc:	2200      	movs	r2, #0
 800bece:	719a      	strb	r2, [r3, #6]
 800bed0:	2200      	movs	r2, #0
 800bed2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aKey;
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800beda:	f004 fb9f 	bl	801061c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bede:	f004 fb85 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800bee2:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	b2db      	uxtb	r3, r3
}
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b084      	sub	sp, #16
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
 800befa:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800befc:	f004 fbcc 	bl	8010698 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bf00:	f004 fb68 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800bf04:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 800bf0e:	701a      	strb	r2, [r3, #0]
 800bf10:	2200      	movs	r2, #0
 800bf12:	705a      	strb	r2, [r3, #1]
 800bf14:	2200      	movs	r2, #0
 800bf16:	709a      	strb	r2, [r3, #2]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f042 0201 	orr.w	r2, r2, #1
 800bf24:	711a      	strb	r2, [r3, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	715a      	strb	r2, [r3, #5]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	719a      	strb	r2, [r3, #6]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 800bf32:	683a      	ldr	r2, [r7, #0]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800bf38:	f004 fb70 	bl	801061c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bf3c:	f004 fb56 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800bf40:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	b2db      	uxtb	r3, r3
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800bf58:	f004 fb9e 	bl	8010698 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800bf5c:	f004 fb3a 	bl	80105d4 <THREAD_Get_OTCmdPayloadBuffer>
 800bf60:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 800bf6a:	701a      	strb	r2, [r3, #0]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	705a      	strb	r2, [r3, #1]
 800bf70:	2200      	movs	r2, #0
 800bf72:	709a      	strb	r2, [r3, #2]
 800bf74:	2200      	movs	r2, #0
 800bf76:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	711a      	strb	r2, [r3, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	715a      	strb	r2, [r3, #5]
 800bf82:	2200      	movs	r2, #0
 800bf84:	719a      	strb	r2, [r3, #6]
 800bf86:	2200      	movs	r2, #0
 800bf88:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800bf8a:	f004 fb47 	bl	801061c <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800bf8e:	f004 fb2d 	bl	80105ec <THREAD_Get_OTCmdRspPayloadBuffer>
 800bf92:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	b2db      	uxtb	r3, r3
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800bfa2:	b480      	push	{r7}
 800bfa4:	b083      	sub	sp, #12
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	605a      	str	r2, [r3, #4]
}
 800bfb6:	bf00      	nop
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	b087      	sub	sp, #28
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfca:	f3ef 8310 	mrs	r3, PRIMASK
 800bfce:	60fb      	str	r3, [r7, #12]
  return(result);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bfd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bfd4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d102      	bne.n	800bfe6 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	75fb      	strb	r3, [r7, #23]
 800bfe4:	e001      	b.n	800bfea <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	75fb      	strb	r3, [r7, #23]
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800bff4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	371c      	adds	r7, #28
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr

0800c002 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c002:	b480      	push	{r7}
 800c004:	b087      	sub	sp, #28
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c00c:	f3ef 8310 	mrs	r3, PRIMASK
 800c010:	60fb      	str	r3, [r7, #12]
  return(result);
 800c012:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c014:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c016:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	683a      	ldr	r2, [r7, #0]
 800c02a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	683a      	ldr	r2, [r7, #0]
 800c032:	605a      	str	r2, [r3, #4]
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c03e:	bf00      	nop
 800c040:	371c      	adds	r7, #28
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr

0800c04a <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c04a:	b480      	push	{r7}
 800c04c:	b087      	sub	sp, #28
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
 800c052:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c054:	f3ef 8310 	mrs	r3, PRIMASK
 800c058:	60fb      	str	r3, [r7, #12]
  return(result);
 800c05a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c05c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c05e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	683a      	ldr	r2, [r7, #0]
 800c072:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	601a      	str	r2, [r3, #0]
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c086:	bf00      	nop
 800c088:	371c      	adds	r7, #28
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr

0800c092 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c092:	b480      	push	{r7}
 800c094:	b087      	sub	sp, #28
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c09a:	f3ef 8310 	mrs	r3, PRIMASK
 800c09e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c0a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0a4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	6812      	ldr	r2, [r2, #0]
 800c0ae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	6852      	ldr	r2, [r2, #4]
 800c0b8:	605a      	str	r2, [r3, #4]
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c0c4:	bf00      	nop
 800c0c6:	371c      	adds	r7, #28
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0da:	f3ef 8310 	mrs	r3, PRIMASK
 800c0de:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c0e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0e4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7ff ffcd 	bl	800c092 <LST_remove_node>
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c102:	bf00      	nop
 800c104:	3718      	adds	r7, #24
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}

0800c10a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c10a:	b480      	push	{r7}
 800c10c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800c10e:	bf00      	nop
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c11e:	f3ef 8305 	mrs	r3, IPSR
 800c122:	60bb      	str	r3, [r7, #8]
  return(result);
 800c124:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10f      	bne.n	800c14a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c12a:	f3ef 8310 	mrs	r3, PRIMASK
 800c12e:	607b      	str	r3, [r7, #4]
  return(result);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d105      	bne.n	800c142 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c136:	f3ef 8311 	mrs	r3, BASEPRI
 800c13a:	603b      	str	r3, [r7, #0]
  return(result);
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d007      	beq.n	800c152 <osKernelInitialize+0x3a>
 800c142:	4b0e      	ldr	r3, [pc, #56]	; (800c17c <osKernelInitialize+0x64>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b02      	cmp	r3, #2
 800c148:	d103      	bne.n	800c152 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800c14a:	f06f 0305 	mvn.w	r3, #5
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	e00c      	b.n	800c16c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c152:	4b0a      	ldr	r3, [pc, #40]	; (800c17c <osKernelInitialize+0x64>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d105      	bne.n	800c166 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c15a:	4b08      	ldr	r3, [pc, #32]	; (800c17c <osKernelInitialize+0x64>)
 800c15c:	2201      	movs	r2, #1
 800c15e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c160:	2300      	movs	r3, #0
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	e002      	b.n	800c16c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800c166:	f04f 33ff 	mov.w	r3, #4294967295
 800c16a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c16c:	68fb      	ldr	r3, [r7, #12]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3714      	adds	r7, #20
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop
 800c17c:	20000304 	.word	0x20000304

0800c180 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c186:	f3ef 8305 	mrs	r3, IPSR
 800c18a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c18c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d10f      	bne.n	800c1b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c192:	f3ef 8310 	mrs	r3, PRIMASK
 800c196:	607b      	str	r3, [r7, #4]
  return(result);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d105      	bne.n	800c1aa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c19e:	f3ef 8311 	mrs	r3, BASEPRI
 800c1a2:	603b      	str	r3, [r7, #0]
  return(result);
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d007      	beq.n	800c1ba <osKernelStart+0x3a>
 800c1aa:	4b0f      	ldr	r3, [pc, #60]	; (800c1e8 <osKernelStart+0x68>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d103      	bne.n	800c1ba <osKernelStart+0x3a>
    stat = osErrorISR;
 800c1b2:	f06f 0305 	mvn.w	r3, #5
 800c1b6:	60fb      	str	r3, [r7, #12]
 800c1b8:	e010      	b.n	800c1dc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c1ba:	4b0b      	ldr	r3, [pc, #44]	; (800c1e8 <osKernelStart+0x68>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d109      	bne.n	800c1d6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c1c2:	f7ff ffa2 	bl	800c10a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c1c6:	4b08      	ldr	r3, [pc, #32]	; (800c1e8 <osKernelStart+0x68>)
 800c1c8:	2202      	movs	r2, #2
 800c1ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c1cc:	f001 ff76 	bl	800e0bc <vTaskStartScheduler>
      stat = osOK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	60fb      	str	r3, [r7, #12]
 800c1d4:	e002      	b.n	800c1dc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800c1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20000304 	.word	0x20000304

0800c1ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b090      	sub	sp, #64	; 0x40
 800c1f0:	af04      	add	r7, sp, #16
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1fc:	f3ef 8305 	mrs	r3, IPSR
 800c200:	61fb      	str	r3, [r7, #28]
  return(result);
 800c202:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800c204:	2b00      	cmp	r3, #0
 800c206:	f040 8090 	bne.w	800c32a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c20a:	f3ef 8310 	mrs	r3, PRIMASK
 800c20e:	61bb      	str	r3, [r7, #24]
  return(result);
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d105      	bne.n	800c222 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c216:	f3ef 8311 	mrs	r3, BASEPRI
 800c21a:	617b      	str	r3, [r7, #20]
  return(result);
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d003      	beq.n	800c22a <osThreadNew+0x3e>
 800c222:	4b44      	ldr	r3, [pc, #272]	; (800c334 <osThreadNew+0x148>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2b02      	cmp	r3, #2
 800c228:	d07f      	beq.n	800c32a <osThreadNew+0x13e>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d07c      	beq.n	800c32a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800c230:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c234:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800c236:	2318      	movs	r3, #24
 800c238:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800c23a:	2300      	movs	r3, #0
 800c23c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800c23e:	f04f 33ff 	mov.w	r3, #4294967295
 800c242:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d045      	beq.n	800c2d6 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d002      	beq.n	800c258 <osThreadNew+0x6c>
        name = attr->name;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	699b      	ldr	r3, [r3, #24]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d002      	beq.n	800c266 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	699b      	ldr	r3, [r3, #24]
 800c264:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d008      	beq.n	800c27e <osThreadNew+0x92>
 800c26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26e:	2b38      	cmp	r3, #56	; 0x38
 800c270:	d805      	bhi.n	800c27e <osThreadNew+0x92>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	f003 0301 	and.w	r3, r3, #1
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d001      	beq.n	800c282 <osThreadNew+0x96>
        return (NULL);
 800c27e:	2300      	movs	r3, #0
 800c280:	e054      	b.n	800c32c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	695b      	ldr	r3, [r3, #20]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	695b      	ldr	r3, [r3, #20]
 800c28e:	089b      	lsrs	r3, r3, #2
 800c290:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00e      	beq.n	800c2b8 <osThreadNew+0xcc>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	2b5b      	cmp	r3, #91	; 0x5b
 800c2a0:	d90a      	bls.n	800c2b8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d006      	beq.n	800c2b8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	695b      	ldr	r3, [r3, #20]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <osThreadNew+0xcc>
        mem = 1;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	623b      	str	r3, [r7, #32]
 800c2b6:	e010      	b.n	800c2da <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10c      	bne.n	800c2da <osThreadNew+0xee>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d108      	bne.n	800c2da <osThreadNew+0xee>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d104      	bne.n	800c2da <osThreadNew+0xee>
          mem = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	623b      	str	r3, [r7, #32]
 800c2d4:	e001      	b.n	800c2da <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d110      	bne.n	800c302 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2e8:	9202      	str	r2, [sp, #8]
 800c2ea:	9301      	str	r3, [sp, #4]
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f001 fd42 	bl	800dd80 <xTaskCreateStatic>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	613b      	str	r3, [r7, #16]
 800c300:	e013      	b.n	800c32a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800c302:	6a3b      	ldr	r3, [r7, #32]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d110      	bne.n	800c32a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	f107 0310 	add.w	r3, r7, #16
 800c310:	9301      	str	r3, [sp, #4]
 800c312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f001 fd8a 	bl	800de34 <xTaskCreate>
 800c320:	4603      	mov	r3, r0
 800c322:	2b01      	cmp	r3, #1
 800c324:	d001      	beq.n	800c32a <osThreadNew+0x13e>
          hTask = NULL;
 800c326:	2300      	movs	r3, #0
 800c328:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c32a:	693b      	ldr	r3, [r7, #16]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3730      	adds	r7, #48	; 0x30
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	20000304 	.word	0x20000304

0800c338 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08a      	sub	sp, #40	; 0x28
 800c33c:	af02      	add	r7, sp, #8
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <osThreadFlagsSet+0x1a>
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	da03      	bge.n	800c35a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800c352:	f06f 0303 	mvn.w	r3, #3
 800c356:	60fb      	str	r3, [r7, #12]
 800c358:	e046      	b.n	800c3e8 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800c35a:	f04f 33ff 	mov.w	r3, #4294967295
 800c35e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c360:	f3ef 8305 	mrs	r3, IPSR
 800c364:	61bb      	str	r3, [r7, #24]
  return(result);
 800c366:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10f      	bne.n	800c38c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c36c:	f3ef 8310 	mrs	r3, PRIMASK
 800c370:	617b      	str	r3, [r7, #20]
  return(result);
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d105      	bne.n	800c384 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c378:	f3ef 8311 	mrs	r3, BASEPRI
 800c37c:	613b      	str	r3, [r7, #16]
  return(result);
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d024      	beq.n	800c3ce <osThreadFlagsSet+0x96>
 800c384:	4b1b      	ldr	r3, [pc, #108]	; (800c3f4 <osThreadFlagsSet+0xbc>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d120      	bne.n	800c3ce <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800c38c:	2300      	movs	r3, #0
 800c38e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800c390:	f107 0308 	add.w	r3, r7, #8
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	2300      	movs	r3, #0
 800c398:	2201      	movs	r2, #1
 800c39a:	6839      	ldr	r1, [r7, #0]
 800c39c:	69f8      	ldr	r0, [r7, #28]
 800c39e:	f002 fdc9 	bl	800ef34 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800c3a2:	f107 020c 	add.w	r2, r7, #12
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	69f8      	ldr	r0, [r7, #28]
 800c3b2:	f002 fdbf 	bl	800ef34 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d015      	beq.n	800c3e8 <osThreadFlagsSet+0xb0>
 800c3bc:	4b0e      	ldr	r3, [pc, #56]	; (800c3f8 <osThreadFlagsSet+0xc0>)
 800c3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3c2:	601a      	str	r2, [r3, #0]
 800c3c4:	f3bf 8f4f 	dsb	sy
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	e00c      	b.n	800c3e8 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	69f8      	ldr	r0, [r7, #28]
 800c3d6:	f002 fcf7 	bl	800edc8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800c3da:	f107 030c 	add.w	r3, r7, #12
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	69f8      	ldr	r0, [r7, #28]
 800c3e4:	f002 fcf0 	bl	800edc8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3720      	adds	r7, #32
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	20000304 	.word	0x20000304
 800c3f8:	e000ed04 	.word	0xe000ed04

0800c3fc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b08e      	sub	sp, #56	; 0x38
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c408:	f3ef 8305 	mrs	r3, IPSR
 800c40c:	61fb      	str	r3, [r7, #28]
  return(result);
 800c40e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800c410:	2b00      	cmp	r3, #0
 800c412:	d10f      	bne.n	800c434 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c414:	f3ef 8310 	mrs	r3, PRIMASK
 800c418:	61bb      	str	r3, [r7, #24]
  return(result);
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d105      	bne.n	800c42c <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c420:	f3ef 8311 	mrs	r3, BASEPRI
 800c424:	617b      	str	r3, [r7, #20]
  return(result);
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d007      	beq.n	800c43c <osThreadFlagsWait+0x40>
 800c42c:	4b3c      	ldr	r3, [pc, #240]	; (800c520 <osThreadFlagsWait+0x124>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b02      	cmp	r3, #2
 800c432:	d103      	bne.n	800c43c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800c434:	f06f 0305 	mvn.w	r3, #5
 800c438:	637b      	str	r3, [r7, #52]	; 0x34
 800c43a:	e06b      	b.n	800c514 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	da03      	bge.n	800c44a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800c442:	f06f 0303 	mvn.w	r3, #3
 800c446:	637b      	str	r3, [r7, #52]	; 0x34
 800c448:	e064      	b.n	800c514 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	f003 0302 	and.w	r3, r3, #2
 800c450:	2b00      	cmp	r3, #0
 800c452:	d002      	beq.n	800c45a <osThreadFlagsWait+0x5e>
      clear = 0U;
 800c454:	2300      	movs	r3, #0
 800c456:	633b      	str	r3, [r7, #48]	; 0x30
 800c458:	e001      	b.n	800c45e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800c45e:	2300      	movs	r3, #0
 800c460:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800c466:	f001 ff6f 	bl	800e348 <xTaskGetTickCount>
 800c46a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800c46c:	f107 0210 	add.w	r2, r7, #16
 800c470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c472:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c474:	2000      	movs	r0, #0
 800c476:	f002 fc4d 	bl	800ed14 <xTaskNotifyWait>
 800c47a:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d137      	bne.n	800c4f2 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800c482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	4013      	ands	r3, r2
 800c488:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c48e:	4313      	orrs	r3, r2
 800c490:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00c      	beq.n	800c4b6 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d032      	beq.n	800c50e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10f      	bne.n	800c4ce <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800c4ae:	f06f 0302 	mvn.w	r3, #2
 800c4b2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800c4b4:	e02e      	b.n	800c514 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d128      	bne.n	800c512 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d103      	bne.n	800c4ce <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800c4c6:	f06f 0302 	mvn.w	r3, #2
 800c4ca:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800c4cc:	e022      	b.n	800c514 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800c4ce:	f001 ff3b 	bl	800e348 <xTaskGetTickCount>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800c4da:	6a3a      	ldr	r2, [r7, #32]
 800c4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d902      	bls.n	800c4e8 <osThreadFlagsWait+0xec>
          tout  = 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4e6:	e00e      	b.n	800c506 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800c4e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4ea:	6a3b      	ldr	r3, [r7, #32]
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4f0:	e009      	b.n	800c506 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d103      	bne.n	800c500 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800c4f8:	f06f 0302 	mvn.w	r3, #2
 800c4fc:	637b      	str	r3, [r7, #52]	; 0x34
 800c4fe:	e002      	b.n	800c506 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800c500:	f06f 0301 	mvn.w	r3, #1
 800c504:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800c506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1af      	bne.n	800c46c <osThreadFlagsWait+0x70>
 800c50c:	e002      	b.n	800c514 <osThreadFlagsWait+0x118>
            break;
 800c50e:	bf00      	nop
 800c510:	e000      	b.n	800c514 <osThreadFlagsWait+0x118>
            break;
 800c512:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800c514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c516:	4618      	mov	r0, r3
 800c518:	3738      	adds	r7, #56	; 0x38
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	20000304 	.word	0x20000304

0800c524 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c524:	b580      	push	{r7, lr}
 800c526:	b08a      	sub	sp, #40	; 0x28
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c52c:	2300      	movs	r3, #0
 800c52e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c530:	f3ef 8305 	mrs	r3, IPSR
 800c534:	613b      	str	r3, [r7, #16]
  return(result);
 800c536:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f040 8085 	bne.w	800c648 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c53e:	f3ef 8310 	mrs	r3, PRIMASK
 800c542:	60fb      	str	r3, [r7, #12]
  return(result);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d105      	bne.n	800c556 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c54a:	f3ef 8311 	mrs	r3, BASEPRI
 800c54e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d003      	beq.n	800c55e <osMutexNew+0x3a>
 800c556:	4b3f      	ldr	r3, [pc, #252]	; (800c654 <osMutexNew+0x130>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d074      	beq.n	800c648 <osMutexNew+0x124>
    if (attr != NULL) {
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d003      	beq.n	800c56c <osMutexNew+0x48>
      type = attr->attr_bits;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	623b      	str	r3, [r7, #32]
 800c56a:	e001      	b.n	800c570 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800c56c:	2300      	movs	r3, #0
 800c56e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	2b00      	cmp	r3, #0
 800c578:	d002      	beq.n	800c580 <osMutexNew+0x5c>
      rmtx = 1U;
 800c57a:	2301      	movs	r3, #1
 800c57c:	61fb      	str	r3, [r7, #28]
 800c57e:	e001      	b.n	800c584 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800c580:	2300      	movs	r3, #0
 800c582:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c584:	6a3b      	ldr	r3, [r7, #32]
 800c586:	f003 0308 	and.w	r3, r3, #8
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d15c      	bne.n	800c648 <osMutexNew+0x124>
      mem = -1;
 800c58e:	f04f 33ff 	mov.w	r3, #4294967295
 800c592:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d015      	beq.n	800c5c6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d006      	beq.n	800c5b0 <osMutexNew+0x8c>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	2b4f      	cmp	r3, #79	; 0x4f
 800c5a8:	d902      	bls.n	800c5b0 <osMutexNew+0x8c>
          mem = 1;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	61bb      	str	r3, [r7, #24]
 800c5ae:	e00c      	b.n	800c5ca <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d108      	bne.n	800c5ca <osMutexNew+0xa6>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d104      	bne.n	800c5ca <osMutexNew+0xa6>
            mem = 0;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	61bb      	str	r3, [r7, #24]
 800c5c4:	e001      	b.n	800c5ca <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d112      	bne.n	800c5f6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d007      	beq.n	800c5e6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	4619      	mov	r1, r3
 800c5dc:	2004      	movs	r0, #4
 800c5de:	f000 fc9c 	bl	800cf1a <xQueueCreateMutexStatic>
 800c5e2:	6278      	str	r0, [r7, #36]	; 0x24
 800c5e4:	e016      	b.n	800c614 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	2001      	movs	r0, #1
 800c5ee:	f000 fc94 	bl	800cf1a <xQueueCreateMutexStatic>
 800c5f2:	6278      	str	r0, [r7, #36]	; 0x24
 800c5f4:	e00e      	b.n	800c614 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10b      	bne.n	800c614 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d004      	beq.n	800c60c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800c602:	2004      	movs	r0, #4
 800c604:	f000 fc71 	bl	800ceea <xQueueCreateMutex>
 800c608:	6278      	str	r0, [r7, #36]	; 0x24
 800c60a:	e003      	b.n	800c614 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800c60c:	2001      	movs	r0, #1
 800c60e:	f000 fc6c 	bl	800ceea <xQueueCreateMutex>
 800c612:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00c      	beq.n	800c634 <osMutexNew+0x110>
        if (attr != NULL) {
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d003      	beq.n	800c628 <osMutexNew+0x104>
          name = attr->name;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	617b      	str	r3, [r7, #20]
 800c626:	e001      	b.n	800c62c <osMutexNew+0x108>
        } else {
          name = NULL;
 800c628:	2300      	movs	r3, #0
 800c62a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800c62c:	6979      	ldr	r1, [r7, #20]
 800c62e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c630:	f001 fb20 	bl	800dc74 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c636:	2b00      	cmp	r3, #0
 800c638:	d006      	beq.n	800c648 <osMutexNew+0x124>
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d003      	beq.n	800c648 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c642:	f043 0301 	orr.w	r3, r3, #1
 800c646:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3728      	adds	r7, #40	; 0x28
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	20000304 	.word	0x20000304

0800c658 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c658:	b580      	push	{r7, lr}
 800c65a:	b088      	sub	sp, #32
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f023 0301 	bic.w	r3, r3, #1
 800c668:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f003 0301 	and.w	r3, r3, #1
 800c670:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800c672:	2300      	movs	r3, #0
 800c674:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c676:	f3ef 8305 	mrs	r3, IPSR
 800c67a:	613b      	str	r3, [r7, #16]
  return(result);
 800c67c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10f      	bne.n	800c6a2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c682:	f3ef 8310 	mrs	r3, PRIMASK
 800c686:	60fb      	str	r3, [r7, #12]
  return(result);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d105      	bne.n	800c69a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c68e:	f3ef 8311 	mrs	r3, BASEPRI
 800c692:	60bb      	str	r3, [r7, #8]
  return(result);
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d007      	beq.n	800c6aa <osMutexAcquire+0x52>
 800c69a:	4b1d      	ldr	r3, [pc, #116]	; (800c710 <osMutexAcquire+0xb8>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b02      	cmp	r3, #2
 800c6a0:	d103      	bne.n	800c6aa <osMutexAcquire+0x52>
    stat = osErrorISR;
 800c6a2:	f06f 0305 	mvn.w	r3, #5
 800c6a6:	61fb      	str	r3, [r7, #28]
 800c6a8:	e02c      	b.n	800c704 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d103      	bne.n	800c6b8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800c6b0:	f06f 0303 	mvn.w	r3, #3
 800c6b4:	61fb      	str	r3, [r7, #28]
 800c6b6:	e025      	b.n	800c704 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d011      	beq.n	800c6e2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c6be:	6839      	ldr	r1, [r7, #0]
 800c6c0:	69b8      	ldr	r0, [r7, #24]
 800c6c2:	f000 fc78 	bl	800cfb6 <xQueueTakeMutexRecursive>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d01b      	beq.n	800c704 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d003      	beq.n	800c6da <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800c6d2:	f06f 0301 	mvn.w	r3, #1
 800c6d6:	61fb      	str	r3, [r7, #28]
 800c6d8:	e014      	b.n	800c704 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800c6da:	f06f 0302 	mvn.w	r3, #2
 800c6de:	61fb      	str	r3, [r7, #28]
 800c6e0:	e010      	b.n	800c704 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c6e2:	6839      	ldr	r1, [r7, #0]
 800c6e4:	69b8      	ldr	r0, [r7, #24]
 800c6e6:	f000 fff5 	bl	800d6d4 <xQueueSemaphoreTake>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d009      	beq.n	800c704 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d003      	beq.n	800c6fe <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800c6f6:	f06f 0301 	mvn.w	r3, #1
 800c6fa:	61fb      	str	r3, [r7, #28]
 800c6fc:	e002      	b.n	800c704 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800c6fe:	f06f 0302 	mvn.w	r3, #2
 800c702:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c704:	69fb      	ldr	r3, [r7, #28]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3720      	adds	r7, #32
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	20000304 	.word	0x20000304

0800c714 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c714:	b580      	push	{r7, lr}
 800c716:	b088      	sub	sp, #32
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f023 0301 	bic.w	r3, r3, #1
 800c722:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f003 0301 	and.w	r3, r3, #1
 800c72a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c730:	f3ef 8305 	mrs	r3, IPSR
 800c734:	613b      	str	r3, [r7, #16]
  return(result);
 800c736:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10f      	bne.n	800c75c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c73c:	f3ef 8310 	mrs	r3, PRIMASK
 800c740:	60fb      	str	r3, [r7, #12]
  return(result);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d105      	bne.n	800c754 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c748:	f3ef 8311 	mrs	r3, BASEPRI
 800c74c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d007      	beq.n	800c764 <osMutexRelease+0x50>
 800c754:	4b16      	ldr	r3, [pc, #88]	; (800c7b0 <osMutexRelease+0x9c>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2b02      	cmp	r3, #2
 800c75a:	d103      	bne.n	800c764 <osMutexRelease+0x50>
    stat = osErrorISR;
 800c75c:	f06f 0305 	mvn.w	r3, #5
 800c760:	61fb      	str	r3, [r7, #28]
 800c762:	e01f      	b.n	800c7a4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d103      	bne.n	800c772 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800c76a:	f06f 0303 	mvn.w	r3, #3
 800c76e:	61fb      	str	r3, [r7, #28]
 800c770:	e018      	b.n	800c7a4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d009      	beq.n	800c78c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c778:	69b8      	ldr	r0, [r7, #24]
 800c77a:	f000 fbe9 	bl	800cf50 <xQueueGiveMutexRecursive>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b01      	cmp	r3, #1
 800c782:	d00f      	beq.n	800c7a4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800c784:	f06f 0302 	mvn.w	r3, #2
 800c788:	61fb      	str	r3, [r7, #28]
 800c78a:	e00b      	b.n	800c7a4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c78c:	2300      	movs	r3, #0
 800c78e:	2200      	movs	r2, #0
 800c790:	2100      	movs	r1, #0
 800c792:	69b8      	ldr	r0, [r7, #24]
 800c794:	f000 fcaa 	bl	800d0ec <xQueueGenericSend>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d002      	beq.n	800c7a4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800c79e:	f06f 0302 	mvn.w	r3, #2
 800c7a2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800c7a4:	69fb      	ldr	r3, [r7, #28]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3720      	adds	r7, #32
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20000304 	.word	0x20000304

0800c7b4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b08c      	sub	sp, #48	; 0x30
 800c7b8:	af02      	add	r7, sp, #8
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7c4:	f3ef 8305 	mrs	r3, IPSR
 800c7c8:	61bb      	str	r3, [r7, #24]
  return(result);
 800c7ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f040 8087 	bne.w	800c8e0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7d2:	f3ef 8310 	mrs	r3, PRIMASK
 800c7d6:	617b      	str	r3, [r7, #20]
  return(result);
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d105      	bne.n	800c7ea <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c7de:	f3ef 8311 	mrs	r3, BASEPRI
 800c7e2:	613b      	str	r3, [r7, #16]
  return(result);
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d003      	beq.n	800c7f2 <osSemaphoreNew+0x3e>
 800c7ea:	4b40      	ldr	r3, [pc, #256]	; (800c8ec <osSemaphoreNew+0x138>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	d076      	beq.n	800c8e0 <osSemaphoreNew+0x12c>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d073      	beq.n	800c8e0 <osSemaphoreNew+0x12c>
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d86f      	bhi.n	800c8e0 <osSemaphoreNew+0x12c>
    mem = -1;
 800c800:	f04f 33ff 	mov.w	r3, #4294967295
 800c804:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d015      	beq.n	800c838 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d006      	beq.n	800c822 <osSemaphoreNew+0x6e>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	2b4f      	cmp	r3, #79	; 0x4f
 800c81a:	d902      	bls.n	800c822 <osSemaphoreNew+0x6e>
        mem = 1;
 800c81c:	2301      	movs	r3, #1
 800c81e:	623b      	str	r3, [r7, #32]
 800c820:	e00c      	b.n	800c83c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d108      	bne.n	800c83c <osSemaphoreNew+0x88>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d104      	bne.n	800c83c <osSemaphoreNew+0x88>
          mem = 0;
 800c832:	2300      	movs	r3, #0
 800c834:	623b      	str	r3, [r7, #32]
 800c836:	e001      	b.n	800c83c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800c838:	2300      	movs	r3, #0
 800c83a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800c83c:	6a3b      	ldr	r3, [r7, #32]
 800c83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c842:	d04d      	beq.n	800c8e0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b01      	cmp	r3, #1
 800c848:	d129      	bne.n	800c89e <osSemaphoreNew+0xea>
        if (mem == 1) {
 800c84a:	6a3b      	ldr	r3, [r7, #32]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d10b      	bne.n	800c868 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	689a      	ldr	r2, [r3, #8]
 800c854:	2303      	movs	r3, #3
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	4613      	mov	r3, r2
 800c85a:	2200      	movs	r2, #0
 800c85c:	2100      	movs	r1, #0
 800c85e:	2001      	movs	r0, #1
 800c860:	f000 fa54 	bl	800cd0c <xQueueGenericCreateStatic>
 800c864:	6278      	str	r0, [r7, #36]	; 0x24
 800c866:	e005      	b.n	800c874 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800c868:	2203      	movs	r2, #3
 800c86a:	2100      	movs	r1, #0
 800c86c:	2001      	movs	r0, #1
 800c86e:	f000 fac0 	bl	800cdf2 <xQueueGenericCreate>
 800c872:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c876:	2b00      	cmp	r3, #0
 800c878:	d022      	beq.n	800c8c0 <osSemaphoreNew+0x10c>
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d01f      	beq.n	800c8c0 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c880:	2300      	movs	r3, #0
 800c882:	2200      	movs	r2, #0
 800c884:	2100      	movs	r1, #0
 800c886:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c888:	f000 fc30 	bl	800d0ec <xQueueGenericSend>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d016      	beq.n	800c8c0 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800c892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c894:	f001 f8a3 	bl	800d9de <vQueueDelete>
            hSemaphore = NULL;
 800c898:	2300      	movs	r3, #0
 800c89a:	627b      	str	r3, [r7, #36]	; 0x24
 800c89c:	e010      	b.n	800c8c0 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800c89e:	6a3b      	ldr	r3, [r7, #32]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d108      	bne.n	800c8b6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	68b9      	ldr	r1, [r7, #8]
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f000 fbb7 	bl	800d020 <xQueueCreateCountingSemaphoreStatic>
 800c8b2:	6278      	str	r0, [r7, #36]	; 0x24
 800c8b4:	e004      	b.n	800c8c0 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c8b6:	68b9      	ldr	r1, [r7, #8]
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f000 fbe6 	bl	800d08a <xQueueCreateCountingSemaphore>
 800c8be:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00c      	beq.n	800c8e0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d003      	beq.n	800c8d4 <osSemaphoreNew+0x120>
          name = attr->name;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	61fb      	str	r3, [r7, #28]
 800c8d2:	e001      	b.n	800c8d8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c8d8:	69f9      	ldr	r1, [r7, #28]
 800c8da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8dc:	f001 f9ca 	bl	800dc74 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3728      	adds	r7, #40	; 0x28
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	20000304 	.word	0x20000304

0800c8f0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b088      	sub	sp, #32
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c8fe:	2300      	movs	r3, #0
 800c900:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d103      	bne.n	800c910 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c908:	f06f 0303 	mvn.w	r3, #3
 800c90c:	61fb      	str	r3, [r7, #28]
 800c90e:	e04b      	b.n	800c9a8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c910:	f3ef 8305 	mrs	r3, IPSR
 800c914:	617b      	str	r3, [r7, #20]
  return(result);
 800c916:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10f      	bne.n	800c93c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c91c:	f3ef 8310 	mrs	r3, PRIMASK
 800c920:	613b      	str	r3, [r7, #16]
  return(result);
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d105      	bne.n	800c934 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c928:	f3ef 8311 	mrs	r3, BASEPRI
 800c92c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d026      	beq.n	800c982 <osSemaphoreAcquire+0x92>
 800c934:	4b1f      	ldr	r3, [pc, #124]	; (800c9b4 <osSemaphoreAcquire+0xc4>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d122      	bne.n	800c982 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d003      	beq.n	800c94a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800c942:	f06f 0303 	mvn.w	r3, #3
 800c946:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800c948:	e02d      	b.n	800c9a6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800c94a:	2300      	movs	r3, #0
 800c94c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c94e:	f107 0308 	add.w	r3, r7, #8
 800c952:	461a      	mov	r2, r3
 800c954:	2100      	movs	r1, #0
 800c956:	69b8      	ldr	r0, [r7, #24]
 800c958:	f000 ffc4 	bl	800d8e4 <xQueueReceiveFromISR>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d003      	beq.n	800c96a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800c962:	f06f 0302 	mvn.w	r3, #2
 800c966:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800c968:	e01d      	b.n	800c9a6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d01a      	beq.n	800c9a6 <osSemaphoreAcquire+0xb6>
 800c970:	4b11      	ldr	r3, [pc, #68]	; (800c9b8 <osSemaphoreAcquire+0xc8>)
 800c972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c976:	601a      	str	r2, [r3, #0]
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800c980:	e011      	b.n	800c9a6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	69b8      	ldr	r0, [r7, #24]
 800c986:	f000 fea5 	bl	800d6d4 <xQueueSemaphoreTake>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d00b      	beq.n	800c9a8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d003      	beq.n	800c99e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800c996:	f06f 0301 	mvn.w	r3, #1
 800c99a:	61fb      	str	r3, [r7, #28]
 800c99c:	e004      	b.n	800c9a8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800c99e:	f06f 0302 	mvn.w	r3, #2
 800c9a2:	61fb      	str	r3, [r7, #28]
 800c9a4:	e000      	b.n	800c9a8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800c9a6:	bf00      	nop
      }
    }
  }

  return (stat);
 800c9a8:	69fb      	ldr	r3, [r7, #28]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3720      	adds	r7, #32
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	20000304 	.word	0x20000304
 800c9b8:	e000ed04 	.word	0xe000ed04

0800c9bc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b088      	sub	sp, #32
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d103      	bne.n	800c9da <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c9d2:	f06f 0303 	mvn.w	r3, #3
 800c9d6:	61fb      	str	r3, [r7, #28]
 800c9d8:	e03e      	b.n	800ca58 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9da:	f3ef 8305 	mrs	r3, IPSR
 800c9de:	617b      	str	r3, [r7, #20]
  return(result);
 800c9e0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d10f      	bne.n	800ca06 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9e6:	f3ef 8310 	mrs	r3, PRIMASK
 800c9ea:	613b      	str	r3, [r7, #16]
  return(result);
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d105      	bne.n	800c9fe <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c9f2:	f3ef 8311 	mrs	r3, BASEPRI
 800c9f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d01e      	beq.n	800ca3c <osSemaphoreRelease+0x80>
 800c9fe:	4b19      	ldr	r3, [pc, #100]	; (800ca64 <osSemaphoreRelease+0xa8>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	d11a      	bne.n	800ca3c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800ca06:	2300      	movs	r3, #0
 800ca08:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ca0a:	f107 0308 	add.w	r3, r7, #8
 800ca0e:	4619      	mov	r1, r3
 800ca10:	69b8      	ldr	r0, [r7, #24]
 800ca12:	f000 fcf9 	bl	800d408 <xQueueGiveFromISR>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d003      	beq.n	800ca24 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800ca1c:	f06f 0302 	mvn.w	r3, #2
 800ca20:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ca22:	e018      	b.n	800ca56 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d015      	beq.n	800ca56 <osSemaphoreRelease+0x9a>
 800ca2a:	4b0f      	ldr	r3, [pc, #60]	; (800ca68 <osSemaphoreRelease+0xac>)
 800ca2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca30:	601a      	str	r2, [r3, #0]
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ca3a:	e00c      	b.n	800ca56 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	2200      	movs	r2, #0
 800ca40:	2100      	movs	r1, #0
 800ca42:	69b8      	ldr	r0, [r7, #24]
 800ca44:	f000 fb52 	bl	800d0ec <xQueueGenericSend>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d004      	beq.n	800ca58 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800ca4e:	f06f 0302 	mvn.w	r3, #2
 800ca52:	61fb      	str	r3, [r7, #28]
 800ca54:	e000      	b.n	800ca58 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ca56:	bf00      	nop
    }
  }

  return (stat);
 800ca58:	69fb      	ldr	r3, [r7, #28]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3720      	adds	r7, #32
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	20000304 	.word	0x20000304
 800ca68:	e000ed04 	.word	0xe000ed04

0800ca6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	4a07      	ldr	r2, [pc, #28]	; (800ca98 <vApplicationGetIdleTaskMemory+0x2c>)
 800ca7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	4a06      	ldr	r2, [pc, #24]	; (800ca9c <vApplicationGetIdleTaskMemory+0x30>)
 800ca82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca8a:	601a      	str	r2, [r3, #0]
}
 800ca8c:	bf00      	nop
 800ca8e:	3714      	adds	r7, #20
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr
 800ca98:	20000308 	.word	0x20000308
 800ca9c:	20000364 	.word	0x20000364

0800caa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800caa0:	b480      	push	{r7}
 800caa2:	b085      	sub	sp, #20
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	4a07      	ldr	r2, [pc, #28]	; (800cacc <vApplicationGetTimerTaskMemory+0x2c>)
 800cab0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	4a06      	ldr	r2, [pc, #24]	; (800cad0 <vApplicationGetTimerTaskMemory+0x30>)
 800cab6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cabe:	601a      	str	r2, [r3, #0]
}
 800cac0:	bf00      	nop
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr
 800cacc:	20000b64 	.word	0x20000b64
 800cad0:	20000bc0 	.word	0x20000bc0

0800cad4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f103 0208 	add.w	r2, r3, #8
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f04f 32ff 	mov.w	r2, #4294967295
 800caec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f103 0208 	add.w	r2, r3, #8
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f103 0208 	add.w	r2, r3, #8
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2200      	movs	r2, #0
 800cb06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cb08:	bf00      	nop
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb22:	bf00      	nop
 800cb24:	370c      	adds	r7, #12
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b085      	sub	sp, #20
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	689a      	ldr	r2, [r3, #8]
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	683a      	ldr	r2, [r7, #0]
 800cb52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	683a      	ldr	r2, [r7, #0]
 800cb58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	1c5a      	adds	r2, r3, #1
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	601a      	str	r2, [r3, #0]
}
 800cb6a:	bf00      	nop
 800cb6c:	3714      	adds	r7, #20
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr

0800cb76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb76:	b480      	push	{r7}
 800cb78:	b085      	sub	sp, #20
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb8c:	d103      	bne.n	800cb96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	60fb      	str	r3, [r7, #12]
 800cb94:	e00c      	b.n	800cbb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	3308      	adds	r3, #8
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	e002      	b.n	800cba4 <vListInsert+0x2e>
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	60fb      	str	r3, [r7, #12]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d2f6      	bcs.n	800cb9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	685a      	ldr	r2, [r3, #4]
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	683a      	ldr	r2, [r7, #0]
 800cbbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	1c5a      	adds	r2, r3, #1
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	601a      	str	r2, [r3, #0]
}
 800cbdc:	bf00      	nop
 800cbde:	3714      	adds	r7, #20
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	691b      	ldr	r3, [r3, #16]
 800cbf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	6892      	ldr	r2, [r2, #8]
 800cbfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	6852      	ldr	r2, [r2, #4]
 800cc08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d103      	bne.n	800cc1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	689a      	ldr	r2, [r3, #8]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	1e5a      	subs	r2, r3, #1
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d109      	bne.n	800cc64 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc54:	f383 8811 	msr	BASEPRI, r3
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	60bb      	str	r3, [r7, #8]
 800cc62:	e7fe      	b.n	800cc62 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800cc64:	f002 ff02 	bl	800fa6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc70:	68f9      	ldr	r1, [r7, #12]
 800cc72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc74:	fb01 f303 	mul.w	r3, r1, r3
 800cc78:	441a      	add	r2, r3
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2200      	movs	r2, #0
 800cc82:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc94:	3b01      	subs	r3, #1
 800cc96:	68f9      	ldr	r1, [r7, #12]
 800cc98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc9a:	fb01 f303 	mul.w	r3, r1, r3
 800cc9e:	441a      	add	r2, r3
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	22ff      	movs	r2, #255	; 0xff
 800cca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	22ff      	movs	r2, #255	; 0xff
 800ccb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d114      	bne.n	800cce4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	691b      	ldr	r3, [r3, #16]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d01a      	beq.n	800ccf8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	3310      	adds	r3, #16
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f001 fcb0 	bl	800e62c <xTaskRemoveFromEventList>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d012      	beq.n	800ccf8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ccd2:	4b0d      	ldr	r3, [pc, #52]	; (800cd08 <xQueueGenericReset+0xcc>)
 800ccd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccd8:	601a      	str	r2, [r3, #0]
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	e009      	b.n	800ccf8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	3310      	adds	r3, #16
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7ff fef3 	bl	800cad4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	3324      	adds	r3, #36	; 0x24
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7ff feee 	bl	800cad4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ccf8:	f002 fee6 	bl	800fac8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ccfc:	2301      	movs	r3, #1
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	e000ed04 	.word	0xe000ed04

0800cd0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b08e      	sub	sp, #56	; 0x38
 800cd10:	af02      	add	r7, sp, #8
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
 800cd18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d109      	bne.n	800cd34 <xQueueGenericCreateStatic+0x28>
 800cd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd32:	e7fe      	b.n	800cd32 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d109      	bne.n	800cd4e <xQueueGenericCreateStatic+0x42>
 800cd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3e:	f383 8811 	msr	BASEPRI, r3
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	f3bf 8f4f 	dsb	sy
 800cd4a:	627b      	str	r3, [r7, #36]	; 0x24
 800cd4c:	e7fe      	b.n	800cd4c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d002      	beq.n	800cd5a <xQueueGenericCreateStatic+0x4e>
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d001      	beq.n	800cd5e <xQueueGenericCreateStatic+0x52>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e000      	b.n	800cd60 <xQueueGenericCreateStatic+0x54>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d109      	bne.n	800cd78 <xQueueGenericCreateStatic+0x6c>
 800cd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd68:	f383 8811 	msr	BASEPRI, r3
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	f3bf 8f4f 	dsb	sy
 800cd74:	623b      	str	r3, [r7, #32]
 800cd76:	e7fe      	b.n	800cd76 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d102      	bne.n	800cd84 <xQueueGenericCreateStatic+0x78>
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d101      	bne.n	800cd88 <xQueueGenericCreateStatic+0x7c>
 800cd84:	2301      	movs	r3, #1
 800cd86:	e000      	b.n	800cd8a <xQueueGenericCreateStatic+0x7e>
 800cd88:	2300      	movs	r3, #0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d109      	bne.n	800cda2 <xQueueGenericCreateStatic+0x96>
 800cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	61fb      	str	r3, [r7, #28]
 800cda0:	e7fe      	b.n	800cda0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cda2:	2350      	movs	r3, #80	; 0x50
 800cda4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	2b50      	cmp	r3, #80	; 0x50
 800cdaa:	d009      	beq.n	800cdc0 <xQueueGenericCreateStatic+0xb4>
 800cdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb0:	f383 8811 	msr	BASEPRI, r3
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	61bb      	str	r3, [r7, #24]
 800cdbe:	e7fe      	b.n	800cdbe <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cdc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00d      	beq.n	800cde8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdce:	2201      	movs	r2, #1
 800cdd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdd4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	4613      	mov	r3, r2
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	68b9      	ldr	r1, [r7, #8]
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f000 f844 	bl	800ce70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3730      	adds	r7, #48	; 0x30
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b08a      	sub	sp, #40	; 0x28
 800cdf6:	af02      	add	r7, sp, #8
 800cdf8:	60f8      	str	r0, [r7, #12]
 800cdfa:	60b9      	str	r1, [r7, #8]
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d109      	bne.n	800ce1a <xQueueGenericCreate+0x28>
 800ce06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0a:	f383 8811 	msr	BASEPRI, r3
 800ce0e:	f3bf 8f6f 	isb	sy
 800ce12:	f3bf 8f4f 	dsb	sy
 800ce16:	613b      	str	r3, [r7, #16]
 800ce18:	e7fe      	b.n	800ce18 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	61fb      	str	r3, [r7, #28]
 800ce24:	e004      	b.n	800ce30 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	fb02 f303 	mul.w	r3, r2, r3
 800ce2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	3350      	adds	r3, #80	; 0x50
 800ce34:	4618      	mov	r0, r3
 800ce36:	f002 ff33 	bl	800fca0 <pvPortMalloc>
 800ce3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d011      	beq.n	800ce66 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	3350      	adds	r3, #80	; 0x50
 800ce4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce54:	79fa      	ldrb	r2, [r7, #7]
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	697a      	ldr	r2, [r7, #20]
 800ce5e:	68b9      	ldr	r1, [r7, #8]
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f000 f805 	bl	800ce70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce66:	69bb      	ldr	r3, [r7, #24]
	}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3720      	adds	r7, #32
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
 800ce7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d103      	bne.n	800ce8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	69ba      	ldr	r2, [r7, #24]
 800ce88:	601a      	str	r2, [r3, #0]
 800ce8a:	e002      	b.n	800ce92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce9e:	2101      	movs	r1, #1
 800cea0:	69b8      	ldr	r0, [r7, #24]
 800cea2:	f7ff fecb 	bl	800cc3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	78fa      	ldrb	r2, [r7, #3]
 800ceaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ceae:	bf00      	nop
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b082      	sub	sp, #8
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00e      	beq.n	800cee2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ced6:	2300      	movs	r3, #0
 800ced8:	2200      	movs	r2, #0
 800ceda:	2100      	movs	r1, #0
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 f905 	bl	800d0ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cee2:	bf00      	nop
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b086      	sub	sp, #24
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	4603      	mov	r3, r0
 800cef2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cef4:	2301      	movs	r3, #1
 800cef6:	617b      	str	r3, [r7, #20]
 800cef8:	2300      	movs	r3, #0
 800cefa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	461a      	mov	r2, r3
 800cf00:	6939      	ldr	r1, [r7, #16]
 800cf02:	6978      	ldr	r0, [r7, #20]
 800cf04:	f7ff ff75 	bl	800cdf2 <xQueueGenericCreate>
 800cf08:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f7ff ffd3 	bl	800ceb6 <prvInitialiseMutex>

		return xNewQueue;
 800cf10:	68fb      	ldr	r3, [r7, #12]
	}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3718      	adds	r7, #24
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b088      	sub	sp, #32
 800cf1e:	af02      	add	r7, sp, #8
 800cf20:	4603      	mov	r3, r0
 800cf22:	6039      	str	r1, [r7, #0]
 800cf24:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf26:	2301      	movs	r3, #1
 800cf28:	617b      	str	r3, [r7, #20]
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cf2e:	79fb      	ldrb	r3, [r7, #7]
 800cf30:	9300      	str	r3, [sp, #0]
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	2200      	movs	r2, #0
 800cf36:	6939      	ldr	r1, [r7, #16]
 800cf38:	6978      	ldr	r0, [r7, #20]
 800cf3a:	f7ff fee7 	bl	800cd0c <xQueueGenericCreateStatic>
 800cf3e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f7ff ffb8 	bl	800ceb6 <prvInitialiseMutex>

		return xNewQueue;
 800cf46:	68fb      	ldr	r3, [r7, #12]
	}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3718      	adds	r7, #24
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cf50:	b590      	push	{r4, r7, lr}
 800cf52:	b087      	sub	sp, #28
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d109      	bne.n	800cf76 <xQueueGiveMutexRecursive+0x26>
 800cf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf66:	f383 8811 	msr	BASEPRI, r3
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	60fb      	str	r3, [r7, #12]
 800cf74:	e7fe      	b.n	800cf74 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	689c      	ldr	r4, [r3, #8]
 800cf7a:	f001 fd35 	bl	800e9e8 <xTaskGetCurrentTaskHandle>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	429c      	cmp	r4, r3
 800cf82:	d111      	bne.n	800cfa8 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	1e5a      	subs	r2, r3, #1
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d105      	bne.n	800cfa2 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cf96:	2300      	movs	r3, #0
 800cf98:	2200      	movs	r2, #0
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	6938      	ldr	r0, [r7, #16]
 800cf9e:	f000 f8a5 	bl	800d0ec <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	617b      	str	r3, [r7, #20]
 800cfa6:	e001      	b.n	800cfac <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cfac:	697b      	ldr	r3, [r7, #20]
	}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	371c      	adds	r7, #28
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd90      	pop	{r4, r7, pc}

0800cfb6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cfb6:	b590      	push	{r4, r7, lr}
 800cfb8:	b087      	sub	sp, #28
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d109      	bne.n	800cfde <xQueueTakeMutexRecursive+0x28>
 800cfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfce:	f383 8811 	msr	BASEPRI, r3
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	60fb      	str	r3, [r7, #12]
 800cfdc:	e7fe      	b.n	800cfdc <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	689c      	ldr	r4, [r3, #8]
 800cfe2:	f001 fd01 	bl	800e9e8 <xTaskGetCurrentTaskHandle>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	429c      	cmp	r4, r3
 800cfea:	d107      	bne.n	800cffc <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	1c5a      	adds	r2, r3, #1
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cff6:	2301      	movs	r3, #1
 800cff8:	617b      	str	r3, [r7, #20]
 800cffa:	e00c      	b.n	800d016 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cffc:	6839      	ldr	r1, [r7, #0]
 800cffe:	6938      	ldr	r0, [r7, #16]
 800d000:	f000 fb68 	bl	800d6d4 <xQueueSemaphoreTake>
 800d004:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d004      	beq.n	800d016 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	1c5a      	adds	r2, r3, #1
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d016:	697b      	ldr	r3, [r7, #20]
	}
 800d018:	4618      	mov	r0, r3
 800d01a:	371c      	adds	r7, #28
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd90      	pop	{r4, r7, pc}

0800d020 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d020:	b580      	push	{r7, lr}
 800d022:	b08a      	sub	sp, #40	; 0x28
 800d024:	af02      	add	r7, sp, #8
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d109      	bne.n	800d046 <xQueueCreateCountingSemaphoreStatic+0x26>
 800d032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d036:	f383 8811 	msr	BASEPRI, r3
 800d03a:	f3bf 8f6f 	isb	sy
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	61bb      	str	r3, [r7, #24]
 800d044:	e7fe      	b.n	800d044 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d046:	68ba      	ldr	r2, [r7, #8]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d909      	bls.n	800d062 <xQueueCreateCountingSemaphoreStatic+0x42>
 800d04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d052:	f383 8811 	msr	BASEPRI, r3
 800d056:	f3bf 8f6f 	isb	sy
 800d05a:	f3bf 8f4f 	dsb	sy
 800d05e:	617b      	str	r3, [r7, #20]
 800d060:	e7fe      	b.n	800d060 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d062:	2302      	movs	r3, #2
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2200      	movs	r2, #0
 800d06a:	2100      	movs	r1, #0
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f7ff fe4d 	bl	800cd0c <xQueueGenericCreateStatic>
 800d072:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d002      	beq.n	800d080 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d080:	69fb      	ldr	r3, [r7, #28]
	}
 800d082:	4618      	mov	r0, r3
 800d084:	3720      	adds	r7, #32
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b086      	sub	sp, #24
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
 800d092:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d109      	bne.n	800d0ae <xQueueCreateCountingSemaphore+0x24>
 800d09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09e:	f383 8811 	msr	BASEPRI, r3
 800d0a2:	f3bf 8f6f 	isb	sy
 800d0a6:	f3bf 8f4f 	dsb	sy
 800d0aa:	613b      	str	r3, [r7, #16]
 800d0ac:	e7fe      	b.n	800d0ac <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d909      	bls.n	800d0ca <xQueueCreateCountingSemaphore+0x40>
 800d0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	60fb      	str	r3, [r7, #12]
 800d0c8:	e7fe      	b.n	800d0c8 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7ff fe8f 	bl	800cdf2 <xQueueGenericCreate>
 800d0d4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d002      	beq.n	800d0e2 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d0e2:	697b      	ldr	r3, [r7, #20]
	}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3718      	adds	r7, #24
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08e      	sub	sp, #56	; 0x38
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
 800d0f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d104:	2b00      	cmp	r3, #0
 800d106:	d109      	bne.n	800d11c <xQueueGenericSend+0x30>
 800d108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10c:	f383 8811 	msr	BASEPRI, r3
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	62bb      	str	r3, [r7, #40]	; 0x28
 800d11a:	e7fe      	b.n	800d11a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d103      	bne.n	800d12a <xQueueGenericSend+0x3e>
 800d122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <xQueueGenericSend+0x42>
 800d12a:	2301      	movs	r3, #1
 800d12c:	e000      	b.n	800d130 <xQueueGenericSend+0x44>
 800d12e:	2300      	movs	r3, #0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d109      	bne.n	800d148 <xQueueGenericSend+0x5c>
 800d134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d138:	f383 8811 	msr	BASEPRI, r3
 800d13c:	f3bf 8f6f 	isb	sy
 800d140:	f3bf 8f4f 	dsb	sy
 800d144:	627b      	str	r3, [r7, #36]	; 0x24
 800d146:	e7fe      	b.n	800d146 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	2b02      	cmp	r3, #2
 800d14c:	d103      	bne.n	800d156 <xQueueGenericSend+0x6a>
 800d14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d152:	2b01      	cmp	r3, #1
 800d154:	d101      	bne.n	800d15a <xQueueGenericSend+0x6e>
 800d156:	2301      	movs	r3, #1
 800d158:	e000      	b.n	800d15c <xQueueGenericSend+0x70>
 800d15a:	2300      	movs	r3, #0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d109      	bne.n	800d174 <xQueueGenericSend+0x88>
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	623b      	str	r3, [r7, #32]
 800d172:	e7fe      	b.n	800d172 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d174:	f001 fc48 	bl	800ea08 <xTaskGetSchedulerState>
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d102      	bne.n	800d184 <xQueueGenericSend+0x98>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d101      	bne.n	800d188 <xQueueGenericSend+0x9c>
 800d184:	2301      	movs	r3, #1
 800d186:	e000      	b.n	800d18a <xQueueGenericSend+0x9e>
 800d188:	2300      	movs	r3, #0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d109      	bne.n	800d1a2 <xQueueGenericSend+0xb6>
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	61fb      	str	r3, [r7, #28]
 800d1a0:	e7fe      	b.n	800d1a0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1a2:	f002 fc63 	bl	800fa6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d302      	bcc.n	800d1b8 <xQueueGenericSend+0xcc>
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d129      	bne.n	800d20c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	68b9      	ldr	r1, [r7, #8]
 800d1bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1be:	f000 fc48 	bl	800da52 <prvCopyDataToQueue>
 800d1c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d010      	beq.n	800d1ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ce:	3324      	adds	r3, #36	; 0x24
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f001 fa2b 	bl	800e62c <xTaskRemoveFromEventList>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d013      	beq.n	800d204 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d1dc:	4b3f      	ldr	r3, [pc, #252]	; (800d2dc <xQueueGenericSend+0x1f0>)
 800d1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1e2:	601a      	str	r2, [r3, #0]
 800d1e4:	f3bf 8f4f 	dsb	sy
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	e00a      	b.n	800d204 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d007      	beq.n	800d204 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d1f4:	4b39      	ldr	r3, [pc, #228]	; (800d2dc <xQueueGenericSend+0x1f0>)
 800d1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1fa:	601a      	str	r2, [r3, #0]
 800d1fc:	f3bf 8f4f 	dsb	sy
 800d200:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d204:	f002 fc60 	bl	800fac8 <vPortExitCritical>
				return pdPASS;
 800d208:	2301      	movs	r3, #1
 800d20a:	e063      	b.n	800d2d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d103      	bne.n	800d21a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d212:	f002 fc59 	bl	800fac8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d216:	2300      	movs	r3, #0
 800d218:	e05c      	b.n	800d2d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d106      	bne.n	800d22e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d220:	f107 0314 	add.w	r3, r7, #20
 800d224:	4618      	mov	r0, r3
 800d226:	f001 fa65 	bl	800e6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d22a:	2301      	movs	r3, #1
 800d22c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d22e:	f002 fc4b 	bl	800fac8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d232:	f000 ffa7 	bl	800e184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d236:	f002 fc19 	bl	800fa6c <vPortEnterCritical>
 800d23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d240:	b25b      	sxtb	r3, r3
 800d242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d246:	d103      	bne.n	800d250 <xQueueGenericSend+0x164>
 800d248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24a:	2200      	movs	r2, #0
 800d24c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d256:	b25b      	sxtb	r3, r3
 800d258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d25c:	d103      	bne.n	800d266 <xQueueGenericSend+0x17a>
 800d25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d260:	2200      	movs	r2, #0
 800d262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d266:	f002 fc2f 	bl	800fac8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d26a:	1d3a      	adds	r2, r7, #4
 800d26c:	f107 0314 	add.w	r3, r7, #20
 800d270:	4611      	mov	r1, r2
 800d272:	4618      	mov	r0, r3
 800d274:	f001 fa54 	bl	800e720 <xTaskCheckForTimeOut>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d124      	bne.n	800d2c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d27e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d280:	f000 fcdf 	bl	800dc42 <prvIsQueueFull>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d018      	beq.n	800d2bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	3310      	adds	r3, #16
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	4611      	mov	r1, r2
 800d292:	4618      	mov	r0, r3
 800d294:	f001 f97c 	bl	800e590 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d29a:	f000 fc6a 	bl	800db72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d29e:	f000 ffb7 	bl	800e210 <xTaskResumeAll>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f47f af7c 	bne.w	800d1a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800d2aa:	4b0c      	ldr	r3, [pc, #48]	; (800d2dc <xQueueGenericSend+0x1f0>)
 800d2ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2b0:	601a      	str	r2, [r3, #0]
 800d2b2:	f3bf 8f4f 	dsb	sy
 800d2b6:	f3bf 8f6f 	isb	sy
 800d2ba:	e772      	b.n	800d1a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2be:	f000 fc58 	bl	800db72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2c2:	f000 ffa5 	bl	800e210 <xTaskResumeAll>
 800d2c6:	e76c      	b.n	800d1a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ca:	f000 fc52 	bl	800db72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2ce:	f000 ff9f 	bl	800e210 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3738      	adds	r7, #56	; 0x38
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	e000ed04 	.word	0xe000ed04

0800d2e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b08e      	sub	sp, #56	; 0x38
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	607a      	str	r2, [r7, #4]
 800d2ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d109      	bne.n	800d30c <xQueueGenericSendFromISR+0x2c>
 800d2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	627b      	str	r3, [r7, #36]	; 0x24
 800d30a:	e7fe      	b.n	800d30a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d103      	bne.n	800d31a <xQueueGenericSendFromISR+0x3a>
 800d312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d316:	2b00      	cmp	r3, #0
 800d318:	d101      	bne.n	800d31e <xQueueGenericSendFromISR+0x3e>
 800d31a:	2301      	movs	r3, #1
 800d31c:	e000      	b.n	800d320 <xQueueGenericSendFromISR+0x40>
 800d31e:	2300      	movs	r3, #0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d109      	bne.n	800d338 <xQueueGenericSendFromISR+0x58>
 800d324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d328:	f383 8811 	msr	BASEPRI, r3
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	f3bf 8f4f 	dsb	sy
 800d334:	623b      	str	r3, [r7, #32]
 800d336:	e7fe      	b.n	800d336 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	2b02      	cmp	r3, #2
 800d33c:	d103      	bne.n	800d346 <xQueueGenericSendFromISR+0x66>
 800d33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d342:	2b01      	cmp	r3, #1
 800d344:	d101      	bne.n	800d34a <xQueueGenericSendFromISR+0x6a>
 800d346:	2301      	movs	r3, #1
 800d348:	e000      	b.n	800d34c <xQueueGenericSendFromISR+0x6c>
 800d34a:	2300      	movs	r3, #0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d109      	bne.n	800d364 <xQueueGenericSendFromISR+0x84>
 800d350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	61fb      	str	r3, [r7, #28]
 800d362:	e7fe      	b.n	800d362 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d364:	f002 fc5e 	bl	800fc24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d368:	f3ef 8211 	mrs	r2, BASEPRI
 800d36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d370:	f383 8811 	msr	BASEPRI, r3
 800d374:	f3bf 8f6f 	isb	sy
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	61ba      	str	r2, [r7, #24]
 800d37e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d380:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d382:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d302      	bcc.n	800d396 <xQueueGenericSendFromISR+0xb6>
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	2b02      	cmp	r3, #2
 800d394:	d12c      	bne.n	800d3f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d39c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3a0:	683a      	ldr	r2, [r7, #0]
 800d3a2:	68b9      	ldr	r1, [r7, #8]
 800d3a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3a6:	f000 fb54 	bl	800da52 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b2:	d112      	bne.n	800d3da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d016      	beq.n	800d3ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3be:	3324      	adds	r3, #36	; 0x24
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f001 f933 	bl	800e62c <xTaskRemoveFromEventList>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00e      	beq.n	800d3ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d00b      	beq.n	800d3ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	601a      	str	r2, [r3, #0]
 800d3d8:	e007      	b.n	800d3ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d3da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d3de:	3301      	adds	r3, #1
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	b25a      	sxtb	r2, r3
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d3ee:	e001      	b.n	800d3f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	637b      	str	r3, [r7, #52]	; 0x34
 800d3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d400:	4618      	mov	r0, r3
 800d402:	3738      	adds	r7, #56	; 0x38
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b08e      	sub	sp, #56	; 0x38
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d109      	bne.n	800d430 <xQueueGiveFromISR+0x28>
	__asm volatile
 800d41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d420:	f383 8811 	msr	BASEPRI, r3
 800d424:	f3bf 8f6f 	isb	sy
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	623b      	str	r3, [r7, #32]
 800d42e:	e7fe      	b.n	800d42e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d434:	2b00      	cmp	r3, #0
 800d436:	d009      	beq.n	800d44c <xQueueGiveFromISR+0x44>
 800d438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	61fb      	str	r3, [r7, #28]
 800d44a:	e7fe      	b.n	800d44a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d103      	bne.n	800d45c <xQueueGiveFromISR+0x54>
 800d454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d101      	bne.n	800d460 <xQueueGiveFromISR+0x58>
 800d45c:	2301      	movs	r3, #1
 800d45e:	e000      	b.n	800d462 <xQueueGiveFromISR+0x5a>
 800d460:	2300      	movs	r3, #0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d109      	bne.n	800d47a <xQueueGiveFromISR+0x72>
 800d466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46a:	f383 8811 	msr	BASEPRI, r3
 800d46e:	f3bf 8f6f 	isb	sy
 800d472:	f3bf 8f4f 	dsb	sy
 800d476:	61bb      	str	r3, [r7, #24]
 800d478:	e7fe      	b.n	800d478 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d47a:	f002 fbd3 	bl	800fc24 <vPortValidateInterruptPriority>
	__asm volatile
 800d47e:	f3ef 8211 	mrs	r2, BASEPRI
 800d482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d486:	f383 8811 	msr	BASEPRI, r3
 800d48a:	f3bf 8f6f 	isb	sy
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	617a      	str	r2, [r7, #20]
 800d494:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d496:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d498:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d22b      	bcs.n	800d502 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	1c5a      	adds	r2, r3, #1
 800d4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d4bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c4:	d112      	bne.n	800d4ec <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d016      	beq.n	800d4fc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d0:	3324      	adds	r3, #36	; 0x24
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f001 f8aa 	bl	800e62c <xTaskRemoveFromEventList>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00e      	beq.n	800d4fc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d00b      	beq.n	800d4fc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	601a      	str	r2, [r3, #0]
 800d4ea:	e007      	b.n	800d4fc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	b25a      	sxtb	r2, r3
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	637b      	str	r3, [r7, #52]	; 0x34
 800d500:	e001      	b.n	800d506 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d502:	2300      	movs	r3, #0
 800d504:	637b      	str	r3, [r7, #52]	; 0x34
 800d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d508:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d512:	4618      	mov	r0, r3
 800d514:	3738      	adds	r7, #56	; 0x38
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
	...

0800d51c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b08c      	sub	sp, #48	; 0x30
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d528:	2300      	movs	r3, #0
 800d52a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d532:	2b00      	cmp	r3, #0
 800d534:	d109      	bne.n	800d54a <xQueueReceive+0x2e>
	__asm volatile
 800d536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	623b      	str	r3, [r7, #32]
 800d548:	e7fe      	b.n	800d548 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d103      	bne.n	800d558 <xQueueReceive+0x3c>
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d554:	2b00      	cmp	r3, #0
 800d556:	d101      	bne.n	800d55c <xQueueReceive+0x40>
 800d558:	2301      	movs	r3, #1
 800d55a:	e000      	b.n	800d55e <xQueueReceive+0x42>
 800d55c:	2300      	movs	r3, #0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d109      	bne.n	800d576 <xQueueReceive+0x5a>
 800d562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	61fb      	str	r3, [r7, #28]
 800d574:	e7fe      	b.n	800d574 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d576:	f001 fa47 	bl	800ea08 <xTaskGetSchedulerState>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d102      	bne.n	800d586 <xQueueReceive+0x6a>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d101      	bne.n	800d58a <xQueueReceive+0x6e>
 800d586:	2301      	movs	r3, #1
 800d588:	e000      	b.n	800d58c <xQueueReceive+0x70>
 800d58a:	2300      	movs	r3, #0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d109      	bne.n	800d5a4 <xQueueReceive+0x88>
 800d590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d594:	f383 8811 	msr	BASEPRI, r3
 800d598:	f3bf 8f6f 	isb	sy
 800d59c:	f3bf 8f4f 	dsb	sy
 800d5a0:	61bb      	str	r3, [r7, #24]
 800d5a2:	e7fe      	b.n	800d5a2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5a4:	f002 fa62 	bl	800fa6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d01f      	beq.n	800d5f4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d5b4:	68b9      	ldr	r1, [r7, #8]
 800d5b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5b8:	f000 fab5 	bl	800db26 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5be:	1e5a      	subs	r2, r3, #1
 800d5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c6:	691b      	ldr	r3, [r3, #16]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00f      	beq.n	800d5ec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ce:	3310      	adds	r3, #16
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f001 f82b 	bl	800e62c <xTaskRemoveFromEventList>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d007      	beq.n	800d5ec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d5dc:	4b3c      	ldr	r3, [pc, #240]	; (800d6d0 <xQueueReceive+0x1b4>)
 800d5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5e2:	601a      	str	r2, [r3, #0]
 800d5e4:	f3bf 8f4f 	dsb	sy
 800d5e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d5ec:	f002 fa6c 	bl	800fac8 <vPortExitCritical>
				return pdPASS;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e069      	b.n	800d6c8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d103      	bne.n	800d602 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5fa:	f002 fa65 	bl	800fac8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d5fe:	2300      	movs	r3, #0
 800d600:	e062      	b.n	800d6c8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d604:	2b00      	cmp	r3, #0
 800d606:	d106      	bne.n	800d616 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d608:	f107 0310 	add.w	r3, r7, #16
 800d60c:	4618      	mov	r0, r3
 800d60e:	f001 f871 	bl	800e6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d612:	2301      	movs	r3, #1
 800d614:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d616:	f002 fa57 	bl	800fac8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d61a:	f000 fdb3 	bl	800e184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d61e:	f002 fa25 	bl	800fa6c <vPortEnterCritical>
 800d622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d628:	b25b      	sxtb	r3, r3
 800d62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d62e:	d103      	bne.n	800d638 <xQueueReceive+0x11c>
 800d630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d632:	2200      	movs	r2, #0
 800d634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d63e:	b25b      	sxtb	r3, r3
 800d640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d644:	d103      	bne.n	800d64e <xQueueReceive+0x132>
 800d646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d648:	2200      	movs	r2, #0
 800d64a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d64e:	f002 fa3b 	bl	800fac8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d652:	1d3a      	adds	r2, r7, #4
 800d654:	f107 0310 	add.w	r3, r7, #16
 800d658:	4611      	mov	r1, r2
 800d65a:	4618      	mov	r0, r3
 800d65c:	f001 f860 	bl	800e720 <xTaskCheckForTimeOut>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d123      	bne.n	800d6ae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d668:	f000 fad5 	bl	800dc16 <prvIsQueueEmpty>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d017      	beq.n	800d6a2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d674:	3324      	adds	r3, #36	; 0x24
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	4611      	mov	r1, r2
 800d67a:	4618      	mov	r0, r3
 800d67c:	f000 ff88 	bl	800e590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d682:	f000 fa76 	bl	800db72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d686:	f000 fdc3 	bl	800e210 <xTaskResumeAll>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d189      	bne.n	800d5a4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800d690:	4b0f      	ldr	r3, [pc, #60]	; (800d6d0 <xQueueReceive+0x1b4>)
 800d692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d696:	601a      	str	r2, [r3, #0]
 800d698:	f3bf 8f4f 	dsb	sy
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	e780      	b.n	800d5a4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d6a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6a4:	f000 fa65 	bl	800db72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6a8:	f000 fdb2 	bl	800e210 <xTaskResumeAll>
 800d6ac:	e77a      	b.n	800d5a4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d6ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6b0:	f000 fa5f 	bl	800db72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6b4:	f000 fdac 	bl	800e210 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6ba:	f000 faac 	bl	800dc16 <prvIsQueueEmpty>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f43f af6f 	beq.w	800d5a4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d6c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3730      	adds	r7, #48	; 0x30
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	e000ed04 	.word	0xe000ed04

0800d6d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b08e      	sub	sp, #56	; 0x38
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d109      	bne.n	800d704 <xQueueSemaphoreTake+0x30>
 800d6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f4:	f383 8811 	msr	BASEPRI, r3
 800d6f8:	f3bf 8f6f 	isb	sy
 800d6fc:	f3bf 8f4f 	dsb	sy
 800d700:	623b      	str	r3, [r7, #32]
 800d702:	e7fe      	b.n	800d702 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d009      	beq.n	800d720 <xQueueSemaphoreTake+0x4c>
 800d70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	61fb      	str	r3, [r7, #28]
 800d71e:	e7fe      	b.n	800d71e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d720:	f001 f972 	bl	800ea08 <xTaskGetSchedulerState>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d102      	bne.n	800d730 <xQueueSemaphoreTake+0x5c>
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <xQueueSemaphoreTake+0x60>
 800d730:	2301      	movs	r3, #1
 800d732:	e000      	b.n	800d736 <xQueueSemaphoreTake+0x62>
 800d734:	2300      	movs	r3, #0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d109      	bne.n	800d74e <xQueueSemaphoreTake+0x7a>
 800d73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73e:	f383 8811 	msr	BASEPRI, r3
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	61bb      	str	r3, [r7, #24]
 800d74c:	e7fe      	b.n	800d74c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d74e:	f002 f98d 	bl	800fa6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d756:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d024      	beq.n	800d7a8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d760:	1e5a      	subs	r2, r3, #1
 800d762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d764:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d104      	bne.n	800d778 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d76e:	f001 fabd 	bl	800ecec <pvTaskIncrementMutexHeldCount>
 800d772:	4602      	mov	r2, r0
 800d774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d776:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77a:	691b      	ldr	r3, [r3, #16]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d00f      	beq.n	800d7a0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d782:	3310      	adds	r3, #16
 800d784:	4618      	mov	r0, r3
 800d786:	f000 ff51 	bl	800e62c <xTaskRemoveFromEventList>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d007      	beq.n	800d7a0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d790:	4b53      	ldr	r3, [pc, #332]	; (800d8e0 <xQueueSemaphoreTake+0x20c>)
 800d792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d796:	601a      	str	r2, [r3, #0]
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d7a0:	f002 f992 	bl	800fac8 <vPortExitCritical>
				return pdPASS;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	e096      	b.n	800d8d6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d110      	bne.n	800d7d0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d009      	beq.n	800d7c8 <xQueueSemaphoreTake+0xf4>
 800d7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b8:	f383 8811 	msr	BASEPRI, r3
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f3bf 8f4f 	dsb	sy
 800d7c4:	617b      	str	r3, [r7, #20]
 800d7c6:	e7fe      	b.n	800d7c6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d7c8:	f002 f97e 	bl	800fac8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	e082      	b.n	800d8d6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d106      	bne.n	800d7e4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7d6:	f107 030c 	add.w	r3, r7, #12
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f000 ff8a 	bl	800e6f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7e4:	f002 f970 	bl	800fac8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7e8:	f000 fccc 	bl	800e184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7ec:	f002 f93e 	bl	800fa6c <vPortEnterCritical>
 800d7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7f6:	b25b      	sxtb	r3, r3
 800d7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7fc:	d103      	bne.n	800d806 <xQueueSemaphoreTake+0x132>
 800d7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d800:	2200      	movs	r2, #0
 800d802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d80c:	b25b      	sxtb	r3, r3
 800d80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d812:	d103      	bne.n	800d81c <xQueueSemaphoreTake+0x148>
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	2200      	movs	r2, #0
 800d818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d81c:	f002 f954 	bl	800fac8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d820:	463a      	mov	r2, r7
 800d822:	f107 030c 	add.w	r3, r7, #12
 800d826:	4611      	mov	r1, r2
 800d828:	4618      	mov	r0, r3
 800d82a:	f000 ff79 	bl	800e720 <xTaskCheckForTimeOut>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d132      	bne.n	800d89a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d836:	f000 f9ee 	bl	800dc16 <prvIsQueueEmpty>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d026      	beq.n	800d88e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d109      	bne.n	800d85c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800d848:	f002 f910 	bl	800fa6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84e:	689b      	ldr	r3, [r3, #8]
 800d850:	4618      	mov	r0, r3
 800d852:	f001 f8f7 	bl	800ea44 <xTaskPriorityInherit>
 800d856:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d858:	f002 f936 	bl	800fac8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85e:	3324      	adds	r3, #36	; 0x24
 800d860:	683a      	ldr	r2, [r7, #0]
 800d862:	4611      	mov	r1, r2
 800d864:	4618      	mov	r0, r3
 800d866:	f000 fe93 	bl	800e590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d86a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d86c:	f000 f981 	bl	800db72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d870:	f000 fcce 	bl	800e210 <xTaskResumeAll>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	f47f af69 	bne.w	800d74e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800d87c:	4b18      	ldr	r3, [pc, #96]	; (800d8e0 <xQueueSemaphoreTake+0x20c>)
 800d87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d882:	601a      	str	r2, [r3, #0]
 800d884:	f3bf 8f4f 	dsb	sy
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	e75f      	b.n	800d74e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d88e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d890:	f000 f96f 	bl	800db72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d894:	f000 fcbc 	bl	800e210 <xTaskResumeAll>
 800d898:	e759      	b.n	800d74e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d89a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d89c:	f000 f969 	bl	800db72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8a0:	f000 fcb6 	bl	800e210 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8a6:	f000 f9b6 	bl	800dc16 <prvIsQueueEmpty>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f43f af4e 	beq.w	800d74e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00d      	beq.n	800d8d4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800d8b8:	f002 f8d8 	bl	800fa6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d8bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8be:	f000 f8b0 	bl	800da22 <prvGetDisinheritPriorityAfterTimeout>
 800d8c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f001 f98e 	bl	800ebec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d8d0:	f002 f8fa 	bl	800fac8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d8d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3738      	adds	r7, #56	; 0x38
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	e000ed04 	.word	0xe000ed04

0800d8e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b08e      	sub	sp, #56	; 0x38
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d109      	bne.n	800d90e <xQueueReceiveFromISR+0x2a>
 800d8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fe:	f383 8811 	msr	BASEPRI, r3
 800d902:	f3bf 8f6f 	isb	sy
 800d906:	f3bf 8f4f 	dsb	sy
 800d90a:	623b      	str	r3, [r7, #32]
 800d90c:	e7fe      	b.n	800d90c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d103      	bne.n	800d91c <xQueueReceiveFromISR+0x38>
 800d914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d101      	bne.n	800d920 <xQueueReceiveFromISR+0x3c>
 800d91c:	2301      	movs	r3, #1
 800d91e:	e000      	b.n	800d922 <xQueueReceiveFromISR+0x3e>
 800d920:	2300      	movs	r3, #0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d109      	bne.n	800d93a <xQueueReceiveFromISR+0x56>
 800d926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	61fb      	str	r3, [r7, #28]
 800d938:	e7fe      	b.n	800d938 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d93a:	f002 f973 	bl	800fc24 <vPortValidateInterruptPriority>
	__asm volatile
 800d93e:	f3ef 8211 	mrs	r2, BASEPRI
 800d942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d946:	f383 8811 	msr	BASEPRI, r3
 800d94a:	f3bf 8f6f 	isb	sy
 800d94e:	f3bf 8f4f 	dsb	sy
 800d952:	61ba      	str	r2, [r7, #24]
 800d954:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d956:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d958:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d95e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d962:	2b00      	cmp	r3, #0
 800d964:	d02f      	beq.n	800d9c6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d96c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d970:	68b9      	ldr	r1, [r7, #8]
 800d972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d974:	f000 f8d7 	bl	800db26 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97a:	1e5a      	subs	r2, r3, #1
 800d97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d980:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d988:	d112      	bne.n	800d9b0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	691b      	ldr	r3, [r3, #16]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d016      	beq.n	800d9c0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d994:	3310      	adds	r3, #16
 800d996:	4618      	mov	r0, r3
 800d998:	f000 fe48 	bl	800e62c <xTaskRemoveFromEventList>
 800d99c:	4603      	mov	r3, r0
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00e      	beq.n	800d9c0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d00b      	beq.n	800d9c0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	e007      	b.n	800d9c0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	b25a      	sxtb	r2, r3
 800d9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	637b      	str	r3, [r7, #52]	; 0x34
 800d9c4:	e001      	b.n	800d9ca <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3738      	adds	r7, #56	; 0x38
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b084      	sub	sp, #16
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d109      	bne.n	800da04 <vQueueDelete+0x26>
	__asm volatile
 800d9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f4:	f383 8811 	msr	BASEPRI, r3
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	60bb      	str	r3, [r7, #8]
 800da02:	e7fe      	b.n	800da02 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f000 f95d 	bl	800dcc4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800da10:	2b00      	cmp	r3, #0
 800da12:	d102      	bne.n	800da1a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800da14:	68f8      	ldr	r0, [r7, #12]
 800da16:	f002 fa05 	bl	800fe24 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800da1a:	bf00      	nop
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da22:	b480      	push	{r7}
 800da24:	b085      	sub	sp, #20
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d006      	beq.n	800da40 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800da3c:	60fb      	str	r3, [r7, #12]
 800da3e:	e001      	b.n	800da44 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800da40:	2300      	movs	r3, #0
 800da42:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800da44:	68fb      	ldr	r3, [r7, #12]
	}
 800da46:	4618      	mov	r0, r3
 800da48:	3714      	adds	r7, #20
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da52:	b580      	push	{r7, lr}
 800da54:	b086      	sub	sp, #24
 800da56:	af00      	add	r7, sp, #0
 800da58:	60f8      	str	r0, [r7, #12]
 800da5a:	60b9      	str	r1, [r7, #8]
 800da5c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800da5e:	2300      	movs	r3, #0
 800da60:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da66:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d10d      	bne.n	800da8c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d14d      	bne.n	800db14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f001 f849 	bl	800eb14 <xTaskPriorityDisinherit>
 800da82:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2200      	movs	r2, #0
 800da88:	609a      	str	r2, [r3, #8]
 800da8a:	e043      	b.n	800db14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d119      	bne.n	800dac6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6858      	ldr	r0, [r3, #4]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da9a:	461a      	mov	r2, r3
 800da9c:	68b9      	ldr	r1, [r7, #8]
 800da9e:	f003 ff2b 	bl	80118f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	685a      	ldr	r2, [r3, #4]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daaa:	441a      	add	r2, r3
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	685a      	ldr	r2, [r3, #4]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d32b      	bcc.n	800db14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681a      	ldr	r2, [r3, #0]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	605a      	str	r2, [r3, #4]
 800dac4:	e026      	b.n	800db14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	68d8      	ldr	r0, [r3, #12]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dace:	461a      	mov	r2, r3
 800dad0:	68b9      	ldr	r1, [r7, #8]
 800dad2:	f003 ff11 	bl	80118f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	68da      	ldr	r2, [r3, #12]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dade:	425b      	negs	r3, r3
 800dae0:	441a      	add	r2, r3
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	68da      	ldr	r2, [r3, #12]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d207      	bcs.n	800db02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	689a      	ldr	r2, [r3, #8]
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dafa:	425b      	negs	r3, r3
 800dafc:	441a      	add	r2, r3
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2b02      	cmp	r3, #2
 800db06:	d105      	bne.n	800db14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d002      	beq.n	800db14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	3b01      	subs	r3, #1
 800db12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	1c5a      	adds	r2, r3, #1
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db1c:	697b      	ldr	r3, [r7, #20]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3718      	adds	r7, #24
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}

0800db26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db26:	b580      	push	{r7, lr}
 800db28:	b082      	sub	sp, #8
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
 800db2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db34:	2b00      	cmp	r3, #0
 800db36:	d018      	beq.n	800db6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	68da      	ldr	r2, [r3, #12]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db40:	441a      	add	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	68da      	ldr	r2, [r3, #12]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	689b      	ldr	r3, [r3, #8]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d303      	bcc.n	800db5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	68d9      	ldr	r1, [r3, #12]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db62:	461a      	mov	r2, r3
 800db64:	6838      	ldr	r0, [r7, #0]
 800db66:	f003 fec7 	bl	80118f8 <memcpy>
	}
}
 800db6a:	bf00      	nop
 800db6c:	3708      	adds	r7, #8
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}

0800db72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800db72:	b580      	push	{r7, lr}
 800db74:	b084      	sub	sp, #16
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800db7a:	f001 ff77 	bl	800fa6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db86:	e011      	b.n	800dbac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d012      	beq.n	800dbb6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	3324      	adds	r3, #36	; 0x24
 800db94:	4618      	mov	r0, r3
 800db96:	f000 fd49 	bl	800e62c <xTaskRemoveFromEventList>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dba0:	f000 fe1e 	bl	800e7e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dba4:	7bfb      	ldrb	r3, [r7, #15]
 800dba6:	3b01      	subs	r3, #1
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	dce9      	bgt.n	800db88 <prvUnlockQueue+0x16>
 800dbb4:	e000      	b.n	800dbb8 <prvUnlockQueue+0x46>
					break;
 800dbb6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	22ff      	movs	r2, #255	; 0xff
 800dbbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dbc0:	f001 ff82 	bl	800fac8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dbc4:	f001 ff52 	bl	800fa6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbd0:	e011      	b.n	800dbf6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d012      	beq.n	800dc00 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	3310      	adds	r3, #16
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f000 fd24 	bl	800e62c <xTaskRemoveFromEventList>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d001      	beq.n	800dbee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dbea:	f000 fdf9 	bl	800e7e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dbee:	7bbb      	ldrb	r3, [r7, #14]
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	dce9      	bgt.n	800dbd2 <prvUnlockQueue+0x60>
 800dbfe:	e000      	b.n	800dc02 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc00:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	22ff      	movs	r2, #255	; 0xff
 800dc06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc0a:	f001 ff5d 	bl	800fac8 <vPortExitCritical>
}
 800dc0e:	bf00      	nop
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b084      	sub	sp, #16
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc1e:	f001 ff25 	bl	800fa6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d102      	bne.n	800dc30 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	60fb      	str	r3, [r7, #12]
 800dc2e:	e001      	b.n	800dc34 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dc30:	2300      	movs	r3, #0
 800dc32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc34:	f001 ff48 	bl	800fac8 <vPortExitCritical>

	return xReturn;
 800dc38:	68fb      	ldr	r3, [r7, #12]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b084      	sub	sp, #16
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc4a:	f001 ff0f 	bl	800fa6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d102      	bne.n	800dc60 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	60fb      	str	r3, [r7, #12]
 800dc5e:	e001      	b.n	800dc64 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dc60:	2300      	movs	r3, #0
 800dc62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc64:	f001 ff30 	bl	800fac8 <vPortExitCritical>

	return xReturn;
 800dc68:	68fb      	ldr	r3, [r7, #12]
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
	...

0800dc74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dc74:	b480      	push	{r7}
 800dc76:	b085      	sub	sp, #20
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc7e:	2300      	movs	r3, #0
 800dc80:	60fb      	str	r3, [r7, #12]
 800dc82:	e014      	b.n	800dcae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dc84:	4a0e      	ldr	r2, [pc, #56]	; (800dcc0 <vQueueAddToRegistry+0x4c>)
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d10b      	bne.n	800dca8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dc90:	490b      	ldr	r1, [pc, #44]	; (800dcc0 <vQueueAddToRegistry+0x4c>)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	683a      	ldr	r2, [r7, #0]
 800dc96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dc9a:	4a09      	ldr	r2, [pc, #36]	; (800dcc0 <vQueueAddToRegistry+0x4c>)
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	00db      	lsls	r3, r3, #3
 800dca0:	4413      	add	r3, r2
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dca6:	e005      	b.n	800dcb4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	60fb      	str	r3, [r7, #12]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2b07      	cmp	r3, #7
 800dcb2:	d9e7      	bls.n	800dc84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dcb4:	bf00      	nop
 800dcb6:	3714      	adds	r7, #20
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr
 800dcc0:	20004edc 	.word	0x20004edc

0800dcc4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b085      	sub	sp, #20
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dccc:	2300      	movs	r3, #0
 800dcce:	60fb      	str	r3, [r7, #12]
 800dcd0:	e016      	b.n	800dd00 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dcd2:	4a10      	ldr	r2, [pc, #64]	; (800dd14 <vQueueUnregisterQueue+0x50>)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	00db      	lsls	r3, r3, #3
 800dcd8:	4413      	add	r3, r2
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d10b      	bne.n	800dcfa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dce2:	4a0c      	ldr	r2, [pc, #48]	; (800dd14 <vQueueUnregisterQueue+0x50>)
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2100      	movs	r1, #0
 800dce8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dcec:	4a09      	ldr	r2, [pc, #36]	; (800dd14 <vQueueUnregisterQueue+0x50>)
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	00db      	lsls	r3, r3, #3
 800dcf2:	4413      	add	r3, r2
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	605a      	str	r2, [r3, #4]
				break;
 800dcf8:	e005      	b.n	800dd06 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	60fb      	str	r3, [r7, #12]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2b07      	cmp	r3, #7
 800dd04:	d9e5      	bls.n	800dcd2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dd06:	bf00      	nop
 800dd08:	3714      	adds	r7, #20
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr
 800dd12:	bf00      	nop
 800dd14:	20004edc 	.word	0x20004edc

0800dd18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b086      	sub	sp, #24
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd28:	f001 fea0 	bl	800fa6c <vPortEnterCritical>
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd32:	b25b      	sxtb	r3, r3
 800dd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd38:	d103      	bne.n	800dd42 <vQueueWaitForMessageRestricted+0x2a>
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd48:	b25b      	sxtb	r3, r3
 800dd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4e:	d103      	bne.n	800dd58 <vQueueWaitForMessageRestricted+0x40>
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	2200      	movs	r2, #0
 800dd54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd58:	f001 feb6 	bl	800fac8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d106      	bne.n	800dd72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	3324      	adds	r3, #36	; 0x24
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	68b9      	ldr	r1, [r7, #8]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 fc33 	bl	800e5d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dd72:	6978      	ldr	r0, [r7, #20]
 800dd74:	f7ff fefd 	bl	800db72 <prvUnlockQueue>
	}
 800dd78:	bf00      	nop
 800dd7a:	3718      	adds	r7, #24
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b08e      	sub	sp, #56	; 0x38
 800dd84:	af04      	add	r7, sp, #16
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
 800dd8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dd8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d109      	bne.n	800dda8 <xTaskCreateStatic+0x28>
 800dd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd98:	f383 8811 	msr	BASEPRI, r3
 800dd9c:	f3bf 8f6f 	isb	sy
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	623b      	str	r3, [r7, #32]
 800dda6:	e7fe      	b.n	800dda6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800dda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d109      	bne.n	800ddc2 <xTaskCreateStatic+0x42>
 800ddae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb2:	f383 8811 	msr	BASEPRI, r3
 800ddb6:	f3bf 8f6f 	isb	sy
 800ddba:	f3bf 8f4f 	dsb	sy
 800ddbe:	61fb      	str	r3, [r7, #28]
 800ddc0:	e7fe      	b.n	800ddc0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ddc2:	235c      	movs	r3, #92	; 0x5c
 800ddc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	2b5c      	cmp	r3, #92	; 0x5c
 800ddca:	d009      	beq.n	800dde0 <xTaskCreateStatic+0x60>
 800ddcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd0:	f383 8811 	msr	BASEPRI, r3
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	f3bf 8f4f 	dsb	sy
 800dddc:	61bb      	str	r3, [r7, #24]
 800ddde:	e7fe      	b.n	800ddde <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dde0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d01e      	beq.n	800de26 <xTaskCreateStatic+0xa6>
 800dde8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d01b      	beq.n	800de26 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ddee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddf6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfa:	2202      	movs	r2, #2
 800ddfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de00:	2300      	movs	r3, #0
 800de02:	9303      	str	r3, [sp, #12]
 800de04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de06:	9302      	str	r3, [sp, #8]
 800de08:	f107 0314 	add.w	r3, r7, #20
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de10:	9300      	str	r3, [sp, #0]
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	68b9      	ldr	r1, [r7, #8]
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f000 f850 	bl	800debe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de20:	f000 f8dc 	bl	800dfdc <prvAddNewTaskToReadyList>
 800de24:	e001      	b.n	800de2a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800de26:	2300      	movs	r3, #0
 800de28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de2a:	697b      	ldr	r3, [r7, #20]
	}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3728      	adds	r7, #40	; 0x28
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de34:	b580      	push	{r7, lr}
 800de36:	b08c      	sub	sp, #48	; 0x30
 800de38:	af04      	add	r7, sp, #16
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	603b      	str	r3, [r7, #0]
 800de40:	4613      	mov	r3, r2
 800de42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de44:	88fb      	ldrh	r3, [r7, #6]
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	4618      	mov	r0, r3
 800de4a:	f001 ff29 	bl	800fca0 <pvPortMalloc>
 800de4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d00e      	beq.n	800de74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de56:	205c      	movs	r0, #92	; 0x5c
 800de58:	f001 ff22 	bl	800fca0 <pvPortMalloc>
 800de5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d003      	beq.n	800de6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	697a      	ldr	r2, [r7, #20]
 800de68:	631a      	str	r2, [r3, #48]	; 0x30
 800de6a:	e005      	b.n	800de78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800de6c:	6978      	ldr	r0, [r7, #20]
 800de6e:	f001 ffd9 	bl	800fe24 <vPortFree>
 800de72:	e001      	b.n	800de78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800de74:	2300      	movs	r3, #0
 800de76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d017      	beq.n	800deae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	2200      	movs	r2, #0
 800de82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800de86:	88fa      	ldrh	r2, [r7, #6]
 800de88:	2300      	movs	r3, #0
 800de8a:	9303      	str	r3, [sp, #12]
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	9302      	str	r3, [sp, #8]
 800de90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de92:	9301      	str	r3, [sp, #4]
 800de94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de96:	9300      	str	r3, [sp, #0]
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	68b9      	ldr	r1, [r7, #8]
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f000 f80e 	bl	800debe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dea2:	69f8      	ldr	r0, [r7, #28]
 800dea4:	f000 f89a 	bl	800dfdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dea8:	2301      	movs	r3, #1
 800deaa:	61bb      	str	r3, [r7, #24]
 800deac:	e002      	b.n	800deb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800deae:	f04f 33ff 	mov.w	r3, #4294967295
 800deb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800deb4:	69bb      	ldr	r3, [r7, #24]
	}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3720      	adds	r7, #32
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}

0800debe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800debe:	b580      	push	{r7, lr}
 800dec0:	b088      	sub	sp, #32
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	60f8      	str	r0, [r7, #12]
 800dec6:	60b9      	str	r1, [r7, #8]
 800dec8:	607a      	str	r2, [r7, #4]
 800deca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800decc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dece:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	461a      	mov	r2, r3
 800ded6:	21a5      	movs	r1, #165	; 0xa5
 800ded8:	f003 fd19 	bl	801190e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dee6:	3b01      	subs	r3, #1
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	4413      	add	r3, r2
 800deec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	f023 0307 	bic.w	r3, r3, #7
 800def4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	f003 0307 	and.w	r3, r3, #7
 800defc:	2b00      	cmp	r3, #0
 800defe:	d009      	beq.n	800df14 <prvInitialiseNewTask+0x56>
 800df00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df04:	f383 8811 	msr	BASEPRI, r3
 800df08:	f3bf 8f6f 	isb	sy
 800df0c:	f3bf 8f4f 	dsb	sy
 800df10:	617b      	str	r3, [r7, #20]
 800df12:	e7fe      	b.n	800df12 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d01f      	beq.n	800df5a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df1a:	2300      	movs	r3, #0
 800df1c:	61fb      	str	r3, [r7, #28]
 800df1e:	e012      	b.n	800df46 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	4413      	add	r3, r2
 800df26:	7819      	ldrb	r1, [r3, #0]
 800df28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	4413      	add	r3, r2
 800df2e:	3334      	adds	r3, #52	; 0x34
 800df30:	460a      	mov	r2, r1
 800df32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df34:	68ba      	ldr	r2, [r7, #8]
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	4413      	add	r3, r2
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d006      	beq.n	800df4e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	3301      	adds	r3, #1
 800df44:	61fb      	str	r3, [r7, #28]
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	2b0f      	cmp	r3, #15
 800df4a:	d9e9      	bls.n	800df20 <prvInitialiseNewTask+0x62>
 800df4c:	e000      	b.n	800df50 <prvInitialiseNewTask+0x92>
			{
				break;
 800df4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df52:	2200      	movs	r2, #0
 800df54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800df58:	e003      	b.n	800df62 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800df5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5c:	2200      	movs	r2, #0
 800df5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df64:	2b37      	cmp	r3, #55	; 0x37
 800df66:	d901      	bls.n	800df6c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800df68:	2337      	movs	r3, #55	; 0x37
 800df6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800df6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800df72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800df78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7a:	2200      	movs	r2, #0
 800df7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df80:	3304      	adds	r3, #4
 800df82:	4618      	mov	r0, r3
 800df84:	f7fe fdc6 	bl	800cb14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8a:	3318      	adds	r3, #24
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fe fdc1 	bl	800cb14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfa6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfaa:	2200      	movs	r2, #0
 800dfac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dfb6:	683a      	ldr	r2, [r7, #0]
 800dfb8:	68f9      	ldr	r1, [r7, #12]
 800dfba:	69b8      	ldr	r0, [r7, #24]
 800dfbc:	f001 fc2c 	bl	800f818 <pxPortInitialiseStack>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfd2:	bf00      	nop
 800dfd4:	3720      	adds	r7, #32
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
	...

0800dfdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dfe4:	f001 fd42 	bl	800fa6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dfe8:	4b2d      	ldr	r3, [pc, #180]	; (800e0a0 <prvAddNewTaskToReadyList+0xc4>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	3301      	adds	r3, #1
 800dfee:	4a2c      	ldr	r2, [pc, #176]	; (800e0a0 <prvAddNewTaskToReadyList+0xc4>)
 800dff0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dff2:	4b2c      	ldr	r3, [pc, #176]	; (800e0a4 <prvAddNewTaskToReadyList+0xc8>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d109      	bne.n	800e00e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dffa:	4a2a      	ldr	r2, [pc, #168]	; (800e0a4 <prvAddNewTaskToReadyList+0xc8>)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e000:	4b27      	ldr	r3, [pc, #156]	; (800e0a0 <prvAddNewTaskToReadyList+0xc4>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b01      	cmp	r3, #1
 800e006:	d110      	bne.n	800e02a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e008:	f000 fc34 	bl	800e874 <prvInitialiseTaskLists>
 800e00c:	e00d      	b.n	800e02a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e00e:	4b26      	ldr	r3, [pc, #152]	; (800e0a8 <prvAddNewTaskToReadyList+0xcc>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d109      	bne.n	800e02a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e016:	4b23      	ldr	r3, [pc, #140]	; (800e0a4 <prvAddNewTaskToReadyList+0xc8>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e020:	429a      	cmp	r2, r3
 800e022:	d802      	bhi.n	800e02a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e024:	4a1f      	ldr	r2, [pc, #124]	; (800e0a4 <prvAddNewTaskToReadyList+0xc8>)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e02a:	4b20      	ldr	r3, [pc, #128]	; (800e0ac <prvAddNewTaskToReadyList+0xd0>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	3301      	adds	r3, #1
 800e030:	4a1e      	ldr	r2, [pc, #120]	; (800e0ac <prvAddNewTaskToReadyList+0xd0>)
 800e032:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e034:	4b1d      	ldr	r3, [pc, #116]	; (800e0ac <prvAddNewTaskToReadyList+0xd0>)
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e040:	4b1b      	ldr	r3, [pc, #108]	; (800e0b0 <prvAddNewTaskToReadyList+0xd4>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	429a      	cmp	r2, r3
 800e046:	d903      	bls.n	800e050 <prvAddNewTaskToReadyList+0x74>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e04c:	4a18      	ldr	r2, [pc, #96]	; (800e0b0 <prvAddNewTaskToReadyList+0xd4>)
 800e04e:	6013      	str	r3, [r2, #0]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e054:	4613      	mov	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	4413      	add	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4a15      	ldr	r2, [pc, #84]	; (800e0b4 <prvAddNewTaskToReadyList+0xd8>)
 800e05e:	441a      	add	r2, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	3304      	adds	r3, #4
 800e064:	4619      	mov	r1, r3
 800e066:	4610      	mov	r0, r2
 800e068:	f7fe fd61 	bl	800cb2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e06c:	f001 fd2c 	bl	800fac8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e070:	4b0d      	ldr	r3, [pc, #52]	; (800e0a8 <prvAddNewTaskToReadyList+0xcc>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00e      	beq.n	800e096 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e078:	4b0a      	ldr	r3, [pc, #40]	; (800e0a4 <prvAddNewTaskToReadyList+0xc8>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e082:	429a      	cmp	r2, r3
 800e084:	d207      	bcs.n	800e096 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e086:	4b0c      	ldr	r3, [pc, #48]	; (800e0b8 <prvAddNewTaskToReadyList+0xdc>)
 800e088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e08c:	601a      	str	r2, [r3, #0]
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e096:	bf00      	nop
 800e098:	3708      	adds	r7, #8
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	20002094 	.word	0x20002094
 800e0a4:	20001bc0 	.word	0x20001bc0
 800e0a8:	200020a0 	.word	0x200020a0
 800e0ac:	200020b0 	.word	0x200020b0
 800e0b0:	2000209c 	.word	0x2000209c
 800e0b4:	20001bc4 	.word	0x20001bc4
 800e0b8:	e000ed04 	.word	0xe000ed04

0800e0bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b08a      	sub	sp, #40	; 0x28
 800e0c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e0ca:	463a      	mov	r2, r7
 800e0cc:	1d39      	adds	r1, r7, #4
 800e0ce:	f107 0308 	add.w	r3, r7, #8
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fe fcca 	bl	800ca6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e0d8:	6839      	ldr	r1, [r7, #0]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	68ba      	ldr	r2, [r7, #8]
 800e0de:	9202      	str	r2, [sp, #8]
 800e0e0:	9301      	str	r3, [sp, #4]
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	460a      	mov	r2, r1
 800e0ea:	4920      	ldr	r1, [pc, #128]	; (800e16c <vTaskStartScheduler+0xb0>)
 800e0ec:	4820      	ldr	r0, [pc, #128]	; (800e170 <vTaskStartScheduler+0xb4>)
 800e0ee:	f7ff fe47 	bl	800dd80 <xTaskCreateStatic>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	4b1f      	ldr	r3, [pc, #124]	; (800e174 <vTaskStartScheduler+0xb8>)
 800e0f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e0f8:	4b1e      	ldr	r3, [pc, #120]	; (800e174 <vTaskStartScheduler+0xb8>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e100:	2301      	movs	r3, #1
 800e102:	617b      	str	r3, [r7, #20]
 800e104:	e001      	b.n	800e10a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e106:	2300      	movs	r3, #0
 800e108:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d102      	bne.n	800e116 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e110:	f001 f83c 	bl	800f18c <xTimerCreateTimerTask>
 800e114:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d115      	bne.n	800e148 <vTaskStartScheduler+0x8c>
 800e11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e120:	f383 8811 	msr	BASEPRI, r3
 800e124:	f3bf 8f6f 	isb	sy
 800e128:	f3bf 8f4f 	dsb	sy
 800e12c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e12e:	4b12      	ldr	r3, [pc, #72]	; (800e178 <vTaskStartScheduler+0xbc>)
 800e130:	f04f 32ff 	mov.w	r2, #4294967295
 800e134:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e136:	4b11      	ldr	r3, [pc, #68]	; (800e17c <vTaskStartScheduler+0xc0>)
 800e138:	2201      	movs	r2, #1
 800e13a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e13c:	4b10      	ldr	r3, [pc, #64]	; (800e180 <vTaskStartScheduler+0xc4>)
 800e13e:	2200      	movs	r2, #0
 800e140:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e142:	f001 fbf5 	bl	800f930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e146:	e00d      	b.n	800e164 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e14e:	d109      	bne.n	800e164 <vTaskStartScheduler+0xa8>
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	60fb      	str	r3, [r7, #12]
 800e162:	e7fe      	b.n	800e162 <vTaskStartScheduler+0xa6>
}
 800e164:	bf00      	nop
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	080119ec 	.word	0x080119ec
 800e170:	0800e7f9 	.word	0x0800e7f9
 800e174:	200020b8 	.word	0x200020b8
 800e178:	200020b4 	.word	0x200020b4
 800e17c:	200020a0 	.word	0x200020a0
 800e180:	20002098 	.word	0x20002098

0800e184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e184:	b480      	push	{r7}
 800e186:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e188:	4b04      	ldr	r3, [pc, #16]	; (800e19c <vTaskSuspendAll+0x18>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	3301      	adds	r3, #1
 800e18e:	4a03      	ldr	r2, [pc, #12]	; (800e19c <vTaskSuspendAll+0x18>)
 800e190:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e192:	bf00      	nop
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr
 800e19c:	200020bc 	.word	0x200020bc

0800e1a0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b083      	sub	sp, #12
 800e1a4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800e1aa:	4b14      	ldr	r3, [pc, #80]	; (800e1fc <prvGetExpectedIdleTime+0x5c>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e1b6:	4b12      	ldr	r3, [pc, #72]	; (800e200 <prvGetExpectedIdleTime+0x60>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d002      	beq.n	800e1c6 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	607b      	str	r3, [r7, #4]
 800e1c4:	e012      	b.n	800e1ec <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800e1c6:	4b0f      	ldr	r3, [pc, #60]	; (800e204 <prvGetExpectedIdleTime+0x64>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d902      	bls.n	800e1d4 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	607b      	str	r3, [r7, #4]
 800e1d2:	e00b      	b.n	800e1ec <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d002      	beq.n	800e1e0 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	607b      	str	r3, [r7, #4]
 800e1de:	e005      	b.n	800e1ec <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800e1e0:	4b09      	ldr	r3, [pc, #36]	; (800e208 <prvGetExpectedIdleTime+0x68>)
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	4b09      	ldr	r3, [pc, #36]	; (800e20c <prvGetExpectedIdleTime+0x6c>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	1ad3      	subs	r3, r2, r3
 800e1ea:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800e1ec:	687b      	ldr	r3, [r7, #4]
	}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	370c      	adds	r7, #12
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop
 800e1fc:	2000209c 	.word	0x2000209c
 800e200:	20001bc0 	.word	0x20001bc0
 800e204:	20001bc4 	.word	0x20001bc4
 800e208:	200020b4 	.word	0x200020b4
 800e20c:	20002098 	.word	0x20002098

0800e210 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e216:	2300      	movs	r3, #0
 800e218:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e21a:	2300      	movs	r3, #0
 800e21c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e21e:	4b41      	ldr	r3, [pc, #260]	; (800e324 <xTaskResumeAll+0x114>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d109      	bne.n	800e23a <xTaskResumeAll+0x2a>
 800e226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22a:	f383 8811 	msr	BASEPRI, r3
 800e22e:	f3bf 8f6f 	isb	sy
 800e232:	f3bf 8f4f 	dsb	sy
 800e236:	603b      	str	r3, [r7, #0]
 800e238:	e7fe      	b.n	800e238 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e23a:	f001 fc17 	bl	800fa6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e23e:	4b39      	ldr	r3, [pc, #228]	; (800e324 <xTaskResumeAll+0x114>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	3b01      	subs	r3, #1
 800e244:	4a37      	ldr	r2, [pc, #220]	; (800e324 <xTaskResumeAll+0x114>)
 800e246:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e248:	4b36      	ldr	r3, [pc, #216]	; (800e324 <xTaskResumeAll+0x114>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d162      	bne.n	800e316 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e250:	4b35      	ldr	r3, [pc, #212]	; (800e328 <xTaskResumeAll+0x118>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d05e      	beq.n	800e316 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e258:	e02f      	b.n	800e2ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e25a:	4b34      	ldr	r3, [pc, #208]	; (800e32c <xTaskResumeAll+0x11c>)
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	3318      	adds	r3, #24
 800e266:	4618      	mov	r0, r3
 800e268:	f7fe fcbe 	bl	800cbe8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	3304      	adds	r3, #4
 800e270:	4618      	mov	r0, r3
 800e272:	f7fe fcb9 	bl	800cbe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e27a:	4b2d      	ldr	r3, [pc, #180]	; (800e330 <xTaskResumeAll+0x120>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	429a      	cmp	r2, r3
 800e280:	d903      	bls.n	800e28a <xTaskResumeAll+0x7a>
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e286:	4a2a      	ldr	r2, [pc, #168]	; (800e330 <xTaskResumeAll+0x120>)
 800e288:	6013      	str	r3, [r2, #0]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e28e:	4613      	mov	r3, r2
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	4413      	add	r3, r2
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	4a27      	ldr	r2, [pc, #156]	; (800e334 <xTaskResumeAll+0x124>)
 800e298:	441a      	add	r2, r3
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	3304      	adds	r3, #4
 800e29e:	4619      	mov	r1, r3
 800e2a0:	4610      	mov	r0, r2
 800e2a2:	f7fe fc44 	bl	800cb2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2aa:	4b23      	ldr	r3, [pc, #140]	; (800e338 <xTaskResumeAll+0x128>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d302      	bcc.n	800e2ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e2b4:	4b21      	ldr	r3, [pc, #132]	; (800e33c <xTaskResumeAll+0x12c>)
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2ba:	4b1c      	ldr	r3, [pc, #112]	; (800e32c <xTaskResumeAll+0x11c>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1cb      	bne.n	800e25a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e2c8:	f000 fb6e 	bl	800e9a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e2cc:	4b1c      	ldr	r3, [pc, #112]	; (800e340 <xTaskResumeAll+0x130>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d010      	beq.n	800e2fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e2d8:	f000 f846 	bl	800e368 <xTaskIncrementTick>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d002      	beq.n	800e2e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e2e2:	4b16      	ldr	r3, [pc, #88]	; (800e33c <xTaskResumeAll+0x12c>)
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1f1      	bne.n	800e2d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e2f4:	4b12      	ldr	r3, [pc, #72]	; (800e340 <xTaskResumeAll+0x130>)
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e2fa:	4b10      	ldr	r3, [pc, #64]	; (800e33c <xTaskResumeAll+0x12c>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d009      	beq.n	800e316 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e302:	2301      	movs	r3, #1
 800e304:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e306:	4b0f      	ldr	r3, [pc, #60]	; (800e344 <xTaskResumeAll+0x134>)
 800e308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e30c:	601a      	str	r2, [r3, #0]
 800e30e:	f3bf 8f4f 	dsb	sy
 800e312:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e316:	f001 fbd7 	bl	800fac8 <vPortExitCritical>

	return xAlreadyYielded;
 800e31a:	68bb      	ldr	r3, [r7, #8]
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3710      	adds	r7, #16
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	200020bc 	.word	0x200020bc
 800e328:	20002094 	.word	0x20002094
 800e32c:	20002054 	.word	0x20002054
 800e330:	2000209c 	.word	0x2000209c
 800e334:	20001bc4 	.word	0x20001bc4
 800e338:	20001bc0 	.word	0x20001bc0
 800e33c:	200020a8 	.word	0x200020a8
 800e340:	200020a4 	.word	0x200020a4
 800e344:	e000ed04 	.word	0xe000ed04

0800e348 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e348:	b480      	push	{r7}
 800e34a:	b083      	sub	sp, #12
 800e34c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e34e:	4b05      	ldr	r3, [pc, #20]	; (800e364 <xTaskGetTickCount+0x1c>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e354:	687b      	ldr	r3, [r7, #4]
}
 800e356:	4618      	mov	r0, r3
 800e358:	370c      	adds	r7, #12
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	20002098 	.word	0x20002098

0800e368 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e36e:	2300      	movs	r3, #0
 800e370:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e372:	4b4e      	ldr	r3, [pc, #312]	; (800e4ac <xTaskIncrementTick+0x144>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	f040 8088 	bne.w	800e48c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e37c:	4b4c      	ldr	r3, [pc, #304]	; (800e4b0 <xTaskIncrementTick+0x148>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	3301      	adds	r3, #1
 800e382:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e384:	4a4a      	ldr	r2, [pc, #296]	; (800e4b0 <xTaskIncrementTick+0x148>)
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d11f      	bne.n	800e3d0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e390:	4b48      	ldr	r3, [pc, #288]	; (800e4b4 <xTaskIncrementTick+0x14c>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d009      	beq.n	800e3ae <xTaskIncrementTick+0x46>
 800e39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39e:	f383 8811 	msr	BASEPRI, r3
 800e3a2:	f3bf 8f6f 	isb	sy
 800e3a6:	f3bf 8f4f 	dsb	sy
 800e3aa:	603b      	str	r3, [r7, #0]
 800e3ac:	e7fe      	b.n	800e3ac <xTaskIncrementTick+0x44>
 800e3ae:	4b41      	ldr	r3, [pc, #260]	; (800e4b4 <xTaskIncrementTick+0x14c>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	60fb      	str	r3, [r7, #12]
 800e3b4:	4b40      	ldr	r3, [pc, #256]	; (800e4b8 <xTaskIncrementTick+0x150>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a3e      	ldr	r2, [pc, #248]	; (800e4b4 <xTaskIncrementTick+0x14c>)
 800e3ba:	6013      	str	r3, [r2, #0]
 800e3bc:	4a3e      	ldr	r2, [pc, #248]	; (800e4b8 <xTaskIncrementTick+0x150>)
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	6013      	str	r3, [r2, #0]
 800e3c2:	4b3e      	ldr	r3, [pc, #248]	; (800e4bc <xTaskIncrementTick+0x154>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	4a3c      	ldr	r2, [pc, #240]	; (800e4bc <xTaskIncrementTick+0x154>)
 800e3ca:	6013      	str	r3, [r2, #0]
 800e3cc:	f000 faec 	bl	800e9a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e3d0:	4b3b      	ldr	r3, [pc, #236]	; (800e4c0 <xTaskIncrementTick+0x158>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	693a      	ldr	r2, [r7, #16]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d349      	bcc.n	800e46e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3da:	4b36      	ldr	r3, [pc, #216]	; (800e4b4 <xTaskIncrementTick+0x14c>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d104      	bne.n	800e3ee <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3e4:	4b36      	ldr	r3, [pc, #216]	; (800e4c0 <xTaskIncrementTick+0x158>)
 800e3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ea:	601a      	str	r2, [r3, #0]
					break;
 800e3ec:	e03f      	b.n	800e46e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3ee:	4b31      	ldr	r3, [pc, #196]	; (800e4b4 <xTaskIncrementTick+0x14c>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e3fe:	693a      	ldr	r2, [r7, #16]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	429a      	cmp	r2, r3
 800e404:	d203      	bcs.n	800e40e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e406:	4a2e      	ldr	r2, [pc, #184]	; (800e4c0 <xTaskIncrementTick+0x158>)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e40c:	e02f      	b.n	800e46e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	3304      	adds	r3, #4
 800e412:	4618      	mov	r0, r3
 800e414:	f7fe fbe8 	bl	800cbe8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d004      	beq.n	800e42a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	3318      	adds	r3, #24
 800e424:	4618      	mov	r0, r3
 800e426:	f7fe fbdf 	bl	800cbe8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e42e:	4b25      	ldr	r3, [pc, #148]	; (800e4c4 <xTaskIncrementTick+0x15c>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	429a      	cmp	r2, r3
 800e434:	d903      	bls.n	800e43e <xTaskIncrementTick+0xd6>
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e43a:	4a22      	ldr	r2, [pc, #136]	; (800e4c4 <xTaskIncrementTick+0x15c>)
 800e43c:	6013      	str	r3, [r2, #0]
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e442:	4613      	mov	r3, r2
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	4413      	add	r3, r2
 800e448:	009b      	lsls	r3, r3, #2
 800e44a:	4a1f      	ldr	r2, [pc, #124]	; (800e4c8 <xTaskIncrementTick+0x160>)
 800e44c:	441a      	add	r2, r3
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	3304      	adds	r3, #4
 800e452:	4619      	mov	r1, r3
 800e454:	4610      	mov	r0, r2
 800e456:	f7fe fb6a 	bl	800cb2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e45e:	4b1b      	ldr	r3, [pc, #108]	; (800e4cc <xTaskIncrementTick+0x164>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e464:	429a      	cmp	r2, r3
 800e466:	d3b8      	bcc.n	800e3da <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e468:	2301      	movs	r3, #1
 800e46a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e46c:	e7b5      	b.n	800e3da <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e46e:	4b17      	ldr	r3, [pc, #92]	; (800e4cc <xTaskIncrementTick+0x164>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e474:	4914      	ldr	r1, [pc, #80]	; (800e4c8 <xTaskIncrementTick+0x160>)
 800e476:	4613      	mov	r3, r2
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	4413      	add	r3, r2
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	440b      	add	r3, r1
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b01      	cmp	r3, #1
 800e484:	d907      	bls.n	800e496 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e486:	2301      	movs	r3, #1
 800e488:	617b      	str	r3, [r7, #20]
 800e48a:	e004      	b.n	800e496 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e48c:	4b10      	ldr	r3, [pc, #64]	; (800e4d0 <xTaskIncrementTick+0x168>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	3301      	adds	r3, #1
 800e492:	4a0f      	ldr	r2, [pc, #60]	; (800e4d0 <xTaskIncrementTick+0x168>)
 800e494:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e496:	4b0f      	ldr	r3, [pc, #60]	; (800e4d4 <xTaskIncrementTick+0x16c>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d001      	beq.n	800e4a2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e4a2:	697b      	ldr	r3, [r7, #20]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3718      	adds	r7, #24
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	200020bc 	.word	0x200020bc
 800e4b0:	20002098 	.word	0x20002098
 800e4b4:	2000204c 	.word	0x2000204c
 800e4b8:	20002050 	.word	0x20002050
 800e4bc:	200020ac 	.word	0x200020ac
 800e4c0:	200020b4 	.word	0x200020b4
 800e4c4:	2000209c 	.word	0x2000209c
 800e4c8:	20001bc4 	.word	0x20001bc4
 800e4cc:	20001bc0 	.word	0x20001bc0
 800e4d0:	200020a4 	.word	0x200020a4
 800e4d4:	200020a8 	.word	0x200020a8

0800e4d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e4de:	4b27      	ldr	r3, [pc, #156]	; (800e57c <vTaskSwitchContext+0xa4>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d003      	beq.n	800e4ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e4e6:	4b26      	ldr	r3, [pc, #152]	; (800e580 <vTaskSwitchContext+0xa8>)
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e4ec:	e040      	b.n	800e570 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e4ee:	4b24      	ldr	r3, [pc, #144]	; (800e580 <vTaskSwitchContext+0xa8>)
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4f4:	4b23      	ldr	r3, [pc, #140]	; (800e584 <vTaskSwitchContext+0xac>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	60fb      	str	r3, [r7, #12]
 800e4fa:	e00f      	b.n	800e51c <vTaskSwitchContext+0x44>
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d109      	bne.n	800e516 <vTaskSwitchContext+0x3e>
 800e502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e506:	f383 8811 	msr	BASEPRI, r3
 800e50a:	f3bf 8f6f 	isb	sy
 800e50e:	f3bf 8f4f 	dsb	sy
 800e512:	607b      	str	r3, [r7, #4]
 800e514:	e7fe      	b.n	800e514 <vTaskSwitchContext+0x3c>
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	3b01      	subs	r3, #1
 800e51a:	60fb      	str	r3, [r7, #12]
 800e51c:	491a      	ldr	r1, [pc, #104]	; (800e588 <vTaskSwitchContext+0xb0>)
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	4613      	mov	r3, r2
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	4413      	add	r3, r2
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	440b      	add	r3, r1
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d0e5      	beq.n	800e4fc <vTaskSwitchContext+0x24>
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	4613      	mov	r3, r2
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	4413      	add	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	4a13      	ldr	r2, [pc, #76]	; (800e588 <vTaskSwitchContext+0xb0>)
 800e53c:	4413      	add	r3, r2
 800e53e:	60bb      	str	r3, [r7, #8]
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	685a      	ldr	r2, [r3, #4]
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	605a      	str	r2, [r3, #4]
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	685a      	ldr	r2, [r3, #4]
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	3308      	adds	r3, #8
 800e552:	429a      	cmp	r2, r3
 800e554:	d104      	bne.n	800e560 <vTaskSwitchContext+0x88>
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	685a      	ldr	r2, [r3, #4]
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	605a      	str	r2, [r3, #4]
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	4a09      	ldr	r2, [pc, #36]	; (800e58c <vTaskSwitchContext+0xb4>)
 800e568:	6013      	str	r3, [r2, #0]
 800e56a:	4a06      	ldr	r2, [pc, #24]	; (800e584 <vTaskSwitchContext+0xac>)
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	6013      	str	r3, [r2, #0]
}
 800e570:	bf00      	nop
 800e572:	3714      	adds	r7, #20
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr
 800e57c:	200020bc 	.word	0x200020bc
 800e580:	200020a8 	.word	0x200020a8
 800e584:	2000209c 	.word	0x2000209c
 800e588:	20001bc4 	.word	0x20001bc4
 800e58c:	20001bc0 	.word	0x20001bc0

0800e590 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d109      	bne.n	800e5b4 <vTaskPlaceOnEventList+0x24>
 800e5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a4:	f383 8811 	msr	BASEPRI, r3
 800e5a8:	f3bf 8f6f 	isb	sy
 800e5ac:	f3bf 8f4f 	dsb	sy
 800e5b0:	60fb      	str	r3, [r7, #12]
 800e5b2:	e7fe      	b.n	800e5b2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e5b4:	4b07      	ldr	r3, [pc, #28]	; (800e5d4 <vTaskPlaceOnEventList+0x44>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	3318      	adds	r3, #24
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f7fe fada 	bl	800cb76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5c2:	2101      	movs	r1, #1
 800e5c4:	6838      	ldr	r0, [r7, #0]
 800e5c6:	f000 fd8d 	bl	800f0e4 <prvAddCurrentTaskToDelayedList>
}
 800e5ca:	bf00      	nop
 800e5cc:	3710      	adds	r7, #16
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	20001bc0 	.word	0x20001bc0

0800e5d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b086      	sub	sp, #24
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d109      	bne.n	800e5fe <vTaskPlaceOnEventListRestricted+0x26>
 800e5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	617b      	str	r3, [r7, #20]
 800e5fc:	e7fe      	b.n	800e5fc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e5fe:	4b0a      	ldr	r3, [pc, #40]	; (800e628 <vTaskPlaceOnEventListRestricted+0x50>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	3318      	adds	r3, #24
 800e604:	4619      	mov	r1, r3
 800e606:	68f8      	ldr	r0, [r7, #12]
 800e608:	f7fe fa91 	bl	800cb2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d002      	beq.n	800e618 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800e612:	f04f 33ff 	mov.w	r3, #4294967295
 800e616:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e618:	6879      	ldr	r1, [r7, #4]
 800e61a:	68b8      	ldr	r0, [r7, #8]
 800e61c:	f000 fd62 	bl	800f0e4 <prvAddCurrentTaskToDelayedList>
	}
 800e620:	bf00      	nop
 800e622:	3718      	adds	r7, #24
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	20001bc0 	.word	0x20001bc0

0800e62c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b086      	sub	sp, #24
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d109      	bne.n	800e656 <xTaskRemoveFromEventList+0x2a>
 800e642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e646:	f383 8811 	msr	BASEPRI, r3
 800e64a:	f3bf 8f6f 	isb	sy
 800e64e:	f3bf 8f4f 	dsb	sy
 800e652:	60fb      	str	r3, [r7, #12]
 800e654:	e7fe      	b.n	800e654 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	3318      	adds	r3, #24
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fe fac4 	bl	800cbe8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e660:	4b1e      	ldr	r3, [pc, #120]	; (800e6dc <xTaskRemoveFromEventList+0xb0>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d11f      	bne.n	800e6a8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	3304      	adds	r3, #4
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7fe fabb 	bl	800cbe8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e676:	4b1a      	ldr	r3, [pc, #104]	; (800e6e0 <xTaskRemoveFromEventList+0xb4>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d903      	bls.n	800e686 <xTaskRemoveFromEventList+0x5a>
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e682:	4a17      	ldr	r2, [pc, #92]	; (800e6e0 <xTaskRemoveFromEventList+0xb4>)
 800e684:	6013      	str	r3, [r2, #0]
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e68a:	4613      	mov	r3, r2
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4413      	add	r3, r2
 800e690:	009b      	lsls	r3, r3, #2
 800e692:	4a14      	ldr	r2, [pc, #80]	; (800e6e4 <xTaskRemoveFromEventList+0xb8>)
 800e694:	441a      	add	r2, r3
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	3304      	adds	r3, #4
 800e69a:	4619      	mov	r1, r3
 800e69c:	4610      	mov	r0, r2
 800e69e:	f7fe fa46 	bl	800cb2e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800e6a2:	f000 f981 	bl	800e9a8 <prvResetNextTaskUnblockTime>
 800e6a6:	e005      	b.n	800e6b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	3318      	adds	r3, #24
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	480e      	ldr	r0, [pc, #56]	; (800e6e8 <xTaskRemoveFromEventList+0xbc>)
 800e6b0:	f7fe fa3d 	bl	800cb2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6b8:	4b0c      	ldr	r3, [pc, #48]	; (800e6ec <xTaskRemoveFromEventList+0xc0>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d905      	bls.n	800e6ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e6c6:	4b0a      	ldr	r3, [pc, #40]	; (800e6f0 <xTaskRemoveFromEventList+0xc4>)
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	601a      	str	r2, [r3, #0]
 800e6cc:	e001      	b.n	800e6d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e6d2:	697b      	ldr	r3, [r7, #20]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3718      	adds	r7, #24
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	200020bc 	.word	0x200020bc
 800e6e0:	2000209c 	.word	0x2000209c
 800e6e4:	20001bc4 	.word	0x20001bc4
 800e6e8:	20002054 	.word	0x20002054
 800e6ec:	20001bc0 	.word	0x20001bc0
 800e6f0:	200020a8 	.word	0x200020a8

0800e6f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e6fc:	4b06      	ldr	r3, [pc, #24]	; (800e718 <vTaskInternalSetTimeOutState+0x24>)
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e704:	4b05      	ldr	r3, [pc, #20]	; (800e71c <vTaskInternalSetTimeOutState+0x28>)
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	605a      	str	r2, [r3, #4]
}
 800e70c:	bf00      	nop
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr
 800e718:	200020ac 	.word	0x200020ac
 800e71c:	20002098 	.word	0x20002098

0800e720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b088      	sub	sp, #32
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d109      	bne.n	800e744 <xTaskCheckForTimeOut+0x24>
 800e730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e734:	f383 8811 	msr	BASEPRI, r3
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	613b      	str	r3, [r7, #16]
 800e742:	e7fe      	b.n	800e742 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d109      	bne.n	800e75e <xTaskCheckForTimeOut+0x3e>
 800e74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74e:	f383 8811 	msr	BASEPRI, r3
 800e752:	f3bf 8f6f 	isb	sy
 800e756:	f3bf 8f4f 	dsb	sy
 800e75a:	60fb      	str	r3, [r7, #12]
 800e75c:	e7fe      	b.n	800e75c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800e75e:	f001 f985 	bl	800fa6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e762:	4b1d      	ldr	r3, [pc, #116]	; (800e7d8 <xTaskCheckForTimeOut+0xb8>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	69ba      	ldr	r2, [r7, #24]
 800e76e:	1ad3      	subs	r3, r2, r3
 800e770:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e77a:	d102      	bne.n	800e782 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e77c:	2300      	movs	r3, #0
 800e77e:	61fb      	str	r3, [r7, #28]
 800e780:	e023      	b.n	800e7ca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	4b15      	ldr	r3, [pc, #84]	; (800e7dc <xTaskCheckForTimeOut+0xbc>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d007      	beq.n	800e79e <xTaskCheckForTimeOut+0x7e>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	69ba      	ldr	r2, [r7, #24]
 800e794:	429a      	cmp	r2, r3
 800e796:	d302      	bcc.n	800e79e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e798:	2301      	movs	r3, #1
 800e79a:	61fb      	str	r3, [r7, #28]
 800e79c:	e015      	b.n	800e7ca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	697a      	ldr	r2, [r7, #20]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d20b      	bcs.n	800e7c0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	1ad2      	subs	r2, r2, r3
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f7ff ff9d 	bl	800e6f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	61fb      	str	r3, [r7, #28]
 800e7be:	e004      	b.n	800e7ca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e7ca:	f001 f97d 	bl	800fac8 <vPortExitCritical>

	return xReturn;
 800e7ce:	69fb      	ldr	r3, [r7, #28]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3720      	adds	r7, #32
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	20002098 	.word	0x20002098
 800e7dc:	200020ac 	.word	0x200020ac

0800e7e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e7e4:	4b03      	ldr	r3, [pc, #12]	; (800e7f4 <vTaskMissedYield+0x14>)
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	601a      	str	r2, [r3, #0]
}
 800e7ea:	bf00      	nop
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr
 800e7f4:	200020a8 	.word	0x200020a8

0800e7f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e800:	f000 f878 	bl	800e8f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e804:	4b17      	ldr	r3, [pc, #92]	; (800e864 <prvIdleTask+0x6c>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d907      	bls.n	800e81c <prvIdleTask+0x24>
			{
				taskYIELD();
 800e80c:	4b16      	ldr	r3, [pc, #88]	; (800e868 <prvIdleTask+0x70>)
 800e80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e812:	601a      	str	r2, [r3, #0]
 800e814:	f3bf 8f4f 	dsb	sy
 800e818:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800e81c:	f7ff fcc0 	bl	800e1a0 <prvGetExpectedIdleTime>
 800e820:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2b01      	cmp	r3, #1
 800e826:	d9eb      	bls.n	800e800 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800e828:	f7ff fcac 	bl	800e184 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800e82c:	4b0f      	ldr	r3, [pc, #60]	; (800e86c <prvIdleTask+0x74>)
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	4b0f      	ldr	r3, [pc, #60]	; (800e870 <prvIdleTask+0x78>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	429a      	cmp	r2, r3
 800e836:	d209      	bcs.n	800e84c <prvIdleTask+0x54>
 800e838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83c:	f383 8811 	msr	BASEPRI, r3
 800e840:	f3bf 8f6f 	isb	sy
 800e844:	f3bf 8f4f 	dsb	sy
 800e848:	60bb      	str	r3, [r7, #8]
 800e84a:	e7fe      	b.n	800e84a <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800e84c:	f7ff fca8 	bl	800e1a0 <prvGetExpectedIdleTime>
 800e850:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2b01      	cmp	r3, #1
 800e856:	d902      	bls.n	800e85e <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	f7f1 ff5b 	bl	8000714 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800e85e:	f7ff fcd7 	bl	800e210 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800e862:	e7cd      	b.n	800e800 <prvIdleTask+0x8>
 800e864:	20001bc4 	.word	0x20001bc4
 800e868:	e000ed04 	.word	0xe000ed04
 800e86c:	200020b4 	.word	0x200020b4
 800e870:	20002098 	.word	0x20002098

0800e874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e87a:	2300      	movs	r3, #0
 800e87c:	607b      	str	r3, [r7, #4]
 800e87e:	e00c      	b.n	800e89a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	4613      	mov	r3, r2
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	4413      	add	r3, r2
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	4a12      	ldr	r2, [pc, #72]	; (800e8d4 <prvInitialiseTaskLists+0x60>)
 800e88c:	4413      	add	r3, r2
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fe f920 	bl	800cad4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	3301      	adds	r3, #1
 800e898:	607b      	str	r3, [r7, #4]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2b37      	cmp	r3, #55	; 0x37
 800e89e:	d9ef      	bls.n	800e880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e8a0:	480d      	ldr	r0, [pc, #52]	; (800e8d8 <prvInitialiseTaskLists+0x64>)
 800e8a2:	f7fe f917 	bl	800cad4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e8a6:	480d      	ldr	r0, [pc, #52]	; (800e8dc <prvInitialiseTaskLists+0x68>)
 800e8a8:	f7fe f914 	bl	800cad4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e8ac:	480c      	ldr	r0, [pc, #48]	; (800e8e0 <prvInitialiseTaskLists+0x6c>)
 800e8ae:	f7fe f911 	bl	800cad4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e8b2:	480c      	ldr	r0, [pc, #48]	; (800e8e4 <prvInitialiseTaskLists+0x70>)
 800e8b4:	f7fe f90e 	bl	800cad4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e8b8:	480b      	ldr	r0, [pc, #44]	; (800e8e8 <prvInitialiseTaskLists+0x74>)
 800e8ba:	f7fe f90b 	bl	800cad4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e8be:	4b0b      	ldr	r3, [pc, #44]	; (800e8ec <prvInitialiseTaskLists+0x78>)
 800e8c0:	4a05      	ldr	r2, [pc, #20]	; (800e8d8 <prvInitialiseTaskLists+0x64>)
 800e8c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e8c4:	4b0a      	ldr	r3, [pc, #40]	; (800e8f0 <prvInitialiseTaskLists+0x7c>)
 800e8c6:	4a05      	ldr	r2, [pc, #20]	; (800e8dc <prvInitialiseTaskLists+0x68>)
 800e8c8:	601a      	str	r2, [r3, #0]
}
 800e8ca:	bf00      	nop
 800e8cc:	3708      	adds	r7, #8
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	20001bc4 	.word	0x20001bc4
 800e8d8:	20002024 	.word	0x20002024
 800e8dc:	20002038 	.word	0x20002038
 800e8e0:	20002054 	.word	0x20002054
 800e8e4:	20002068 	.word	0x20002068
 800e8e8:	20002080 	.word	0x20002080
 800e8ec:	2000204c 	.word	0x2000204c
 800e8f0:	20002050 	.word	0x20002050

0800e8f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e8fa:	e019      	b.n	800e930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e8fc:	f001 f8b6 	bl	800fa6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e900:	4b0f      	ldr	r3, [pc, #60]	; (800e940 <prvCheckTasksWaitingTermination+0x4c>)
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	68db      	ldr	r3, [r3, #12]
 800e906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3304      	adds	r3, #4
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fe f96b 	bl	800cbe8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e912:	4b0c      	ldr	r3, [pc, #48]	; (800e944 <prvCheckTasksWaitingTermination+0x50>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	3b01      	subs	r3, #1
 800e918:	4a0a      	ldr	r2, [pc, #40]	; (800e944 <prvCheckTasksWaitingTermination+0x50>)
 800e91a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e91c:	4b0a      	ldr	r3, [pc, #40]	; (800e948 <prvCheckTasksWaitingTermination+0x54>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	3b01      	subs	r3, #1
 800e922:	4a09      	ldr	r2, [pc, #36]	; (800e948 <prvCheckTasksWaitingTermination+0x54>)
 800e924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e926:	f001 f8cf 	bl	800fac8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 f80e 	bl	800e94c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e930:	4b05      	ldr	r3, [pc, #20]	; (800e948 <prvCheckTasksWaitingTermination+0x54>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d1e1      	bne.n	800e8fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e938:	bf00      	nop
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	20002068 	.word	0x20002068
 800e944:	20002094 	.word	0x20002094
 800e948:	2000207c 	.word	0x2000207c

0800e94c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d108      	bne.n	800e970 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e962:	4618      	mov	r0, r3
 800e964:	f001 fa5e 	bl	800fe24 <vPortFree>
				vPortFree( pxTCB );
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f001 fa5b 	bl	800fe24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e96e:	e017      	b.n	800e9a0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e976:	2b01      	cmp	r3, #1
 800e978:	d103      	bne.n	800e982 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f001 fa52 	bl	800fe24 <vPortFree>
	}
 800e980:	e00e      	b.n	800e9a0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e988:	2b02      	cmp	r3, #2
 800e98a:	d009      	beq.n	800e9a0 <prvDeleteTCB+0x54>
 800e98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e990:	f383 8811 	msr	BASEPRI, r3
 800e994:	f3bf 8f6f 	isb	sy
 800e998:	f3bf 8f4f 	dsb	sy
 800e99c:	60fb      	str	r3, [r7, #12]
 800e99e:	e7fe      	b.n	800e99e <prvDeleteTCB+0x52>
	}
 800e9a0:	bf00      	nop
 800e9a2:	3710      	adds	r7, #16
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9ae:	4b0c      	ldr	r3, [pc, #48]	; (800e9e0 <prvResetNextTaskUnblockTime+0x38>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d104      	bne.n	800e9c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e9b8:	4b0a      	ldr	r3, [pc, #40]	; (800e9e4 <prvResetNextTaskUnblockTime+0x3c>)
 800e9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e9be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e9c0:	e008      	b.n	800e9d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9c2:	4b07      	ldr	r3, [pc, #28]	; (800e9e0 <prvResetNextTaskUnblockTime+0x38>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	4a04      	ldr	r2, [pc, #16]	; (800e9e4 <prvResetNextTaskUnblockTime+0x3c>)
 800e9d2:	6013      	str	r3, [r2, #0]
}
 800e9d4:	bf00      	nop
 800e9d6:	370c      	adds	r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr
 800e9e0:	2000204c 	.word	0x2000204c
 800e9e4:	200020b4 	.word	0x200020b4

0800e9e8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e9ee:	4b05      	ldr	r3, [pc, #20]	; (800ea04 <xTaskGetCurrentTaskHandle+0x1c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e9f4:	687b      	ldr	r3, [r7, #4]
	}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	370c      	adds	r7, #12
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
 800ea04:	20001bc0 	.word	0x20001bc0

0800ea08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea0e:	4b0b      	ldr	r3, [pc, #44]	; (800ea3c <xTaskGetSchedulerState+0x34>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d102      	bne.n	800ea1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea16:	2301      	movs	r3, #1
 800ea18:	607b      	str	r3, [r7, #4]
 800ea1a:	e008      	b.n	800ea2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea1c:	4b08      	ldr	r3, [pc, #32]	; (800ea40 <xTaskGetSchedulerState+0x38>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d102      	bne.n	800ea2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea24:	2302      	movs	r3, #2
 800ea26:	607b      	str	r3, [r7, #4]
 800ea28:	e001      	b.n	800ea2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea2e:	687b      	ldr	r3, [r7, #4]
	}
 800ea30:	4618      	mov	r0, r3
 800ea32:	370c      	adds	r7, #12
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr
 800ea3c:	200020a0 	.word	0x200020a0
 800ea40:	200020bc 	.word	0x200020bc

0800ea44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ea50:	2300      	movs	r3, #0
 800ea52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d051      	beq.n	800eafe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea5e:	4b2a      	ldr	r3, [pc, #168]	; (800eb08 <xTaskPriorityInherit+0xc4>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d241      	bcs.n	800eaec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	699b      	ldr	r3, [r3, #24]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	db06      	blt.n	800ea7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea70:	4b25      	ldr	r3, [pc, #148]	; (800eb08 <xTaskPriorityInherit+0xc4>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	6959      	ldr	r1, [r3, #20]
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea86:	4613      	mov	r3, r2
 800ea88:	009b      	lsls	r3, r3, #2
 800ea8a:	4413      	add	r3, r2
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	4a1f      	ldr	r2, [pc, #124]	; (800eb0c <xTaskPriorityInherit+0xc8>)
 800ea90:	4413      	add	r3, r2
 800ea92:	4299      	cmp	r1, r3
 800ea94:	d122      	bne.n	800eadc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	3304      	adds	r3, #4
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7fe f8a4 	bl	800cbe8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eaa0:	4b19      	ldr	r3, [pc, #100]	; (800eb08 <xTaskPriorityInherit+0xc4>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaae:	4b18      	ldr	r3, [pc, #96]	; (800eb10 <xTaskPriorityInherit+0xcc>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d903      	bls.n	800eabe <xTaskPriorityInherit+0x7a>
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaba:	4a15      	ldr	r2, [pc, #84]	; (800eb10 <xTaskPriorityInherit+0xcc>)
 800eabc:	6013      	str	r3, [r2, #0]
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eac2:	4613      	mov	r3, r2
 800eac4:	009b      	lsls	r3, r3, #2
 800eac6:	4413      	add	r3, r2
 800eac8:	009b      	lsls	r3, r3, #2
 800eaca:	4a10      	ldr	r2, [pc, #64]	; (800eb0c <xTaskPriorityInherit+0xc8>)
 800eacc:	441a      	add	r2, r3
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	3304      	adds	r3, #4
 800ead2:	4619      	mov	r1, r3
 800ead4:	4610      	mov	r0, r2
 800ead6:	f7fe f82a 	bl	800cb2e <vListInsertEnd>
 800eada:	e004      	b.n	800eae6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eadc:	4b0a      	ldr	r3, [pc, #40]	; (800eb08 <xTaskPriorityInherit+0xc4>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eae6:	2301      	movs	r3, #1
 800eae8:	60fb      	str	r3, [r7, #12]
 800eaea:	e008      	b.n	800eafe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eaf0:	4b05      	ldr	r3, [pc, #20]	; (800eb08 <xTaskPriorityInherit+0xc4>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d201      	bcs.n	800eafe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eafa:	2301      	movs	r3, #1
 800eafc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eafe:	68fb      	ldr	r3, [r7, #12]
	}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	20001bc0 	.word	0x20001bc0
 800eb0c:	20001bc4 	.word	0x20001bc4
 800eb10:	2000209c 	.word	0x2000209c

0800eb14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b086      	sub	sp, #24
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb20:	2300      	movs	r3, #0
 800eb22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d054      	beq.n	800ebd4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb2a:	4b2d      	ldr	r3, [pc, #180]	; (800ebe0 <xTaskPriorityDisinherit+0xcc>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	693a      	ldr	r2, [r7, #16]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d009      	beq.n	800eb48 <xTaskPriorityDisinherit+0x34>
 800eb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb38:	f383 8811 	msr	BASEPRI, r3
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	60fb      	str	r3, [r7, #12]
 800eb46:	e7fe      	b.n	800eb46 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d109      	bne.n	800eb64 <xTaskPriorityDisinherit+0x50>
 800eb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb54:	f383 8811 	msr	BASEPRI, r3
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	60bb      	str	r3, [r7, #8]
 800eb62:	e7fe      	b.n	800eb62 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb68:	1e5a      	subs	r2, r3, #1
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d02c      	beq.n	800ebd4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d128      	bne.n	800ebd4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	3304      	adds	r3, #4
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fe f82e 	bl	800cbe8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eba4:	4b0f      	ldr	r3, [pc, #60]	; (800ebe4 <xTaskPriorityDisinherit+0xd0>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d903      	bls.n	800ebb4 <xTaskPriorityDisinherit+0xa0>
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb0:	4a0c      	ldr	r2, [pc, #48]	; (800ebe4 <xTaskPriorityDisinherit+0xd0>)
 800ebb2:	6013      	str	r3, [r2, #0]
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebb8:	4613      	mov	r3, r2
 800ebba:	009b      	lsls	r3, r3, #2
 800ebbc:	4413      	add	r3, r2
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	4a09      	ldr	r2, [pc, #36]	; (800ebe8 <xTaskPriorityDisinherit+0xd4>)
 800ebc2:	441a      	add	r2, r3
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	3304      	adds	r3, #4
 800ebc8:	4619      	mov	r1, r3
 800ebca:	4610      	mov	r0, r2
 800ebcc:	f7fd ffaf 	bl	800cb2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ebd4:	697b      	ldr	r3, [r7, #20]
	}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3718      	adds	r7, #24
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	20001bc0 	.word	0x20001bc0
 800ebe4:	2000209c 	.word	0x2000209c
 800ebe8:	20001bc4 	.word	0x20001bc4

0800ebec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b088      	sub	sp, #32
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d068      	beq.n	800ecd6 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d109      	bne.n	800ec20 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800ec0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec10:	f383 8811 	msr	BASEPRI, r3
 800ec14:	f3bf 8f6f 	isb	sy
 800ec18:	f3bf 8f4f 	dsb	sy
 800ec1c:	60fb      	str	r3, [r7, #12]
 800ec1e:	e7fe      	b.n	800ec1e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec24:	683a      	ldr	r2, [r7, #0]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d902      	bls.n	800ec30 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	61fb      	str	r3, [r7, #28]
 800ec2e:	e002      	b.n	800ec36 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ec30:	69bb      	ldr	r3, [r7, #24]
 800ec32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec34:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ec36:	69bb      	ldr	r3, [r7, #24]
 800ec38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3a:	69fa      	ldr	r2, [r7, #28]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d04a      	beq.n	800ecd6 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec44:	697a      	ldr	r2, [r7, #20]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d145      	bne.n	800ecd6 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ec4a:	4b25      	ldr	r3, [pc, #148]	; (800ece0 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	69ba      	ldr	r2, [r7, #24]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d109      	bne.n	800ec68 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800ec54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	60bb      	str	r3, [r7, #8]
 800ec66:	e7fe      	b.n	800ec66 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ec68:	69bb      	ldr	r3, [r7, #24]
 800ec6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	69fa      	ldr	r2, [r7, #28]
 800ec72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec74:	69bb      	ldr	r3, [r7, #24]
 800ec76:	699b      	ldr	r3, [r3, #24]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	db04      	blt.n	800ec86 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	6959      	ldr	r1, [r3, #20]
 800ec8a:	693a      	ldr	r2, [r7, #16]
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	009b      	lsls	r3, r3, #2
 800ec90:	4413      	add	r3, r2
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	4a13      	ldr	r2, [pc, #76]	; (800ece4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ec96:	4413      	add	r3, r2
 800ec98:	4299      	cmp	r1, r3
 800ec9a:	d11c      	bne.n	800ecd6 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	3304      	adds	r3, #4
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fd ffa1 	bl	800cbe8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecaa:	4b0f      	ldr	r3, [pc, #60]	; (800ece8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d903      	bls.n	800ecba <vTaskPriorityDisinheritAfterTimeout+0xce>
 800ecb2:	69bb      	ldr	r3, [r7, #24]
 800ecb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb6:	4a0c      	ldr	r2, [pc, #48]	; (800ece8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ecb8:	6013      	str	r3, [r2, #0]
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecbe:	4613      	mov	r3, r2
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	4413      	add	r3, r2
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	4a07      	ldr	r2, [pc, #28]	; (800ece4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ecc8:	441a      	add	r2, r3
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	3304      	adds	r3, #4
 800ecce:	4619      	mov	r1, r3
 800ecd0:	4610      	mov	r0, r2
 800ecd2:	f7fd ff2c 	bl	800cb2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecd6:	bf00      	nop
 800ecd8:	3720      	adds	r7, #32
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	20001bc0 	.word	0x20001bc0
 800ece4:	20001bc4 	.word	0x20001bc4
 800ece8:	2000209c 	.word	0x2000209c

0800ecec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ecec:	b480      	push	{r7}
 800ecee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ecf0:	4b07      	ldr	r3, [pc, #28]	; (800ed10 <pvTaskIncrementMutexHeldCount+0x24>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d004      	beq.n	800ed02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ecf8:	4b05      	ldr	r3, [pc, #20]	; (800ed10 <pvTaskIncrementMutexHeldCount+0x24>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecfe:	3201      	adds	r2, #1
 800ed00:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ed02:	4b03      	ldr	r3, [pc, #12]	; (800ed10 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed04:	681b      	ldr	r3, [r3, #0]
	}
 800ed06:	4618      	mov	r0, r3
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr
 800ed10:	20001bc0 	.word	0x20001bc0

0800ed14 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	607a      	str	r2, [r7, #4]
 800ed20:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ed22:	f000 fea3 	bl	800fa6c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ed26:	4b26      	ldr	r3, [pc, #152]	; (800edc0 <xTaskNotifyWait+0xac>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	2b02      	cmp	r3, #2
 800ed32:	d01a      	beq.n	800ed6a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ed34:	4b22      	ldr	r3, [pc, #136]	; (800edc0 <xTaskNotifyWait+0xac>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ed3a:	68fa      	ldr	r2, [r7, #12]
 800ed3c:	43d2      	mvns	r2, r2
 800ed3e:	400a      	ands	r2, r1
 800ed40:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ed42:	4b1f      	ldr	r3, [pc, #124]	; (800edc0 <xTaskNotifyWait+0xac>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2201      	movs	r2, #1
 800ed48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d00b      	beq.n	800ed6a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ed52:	2101      	movs	r1, #1
 800ed54:	6838      	ldr	r0, [r7, #0]
 800ed56:	f000 f9c5 	bl	800f0e4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ed5a:	4b1a      	ldr	r3, [pc, #104]	; (800edc4 <xTaskNotifyWait+0xb0>)
 800ed5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed60:	601a      	str	r2, [r3, #0]
 800ed62:	f3bf 8f4f 	dsb	sy
 800ed66:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ed6a:	f000 fead 	bl	800fac8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ed6e:	f000 fe7d 	bl	800fa6c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d004      	beq.n	800ed82 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ed78:	4b11      	ldr	r3, [pc, #68]	; (800edc0 <xTaskNotifyWait+0xac>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ed82:	4b0f      	ldr	r3, [pc, #60]	; (800edc0 <xTaskNotifyWait+0xac>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	2b02      	cmp	r3, #2
 800ed8e:	d002      	beq.n	800ed96 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ed90:	2300      	movs	r3, #0
 800ed92:	617b      	str	r3, [r7, #20]
 800ed94:	e008      	b.n	800eda8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ed96:	4b0a      	ldr	r3, [pc, #40]	; (800edc0 <xTaskNotifyWait+0xac>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ed9c:	68ba      	ldr	r2, [r7, #8]
 800ed9e:	43d2      	mvns	r2, r2
 800eda0:	400a      	ands	r2, r1
 800eda2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800eda4:	2301      	movs	r3, #1
 800eda6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eda8:	4b05      	ldr	r3, [pc, #20]	; (800edc0 <xTaskNotifyWait+0xac>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	2200      	movs	r2, #0
 800edae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800edb2:	f000 fe89 	bl	800fac8 <vPortExitCritical>

		return xReturn;
 800edb6:	697b      	ldr	r3, [r7, #20]
	}
 800edb8:	4618      	mov	r0, r3
 800edba:	3718      	adds	r7, #24
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	20001bc0 	.word	0x20001bc0
 800edc4:	e000ed04 	.word	0xe000ed04

0800edc8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b08a      	sub	sp, #40	; 0x28
 800edcc:	af00      	add	r7, sp, #0
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	603b      	str	r3, [r7, #0]
 800edd4:	4613      	mov	r3, r2
 800edd6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800edd8:	2301      	movs	r3, #1
 800edda:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d109      	bne.n	800edf6 <xTaskGenericNotify+0x2e>
 800ede2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede6:	f383 8811 	msr	BASEPRI, r3
 800edea:	f3bf 8f6f 	isb	sy
 800edee:	f3bf 8f4f 	dsb	sy
 800edf2:	61bb      	str	r3, [r7, #24]
 800edf4:	e7fe      	b.n	800edf4 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800edfa:	f000 fe37 	bl	800fa6c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d003      	beq.n	800ee0c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ee04:	6a3b      	ldr	r3, [r7, #32]
 800ee06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ee0c:	6a3b      	ldr	r3, [r7, #32]
 800ee0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ee12:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ee14:	6a3b      	ldr	r3, [r7, #32]
 800ee16:	2202      	movs	r2, #2
 800ee18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800ee1c:	79fb      	ldrb	r3, [r7, #7]
 800ee1e:	2b04      	cmp	r3, #4
 800ee20:	d827      	bhi.n	800ee72 <xTaskGenericNotify+0xaa>
 800ee22:	a201      	add	r2, pc, #4	; (adr r2, 800ee28 <xTaskGenericNotify+0x60>)
 800ee24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee28:	0800ee91 	.word	0x0800ee91
 800ee2c:	0800ee3d 	.word	0x0800ee3d
 800ee30:	0800ee4b 	.word	0x0800ee4b
 800ee34:	0800ee57 	.word	0x0800ee57
 800ee38:	0800ee5f 	.word	0x0800ee5f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ee3c:	6a3b      	ldr	r3, [r7, #32]
 800ee3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	431a      	orrs	r2, r3
 800ee44:	6a3b      	ldr	r3, [r7, #32]
 800ee46:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ee48:	e025      	b.n	800ee96 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ee4a:	6a3b      	ldr	r3, [r7, #32]
 800ee4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee4e:	1c5a      	adds	r2, r3, #1
 800ee50:	6a3b      	ldr	r3, [r7, #32]
 800ee52:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ee54:	e01f      	b.n	800ee96 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ee56:	6a3b      	ldr	r3, [r7, #32]
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ee5c:	e01b      	b.n	800ee96 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ee5e:	7ffb      	ldrb	r3, [r7, #31]
 800ee60:	2b02      	cmp	r3, #2
 800ee62:	d003      	beq.n	800ee6c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ee64:	6a3b      	ldr	r3, [r7, #32]
 800ee66:	68ba      	ldr	r2, [r7, #8]
 800ee68:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ee6a:	e014      	b.n	800ee96 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ee70:	e011      	b.n	800ee96 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ee72:	6a3b      	ldr	r3, [r7, #32]
 800ee74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee7a:	d00b      	beq.n	800ee94 <xTaskGenericNotify+0xcc>
 800ee7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee80:	f383 8811 	msr	BASEPRI, r3
 800ee84:	f3bf 8f6f 	isb	sy
 800ee88:	f3bf 8f4f 	dsb	sy
 800ee8c:	617b      	str	r3, [r7, #20]
 800ee8e:	e7fe      	b.n	800ee8e <xTaskGenericNotify+0xc6>
					break;
 800ee90:	bf00      	nop
 800ee92:	e000      	b.n	800ee96 <xTaskGenericNotify+0xce>

					break;
 800ee94:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ee96:	7ffb      	ldrb	r3, [r7, #31]
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d13b      	bne.n	800ef14 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee9c:	6a3b      	ldr	r3, [r7, #32]
 800ee9e:	3304      	adds	r3, #4
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7fd fea1 	bl	800cbe8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800eea6:	6a3b      	ldr	r3, [r7, #32]
 800eea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeaa:	4b1e      	ldr	r3, [pc, #120]	; (800ef24 <xTaskGenericNotify+0x15c>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d903      	bls.n	800eeba <xTaskGenericNotify+0xf2>
 800eeb2:	6a3b      	ldr	r3, [r7, #32]
 800eeb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb6:	4a1b      	ldr	r2, [pc, #108]	; (800ef24 <xTaskGenericNotify+0x15c>)
 800eeb8:	6013      	str	r3, [r2, #0]
 800eeba:	6a3b      	ldr	r3, [r7, #32]
 800eebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eebe:	4613      	mov	r3, r2
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	4413      	add	r3, r2
 800eec4:	009b      	lsls	r3, r3, #2
 800eec6:	4a18      	ldr	r2, [pc, #96]	; (800ef28 <xTaskGenericNotify+0x160>)
 800eec8:	441a      	add	r2, r3
 800eeca:	6a3b      	ldr	r3, [r7, #32]
 800eecc:	3304      	adds	r3, #4
 800eece:	4619      	mov	r1, r3
 800eed0:	4610      	mov	r0, r2
 800eed2:	f7fd fe2c 	bl	800cb2e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800eed6:	6a3b      	ldr	r3, [r7, #32]
 800eed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d009      	beq.n	800eef2 <xTaskGenericNotify+0x12a>
 800eede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee2:	f383 8811 	msr	BASEPRI, r3
 800eee6:	f3bf 8f6f 	isb	sy
 800eeea:	f3bf 8f4f 	dsb	sy
 800eeee:	613b      	str	r3, [r7, #16]
 800eef0:	e7fe      	b.n	800eef0 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800eef2:	f7ff fd59 	bl	800e9a8 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eef6:	6a3b      	ldr	r3, [r7, #32]
 800eef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eefa:	4b0c      	ldr	r3, [pc, #48]	; (800ef2c <xTaskGenericNotify+0x164>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d907      	bls.n	800ef14 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ef04:	4b0a      	ldr	r3, [pc, #40]	; (800ef30 <xTaskGenericNotify+0x168>)
 800ef06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef0a:	601a      	str	r2, [r3, #0]
 800ef0c:	f3bf 8f4f 	dsb	sy
 800ef10:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ef14:	f000 fdd8 	bl	800fac8 <vPortExitCritical>

		return xReturn;
 800ef18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3728      	adds	r7, #40	; 0x28
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	2000209c 	.word	0x2000209c
 800ef28:	20001bc4 	.word	0x20001bc4
 800ef2c:	20001bc0 	.word	0x20001bc0
 800ef30:	e000ed04 	.word	0xe000ed04

0800ef34 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b08e      	sub	sp, #56	; 0x38
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	603b      	str	r3, [r7, #0]
 800ef40:	4613      	mov	r3, r2
 800ef42:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ef44:	2301      	movs	r3, #1
 800ef46:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d109      	bne.n	800ef62 <xTaskGenericNotifyFromISR+0x2e>
 800ef4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef52:	f383 8811 	msr	BASEPRI, r3
 800ef56:	f3bf 8f6f 	isb	sy
 800ef5a:	f3bf 8f4f 	dsb	sy
 800ef5e:	627b      	str	r3, [r7, #36]	; 0x24
 800ef60:	e7fe      	b.n	800ef60 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef62:	f000 fe5f 	bl	800fc24 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ef6a:	f3ef 8211 	mrs	r2, BASEPRI
 800ef6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	623a      	str	r2, [r7, #32]
 800ef80:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ef82:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef84:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d003      	beq.n	800ef94 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ef8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ef94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ef9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ef9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa0:	2202      	movs	r2, #2
 800efa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800efa6:	79fb      	ldrb	r3, [r7, #7]
 800efa8:	2b04      	cmp	r3, #4
 800efaa:	d829      	bhi.n	800f000 <xTaskGenericNotifyFromISR+0xcc>
 800efac:	a201      	add	r2, pc, #4	; (adr r2, 800efb4 <xTaskGenericNotifyFromISR+0x80>)
 800efae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb2:	bf00      	nop
 800efb4:	0800f01f 	.word	0x0800f01f
 800efb8:	0800efc9 	.word	0x0800efc9
 800efbc:	0800efd7 	.word	0x0800efd7
 800efc0:	0800efe3 	.word	0x0800efe3
 800efc4:	0800efeb 	.word	0x0800efeb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800efc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	431a      	orrs	r2, r3
 800efd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800efd4:	e026      	b.n	800f024 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800efd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efda:	1c5a      	adds	r2, r3, #1
 800efdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efde:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800efe0:	e020      	b.n	800f024 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800efe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800efe8:	e01c      	b.n	800f024 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800efea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800efee:	2b02      	cmp	r3, #2
 800eff0:	d003      	beq.n	800effa <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff4:	68ba      	ldr	r2, [r7, #8]
 800eff6:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800eff8:	e014      	b.n	800f024 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800effa:	2300      	movs	r3, #0
 800effc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800effe:	e011      	b.n	800f024 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f008:	d00b      	beq.n	800f022 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800f00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00e:	f383 8811 	msr	BASEPRI, r3
 800f012:	f3bf 8f6f 	isb	sy
 800f016:	f3bf 8f4f 	dsb	sy
 800f01a:	61bb      	str	r3, [r7, #24]
 800f01c:	e7fe      	b.n	800f01c <xTaskGenericNotifyFromISR+0xe8>
					break;
 800f01e:	bf00      	nop
 800f020:	e000      	b.n	800f024 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800f022:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f024:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d145      	bne.n	800f0b8 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f030:	2b00      	cmp	r3, #0
 800f032:	d009      	beq.n	800f048 <xTaskGenericNotifyFromISR+0x114>
 800f034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f038:	f383 8811 	msr	BASEPRI, r3
 800f03c:	f3bf 8f6f 	isb	sy
 800f040:	f3bf 8f4f 	dsb	sy
 800f044:	617b      	str	r3, [r7, #20]
 800f046:	e7fe      	b.n	800f046 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f048:	4b20      	ldr	r3, [pc, #128]	; (800f0cc <xTaskGenericNotifyFromISR+0x198>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d11d      	bne.n	800f08c <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f052:	3304      	adds	r3, #4
 800f054:	4618      	mov	r0, r3
 800f056:	f7fd fdc7 	bl	800cbe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f05e:	4b1c      	ldr	r3, [pc, #112]	; (800f0d0 <xTaskGenericNotifyFromISR+0x19c>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	429a      	cmp	r2, r3
 800f064:	d903      	bls.n	800f06e <xTaskGenericNotifyFromISR+0x13a>
 800f066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f06a:	4a19      	ldr	r2, [pc, #100]	; (800f0d0 <xTaskGenericNotifyFromISR+0x19c>)
 800f06c:	6013      	str	r3, [r2, #0]
 800f06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f072:	4613      	mov	r3, r2
 800f074:	009b      	lsls	r3, r3, #2
 800f076:	4413      	add	r3, r2
 800f078:	009b      	lsls	r3, r3, #2
 800f07a:	4a16      	ldr	r2, [pc, #88]	; (800f0d4 <xTaskGenericNotifyFromISR+0x1a0>)
 800f07c:	441a      	add	r2, r3
 800f07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f080:	3304      	adds	r3, #4
 800f082:	4619      	mov	r1, r3
 800f084:	4610      	mov	r0, r2
 800f086:	f7fd fd52 	bl	800cb2e <vListInsertEnd>
 800f08a:	e005      	b.n	800f098 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08e:	3318      	adds	r3, #24
 800f090:	4619      	mov	r1, r3
 800f092:	4811      	ldr	r0, [pc, #68]	; (800f0d8 <xTaskGenericNotifyFromISR+0x1a4>)
 800f094:	f7fd fd4b 	bl	800cb2e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f09c:	4b0f      	ldr	r3, [pc, #60]	; (800f0dc <xTaskGenericNotifyFromISR+0x1a8>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d908      	bls.n	800f0b8 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d002      	beq.n	800f0b2 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f0b2:	4b0b      	ldr	r3, [pc, #44]	; (800f0e0 <xTaskGenericNotifyFromISR+0x1ac>)
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	601a      	str	r2, [r3, #0]
 800f0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ba:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3738      	adds	r7, #56	; 0x38
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}
 800f0cc:	200020bc 	.word	0x200020bc
 800f0d0:	2000209c 	.word	0x2000209c
 800f0d4:	20001bc4 	.word	0x20001bc4
 800f0d8:	20002054 	.word	0x20002054
 800f0dc:	20001bc0 	.word	0x20001bc0
 800f0e0:	200020a8 	.word	0x200020a8

0800f0e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b084      	sub	sp, #16
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f0ee:	4b21      	ldr	r3, [pc, #132]	; (800f174 <prvAddCurrentTaskToDelayedList+0x90>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0f4:	4b20      	ldr	r3, [pc, #128]	; (800f178 <prvAddCurrentTaskToDelayedList+0x94>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7fd fd74 	bl	800cbe8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f106:	d10a      	bne.n	800f11e <prvAddCurrentTaskToDelayedList+0x3a>
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d007      	beq.n	800f11e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f10e:	4b1a      	ldr	r3, [pc, #104]	; (800f178 <prvAddCurrentTaskToDelayedList+0x94>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	3304      	adds	r3, #4
 800f114:	4619      	mov	r1, r3
 800f116:	4819      	ldr	r0, [pc, #100]	; (800f17c <prvAddCurrentTaskToDelayedList+0x98>)
 800f118:	f7fd fd09 	bl	800cb2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f11c:	e026      	b.n	800f16c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4413      	add	r3, r2
 800f124:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f126:	4b14      	ldr	r3, [pc, #80]	; (800f178 <prvAddCurrentTaskToDelayedList+0x94>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	68ba      	ldr	r2, [r7, #8]
 800f12c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f12e:	68ba      	ldr	r2, [r7, #8]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	429a      	cmp	r2, r3
 800f134:	d209      	bcs.n	800f14a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f136:	4b12      	ldr	r3, [pc, #72]	; (800f180 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f138:	681a      	ldr	r2, [r3, #0]
 800f13a:	4b0f      	ldr	r3, [pc, #60]	; (800f178 <prvAddCurrentTaskToDelayedList+0x94>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	3304      	adds	r3, #4
 800f140:	4619      	mov	r1, r3
 800f142:	4610      	mov	r0, r2
 800f144:	f7fd fd17 	bl	800cb76 <vListInsert>
}
 800f148:	e010      	b.n	800f16c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f14a:	4b0e      	ldr	r3, [pc, #56]	; (800f184 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	4b0a      	ldr	r3, [pc, #40]	; (800f178 <prvAddCurrentTaskToDelayedList+0x94>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	3304      	adds	r3, #4
 800f154:	4619      	mov	r1, r3
 800f156:	4610      	mov	r0, r2
 800f158:	f7fd fd0d 	bl	800cb76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f15c:	4b0a      	ldr	r3, [pc, #40]	; (800f188 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	68ba      	ldr	r2, [r7, #8]
 800f162:	429a      	cmp	r2, r3
 800f164:	d202      	bcs.n	800f16c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f166:	4a08      	ldr	r2, [pc, #32]	; (800f188 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	6013      	str	r3, [r2, #0]
}
 800f16c:	bf00      	nop
 800f16e:	3710      	adds	r7, #16
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}
 800f174:	20002098 	.word	0x20002098
 800f178:	20001bc0 	.word	0x20001bc0
 800f17c:	20002080 	.word	0x20002080
 800f180:	20002050 	.word	0x20002050
 800f184:	2000204c 	.word	0x2000204c
 800f188:	200020b4 	.word	0x200020b4

0800f18c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b08a      	sub	sp, #40	; 0x28
 800f190:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f192:	2300      	movs	r3, #0
 800f194:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f196:	f000 faff 	bl	800f798 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f19a:	4b1c      	ldr	r3, [pc, #112]	; (800f20c <xTimerCreateTimerTask+0x80>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d021      	beq.n	800f1e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f1aa:	1d3a      	adds	r2, r7, #4
 800f1ac:	f107 0108 	add.w	r1, r7, #8
 800f1b0:	f107 030c 	add.w	r3, r7, #12
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7fd fc73 	bl	800caa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f1ba:	6879      	ldr	r1, [r7, #4]
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	68fa      	ldr	r2, [r7, #12]
 800f1c0:	9202      	str	r2, [sp, #8]
 800f1c2:	9301      	str	r3, [sp, #4]
 800f1c4:	2302      	movs	r3, #2
 800f1c6:	9300      	str	r3, [sp, #0]
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	460a      	mov	r2, r1
 800f1cc:	4910      	ldr	r1, [pc, #64]	; (800f210 <xTimerCreateTimerTask+0x84>)
 800f1ce:	4811      	ldr	r0, [pc, #68]	; (800f214 <xTimerCreateTimerTask+0x88>)
 800f1d0:	f7fe fdd6 	bl	800dd80 <xTaskCreateStatic>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	4b10      	ldr	r3, [pc, #64]	; (800f218 <xTimerCreateTimerTask+0x8c>)
 800f1d8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f1da:	4b0f      	ldr	r3, [pc, #60]	; (800f218 <xTimerCreateTimerTask+0x8c>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d001      	beq.n	800f1e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d109      	bne.n	800f200 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800f1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f0:	f383 8811 	msr	BASEPRI, r3
 800f1f4:	f3bf 8f6f 	isb	sy
 800f1f8:	f3bf 8f4f 	dsb	sy
 800f1fc:	613b      	str	r3, [r7, #16]
 800f1fe:	e7fe      	b.n	800f1fe <xTimerCreateTimerTask+0x72>
	return xReturn;
 800f200:	697b      	ldr	r3, [r7, #20]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3718      	adds	r7, #24
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	200020f0 	.word	0x200020f0
 800f210:	080119f4 	.word	0x080119f4
 800f214:	0800f34d 	.word	0x0800f34d
 800f218:	200020f4 	.word	0x200020f4

0800f21c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b08a      	sub	sp, #40	; 0x28
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	607a      	str	r2, [r7, #4]
 800f228:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f22a:	2300      	movs	r3, #0
 800f22c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d109      	bne.n	800f248 <xTimerGenericCommand+0x2c>
 800f234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f238:	f383 8811 	msr	BASEPRI, r3
 800f23c:	f3bf 8f6f 	isb	sy
 800f240:	f3bf 8f4f 	dsb	sy
 800f244:	623b      	str	r3, [r7, #32]
 800f246:	e7fe      	b.n	800f246 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f248:	4b19      	ldr	r3, [pc, #100]	; (800f2b0 <xTimerGenericCommand+0x94>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d02a      	beq.n	800f2a6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	2b05      	cmp	r3, #5
 800f260:	dc18      	bgt.n	800f294 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f262:	f7ff fbd1 	bl	800ea08 <xTaskGetSchedulerState>
 800f266:	4603      	mov	r3, r0
 800f268:	2b02      	cmp	r3, #2
 800f26a:	d109      	bne.n	800f280 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f26c:	4b10      	ldr	r3, [pc, #64]	; (800f2b0 <xTimerGenericCommand+0x94>)
 800f26e:	6818      	ldr	r0, [r3, #0]
 800f270:	f107 0110 	add.w	r1, r7, #16
 800f274:	2300      	movs	r3, #0
 800f276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f278:	f7fd ff38 	bl	800d0ec <xQueueGenericSend>
 800f27c:	6278      	str	r0, [r7, #36]	; 0x24
 800f27e:	e012      	b.n	800f2a6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f280:	4b0b      	ldr	r3, [pc, #44]	; (800f2b0 <xTimerGenericCommand+0x94>)
 800f282:	6818      	ldr	r0, [r3, #0]
 800f284:	f107 0110 	add.w	r1, r7, #16
 800f288:	2300      	movs	r3, #0
 800f28a:	2200      	movs	r2, #0
 800f28c:	f7fd ff2e 	bl	800d0ec <xQueueGenericSend>
 800f290:	6278      	str	r0, [r7, #36]	; 0x24
 800f292:	e008      	b.n	800f2a6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f294:	4b06      	ldr	r3, [pc, #24]	; (800f2b0 <xTimerGenericCommand+0x94>)
 800f296:	6818      	ldr	r0, [r3, #0]
 800f298:	f107 0110 	add.w	r1, r7, #16
 800f29c:	2300      	movs	r3, #0
 800f29e:	683a      	ldr	r2, [r7, #0]
 800f2a0:	f7fe f81e 	bl	800d2e0 <xQueueGenericSendFromISR>
 800f2a4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3728      	adds	r7, #40	; 0x28
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	200020f0 	.word	0x200020f0

0800f2b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b088      	sub	sp, #32
 800f2b8:	af02      	add	r7, sp, #8
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2be:	4b22      	ldr	r3, [pc, #136]	; (800f348 <prvProcessExpiredTimer+0x94>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	68db      	ldr	r3, [r3, #12]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	3304      	adds	r3, #4
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7fd fc8b 	bl	800cbe8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2d8:	f003 0304 	and.w	r3, r3, #4
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d021      	beq.n	800f324 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	699a      	ldr	r2, [r3, #24]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	18d1      	adds	r1, r2, r3
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	683a      	ldr	r2, [r7, #0]
 800f2ec:	6978      	ldr	r0, [r7, #20]
 800f2ee:	f000 f8d1 	bl	800f494 <prvInsertTimerInActiveList>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d01e      	beq.n	800f336 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	9300      	str	r3, [sp, #0]
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	2100      	movs	r1, #0
 800f302:	6978      	ldr	r0, [r7, #20]
 800f304:	f7ff ff8a 	bl	800f21c <xTimerGenericCommand>
 800f308:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d112      	bne.n	800f336 <prvProcessExpiredTimer+0x82>
 800f310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f314:	f383 8811 	msr	BASEPRI, r3
 800f318:	f3bf 8f6f 	isb	sy
 800f31c:	f3bf 8f4f 	dsb	sy
 800f320:	60fb      	str	r3, [r7, #12]
 800f322:	e7fe      	b.n	800f322 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f32a:	f023 0301 	bic.w	r3, r3, #1
 800f32e:	b2da      	uxtb	r2, r3
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	6a1b      	ldr	r3, [r3, #32]
 800f33a:	6978      	ldr	r0, [r7, #20]
 800f33c:	4798      	blx	r3
}
 800f33e:	bf00      	nop
 800f340:	3718      	adds	r7, #24
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
 800f346:	bf00      	nop
 800f348:	200020e8 	.word	0x200020e8

0800f34c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f354:	f107 0308 	add.w	r3, r7, #8
 800f358:	4618      	mov	r0, r3
 800f35a:	f000 f857 	bl	800f40c <prvGetNextExpireTime>
 800f35e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	4619      	mov	r1, r3
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f000 f803 	bl	800f370 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f36a:	f000 f8d5 	bl	800f518 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f36e:	e7f1      	b.n	800f354 <prvTimerTask+0x8>

0800f370 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f37a:	f7fe ff03 	bl	800e184 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f37e:	f107 0308 	add.w	r3, r7, #8
 800f382:	4618      	mov	r0, r3
 800f384:	f000 f866 	bl	800f454 <prvSampleTimeNow>
 800f388:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d130      	bne.n	800f3f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d10a      	bne.n	800f3ac <prvProcessTimerOrBlockTask+0x3c>
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d806      	bhi.n	800f3ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f39e:	f7fe ff37 	bl	800e210 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f3a2:	68f9      	ldr	r1, [r7, #12]
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7ff ff85 	bl	800f2b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f3aa:	e024      	b.n	800f3f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d008      	beq.n	800f3c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f3b2:	4b13      	ldr	r3, [pc, #76]	; (800f400 <prvProcessTimerOrBlockTask+0x90>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d101      	bne.n	800f3c0 <prvProcessTimerOrBlockTask+0x50>
 800f3bc:	2301      	movs	r3, #1
 800f3be:	e000      	b.n	800f3c2 <prvProcessTimerOrBlockTask+0x52>
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f3c4:	4b0f      	ldr	r3, [pc, #60]	; (800f404 <prvProcessTimerOrBlockTask+0x94>)
 800f3c6:	6818      	ldr	r0, [r3, #0]
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	1ad3      	subs	r3, r2, r3
 800f3ce:	683a      	ldr	r2, [r7, #0]
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	f7fe fca1 	bl	800dd18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f3d6:	f7fe ff1b 	bl	800e210 <xTaskResumeAll>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d10a      	bne.n	800f3f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f3e0:	4b09      	ldr	r3, [pc, #36]	; (800f408 <prvProcessTimerOrBlockTask+0x98>)
 800f3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3e6:	601a      	str	r2, [r3, #0]
 800f3e8:	f3bf 8f4f 	dsb	sy
 800f3ec:	f3bf 8f6f 	isb	sy
}
 800f3f0:	e001      	b.n	800f3f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f3f2:	f7fe ff0d 	bl	800e210 <xTaskResumeAll>
}
 800f3f6:	bf00      	nop
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	200020ec 	.word	0x200020ec
 800f404:	200020f0 	.word	0x200020f0
 800f408:	e000ed04 	.word	0xe000ed04

0800f40c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f40c:	b480      	push	{r7}
 800f40e:	b085      	sub	sp, #20
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f414:	4b0e      	ldr	r3, [pc, #56]	; (800f450 <prvGetNextExpireTime+0x44>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d101      	bne.n	800f422 <prvGetNextExpireTime+0x16>
 800f41e:	2201      	movs	r2, #1
 800f420:	e000      	b.n	800f424 <prvGetNextExpireTime+0x18>
 800f422:	2200      	movs	r2, #0
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d105      	bne.n	800f43c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f430:	4b07      	ldr	r3, [pc, #28]	; (800f450 <prvGetNextExpireTime+0x44>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	68db      	ldr	r3, [r3, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	60fb      	str	r3, [r7, #12]
 800f43a:	e001      	b.n	800f440 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f43c:	2300      	movs	r3, #0
 800f43e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f440:	68fb      	ldr	r3, [r7, #12]
}
 800f442:	4618      	mov	r0, r3
 800f444:	3714      	adds	r7, #20
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr
 800f44e:	bf00      	nop
 800f450:	200020e8 	.word	0x200020e8

0800f454 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f45c:	f7fe ff74 	bl	800e348 <xTaskGetTickCount>
 800f460:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f462:	4b0b      	ldr	r3, [pc, #44]	; (800f490 <prvSampleTimeNow+0x3c>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	68fa      	ldr	r2, [r7, #12]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d205      	bcs.n	800f478 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f46c:	f000 f930 	bl	800f6d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2201      	movs	r2, #1
 800f474:	601a      	str	r2, [r3, #0]
 800f476:	e002      	b.n	800f47e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2200      	movs	r2, #0
 800f47c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f47e:	4a04      	ldr	r2, [pc, #16]	; (800f490 <prvSampleTimeNow+0x3c>)
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f484:	68fb      	ldr	r3, [r7, #12]
}
 800f486:	4618      	mov	r0, r3
 800f488:	3710      	adds	r7, #16
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	200020f8 	.word	0x200020f8

0800f494 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b086      	sub	sp, #24
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
 800f4a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	68ba      	ldr	r2, [r7, #8]
 800f4aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	68fa      	ldr	r2, [r7, #12]
 800f4b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f4b2:	68ba      	ldr	r2, [r7, #8]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d812      	bhi.n	800f4e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4ba:	687a      	ldr	r2, [r7, #4]
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	1ad2      	subs	r2, r2, r3
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	699b      	ldr	r3, [r3, #24]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d302      	bcc.n	800f4ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	617b      	str	r3, [r7, #20]
 800f4cc:	e01b      	b.n	800f506 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f4ce:	4b10      	ldr	r3, [pc, #64]	; (800f510 <prvInsertTimerInActiveList+0x7c>)
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	3304      	adds	r3, #4
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	4610      	mov	r0, r2
 800f4da:	f7fd fb4c 	bl	800cb76 <vListInsert>
 800f4de:	e012      	b.n	800f506 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d206      	bcs.n	800f4f6 <prvInsertTimerInActiveList+0x62>
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d302      	bcc.n	800f4f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	617b      	str	r3, [r7, #20]
 800f4f4:	e007      	b.n	800f506 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f4f6:	4b07      	ldr	r3, [pc, #28]	; (800f514 <prvInsertTimerInActiveList+0x80>)
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	4619      	mov	r1, r3
 800f500:	4610      	mov	r0, r2
 800f502:	f7fd fb38 	bl	800cb76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f506:	697b      	ldr	r3, [r7, #20]
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3718      	adds	r7, #24
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	200020ec 	.word	0x200020ec
 800f514:	200020e8 	.word	0x200020e8

0800f518 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b08e      	sub	sp, #56	; 0x38
 800f51c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f51e:	e0c6      	b.n	800f6ae <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2b00      	cmp	r3, #0
 800f524:	da17      	bge.n	800f556 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f526:	1d3b      	adds	r3, r7, #4
 800f528:	3304      	adds	r3, #4
 800f52a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d109      	bne.n	800f546 <prvProcessReceivedCommands+0x2e>
 800f532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f536:	f383 8811 	msr	BASEPRI, r3
 800f53a:	f3bf 8f6f 	isb	sy
 800f53e:	f3bf 8f4f 	dsb	sy
 800f542:	61fb      	str	r3, [r7, #28]
 800f544:	e7fe      	b.n	800f544 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f54c:	6850      	ldr	r0, [r2, #4]
 800f54e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f550:	6892      	ldr	r2, [r2, #8]
 800f552:	4611      	mov	r1, r2
 800f554:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f2c0 80a7 	blt.w	800f6ac <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f564:	695b      	ldr	r3, [r3, #20]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d004      	beq.n	800f574 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56c:	3304      	adds	r3, #4
 800f56e:	4618      	mov	r0, r3
 800f570:	f7fd fb3a 	bl	800cbe8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f574:	463b      	mov	r3, r7
 800f576:	4618      	mov	r0, r3
 800f578:	f7ff ff6c 	bl	800f454 <prvSampleTimeNow>
 800f57c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2b09      	cmp	r3, #9
 800f582:	f200 8094 	bhi.w	800f6ae <prvProcessReceivedCommands+0x196>
 800f586:	a201      	add	r2, pc, #4	; (adr r2, 800f58c <prvProcessReceivedCommands+0x74>)
 800f588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f58c:	0800f5b5 	.word	0x0800f5b5
 800f590:	0800f5b5 	.word	0x0800f5b5
 800f594:	0800f5b5 	.word	0x0800f5b5
 800f598:	0800f627 	.word	0x0800f627
 800f59c:	0800f63b 	.word	0x0800f63b
 800f5a0:	0800f683 	.word	0x0800f683
 800f5a4:	0800f5b5 	.word	0x0800f5b5
 800f5a8:	0800f5b5 	.word	0x0800f5b5
 800f5ac:	0800f627 	.word	0x0800f627
 800f5b0:	0800f63b 	.word	0x0800f63b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5ba:	f043 0301 	orr.w	r3, r3, #1
 800f5be:	b2da      	uxtb	r2, r3
 800f5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f5c6:	68ba      	ldr	r2, [r7, #8]
 800f5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ca:	699b      	ldr	r3, [r3, #24]
 800f5cc:	18d1      	adds	r1, r2, r3
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5d4:	f7ff ff5e 	bl	800f494 <prvInsertTimerInActiveList>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d067      	beq.n	800f6ae <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e0:	6a1b      	ldr	r3, [r3, #32]
 800f5e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5ec:	f003 0304 	and.w	r3, r3, #4
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d05c      	beq.n	800f6ae <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f5f4:	68ba      	ldr	r2, [r7, #8]
 800f5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f8:	699b      	ldr	r3, [r3, #24]
 800f5fa:	441a      	add	r2, r3
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	9300      	str	r3, [sp, #0]
 800f600:	2300      	movs	r3, #0
 800f602:	2100      	movs	r1, #0
 800f604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f606:	f7ff fe09 	bl	800f21c <xTimerGenericCommand>
 800f60a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f60c:	6a3b      	ldr	r3, [r7, #32]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d14d      	bne.n	800f6ae <prvProcessReceivedCommands+0x196>
 800f612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f616:	f383 8811 	msr	BASEPRI, r3
 800f61a:	f3bf 8f6f 	isb	sy
 800f61e:	f3bf 8f4f 	dsb	sy
 800f622:	61bb      	str	r3, [r7, #24]
 800f624:	e7fe      	b.n	800f624 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f62c:	f023 0301 	bic.w	r3, r3, #1
 800f630:	b2da      	uxtb	r2, r3
 800f632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f634:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f638:	e039      	b.n	800f6ae <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f640:	f043 0301 	orr.w	r3, r3, #1
 800f644:	b2da      	uxtb	r2, r3
 800f646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f648:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f64c:	68ba      	ldr	r2, [r7, #8]
 800f64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f650:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f654:	699b      	ldr	r3, [r3, #24]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d109      	bne.n	800f66e <prvProcessReceivedCommands+0x156>
 800f65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f65e:	f383 8811 	msr	BASEPRI, r3
 800f662:	f3bf 8f6f 	isb	sy
 800f666:	f3bf 8f4f 	dsb	sy
 800f66a:	617b      	str	r3, [r7, #20]
 800f66c:	e7fe      	b.n	800f66c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f670:	699a      	ldr	r2, [r3, #24]
 800f672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f674:	18d1      	adds	r1, r2, r3
 800f676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f67a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f67c:	f7ff ff0a 	bl	800f494 <prvInsertTimerInActiveList>
					break;
 800f680:	e015      	b.n	800f6ae <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f688:	f003 0302 	and.w	r3, r3, #2
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d103      	bne.n	800f698 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800f690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f692:	f000 fbc7 	bl	800fe24 <vPortFree>
 800f696:	e00a      	b.n	800f6ae <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f69e:	f023 0301 	bic.w	r3, r3, #1
 800f6a2:	b2da      	uxtb	r2, r3
 800f6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f6aa:	e000      	b.n	800f6ae <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f6ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f6ae:	4b07      	ldr	r3, [pc, #28]	; (800f6cc <prvProcessReceivedCommands+0x1b4>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	1d39      	adds	r1, r7, #4
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fd ff30 	bl	800d51c <xQueueReceive>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	f47f af2e 	bne.w	800f520 <prvProcessReceivedCommands+0x8>
	}
}
 800f6c4:	bf00      	nop
 800f6c6:	3730      	adds	r7, #48	; 0x30
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}
 800f6cc:	200020f0 	.word	0x200020f0

0800f6d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b088      	sub	sp, #32
 800f6d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6d6:	e047      	b.n	800f768 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6d8:	4b2d      	ldr	r3, [pc, #180]	; (800f790 <prvSwitchTimerLists+0xc0>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6e2:	4b2b      	ldr	r3, [pc, #172]	; (800f790 <prvSwitchTimerLists+0xc0>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	3304      	adds	r3, #4
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7fd fa79 	bl	800cbe8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	6a1b      	ldr	r3, [r3, #32]
 800f6fa:	68f8      	ldr	r0, [r7, #12]
 800f6fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f704:	f003 0304 	and.w	r3, r3, #4
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d02d      	beq.n	800f768 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	699b      	ldr	r3, [r3, #24]
 800f710:	693a      	ldr	r2, [r7, #16]
 800f712:	4413      	add	r3, r2
 800f714:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f716:	68ba      	ldr	r2, [r7, #8]
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d90e      	bls.n	800f73c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	68ba      	ldr	r2, [r7, #8]
 800f722:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	68fa      	ldr	r2, [r7, #12]
 800f728:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f72a:	4b19      	ldr	r3, [pc, #100]	; (800f790 <prvSwitchTimerLists+0xc0>)
 800f72c:	681a      	ldr	r2, [r3, #0]
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	3304      	adds	r3, #4
 800f732:	4619      	mov	r1, r3
 800f734:	4610      	mov	r0, r2
 800f736:	f7fd fa1e 	bl	800cb76 <vListInsert>
 800f73a:	e015      	b.n	800f768 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f73c:	2300      	movs	r3, #0
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	2300      	movs	r3, #0
 800f742:	693a      	ldr	r2, [r7, #16]
 800f744:	2100      	movs	r1, #0
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	f7ff fd68 	bl	800f21c <xTimerGenericCommand>
 800f74c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d109      	bne.n	800f768 <prvSwitchTimerLists+0x98>
 800f754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f758:	f383 8811 	msr	BASEPRI, r3
 800f75c:	f3bf 8f6f 	isb	sy
 800f760:	f3bf 8f4f 	dsb	sy
 800f764:	603b      	str	r3, [r7, #0]
 800f766:	e7fe      	b.n	800f766 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f768:	4b09      	ldr	r3, [pc, #36]	; (800f790 <prvSwitchTimerLists+0xc0>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d1b2      	bne.n	800f6d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f772:	4b07      	ldr	r3, [pc, #28]	; (800f790 <prvSwitchTimerLists+0xc0>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f778:	4b06      	ldr	r3, [pc, #24]	; (800f794 <prvSwitchTimerLists+0xc4>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4a04      	ldr	r2, [pc, #16]	; (800f790 <prvSwitchTimerLists+0xc0>)
 800f77e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f780:	4a04      	ldr	r2, [pc, #16]	; (800f794 <prvSwitchTimerLists+0xc4>)
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	6013      	str	r3, [r2, #0]
}
 800f786:	bf00      	nop
 800f788:	3718      	adds	r7, #24
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	200020e8 	.word	0x200020e8
 800f794:	200020ec 	.word	0x200020ec

0800f798 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f79e:	f000 f965 	bl	800fa6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f7a2:	4b15      	ldr	r3, [pc, #84]	; (800f7f8 <prvCheckForValidListAndQueue+0x60>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d120      	bne.n	800f7ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f7aa:	4814      	ldr	r0, [pc, #80]	; (800f7fc <prvCheckForValidListAndQueue+0x64>)
 800f7ac:	f7fd f992 	bl	800cad4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f7b0:	4813      	ldr	r0, [pc, #76]	; (800f800 <prvCheckForValidListAndQueue+0x68>)
 800f7b2:	f7fd f98f 	bl	800cad4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f7b6:	4b13      	ldr	r3, [pc, #76]	; (800f804 <prvCheckForValidListAndQueue+0x6c>)
 800f7b8:	4a10      	ldr	r2, [pc, #64]	; (800f7fc <prvCheckForValidListAndQueue+0x64>)
 800f7ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f7bc:	4b12      	ldr	r3, [pc, #72]	; (800f808 <prvCheckForValidListAndQueue+0x70>)
 800f7be:	4a10      	ldr	r2, [pc, #64]	; (800f800 <prvCheckForValidListAndQueue+0x68>)
 800f7c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	9300      	str	r3, [sp, #0]
 800f7c6:	4b11      	ldr	r3, [pc, #68]	; (800f80c <prvCheckForValidListAndQueue+0x74>)
 800f7c8:	4a11      	ldr	r2, [pc, #68]	; (800f810 <prvCheckForValidListAndQueue+0x78>)
 800f7ca:	2110      	movs	r1, #16
 800f7cc:	200a      	movs	r0, #10
 800f7ce:	f7fd fa9d 	bl	800cd0c <xQueueGenericCreateStatic>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	4b08      	ldr	r3, [pc, #32]	; (800f7f8 <prvCheckForValidListAndQueue+0x60>)
 800f7d6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f7d8:	4b07      	ldr	r3, [pc, #28]	; (800f7f8 <prvCheckForValidListAndQueue+0x60>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d005      	beq.n	800f7ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f7e0:	4b05      	ldr	r3, [pc, #20]	; (800f7f8 <prvCheckForValidListAndQueue+0x60>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	490b      	ldr	r1, [pc, #44]	; (800f814 <prvCheckForValidListAndQueue+0x7c>)
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fe fa44 	bl	800dc74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f7ec:	f000 f96c 	bl	800fac8 <vPortExitCritical>
}
 800f7f0:	bf00      	nop
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	200020f0 	.word	0x200020f0
 800f7fc:	200020c0 	.word	0x200020c0
 800f800:	200020d4 	.word	0x200020d4
 800f804:	200020e8 	.word	0x200020e8
 800f808:	200020ec 	.word	0x200020ec
 800f80c:	2000219c 	.word	0x2000219c
 800f810:	200020fc 	.word	0x200020fc
 800f814:	080119fc 	.word	0x080119fc

0800f818 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	3b04      	subs	r3, #4
 800f828:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	3b04      	subs	r3, #4
 800f836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	f023 0201 	bic.w	r2, r3, #1
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	3b04      	subs	r3, #4
 800f846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f848:	4a0c      	ldr	r2, [pc, #48]	; (800f87c <pxPortInitialiseStack+0x64>)
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	3b14      	subs	r3, #20
 800f852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	3b04      	subs	r3, #4
 800f85e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f06f 0202 	mvn.w	r2, #2
 800f866:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	3b20      	subs	r3, #32
 800f86c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f86e:	68fb      	ldr	r3, [r7, #12]
}
 800f870:	4618      	mov	r0, r3
 800f872:	3714      	adds	r7, #20
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr
 800f87c:	0800f881 	.word	0x0800f881

0800f880 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f886:	2300      	movs	r3, #0
 800f888:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f88a:	4b11      	ldr	r3, [pc, #68]	; (800f8d0 <prvTaskExitError+0x50>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f892:	d009      	beq.n	800f8a8 <prvTaskExitError+0x28>
 800f894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f898:	f383 8811 	msr	BASEPRI, r3
 800f89c:	f3bf 8f6f 	isb	sy
 800f8a0:	f3bf 8f4f 	dsb	sy
 800f8a4:	60fb      	str	r3, [r7, #12]
 800f8a6:	e7fe      	b.n	800f8a6 <prvTaskExitError+0x26>
 800f8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ac:	f383 8811 	msr	BASEPRI, r3
 800f8b0:	f3bf 8f6f 	isb	sy
 800f8b4:	f3bf 8f4f 	dsb	sy
 800f8b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f8ba:	bf00      	nop
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d0fc      	beq.n	800f8bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f8c2:	bf00      	nop
 800f8c4:	3714      	adds	r7, #20
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr
 800f8ce:	bf00      	nop
 800f8d0:	20000120 	.word	0x20000120
	...

0800f8e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f8e0:	4b07      	ldr	r3, [pc, #28]	; (800f900 <pxCurrentTCBConst2>)
 800f8e2:	6819      	ldr	r1, [r3, #0]
 800f8e4:	6808      	ldr	r0, [r1, #0]
 800f8e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ea:	f380 8809 	msr	PSP, r0
 800f8ee:	f3bf 8f6f 	isb	sy
 800f8f2:	f04f 0000 	mov.w	r0, #0
 800f8f6:	f380 8811 	msr	BASEPRI, r0
 800f8fa:	4770      	bx	lr
 800f8fc:	f3af 8000 	nop.w

0800f900 <pxCurrentTCBConst2>:
 800f900:	20001bc0 	.word	0x20001bc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f904:	bf00      	nop
 800f906:	bf00      	nop

0800f908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f908:	4808      	ldr	r0, [pc, #32]	; (800f92c <prvPortStartFirstTask+0x24>)
 800f90a:	6800      	ldr	r0, [r0, #0]
 800f90c:	6800      	ldr	r0, [r0, #0]
 800f90e:	f380 8808 	msr	MSP, r0
 800f912:	f04f 0000 	mov.w	r0, #0
 800f916:	f380 8814 	msr	CONTROL, r0
 800f91a:	b662      	cpsie	i
 800f91c:	b661      	cpsie	f
 800f91e:	f3bf 8f4f 	dsb	sy
 800f922:	f3bf 8f6f 	isb	sy
 800f926:	df00      	svc	0
 800f928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f92a:	bf00      	nop
 800f92c:	e000ed08 	.word	0xe000ed08

0800f930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b086      	sub	sp, #24
 800f934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f936:	4b44      	ldr	r3, [pc, #272]	; (800fa48 <xPortStartScheduler+0x118>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a44      	ldr	r2, [pc, #272]	; (800fa4c <xPortStartScheduler+0x11c>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d109      	bne.n	800f954 <xPortStartScheduler+0x24>
 800f940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f944:	f383 8811 	msr	BASEPRI, r3
 800f948:	f3bf 8f6f 	isb	sy
 800f94c:	f3bf 8f4f 	dsb	sy
 800f950:	613b      	str	r3, [r7, #16]
 800f952:	e7fe      	b.n	800f952 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f954:	4b3c      	ldr	r3, [pc, #240]	; (800fa48 <xPortStartScheduler+0x118>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	4a3d      	ldr	r2, [pc, #244]	; (800fa50 <xPortStartScheduler+0x120>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d109      	bne.n	800f972 <xPortStartScheduler+0x42>
 800f95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f962:	f383 8811 	msr	BASEPRI, r3
 800f966:	f3bf 8f6f 	isb	sy
 800f96a:	f3bf 8f4f 	dsb	sy
 800f96e:	60fb      	str	r3, [r7, #12]
 800f970:	e7fe      	b.n	800f970 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f972:	4b38      	ldr	r3, [pc, #224]	; (800fa54 <xPortStartScheduler+0x124>)
 800f974:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	22ff      	movs	r2, #255	; 0xff
 800f982:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	b2db      	uxtb	r3, r3
 800f98a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f98c:	78fb      	ldrb	r3, [r7, #3]
 800f98e:	b2db      	uxtb	r3, r3
 800f990:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f994:	b2da      	uxtb	r2, r3
 800f996:	4b30      	ldr	r3, [pc, #192]	; (800fa58 <xPortStartScheduler+0x128>)
 800f998:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f99a:	4b30      	ldr	r3, [pc, #192]	; (800fa5c <xPortStartScheduler+0x12c>)
 800f99c:	2207      	movs	r2, #7
 800f99e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f9a0:	e009      	b.n	800f9b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f9a2:	4b2e      	ldr	r3, [pc, #184]	; (800fa5c <xPortStartScheduler+0x12c>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	4a2c      	ldr	r2, [pc, #176]	; (800fa5c <xPortStartScheduler+0x12c>)
 800f9aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f9ac:	78fb      	ldrb	r3, [r7, #3]
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	005b      	lsls	r3, r3, #1
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f9b6:	78fb      	ldrb	r3, [r7, #3]
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9be:	2b80      	cmp	r3, #128	; 0x80
 800f9c0:	d0ef      	beq.n	800f9a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f9c2:	4b26      	ldr	r3, [pc, #152]	; (800fa5c <xPortStartScheduler+0x12c>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f1c3 0307 	rsb	r3, r3, #7
 800f9ca:	2b04      	cmp	r3, #4
 800f9cc:	d009      	beq.n	800f9e2 <xPortStartScheduler+0xb2>
 800f9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d2:	f383 8811 	msr	BASEPRI, r3
 800f9d6:	f3bf 8f6f 	isb	sy
 800f9da:	f3bf 8f4f 	dsb	sy
 800f9de:	60bb      	str	r3, [r7, #8]
 800f9e0:	e7fe      	b.n	800f9e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f9e2:	4b1e      	ldr	r3, [pc, #120]	; (800fa5c <xPortStartScheduler+0x12c>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	021b      	lsls	r3, r3, #8
 800f9e8:	4a1c      	ldr	r2, [pc, #112]	; (800fa5c <xPortStartScheduler+0x12c>)
 800f9ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f9ec:	4b1b      	ldr	r3, [pc, #108]	; (800fa5c <xPortStartScheduler+0x12c>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f9f4:	4a19      	ldr	r2, [pc, #100]	; (800fa5c <xPortStartScheduler+0x12c>)
 800f9f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	b2da      	uxtb	r2, r3
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fa00:	4b17      	ldr	r3, [pc, #92]	; (800fa60 <xPortStartScheduler+0x130>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4a16      	ldr	r2, [pc, #88]	; (800fa60 <xPortStartScheduler+0x130>)
 800fa06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fa0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fa0c:	4b14      	ldr	r3, [pc, #80]	; (800fa60 <xPortStartScheduler+0x130>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	4a13      	ldr	r2, [pc, #76]	; (800fa60 <xPortStartScheduler+0x130>)
 800fa12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fa16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fa18:	f000 f8d6 	bl	800fbc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fa1c:	4b11      	ldr	r3, [pc, #68]	; (800fa64 <xPortStartScheduler+0x134>)
 800fa1e:	2200      	movs	r2, #0
 800fa20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fa22:	f000 f8f5 	bl	800fc10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fa26:	4b10      	ldr	r3, [pc, #64]	; (800fa68 <xPortStartScheduler+0x138>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	4a0f      	ldr	r2, [pc, #60]	; (800fa68 <xPortStartScheduler+0x138>)
 800fa2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fa30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fa32:	f7ff ff69 	bl	800f908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fa36:	f7fe fd4f 	bl	800e4d8 <vTaskSwitchContext>
	prvTaskExitError();
 800fa3a:	f7ff ff21 	bl	800f880 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fa3e:	2300      	movs	r3, #0
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3718      	adds	r7, #24
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	e000ed00 	.word	0xe000ed00
 800fa4c:	410fc271 	.word	0x410fc271
 800fa50:	410fc270 	.word	0x410fc270
 800fa54:	e000e400 	.word	0xe000e400
 800fa58:	200021ec 	.word	0x200021ec
 800fa5c:	200021f0 	.word	0x200021f0
 800fa60:	e000ed20 	.word	0xe000ed20
 800fa64:	20000120 	.word	0x20000120
 800fa68:	e000ef34 	.word	0xe000ef34

0800fa6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa76:	f383 8811 	msr	BASEPRI, r3
 800fa7a:	f3bf 8f6f 	isb	sy
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fa84:	4b0e      	ldr	r3, [pc, #56]	; (800fac0 <vPortEnterCritical+0x54>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	3301      	adds	r3, #1
 800fa8a:	4a0d      	ldr	r2, [pc, #52]	; (800fac0 <vPortEnterCritical+0x54>)
 800fa8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fa8e:	4b0c      	ldr	r3, [pc, #48]	; (800fac0 <vPortEnterCritical+0x54>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d10e      	bne.n	800fab4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fa96:	4b0b      	ldr	r3, [pc, #44]	; (800fac4 <vPortEnterCritical+0x58>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d009      	beq.n	800fab4 <vPortEnterCritical+0x48>
 800faa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa4:	f383 8811 	msr	BASEPRI, r3
 800faa8:	f3bf 8f6f 	isb	sy
 800faac:	f3bf 8f4f 	dsb	sy
 800fab0:	603b      	str	r3, [r7, #0]
 800fab2:	e7fe      	b.n	800fab2 <vPortEnterCritical+0x46>
	}
}
 800fab4:	bf00      	nop
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr
 800fac0:	20000120 	.word	0x20000120
 800fac4:	e000ed04 	.word	0xe000ed04

0800fac8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fac8:	b480      	push	{r7}
 800faca:	b083      	sub	sp, #12
 800facc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800face:	4b11      	ldr	r3, [pc, #68]	; (800fb14 <vPortExitCritical+0x4c>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d109      	bne.n	800faea <vPortExitCritical+0x22>
 800fad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fada:	f383 8811 	msr	BASEPRI, r3
 800fade:	f3bf 8f6f 	isb	sy
 800fae2:	f3bf 8f4f 	dsb	sy
 800fae6:	607b      	str	r3, [r7, #4]
 800fae8:	e7fe      	b.n	800fae8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800faea:	4b0a      	ldr	r3, [pc, #40]	; (800fb14 <vPortExitCritical+0x4c>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	3b01      	subs	r3, #1
 800faf0:	4a08      	ldr	r2, [pc, #32]	; (800fb14 <vPortExitCritical+0x4c>)
 800faf2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800faf4:	4b07      	ldr	r3, [pc, #28]	; (800fb14 <vPortExitCritical+0x4c>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d104      	bne.n	800fb06 <vPortExitCritical+0x3e>
 800fafc:	2300      	movs	r3, #0
 800fafe:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fb06:	bf00      	nop
 800fb08:	370c      	adds	r7, #12
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr
 800fb12:	bf00      	nop
 800fb14:	20000120 	.word	0x20000120
	...

0800fb20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fb20:	f3ef 8009 	mrs	r0, PSP
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	4b15      	ldr	r3, [pc, #84]	; (800fb80 <pxCurrentTCBConst>)
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	f01e 0f10 	tst.w	lr, #16
 800fb30:	bf08      	it	eq
 800fb32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fb36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3a:	6010      	str	r0, [r2, #0]
 800fb3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fb40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fb44:	f380 8811 	msr	BASEPRI, r0
 800fb48:	f3bf 8f4f 	dsb	sy
 800fb4c:	f3bf 8f6f 	isb	sy
 800fb50:	f7fe fcc2 	bl	800e4d8 <vTaskSwitchContext>
 800fb54:	f04f 0000 	mov.w	r0, #0
 800fb58:	f380 8811 	msr	BASEPRI, r0
 800fb5c:	bc09      	pop	{r0, r3}
 800fb5e:	6819      	ldr	r1, [r3, #0]
 800fb60:	6808      	ldr	r0, [r1, #0]
 800fb62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb66:	f01e 0f10 	tst.w	lr, #16
 800fb6a:	bf08      	it	eq
 800fb6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fb70:	f380 8809 	msr	PSP, r0
 800fb74:	f3bf 8f6f 	isb	sy
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	f3af 8000 	nop.w

0800fb80 <pxCurrentTCBConst>:
 800fb80:	20001bc0 	.word	0x20001bc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fb84:	bf00      	nop
 800fb86:	bf00      	nop

0800fb88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
	__asm volatile
 800fb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fba0:	f7fe fbe2 	bl	800e368 <xTaskIncrementTick>
 800fba4:	4603      	mov	r3, r0
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d003      	beq.n	800fbb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fbaa:	4b06      	ldr	r3, [pc, #24]	; (800fbc4 <SysTick_Handler+0x3c>)
 800fbac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbb0:	601a      	str	r2, [r3, #0]
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fbbc:	bf00      	nop
 800fbbe:	3708      	adds	r7, #8
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	e000ed04 	.word	0xe000ed04

0800fbc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fbc8:	b480      	push	{r7}
 800fbca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fbcc:	4b0b      	ldr	r3, [pc, #44]	; (800fbfc <vPortSetupTimerInterrupt+0x34>)
 800fbce:	2200      	movs	r2, #0
 800fbd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fbd2:	4b0b      	ldr	r3, [pc, #44]	; (800fc00 <vPortSetupTimerInterrupt+0x38>)
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fbd8:	4b0a      	ldr	r3, [pc, #40]	; (800fc04 <vPortSetupTimerInterrupt+0x3c>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4a0a      	ldr	r2, [pc, #40]	; (800fc08 <vPortSetupTimerInterrupt+0x40>)
 800fbde:	fba2 2303 	umull	r2, r3, r2, r3
 800fbe2:	099b      	lsrs	r3, r3, #6
 800fbe4:	4a09      	ldr	r2, [pc, #36]	; (800fc0c <vPortSetupTimerInterrupt+0x44>)
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fbea:	4b04      	ldr	r3, [pc, #16]	; (800fbfc <vPortSetupTimerInterrupt+0x34>)
 800fbec:	2207      	movs	r2, #7
 800fbee:	601a      	str	r2, [r3, #0]
}
 800fbf0:	bf00      	nop
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop
 800fbfc:	e000e010 	.word	0xe000e010
 800fc00:	e000e018 	.word	0xe000e018
 800fc04:	20000004 	.word	0x20000004
 800fc08:	10624dd3 	.word	0x10624dd3
 800fc0c:	e000e014 	.word	0xe000e014

0800fc10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fc10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fc20 <vPortEnableVFP+0x10>
 800fc14:	6801      	ldr	r1, [r0, #0]
 800fc16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fc1a:	6001      	str	r1, [r0, #0]
 800fc1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fc1e:	bf00      	nop
 800fc20:	e000ed88 	.word	0xe000ed88

0800fc24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fc24:	b480      	push	{r7}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fc2a:	f3ef 8305 	mrs	r3, IPSR
 800fc2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2b0f      	cmp	r3, #15
 800fc34:	d913      	bls.n	800fc5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fc36:	4a16      	ldr	r2, [pc, #88]	; (800fc90 <vPortValidateInterruptPriority+0x6c>)
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	4413      	add	r3, r2
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fc40:	4b14      	ldr	r3, [pc, #80]	; (800fc94 <vPortValidateInterruptPriority+0x70>)
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	7afa      	ldrb	r2, [r7, #11]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d209      	bcs.n	800fc5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800fc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4e:	f383 8811 	msr	BASEPRI, r3
 800fc52:	f3bf 8f6f 	isb	sy
 800fc56:	f3bf 8f4f 	dsb	sy
 800fc5a:	607b      	str	r3, [r7, #4]
 800fc5c:	e7fe      	b.n	800fc5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fc5e:	4b0e      	ldr	r3, [pc, #56]	; (800fc98 <vPortValidateInterruptPriority+0x74>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fc66:	4b0d      	ldr	r3, [pc, #52]	; (800fc9c <vPortValidateInterruptPriority+0x78>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d909      	bls.n	800fc82 <vPortValidateInterruptPriority+0x5e>
 800fc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc72:	f383 8811 	msr	BASEPRI, r3
 800fc76:	f3bf 8f6f 	isb	sy
 800fc7a:	f3bf 8f4f 	dsb	sy
 800fc7e:	603b      	str	r3, [r7, #0]
 800fc80:	e7fe      	b.n	800fc80 <vPortValidateInterruptPriority+0x5c>
	}
 800fc82:	bf00      	nop
 800fc84:	3714      	adds	r7, #20
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop
 800fc90:	e000e3f0 	.word	0xe000e3f0
 800fc94:	200021ec 	.word	0x200021ec
 800fc98:	e000ed0c 	.word	0xe000ed0c
 800fc9c:	200021f0 	.word	0x200021f0

0800fca0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b08a      	sub	sp, #40	; 0x28
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fcac:	f7fe fa6a 	bl	800e184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fcb0:	4b57      	ldr	r3, [pc, #348]	; (800fe10 <pvPortMalloc+0x170>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d101      	bne.n	800fcbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fcb8:	f000 f90c 	bl	800fed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fcbc:	4b55      	ldr	r3, [pc, #340]	; (800fe14 <pvPortMalloc+0x174>)
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	4013      	ands	r3, r2
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f040 808c 	bne.w	800fde2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d01c      	beq.n	800fd0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800fcd0:	2208      	movs	r2, #8
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f003 0307 	and.w	r3, r3, #7
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d013      	beq.n	800fd0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f023 0307 	bic.w	r3, r3, #7
 800fce8:	3308      	adds	r3, #8
 800fcea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f003 0307 	and.w	r3, r3, #7
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d009      	beq.n	800fd0a <pvPortMalloc+0x6a>
 800fcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfa:	f383 8811 	msr	BASEPRI, r3
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f3bf 8f4f 	dsb	sy
 800fd06:	617b      	str	r3, [r7, #20]
 800fd08:	e7fe      	b.n	800fd08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d068      	beq.n	800fde2 <pvPortMalloc+0x142>
 800fd10:	4b41      	ldr	r3, [pc, #260]	; (800fe18 <pvPortMalloc+0x178>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	687a      	ldr	r2, [r7, #4]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d863      	bhi.n	800fde2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fd1a:	4b40      	ldr	r3, [pc, #256]	; (800fe1c <pvPortMalloc+0x17c>)
 800fd1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fd1e:	4b3f      	ldr	r3, [pc, #252]	; (800fe1c <pvPortMalloc+0x17c>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd24:	e004      	b.n	800fd30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800fd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d903      	bls.n	800fd42 <pvPortMalloc+0xa2>
 800fd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d1f1      	bne.n	800fd26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fd42:	4b33      	ldr	r3, [pc, #204]	; (800fe10 <pvPortMalloc+0x170>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d04a      	beq.n	800fde2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fd4c:	6a3b      	ldr	r3, [r7, #32]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	2208      	movs	r2, #8
 800fd52:	4413      	add	r3, r2
 800fd54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	6a3b      	ldr	r3, [r7, #32]
 800fd5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd60:	685a      	ldr	r2, [r3, #4]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	1ad2      	subs	r2, r2, r3
 800fd66:	2308      	movs	r3, #8
 800fd68:	005b      	lsls	r3, r3, #1
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d91e      	bls.n	800fdac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fd6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	4413      	add	r3, r2
 800fd74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd76:	69bb      	ldr	r3, [r7, #24]
 800fd78:	f003 0307 	and.w	r3, r3, #7
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d009      	beq.n	800fd94 <pvPortMalloc+0xf4>
 800fd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd84:	f383 8811 	msr	BASEPRI, r3
 800fd88:	f3bf 8f6f 	isb	sy
 800fd8c:	f3bf 8f4f 	dsb	sy
 800fd90:	613b      	str	r3, [r7, #16]
 800fd92:	e7fe      	b.n	800fd92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd96:	685a      	ldr	r2, [r3, #4]
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	1ad2      	subs	r2, r2, r3
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fda6:	69b8      	ldr	r0, [r7, #24]
 800fda8:	f000 f8f6 	bl	800ff98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fdac:	4b1a      	ldr	r3, [pc, #104]	; (800fe18 <pvPortMalloc+0x178>)
 800fdae:	681a      	ldr	r2, [r3, #0]
 800fdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	1ad3      	subs	r3, r2, r3
 800fdb6:	4a18      	ldr	r2, [pc, #96]	; (800fe18 <pvPortMalloc+0x178>)
 800fdb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fdba:	4b17      	ldr	r3, [pc, #92]	; (800fe18 <pvPortMalloc+0x178>)
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	4b18      	ldr	r3, [pc, #96]	; (800fe20 <pvPortMalloc+0x180>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d203      	bcs.n	800fdce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fdc6:	4b14      	ldr	r3, [pc, #80]	; (800fe18 <pvPortMalloc+0x178>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	4a15      	ldr	r2, [pc, #84]	; (800fe20 <pvPortMalloc+0x180>)
 800fdcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd0:	685a      	ldr	r2, [r3, #4]
 800fdd2:	4b10      	ldr	r3, [pc, #64]	; (800fe14 <pvPortMalloc+0x174>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	431a      	orrs	r2, r3
 800fdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdde:	2200      	movs	r2, #0
 800fde0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fde2:	f7fe fa15 	bl	800e210 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	f003 0307 	and.w	r3, r3, #7
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d009      	beq.n	800fe04 <pvPortMalloc+0x164>
 800fdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf4:	f383 8811 	msr	BASEPRI, r3
 800fdf8:	f3bf 8f6f 	isb	sy
 800fdfc:	f3bf 8f4f 	dsb	sy
 800fe00:	60fb      	str	r3, [r7, #12]
 800fe02:	e7fe      	b.n	800fe02 <pvPortMalloc+0x162>
	return pvReturn;
 800fe04:	69fb      	ldr	r3, [r7, #28]
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3728      	adds	r7, #40	; 0x28
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	2000490c 	.word	0x2000490c
 800fe14:	20004918 	.word	0x20004918
 800fe18:	20004910 	.word	0x20004910
 800fe1c:	20004904 	.word	0x20004904
 800fe20:	20004914 	.word	0x20004914

0800fe24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b086      	sub	sp, #24
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d046      	beq.n	800fec4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fe36:	2308      	movs	r3, #8
 800fe38:	425b      	negs	r3, r3
 800fe3a:	697a      	ldr	r2, [r7, #20]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	685a      	ldr	r2, [r3, #4]
 800fe48:	4b20      	ldr	r3, [pc, #128]	; (800fecc <vPortFree+0xa8>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4013      	ands	r3, r2
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d109      	bne.n	800fe66 <vPortFree+0x42>
 800fe52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	60fb      	str	r3, [r7, #12]
 800fe64:	e7fe      	b.n	800fe64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d009      	beq.n	800fe82 <vPortFree+0x5e>
 800fe6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe72:	f383 8811 	msr	BASEPRI, r3
 800fe76:	f3bf 8f6f 	isb	sy
 800fe7a:	f3bf 8f4f 	dsb	sy
 800fe7e:	60bb      	str	r3, [r7, #8]
 800fe80:	e7fe      	b.n	800fe80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	685a      	ldr	r2, [r3, #4]
 800fe86:	4b11      	ldr	r3, [pc, #68]	; (800fecc <vPortFree+0xa8>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	4013      	ands	r3, r2
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d019      	beq.n	800fec4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d115      	bne.n	800fec4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	685a      	ldr	r2, [r3, #4]
 800fe9c:	4b0b      	ldr	r3, [pc, #44]	; (800fecc <vPortFree+0xa8>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	43db      	mvns	r3, r3
 800fea2:	401a      	ands	r2, r3
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fea8:	f7fe f96c 	bl	800e184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	685a      	ldr	r2, [r3, #4]
 800feb0:	4b07      	ldr	r3, [pc, #28]	; (800fed0 <vPortFree+0xac>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	4413      	add	r3, r2
 800feb6:	4a06      	ldr	r2, [pc, #24]	; (800fed0 <vPortFree+0xac>)
 800feb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800feba:	6938      	ldr	r0, [r7, #16]
 800febc:	f000 f86c 	bl	800ff98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fec0:	f7fe f9a6 	bl	800e210 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fec4:	bf00      	nop
 800fec6:	3718      	adds	r7, #24
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	20004918 	.word	0x20004918
 800fed0:	20004910 	.word	0x20004910

0800fed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fed4:	b480      	push	{r7}
 800fed6:	b085      	sub	sp, #20
 800fed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800feda:	f242 7310 	movw	r3, #10000	; 0x2710
 800fede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fee0:	4b27      	ldr	r3, [pc, #156]	; (800ff80 <prvHeapInit+0xac>)
 800fee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f003 0307 	and.w	r3, r3, #7
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00c      	beq.n	800ff08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	3307      	adds	r3, #7
 800fef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f023 0307 	bic.w	r3, r3, #7
 800fefa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fefc:	68ba      	ldr	r2, [r7, #8]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	1ad3      	subs	r3, r2, r3
 800ff02:	4a1f      	ldr	r2, [pc, #124]	; (800ff80 <prvHeapInit+0xac>)
 800ff04:	4413      	add	r3, r2
 800ff06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ff0c:	4a1d      	ldr	r2, [pc, #116]	; (800ff84 <prvHeapInit+0xb0>)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ff12:	4b1c      	ldr	r3, [pc, #112]	; (800ff84 <prvHeapInit+0xb0>)
 800ff14:	2200      	movs	r2, #0
 800ff16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	68ba      	ldr	r2, [r7, #8]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ff20:	2208      	movs	r2, #8
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	1a9b      	subs	r3, r3, r2
 800ff26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f023 0307 	bic.w	r3, r3, #7
 800ff2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	4a15      	ldr	r2, [pc, #84]	; (800ff88 <prvHeapInit+0xb4>)
 800ff34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ff36:	4b14      	ldr	r3, [pc, #80]	; (800ff88 <prvHeapInit+0xb4>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ff3e:	4b12      	ldr	r3, [pc, #72]	; (800ff88 <prvHeapInit+0xb4>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	2200      	movs	r2, #0
 800ff44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	68fa      	ldr	r2, [r7, #12]
 800ff4e:	1ad2      	subs	r2, r2, r3
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff54:	4b0c      	ldr	r3, [pc, #48]	; (800ff88 <prvHeapInit+0xb4>)
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	4a0a      	ldr	r2, [pc, #40]	; (800ff8c <prvHeapInit+0xb8>)
 800ff62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	4a09      	ldr	r2, [pc, #36]	; (800ff90 <prvHeapInit+0xbc>)
 800ff6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff6c:	4b09      	ldr	r3, [pc, #36]	; (800ff94 <prvHeapInit+0xc0>)
 800ff6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ff72:	601a      	str	r2, [r3, #0]
}
 800ff74:	bf00      	nop
 800ff76:	3714      	adds	r7, #20
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr
 800ff80:	200021f4 	.word	0x200021f4
 800ff84:	20004904 	.word	0x20004904
 800ff88:	2000490c 	.word	0x2000490c
 800ff8c:	20004914 	.word	0x20004914
 800ff90:	20004910 	.word	0x20004910
 800ff94:	20004918 	.word	0x20004918

0800ff98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b085      	sub	sp, #20
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ffa0:	4b28      	ldr	r3, [pc, #160]	; (8010044 <prvInsertBlockIntoFreeList+0xac>)
 800ffa2:	60fb      	str	r3, [r7, #12]
 800ffa4:	e002      	b.n	800ffac <prvInsertBlockIntoFreeList+0x14>
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	60fb      	str	r3, [r7, #12]
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	687a      	ldr	r2, [r7, #4]
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d8f7      	bhi.n	800ffa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	68ba      	ldr	r2, [r7, #8]
 800ffc0:	4413      	add	r3, r2
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d108      	bne.n	800ffda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	685a      	ldr	r2, [r3, #4]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	441a      	add	r2, r3
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	68ba      	ldr	r2, [r7, #8]
 800ffe4:	441a      	add	r2, r3
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d118      	bne.n	8010020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	681a      	ldr	r2, [r3, #0]
 800fff2:	4b15      	ldr	r3, [pc, #84]	; (8010048 <prvInsertBlockIntoFreeList+0xb0>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d00d      	beq.n	8010016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	685a      	ldr	r2, [r3, #4]
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	441a      	add	r2, r3
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	681a      	ldr	r2, [r3, #0]
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	601a      	str	r2, [r3, #0]
 8010014:	e008      	b.n	8010028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010016:	4b0c      	ldr	r3, [pc, #48]	; (8010048 <prvInsertBlockIntoFreeList+0xb0>)
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	601a      	str	r2, [r3, #0]
 801001e:	e003      	b.n	8010028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010028:	68fa      	ldr	r2, [r7, #12]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	429a      	cmp	r2, r3
 801002e:	d002      	beq.n	8010036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010036:	bf00      	nop
 8010038:	3714      	adds	r7, #20
 801003a:	46bd      	mov	sp, r7
 801003c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop
 8010044:	20004904 	.word	0x20004904
 8010048:	2000490c 	.word	0x2000490c

0801004c <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8010052:	f000 f9a3 	bl	801039c <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8010056:	480e      	ldr	r0, [pc, #56]	; (8010090 <APP_THREAD_Init+0x44>)
 8010058:	f000 faac 	bl	80105b4 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 801005c:	2101      	movs	r1, #1
 801005e:	2002      	movs	r0, #2
 8010060:	f001 fbf8 	bl	8011854 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8010064:	f000 fb9e 	bl	80107a4 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8010068:	f000 fb8a 	bl	8010780 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 801006c:	f7fa fb98 	bl	800a7a0 <SHCI_C2_THREAD_Init>
 8010070:	4603      	mov	r3, r0
 8010072:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8010074:	4a07      	ldr	r2, [pc, #28]	; (8010094 <APP_THREAD_Init+0x48>)
 8010076:	2100      	movs	r1, #0
 8010078:	4807      	ldr	r0, [pc, #28]	; (8010098 <APP_THREAD_Init+0x4c>)
 801007a:	f7fc f8b7 	bl	800c1ec <osThreadNew>
 801007e:	4602      	mov	r2, r0
 8010080:	4b06      	ldr	r3, [pc, #24]	; (801009c <APP_THREAD_Init+0x50>)
 8010082:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8010084:	f000 f86c 	bl	8010160 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8010088:	bf00      	nop
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	20030834 	.word	0x20030834
 8010094:	08011d48 	.word	0x08011d48
 8010098:	08010459 	.word	0x08010459
 801009c:	20004a30 	.word	0x20004a30

080100a0 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2b07      	cmp	r3, #7
 80100ae:	d83b      	bhi.n	8010128 <APP_THREAD_Error+0x88>
 80100b0:	a201      	add	r2, pc, #4	; (adr r2, 80100b8 <APP_THREAD_Error+0x18>)
 80100b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b6:	bf00      	nop
 80100b8:	080100d9 	.word	0x080100d9
 80100bc:	080100e3 	.word	0x080100e3
 80100c0:	080100ed 	.word	0x080100ed
 80100c4:	080100f7 	.word	0x080100f7
 80100c8:	08010101 	.word	0x08010101
 80100cc:	0801010b 	.word	0x0801010b
 80100d0:	08010115 	.word	0x08010115
 80100d4:	0801011f 	.word	0x0801011f
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 80100d8:	6839      	ldr	r1, [r7, #0]
 80100da:	4818      	ldr	r0, [pc, #96]	; (801013c <APP_THREAD_Error+0x9c>)
 80100dc:	f000 f952 	bl	8010384 <APP_THREAD_TraceError>
    break;
 80100e0:	e027      	b.n	8010132 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 80100e2:	6839      	ldr	r1, [r7, #0]
 80100e4:	4816      	ldr	r0, [pc, #88]	; (8010140 <APP_THREAD_Error+0xa0>)
 80100e6:	f000 f94d 	bl	8010384 <APP_THREAD_TraceError>
    break;
 80100ea:	e022      	b.n	8010132 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 80100ec:	6839      	ldr	r1, [r7, #0]
 80100ee:	4815      	ldr	r0, [pc, #84]	; (8010144 <APP_THREAD_Error+0xa4>)
 80100f0:	f000 f948 	bl	8010384 <APP_THREAD_TraceError>
    break;
 80100f4:	e01d      	b.n	8010132 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 80100f6:	6839      	ldr	r1, [r7, #0]
 80100f8:	4813      	ldr	r0, [pc, #76]	; (8010148 <APP_THREAD_Error+0xa8>)
 80100fa:	f000 f943 	bl	8010384 <APP_THREAD_TraceError>
    break;
 80100fe:	e018      	b.n	8010132 <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8010100:	6839      	ldr	r1, [r7, #0]
 8010102:	4812      	ldr	r0, [pc, #72]	; (801014c <APP_THREAD_Error+0xac>)
 8010104:	f000 f93e 	bl	8010384 <APP_THREAD_TraceError>
    break;
 8010108:	e013      	b.n	8010132 <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 801010a:	6839      	ldr	r1, [r7, #0]
 801010c:	4810      	ldr	r0, [pc, #64]	; (8010150 <APP_THREAD_Error+0xb0>)
 801010e:	f000 f939 	bl	8010384 <APP_THREAD_TraceError>
    break;
 8010112:	e00e      	b.n	8010132 <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8010114:	6839      	ldr	r1, [r7, #0]
 8010116:	480f      	ldr	r0, [pc, #60]	; (8010154 <APP_THREAD_Error+0xb4>)
 8010118:	f000 f934 	bl	8010384 <APP_THREAD_TraceError>
    break;
 801011c:	e009      	b.n	8010132 <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 801011e:	6839      	ldr	r1, [r7, #0]
 8010120:	480d      	ldr	r0, [pc, #52]	; (8010158 <APP_THREAD_Error+0xb8>)
 8010122:	f000 f92f 	bl	8010384 <APP_THREAD_TraceError>
    break;
 8010126:	e004      	b.n	8010132 <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8010128:	2100      	movs	r1, #0
 801012a:	480c      	ldr	r0, [pc, #48]	; (801015c <APP_THREAD_Error+0xbc>)
 801012c:	f000 f92a 	bl	8010384 <APP_THREAD_TraceError>
    break;
 8010130:	bf00      	nop
  }
}
 8010132:	bf00      	nop
 8010134:	3708      	adds	r7, #8
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}
 801013a:	bf00      	nop
 801013c:	08011a3c 	.word	0x08011a3c
 8010140:	08011a60 	.word	0x08011a60
 8010144:	08011a84 	.word	0x08011a84
 8010148:	08011aa4 	.word	0x08011aa4
 801014c:	08011ac4 	.word	0x08011ac4
 8010150:	08011ae4 	.word	0x08011ae4
 8010154:	08011b00 	.word	0x08011b00
 8010158:	08011b2c 	.word	0x08011b2c
 801015c:	08011b50 	.word	0x08011b50

08010160 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8010166:	2000      	movs	r0, #0
 8010168:	f7fb fab4 	bl	800b6d4 <otInstanceErasePersistentInfo>
 801016c:	4603      	mov	r3, r0
 801016e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8010170:	79fb      	ldrb	r3, [r7, #7]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d004      	beq.n	8010180 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8010176:	79fb      	ldrb	r3, [r7, #7]
 8010178:	4619      	mov	r1, r3
 801017a:	2006      	movs	r0, #6
 801017c:	f7ff ff90 	bl	80100a0 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8010180:	2000      	movs	r0, #0
 8010182:	f7fb fa4b 	bl	800b61c <otInstanceFinalize>
  otInstanceInitSingle();
 8010186:	f7fb fa22 	bl	800b5ce <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 801018a:	2200      	movs	r2, #0
 801018c:	4965      	ldr	r1, [pc, #404]	; (8010324 <APP_THREAD_DeviceConfig+0x1c4>)
 801018e:	2000      	movs	r0, #0
 8010190:	f7fb fa6a 	bl	800b668 <otSetStateChangedCallback>
 8010194:	4603      	mov	r3, r0
 8010196:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8010198:	79fb      	ldrb	r3, [r7, #7]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d004      	beq.n	80101a8 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 801019e:	79fb      	ldrb	r3, [r7, #7]
 80101a0:	4619      	mov	r1, r3
 80101a2:	2001      	movs	r0, #1
 80101a4:	f7ff ff7c 	bl	80100a0 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 80101a8:	2117      	movs	r1, #23
 80101aa:	2000      	movs	r0, #0
 80101ac:	f7fb faeb 	bl	800b786 <otLinkSetChannel>
 80101b0:	4603      	mov	r3, r0
 80101b2:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80101b4:	79fb      	ldrb	r3, [r7, #7]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d004      	beq.n	80101c4 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 80101ba:	79fb      	ldrb	r3, [r7, #7]
 80101bc:	4619      	mov	r1, r3
 80101be:	2002      	movs	r0, #2
 80101c0:	f7ff ff6e 	bl	80100a0 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 80101c4:	f241 2134 	movw	r1, #4660	; 0x1234
 80101c8:	2000      	movs	r0, #0
 80101ca:	f7fb fb0c 	bl	800b7e6 <otLinkSetPanId>
 80101ce:	4603      	mov	r3, r0
 80101d0:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80101d2:	79fb      	ldrb	r3, [r7, #7]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d004      	beq.n	80101e2 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 80101d8:	79fb      	ldrb	r3, [r7, #7]
 80101da:	4619      	mov	r1, r3
 80101dc:	2003      	movs	r0, #3
 80101de:	f7ff ff5f 	bl	80100a0 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 80101e2:	2101      	movs	r1, #1
 80101e4:	2000      	movs	r0, #0
 80101e6:	f7fb fa9e 	bl	800b726 <otIp6SetEnabled>
 80101ea:	4603      	mov	r3, r0
 80101ec:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80101ee:	79fb      	ldrb	r3, [r7, #7]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d004      	beq.n	80101fe <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 80101f4:	79fb      	ldrb	r3, [r7, #7]
 80101f6:	4619      	mov	r1, r3
 80101f8:	2004      	movs	r0, #4
 80101fa:	f7ff ff51 	bl	80100a0 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 80101fe:	2101      	movs	r1, #1
 8010200:	2000      	movs	r0, #0
 8010202:	f7fb fdbc 	bl	800bd7e <otThreadSetEnabled>
 8010206:	4603      	mov	r3, r0
 8010208:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801020a:	79fb      	ldrb	r3, [r7, #7]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d004      	beq.n	801021a <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8010210:	79fb      	ldrb	r3, [r7, #7]
 8010212:	4619      	mov	r1, r3
 8010214:	2005      	movs	r0, #5
 8010216:	f7ff ff43 	bl	80100a0 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 801021a:	2100      	movs	r1, #0
 801021c:	2000      	movs	r0, #0
 801021e:	f7fb fdae 	bl	800bd7e <otThreadSetEnabled>
 8010222:	4603      	mov	r3, r0
 8010224:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8010226:	79fb      	ldrb	r3, [r7, #7]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d004      	beq.n	8010236 <APP_THREAD_DeviceConfig+0xd6>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 801022c:	79fb      	ldrb	r3, [r7, #7]
 801022e:	4619      	mov	r1, r3
 8010230:	2005      	movs	r0, #5
 8010232:	f7ff ff35 	bl	80100a0 <APP_THREAD_Error>
  	}

  	error = otIp6SetEnabled(NULL, false);
 8010236:	2100      	movs	r1, #0
 8010238:	2000      	movs	r0, #0
 801023a:	f7fb fa74 	bl	800b726 <otIp6SetEnabled>
 801023e:	4603      	mov	r3, r0
 8010240:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8010242:	79fb      	ldrb	r3, [r7, #7]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d004      	beq.n	8010252 <APP_THREAD_DeviceConfig+0xf2>
  		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8010248:	79fb      	ldrb	r3, [r7, #7]
 801024a:	4619      	mov	r1, r3
 801024c:	2004      	movs	r0, #4
 801024e:	f7ff ff27 	bl	80100a0 <APP_THREAD_Error>
  	}

  	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8010252:	2106      	movs	r1, #6
 8010254:	2000      	movs	r0, #0
 8010256:	f7fb fd5f 	bl	800bd18 <otPlatRadioSetTransmitPower>
 801025a:	4603      	mov	r3, r0
 801025c:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 801025e:	79fb      	ldrb	r3, [r7, #7]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d004      	beq.n	801026e <APP_THREAD_DeviceConfig+0x10e>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8010264:	79fb      	ldrb	r3, [r7, #7]
 8010266:	4619      	mov	r1, r3
 8010268:	2002      	movs	r0, #2
 801026a:	f7ff ff19 	bl	80100a0 <APP_THREAD_Error>
  	}

  	otThreadSetChildTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 801026e:	2103      	movs	r1, #3
 8010270:	2000      	movs	r0, #0
 8010272:	f7fb fdb4 	bl	800bdde <otThreadSetChildTimeout>
  //	otChildSupervisionSetInterval(NULL, CHILD_SUPERVISION_INTERVAL);

  //   error = otIp6AddressFromString("ff12::1", &multicastAddr);
  //   error = otIp6SubscribeMulticastAddress(NULL, &multicastAddr);

  	error = otThreadSetMasterKey(NULL, &masterKey);
 8010276:	492c      	ldr	r1, [pc, #176]	; (8010328 <APP_THREAD_DeviceConfig+0x1c8>)
 8010278:	2000      	movs	r0, #0
 801027a:	f7fb fe0b 	bl	800be94 <otThreadSetMasterKey>
 801027e:	4603      	mov	r3, r0
 8010280:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8010282:	79fb      	ldrb	r3, [r7, #7]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d004      	beq.n	8010292 <APP_THREAD_DeviceConfig+0x132>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8010288:	79fb      	ldrb	r3, [r7, #7]
 801028a:	4619      	mov	r1, r3
 801028c:	2002      	movs	r0, #2
 801028e:	f7ff ff07 	bl	80100a0 <APP_THREAD_Error>
  	}

  	error = otThreadSetNetworkName(NULL, networkName);
 8010292:	4926      	ldr	r1, [pc, #152]	; (801032c <APP_THREAD_DeviceConfig+0x1cc>)
 8010294:	2000      	movs	r0, #0
 8010296:	f7fb fe2c 	bl	800bef2 <otThreadSetNetworkName>
 801029a:	4603      	mov	r3, r0
 801029c:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 801029e:	79fb      	ldrb	r3, [r7, #7]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d004      	beq.n	80102ae <APP_THREAD_DeviceConfig+0x14e>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80102a4:	79fb      	ldrb	r3, [r7, #7]
 80102a6:	4619      	mov	r1, r3
 80102a8:	2002      	movs	r0, #2
 80102aa:	f7ff fef9 	bl	80100a0 <APP_THREAD_Error>
  	}
  	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
 80102ae:	4920      	ldr	r1, [pc, #128]	; (8010330 <APP_THREAD_DeviceConfig+0x1d0>)
 80102b0:	2000      	movs	r0, #0
 80102b2:	f7fb fdc0 	bl	800be36 <otThreadSetExtendedPanId>
 80102b6:	4603      	mov	r3, r0
 80102b8:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 80102ba:	79fb      	ldrb	r3, [r7, #7]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d004      	beq.n	80102ca <APP_THREAD_DeviceConfig+0x16a>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 80102c0:	79fb      	ldrb	r3, [r7, #7]
 80102c2:	4619      	mov	r1, r3
 80102c4:	2002      	movs	r0, #2
 80102c6:	f7ff feeb 	bl	80100a0 <APP_THREAD_Error>
  	}

  	error = otIp6SetEnabled(NULL, true);
 80102ca:	2101      	movs	r1, #1
 80102cc:	2000      	movs	r0, #0
 80102ce:	f7fb fa2a 	bl	800b726 <otIp6SetEnabled>
 80102d2:	4603      	mov	r3, r0
 80102d4:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 80102d6:	79fb      	ldrb	r3, [r7, #7]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d004      	beq.n	80102e6 <APP_THREAD_DeviceConfig+0x186>
  		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 80102dc:	79fb      	ldrb	r3, [r7, #7]
 80102de:	4619      	mov	r1, r3
 80102e0:	2004      	movs	r0, #4
 80102e2:	f7ff fedd 	bl	80100a0 <APP_THREAD_Error>
  	}

  	error = otThreadSetEnabled(NULL, true);
 80102e6:	2101      	movs	r1, #1
 80102e8:	2000      	movs	r0, #0
 80102ea:	f7fb fd48 	bl	800bd7e <otThreadSetEnabled>
 80102ee:	4603      	mov	r3, r0
 80102f0:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 80102f2:	79fb      	ldrb	r3, [r7, #7]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d004      	beq.n	8010302 <APP_THREAD_DeviceConfig+0x1a2>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 80102f8:	79fb      	ldrb	r3, [r7, #7]
 80102fa:	4619      	mov	r1, r3
 80102fc:	2005      	movs	r0, #5
 80102fe:	f7ff fecf 	bl	80100a0 <APP_THREAD_Error>
  	}

  	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8010302:	f241 6133 	movw	r1, #5683	; 0x1633
 8010306:	2000      	movs	r0, #0
 8010308:	f7fb f8cf 	bl	800b4aa <otCoapStart>
 801030c:	4603      	mov	r3, r0
 801030e:	71fb      	strb	r3, [r7, #7]
//  	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);

  	error = otCoapAddResource(NULL, &OT_Node_Cal_Ressource);
 8010310:	4908      	ldr	r1, [pc, #32]	; (8010334 <APP_THREAD_DeviceConfig+0x1d4>)
 8010312:	2000      	movs	r0, #0
 8010314:	f7fb f8f9 	bl	800b50a <otCoapAddResource>
 8010318:	4603      	mov	r3, r0
 801031a:	71fb      	strb	r3, [r7, #7]
  	// set UID in local state variable
  //	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
  //	 = UID64_BASE;
//  	stm32UID(msgSendMyIP.uid);
  /* USER CODE END DEVICECONFIG */
}
 801031c:	bf00      	nop
 801031e:	3708      	adds	r7, #8
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	08010339 	.word	0x08010339
 8010328:	08011d90 	.word	0x08011d90
 801032c:	08011da8 	.word	0x08011da8
 8010330:	08011da0 	.word	0x08011da0
 8010334:	20000124 	.word	0x20000124

08010338 <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f003 0304 	and.w	r3, r3, #4
 8010348:	2b00      	cmp	r3, #0
 801034a:	d013      	beq.n	8010374 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 801034c:	2000      	movs	r0, #0
 801034e:	f7fb fdff 	bl	800bf50 <otThreadGetDeviceRole>
 8010352:	4603      	mov	r3, r0
 8010354:	2b04      	cmp	r3, #4
 8010356:	d80f      	bhi.n	8010378 <APP_THREAD_StateNotif+0x40>
 8010358:	a201      	add	r2, pc, #4	; (adr r2, 8010360 <APP_THREAD_StateNotif+0x28>)
 801035a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801035e:	bf00      	nop
 8010360:	08010379 	.word	0x08010379
 8010364:	08010379 	.word	0x08010379
 8010368:	08010379 	.word	0x08010379
 801036c:	08010379 	.word	0x08010379
 8010370:	08010379 	.word	0x08010379
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 8010374:	bf00      	nop
 8010376:	e000      	b.n	801037a <APP_THREAD_StateNotif+0x42>
      break;
 8010378:	bf00      	nop
}
 801037a:	bf00      	nop
 801037c:	3708      	adds	r7, #8
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop

08010384 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 801038e:	bf00      	nop
 8010390:	370c      	adds	r7, #12
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr
	...

0801039c <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b088      	sub	sp, #32
 80103a0:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 80103a2:	1d3b      	adds	r3, r7, #4
 80103a4:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 80103a6:	6978      	ldr	r0, [r7, #20]
 80103a8:	f7fa fa26 	bl	800a7f8 <SHCI_GetWirelessFwInfo>
 80103ac:	4603      	mov	r3, r0
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d004      	beq.n	80103bc <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80103b2:	2101      	movs	r1, #1
 80103b4:	2007      	movs	r0, #7
 80103b6:	f7ff fe73 	bl	80100a0 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 80103ba:	e03d      	b.n	8010438 <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 80103bc:	4a20      	ldr	r2, [pc, #128]	; (8010440 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 80103be:	2101      	movs	r1, #1
 80103c0:	2000      	movs	r0, #0
 80103c2:	f7f1 fc0f 	bl	8001be4 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 80103c6:	4a1f      	ldr	r2, [pc, #124]	; (8010444 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 80103c8:	2101      	movs	r1, #1
 80103ca:	2000      	movs	r0, #0
 80103cc:	f7f1 fc0a 	bl	8001be4 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	4619      	mov	r1, r3
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	785b      	ldrb	r3, [r3, #1]
 80103da:	461a      	mov	r2, r3
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	789b      	ldrb	r3, [r3, #2]
 80103e0:	9301      	str	r3, [sp, #4]
 80103e2:	9200      	str	r2, [sp, #0]
 80103e4:	460b      	mov	r3, r1
 80103e6:	4a18      	ldr	r2, [pc, #96]	; (8010448 <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 80103e8:	2101      	movs	r1, #1
 80103ea:	2000      	movs	r0, #0
 80103ec:	f7f1 fbfa 	bl	8001be4 <logApplication>
    switch(p_wireless_info->StackType)
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	7a5b      	ldrb	r3, [r3, #9]
 80103f4:	2b11      	cmp	r3, #17
 80103f6:	d009      	beq.n	801040c <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 80103f8:	2b50      	cmp	r3, #80	; 0x50
 80103fa:	d00d      	beq.n	8010418 <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 80103fc:	2b10      	cmp	r3, #16
 80103fe:	d111      	bne.n	8010424 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8010400:	4a12      	ldr	r2, [pc, #72]	; (801044c <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8010402:	2101      	movs	r1, #1
 8010404:	2000      	movs	r0, #0
 8010406:	f7f1 fbed 	bl	8001be4 <logApplication>
      break;
 801040a:	e010      	b.n	801042e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 801040c:	4a10      	ldr	r2, [pc, #64]	; (8010450 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 801040e:	2101      	movs	r1, #1
 8010410:	2000      	movs	r0, #0
 8010412:	f7f1 fbe7 	bl	8001be4 <logApplication>
      break;
 8010416:	e00a      	b.n	801042e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8010418:	4a0e      	ldr	r2, [pc, #56]	; (8010454 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 801041a:	2101      	movs	r1, #1
 801041c:	2000      	movs	r0, #0
 801041e:	f7f1 fbe1 	bl	8001be4 <logApplication>
      break;
 8010422:	e004      	b.n	801042e <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8010424:	2101      	movs	r1, #1
 8010426:	2007      	movs	r0, #7
 8010428:	f7ff fe3a 	bl	80100a0 <APP_THREAD_Error>
      break;
 801042c:	bf00      	nop
    APP_DBG("**********************************************************");
 801042e:	4a04      	ldr	r2, [pc, #16]	; (8010440 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8010430:	2101      	movs	r1, #1
 8010432:	2000      	movs	r0, #0
 8010434:	f7f1 fbd6 	bl	8001be4 <logApplication>
}
 8010438:	bf00      	nop
 801043a:	3718      	adds	r7, #24
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}
 8010440:	08011b60 	.word	0x08011b60
 8010444:	08011b9c 	.word	0x08011b9c
 8010448:	08011bb8 	.word	0x08011bb8
 801044c:	08011bd0 	.word	0x08011bd0
 8010450:	08011be8 	.word	0x08011be8
 8010454:	08011c00 	.word	0x08011c00

08010458 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8010460:	f04f 32ff 	mov.w	r2, #4294967295
 8010464:	2101      	movs	r1, #1
 8010466:	2001      	movs	r0, #1
 8010468:	f7fb ffc8 	bl	800c3fc <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 801046c:	f000 f9cc 	bl	8010808 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8010470:	e7f6      	b.n	8010460 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08010472 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8010472:	b580      	push	{r7, lr}
 8010474:	b082      	sub	sp, #8
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801047a:	f04f 32ff 	mov.w	r2, #4294967295
 801047e:	2101      	movs	r1, #1
 8010480:	2001      	movs	r0, #1
 8010482:	f7fb ffbb 	bl	800c3fc <osThreadFlagsWait>
    Send_CLI_To_M0();
 8010486:	f000 f941 	bl	801070c <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801048a:	e7f6      	b.n	801047a <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

0801048c <APP_THREAD_DummyReqHandler>:

/* USER CODE END FREERTOS_WRAPPER_FUNCTIONS */

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void APP_THREAD_DummyReqHandler(void *p_context, otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 801048c:	b480      	push	{r7}
 801048e:	b085      	sub	sp, #20
 8010490:	af00      	add	r7, sp, #0
 8010492:	60f8      	str	r0, [r7, #12]
 8010494:	60b9      	str	r1, [r7, #8]
 8010496:	607a      	str	r2, [r7, #4]
 8010498:	603b      	str	r3, [r7, #0]
	tempMessageInfo = pMessageInfo;
 801049a:	4a06      	ldr	r2, [pc, #24]	; (80104b4 <APP_THREAD_DummyReqHandler+0x28>)
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	6013      	str	r3, [r2, #0]
	receivedMessage = (otMessageInfo*) pMessage;
 80104a0:	4a05      	ldr	r2, [pc, #20]	; (80104b8 <APP_THREAD_DummyReqHandler+0x2c>)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6013      	str	r3, [r2, #0]
}
 80104a6:	bf00      	nop
 80104a8:	3714      	adds	r7, #20
 80104aa:	46bd      	mov	sp, r7
 80104ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop
 80104b4:	20004f1c 	.word	0x20004f1c
 80104b8:	20004f3c 	.word	0x20004f3c

080104bc <APP_THREAD_CoapNodeCalRequestHandler>:

static void APP_THREAD_CoapNodeCalRequestHandler(otCoapHeader *pHeader, otMessage *pMessage,
		const otMessageInfo *pMessageInfo) {
 80104bc:	b580      	push	{r7, lr}
 80104be:	b084      	sub	sp, #16
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	60b9      	str	r1, [r7, #8]
 80104c6:	607a      	str	r2, [r7, #4]
//		}

//		receivedMessage = (otMessageInfo*) pMessage;

		// send info if requested
		if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET) {
 80104c8:	68f8      	ldr	r0, [r7, #12]
 80104ca:	f7fa ff09 	bl	800b2e0 <otCoapHeaderGetCode>
 80104ce:	4603      	mov	r3, r0
 80104d0:	2b01      	cmp	r3, #1
 80104d2:	d00c      	beq.n	80104ee <APP_THREAD_CoapNodeCalRequestHandler+0x32>
//			APP_THREAD_SendMyInfo();

			break;
		}

		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	f7fa fed5 	bl	800b284 <otCoapHeaderGetType>
 80104da:	4603      	mov	r3, r0
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d107      	bne.n	80104f0 <APP_THREAD_CoapNodeCalRequestHandler+0x34>
			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	68fa      	ldr	r2, [r7, #12]
 80104e4:	2100      	movs	r1, #0
 80104e6:	2000      	movs	r0, #0
 80104e8:	f000 f806 	bl	80104f8 <APP_THREAD_SendDataResponse>
		}

	} while (false);
}
 80104ec:	e000      	b.n	80104f0 <APP_THREAD_CoapNodeCalRequestHandler+0x34>
			break;
 80104ee:	bf00      	nop
}
 80104f0:	bf00      	nop
 80104f2:	3710      	adds	r7, #16
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}

080104f8 <APP_THREAD_SendDataResponse>:
request and the Acknowledgement MUST match, and the tokens of the
response and original request MUST match.  In a separate
response, just the tokens of the response and original request
MUST match.*/

static void APP_THREAD_SendDataResponse(void *message, uint16_t msgSize, otCoapHeader *pRequestHeader, const otMessageInfo *pMessageInfo) {
 80104f8:	b590      	push	{r4, r7, lr}
 80104fa:	b087      	sub	sp, #28
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	607a      	str	r2, [r7, #4]
 8010502:	603b      	str	r3, [r7, #0]
 8010504:	460b      	mov	r3, r1
 8010506:	817b      	strh	r3, [r7, #10]
	otError error = OT_ERROR_NONE;
 8010508:	2300      	movs	r3, #0
 801050a:	75fb      	strb	r3, [r7, #23]

	//APP_DBG(" ********* APP_THREAD_SendDataResponse \r\n");
	otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 801050c:	2244      	movs	r2, #68	; 0x44
 801050e:	2120      	movs	r1, #32
 8010510:	4826      	ldr	r0, [pc, #152]	; (80105ac <APP_THREAD_SendDataResponse+0xb4>)
 8010512:	f7fa fdbd 	bl	800b090 <otCoapHeaderInit>
	otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f7fa ff10 	bl	800b33c <otCoapHeaderGetMessageId>
 801051c:	4603      	mov	r3, r0
 801051e:	4619      	mov	r1, r3
 8010520:	4822      	ldr	r0, [pc, #136]	; (80105ac <APP_THREAD_SendDataResponse+0xb4>)
 8010522:	f7fa fe7f 	bl	800b224 <otCoapHeaderSetMessageId>
	otCoapHeaderSetToken(&OT_Header, otCoapHeaderGetToken(pRequestHeader), otCoapHeaderGetTokenLength(pRequestHeader));
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7fa ff64 	bl	800b3f4 <otCoapHeaderGetToken>
 801052c:	4604      	mov	r4, r0
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f7fa ff32 	bl	800b398 <otCoapHeaderGetTokenLength>
 8010534:	4603      	mov	r3, r0
 8010536:	461a      	mov	r2, r3
 8010538:	4621      	mov	r1, r4
 801053a:	481c      	ldr	r0, [pc, #112]	; (80105ac <APP_THREAD_SendDataResponse+0xb4>)
 801053c:	f7fa fddd 	bl	800b0fa <otCoapHeaderSetToken>

	if (msgSize > 0){
 8010540:	897b      	ldrh	r3, [r7, #10]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d006      	beq.n	8010554 <APP_THREAD_SendDataResponse+0x5c>
		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8010546:	212a      	movs	r1, #42	; 0x2a
 8010548:	4818      	ldr	r0, [pc, #96]	; (80105ac <APP_THREAD_SendDataResponse+0xb4>)
 801054a:	f7fa fe0a 	bl	800b162 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 801054e:	4817      	ldr	r0, [pc, #92]	; (80105ac <APP_THREAD_SendDataResponse+0xb4>)
 8010550:	f7fa fe3a 	bl	800b1c8 <otCoapHeaderSetPayloadMarker>
	}

	pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8010554:	4915      	ldr	r1, [pc, #84]	; (80105ac <APP_THREAD_SendDataResponse+0xb4>)
 8010556:	2000      	movs	r0, #0
 8010558:	f7fa ff79 	bl	800b44e <otCoapNewMessage>
 801055c:	4602      	mov	r2, r0
 801055e:	4b14      	ldr	r3, [pc, #80]	; (80105b0 <APP_THREAD_SendDataResponse+0xb8>)
 8010560:	601a      	str	r2, [r3, #0]
	if (pOT_Message == NULL) {
		//APP_THREAD_Error(ERR_NEW_MSG_ALLOC,error);
	}

	// append message if there was one given
	if (msgSize > 0) {
 8010562:	897b      	ldrh	r3, [r7, #10]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d008      	beq.n	801057a <APP_THREAD_SendDataResponse+0x82>
		error = otMessageAppend(pOT_Message, message, msgSize);
 8010568:	4b11      	ldr	r3, [pc, #68]	; (80105b0 <APP_THREAD_SendDataResponse+0xb8>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	897a      	ldrh	r2, [r7, #10]
 801056e:	68f9      	ldr	r1, [r7, #12]
 8010570:	4618      	mov	r0, r3
 8010572:	f7fb f993 	bl	800b89c <otMessageAppend>
 8010576:	4603      	mov	r3, r0
 8010578:	75fb      	strb	r3, [r7, #23]
	}

	error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 801057a:	4b0d      	ldr	r3, [pc, #52]	; (80105b0 <APP_THREAD_SendDataResponse+0xb8>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	683a      	ldr	r2, [r7, #0]
 8010580:	4619      	mov	r1, r3
 8010582:	2000      	movs	r0, #0
 8010584:	f7fa fff0 	bl	800b568 <otCoapSendResponse>
 8010588:	4603      	mov	r3, r0
 801058a:	75fb      	strb	r3, [r7, #23]
	if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 801058c:	7dfb      	ldrb	r3, [r7, #23]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d008      	beq.n	80105a4 <APP_THREAD_SendDataResponse+0xac>
 8010592:	4b07      	ldr	r3, [pc, #28]	; (80105b0 <APP_THREAD_SendDataResponse+0xb8>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d004      	beq.n	80105a4 <APP_THREAD_SendDataResponse+0xac>
		otMessageFree(pOT_Message);
 801059a:	4b05      	ldr	r3, [pc, #20]	; (80105b0 <APP_THREAD_SendDataResponse+0xb8>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	4618      	mov	r0, r3
 80105a0:	f7fb f951 	bl	800b846 <otMessageFree>
		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
	}
}
 80105a4:	bf00      	nop
 80105a6:	371c      	adds	r7, #28
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd90      	pop	{r4, r7, pc}
 80105ac:	20004a3c 	.word	0x20004a3c
 80105b0:	20004a38 	.word	0x20004a38

080105b4 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 80105bc:	4a04      	ldr	r2, [pc, #16]	; (80105d0 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6013      	str	r3, [r2, #0]
}
 80105c2:	bf00      	nop
 80105c4:	370c      	adds	r7, #12
 80105c6:	46bd      	mov	sp, r7
 80105c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105cc:	4770      	bx	lr
 80105ce:	bf00      	nop
 80105d0:	20004a20 	.word	0x20004a20

080105d4 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 80105d4:	b480      	push	{r7}
 80105d6:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 80105d8:	4b03      	ldr	r3, [pc, #12]	; (80105e8 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	330c      	adds	r3, #12
}
 80105de:	4618      	mov	r0, r3
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr
 80105e8:	20004a20 	.word	0x20004a20

080105ec <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 80105ec:	b480      	push	{r7}
 80105ee:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 80105f0:	4b03      	ldr	r3, [pc, #12]	; (8010600 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	330b      	adds	r3, #11
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr
 8010600:	20004a20 	.word	0x20004a20

08010604 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 8010604:	b480      	push	{r7}
 8010606:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8010608:	4b03      	ldr	r3, [pc, #12]	; (8010618 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	330b      	adds	r3, #11
}
 801060e:	4618      	mov	r0, r3
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr
 8010618:	20004a24 	.word	0x20004a24

0801061c <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8010622:	4b0f      	ldr	r3, [pc, #60]	; (8010660 <Ot_Cmd_Transfer+0x44>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2200      	movs	r2, #0
 8010628:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801062c:	725a      	strb	r2, [r3, #9]
 801062e:	2200      	movs	r2, #0
 8010630:	f042 0202 	orr.w	r2, r2, #2
 8010634:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 8010636:	4b0a      	ldr	r3, [pc, #40]	; (8010660 <Ot_Cmd_Transfer+0x44>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	330c      	adds	r3, #12
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	3302      	adds	r3, #2
 8010640:	009b      	lsls	r3, r3, #2
 8010642:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 8010644:	4b06      	ldr	r3, [pc, #24]	; (8010660 <Ot_Cmd_Transfer+0x44>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	687a      	ldr	r2, [r7, #4]
 801064a:	b2d2      	uxtb	r2, r2
 801064c:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 801064e:	f7fa fbc9 	bl	800ade4 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8010652:	f000 f829 	bl	80106a8 <Wait_Getting_Ack_From_M0>
}
 8010656:	bf00      	nop
 8010658:	3708      	adds	r7, #8
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	20004a20 	.word	0x20004a20

08010664 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 801066c:	f000 f82e 	bl	80106cc <Receive_Ack_From_M0>
}
 8010670:	bf00      	nop
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 8010680:	4a04      	ldr	r2, [pc, #16]	; (8010694 <TL_THREAD_NotReceived+0x1c>)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8010686:	f000 f82d 	bl	80106e4 <Receive_Notification_From_M0>
}
 801068a:	bf00      	nop
 801068c:	3708      	adds	r7, #8
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
 8010692:	bf00      	nop
 8010694:	20004a24 	.word	0x20004a24

08010698 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8010698:	b480      	push	{r7}
 801069a:	af00      	add	r7, sp, #0

}
 801069c:	bf00      	nop
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr
	...

080106a8 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 80106a8:	b480      	push	{r7}
 80106aa:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 80106ac:	bf00      	nop
 80106ae:	4b06      	ldr	r3, [pc, #24]	; (80106c8 <Wait_Getting_Ack_From_M0+0x20>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d0fb      	beq.n	80106ae <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 80106b6:	4b04      	ldr	r3, [pc, #16]	; (80106c8 <Wait_Getting_Ack_From_M0+0x20>)
 80106b8:	2200      	movs	r2, #0
 80106ba:	601a      	str	r2, [r3, #0]
}
 80106bc:	bf00      	nop
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr
 80106c6:	bf00      	nop
 80106c8:	20004a2c 	.word	0x20004a2c

080106cc <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 80106cc:	b480      	push	{r7}
 80106ce:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 80106d0:	4b03      	ldr	r3, [pc, #12]	; (80106e0 <Receive_Ack_From_M0+0x14>)
 80106d2:	2201      	movs	r2, #1
 80106d4:	601a      	str	r2, [r3, #0]
}
 80106d6:	bf00      	nop
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr
 80106e0:	20004a2c 	.word	0x20004a2c

080106e4 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 80106e8:	4b06      	ldr	r3, [pc, #24]	; (8010704 <Receive_Notification_From_M0+0x20>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	3301      	adds	r3, #1
 80106ee:	4a05      	ldr	r2, [pc, #20]	; (8010704 <Receive_Notification_From_M0+0x20>)
 80106f0:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 80106f2:	4b05      	ldr	r3, [pc, #20]	; (8010708 <Receive_Notification_From_M0+0x24>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	2101      	movs	r1, #1
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7fb fe1d 	bl	800c338 <osThreadFlagsSet>
}
 80106fe:	bf00      	nop
 8010700:	bd80      	pop	{r7, pc}
 8010702:	bf00      	nop
 8010704:	20004a28 	.word	0x20004a28
 8010708:	20004a30 	.word	0x20004a30

0801070c <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8010710:	22ff      	movs	r2, #255	; 0xff
 8010712:	2100      	movs	r1, #0
 8010714:	4812      	ldr	r0, [pc, #72]	; (8010760 <Send_CLI_To_M0+0x54>)
 8010716:	f001 f8fa 	bl	801190e <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 801071a:	4b12      	ldr	r3, [pc, #72]	; (8010764 <Send_CLI_To_M0+0x58>)
 801071c:	881b      	ldrh	r3, [r3, #0]
 801071e:	b29b      	uxth	r3, r3
 8010720:	461a      	mov	r2, r3
 8010722:	4911      	ldr	r1, [pc, #68]	; (8010768 <Send_CLI_To_M0+0x5c>)
 8010724:	480e      	ldr	r0, [pc, #56]	; (8010760 <Send_CLI_To_M0+0x54>)
 8010726:	f001 f8e7 	bl	80118f8 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 801072a:	4b0e      	ldr	r3, [pc, #56]	; (8010764 <Send_CLI_To_M0+0x58>)
 801072c:	881b      	ldrh	r3, [r3, #0]
 801072e:	b29b      	uxth	r3, r3
 8010730:	b2da      	uxtb	r2, r3
 8010732:	4b0e      	ldr	r3, [pc, #56]	; (801076c <Send_CLI_To_M0+0x60>)
 8010734:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 8010736:	4b0d      	ldr	r3, [pc, #52]	; (801076c <Send_CLI_To_M0+0x60>)
 8010738:	2200      	movs	r2, #0
 801073a:	725a      	strb	r2, [r3, #9]
 801073c:	2200      	movs	r2, #0
 801073e:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8010740:	4b0b      	ldr	r3, [pc, #44]	; (8010770 <Send_CLI_To_M0+0x64>)
 8010742:	2200      	movs	r2, #0
 8010744:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 8010746:	4b07      	ldr	r3, [pc, #28]	; (8010764 <Send_CLI_To_M0+0x58>)
 8010748:	2200      	movs	r2, #0
 801074a:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 801074c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010750:	2100      	movs	r1, #0
 8010752:	4805      	ldr	r0, [pc, #20]	; (8010768 <Send_CLI_To_M0+0x5c>)
 8010754:	f001 f8db 	bl	801190e <memset>

  TL_CLI_SendCmd();
 8010758:	f7fa fb52 	bl	800ae00 <TL_CLI_SendCmd>
}
 801075c:	bf00      	nop
 801075e:	bd80      	pop	{r7, pc}
 8010760:	20030a58 	.word	0x20030a58
 8010764:	20004a1c 	.word	0x20004a1c
 8010768:	2000491c 	.word	0x2000491c
 801076c:	20030a4c 	.word	0x20030a4c
 8010770:	20004a1e 	.word	0x20004a1e

08010774 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8010778:	f7fa fb5e 	bl	800ae38 <TL_THREAD_CliSendAck>
}
 801077c:	bf00      	nop
 801077e:	bd80      	pop	{r7, pc}

08010780 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8010784:	4a04      	ldr	r2, [pc, #16]	; (8010798 <APP_THREAD_Init_UART_CLI+0x18>)
 8010786:	2100      	movs	r1, #0
 8010788:	4804      	ldr	r0, [pc, #16]	; (801079c <APP_THREAD_Init_UART_CLI+0x1c>)
 801078a:	f7fb fd2f 	bl	800c1ec <osThreadNew>
 801078e:	4602      	mov	r2, r0
 8010790:	4b03      	ldr	r3, [pc, #12]	; (80107a0 <APP_THREAD_Init_UART_CLI+0x20>)
 8010792:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8010794:	bf00      	nop
 8010796:	bd80      	pop	{r7, pc}
 8010798:	08011d6c 	.word	0x08011d6c
 801079c:	08010473 	.word	0x08010473
 80107a0:	20004a34 	.word	0x20004a34

080107a4 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 80107a8:	4b06      	ldr	r3, [pc, #24]	; (80107c4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80107aa:	4a07      	ldr	r2, [pc, #28]	; (80107c8 <APP_THREAD_TL_THREAD_INIT+0x24>)
 80107ac:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 80107ae:	4b05      	ldr	r3, [pc, #20]	; (80107c4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80107b0:	4a06      	ldr	r2, [pc, #24]	; (80107cc <APP_THREAD_TL_THREAD_INIT+0x28>)
 80107b2:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 80107b4:	4b03      	ldr	r3, [pc, #12]	; (80107c4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80107b6:	4a06      	ldr	r2, [pc, #24]	; (80107d0 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 80107b8:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 80107ba:	4802      	ldr	r0, [pc, #8]	; (80107c4 <APP_THREAD_TL_THREAD_INIT+0x20>)
 80107bc:	f7fa faf6 	bl	800adac <TL_THREAD_Init>
}
 80107c0:	bf00      	nop
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	200300d4 	.word	0x200300d4
 80107c8:	20030834 	.word	0x20030834
 80107cc:	20030940 	.word	0x20030940
 80107d0:	20030a4c 	.word	0x20030a4c

080107d4 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	7adb      	ldrb	r3, [r3, #11]
 80107e4:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	330c      	adds	r3, #12
 80107ea:	4906      	ldr	r1, [pc, #24]	; (8010804 <TL_THREAD_CliNotReceived+0x30>)
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7ef fcc7 	bl	8000180 <strcmp>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d101      	bne.n	80107fc <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 80107f8:	f7ff ffbc 	bl	8010774 <Send_CLI_Ack_For_OT>
  }
}
 80107fc:	bf00      	nop
 80107fe:	3710      	adds	r7, #16
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	08011c2c 	.word	0x08011c2c

08010808 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 801080c:	4b09      	ldr	r3, [pc, #36]	; (8010834 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d00d      	beq.n	8010830 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8010814:	4b07      	ldr	r3, [pc, #28]	; (8010834 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	2b01      	cmp	r3, #1
 801081a:	d904      	bls.n	8010826 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 801081c:	2100      	movs	r1, #0
 801081e:	2000      	movs	r0, #0
 8010820:	f7ff fc3e 	bl	80100a0 <APP_THREAD_Error>
 8010824:	e001      	b.n	801082a <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8010826:	f7fb f871 	bl	800b90c <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 801082a:	4b02      	ldr	r3, [pc, #8]	; (8010834 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 801082c:	2200      	movs	r2, #0
 801082e:	601a      	str	r2, [r3, #0]
  }
}
 8010830:	bf00      	nop
 8010832:	bd80      	pop	{r7, pc}
 8010834:	20004a28 	.word	0x20004a28

08010838 <LL_PWR_EnableBootC2>:
{
 8010838:	b480      	push	{r7}
 801083a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 801083c:	4b05      	ldr	r3, [pc, #20]	; (8010854 <LL_PWR_EnableBootC2+0x1c>)
 801083e:	68db      	ldr	r3, [r3, #12]
 8010840:	4a04      	ldr	r2, [pc, #16]	; (8010854 <LL_PWR_EnableBootC2+0x1c>)
 8010842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010846:	60d3      	str	r3, [r2, #12]
}
 8010848:	bf00      	nop
 801084a:	46bd      	mov	sp, r7
 801084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010850:	4770      	bx	lr
 8010852:	bf00      	nop
 8010854:	58000400 	.word	0x58000400

08010858 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8010858:	b480      	push	{r7}
 801085a:	b083      	sub	sp, #12
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8010860:	4b06      	ldr	r3, [pc, #24]	; (801087c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010862:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8010866:	4905      	ldr	r1, [pc, #20]	; (801087c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	4313      	orrs	r3, r2
 801086c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8010870:	bf00      	nop
 8010872:	370c      	adds	r7, #12
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr
 801087c:	58000800 	.word	0x58000800

08010880 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8010880:	b480      	push	{r7}
 8010882:	b083      	sub	sp, #12
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8010888:	4b05      	ldr	r3, [pc, #20]	; (80108a0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801088a:	6a1a      	ldr	r2, [r3, #32]
 801088c:	4904      	ldr	r1, [pc, #16]	; (80108a0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	4313      	orrs	r3, r2
 8010892:	620b      	str	r3, [r1, #32]
}
 8010894:	bf00      	nop
 8010896:	370c      	adds	r7, #12
 8010898:	46bd      	mov	sp, r7
 801089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089e:	4770      	bx	lr
 80108a0:	58000800 	.word	0x58000800

080108a4 <LL_AHB3_GRP1_EnableClock>:
{
 80108a4:	b480      	push	{r7}
 80108a6:	b085      	sub	sp, #20
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80108ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80108b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	4313      	orrs	r3, r2
 80108ba:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80108bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80108c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	4013      	ands	r3, r2
 80108c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80108c8:	68fb      	ldr	r3, [r7, #12]
}
 80108ca:	bf00      	nop
 80108cc:	3714      	adds	r7, #20
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr

080108d6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80108d6:	b480      	push	{r7}
 80108d8:	b085      	sub	sp, #20
 80108da:	af00      	add	r7, sp, #0
 80108dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80108de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80108e2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80108e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	4313      	orrs	r3, r2
 80108ee:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80108f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80108f6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4013      	ands	r3, r2
 80108fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010900:	68fb      	ldr	r3, [r7, #12]
}
 8010902:	bf00      	nop
 8010904:	3714      	adds	r7, #20
 8010906:	46bd      	mov	sp, r7
 8010908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090c:	4770      	bx	lr

0801090e <LL_C1_IPCC_EnableIT_TXF>:
{
 801090e:	b480      	push	{r7}
 8010910:	b083      	sub	sp, #12
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	601a      	str	r2, [r3, #0]
}
 8010922:	bf00      	nop
 8010924:	370c      	adds	r7, #12
 8010926:	46bd      	mov	sp, r7
 8010928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092c:	4770      	bx	lr

0801092e <LL_C1_IPCC_EnableIT_RXO>:
{
 801092e:	b480      	push	{r7}
 8010930:	b083      	sub	sp, #12
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f043 0201 	orr.w	r2, r3, #1
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	601a      	str	r2, [r3, #0]
}
 8010942:	bf00      	nop
 8010944:	370c      	adds	r7, #12
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr

0801094e <LL_C1_IPCC_EnableTransmitChannel>:
{
 801094e:	b480      	push	{r7}
 8010950:	b083      	sub	sp, #12
 8010952:	af00      	add	r7, sp, #0
 8010954:	6078      	str	r0, [r7, #4]
 8010956:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	685a      	ldr	r2, [r3, #4]
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	041b      	lsls	r3, r3, #16
 8010960:	43db      	mvns	r3, r3
 8010962:	401a      	ands	r2, r3
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	605a      	str	r2, [r3, #4]
}
 8010968:	bf00      	nop
 801096a:	370c      	adds	r7, #12
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr

08010974 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8010974:	b480      	push	{r7}
 8010976:	b083      	sub	sp, #12
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	685a      	ldr	r2, [r3, #4]
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	041b      	lsls	r3, r3, #16
 8010986:	431a      	orrs	r2, r3
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	605a      	str	r2, [r3, #4]
}
 801098c:	bf00      	nop
 801098e:	370c      	adds	r7, #12
 8010990:	46bd      	mov	sp, r7
 8010992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010996:	4770      	bx	lr

08010998 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8010998:	b480      	push	{r7}
 801099a:	b083      	sub	sp, #12
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	685a      	ldr	r2, [r3, #4]
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	43db      	mvns	r3, r3
 80109aa:	401a      	ands	r2, r3
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	605a      	str	r2, [r3, #4]
}
 80109b0:	bf00      	nop
 80109b2:	370c      	adds	r7, #12
 80109b4:	46bd      	mov	sp, r7
 80109b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ba:	4770      	bx	lr

080109bc <LL_C1_IPCC_DisableReceiveChannel>:
{
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	685a      	ldr	r2, [r3, #4]
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	431a      	orrs	r2, r3
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	605a      	str	r2, [r3, #4]
}
 80109d2:	bf00      	nop
 80109d4:	370c      	adds	r7, #12
 80109d6:	46bd      	mov	sp, r7
 80109d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109dc:	4770      	bx	lr

080109de <LL_C1_IPCC_ClearFlag_CHx>:
{
 80109de:	b480      	push	{r7}
 80109e0:	b083      	sub	sp, #12
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	6078      	str	r0, [r7, #4]
 80109e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	683a      	ldr	r2, [r7, #0]
 80109ec:	609a      	str	r2, [r3, #8]
}
 80109ee:	bf00      	nop
 80109f0:	370c      	adds	r7, #12
 80109f2:	46bd      	mov	sp, r7
 80109f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f8:	4770      	bx	lr

080109fa <LL_C1_IPCC_SetFlag_CHx>:
{
 80109fa:	b480      	push	{r7}
 80109fc:	b083      	sub	sp, #12
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
 8010a02:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	041a      	lsls	r2, r3, #16
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	609a      	str	r2, [r3, #8]
}
 8010a0c:	bf00      	nop
 8010a0e:	370c      	adds	r7, #12
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr

08010a18 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8010a18:	b480      	push	{r7}
 8010a1a:	b083      	sub	sp, #12
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	68da      	ldr	r2, [r3, #12]
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	4013      	ands	r3, r2
 8010a2a:	683a      	ldr	r2, [r7, #0]
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d101      	bne.n	8010a34 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8010a30:	2301      	movs	r3, #1
 8010a32:	e000      	b.n	8010a36 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8010a34:	2300      	movs	r3, #0
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	370c      	adds	r7, #12
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr

08010a42 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8010a42:	b480      	push	{r7}
 8010a44:	b083      	sub	sp, #12
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	6078      	str	r0, [r7, #4]
 8010a4a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	69da      	ldr	r2, [r3, #28]
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	4013      	ands	r3, r2
 8010a54:	683a      	ldr	r2, [r7, #0]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d101      	bne.n	8010a5e <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e000      	b.n	8010a60 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8010a5e:	2300      	movs	r3, #0
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	370c      	adds	r7, #12
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr

08010a6c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8010a70:	2102      	movs	r1, #2
 8010a72:	482a      	ldr	r0, [pc, #168]	; (8010b1c <HW_IPCC_Rx_Handler+0xb0>)
 8010a74:	f7ff ffe5 	bl	8010a42 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d009      	beq.n	8010a92 <HW_IPCC_Rx_Handler+0x26>
 8010a7e:	4b27      	ldr	r3, [pc, #156]	; (8010b1c <HW_IPCC_Rx_Handler+0xb0>)
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	43db      	mvns	r3, r3
 8010a84:	f003 0302 	and.w	r3, r3, #2
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d002      	beq.n	8010a92 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8010a8c:	f000 f90a 	bl	8010ca4 <HW_IPCC_SYS_EvtHandler>
 8010a90:	e041      	b.n	8010b16 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8010a92:	2104      	movs	r1, #4
 8010a94:	4821      	ldr	r0, [pc, #132]	; (8010b1c <HW_IPCC_Rx_Handler+0xb0>)
 8010a96:	f7ff ffd4 	bl	8010a42 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d009      	beq.n	8010ab4 <HW_IPCC_Rx_Handler+0x48>
 8010aa0:	4b1e      	ldr	r3, [pc, #120]	; (8010b1c <HW_IPCC_Rx_Handler+0xb0>)
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	43db      	mvns	r3, r3
 8010aa6:	f003 0304 	and.w	r3, r3, #4
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d002      	beq.n	8010ab4 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8010aae:	f000 f953 	bl	8010d58 <HW_IPCC_THREAD_NotEvtHandler>
 8010ab2:	e030      	b.n	8010b16 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8010ab4:	2110      	movs	r1, #16
 8010ab6:	4819      	ldr	r0, [pc, #100]	; (8010b1c <HW_IPCC_Rx_Handler+0xb0>)
 8010ab8:	f7ff ffc3 	bl	8010a42 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d009      	beq.n	8010ad6 <HW_IPCC_Rx_Handler+0x6a>
 8010ac2:	4b16      	ldr	r3, [pc, #88]	; (8010b1c <HW_IPCC_Rx_Handler+0xb0>)
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	43db      	mvns	r3, r3
 8010ac8:	f003 0310 	and.w	r3, r3, #16
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d002      	beq.n	8010ad6 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8010ad0:	f000 f94e 	bl	8010d70 <HW_IPCC_THREAD_CliNotEvtHandler>
 8010ad4:	e01f      	b.n	8010b16 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8010ad6:	2101      	movs	r1, #1
 8010ad8:	4810      	ldr	r0, [pc, #64]	; (8010b1c <HW_IPCC_Rx_Handler+0xb0>)
 8010ada:	f7ff ffb2 	bl	8010a42 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d008      	beq.n	8010af6 <HW_IPCC_Rx_Handler+0x8a>
 8010ae4:	4b0d      	ldr	r3, [pc, #52]	; (8010b1c <HW_IPCC_Rx_Handler+0xb0>)
 8010ae6:	685b      	ldr	r3, [r3, #4]
 8010ae8:	f003 0301 	and.w	r3, r3, #1
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d102      	bne.n	8010af6 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8010af0:	f000 f89c 	bl	8010c2c <HW_IPCC_BLE_EvtHandler>
 8010af4:	e00f      	b.n	8010b16 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8010af6:	2108      	movs	r1, #8
 8010af8:	4808      	ldr	r0, [pc, #32]	; (8010b1c <HW_IPCC_Rx_Handler+0xb0>)
 8010afa:	f7ff ffa2 	bl	8010a42 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d009      	beq.n	8010b18 <HW_IPCC_Rx_Handler+0xac>
 8010b04:	4b05      	ldr	r3, [pc, #20]	; (8010b1c <HW_IPCC_Rx_Handler+0xb0>)
 8010b06:	685b      	ldr	r3, [r3, #4]
 8010b08:	43db      	mvns	r3, r3
 8010b0a:	f003 0308 	and.w	r3, r3, #8
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d002      	beq.n	8010b18 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8010b12:	f000 f979 	bl	8010e08 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8010b16:	bf00      	nop
 8010b18:	bf00      	nop
}
 8010b1a:	bd80      	pop	{r7, pc}
 8010b1c:	58000c00 	.word	0x58000c00

08010b20 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8010b24:	2102      	movs	r1, #2
 8010b26:	482b      	ldr	r0, [pc, #172]	; (8010bd4 <HW_IPCC_Tx_Handler+0xb4>)
 8010b28:	f7ff ff76 	bl	8010a18 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d109      	bne.n	8010b46 <HW_IPCC_Tx_Handler+0x26>
 8010b32:	4b28      	ldr	r3, [pc, #160]	; (8010bd4 <HW_IPCC_Tx_Handler+0xb4>)
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	43db      	mvns	r3, r3
 8010b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d002      	beq.n	8010b46 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8010b40:	f000 f8a4 	bl	8010c8c <HW_IPCC_SYS_CmdEvtHandler>
 8010b44:	e042      	b.n	8010bcc <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8010b46:	2104      	movs	r1, #4
 8010b48:	4822      	ldr	r0, [pc, #136]	; (8010bd4 <HW_IPCC_Tx_Handler+0xb4>)
 8010b4a:	f7ff ff65 	bl	8010a18 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d109      	bne.n	8010b68 <HW_IPCC_Tx_Handler+0x48>
 8010b54:	4b1f      	ldr	r3, [pc, #124]	; (8010bd4 <HW_IPCC_Tx_Handler+0xb4>)
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	43db      	mvns	r3, r3
 8010b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d002      	beq.n	8010b68 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8010b62:	f000 f8ed 	bl	8010d40 <HW_IPCC_OT_CmdEvtHandler>
 8010b66:	e031      	b.n	8010bcc <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8010b68:	2102      	movs	r1, #2
 8010b6a:	481a      	ldr	r0, [pc, #104]	; (8010bd4 <HW_IPCC_Tx_Handler+0xb4>)
 8010b6c:	f7ff ff54 	bl	8010a18 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010b70:	4603      	mov	r3, r0
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d109      	bne.n	8010b8a <HW_IPCC_Tx_Handler+0x6a>
 8010b76:	4b17      	ldr	r3, [pc, #92]	; (8010bd4 <HW_IPCC_Tx_Handler+0xb4>)
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	43db      	mvns	r3, r3
 8010b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d002      	beq.n	8010b8a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8010b84:	f000 f882 	bl	8010c8c <HW_IPCC_SYS_CmdEvtHandler>
 8010b88:	e020      	b.n	8010bcc <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8010b8a:	2108      	movs	r1, #8
 8010b8c:	4811      	ldr	r0, [pc, #68]	; (8010bd4 <HW_IPCC_Tx_Handler+0xb4>)
 8010b8e:	f7ff ff43 	bl	8010a18 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d109      	bne.n	8010bac <HW_IPCC_Tx_Handler+0x8c>
 8010b98:	4b0e      	ldr	r3, [pc, #56]	; (8010bd4 <HW_IPCC_Tx_Handler+0xb4>)
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	43db      	mvns	r3, r3
 8010b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d002      	beq.n	8010bac <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8010ba6:	f000 f911 	bl	8010dcc <HW_IPCC_MM_FreeBufHandler>
 8010baa:	e00f      	b.n	8010bcc <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8010bac:	2120      	movs	r1, #32
 8010bae:	4809      	ldr	r0, [pc, #36]	; (8010bd4 <HW_IPCC_Tx_Handler+0xb4>)
 8010bb0:	f7ff ff32 	bl	8010a18 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d109      	bne.n	8010bce <HW_IPCC_Tx_Handler+0xae>
 8010bba:	4b06      	ldr	r3, [pc, #24]	; (8010bd4 <HW_IPCC_Tx_Handler+0xb4>)
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	43db      	mvns	r3, r3
 8010bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d002      	beq.n	8010bce <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8010bc8:	f000 f83c 	bl	8010c44 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8010bcc:	bf00      	nop
 8010bce:	bf00      	nop
}
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	58000c00 	.word	0x58000c00

08010bd8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8010bdc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010be0:	f7ff fe79 	bl	80108d6 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8010be4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010be8:	f7ff fe36 	bl	8010858 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8010bec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010bf0:	f7ff fe46 	bl	8010880 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8010bf4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8010bf6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8010bf8:	f7ff fe1e 	bl	8010838 <LL_PWR_EnableBootC2>

  return;
 8010bfc:	bf00      	nop
}
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8010c04:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010c08:	f7ff fe4c 	bl	80108a4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8010c0c:	4806      	ldr	r0, [pc, #24]	; (8010c28 <HW_IPCC_Init+0x28>)
 8010c0e:	f7ff fe8e 	bl	801092e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8010c12:	4805      	ldr	r0, [pc, #20]	; (8010c28 <HW_IPCC_Init+0x28>)
 8010c14:	f7ff fe7b 	bl	801090e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8010c18:	202c      	movs	r0, #44	; 0x2c
 8010c1a:	f7f2 fc44 	bl	80034a6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8010c1e:	202d      	movs	r0, #45	; 0x2d
 8010c20:	f7f2 fc41 	bl	80034a6 <HAL_NVIC_EnableIRQ>

  return;
 8010c24:	bf00      	nop
}
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	58000c00 	.word	0x58000c00

08010c2c <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8010c30:	f7fa f804 	bl	800ac3c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8010c34:	2101      	movs	r1, #1
 8010c36:	4802      	ldr	r0, [pc, #8]	; (8010c40 <HW_IPCC_BLE_EvtHandler+0x14>)
 8010c38:	f7ff fed1 	bl	80109de <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010c3c:	bf00      	nop
}
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	58000c00 	.word	0x58000c00

08010c44 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8010c48:	2120      	movs	r1, #32
 8010c4a:	4803      	ldr	r0, [pc, #12]	; (8010c58 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8010c4c:	f7ff fe92 	bl	8010974 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8010c50:	f7fa f824 	bl	800ac9c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8010c54:	bf00      	nop
}
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	58000c00 	.word	0x58000c00

08010c5c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010c60:	2102      	movs	r1, #2
 8010c62:	4802      	ldr	r0, [pc, #8]	; (8010c6c <HW_IPCC_SYS_Init+0x10>)
 8010c64:	f7ff fe98 	bl	8010998 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010c68:	bf00      	nop
}
 8010c6a:	bd80      	pop	{r7, pc}
 8010c6c:	58000c00 	.word	0x58000c00

08010c70 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010c74:	2102      	movs	r1, #2
 8010c76:	4804      	ldr	r0, [pc, #16]	; (8010c88 <HW_IPCC_SYS_SendCmd+0x18>)
 8010c78:	f7ff febf 	bl	80109fa <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010c7c:	2102      	movs	r1, #2
 8010c7e:	4802      	ldr	r0, [pc, #8]	; (8010c88 <HW_IPCC_SYS_SendCmd+0x18>)
 8010c80:	f7ff fe65 	bl	801094e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8010c84:	bf00      	nop
}
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	58000c00 	.word	0x58000c00

08010c8c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010c90:	2102      	movs	r1, #2
 8010c92:	4803      	ldr	r0, [pc, #12]	; (8010ca0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8010c94:	f7ff fe6e 	bl	8010974 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8010c98:	f7fa f850 	bl	800ad3c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8010c9c:	bf00      	nop
}
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	58000c00 	.word	0x58000c00

08010ca4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8010ca8:	f7fa f85e 	bl	800ad68 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010cac:	2102      	movs	r1, #2
 8010cae:	4802      	ldr	r0, [pc, #8]	; (8010cb8 <HW_IPCC_SYS_EvtHandler+0x14>)
 8010cb0:	f7ff fe95 	bl	80109de <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010cb4:	bf00      	nop
}
 8010cb6:	bd80      	pop	{r7, pc}
 8010cb8:	58000c00 	.word	0x58000c00

08010cbc <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8010cc0:	2104      	movs	r1, #4
 8010cc2:	4804      	ldr	r0, [pc, #16]	; (8010cd4 <HW_IPCC_THREAD_Init+0x18>)
 8010cc4:	f7ff fe68 	bl	8010998 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8010cc8:	2110      	movs	r1, #16
 8010cca:	4802      	ldr	r0, [pc, #8]	; (8010cd4 <HW_IPCC_THREAD_Init+0x18>)
 8010ccc:	f7ff fe64 	bl	8010998 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010cd0:	bf00      	nop
}
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	58000c00 	.word	0x58000c00

08010cd8 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8010cdc:	2104      	movs	r1, #4
 8010cde:	4804      	ldr	r0, [pc, #16]	; (8010cf0 <HW_IPCC_OT_SendCmd+0x18>)
 8010ce0:	f7ff fe8b 	bl	80109fa <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8010ce4:	2104      	movs	r1, #4
 8010ce6:	4802      	ldr	r0, [pc, #8]	; (8010cf0 <HW_IPCC_OT_SendCmd+0x18>)
 8010ce8:	f7ff fe31 	bl	801094e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8010cec:	bf00      	nop
}
 8010cee:	bd80      	pop	{r7, pc}
 8010cf0:	58000c00 	.word	0x58000c00

08010cf4 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8010cf8:	2110      	movs	r1, #16
 8010cfa:	4802      	ldr	r0, [pc, #8]	; (8010d04 <HW_IPCC_CLI_SendCmd+0x10>)
 8010cfc:	f7ff fe7d 	bl	80109fa <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010d00:	bf00      	nop
}
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	58000c00 	.word	0x58000c00

08010d08 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8010d0c:	2104      	movs	r1, #4
 8010d0e:	4804      	ldr	r0, [pc, #16]	; (8010d20 <HW_IPCC_THREAD_SendAck+0x18>)
 8010d10:	f7ff fe65 	bl	80109de <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8010d14:	2104      	movs	r1, #4
 8010d16:	4802      	ldr	r0, [pc, #8]	; (8010d20 <HW_IPCC_THREAD_SendAck+0x18>)
 8010d18:	f7ff fe3e 	bl	8010998 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010d1c:	bf00      	nop
}
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	58000c00 	.word	0x58000c00

08010d24 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8010d28:	2110      	movs	r1, #16
 8010d2a:	4804      	ldr	r0, [pc, #16]	; (8010d3c <HW_IPCC_THREAD_CliSendAck+0x18>)
 8010d2c:	f7ff fe57 	bl	80109de <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8010d30:	2110      	movs	r1, #16
 8010d32:	4802      	ldr	r0, [pc, #8]	; (8010d3c <HW_IPCC_THREAD_CliSendAck+0x18>)
 8010d34:	f7ff fe30 	bl	8010998 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010d38:	bf00      	nop
}
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	58000c00 	.word	0x58000c00

08010d40 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8010d44:	2104      	movs	r1, #4
 8010d46:	4803      	ldr	r0, [pc, #12]	; (8010d54 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8010d48:	f7ff fe14 	bl	8010974 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8010d4c:	f7fa f882 	bl	800ae54 <HW_IPCC_OT_CmdEvtNot>

  return;
 8010d50:	bf00      	nop
}
 8010d52:	bd80      	pop	{r7, pc}
 8010d54:	58000c00 	.word	0x58000c00

08010d58 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8010d5c:	2104      	movs	r1, #4
 8010d5e:	4803      	ldr	r0, [pc, #12]	; (8010d6c <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8010d60:	f7ff fe2c 	bl	80109bc <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8010d64:	f7fa f882 	bl	800ae6c <HW_IPCC_THREAD_EvtNot>

  return;
 8010d68:	bf00      	nop
}
 8010d6a:	bd80      	pop	{r7, pc}
 8010d6c:	58000c00 	.word	0x58000c00

08010d70 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8010d74:	2110      	movs	r1, #16
 8010d76:	4803      	ldr	r0, [pc, #12]	; (8010d84 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8010d78:	f7ff fe20 	bl	80109bc <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8010d7c:	f7fa f882 	bl	800ae84 <HW_IPCC_THREAD_CliEvtNot>

  return;
 8010d80:	bf00      	nop
}
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	58000c00 	.word	0x58000c00

08010d88 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8010d90:	2108      	movs	r1, #8
 8010d92:	480c      	ldr	r0, [pc, #48]	; (8010dc4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010d94:	f7ff fe40 	bl	8010a18 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d007      	beq.n	8010dae <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8010d9e:	4a0a      	ldr	r2, [pc, #40]	; (8010dc8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010da4:	2108      	movs	r1, #8
 8010da6:	4807      	ldr	r0, [pc, #28]	; (8010dc4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010da8:	f7ff fdd1 	bl	801094e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8010dac:	e006      	b.n	8010dbc <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010db2:	2108      	movs	r1, #8
 8010db4:	4803      	ldr	r0, [pc, #12]	; (8010dc4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010db6:	f7ff fe20 	bl	80109fa <LL_C1_IPCC_SetFlag_CHx>
  return;
 8010dba:	bf00      	nop
}
 8010dbc:	3708      	adds	r7, #8
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	58000c00 	.word	0x58000c00
 8010dc8:	20004acc 	.word	0x20004acc

08010dcc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010dd0:	2108      	movs	r1, #8
 8010dd2:	4806      	ldr	r0, [pc, #24]	; (8010dec <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010dd4:	f7ff fdce 	bl	8010974 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8010dd8:	4b05      	ldr	r3, [pc, #20]	; (8010df0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010dde:	2108      	movs	r1, #8
 8010de0:	4802      	ldr	r0, [pc, #8]	; (8010dec <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010de2:	f7ff fe0a 	bl	80109fa <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010de6:	bf00      	nop
}
 8010de8:	bd80      	pop	{r7, pc}
 8010dea:	bf00      	nop
 8010dec:	58000c00 	.word	0x58000c00
 8010df0:	20004acc 	.word	0x20004acc

08010df4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8010df8:	2108      	movs	r1, #8
 8010dfa:	4802      	ldr	r0, [pc, #8]	; (8010e04 <HW_IPCC_TRACES_Init+0x10>)
 8010dfc:	f7ff fdcc 	bl	8010998 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010e00:	bf00      	nop
}
 8010e02:	bd80      	pop	{r7, pc}
 8010e04:	58000c00 	.word	0x58000c00

08010e08 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8010e0c:	f7fa f8cc 	bl	800afa8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8010e10:	2108      	movs	r1, #8
 8010e12:	4802      	ldr	r0, [pc, #8]	; (8010e1c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8010e14:	f7ff fde3 	bl	80109de <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010e18:	bf00      	nop
}
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	58000c00 	.word	0x58000c00

08010e20 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010e24:	2200      	movs	r2, #0
 8010e26:	4912      	ldr	r1, [pc, #72]	; (8010e70 <MX_USB_Device_Init+0x50>)
 8010e28:	4812      	ldr	r0, [pc, #72]	; (8010e74 <MX_USB_Device_Init+0x54>)
 8010e2a:	f7f8 fba7 	bl	800957c <USBD_Init>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d001      	beq.n	8010e38 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010e34:	f7f0 fd6c 	bl	8001910 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010e38:	490f      	ldr	r1, [pc, #60]	; (8010e78 <MX_USB_Device_Init+0x58>)
 8010e3a:	480e      	ldr	r0, [pc, #56]	; (8010e74 <MX_USB_Device_Init+0x54>)
 8010e3c:	f7f8 fbce 	bl	80095dc <USBD_RegisterClass>
 8010e40:	4603      	mov	r3, r0
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d001      	beq.n	8010e4a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010e46:	f7f0 fd63 	bl	8001910 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010e4a:	490c      	ldr	r1, [pc, #48]	; (8010e7c <MX_USB_Device_Init+0x5c>)
 8010e4c:	4809      	ldr	r0, [pc, #36]	; (8010e74 <MX_USB_Device_Init+0x54>)
 8010e4e:	f7f8 fb1f 	bl	8009490 <USBD_CDC_RegisterInterface>
 8010e52:	4603      	mov	r3, r0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d001      	beq.n	8010e5c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010e58:	f7f0 fd5a 	bl	8001910 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010e5c:	4805      	ldr	r0, [pc, #20]	; (8010e74 <MX_USB_Device_Init+0x54>)
 8010e5e:	f7f8 fbe4 	bl	800962a <USBD_Start>
 8010e62:	4603      	mov	r3, r0
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d001      	beq.n	8010e6c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010e68:	f7f0 fd52 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010e6c:	bf00      	nop
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	20000148 	.word	0x20000148
 8010e74:	20004f50 	.word	0x20004f50
 8010e78:	2000001c 	.word	0x2000001c
 8010e7c:	20000134 	.word	0x20000134

08010e80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010e84:	2200      	movs	r2, #0
 8010e86:	4905      	ldr	r1, [pc, #20]	; (8010e9c <CDC_Init_FS+0x1c>)
 8010e88:	4805      	ldr	r0, [pc, #20]	; (8010ea0 <CDC_Init_FS+0x20>)
 8010e8a:	f7f8 fb16 	bl	80094ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010e8e:	4905      	ldr	r1, [pc, #20]	; (8010ea4 <CDC_Init_FS+0x24>)
 8010e90:	4803      	ldr	r0, [pc, #12]	; (8010ea0 <CDC_Init_FS+0x20>)
 8010e92:	f7f8 fb30 	bl	80094f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010e96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	20005a20 	.word	0x20005a20
 8010ea0:	20004f50 	.word	0x20004f50
 8010ea4:	20005220 	.word	0x20005220

08010ea8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010eac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr

08010eb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	6039      	str	r1, [r7, #0]
 8010ec2:	71fb      	strb	r3, [r7, #7]
 8010ec4:	4613      	mov	r3, r2
 8010ec6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010ec8:	79fb      	ldrb	r3, [r7, #7]
 8010eca:	2b23      	cmp	r3, #35	; 0x23
 8010ecc:	d84a      	bhi.n	8010f64 <CDC_Control_FS+0xac>
 8010ece:	a201      	add	r2, pc, #4	; (adr r2, 8010ed4 <CDC_Control_FS+0x1c>)
 8010ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ed4:	08010f65 	.word	0x08010f65
 8010ed8:	08010f65 	.word	0x08010f65
 8010edc:	08010f65 	.word	0x08010f65
 8010ee0:	08010f65 	.word	0x08010f65
 8010ee4:	08010f65 	.word	0x08010f65
 8010ee8:	08010f65 	.word	0x08010f65
 8010eec:	08010f65 	.word	0x08010f65
 8010ef0:	08010f65 	.word	0x08010f65
 8010ef4:	08010f65 	.word	0x08010f65
 8010ef8:	08010f65 	.word	0x08010f65
 8010efc:	08010f65 	.word	0x08010f65
 8010f00:	08010f65 	.word	0x08010f65
 8010f04:	08010f65 	.word	0x08010f65
 8010f08:	08010f65 	.word	0x08010f65
 8010f0c:	08010f65 	.word	0x08010f65
 8010f10:	08010f65 	.word	0x08010f65
 8010f14:	08010f65 	.word	0x08010f65
 8010f18:	08010f65 	.word	0x08010f65
 8010f1c:	08010f65 	.word	0x08010f65
 8010f20:	08010f65 	.word	0x08010f65
 8010f24:	08010f65 	.word	0x08010f65
 8010f28:	08010f65 	.word	0x08010f65
 8010f2c:	08010f65 	.word	0x08010f65
 8010f30:	08010f65 	.word	0x08010f65
 8010f34:	08010f65 	.word	0x08010f65
 8010f38:	08010f65 	.word	0x08010f65
 8010f3c:	08010f65 	.word	0x08010f65
 8010f40:	08010f65 	.word	0x08010f65
 8010f44:	08010f65 	.word	0x08010f65
 8010f48:	08010f65 	.word	0x08010f65
 8010f4c:	08010f65 	.word	0x08010f65
 8010f50:	08010f65 	.word	0x08010f65
 8010f54:	08010f65 	.word	0x08010f65
 8010f58:	08010f65 	.word	0x08010f65
 8010f5c:	08010f65 	.word	0x08010f65
 8010f60:	08010f65 	.word	0x08010f65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010f64:	bf00      	nop
  }

  return (USBD_OK);
 8010f66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	370c      	adds	r7, #12
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr

08010f74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b082      	sub	sp, #8
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010f7e:	6879      	ldr	r1, [r7, #4]
 8010f80:	4805      	ldr	r0, [pc, #20]	; (8010f98 <CDC_Receive_FS+0x24>)
 8010f82:	f7f8 fab8 	bl	80094f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010f86:	4804      	ldr	r0, [pc, #16]	; (8010f98 <CDC_Receive_FS+0x24>)
 8010f88:	f7f8 face 	bl	8009528 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010f8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3708      	adds	r7, #8
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
 8010f96:	bf00      	nop
 8010f98:	20004f50 	.word	0x20004f50

08010f9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b087      	sub	sp, #28
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	60b9      	str	r1, [r7, #8]
 8010fa6:	4613      	mov	r3, r2
 8010fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010faa:	2300      	movs	r3, #0
 8010fac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010fae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	371c      	adds	r7, #28
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbc:	4770      	bx	lr
	...

08010fc0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	6039      	str	r1, [r7, #0]
 8010fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	2212      	movs	r2, #18
 8010fd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010fd2:	4b03      	ldr	r3, [pc, #12]	; (8010fe0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	370c      	adds	r7, #12
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fde:	4770      	bx	lr
 8010fe0:	20000168 	.word	0x20000168

08010fe4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	4603      	mov	r3, r0
 8010fec:	6039      	str	r1, [r7, #0]
 8010fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	2204      	movs	r2, #4
 8010ff4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010ff6:	4b03      	ldr	r3, [pc, #12]	; (8011004 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	370c      	adds	r7, #12
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011002:	4770      	bx	lr
 8011004:	2000017c 	.word	0x2000017c

08011008 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	4603      	mov	r3, r0
 8011010:	6039      	str	r1, [r7, #0]
 8011012:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011014:	79fb      	ldrb	r3, [r7, #7]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d105      	bne.n	8011026 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801101a:	683a      	ldr	r2, [r7, #0]
 801101c:	4907      	ldr	r1, [pc, #28]	; (801103c <USBD_CDC_ProductStrDescriptor+0x34>)
 801101e:	4808      	ldr	r0, [pc, #32]	; (8011040 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011020:	f7f9 fade 	bl	800a5e0 <USBD_GetString>
 8011024:	e004      	b.n	8011030 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011026:	683a      	ldr	r2, [r7, #0]
 8011028:	4904      	ldr	r1, [pc, #16]	; (801103c <USBD_CDC_ProductStrDescriptor+0x34>)
 801102a:	4805      	ldr	r0, [pc, #20]	; (8011040 <USBD_CDC_ProductStrDescriptor+0x38>)
 801102c:	f7f9 fad8 	bl	800a5e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011030:	4b02      	ldr	r3, [pc, #8]	; (801103c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011032:	4618      	mov	r0, r3
 8011034:	3708      	adds	r7, #8
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	20006220 	.word	0x20006220
 8011040:	08011c30 	.word	0x08011c30

08011044 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b082      	sub	sp, #8
 8011048:	af00      	add	r7, sp, #0
 801104a:	4603      	mov	r3, r0
 801104c:	6039      	str	r1, [r7, #0]
 801104e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011050:	683a      	ldr	r2, [r7, #0]
 8011052:	4904      	ldr	r1, [pc, #16]	; (8011064 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011054:	4804      	ldr	r0, [pc, #16]	; (8011068 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011056:	f7f9 fac3 	bl	800a5e0 <USBD_GetString>
  return USBD_StrDesc;
 801105a:	4b02      	ldr	r3, [pc, #8]	; (8011064 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801105c:	4618      	mov	r0, r3
 801105e:	3708      	adds	r7, #8
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}
 8011064:	20006220 	.word	0x20006220
 8011068:	08011c3c 	.word	0x08011c3c

0801106c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	4603      	mov	r3, r0
 8011074:	6039      	str	r1, [r7, #0]
 8011076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	221a      	movs	r2, #26
 801107c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801107e:	f000 f843 	bl	8011108 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011082:	4b02      	ldr	r3, [pc, #8]	; (801108c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011084:	4618      	mov	r0, r3
 8011086:	3708      	adds	r7, #8
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}
 801108c:	20000180 	.word	0x20000180

08011090 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b082      	sub	sp, #8
 8011094:	af00      	add	r7, sp, #0
 8011096:	4603      	mov	r3, r0
 8011098:	6039      	str	r1, [r7, #0]
 801109a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801109c:	79fb      	ldrb	r3, [r7, #7]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d105      	bne.n	80110ae <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80110a2:	683a      	ldr	r2, [r7, #0]
 80110a4:	4907      	ldr	r1, [pc, #28]	; (80110c4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80110a6:	4808      	ldr	r0, [pc, #32]	; (80110c8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80110a8:	f7f9 fa9a 	bl	800a5e0 <USBD_GetString>
 80110ac:	e004      	b.n	80110b8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80110ae:	683a      	ldr	r2, [r7, #0]
 80110b0:	4904      	ldr	r1, [pc, #16]	; (80110c4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80110b2:	4805      	ldr	r0, [pc, #20]	; (80110c8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80110b4:	f7f9 fa94 	bl	800a5e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80110b8:	4b02      	ldr	r3, [pc, #8]	; (80110c4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3708      	adds	r7, #8
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	20006220 	.word	0x20006220
 80110c8:	08011c44 	.word	0x08011c44

080110cc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b082      	sub	sp, #8
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	4603      	mov	r3, r0
 80110d4:	6039      	str	r1, [r7, #0]
 80110d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80110d8:	79fb      	ldrb	r3, [r7, #7]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d105      	bne.n	80110ea <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80110de:	683a      	ldr	r2, [r7, #0]
 80110e0:	4907      	ldr	r1, [pc, #28]	; (8011100 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80110e2:	4808      	ldr	r0, [pc, #32]	; (8011104 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80110e4:	f7f9 fa7c 	bl	800a5e0 <USBD_GetString>
 80110e8:	e004      	b.n	80110f4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80110ea:	683a      	ldr	r2, [r7, #0]
 80110ec:	4904      	ldr	r1, [pc, #16]	; (8011100 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80110ee:	4805      	ldr	r0, [pc, #20]	; (8011104 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80110f0:	f7f9 fa76 	bl	800a5e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80110f4:	4b02      	ldr	r3, [pc, #8]	; (8011100 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3708      	adds	r7, #8
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	20006220 	.word	0x20006220
 8011104:	08011c50 	.word	0x08011c50

08011108 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801110e:	4b0f      	ldr	r3, [pc, #60]	; (801114c <Get_SerialNum+0x44>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011114:	4b0e      	ldr	r3, [pc, #56]	; (8011150 <Get_SerialNum+0x48>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801111a:	4b0e      	ldr	r3, [pc, #56]	; (8011154 <Get_SerialNum+0x4c>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011120:	68fa      	ldr	r2, [r7, #12]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	4413      	add	r3, r2
 8011126:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d009      	beq.n	8011142 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801112e:	2208      	movs	r2, #8
 8011130:	4909      	ldr	r1, [pc, #36]	; (8011158 <Get_SerialNum+0x50>)
 8011132:	68f8      	ldr	r0, [r7, #12]
 8011134:	f000 f814 	bl	8011160 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011138:	2204      	movs	r2, #4
 801113a:	4908      	ldr	r1, [pc, #32]	; (801115c <Get_SerialNum+0x54>)
 801113c:	68b8      	ldr	r0, [r7, #8]
 801113e:	f000 f80f 	bl	8011160 <IntToUnicode>
  }
}
 8011142:	bf00      	nop
 8011144:	3710      	adds	r7, #16
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}
 801114a:	bf00      	nop
 801114c:	1fff7590 	.word	0x1fff7590
 8011150:	1fff7594 	.word	0x1fff7594
 8011154:	1fff7598 	.word	0x1fff7598
 8011158:	20000182 	.word	0x20000182
 801115c:	20000192 	.word	0x20000192

08011160 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011160:	b480      	push	{r7}
 8011162:	b087      	sub	sp, #28
 8011164:	af00      	add	r7, sp, #0
 8011166:	60f8      	str	r0, [r7, #12]
 8011168:	60b9      	str	r1, [r7, #8]
 801116a:	4613      	mov	r3, r2
 801116c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801116e:	2300      	movs	r3, #0
 8011170:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011172:	2300      	movs	r3, #0
 8011174:	75fb      	strb	r3, [r7, #23]
 8011176:	e027      	b.n	80111c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	0f1b      	lsrs	r3, r3, #28
 801117c:	2b09      	cmp	r3, #9
 801117e:	d80b      	bhi.n	8011198 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	0f1b      	lsrs	r3, r3, #28
 8011184:	b2da      	uxtb	r2, r3
 8011186:	7dfb      	ldrb	r3, [r7, #23]
 8011188:	005b      	lsls	r3, r3, #1
 801118a:	4619      	mov	r1, r3
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	440b      	add	r3, r1
 8011190:	3230      	adds	r2, #48	; 0x30
 8011192:	b2d2      	uxtb	r2, r2
 8011194:	701a      	strb	r2, [r3, #0]
 8011196:	e00a      	b.n	80111ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	0f1b      	lsrs	r3, r3, #28
 801119c:	b2da      	uxtb	r2, r3
 801119e:	7dfb      	ldrb	r3, [r7, #23]
 80111a0:	005b      	lsls	r3, r3, #1
 80111a2:	4619      	mov	r1, r3
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	440b      	add	r3, r1
 80111a8:	3237      	adds	r2, #55	; 0x37
 80111aa:	b2d2      	uxtb	r2, r2
 80111ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	011b      	lsls	r3, r3, #4
 80111b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80111b4:	7dfb      	ldrb	r3, [r7, #23]
 80111b6:	005b      	lsls	r3, r3, #1
 80111b8:	3301      	adds	r3, #1
 80111ba:	68ba      	ldr	r2, [r7, #8]
 80111bc:	4413      	add	r3, r2
 80111be:	2200      	movs	r2, #0
 80111c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80111c2:	7dfb      	ldrb	r3, [r7, #23]
 80111c4:	3301      	adds	r3, #1
 80111c6:	75fb      	strb	r3, [r7, #23]
 80111c8:	7dfa      	ldrb	r2, [r7, #23]
 80111ca:	79fb      	ldrb	r3, [r7, #7]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d3d3      	bcc.n	8011178 <IntToUnicode+0x18>
  }
}
 80111d0:	bf00      	nop
 80111d2:	371c      	adds	r7, #28
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr

080111dc <LL_AHB2_GRP1_EnableClock>:
{
 80111dc:	b480      	push	{r7}
 80111de:	b085      	sub	sp, #20
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80111e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80111e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80111ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	4313      	orrs	r3, r2
 80111f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80111f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80111f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4013      	ands	r3, r2
 80111fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011200:	68fb      	ldr	r3, [r7, #12]
}
 8011202:	bf00      	nop
 8011204:	3714      	adds	r7, #20
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr

0801120e <LL_APB1_GRP1_EnableClock>:
{
 801120e:	b480      	push	{r7}
 8011210:	b085      	sub	sp, #20
 8011212:	af00      	add	r7, sp, #0
 8011214:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801121a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801121c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	4313      	orrs	r3, r2
 8011224:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8011226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801122a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	4013      	ands	r3, r2
 8011230:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011232:	68fb      	ldr	r3, [r7, #12]
}
 8011234:	bf00      	nop
 8011236:	3714      	adds	r7, #20
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr

08011240 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b088      	sub	sp, #32
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011248:	f107 030c 	add.w	r3, r7, #12
 801124c:	2200      	movs	r2, #0
 801124e:	601a      	str	r2, [r3, #0]
 8011250:	605a      	str	r2, [r3, #4]
 8011252:	609a      	str	r2, [r3, #8]
 8011254:	60da      	str	r2, [r3, #12]
 8011256:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4a13      	ldr	r2, [pc, #76]	; (80112ac <HAL_PCD_MspInit+0x6c>)
 801125e:	4293      	cmp	r3, r2
 8011260:	d120      	bne.n	80112a4 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011262:	2001      	movs	r0, #1
 8011264:	f7ff ffba 	bl	80111dc <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011268:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801126c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801126e:	2302      	movs	r3, #2
 8011270:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011272:	2300      	movs	r3, #0
 8011274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011276:	2300      	movs	r3, #0
 8011278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 801127a:	230a      	movs	r3, #10
 801127c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801127e:	f107 030c 	add.w	r3, r7, #12
 8011282:	4619      	mov	r1, r3
 8011284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011288:	f7f2 fb06 	bl	8003898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801128c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8011290:	f7ff ffbd 	bl	801120e <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8011294:	2200      	movs	r2, #0
 8011296:	2105      	movs	r1, #5
 8011298:	2014      	movs	r0, #20
 801129a:	f7f2 f8ea 	bl	8003472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801129e:	2014      	movs	r0, #20
 80112a0:	f7f2 f901 	bl	80034a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80112a4:	bf00      	nop
 80112a6:	3720      	adds	r7, #32
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	40006800 	.word	0x40006800

080112b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b082      	sub	sp, #8
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80112c4:	4619      	mov	r1, r3
 80112c6:	4610      	mov	r0, r2
 80112c8:	f7f8 f9fa 	bl	80096c0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80112cc:	bf00      	nop
 80112ce:	3708      	adds	r7, #8
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}

080112d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b082      	sub	sp, #8
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	460b      	mov	r3, r1
 80112de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80112e6:	78fb      	ldrb	r3, [r7, #3]
 80112e8:	687a      	ldr	r2, [r7, #4]
 80112ea:	015b      	lsls	r3, r3, #5
 80112ec:	4413      	add	r3, r2
 80112ee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80112f2:	681a      	ldr	r2, [r3, #0]
 80112f4:	78fb      	ldrb	r3, [r7, #3]
 80112f6:	4619      	mov	r1, r3
 80112f8:	f7f8 fa35 	bl	8009766 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80112fc:	bf00      	nop
 80112fe:	3708      	adds	r7, #8
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}

08011304 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	460b      	mov	r3, r1
 801130e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8011316:	78fb      	ldrb	r3, [r7, #3]
 8011318:	687a      	ldr	r2, [r7, #4]
 801131a:	015b      	lsls	r3, r3, #5
 801131c:	4413      	add	r3, r2
 801131e:	333c      	adds	r3, #60	; 0x3c
 8011320:	681a      	ldr	r2, [r3, #0]
 8011322:	78fb      	ldrb	r3, [r7, #3]
 8011324:	4619      	mov	r1, r3
 8011326:	f7f8 fa81 	bl	800982c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801132a:	bf00      	nop
 801132c:	3708      	adds	r7, #8
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}

08011332 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011332:	b580      	push	{r7, lr}
 8011334:	b082      	sub	sp, #8
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011340:	4618      	mov	r0, r3
 8011342:	f7f8 fb95 	bl	8009a70 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011346:	bf00      	nop
 8011348:	3708      	adds	r7, #8
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}

0801134e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801134e:	b580      	push	{r7, lr}
 8011350:	b084      	sub	sp, #16
 8011352:	af00      	add	r7, sp, #0
 8011354:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011356:	2301      	movs	r3, #1
 8011358:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	689b      	ldr	r3, [r3, #8]
 801135e:	2b02      	cmp	r3, #2
 8011360:	d001      	beq.n	8011366 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011362:	f7f0 fad5 	bl	8001910 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801136c:	7bfa      	ldrb	r2, [r7, #15]
 801136e:	4611      	mov	r1, r2
 8011370:	4618      	mov	r0, r3
 8011372:	f7f8 fb3f 	bl	80099f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801137c:	4618      	mov	r0, r3
 801137e:	f7f8 faeb 	bl	8009958 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8011382:	bf00      	nop
 8011384:	3710      	adds	r7, #16
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
	...

0801138c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801139a:	4618      	mov	r0, r3
 801139c:	f7f8 fb3a 	bl	8009a14 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	699b      	ldr	r3, [r3, #24]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d005      	beq.n	80113b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80113a8:	4b04      	ldr	r3, [pc, #16]	; (80113bc <HAL_PCD_SuspendCallback+0x30>)
 80113aa:	691b      	ldr	r3, [r3, #16]
 80113ac:	4a03      	ldr	r2, [pc, #12]	; (80113bc <HAL_PCD_SuspendCallback+0x30>)
 80113ae:	f043 0306 	orr.w	r3, r3, #6
 80113b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80113b4:	bf00      	nop
 80113b6:	3708      	adds	r7, #8
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}
 80113bc:	e000ed00 	.word	0xe000ed00

080113c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b082      	sub	sp, #8
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	699b      	ldr	r3, [r3, #24]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d007      	beq.n	80113e0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80113d0:	4b08      	ldr	r3, [pc, #32]	; (80113f4 <HAL_PCD_ResumeCallback+0x34>)
 80113d2:	691b      	ldr	r3, [r3, #16]
 80113d4:	4a07      	ldr	r2, [pc, #28]	; (80113f4 <HAL_PCD_ResumeCallback+0x34>)
 80113d6:	f023 0306 	bic.w	r3, r3, #6
 80113da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80113dc:	f000 f9f4 	bl	80117c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7f8 fb2a 	bl	8009a40 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80113ec:	bf00      	nop
 80113ee:	3708      	adds	r7, #8
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	e000ed00 	.word	0xe000ed00

080113f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011400:	4a2c      	ldr	r2, [pc, #176]	; (80114b4 <USBD_LL_Init+0xbc>)
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	4a2a      	ldr	r2, [pc, #168]	; (80114b4 <USBD_LL_Init+0xbc>)
 801140c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8011410:	f7f3 fb46 	bl	8004aa0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8011414:	4b27      	ldr	r3, [pc, #156]	; (80114b4 <USBD_LL_Init+0xbc>)
 8011416:	4a28      	ldr	r2, [pc, #160]	; (80114b8 <USBD_LL_Init+0xc0>)
 8011418:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801141a:	4b26      	ldr	r3, [pc, #152]	; (80114b4 <USBD_LL_Init+0xbc>)
 801141c:	2208      	movs	r2, #8
 801141e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011420:	4b24      	ldr	r3, [pc, #144]	; (80114b4 <USBD_LL_Init+0xbc>)
 8011422:	2202      	movs	r2, #2
 8011424:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011426:	4b23      	ldr	r3, [pc, #140]	; (80114b4 <USBD_LL_Init+0xbc>)
 8011428:	2202      	movs	r2, #2
 801142a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801142c:	4b21      	ldr	r3, [pc, #132]	; (80114b4 <USBD_LL_Init+0xbc>)
 801142e:	2200      	movs	r2, #0
 8011430:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011432:	4b20      	ldr	r3, [pc, #128]	; (80114b4 <USBD_LL_Init+0xbc>)
 8011434:	2200      	movs	r2, #0
 8011436:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011438:	4b1e      	ldr	r3, [pc, #120]	; (80114b4 <USBD_LL_Init+0xbc>)
 801143a:	2200      	movs	r2, #0
 801143c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801143e:	4b1d      	ldr	r3, [pc, #116]	; (80114b4 <USBD_LL_Init+0xbc>)
 8011440:	2200      	movs	r2, #0
 8011442:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011444:	481b      	ldr	r0, [pc, #108]	; (80114b4 <USBD_LL_Init+0xbc>)
 8011446:	f7f2 fbd3 	bl	8003bf0 <HAL_PCD_Init>
 801144a:	4603      	mov	r3, r0
 801144c:	2b00      	cmp	r3, #0
 801144e:	d001      	beq.n	8011454 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8011450:	f7f0 fa5e 	bl	8001910 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801145a:	2318      	movs	r3, #24
 801145c:	2200      	movs	r2, #0
 801145e:	2100      	movs	r1, #0
 8011460:	f7f3 fa98 	bl	8004994 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801146a:	2358      	movs	r3, #88	; 0x58
 801146c:	2200      	movs	r2, #0
 801146e:	2180      	movs	r1, #128	; 0x80
 8011470:	f7f3 fa90 	bl	8004994 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801147a:	23c0      	movs	r3, #192	; 0xc0
 801147c:	2200      	movs	r2, #0
 801147e:	2181      	movs	r1, #129	; 0x81
 8011480:	f7f3 fa88 	bl	8004994 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801148a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801148e:	2200      	movs	r2, #0
 8011490:	2101      	movs	r1, #1
 8011492:	f7f3 fa7f 	bl	8004994 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801149c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114a0:	2200      	movs	r2, #0
 80114a2:	2182      	movs	r1, #130	; 0x82
 80114a4:	f7f3 fa76 	bl	8004994 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80114a8:	2300      	movs	r3, #0
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3708      	adds	r7, #8
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	20006420 	.word	0x20006420
 80114b8:	40006800 	.word	0x40006800

080114bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b084      	sub	sp, #16
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114c4:	2300      	movs	r3, #0
 80114c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114c8:	2300      	movs	r3, #0
 80114ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7f2 fc47 	bl	8003d66 <HAL_PCD_Start>
 80114d8:	4603      	mov	r3, r0
 80114da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114dc:	7bfb      	ldrb	r3, [r7, #15]
 80114de:	4618      	mov	r0, r3
 80114e0:	f000 f97a 	bl	80117d8 <USBD_Get_USB_Status>
 80114e4:	4603      	mov	r3, r0
 80114e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3710      	adds	r7, #16
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}

080114f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80114f2:	b580      	push	{r7, lr}
 80114f4:	b084      	sub	sp, #16
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
 80114fa:	4608      	mov	r0, r1
 80114fc:	4611      	mov	r1, r2
 80114fe:	461a      	mov	r2, r3
 8011500:	4603      	mov	r3, r0
 8011502:	70fb      	strb	r3, [r7, #3]
 8011504:	460b      	mov	r3, r1
 8011506:	70bb      	strb	r3, [r7, #2]
 8011508:	4613      	mov	r3, r2
 801150a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801150c:	2300      	movs	r3, #0
 801150e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011510:	2300      	movs	r3, #0
 8011512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801151a:	78bb      	ldrb	r3, [r7, #2]
 801151c:	883a      	ldrh	r2, [r7, #0]
 801151e:	78f9      	ldrb	r1, [r7, #3]
 8011520:	f7f2 fdb6 	bl	8004090 <HAL_PCD_EP_Open>
 8011524:	4603      	mov	r3, r0
 8011526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011528:	7bfb      	ldrb	r3, [r7, #15]
 801152a:	4618      	mov	r0, r3
 801152c:	f000 f954 	bl	80117d8 <USBD_Get_USB_Status>
 8011530:	4603      	mov	r3, r0
 8011532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011534:	7bbb      	ldrb	r3, [r7, #14]
}
 8011536:	4618      	mov	r0, r3
 8011538:	3710      	adds	r7, #16
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}

0801153e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801153e:	b580      	push	{r7, lr}
 8011540:	b084      	sub	sp, #16
 8011542:	af00      	add	r7, sp, #0
 8011544:	6078      	str	r0, [r7, #4]
 8011546:	460b      	mov	r3, r1
 8011548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801154a:	2300      	movs	r3, #0
 801154c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801154e:	2300      	movs	r3, #0
 8011550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011558:	78fa      	ldrb	r2, [r7, #3]
 801155a:	4611      	mov	r1, r2
 801155c:	4618      	mov	r0, r3
 801155e:	f7f2 fdf7 	bl	8004150 <HAL_PCD_EP_Close>
 8011562:	4603      	mov	r3, r0
 8011564:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011566:	7bfb      	ldrb	r3, [r7, #15]
 8011568:	4618      	mov	r0, r3
 801156a:	f000 f935 	bl	80117d8 <USBD_Get_USB_Status>
 801156e:	4603      	mov	r3, r0
 8011570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011572:	7bbb      	ldrb	r3, [r7, #14]
}
 8011574:	4618      	mov	r0, r3
 8011576:	3710      	adds	r7, #16
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}

0801157c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b084      	sub	sp, #16
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	460b      	mov	r3, r1
 8011586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011588:	2300      	movs	r3, #0
 801158a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801158c:	2300      	movs	r3, #0
 801158e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011596:	78fa      	ldrb	r2, [r7, #3]
 8011598:	4611      	mov	r1, r2
 801159a:	4618      	mov	r0, r3
 801159c:	f7f2 fea2 	bl	80042e4 <HAL_PCD_EP_SetStall>
 80115a0:	4603      	mov	r3, r0
 80115a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115a4:	7bfb      	ldrb	r3, [r7, #15]
 80115a6:	4618      	mov	r0, r3
 80115a8:	f000 f916 	bl	80117d8 <USBD_Get_USB_Status>
 80115ac:	4603      	mov	r3, r0
 80115ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3710      	adds	r7, #16
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}

080115ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115ba:	b580      	push	{r7, lr}
 80115bc:	b084      	sub	sp, #16
 80115be:	af00      	add	r7, sp, #0
 80115c0:	6078      	str	r0, [r7, #4]
 80115c2:	460b      	mov	r3, r1
 80115c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115c6:	2300      	movs	r3, #0
 80115c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115ca:	2300      	movs	r3, #0
 80115cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80115d4:	78fa      	ldrb	r2, [r7, #3]
 80115d6:	4611      	mov	r1, r2
 80115d8:	4618      	mov	r0, r3
 80115da:	f7f2 fedd 	bl	8004398 <HAL_PCD_EP_ClrStall>
 80115de:	4603      	mov	r3, r0
 80115e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115e2:	7bfb      	ldrb	r3, [r7, #15]
 80115e4:	4618      	mov	r0, r3
 80115e6:	f000 f8f7 	bl	80117d8 <USBD_Get_USB_Status>
 80115ea:	4603      	mov	r3, r0
 80115ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3710      	adds	r7, #16
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}

080115f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b085      	sub	sp, #20
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	460b      	mov	r3, r1
 8011602:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801160a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801160c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011610:	2b00      	cmp	r3, #0
 8011612:	da08      	bge.n	8011626 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011614:	78fb      	ldrb	r3, [r7, #3]
 8011616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801161a:	68fa      	ldr	r2, [r7, #12]
 801161c:	015b      	lsls	r3, r3, #5
 801161e:	4413      	add	r3, r2
 8011620:	332a      	adds	r3, #42	; 0x2a
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	e008      	b.n	8011638 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011626:	78fb      	ldrb	r3, [r7, #3]
 8011628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801162c:	68fa      	ldr	r2, [r7, #12]
 801162e:	015b      	lsls	r3, r3, #5
 8011630:	4413      	add	r3, r2
 8011632:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8011636:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011638:	4618      	mov	r0, r3
 801163a:	3714      	adds	r7, #20
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr

08011644 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	460b      	mov	r3, r1
 801164e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011650:	2300      	movs	r3, #0
 8011652:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011654:	2300      	movs	r3, #0
 8011656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801165e:	78fa      	ldrb	r2, [r7, #3]
 8011660:	4611      	mov	r1, r2
 8011662:	4618      	mov	r0, r3
 8011664:	f7f2 fcef 	bl	8004046 <HAL_PCD_SetAddress>
 8011668:	4603      	mov	r3, r0
 801166a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801166c:	7bfb      	ldrb	r3, [r7, #15]
 801166e:	4618      	mov	r0, r3
 8011670:	f000 f8b2 	bl	80117d8 <USBD_Get_USB_Status>
 8011674:	4603      	mov	r3, r0
 8011676:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011678:	7bbb      	ldrb	r3, [r7, #14]
}
 801167a:	4618      	mov	r0, r3
 801167c:	3710      	adds	r7, #16
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}

08011682 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011682:	b580      	push	{r7, lr}
 8011684:	b086      	sub	sp, #24
 8011686:	af00      	add	r7, sp, #0
 8011688:	60f8      	str	r0, [r7, #12]
 801168a:	607a      	str	r2, [r7, #4]
 801168c:	603b      	str	r3, [r7, #0]
 801168e:	460b      	mov	r3, r1
 8011690:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011692:	2300      	movs	r3, #0
 8011694:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011696:	2300      	movs	r3, #0
 8011698:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80116a0:	7af9      	ldrb	r1, [r7, #11]
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	f7f2 fde4 	bl	8004272 <HAL_PCD_EP_Transmit>
 80116aa:	4603      	mov	r3, r0
 80116ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116ae:	7dfb      	ldrb	r3, [r7, #23]
 80116b0:	4618      	mov	r0, r3
 80116b2:	f000 f891 	bl	80117d8 <USBD_Get_USB_Status>
 80116b6:	4603      	mov	r3, r0
 80116b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80116ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3718      	adds	r7, #24
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}

080116c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b086      	sub	sp, #24
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	60f8      	str	r0, [r7, #12]
 80116cc:	607a      	str	r2, [r7, #4]
 80116ce:	603b      	str	r3, [r7, #0]
 80116d0:	460b      	mov	r3, r1
 80116d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116d4:	2300      	movs	r3, #0
 80116d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116d8:	2300      	movs	r3, #0
 80116da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80116e2:	7af9      	ldrb	r1, [r7, #11]
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	687a      	ldr	r2, [r7, #4]
 80116e8:	f7f2 fd74 	bl	80041d4 <HAL_PCD_EP_Receive>
 80116ec:	4603      	mov	r3, r0
 80116ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116f0:	7dfb      	ldrb	r3, [r7, #23]
 80116f2:	4618      	mov	r0, r3
 80116f4:	f000 f870 	bl	80117d8 <USBD_Get_USB_Status>
 80116f8:	4603      	mov	r3, r0
 80116fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80116fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3718      	adds	r7, #24
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}

08011706 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011706:	b580      	push	{r7, lr}
 8011708:	b082      	sub	sp, #8
 801170a:	af00      	add	r7, sp, #0
 801170c:	6078      	str	r0, [r7, #4]
 801170e:	460b      	mov	r3, r1
 8011710:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011718:	78fa      	ldrb	r2, [r7, #3]
 801171a:	4611      	mov	r1, r2
 801171c:	4618      	mov	r0, r3
 801171e:	f7f2 fd93 	bl	8004248 <HAL_PCD_EP_GetRxCount>
 8011722:	4603      	mov	r3, r0
}
 8011724:	4618      	mov	r0, r3
 8011726:	3708      	adds	r7, #8
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	460b      	mov	r3, r1
 8011736:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011738:	78fb      	ldrb	r3, [r7, #3]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d002      	beq.n	8011744 <HAL_PCDEx_LPM_Callback+0x18>
 801173e:	2b01      	cmp	r3, #1
 8011740:	d013      	beq.n	801176a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011742:	e023      	b.n	801178c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	699b      	ldr	r3, [r3, #24]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d007      	beq.n	801175c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801174c:	f000 f83c 	bl	80117c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011750:	4b10      	ldr	r3, [pc, #64]	; (8011794 <HAL_PCDEx_LPM_Callback+0x68>)
 8011752:	691b      	ldr	r3, [r3, #16]
 8011754:	4a0f      	ldr	r2, [pc, #60]	; (8011794 <HAL_PCDEx_LPM_Callback+0x68>)
 8011756:	f023 0306 	bic.w	r3, r3, #6
 801175a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011762:	4618      	mov	r0, r3
 8011764:	f7f8 f96c 	bl	8009a40 <USBD_LL_Resume>
    break;
 8011768:	e010      	b.n	801178c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011770:	4618      	mov	r0, r3
 8011772:	f7f8 f94f 	bl	8009a14 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	699b      	ldr	r3, [r3, #24]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d005      	beq.n	801178a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801177e:	4b05      	ldr	r3, [pc, #20]	; (8011794 <HAL_PCDEx_LPM_Callback+0x68>)
 8011780:	691b      	ldr	r3, [r3, #16]
 8011782:	4a04      	ldr	r2, [pc, #16]	; (8011794 <HAL_PCDEx_LPM_Callback+0x68>)
 8011784:	f043 0306 	orr.w	r3, r3, #6
 8011788:	6113      	str	r3, [r2, #16]
    break;
 801178a:	bf00      	nop
}
 801178c:	bf00      	nop
 801178e:	3708      	adds	r7, #8
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}
 8011794:	e000ed00 	.word	0xe000ed00

08011798 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80117a0:	4b03      	ldr	r3, [pc, #12]	; (80117b0 <USBD_static_malloc+0x18>)
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	370c      	adds	r7, #12
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr
 80117ae:	bf00      	nop
 80117b0:	20004ad0 	.word	0x20004ad0

080117b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80117b4:	b480      	push	{r7}
 80117b6:	b083      	sub	sp, #12
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]

}
 80117bc:	bf00      	nop
 80117be:	370c      	adds	r7, #12
 80117c0:	46bd      	mov	sp, r7
 80117c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c6:	4770      	bx	lr

080117c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80117c8:	b480      	push	{r7}
 80117ca:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 80117cc:	bf00      	nop
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr
	...

080117d8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80117d8:	b480      	push	{r7}
 80117da:	b085      	sub	sp, #20
 80117dc:	af00      	add	r7, sp, #0
 80117de:	4603      	mov	r3, r0
 80117e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117e2:	2300      	movs	r3, #0
 80117e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80117e6:	79fb      	ldrb	r3, [r7, #7]
 80117e8:	2b03      	cmp	r3, #3
 80117ea:	d817      	bhi.n	801181c <USBD_Get_USB_Status+0x44>
 80117ec:	a201      	add	r2, pc, #4	; (adr r2, 80117f4 <USBD_Get_USB_Status+0x1c>)
 80117ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117f2:	bf00      	nop
 80117f4:	08011805 	.word	0x08011805
 80117f8:	0801180b 	.word	0x0801180b
 80117fc:	08011811 	.word	0x08011811
 8011800:	08011817 	.word	0x08011817
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011804:	2300      	movs	r3, #0
 8011806:	73fb      	strb	r3, [r7, #15]
    break;
 8011808:	e00b      	b.n	8011822 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801180a:	2303      	movs	r3, #3
 801180c:	73fb      	strb	r3, [r7, #15]
    break;
 801180e:	e008      	b.n	8011822 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011810:	2301      	movs	r3, #1
 8011812:	73fb      	strb	r3, [r7, #15]
    break;
 8011814:	e005      	b.n	8011822 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011816:	2303      	movs	r3, #3
 8011818:	73fb      	strb	r3, [r7, #15]
    break;
 801181a:	e002      	b.n	8011822 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801181c:	2303      	movs	r3, #3
 801181e:	73fb      	strb	r3, [r7, #15]
    break;
 8011820:	bf00      	nop
  }
  return usb_status;
 8011822:	7bfb      	ldrb	r3, [r7, #15]
}
 8011824:	4618      	mov	r0, r3
 8011826:	3714      	adds	r7, #20
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr

08011830 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011830:	b480      	push	{r7}
 8011832:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011834:	4b05      	ldr	r3, [pc, #20]	; (801184c <UTIL_LPM_Init+0x1c>)
 8011836:	2200      	movs	r2, #0
 8011838:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801183a:	4b05      	ldr	r3, [pc, #20]	; (8011850 <UTIL_LPM_Init+0x20>)
 801183c:	2200      	movs	r2, #0
 801183e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011840:	bf00      	nop
 8011842:	46bd      	mov	sp, r7
 8011844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop
 801184c:	20004cf0 	.word	0x20004cf0
 8011850:	20004cf4 	.word	0x20004cf4

08011854 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8011854:	b480      	push	{r7}
 8011856:	b087      	sub	sp, #28
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	460b      	mov	r3, r1
 801185e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011860:	f3ef 8310 	mrs	r3, PRIMASK
 8011864:	613b      	str	r3, [r7, #16]
  return(result);
 8011866:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8011868:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801186a:	b672      	cpsid	i
  
  switch(state)
 801186c:	78fb      	ldrb	r3, [r7, #3]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d009      	beq.n	8011886 <UTIL_LPM_SetOffMode+0x32>
 8011872:	2b01      	cmp	r3, #1
 8011874:	d000      	beq.n	8011878 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 8011876:	e00e      	b.n	8011896 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8011878:	4b0c      	ldr	r3, [pc, #48]	; (80118ac <UTIL_LPM_SetOffMode+0x58>)
 801187a:	681a      	ldr	r2, [r3, #0]
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	4313      	orrs	r3, r2
 8011880:	4a0a      	ldr	r2, [pc, #40]	; (80118ac <UTIL_LPM_SetOffMode+0x58>)
 8011882:	6013      	str	r3, [r2, #0]
      break;
 8011884:	e007      	b.n	8011896 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	43da      	mvns	r2, r3
 801188a:	4b08      	ldr	r3, [pc, #32]	; (80118ac <UTIL_LPM_SetOffMode+0x58>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	4013      	ands	r3, r2
 8011890:	4a06      	ldr	r2, [pc, #24]	; (80118ac <UTIL_LPM_SetOffMode+0x58>)
 8011892:	6013      	str	r3, [r2, #0]
      break;
 8011894:	bf00      	nop
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80118a0:	bf00      	nop
 80118a2:	371c      	adds	r7, #28
 80118a4:	46bd      	mov	sp, r7
 80118a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118aa:	4770      	bx	lr
 80118ac:	20004cf4 	.word	0x20004cf4

080118b0 <__libc_init_array>:
 80118b0:	b570      	push	{r4, r5, r6, lr}
 80118b2:	4e0d      	ldr	r6, [pc, #52]	; (80118e8 <__libc_init_array+0x38>)
 80118b4:	4c0d      	ldr	r4, [pc, #52]	; (80118ec <__libc_init_array+0x3c>)
 80118b6:	1ba4      	subs	r4, r4, r6
 80118b8:	10a4      	asrs	r4, r4, #2
 80118ba:	2500      	movs	r5, #0
 80118bc:	42a5      	cmp	r5, r4
 80118be:	d109      	bne.n	80118d4 <__libc_init_array+0x24>
 80118c0:	4e0b      	ldr	r6, [pc, #44]	; (80118f0 <__libc_init_array+0x40>)
 80118c2:	4c0c      	ldr	r4, [pc, #48]	; (80118f4 <__libc_init_array+0x44>)
 80118c4:	f000 f82c 	bl	8011920 <_init>
 80118c8:	1ba4      	subs	r4, r4, r6
 80118ca:	10a4      	asrs	r4, r4, #2
 80118cc:	2500      	movs	r5, #0
 80118ce:	42a5      	cmp	r5, r4
 80118d0:	d105      	bne.n	80118de <__libc_init_array+0x2e>
 80118d2:	bd70      	pop	{r4, r5, r6, pc}
 80118d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80118d8:	4798      	blx	r3
 80118da:	3501      	adds	r5, #1
 80118dc:	e7ee      	b.n	80118bc <__libc_init_array+0xc>
 80118de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80118e2:	4798      	blx	r3
 80118e4:	3501      	adds	r5, #1
 80118e6:	e7f2      	b.n	80118ce <__libc_init_array+0x1e>
 80118e8:	08011dbc 	.word	0x08011dbc
 80118ec:	08011dbc 	.word	0x08011dbc
 80118f0:	08011dbc 	.word	0x08011dbc
 80118f4:	08011dc0 	.word	0x08011dc0

080118f8 <memcpy>:
 80118f8:	b510      	push	{r4, lr}
 80118fa:	1e43      	subs	r3, r0, #1
 80118fc:	440a      	add	r2, r1
 80118fe:	4291      	cmp	r1, r2
 8011900:	d100      	bne.n	8011904 <memcpy+0xc>
 8011902:	bd10      	pop	{r4, pc}
 8011904:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011908:	f803 4f01 	strb.w	r4, [r3, #1]!
 801190c:	e7f7      	b.n	80118fe <memcpy+0x6>

0801190e <memset>:
 801190e:	4402      	add	r2, r0
 8011910:	4603      	mov	r3, r0
 8011912:	4293      	cmp	r3, r2
 8011914:	d100      	bne.n	8011918 <memset+0xa>
 8011916:	4770      	bx	lr
 8011918:	f803 1b01 	strb.w	r1, [r3], #1
 801191c:	e7f9      	b.n	8011912 <memset+0x4>
	...

08011920 <_init>:
 8011920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011922:	bf00      	nop
 8011924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011926:	bc08      	pop	{r3}
 8011928:	469e      	mov	lr, r3
 801192a:	4770      	bx	lr

0801192c <_fini>:
 801192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801192e:	bf00      	nop
 8011930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011932:	bc08      	pop	{r3}
 8011934:	469e      	mov	lr, r3
 8011936:	4770      	bx	lr


Spotlight_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013400  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  08013540  08013540  00023540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013a48  08013a48  00023a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08013a4c  08013a4c  00023a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001bc  20000004  08013a50  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  200001c0  08013c0c  000301c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000025c  08013ca5  0003025c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00006504  20000270  08013cb6  00030270  2**3
                  ALLOC
  9 ._user_heap_stack 00000604  20006774  08013cb6  00036774  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003026d  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000000b8  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000a77  200300e0  200300e0  00040000  2**2
                  ALLOC
 14 .debug_info   0005bf36  00000000  00000000  0003029d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000a3ac  00000000  00000000  0008c1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00003898  00000000  00000000  00096580  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003440  00000000  00000000  00099e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038b4c  00000000  00000000  0009d258  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0003a959  00000000  00000000  000d5da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001165bc  00000000  00000000  001106fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00226cb9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e754  00000000  00000000  00226d34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000270 	.word	0x20000270
 800015c:	00000000 	.word	0x00000000
 8000160:	08013528 	.word	0x08013528

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000274 	.word	0x20000274
 800017c:	08013528 	.word	0x08013528

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>:
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
//Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
//                                      int motor_pin_3, int motor_pin_4)
Stepper::Stepper(int32_t number_of_steps, 	GPIO_TypeDef* motor_pin_1_port, uint16_t motor_pin_1,
 8000194:	b480      	push	{r7}
 8000196:	b085      	sub	sp, #20
 8000198:	af00      	add	r7, sp, #0
 800019a:	60f8      	str	r0, [r7, #12]
 800019c:	60b9      	str	r1, [r7, #8]
 800019e:	607a      	str	r2, [r7, #4]
 80001a0:	807b      	strh	r3, [r7, #2]
											GPIO_TypeDef* motor_pin_2_port, uint16_t motor_pin_2,
											GPIO_TypeDef* motor_pin_3_port, uint16_t motor_pin_3,
											GPIO_TypeDef* motor_pin_4_port, uint16_t motor_pin_4,
											volatile uint16_t* stop_sensor, uint8_t motor_direction)
{
  this->step_number = 0;    // which step the motor is on
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	2200      	movs	r2, #0
 80001a6:	611a      	str	r2, [r3, #16]
  this->direction = 0;      // motor direction
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
 80001ae:	68fb      	ldr	r3, [r7, #12]
 80001b0:	2200      	movs	r2, #0
 80001b2:	649a      	str	r2, [r3, #72]	; 0x48
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 80001b4:	68fb      	ldr	r3, [r7, #12]
 80001b6:	68ba      	ldr	r2, [r7, #8]
 80001b8:	609a      	str	r2, [r3, #8]

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	887a      	ldrh	r2, [r7, #2]
 80001be:	841a      	strh	r2, [r3, #32]
  this->motor_pin_2 = motor_pin_2;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	8bba      	ldrh	r2, [r7, #28]
 80001c4:	845a      	strh	r2, [r3, #34]	; 0x22
  this->motor_pin_3 = motor_pin_3;
 80001c6:	68fb      	ldr	r3, [r7, #12]
 80001c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80001ca:	849a      	strh	r2, [r3, #36]	; 0x24
  this->motor_pin_4 = motor_pin_4;
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80001d0:	84da      	strh	r2, [r3, #38]	; 0x26

  // Arduino ports for the motor control pin connection:
  this->motor_pin_1_port = motor_pin_1_port;
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	62da      	str	r2, [r3, #44]	; 0x2c
  this->motor_pin_2_port = motor_pin_2_port;
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	69ba      	ldr	r2, [r7, #24]
 80001dc:	631a      	str	r2, [r3, #48]	; 0x30
  this->motor_pin_3_port = motor_pin_3_port;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	6a3a      	ldr	r2, [r7, #32]
 80001e2:	635a      	str	r2, [r3, #52]	; 0x34
  this->motor_pin_4_port = motor_pin_4_port;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80001e8:	639a      	str	r2, [r3, #56]	; 0x38

  this->motor_dir = motor_direction;
 80001ea:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
//  pinMode(this->motor_pin_2, OUTPUT);
//  pinMode(this->motor_pin_3, OUTPUT);
//  pinMode(this->motor_pin_4, OUTPUT);

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	2200      	movs	r2, #0
 80001f8:	851a      	strh	r2, [r3, #40]	; 0x28

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	2204      	movs	r2, #4
 80001fe:	60da      	str	r2, [r3, #12]

  // pin that is continously updated via DMA on the magnetic end stop value (0 means the magnet is directly aligned with the sensor)
  this->end_stop = stop_sensor;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000204:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	4618      	mov	r0, r3
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <_ZN7Stepper8setSpeedEl>:

/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	4a07      	ldr	r2, [pc, #28]	; (8000240 <_ZN7Stepper8setSpeedEl+0x2c>)
 8000224:	fb92 f2f3 	sdiv	r2, r2, r3
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	fb92 f3f3 	sdiv	r3, r2, r3
 800022e:	461a      	mov	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	605a      	str	r2, [r3, #4]
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	03938700 	.word	0x03938700

08000244 <_ZN7Stepper12setStepBoundEl>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */

void Stepper::setStepBound(int32_t max_step){
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
	this->max_step = max_step;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	615a      	str	r2, [r3, #20]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr

08000260 <_ZN7Stepper4stepEi>:

uint32_t Stepper::step(int steps_to_move)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
	// break if requested steps exceed maximum range
	if( ((this->step_tracker + steps_to_move) > this->max_step) || (this->step_tracker - steps_to_move) < 0 ){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	699a      	ldr	r2, [r3, #24]
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	4413      	add	r3, r2
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	6952      	ldr	r2, [r2, #20]
 8000276:	4293      	cmp	r3, r2
 8000278:	d901      	bls.n	800027e <_ZN7Stepper4stepEi+0x1e>
		return 0;
 800027a:	2300      	movs	r3, #0
 800027c:	e077      	b.n	800036e <_ZN7Stepper4stepEi+0x10e>
	}

	this->step_tracker += steps_to_move;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	699a      	ldr	r2, [r3, #24]
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	441a      	add	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	619a      	str	r2, [r3, #24]

	// compensate in case motor direction is flipped
	steps_to_move = steps_to_move * this->motor_dir;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8000290:	461a      	mov	r2, r3
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	fb02 f303 	mul.w	r3, r2, r3
 8000298:	603b      	str	r3, [r7, #0]

	uint32_t steps_left = abs(steps_to_move);  // how many steps to take
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	bfb8      	it	lt
 80002a0:	425b      	neglt	r3, r3
 80002a2:	60fb      	str	r3, [r7, #12]
//	uint32_t steps_left;
  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { this->direction = 1; }
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	dd02      	ble.n	80002b0 <_ZN7Stepper4stepEi+0x50>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
  if (steps_to_move < 0) { this->direction = 0; }
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	da02      	bge.n	80002bc <_ZN7Stepper4stepEi+0x5c>
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]


  // decrement the number of steps, moving one step each time:
  while (steps_left > 0)
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d054      	beq.n	800036c <_ZN7Stepper4stepEi+0x10c>
  {
		  //    unsigned long now = micros();
	  uint32_t now = __HAL_TIM_GET_COUNTER(&htim2);
 80002c2:	4b2d      	ldr	r3, [pc, #180]	; (8000378 <_ZN7Stepper4stepEi+0x118>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002c8:	60bb      	str	r3, [r7, #8]
    // move only if the appropriate delay has passed:
     if (now - this->last_step_time >= this->step_delay)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	1ad2      	subs	r2, r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d3f0      	bcc.n	80002bc <_ZN7Stepper4stepEi+0x5c>
    {
      // get the timeStamp of when you stepped:
      this->last_step_time = now;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	68ba      	ldr	r2, [r7, #8]
 80002de:	649a      	str	r2, [r3, #72]	; 0x48
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d10e      	bne.n	8000306 <_ZN7Stepper4stepEi+0xa6>
      {
        this->step_number++;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	611a      	str	r2, [r3, #16]
        if (this->step_number == this->number_of_steps) {
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	691a      	ldr	r2, [r3, #16]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d110      	bne.n	8000320 <_ZN7Stepper4stepEi+0xc0>
          this->step_number = 0;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
 8000304:	e00c      	b.n	8000320 <_ZN7Stepper4stepEi+0xc0>
        }
      }
      else
      {
        if (this->step_number == 0) {
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d103      	bne.n	8000316 <_ZN7Stepper4stepEi+0xb6>
          this->step_number = this->number_of_steps;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	689a      	ldr	r2, [r3, #8]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	611a      	str	r2, [r3, #16]
        }
        this->step_number--;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	1e5a      	subs	r2, r3, #1
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	611a      	str	r2, [r3, #16]
      }
      // decrement the steps left:
      steps_left--;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3b01      	subs	r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	68db      	ldr	r3, [r3, #12]
 800032a:	2b05      	cmp	r3, #5
 800032c:	d110      	bne.n	8000350 <_ZN7Stepper4stepEi+0xf0>
        stepMotor(this->step_number % 10);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	691a      	ldr	r2, [r3, #16]
 8000332:	4b12      	ldr	r3, [pc, #72]	; (800037c <_ZN7Stepper4stepEi+0x11c>)
 8000334:	fb83 1302 	smull	r1, r3, r3, r2
 8000338:	1099      	asrs	r1, r3, #2
 800033a:	17d3      	asrs	r3, r2, #31
 800033c:	1ac9      	subs	r1, r1, r3
 800033e:	460b      	mov	r3, r1
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	440b      	add	r3, r1
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	1ad1      	subs	r1, r2, r3
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	f000 f819 	bl	8000380 <_ZN7Stepper9stepMotorEi>
 800034e:	e7b5      	b.n	80002bc <_ZN7Stepper4stepEi+0x5c>
      else
        stepMotor(this->step_number % 4);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	425a      	negs	r2, r3
 8000356:	f003 0303 	and.w	r3, r3, #3
 800035a:	f002 0203 	and.w	r2, r2, #3
 800035e:	bf58      	it	pl
 8000360:	4253      	negpl	r3, r2
 8000362:	4619      	mov	r1, r3
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f000 f80b 	bl	8000380 <_ZN7Stepper9stepMotorEi>
  while (steps_left > 0)
 800036a:	e7a7      	b.n	80002bc <_ZN7Stepper4stepEi+0x5c>
    }
  }

  return 1;
 800036c:	2301      	movs	r3, #1
}
 800036e:	4618      	mov	r0, r3
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20004f5c 	.word	0x20004f5c
 800037c:	66666667 	.word	0x66666667

08000380 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  if (this->pin_count == 2) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d152      	bne.n	8000438 <_ZN7Stepper9stepMotorEi+0xb8>
    switch (thisStep) {
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	2b03      	cmp	r3, #3
 8000396:	d84f      	bhi.n	8000438 <_ZN7Stepper9stepMotorEi+0xb8>
 8000398:	a201      	add	r2, pc, #4	; (adr r2, 80003a0 <_ZN7Stepper9stepMotorEi+0x20>)
 800039a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039e:	bf00      	nop
 80003a0:	080003b1 	.word	0x080003b1
 80003a4:	080003d3 	.word	0x080003d3
 80003a8:	080003f5 	.word	0x080003f5
 80003ac:	08000417 	.word	0x08000417
      case 0:  // 01
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	8c1b      	ldrh	r3, [r3, #32]
 80003b8:	2200      	movs	r2, #0
 80003ba:	4619      	mov	r1, r3
 80003bc:	f004 fd2c 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80003c8:	2201      	movs	r2, #1
 80003ca:	4619      	mov	r1, r3
 80003cc:	f004 fd24 	bl	8004e18 <HAL_GPIO_WritePin>
      break;
 80003d0:	e032      	b.n	8000438 <_ZN7Stepper9stepMotorEi+0xb8>
      case 1:  // 11
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	8c1b      	ldrh	r3, [r3, #32]
 80003da:	2201      	movs	r2, #1
 80003dc:	4619      	mov	r1, r3
 80003de:	f004 fd1b 	bl	8004e18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80003ea:	2201      	movs	r2, #1
 80003ec:	4619      	mov	r1, r3
 80003ee:	f004 fd13 	bl	8004e18 <HAL_GPIO_WritePin>
      break;
 80003f2:	e021      	b.n	8000438 <_ZN7Stepper9stepMotorEi+0xb8>
      case 2:  // 10
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	8c1b      	ldrh	r3, [r3, #32]
 80003fc:	2201      	movs	r2, #1
 80003fe:	4619      	mov	r1, r3
 8000400:	f004 fd0a 	bl	8004e18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800040c:	2200      	movs	r2, #0
 800040e:	4619      	mov	r1, r3
 8000410:	f004 fd02 	bl	8004e18 <HAL_GPIO_WritePin>
      break;
 8000414:	e010      	b.n	8000438 <_ZN7Stepper9stepMotorEi+0xb8>
      case 3:  // 00
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	8c1b      	ldrh	r3, [r3, #32]
 800041e:	2200      	movs	r2, #0
 8000420:	4619      	mov	r1, r3
 8000422:	f004 fcf9 	bl	8004e18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800042e:	2200      	movs	r2, #0
 8000430:	4619      	mov	r1, r3
 8000432:	f004 fcf1 	bl	8004e18 <HAL_GPIO_WritePin>
      break;
 8000436:	bf00      	nop
    }
  }
  if (this->pin_count == 4) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	2b04      	cmp	r3, #4
 800043e:	f040 8093 	bne.w	8000568 <_ZN7Stepper9stepMotorEi+0x1e8>
    switch (thisStep) {
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	2b03      	cmp	r3, #3
 8000446:	f200 808f 	bhi.w	8000568 <_ZN7Stepper9stepMotorEi+0x1e8>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <_ZN7Stepper9stepMotorEi+0xd0>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000461 	.word	0x08000461
 8000454:	080004a3 	.word	0x080004a3
 8000458:	080004e5 	.word	0x080004e5
 800045c:	08000527 	.word	0x08000527
      case 0:  // 1010
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	8c1b      	ldrh	r3, [r3, #32]
 8000468:	2201      	movs	r2, #1
 800046a:	4619      	mov	r1, r3
 800046c:	f004 fcd4 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000478:	2200      	movs	r2, #0
 800047a:	4619      	mov	r1, r3
 800047c:	f004 fccc 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000488:	2201      	movs	r2, #1
 800048a:	4619      	mov	r1, r3
 800048c:	f004 fcc4 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000498:	2200      	movs	r2, #0
 800049a:	4619      	mov	r1, r3
 800049c:	f004 fcbc 	bl	8004e18 <HAL_GPIO_WritePin>
      break;
 80004a0:	e062      	b.n	8000568 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 1:  // 0110
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	8c1b      	ldrh	r3, [r3, #32]
 80004aa:	2200      	movs	r2, #0
 80004ac:	4619      	mov	r1, r3
 80004ae:	f004 fcb3 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80004ba:	2201      	movs	r2, #1
 80004bc:	4619      	mov	r1, r3
 80004be:	f004 fcab 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80004ca:	2201      	movs	r2, #1
 80004cc:	4619      	mov	r1, r3
 80004ce:	f004 fca3 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80004da:	2200      	movs	r2, #0
 80004dc:	4619      	mov	r1, r3
 80004de:	f004 fc9b 	bl	8004e18 <HAL_GPIO_WritePin>
      break;
 80004e2:	e041      	b.n	8000568 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 2:  //0101
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	8c1b      	ldrh	r3, [r3, #32]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4619      	mov	r1, r3
 80004f0:	f004 fc92 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80004fc:	2201      	movs	r2, #1
 80004fe:	4619      	mov	r1, r3
 8000500:	f004 fc8a 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800050c:	2200      	movs	r2, #0
 800050e:	4619      	mov	r1, r3
 8000510:	f004 fc82 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800051c:	2201      	movs	r2, #1
 800051e:	4619      	mov	r1, r3
 8000520:	f004 fc7a 	bl	8004e18 <HAL_GPIO_WritePin>
      break;
 8000524:	e020      	b.n	8000568 <_ZN7Stepper9stepMotorEi+0x1e8>
      case 3:  //1001
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	8c1b      	ldrh	r3, [r3, #32]
 800052e:	2201      	movs	r2, #1
 8000530:	4619      	mov	r1, r3
 8000532:	f004 fc71 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800053e:	2200      	movs	r2, #0
 8000540:	4619      	mov	r1, r3
 8000542:	f004 fc69 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800054e:	2200      	movs	r2, #0
 8000550:	4619      	mov	r1, r3
 8000552:	f004 fc61 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800055e:	2201      	movs	r2, #1
 8000560:	4619      	mov	r1, r3
 8000562:	f004 fc59 	bl	8004e18 <HAL_GPIO_WritePin>
      break;
 8000566:	bf00      	nop
    }
  }

  if (this->pin_count == 5) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	2b05      	cmp	r3, #5
 800056e:	f040 81b5 	bne.w	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
    switch (thisStep) {
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b09      	cmp	r3, #9
 8000576:	f200 81b1 	bhi.w	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
 800057a:	a201      	add	r2, pc, #4	; (adr r2, 8000580 <_ZN7Stepper9stepMotorEi+0x200>)
 800057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000580:	080005a9 	.word	0x080005a9
 8000584:	080005fb 	.word	0x080005fb
 8000588:	0800064d 	.word	0x0800064d
 800058c:	0800069f 	.word	0x0800069f
 8000590:	080006f1 	.word	0x080006f1
 8000594:	08000743 	.word	0x08000743
 8000598:	08000795 	.word	0x08000795
 800059c:	080007e7 	.word	0x080007e7
 80005a0:	08000839 	.word	0x08000839
 80005a4:	0800088b 	.word	0x0800088b
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	8c1b      	ldrh	r3, [r3, #32]
 80005b0:	2200      	movs	r2, #0
 80005b2:	4619      	mov	r1, r3
 80005b4:	f004 fc30 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80005c0:	2201      	movs	r2, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	f004 fc28 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f004 fc20 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80005e0:	2200      	movs	r2, #0
 80005e2:	4619      	mov	r1, r3
 80005e4:	f004 fc18 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80005f0:	2201      	movs	r2, #1
 80005f2:	4619      	mov	r1, r3
 80005f4:	f004 fc10 	bl	8004e18 <HAL_GPIO_WritePin>
        break;
 80005f8:	e170      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	8c1b      	ldrh	r3, [r3, #32]
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	f004 fc07 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000612:	2201      	movs	r2, #1
 8000614:	4619      	mov	r1, r3
 8000616:	f004 fbff 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000622:	2200      	movs	r2, #0
 8000624:	4619      	mov	r1, r3
 8000626:	f004 fbf7 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	f004 fbef 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	f004 fbe7 	bl	8004e18 <HAL_GPIO_WritePin>
        break;
 800064a:	e147      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	8c1b      	ldrh	r3, [r3, #32]
 8000654:	2200      	movs	r2, #0
 8000656:	4619      	mov	r1, r3
 8000658:	f004 fbde 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000664:	2201      	movs	r2, #1
 8000666:	4619      	mov	r1, r3
 8000668:	f004 fbd6 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000674:	2200      	movs	r2, #0
 8000676:	4619      	mov	r1, r3
 8000678:	f004 fbce 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000684:	2201      	movs	r2, #1
 8000686:	4619      	mov	r1, r3
 8000688:	f004 fbc6 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	f004 fbbe 	bl	8004e18 <HAL_GPIO_WritePin>
        break;
 800069c:	e11e      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	8c1b      	ldrh	r3, [r3, #32]
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	f004 fbb5 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80006b6:	2201      	movs	r2, #1
 80006b8:	4619      	mov	r1, r3
 80006ba:	f004 fbad 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80006c6:	2200      	movs	r2, #0
 80006c8:	4619      	mov	r1, r3
 80006ca:	f004 fba5 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	f004 fb9d 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f004 fb95 	bl	8004e18 <HAL_GPIO_WritePin>
        break;
 80006ee:	e0f5      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	8c1b      	ldrh	r3, [r3, #32]
 80006f8:	2201      	movs	r2, #1
 80006fa:	4619      	mov	r1, r3
 80006fc:	f004 fb8c 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000708:	2201      	movs	r2, #1
 800070a:	4619      	mov	r1, r3
 800070c:	f004 fb84 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000718:	2200      	movs	r2, #0
 800071a:	4619      	mov	r1, r3
 800071c:	f004 fb7c 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000728:	2201      	movs	r2, #1
 800072a:	4619      	mov	r1, r3
 800072c:	f004 fb74 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000738:	2200      	movs	r2, #0
 800073a:	4619      	mov	r1, r3
 800073c:	f004 fb6c 	bl	8004e18 <HAL_GPIO_WritePin>
        break;
 8000740:	e0cc      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	8c1b      	ldrh	r3, [r3, #32]
 800074a:	2201      	movs	r2, #1
 800074c:	4619      	mov	r1, r3
 800074e:	f004 fb63 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800075a:	2200      	movs	r2, #0
 800075c:	4619      	mov	r1, r3
 800075e:	f004 fb5b 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f004 fb53 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800077a:	2201      	movs	r2, #1
 800077c:	4619      	mov	r1, r3
 800077e:	f004 fb4b 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800078a:	2200      	movs	r2, #0
 800078c:	4619      	mov	r1, r3
 800078e:	f004 fb43 	bl	8004e18 <HAL_GPIO_WritePin>
        break;
 8000792:	e0a3      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	8c1b      	ldrh	r3, [r3, #32]
 800079c:	2201      	movs	r2, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	f004 fb3a 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80007ac:	2200      	movs	r2, #0
 80007ae:	4619      	mov	r1, r3
 80007b0:	f004 fb32 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007bc:	2201      	movs	r2, #1
 80007be:	4619      	mov	r1, r3
 80007c0:	f004 fb2a 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	f004 fb22 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80007dc:	2200      	movs	r2, #0
 80007de:	4619      	mov	r1, r3
 80007e0:	f004 fb1a 	bl	8004e18 <HAL_GPIO_WritePin>
        break;
 80007e4:	e07a      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	8c1b      	ldrh	r3, [r3, #32]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	f004 fb11 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	f004 fb09 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800080e:	2201      	movs	r2, #1
 8000810:	4619      	mov	r1, r3
 8000812:	f004 fb01 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	f004 faf9 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f004 faf1 	bl	8004e18 <HAL_GPIO_WritePin>
        break;
 8000836:	e051      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	8c1b      	ldrh	r3, [r3, #32]
 8000840:	2201      	movs	r2, #1
 8000842:	4619      	mov	r1, r3
 8000844:	f004 fae8 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000850:	2200      	movs	r2, #0
 8000852:	4619      	mov	r1, r3
 8000854:	f004 fae0 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000860:	2201      	movs	r2, #1
 8000862:	4619      	mov	r1, r3
 8000864:	f004 fad8 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	f004 fad0 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000880:	2201      	movs	r2, #1
 8000882:	4619      	mov	r1, r3
 8000884:	f004 fac8 	bl	8004e18 <HAL_GPIO_WritePin>
        break;
 8000888:	e028      	b.n	80008dc <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	8c1b      	ldrh	r3, [r3, #32]
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	f004 fabf 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	f004 fab7 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008b2:	2201      	movs	r2, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	f004 faaf 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80008c2:	2200      	movs	r2, #0
 80008c4:	4619      	mov	r1, r3
 80008c6:	f004 faa7 	bl	8004e18 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80008d2:	2201      	movs	r2, #1
 80008d4:	4619      	mov	r1, r3
 80008d6:	f004 fa9f 	bl	8004e18 <HAL_GPIO_WritePin>
        break;
 80008da:	bf00      	nop
    }
  }
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <_ZN7Stepper8honeAxisEv>:

void Stepper::honeAxis(void){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

	// set step tracker to max step to bypass over step protection in step()
	this->step_tracker = this->max_step;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	461a      	mov	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	619a      	str	r2, [r3, #24]

	while(*(this->end_stop) != 0){
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	bf14      	ite	ne
 8000902:	2301      	movne	r3, #1
 8000904:	2300      	moveq	r3, #0
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d008      	beq.n	800091e <_ZN7Stepper8honeAxisEv+0x3a>
		// give time for the end stop value to be updated by the ADC via DMA
		//todo: optimize this to make this quicker (i.e., increase ADC sample frequency)
		HAL_Delay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f002 fa63 	bl	8002dd8 <HAL_Delay>



		step(-1);
 8000912:	f04f 31ff 	mov.w	r1, #4294967295
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fca2 	bl	8000260 <_ZN7Stepper4stepEi>
	while(*(this->end_stop) != 0){
 800091c:	e7eb      	b.n	80008f6 <_ZN7Stepper8honeAxisEv+0x12>
	}

	step_tracker = 0;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <_ZN7Stepper9setAbsPosEl>:

void Stepper::setAbsPos(int32_t step_cnt){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
	this->steps_to_move = step_cnt - this->step_tracker;
 8000936:	683a      	ldr	r2, [r7, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	1ad2      	subs	r2, r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	61da      	str	r2, [r3, #28]
	step(this->steps_to_move);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4619      	mov	r1, r3
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fc89 	bl	8000260 <_ZN7Stepper4stepEi>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000956:	b480      	push	{r7}
 8000958:	b085      	sub	sp, #20
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800095e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000964:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4313      	orrs	r3, r2
 800096c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800096e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4013      	ands	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800098e:	463b      	mov	r3, r7
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800099e:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009a0:	4a3f      	ldr	r2, [pc, #252]	; (8000aa0 <MX_ADC1_Init+0x118>)
 80009a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80009a4:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009a6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80009aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ac:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009be:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009c0:	2208      	movs	r2, #8
 80009c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009c4:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009ca:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80009d0:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d6:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e4:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <MX_ADC1_Init+0x114>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a02:	4826      	ldr	r0, [pc, #152]	; (8000a9c <MX_ADC1_Init+0x114>)
 8000a04:	f002 fbf2 	bl	80031ec <HAL_ADC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a0e:	f001 fbe1 	bl	80021d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a12:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <MX_ADC1_Init+0x11c>)
 8000a14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a16:	2306      	movs	r3, #6
 8000a18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a1e:	237f      	movs	r3, #127	; 0x7f
 8000a20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a22:	2304      	movs	r3, #4
 8000a24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481b      	ldr	r0, [pc, #108]	; (8000a9c <MX_ADC1_Init+0x114>)
 8000a30:	f002 ff88 	bl	8003944 <HAL_ADC_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a3a:	f001 fbcb 	bl	80021d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_ADC1_Init+0x120>)
 8000a40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a42:	230c      	movs	r3, #12
 8000a44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4814      	ldr	r0, [pc, #80]	; (8000a9c <MX_ADC1_Init+0x114>)
 8000a4c:	f002 ff7a 	bl	8003944 <HAL_ADC_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000a56:	f001 fbbd 	bl	80021d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_ADC1_Init+0x124>)
 8000a5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a5e:	2312      	movs	r3, #18
 8000a60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_ADC1_Init+0x114>)
 8000a68:	f002 ff6c 	bl	8003944 <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000a72:	f001 fbaf 	bl	80021d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_ADC1_Init+0x128>)
 8000a78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a7a:	2318      	movs	r3, #24
 8000a7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4619      	mov	r1, r3
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <MX_ADC1_Init+0x114>)
 8000a84:	f002 ff5e 	bl	8003944 <HAL_ADC_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8000a8e:	f001 fba1 	bl	80021d4 <Error_Handler>
  }

}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20004dd0 	.word	0x20004dd0
 8000aa0:	50040000 	.word	0x50040000
 8000aa4:	04300002 	.word	0x04300002
 8000aa8:	08600004 	.word	0x08600004
 8000aac:	0c900008 	.word	0x0c900008
 8000ab0:	1d500080 	.word	0x1d500080

08000ab4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a2e      	ldr	r2, [pc, #184]	; (8000b8c <HAL_ADC_MspInit+0xd8>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d155      	bne.n	8000b82 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ad6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ada:	f7ff ff3c 	bl	8000956 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2004      	movs	r0, #4
 8000ae0:	f7ff ff39 	bl	8000956 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff ff36 	bl	8000956 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MAG_BASE_Pin|MAG_LIGHT_Pin|MAIN_BOARD_TEMP_Pin;
 8000aea:	2307      	movs	r3, #7
 8000aec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aee:	2303      	movs	r3, #3
 8000af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4619      	mov	r1, r3
 8000afc:	4824      	ldr	r0, [pc, #144]	; (8000b90 <HAL_ADC_MspInit+0xdc>)
 8000afe:	f004 f81b 	bl	8004b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_TEMP_Pin;
 8000b02:	2304      	movs	r3, #4
 8000b04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b06:	2303      	movs	r3, #3
 8000b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f004 f80e 	bl	8004b38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <HAL_ADC_MspInit+0xe4>)
 8000b20:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b24:	2205      	movs	r2, #5
 8000b26:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b4c:	2220      	movs	r2, #32
 8000b4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b56:	480f      	ldr	r0, [pc, #60]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b58:	f003 fd7a 	bl	8004650 <HAL_DMA_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000b62:	f001 fb37 	bl	80021d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b6c:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <HAL_ADC_MspInit+0xe0>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2105      	movs	r1, #5
 8000b76:	2012      	movs	r0, #18
 8000b78:	f003 fd13 	bl	80045a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f003 fd2a 	bl	80045d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b82:	bf00      	nop
 8000b84:	3720      	adds	r7, #32
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	50040000 	.word	0x50040000
 8000b90:	48000800 	.word	0x48000800
 8000b94:	20004e34 	.word	0x20004e34
 8000b98:	40020008 	.word	0x40020008

08000b9c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000baa:	f023 0207 	bic.w	r2, r3, #7
 8000bae:	4905      	ldr	r1, [pc, #20]	; (8000bc4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	58000400 	.word	0x58000400

08000bc8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	608b      	str	r3, [r1, #8]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000bf4:	f000 f80a 	bl	8000c0c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000bf8:	4903      	ldr	r1, [pc, #12]	; (8000c08 <APPE_Init+0x18>)
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 ff58 	bl	8001ab0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000c00:	f000 f812 	bl	8000c28 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000c04:	bf00      	nop
}
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20004ea0 	.word	0x20004ea0

08000c0c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000c10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c14:	f7ff ffd8 	bl	8000bc8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000c18:	f012 fc0e 	bl	8013438 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000c1c:	2004      	movs	r0, #4
 8000c1e:	f7ff ffbd 	bl	8000b9c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000c22:	bf00      	nop
}
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000c2e:	f00b fa75 	bl	800c11c <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8000c32:	2000      	movs	r0, #0
 8000c34:	f00d f91e 	bl	800de74 <osMutexNew>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <appe_Tl_Init+0x70>)
 8000c3c:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2001      	movs	r0, #1
 8000c44:	f00d fa5e 	bl	800e104 <osSemaphoreNew>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <appe_Tl_Init+0x74>)
 8000c4c:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <appe_Tl_Init+0x78>)
 8000c50:	2100      	movs	r1, #0
 8000c52:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <appe_Tl_Init+0x7c>)
 8000c54:	f00c ff44 	bl	800dae0 <osThreadNew>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <appe_Tl_Init+0x80>)
 8000c5c:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <appe_Tl_Init+0x84>)
 8000c60:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <appe_Tl_Init+0x88>)
 8000c64:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <appe_Tl_Init+0x8c>)
 8000c6c:	f00b f91c 	bl	800bea8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <appe_Tl_Init+0x90>)
 8000c76:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <appe_Tl_Init+0x94>)
 8000c7a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c7c:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c80:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00b fbb2 	bl	800c3f0 <TL_MM_Init>

  TL_Enable();
 8000c8c:	f00b fa40 	bl	800c110 <TL_Enable>

  return;
 8000c90:	bf00      	nop
}
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20004e94 	.word	0x20004e94
 8000c9c:	20004e9c 	.word	0x20004e9c
 8000ca0:	080138f4 	.word	0x080138f4
 8000ca4:	08000da9 	.word	0x08000da9
 8000ca8:	20004e98 	.word	0x20004e98
 8000cac:	2003061c 	.word	0x2003061c
 8000cb0:	08000cc1 	.word	0x08000cc1
 8000cb4:	08000d01 	.word	0x08000d01
 8000cb8:	20030728 	.word	0x20030728
 8000cbc:	200300e0 	.word	0x200300e0

08000cc0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <APPE_SysStatusNot+0x16>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d008      	beq.n	8000ce6 <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8000cd4:	e00d      	b.n	8000cf2 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <APPE_SysStatusNot+0x3c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f04f 31ff 	mov.w	r1, #4294967295
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f00d f962 	bl	800dfa8 <osMutexAcquire>
      break;
 8000ce4:	e005      	b.n	8000cf2 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <APPE_SysStatusNot+0x3c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00d f9ba 	bl	800e064 <osMutexRelease>
      break;
 8000cf0:	bf00      	nop
  }
  return;
 8000cf2:	bf00      	nop
}
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20004e94 	.word	0x20004e94

08000d00 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	330b      	adds	r3, #11
 8000d0e:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000d1a:	d004      	beq.n	8000d26 <APPE_SysUserEvtRx+0x26>
 8000d1c:	f249 2201 	movw	r2, #37377	; 0x9201
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d003      	beq.n	8000d2c <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8000d24:	e008      	b.n	8000d38 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8000d26:	f000 f833 	bl	8000d90 <APPE_SysEvtReadyProcessing>
         break;
 8000d2a:	e005      	b.n	8000d38 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	789b      	ldrb	r3, [r3, #2]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f805 	bl	8000d40 <APPE_SysEvtError>
         break;
 8000d36:	bf00      	nop
  }
  return;
 8000d38:	bf00      	nop
}
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b7d      	cmp	r3, #125	; 0x7d
 8000d4e:	d002      	beq.n	8000d56 <APPE_SysEvtError+0x16>
 8000d50:	2b7e      	cmp	r3, #126	; 0x7e
 8000d52:	d006      	beq.n	8000d62 <APPE_SysEvtError+0x22>
 8000d54:	e00b      	b.n	8000d6e <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <APPE_SysEvtError+0x44>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f001 fdf4 	bl	8002948 <logApplication>
       break;
 8000d60:	e00c      	b.n	8000d7c <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <APPE_SysEvtError+0x48>)
 8000d64:	2101      	movs	r1, #1
 8000d66:	2000      	movs	r0, #0
 8000d68:	f001 fdee 	bl	8002948 <logApplication>
       break;
 8000d6c:	e006      	b.n	8000d7c <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <APPE_SysEvtError+0x4c>)
 8000d72:	2101      	movs	r1, #1
 8000d74:	2000      	movs	r0, #0
 8000d76:	f001 fde7 	bl	8002948 <logApplication>
       break;
 8000d7a:	bf00      	nop
  }
  return;
 8000d7c:	bf00      	nop
}
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	08013558 	.word	0x08013558
 8000d88:	0801357c 	.word	0x0801357c
 8000d8c:	0801359c 	.word	0x0801359c

08000d90 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000d94:	f00b fba0 	bl	800c4d8 <TL_TRACES_Init>

  APP_THREAD_Init();
 8000d98:	f010 fe30 	bl	80119fc <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f012 fb5c 	bl	801345c <UTIL_LPM_SetOffMode>
  return;
 8000da4:	bf00      	nop
}
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	2100      	movs	r1, #0
 8000db6:	2001      	movs	r0, #1
 8000db8:	f00c ff9a 	bl	800dcf0 <osThreadFlagsWait>
     shci_user_evt_proc();
 8000dbc:	f00b f890 	bl	800bee0 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000dc0:	e7f6      	b.n	8000db0 <ShciUserEvtProcess+0x8>
	...

08000dc4 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <shci_notify_asynch_evt+0x1c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f00c ff2a 	bl	800dc2c <osThreadFlagsSet>
  return;
 8000dd8:	bf00      	nop
}
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20004e98 	.word	0x20004e98

08000de4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <shci_cmd_resp_release+0x1c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00d fa8b 	bl	800e30c <osSemaphoreRelease>
  return;
 8000df6:	bf00      	nop
}
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20004e9c 	.word	0x20004e9c

08000e04 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <shci_cmd_resp_wait+0x20>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	4618      	mov	r0, r3
 8000e16:	f00d fa13 	bl	800e240 <osSemaphoreAcquire>
  return;
 8000e1a:	bf00      	nop
}
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20004e9c 	.word	0x20004e9c

08000e28 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f00b fb19 	bl	800c468 <TL_MM_EvtDone>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e44:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <_Z16MX_FREERTOS_Initv+0x1c>)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <_Z16MX_FREERTOS_Initv+0x20>)
 8000e4a:	f00c fe49 	bl	800dae0 <osThreadNew>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <_Z16MX_FREERTOS_Initv+0x24>)
 8000e52:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  APPE_Init();
 8000e54:	f7ff fecc 	bl	8000bf0 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	08013918 	.word	0x08013918
 8000e60:	08000e69 	.word	0x08000e69
 8000e64:	2000028c 	.word	0x2000028c

08000e68 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	osDelay(100);
 8000e70:	2064      	movs	r0, #100	; 0x64
 8000e72:	f00c ffd1 	bl	800de18 <osDelay>
	myMain();
 8000e76:	f001 fab9 	bl	80023ec <_Z6myMainv>
  for(;;)
  {
	  osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8000e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7e:	2101      	movs	r1, #1
 8000e80:	2001      	movs	r0, #1
 8000e82:	f00c ff35 	bl	800dcf0 <osThreadFlagsWait>
 8000e86:	e7f8      	b.n	8000e7a <_Z16StartDefaultTaskPv+0x12>

08000e88 <startCal>:
 */
#ifndef SOLAR_SENSOR_NODE

void startCal(float angle_base_min, float angle_base_max,
		float angle_led_min, float angle_led_max,
				Stepper& motor_base, Stepper& motor_led){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000e92:	edc7 0a04 	vstr	s1, [r7, #16]
 8000e96:	ed87 1a03 	vstr	s2, [r7, #12]
 8000e9a:	edc7 1a02 	vstr	s3, [r7, #8]
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]

	// configure calMsg packet
	calMsg.UID = SPOTLIGHT_UID;
 8000ea2:	4b58      	ldr	r3, [pc, #352]	; (8001004 <startCal+0x17c>)
 8000ea4:	2218      	movs	r2, #24
 8000ea6:	701a      	strb	r2, [r3, #0]
	calMsg.cal_code = CALIBRATION_START_COMMAND;
 8000ea8:	4b56      	ldr	r3, [pc, #344]	; (8001004 <startCal+0x17c>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	705a      	strb	r2, [r3, #1]

	/* (1) hone axis */
	motor_base.honeAxis();
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fd18 	bl	80008e4 <_ZN7Stepper8honeAxisEv>
	motor_led.honeAxis();
 8000eb4:	6838      	ldr	r0, [r7, #0]
 8000eb6:	f7ff fd15 	bl	80008e4 <_ZN7Stepper8honeAxisEv>

	/* (2) multicast that calibration will begin */

	// clear current calibration table
	memset(calibration_table,0,sizeof(calibration_table));
 8000eba:	2250      	movs	r2, #80	; 0x50
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4852      	ldr	r0, [pc, #328]	; (8001008 <startCal+0x180>)
 8000ec0:	f012 fb29 	bl	8013516 <memset>

	broadcastCalStart(&calMsg); //TODO: implement
 8000ec4:	484f      	ldr	r0, [pc, #316]	; (8001004 <startCal+0x17c>)
 8000ec6:	f000 f8a9 	bl	800101c <broadcastCalStart>
	/* (3) wait for nodes to ACK and populate a table with the UIDs */

	// note: nodes will be replying to a Coap server (code exists in app_thread.c for populating of table)

	// wait for nodes to reply with their IDs
	osDelay(CAL_INIT_CAL_TIMEOUT);
 8000eca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ece:	f00c ffa3 	bl	800de18 <osDelay>
	/* (4) Run through each position, sending an msg to each node indicating the angle is set
	 * and waiting for said nodes to respond with their solar power measurements. If node does
	 * not reply within CAL_POS_TIMEOUT, re-send msg and wait one more cycle before continuing.
	 */
		// calculate step bounds for each axis
		int32_t min_led_axis_step = (((angle_led_min) * LED_STEP_RANGE));
 8000ed2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ed6:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800100c <startCal+0x184>
 8000eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee2:	ee17 3a90 	vmov	r3, s15
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
		int32_t max_led_axis_step = (((angle_led_max) * LED_STEP_RANGE));
 8000ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eec:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800100c <startCal+0x184>
 8000ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ef8:	ee17 3a90 	vmov	r3, s15
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
		int32_t min_base_axis_step = (((angle_led_min) * BASE_STEP_RANGE));
 8000efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f02:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001010 <startCal+0x188>
 8000f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f0e:	ee17 3a90 	vmov	r3, s15
 8000f12:	623b      	str	r3, [r7, #32]
		int32_t max_base_axis_step = (((angle_led_max) * BASE_STEP_RANGE));
 8000f14:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f18:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001010 <startCal+0x188>
 8000f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f24:	ee17 3a90 	vmov	r3, s15
 8000f28:	61fb      	str	r3, [r7, #28]

		// move to desired angle
		uint8_t flip_dir = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 8000f30:	4a38      	ldr	r2, [pc, #224]	; (8001014 <startCal+0x18c>)
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b37      	ldr	r3, [pc, #220]	; (8001014 <startCal+0x18c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	db5a      	blt.n	8000ff6 <startCal+0x16e>
			motor_base.setAbsPos(base_step);
 8000f40:	4b34      	ldr	r3, [pc, #208]	; (8001014 <startCal+0x18c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fcf0 	bl	800092c <_ZN7Stepper9setAbsPosEl>

			if(flip_dir == 0){
 8000f4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d125      	bne.n	8000fa0 <startCal+0x118>
				for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000f54:	4a30      	ldr	r2, [pc, #192]	; (8001018 <startCal+0x190>)
 8000f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <startCal+0x190>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f60:	429a      	cmp	r2, r3
 8000f62:	db19      	blt.n	8000f98 <startCal+0x110>
					motor_led.setAbsPos(led_step);
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <startCal+0x190>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f7ff fcde 	bl	800092c <_ZN7Stepper9setAbsPosEl>
					getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <startCal+0x18c>)
 8000f72:	6819      	ldr	r1, [r3, #0]
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <startCal+0x190>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4822      	ldr	r0, [pc, #136]	; (8001004 <startCal+0x17c>)
 8000f7c:	f000 f892 	bl	80010a4 <getMeasurementsFromNodes>

					// wait CAL_POS_TIMEOUT milliseconds for nodes to reply with power values
#ifndef DEBUG_SERIAL
					osThreadFlagsWait (CAL_THREAD_FLAG, osFlagsWaitAny, CAL_POS_TIMEOUT);
 8000f80:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2003      	movs	r0, #3
 8000f88:	f00c feb2 	bl	800dcf0 <osThreadFlagsWait>
				for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <startCal+0x190>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	331e      	adds	r3, #30
 8000f92:	4a21      	ldr	r2, [pc, #132]	; (8001018 <startCal+0x190>)
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e7e0      	b.n	8000f5a <startCal+0xd2>
#else
					osDelay(100);
#endif
				}
				flip_dir = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000f9e:	e024      	b.n	8000fea <startCal+0x162>
			}
			else{
				for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <startCal+0x190>)
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <startCal+0x190>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dc19      	bgt.n	8000fe4 <startCal+0x15c>
					motor_led.setAbsPos(led_step);
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <startCal+0x190>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6838      	ldr	r0, [r7, #0]
 8000fb8:	f7ff fcb8 	bl	800092c <_ZN7Stepper9setAbsPosEl>
					getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <startCal+0x18c>)
 8000fbe:	6819      	ldr	r1, [r3, #0]
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <startCal+0x190>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	480f      	ldr	r0, [pc, #60]	; (8001004 <startCal+0x17c>)
 8000fc8:	f000 f86c 	bl	80010a4 <getMeasurementsFromNodes>

					// wait CAL_POS_TIMEOUT milliseconds for nodes to reply with power values
#ifndef DEBUG_SERIAL
					osThreadFlagsWait (CAL_THREAD_FLAG, osFlagsWaitAny, CAL_POS_TIMEOUT);
 8000fcc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f00c fe8c 	bl	800dcf0 <osThreadFlagsWait>
				for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <startCal+0x190>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	3b1e      	subs	r3, #30
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <startCal+0x190>)
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e7e0      	b.n	8000fa6 <startCal+0x11e>
#else
					osDelay(100);
#endif
				}
				flip_dir = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <startCal+0x18c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	330a      	adds	r3, #10
 8000ff0:	4a08      	ldr	r2, [pc, #32]	; (8001014 <startCal+0x18c>)
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	e79f      	b.n	8000f36 <startCal+0xae>
			}
		}


//	/* (5) send calibration complete message to all nodes */
		broadcastCalComplete(&calMsg);
 8000ff6:	4803      	ldr	r0, [pc, #12]	; (8001004 <startCal+0x17c>)
 8000ff8:	f000 f832 	bl	8001060 <broadcastCalComplete>

}
 8000ffc:	bf00      	nop
 8000ffe:	3730      	adds	r7, #48	; 0x30
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200002e0 	.word	0x200002e0
 8001008:	20000290 	.word	0x20000290
 800100c:	46f24600 	.word	0x46f24600
 8001010:	45c06000 	.word	0x45c06000
 8001014:	200002ec 	.word	0x200002ec
 8001018:	200002e8 	.word	0x200002e8

0800101c <broadcastCalStart>:
#endif


void broadcastCalStart(CalMsg* msg){
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af04      	add	r7, sp, #16
 8001022:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	809a      	strh	r2, [r3, #4]
	msg->angle_2 = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	80da      	strh	r2, [r3, #6]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 8001036:	2301      	movs	r3, #1
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2303      	movs	r3, #3
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	2301      	movs	r3, #1
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <broadcastCalStart+0x3c>)
 8001044:	4a05      	ldr	r2, [pc, #20]	; (800105c <broadcastCalStart+0x40>)
 8001046:	2108      	movs	r1, #8
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f010 ffa5 	bl	8011f98 <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 800104e:	bf00      	nop
}
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	08013a38 	.word	0x08013a38
 800105c:	20005000 	.word	0x20005000

08001060 <broadcastCalComplete>:

void broadcastCalComplete(CalMsg* msg){
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af04      	add	r7, sp, #16
 8001066:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	809a      	strh	r2, [r3, #4]
	msg->angle_2 = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	80da      	strh	r2, [r3, #6]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 800107a:	2301      	movs	r3, #1
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2303      	movs	r3, #3
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	2301      	movs	r3, #1
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <broadcastCalComplete+0x3c>)
 8001088:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <broadcastCalComplete+0x40>)
 800108a:	2108      	movs	r1, #8
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f010 ff83 	bl	8011f98 <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 8001092:	bf00      	nop
}
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	08013a38 	.word	0x08013a38
 80010a0:	20005000 	.word	0x20005000

080010a4 <getMeasurementsFromNodes>:

void getMeasurementsFromNodes(CalMsg* msg, int32_t angle_1, int32_t angle_2){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af04      	add	r7, sp, #16
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]

	msg->cal_fcn = CALIBRATION_GET_MEAS;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2202      	movs	r2, #2
 80010b4:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = angle_1;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	809a      	strh	r2, [r3, #4]
	msg->angle_2 = angle_2;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	80da      	strh	r2, [r3, #6]

#ifndef DEBUG_SERIAL
	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 80010c6:	2301      	movs	r3, #1
 80010c8:	9302      	str	r3, [sp, #8]
 80010ca:	2301      	movs	r3, #1
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	2301      	movs	r3, #1
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <getMeasurementsFromNodes+0x44>)
 80010d4:	4a05      	ldr	r2, [pc, #20]	; (80010ec <getMeasurementsFromNodes+0x48>)
 80010d6:	2108      	movs	r1, #8
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f010 ff5d 	bl	8011f98 <APP_THREAD_SendCoapMsg>
#else
	// TODO REMOVE!!!
	measMsgReceivedFromNode(&measMsg);
#endif

	return;
 80010de:	bf00      	nop
}
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	08013a38 	.word	0x08013a38
 80010ec:	20005000 	.word	0x20005000

080010f0 <LL_AHB1_GRP1_EnableClock>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4313      	orrs	r3, r2
 8001106:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001114:	68fb      	ldr	r3, [r7, #12]
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001126:	2004      	movs	r0, #4
 8001128:	f7ff ffe2 	bl	80010f0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff ffdf 	bl	80010f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2105      	movs	r1, #5
 8001136:	200b      	movs	r0, #11
 8001138:	f003 fa33 	bl	80045a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800113c:	200b      	movs	r0, #11
 800113e:	f003 fa4a 	bl	80045d6 <HAL_NVIC_EnableIRQ>

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}

08001146 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <LL_AHB2_GRP1_EnableClock>:
{
 800115a:	b480      	push	{r7}
 800115c:	b085      	sub	sp, #20
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001168:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4313      	orrs	r3, r2
 8001170:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4013      	ands	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a0:	2004      	movs	r0, #4
 80011a2:	f7ff ffda 	bl	800115a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2002      	movs	r0, #2
 80011a8:	f7ff ffd7 	bl	800115a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff ffd4 	bl	800115a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b2:	2010      	movs	r0, #16
 80011b4:	f7ff ffd1 	bl	800115a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 80011b8:	2200      	movs	r2, #0
 80011ba:	f240 3193 	movw	r1, #915	; 0x393
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c2:	f003 fe29 	bl	8004e18 <HAL_GPIO_WritePin>
                          |AIN1_1_Pin|BIN1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN1_2_Pin|BIN2_2_Pin|BIN2_1_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 80011cc:	4823      	ldr	r0, [pc, #140]	; (800125c <MX_GPIO_Init+0xd0>)
 80011ce:	f003 fe23 	bl	8004e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2103      	movs	r1, #3
 80011d6:	4821      	ldr	r0, [pc, #132]	; (800125c <MX_GPIO_Init+0xd0>)
 80011d8:	f003 fe1e 	bl	8004e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2110      	movs	r1, #16
 80011e0:	481f      	ldr	r0, [pc, #124]	; (8001260 <MX_GPIO_Init+0xd4>)
 80011e2:	f003 fe19 	bl	8004e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 80011e6:	f240 3393 	movw	r3, #915	; 0x393
 80011ea:	607b      	str	r3, [r7, #4]
                          |AIN1_1_Pin|BIN1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f003 fc9a 	bl	8004b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_LED_DISC_Pin;
 8001204:	2308      	movs	r3, #8
 8001206:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT_LED_DISC_GPIO_Port, &GPIO_InitStruct);
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001218:	f003 fc8e 	bl	8004b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BIN1_2_Pin|BIN2_2_Pin|BLUE_LED_Pin|GREEN_LED_Pin
 800121c:	f644 4303 	movw	r3, #19459	; 0x4c03
 8001220:	607b      	str	r3, [r7, #4]
                          |BIN2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4619      	mov	r1, r3
 8001232:	480a      	ldr	r0, [pc, #40]	; (800125c <MX_GPIO_Init+0xd0>)
 8001234:	f003 fc80 	bl	8004b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8001238:	2310      	movs	r3, #16
 800123a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_GPIO_Init+0xd4>)
 800124e:	f003 fc73 	bl	8004b38 <HAL_GPIO_Init>

}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	48000400 	.word	0x48000400
 8001260:	48001000 	.word	0x48001000

08001264 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <LL_EXTI_EnableIT_0_31+0x24>)
 800126e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001272:	4905      	ldr	r1, [pc, #20]	; (8001288 <LL_EXTI_EnableIT_0_31+0x24>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4313      	orrs	r3, r2
 8001278:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	58000800 	.word	0x58000800

0800128c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4904      	ldr	r1, [pc, #16]	; (80012ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]

}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	58000800 	.word	0x58000800

080012b0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <ReadRtcSsrValue+0x3c>)
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <ReadRtcSsrValue+0x3c>)
 80012c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80012c6:	e005      	b.n	80012d4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <ReadRtcSsrValue+0x3c>)
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d1f5      	bne.n	80012c8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80012dc:	683b      	ldr	r3, [r7, #0]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40002800 	.word	0x40002800

080012f0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	71fb      	strb	r3, [r7, #7]
 80012fc:	4613      	mov	r3, r2
 80012fe:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001300:	79ba      	ldrb	r2, [r7, #6]
 8001302:	491d      	ldr	r1, [pc, #116]	; (8001378 <LinkTimerAfter+0x88>)
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	440b      	add	r3, r1
 800130e:	3315      	adds	r3, #21
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b06      	cmp	r3, #6
 8001318:	d009      	beq.n	800132e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	4916      	ldr	r1, [pc, #88]	; (8001378 <LinkTimerAfter+0x88>)
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	3314      	adds	r3, #20
 800132a:	79fa      	ldrb	r2, [r7, #7]
 800132c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	4911      	ldr	r1, [pc, #68]	; (8001378 <LinkTimerAfter+0x88>)
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	440b      	add	r3, r1
 800133c:	3315      	adds	r3, #21
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001342:	79fa      	ldrb	r2, [r7, #7]
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <LinkTimerAfter+0x88>)
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	440b      	add	r3, r1
 8001350:	3314      	adds	r3, #20
 8001352:	79ba      	ldrb	r2, [r7, #6]
 8001354:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001356:	79ba      	ldrb	r2, [r7, #6]
 8001358:	4907      	ldr	r1, [pc, #28]	; (8001378 <LinkTimerAfter+0x88>)
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	440b      	add	r3, r1
 8001364:	3315      	adds	r3, #21
 8001366:	79fa      	ldrb	r2, [r7, #7]
 8001368:	701a      	strb	r2, [r3, #0]

  return;
 800136a:	bf00      	nop
}
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200001c0 	.word	0x200001c0

0800137c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	460a      	mov	r2, r1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	4613      	mov	r3, r2
 800138a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800138c:	4b29      	ldr	r3, [pc, #164]	; (8001434 <LinkTimerBefore+0xb8>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	79ba      	ldrb	r2, [r7, #6]
 8001394:	429a      	cmp	r2, r3
 8001396:	d032      	beq.n	80013fe <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001398:	79ba      	ldrb	r2, [r7, #6]
 800139a:	4927      	ldr	r1, [pc, #156]	; (8001438 <LinkTimerBefore+0xbc>)
 800139c:	4613      	mov	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	3314      	adds	r3, #20
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	4922      	ldr	r1, [pc, #136]	; (8001438 <LinkTimerBefore+0xbc>)
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	440b      	add	r3, r1
 80013ba:	3315      	adds	r3, #21
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80013c0:	79fa      	ldrb	r2, [r7, #7]
 80013c2:	491d      	ldr	r1, [pc, #116]	; (8001438 <LinkTimerBefore+0xbc>)
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	3315      	adds	r3, #21
 80013d0:	79ba      	ldrb	r2, [r7, #6]
 80013d2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80013d4:	79fa      	ldrb	r2, [r7, #7]
 80013d6:	4918      	ldr	r1, [pc, #96]	; (8001438 <LinkTimerBefore+0xbc>)
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	3314      	adds	r3, #20
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80013e8:	79ba      	ldrb	r2, [r7, #6]
 80013ea:	4913      	ldr	r1, [pc, #76]	; (8001438 <LinkTimerBefore+0xbc>)
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	3314      	adds	r3, #20
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80013fc:	e014      	b.n	8001428 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80013fe:	79fa      	ldrb	r2, [r7, #7]
 8001400:	490d      	ldr	r1, [pc, #52]	; (8001438 <LinkTimerBefore+0xbc>)
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	440b      	add	r3, r1
 800140c:	3315      	adds	r3, #21
 800140e:	79ba      	ldrb	r2, [r7, #6]
 8001410:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001412:	79ba      	ldrb	r2, [r7, #6]
 8001414:	4908      	ldr	r1, [pc, #32]	; (8001438 <LinkTimerBefore+0xbc>)
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	440b      	add	r3, r1
 8001420:	3314      	adds	r3, #20
 8001422:	79fa      	ldrb	r2, [r7, #7]
 8001424:	701a      	strb	r2, [r3, #0]
  return;
 8001426:	bf00      	nop
}
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000250 	.word	0x20000250
 8001438:	200001c0 	.word	0x200001c0

0800143c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001446:	4b4e      	ldr	r3, [pc, #312]	; (8001580 <linkTimer+0x144>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b06      	cmp	r3, #6
 800144e:	d118      	bne.n	8001482 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001450:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <linkTimer+0x144>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <linkTimer+0x148>)
 8001458:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800145a:	4a49      	ldr	r2, [pc, #292]	; (8001580 <linkTimer+0x144>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	4949      	ldr	r1, [pc, #292]	; (8001588 <linkTimer+0x14c>)
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	3315      	adds	r3, #21
 8001470:	2206      	movs	r2, #6
 8001472:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001474:	4b45      	ldr	r3, [pc, #276]	; (800158c <linkTimer+0x150>)
 8001476:	f04f 32ff 	mov.w	r2, #4294967295
 800147a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	81fb      	strh	r3, [r7, #14]
 8001480:	e078      	b.n	8001574 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001482:	f000 f909 	bl	8001698 <ReturnTimeElapsed>
 8001486:	4603      	mov	r3, r0
 8001488:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	493e      	ldr	r1, [pc, #248]	; (8001588 <linkTimer+0x14c>)
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	3308      	adds	r3, #8
 800149a:	6819      	ldr	r1, [r3, #0]
 800149c:	89fb      	ldrh	r3, [r7, #14]
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	4419      	add	r1, r3
 80014a2:	4839      	ldr	r0, [pc, #228]	; (8001588 <linkTimer+0x14c>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4403      	add	r3, r0
 80014ae:	3308      	adds	r3, #8
 80014b0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80014b2:	79fa      	ldrb	r2, [r7, #7]
 80014b4:	4934      	ldr	r1, [pc, #208]	; (8001588 <linkTimer+0x14c>)
 80014b6:	4613      	mov	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	3308      	adds	r3, #8
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <linkTimer+0x144>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4619      	mov	r1, r3
 80014ce:	4a2e      	ldr	r2, [pc, #184]	; (8001588 <linkTimer+0x14c>)
 80014d0:	460b      	mov	r3, r1
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	440b      	add	r3, r1
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4413      	add	r3, r2
 80014da:	3308      	adds	r3, #8
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d337      	bcc.n	8001554 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <linkTimer+0x144>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80014ea:	7b7a      	ldrb	r2, [r7, #13]
 80014ec:	4926      	ldr	r1, [pc, #152]	; (8001588 <linkTimer+0x14c>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	3315      	adds	r3, #21
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80014fe:	e013      	b.n	8001528 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001500:	7b7a      	ldrb	r2, [r7, #13]
 8001502:	4921      	ldr	r1, [pc, #132]	; (8001588 <linkTimer+0x14c>)
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	440b      	add	r3, r1
 800150e:	3315      	adds	r3, #21
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001514:	7b7a      	ldrb	r2, [r7, #13]
 8001516:	491c      	ldr	r1, [pc, #112]	; (8001588 <linkTimer+0x14c>)
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	3315      	adds	r3, #21
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001528:	7b3b      	ldrb	r3, [r7, #12]
 800152a:	2b06      	cmp	r3, #6
 800152c:	d00b      	beq.n	8001546 <linkTimer+0x10a>
 800152e:	7b3a      	ldrb	r2, [r7, #12]
 8001530:	4915      	ldr	r1, [pc, #84]	; (8001588 <linkTimer+0x14c>)
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	440b      	add	r3, r1
 800153c:	3308      	adds	r3, #8
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	429a      	cmp	r2, r3
 8001544:	d2dc      	bcs.n	8001500 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001546:	7b7a      	ldrb	r2, [r7, #13]
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fecf 	bl	80012f0 <LinkTimerAfter>
 8001552:	e00f      	b.n	8001574 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <linkTimer+0x144>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff0c 	bl	800137c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <linkTimer+0x144>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <linkTimer+0x148>)
 800156c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <linkTimer+0x144>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001574:	89fb      	ldrh	r3, [r7, #14]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000250 	.word	0x20000250
 8001584:	20000251 	.word	0x20000251
 8001588:	200001c0 	.word	0x200001c0
 800158c:	20000254 	.word	0x20000254

08001590 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	460a      	mov	r2, r1
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	4613      	mov	r3, r2
 800159e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80015a0:	4b39      	ldr	r3, [pc, #228]	; (8001688 <UnlinkTimer+0xf8>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	79fa      	ldrb	r2, [r7, #7]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d111      	bne.n	80015d0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80015ac:	4b36      	ldr	r3, [pc, #216]	; (8001688 <UnlinkTimer+0xf8>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b36      	ldr	r3, [pc, #216]	; (800168c <UnlinkTimer+0xfc>)
 80015b4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80015b6:	79fa      	ldrb	r2, [r7, #7]
 80015b8:	4935      	ldr	r1, [pc, #212]	; (8001690 <UnlinkTimer+0x100>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	3315      	adds	r3, #21
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <UnlinkTimer+0xf8>)
 80015cc:	701a      	strb	r2, [r3, #0]
 80015ce:	e03e      	b.n	800164e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80015d0:	79fa      	ldrb	r2, [r7, #7]
 80015d2:	492f      	ldr	r1, [pc, #188]	; (8001690 <UnlinkTimer+0x100>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	3314      	adds	r3, #20
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80015e4:	79fa      	ldrb	r2, [r7, #7]
 80015e6:	492a      	ldr	r1, [pc, #168]	; (8001690 <UnlinkTimer+0x100>)
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	3315      	adds	r3, #21
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80015f8:	79f9      	ldrb	r1, [r7, #7]
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	4824      	ldr	r0, [pc, #144]	; (8001690 <UnlinkTimer+0x100>)
 80015fe:	460b      	mov	r3, r1
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	440b      	add	r3, r1
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4403      	add	r3, r0
 8001608:	3315      	adds	r3, #21
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2d8      	uxtb	r0, r3
 800160e:	4920      	ldr	r1, [pc, #128]	; (8001690 <UnlinkTimer+0x100>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	3315      	adds	r3, #21
 800161c:	4602      	mov	r2, r0
 800161e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001620:	7bbb      	ldrb	r3, [r7, #14]
 8001622:	2b06      	cmp	r3, #6
 8001624:	d013      	beq.n	800164e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001626:	79f9      	ldrb	r1, [r7, #7]
 8001628:	7bba      	ldrb	r2, [r7, #14]
 800162a:	4819      	ldr	r0, [pc, #100]	; (8001690 <UnlinkTimer+0x100>)
 800162c:	460b      	mov	r3, r1
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	440b      	add	r3, r1
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4403      	add	r3, r0
 8001636:	3314      	adds	r3, #20
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b2d8      	uxtb	r0, r3
 800163c:	4914      	ldr	r1, [pc, #80]	; (8001690 <UnlinkTimer+0x100>)
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	3314      	adds	r3, #20
 800164a:	4602      	mov	r2, r0
 800164c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800164e:	79fa      	ldrb	r2, [r7, #7]
 8001650:	490f      	ldr	r1, [pc, #60]	; (8001690 <UnlinkTimer+0x100>)
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	330c      	adds	r3, #12
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <UnlinkTimer+0xf8>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b06      	cmp	r3, #6
 800166a:	d107      	bne.n	800167c <UnlinkTimer+0xec>
 800166c:	79bb      	ldrb	r3, [r7, #6]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d104      	bne.n	800167c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <UnlinkTimer+0x104>)
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	601a      	str	r2, [r3, #0]
  }

  return;
 800167a:	bf00      	nop
 800167c:	bf00      	nop
}
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	20000250 	.word	0x20000250
 800168c:	20000251 	.word	0x20000251
 8001690:	200001c0 	.word	0x200001c0
 8001694:	20000254 	.word	0x20000254

08001698 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <ReturnTimeElapsed+0x70>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a6:	d026      	beq.n	80016f6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80016a8:	f7ff fe02 	bl	80012b0 <ReadRtcSsrValue>
 80016ac:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <ReturnTimeElapsed+0x70>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d805      	bhi.n	80016c4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <ReturnTimeElapsed+0x70>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	e00a      	b.n	80016da <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <ReturnTimeElapsed+0x74>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <ReturnTimeElapsed+0x70>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <ReturnTimeElapsed+0x78>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
 80016e6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <ReturnTimeElapsed+0x7c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	40d3      	lsrs	r3, r2
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	e001      	b.n	80016fa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	b29b      	uxth	r3, r3
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000254 	.word	0x20000254
 800170c:	200002f6 	.word	0x200002f6
 8001710:	200002f5 	.word	0x200002f5
 8001714:	200002f4 	.word	0x200002f4

08001718 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d108      	bne.n	800173a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001728:	f7ff fdc2 	bl	80012b0 <ReadRtcSsrValue>
 800172c:	4602      	mov	r2, r0
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <RestartWakeupCounter+0xa8>)
 8001730:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001732:	2003      	movs	r0, #3
 8001734:	f002 ff6f 	bl	8004616 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001738:	e03e      	b.n	80017b8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d803      	bhi.n	8001748 <RestartWakeupCounter+0x30>
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <RestartWakeupCounter+0xac>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d002      	beq.n	800174e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	3b01      	subs	r3, #1
 800174c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800174e:	bf00      	nop
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <RestartWakeupCounter+0xb0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f7      	beq.n	8001750 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <RestartWakeupCounter+0xb0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <RestartWakeupCounter+0xb0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001774:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <RestartWakeupCounter+0xb4>)
 8001778:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800177c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800177e:	2003      	movs	r0, #3
 8001780:	f002 ff57 	bl	8004632 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <RestartWakeupCounter+0xb8>)
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	0c1b      	lsrs	r3, r3, #16
 800178a:	041b      	lsls	r3, r3, #16
 800178c:	88fa      	ldrh	r2, [r7, #6]
 800178e:	4910      	ldr	r1, [pc, #64]	; (80017d0 <RestartWakeupCounter+0xb8>)
 8001790:	4313      	orrs	r3, r2
 8001792:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001794:	f7ff fd8c 	bl	80012b0 <ReadRtcSsrValue>
 8001798:	4602      	mov	r2, r0
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <RestartWakeupCounter+0xa8>)
 800179c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <RestartWakeupCounter+0xb0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <RestartWakeupCounter+0xb0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017b0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80017b2:	f3af 8000 	nop.w
  return ;
 80017b6:	bf00      	nop
}
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000254 	.word	0x20000254
 80017c4:	200002f4 	.word	0x200002f4
 80017c8:	200002f0 	.word	0x200002f0
 80017cc:	58000800 	.word	0x58000800
 80017d0:	40002800 	.word	0x40002800

080017d4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <RescheduleTimerList+0x124>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e6:	d108      	bne.n	80017fa <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80017e8:	bf00      	nop
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <RescheduleTimerList+0x128>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f7      	bne.n	80017ea <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80017fa:	4b40      	ldr	r3, [pc, #256]	; (80018fc <RescheduleTimerList+0x128>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <RescheduleTimerList+0x128>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800180c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800180e:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <RescheduleTimerList+0x12c>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	493b      	ldr	r1, [pc, #236]	; (8001904 <RescheduleTimerList+0x130>)
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	3308      	adds	r3, #8
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001828:	f7ff ff36 	bl	8001698 <ReturnTimeElapsed>
 800182c:	4603      	mov	r3, r0
 800182e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	429a      	cmp	r2, r3
 8001836:	d205      	bcs.n	8001844 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <RescheduleTimerList+0x134>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	e04d      	b.n	80018e0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	4a31      	ldr	r2, [pc, #196]	; (800190c <RescheduleTimerList+0x138>)
 8001848:	8812      	ldrh	r2, [r2, #0]
 800184a:	b292      	uxth	r2, r2
 800184c:	4413      	add	r3, r2
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4293      	cmp	r3, r2
 8001854:	d906      	bls.n	8001864 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001856:	4b2d      	ldr	r3, [pc, #180]	; (800190c <RescheduleTimerList+0x138>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <RescheduleTimerList+0x134>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
 8001862:	e03d      	b.n	80018e0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	b29a      	uxth	r2, r3
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <RescheduleTimerList+0x134>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001874:	e034      	b.n	80018e0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	4922      	ldr	r1, [pc, #136]	; (8001904 <RescheduleTimerList+0x130>)
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	3308      	adds	r3, #8
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	429a      	cmp	r2, r3
 800188c:	d20a      	bcs.n	80018a4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	491c      	ldr	r1, [pc, #112]	; (8001904 <RescheduleTimerList+0x130>)
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	3308      	adds	r3, #8
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	e013      	b.n	80018cc <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	4917      	ldr	r1, [pc, #92]	; (8001904 <RescheduleTimerList+0x130>)
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	3308      	adds	r3, #8
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	1ac9      	subs	r1, r1, r3
 80018bc:	4811      	ldr	r0, [pc, #68]	; (8001904 <RescheduleTimerList+0x130>)
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4403      	add	r3, r0
 80018c8:	3308      	adds	r3, #8
 80018ca:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	490d      	ldr	r1, [pc, #52]	; (8001904 <RescheduleTimerList+0x130>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	3315      	adds	r3, #21
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d1c7      	bne.n	8001876 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80018e6:	89bb      	ldrh	r3, [r7, #12]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff15 	bl	8001718 <RestartWakeupCounter>

  return ;
 80018ee:	bf00      	nop
}
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40002800 	.word	0x40002800
 80018fc:	200002f0 	.word	0x200002f0
 8001900:	20000250 	.word	0x20000250
 8001904:	200001c0 	.word	0x200001c0
 8001908:	20000258 	.word	0x20000258
 800190c:	200002f8 	.word	0x200002f8

08001910 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001916:	f3ef 8310 	mrs	r3, PRIMASK
 800191a:	617b      	str	r3, [r7, #20]
  return(result);
 800191c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001922:	4b5e      	ldr	r3, [pc, #376]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	22ca      	movs	r2, #202	; 0xca
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
 800192c:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2253      	movs	r2, #83	; 0x53
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001936:	4b59      	ldr	r3, [pc, #356]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	4b57      	ldr	r3, [pc, #348]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001948:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800194a:	4b55      	ldr	r3, [pc, #340]	; (8001aa0 <HW_TS_RTC_Wakeup_Handler+0x190>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001952:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001956:	4953      	ldr	r1, [pc, #332]	; (8001aa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	330c      	adds	r3, #12
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d170      	bne.n	8001a4e <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800196c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001970:	494c      	ldr	r1, [pc, #304]	; (8001aa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	440b      	add	r3, r1
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001980:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001984:	4947      	ldr	r1, [pc, #284]	; (8001aa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	440b      	add	r3, r1
 8001990:	3310      	adds	r3, #16
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001996:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d04e      	beq.n	8001a3e <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80019a0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019a4:	493f      	ldr	r1, [pc, #252]	; (8001aa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	330d      	adds	r3, #13
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d125      	bne.n	8001a06 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80019ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019be:	2101      	movs	r1, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fde5 	bl	8001590 <UnlinkTimer>
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80019d0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80019d4:	4933      	ldr	r1, [pc, #204]	; (8001aa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	440b      	add	r3, r1
 80019e0:	3304      	adds	r3, #4
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f9d0 	bl	8001d90 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80019f0:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	22ca      	movs	r2, #202	; 0xca
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
 80019fa:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2253      	movs	r2, #83	; 0x53
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24
 8001a04:	e013      	b.n	8001a2e <HW_TS_RTC_Wakeup_Handler+0x11e>
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f931 	bl	8001c7c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	22ca      	movs	r2, #202	; 0xca
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2253      	movs	r2, #83	; 0x53
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001a2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	4619      	mov	r1, r3
 8001a36:	69b8      	ldr	r0, [r7, #24]
 8001a38:	f000 fa30 	bl	8001e9c <HW_TS_RTC_Int_AppNot>
 8001a3c:	e024      	b.n	8001a88 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8001a3e:	f7ff fec9 	bl	80017d4 <RescheduleTimerList>
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f383 8810 	msr	PRIMASK, r3
 8001a4c:	e01c      	b.n	8001a88 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001a4e:	bf00      	nop
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f7      	beq.n	8001a50 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a74:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001a78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	22ff      	movs	r2, #255	; 0xff
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001a92:	bf00      	nop
}
 8001a94:	3728      	adds	r7, #40	; 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200002f0 	.word	0x200002f0
 8001aa0:	20000250 	.word	0x20000250
 8001aa4:	200001c0 	.word	0x200001c0
 8001aa8:	20000258 	.word	0x20000258
 8001aac:	58000800 	.word	0x58000800

08001ab0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001abc:	4a64      	ldr	r2, [pc, #400]	; (8001c50 <HW_TS_Init+0x1a0>)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HW_TS_Init+0x1a0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	22ca      	movs	r2, #202	; 0xca
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24
 8001acc:	4b60      	ldr	r3, [pc, #384]	; (8001c50 <HW_TS_Init+0x1a0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2253      	movs	r2, #83	; 0x53
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <HW_TS_Init+0x1a4>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	4a5e      	ldr	r2, [pc, #376]	; (8001c54 <HW_TS_Init+0x1a4>)
 8001adc:	f043 0320 	orr.w	r3, r3, #32
 8001ae0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001ae2:	4b5c      	ldr	r3, [pc, #368]	; (8001c54 <HW_TS_Init+0x1a4>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f1c3 0304 	rsb	r3, r3, #4
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b58      	ldr	r3, [pc, #352]	; (8001c58 <HW_TS_Init+0x1a8>)
 8001af6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001af8:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <HW_TS_Init+0x1a4>)
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b00:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001b04:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	fa92 f2a2 	rbit	r2, r2
 8001b0c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	d101      	bne.n	8001b1c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001b18:	2220      	movs	r2, #32
 8001b1a:	e003      	b.n	8001b24 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	fab2 f282 	clz	r2, r2
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	40d3      	lsrs	r3, r2
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	3301      	adds	r3, #1
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	; (8001c5c <HW_TS_Init+0x1ac>)
 8001b2e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001b30:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <HW_TS_Init+0x1a4>)
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HW_TS_Init+0x1b0>)
 8001b42:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001b44:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <HW_TS_Init+0x1b0>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	4a44      	ldr	r2, [pc, #272]	; (8001c5c <HW_TS_Init+0x1ac>)
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	fb02 f303 	mul.w	r3, r2, r3
 8001b52:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b56:	4a40      	ldr	r2, [pc, #256]	; (8001c58 <HW_TS_Init+0x1a8>)
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	40d3      	lsrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d904      	bls.n	8001b72 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001b68:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <HW_TS_Init+0x1b4>)
 8001b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6e:	801a      	strh	r2, [r3, #0]
 8001b70:	e003      	b.n	8001b7a <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <HW_TS_Init+0x1b4>)
 8001b78:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b7e:	f7ff fb85 	bl	800128c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b82:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b86:	f7ff fb6d 	bl	8001264 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d143      	bne.n	8001c18 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b90:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <HW_TS_Init+0x1b8>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b96:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <HW_TS_Init+0x1bc>)
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	77fb      	strb	r3, [r7, #31]
 8001ba2:	e00c      	b.n	8001bbe <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001ba4:	7ffa      	ldrb	r2, [r7, #31]
 8001ba6:	4932      	ldr	r1, [pc, #200]	; (8001c70 <HW_TS_Init+0x1c0>)
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	440b      	add	r3, r1
 8001bb2:	330c      	adds	r3, #12
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001bb8:	7ffb      	ldrb	r3, [r7, #31]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	77fb      	strb	r3, [r7, #31]
 8001bbe:	7ffb      	ldrb	r3, [r7, #31]
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d9ef      	bls.n	8001ba4 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HW_TS_Init+0x1c4>)
 8001bc6:	2206      	movs	r2, #6
 8001bc8:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HW_TS_Init+0x1a0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <HW_TS_Init+0x1a0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bdc:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <HW_TS_Init+0x1a0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HW_TS_Init+0x1a0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001bf2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HW_TS_Init+0x1c8>)
 8001bf6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bfa:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f002 fd18 	bl	8004632 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HW_TS_Init+0x1a0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HW_TS_Init+0x1a0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	e00a      	b.n	8001c2e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HW_TS_Init+0x1a0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f002 fcf4 	bl	8004616 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HW_TS_Init+0x1a0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	22ff      	movs	r2, #255	; 0xff
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2106      	movs	r1, #6
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f002 fcb0 	bl	80045a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c42:	2003      	movs	r0, #3
 8001c44:	f002 fcc7 	bl	80045d6 <HAL_NVIC_EnableIRQ>

  return;
 8001c48:	bf00      	nop
}
 8001c4a:	3720      	adds	r7, #32
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200002f0 	.word	0x200002f0
 8001c54:	40002800 	.word	0x40002800
 8001c58:	200002f4 	.word	0x200002f4
 8001c5c:	200002f5 	.word	0x200002f5
 8001c60:	200002f6 	.word	0x200002f6
 8001c64:	200002f8 	.word	0x200002f8
 8001c68:	20000258 	.word	0x20000258
 8001c6c:	20000254 	.word	0x20000254
 8001c70:	200001c0 	.word	0x200001c0
 8001c74:	20000250 	.word	0x20000250
 8001c78:	58000800 	.word	0x58000800

08001c7c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c86:	f3ef 8310 	mrs	r3, PRIMASK
 8001c8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001c92:	2003      	movs	r0, #3
 8001c94:	f002 fcad 	bl	80045f2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001c98:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <HW_TS_Stop+0xfc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	22ca      	movs	r2, #202	; 0xca
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8001ca2:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HW_TS_Stop+0xfc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2253      	movs	r2, #83	; 0x53
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001cac:	79fa      	ldrb	r2, [r7, #7]
 8001cae:	4933      	ldr	r1, [pc, #204]	; (8001d7c <HW_TS_Stop+0x100>)
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	330c      	adds	r3, #12
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d148      	bne.n	8001d56 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fc61 	bl	8001590 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HW_TS_Stop+0x104>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cd4:	7cfb      	ldrb	r3, [r7, #19]
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d135      	bne.n	8001d46 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HW_TS_Stop+0x108>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce6:	d108      	bne.n	8001cfa <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001ce8:	bf00      	nop
 8001cea:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <HW_TS_Stop+0xfc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f7      	bne.n	8001cea <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <HW_TS_Stop+0xfc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HW_TS_Stop+0xfc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d0c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001d0e:	bf00      	nop
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HW_TS_Stop+0xfc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f7      	beq.n	8001d10 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HW_TS_Stop+0xfc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HW_TS_Stop+0xfc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d34:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <HW_TS_Stop+0x10c>)
 8001d38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d3c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f002 fc77 	bl	8004632 <HAL_NVIC_ClearPendingIRQ>
 8001d44:	e007      	b.n	8001d56 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HW_TS_Stop+0x110>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	7cfa      	ldrb	r2, [r7, #19]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001d52:	f7ff fd3f 	bl	80017d4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HW_TS_Stop+0xfc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	22ff      	movs	r2, #255	; 0xff
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001d60:	2003      	movs	r0, #3
 8001d62:	f002 fc38 	bl	80045d6 <HAL_NVIC_EnableIRQ>
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001d70:	bf00      	nop
}
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200002f0 	.word	0x200002f0
 8001d7c:	200001c0 	.word	0x200001c0
 8001d80:	20000250 	.word	0x20000250
 8001d84:	40002800 	.word	0x40002800
 8001d88:	58000800 	.word	0x58000800
 8001d8c:	20000251 	.word	0x20000251

08001d90 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001d9c:	79fa      	ldrb	r2, [r7, #7]
 8001d9e:	493b      	ldr	r1, [pc, #236]	; (8001e8c <HW_TS_Start+0xfc>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	330c      	adds	r3, #12
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d103      	bne.n	8001dbc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ff60 	bl	8001c7c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8001dc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001dc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc6:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f002 fc12 	bl	80045f2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <HW_TS_Start+0x100>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	22ca      	movs	r2, #202	; 0xca
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <HW_TS_Start+0x100>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2253      	movs	r2, #83	; 0x53
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001de2:	79fa      	ldrb	r2, [r7, #7]
 8001de4:	4929      	ldr	r1, [pc, #164]	; (8001e8c <HW_TS_Start+0xfc>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	330c      	adds	r3, #12
 8001df2:	2202      	movs	r2, #2
 8001df4:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001df6:	79fa      	ldrb	r2, [r7, #7]
 8001df8:	4924      	ldr	r1, [pc, #144]	; (8001e8c <HW_TS_Start+0xfc>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	3308      	adds	r3, #8
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001e0a:	79fa      	ldrb	r2, [r7, #7]
 8001e0c:	491f      	ldr	r1, [pc, #124]	; (8001e8c <HW_TS_Start+0xfc>)
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	440b      	add	r3, r1
 8001e18:	3304      	adds	r3, #4
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fb0b 	bl	800143c <linkTimer>
 8001e26:	4603      	mov	r3, r0
 8001e28:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HW_TS_Start+0x104>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HW_TS_Start+0x108>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	7c7a      	ldrb	r2, [r7, #17]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d002      	beq.n	8001e42 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001e3c:	f7ff fcca 	bl	80017d4 <RescheduleTimerList>
 8001e40:	e013      	b.n	8001e6a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001e42:	79fa      	ldrb	r2, [r7, #7]
 8001e44:	4911      	ldr	r1, [pc, #68]	; (8001e8c <HW_TS_Start+0xfc>)
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	3308      	adds	r3, #8
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	8a7b      	ldrh	r3, [r7, #18]
 8001e56:	79fa      	ldrb	r2, [r7, #7]
 8001e58:	1ac9      	subs	r1, r1, r3
 8001e5a:	480c      	ldr	r0, [pc, #48]	; (8001e8c <HW_TS_Start+0xfc>)
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4403      	add	r3, r0
 8001e66:	3308      	adds	r3, #8
 8001e68:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HW_TS_Start+0x100>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	22ff      	movs	r2, #255	; 0xff
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e74:	2003      	movs	r0, #3
 8001e76:	f002 fbae 	bl	80045d6 <HAL_NVIC_EnableIRQ>
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001e84:	bf00      	nop
}
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200001c0 	.word	0x200001c0
 8001e90:	200002f0 	.word	0x200002f0
 8001e94:	20000250 	.word	0x20000250
 8001e98:	20000251 	.word	0x20000251

08001e9c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4798      	blx	r3

  return;
 8001eae:	bf00      	nop
}
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <toggleLed>:
 *      Author: patrick
 */

#include "led.h"

void toggleLed(uint8_t red, uint8_t green, uint8_t blue){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	71bb      	strb	r3, [r7, #6]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	717b      	strb	r3, [r7, #5]
	if(red){
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <toggleLed+0x24>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2110      	movs	r1, #16
 8001ed4:	4814      	ldr	r0, [pc, #80]	; (8001f28 <toggleLed+0x70>)
 8001ed6:	f002 ff9f 	bl	8004e18 <HAL_GPIO_WritePin>
 8001eda:	e004      	b.n	8001ee6 <toggleLed+0x2e>
	}
	else{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001edc:	2201      	movs	r2, #1
 8001ede:	2110      	movs	r1, #16
 8001ee0:	4811      	ldr	r0, [pc, #68]	; (8001f28 <toggleLed+0x70>)
 8001ee2:	f002 ff99 	bl	8004e18 <HAL_GPIO_WritePin>
	}

	if(blue){
 8001ee6:	797b      	ldrb	r3, [r7, #5]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <toggleLed+0x40>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2101      	movs	r1, #1
 8001ef0:	480e      	ldr	r0, [pc, #56]	; (8001f2c <toggleLed+0x74>)
 8001ef2:	f002 ff91 	bl	8004e18 <HAL_GPIO_WritePin>
 8001ef6:	e004      	b.n	8001f02 <toggleLed+0x4a>
		}
		else{
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2101      	movs	r1, #1
 8001efc:	480b      	ldr	r0, [pc, #44]	; (8001f2c <toggleLed+0x74>)
 8001efe:	f002 ff8b 	bl	8004e18 <HAL_GPIO_WritePin>
		}

	if(green){
 8001f02:	79bb      	ldrb	r3, [r7, #6]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <toggleLed+0x5c>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	4807      	ldr	r0, [pc, #28]	; (8001f2c <toggleLed+0x74>)
 8001f0e:	f002 ff83 	bl	8004e18 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
		}
}
 8001f12:	e004      	b.n	8001f1e <toggleLed+0x66>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001f14:	2201      	movs	r2, #1
 8001f16:	2102      	movs	r1, #2
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <toggleLed+0x74>)
 8001f1a:	f002 ff7d 	bl	8004e18 <HAL_GPIO_WritePin>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	48001000 	.word	0x48001000
 8001f2c:	48000400 	.word	0x48000400

08001f30 <LL_RCC_HSI48_Enable>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <LL_RCC_HSI48_IsReady>:
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d101      	bne.n	8001f6a <LL_RCC_HSI48_IsReady+0x18>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <LL_RCC_HSI48_IsReady+0x1a>
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_RCC_LSE_SetDriveCapability>:
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	f023 0218 	bic.w	r2, r3, #24
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	3220      	adds	r2, #32
 8001fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb8:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <LL_HSEM_1StepLock+0x2c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d001      	beq.n	8001fc2 <LL_HSEM_1StepLock+0x1e>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <LL_HSEM_1StepLock+0x20>
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	80000400 	.word	0x80000400

08001fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  /**
	   * The OPTVERR flag is wrongly set at power on
	   * It shall be cleared before using any HAL_FLASH_xxx() api
	   */
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <main+0x50>)
 8001fda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fde:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fe0:	f000 feae 	bl	8002d40 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8001fe4:	f000 fab2 	bl	800254c <_Z12Reset_Devicev>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe8:	f000 f81e 	bl	8002028 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  Init_Exti( );
 8001fec:	f000 fad8 	bl	80025a0 <_Z9Init_Extiv>
  initClk();
 8001ff0:	f000 fae2 	bl	80025b8 <_Z7initClkv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff4:	f7ff f8ca 	bl	800118c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ff8:	f7ff f893 	bl	8001122 <MX_DMA_Init>
  MX_TIM2_Init();
 8001ffc:	f000 fd56 	bl	8002aac <MX_TIM2_Init>
  MX_TIM17_Init();
 8002000:	f000 fda2 	bl	8002b48 <MX_TIM17_Init>
  MX_ADC1_Init();
 8002004:	f7fe fcc0 	bl	8000988 <MX_ADC1_Init>
  MX_USB_Device_Init();
 8002008:	f010 fd1e 	bl	8012a48 <MX_USB_Device_Init>
  MX_RF_Init();
 800200c:	f000 faf0 	bl	80025f0 <MX_RF_Init>
  MX_RTC_Init();
 8002010:	f000 fb20 	bl	8002654 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002014:	f00b fcfa 	bl	800da0c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002018:	f7fe ff12 	bl	8000e40 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 800201c:	f00b fd2a 	bl	800da74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002020:	e7fe      	b.n	8002020 <main+0x4c>
 8002022:	bf00      	nop
 8002024:	58004000 	.word	0x58004000

08002028 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b0ae      	sub	sp, #184	; 0xb8
 800202c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002032:	2248      	movs	r2, #72	; 0x48
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f011 fa6d 	bl	8013516 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800203c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
 800204c:	615a      	str	r2, [r3, #20]
 800204e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2250      	movs	r2, #80	; 0x50
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f011 fa5d 	bl	8013516 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800206a:	f043 0310 	orr.w	r3, r3, #16
 800206e:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207a:	f043 0303 	orr.w	r3, r3, #3
 800207e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002080:	f003 fe4c 	bl	8005d1c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff ff76 	bl	8001f76 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800208a:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <_Z18SystemClock_Configv+0x180>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002092:	4a45      	ldr	r2, [pc, #276]	; (80021a8 <_Z18SystemClock_Configv+0x180>)
 8002094:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <_Z18SystemClock_Configv+0x180>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80020a6:	2307      	movs	r3, #7
 80020a8:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ae:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020b0:	2301      	movs	r3, #1
 80020b2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020ba:	2340      	movs	r3, #64	; 0x40
 80020bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 f9d6 	bl	800647c <HAL_RCC_OscConfig>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bf14      	ite	ne
 80020d6:	2301      	movne	r3, #1
 80020d8:	2300      	moveq	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 80020e0:	f000 f878 	bl	80021d4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80020e4:	236f      	movs	r3, #111	; 0x6f
 80020e6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80020e8:	2302      	movs	r3, #2
 80020ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020f4:	2300      	movs	r3, #0
 80020f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002100:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002104:	2101      	movs	r1, #1
 8002106:	4618      	mov	r0, r3
 8002108:	f004 fd44 	bl	8006b94 <HAL_RCC_ClockConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	bf14      	ite	ne
 8002112:	2301      	movne	r3, #1
 8002114:	2300      	moveq	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 800211c:	f000 f85a 	bl	80021d4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002120:	f44f 5374 	mov.w	r3, #15616	; 0x3d00
 8002124:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002126:	2306      	movs	r3, #6
 8002128:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800212a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002130:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002134:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002136:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800213a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800213c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002140:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002142:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002146:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002148:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800214c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800214e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002152:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002154:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002158:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800215a:	2300      	movs	r3, #0
 800215c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800215e:	2310      	movs	r3, #16
 8002160:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	4618      	mov	r0, r3
 8002166:	f005 f970 	bl	800744a <HAL_RCCEx_PeriphCLKConfig>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <_Z18SystemClock_Configv+0x156>
  {
    Error_Handler();
 800217a:	f000 f82b 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  //https://community.st.com/s/question/0D50X0000C0wdqe/stm32wb55-ble-hid?t=1591239574627
  LL_HSEM_1StepLock(HSEM, 5 );
 800217e:	2105      	movs	r1, #5
 8002180:	480a      	ldr	r0, [pc, #40]	; (80021ac <_Z18SystemClock_Configv+0x184>)
 8002182:	f7ff ff0f 	bl	8001fa4 <LL_HSEM_1StepLock>
  LL_RCC_HSI48_Enable();
 8002186:	f7ff fed3 	bl	8001f30 <LL_RCC_HSI48_Enable>
  while(!LL_RCC_HSI48_IsReady());
 800218a:	f7ff fee2 	bl	8001f52 <LL_RCC_HSI48_IsReady>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d000      	beq.n	80021a0 <_Z18SystemClock_Configv+0x178>
 800219e:	e7f4      	b.n	800218a <_Z18SystemClock_Configv+0x162>
  /* USER CODE END Smps */
}
 80021a0:	bf00      	nop
 80021a2:	37b8      	adds	r7, #184	; 0xb8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	58000400 	.word	0x58000400
 80021ac:	58001400 	.word	0x58001400

080021b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021c2:	f000 fddd 	bl	8002d80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40012c00 	.word	0x40012c00

080021d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021da:	e7fe      	b.n	80021da <Error_Handler+0x6>

080021dc <LL_EXTI_DisableIT_0_31>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <LL_EXTI_DisableIT_0_31+0x28>)
 80021e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4905      	ldr	r1, [pc, #20]	; (8002204 <LL_EXTI_DisableIT_0_31+0x28>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	58000800 	.word	0x58000800

08002208 <LL_EXTI_DisableIT_32_63>:
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <LL_EXTI_DisableIT_32_63+0x28>)
 8002212:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	43db      	mvns	r3, r3
 800221a:	4905      	ldr	r1, [pc, #20]	; (8002230 <LL_EXTI_DisableIT_32_63+0x28>)
 800221c:	4013      	ands	r3, r2
 800221e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	58000800 	.word	0x58000800

08002234 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800225a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800228c:	d101      	bne.n	8002292 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022b2:	d101      	bne.n	80022b8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80022cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d8:	4313      	orrs	r3, r2
 80022da:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022e8:	68fb      	ldr	r3, [r7, #12]
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	041b      	lsls	r3, r3, #16
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	605a      	str	r2, [r3, #4]
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	605a      	str	r2, [r3, #4]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	615a      	str	r2, [r3, #20]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	615a      	str	r2, [r3, #20]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	609a      	str	r2, [r3, #8]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	619a      	str	r2, [r3, #24]
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <LL_HSEM_1StepLock>:
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	3220      	adds	r2, #32
 80023cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d0:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <LL_HSEM_1StepLock+0x2c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d001      	beq.n	80023da <LL_HSEM_1StepLock+0x1e>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <LL_HSEM_1StepLock+0x20>
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	80000400 	.word	0x80000400

080023ec <_Z6myMainv>:

struct ADC_DATA adc_data;

//uint16_t adc_data[4];

int myMain(void){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0b0      	sub	sp, #192	; 0xc0
 80023f0:	af08      	add	r7, sp, #32
		powerMeasSetup();
		HAL_Delay(100);

	#endif
#else
	HAL_TIM_Base_Start_IT(&htim2);
 80023f2:	4840      	ldr	r0, [pc, #256]	; (80024f4 <_Z6myMainv+0x108>)
 80023f4:	f005 fc3a 	bl	8007c6c <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_SET);
 80023f8:	2201      	movs	r2, #1
 80023fa:	2110      	movs	r1, #16
 80023fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002400:	f002 fd0a 	bl	8004e18 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim17);
 8002404:	483c      	ldr	r0, [pc, #240]	; (80024f8 <_Z6myMainv+0x10c>)
 8002406:	f005 fbeb 	bl	8007be0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800240a:	2100      	movs	r1, #0
 800240c:	483a      	ldr	r0, [pc, #232]	; (80024f8 <_Z6myMainv+0x10c>)
 800240e:	f005 fcdd 	bl	8007dcc <HAL_TIM_PWM_Start>

	Stepper motor_base(STEPS, AIN1_1_GPIO_Port, AIN1_1_Pin,
			AIN2_1_GPIO_Port, AIN2_1_Pin,
			BIN1_1_GPIO_Port, BIN1_1_Pin,
			BIN2_1_GPIO_Port, BIN2_1_Pin, &adc_data.mag_base, NON_INVERTED);
 8002412:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002416:	2301      	movs	r3, #1
 8002418:	9307      	str	r3, [sp, #28]
 800241a:	4b38      	ldr	r3, [pc, #224]	; (80024fc <_Z6myMainv+0x110>)
 800241c:	9306      	str	r3, [sp, #24]
 800241e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002422:	9305      	str	r3, [sp, #20]
 8002424:	4b36      	ldr	r3, [pc, #216]	; (8002500 <_Z6myMainv+0x114>)
 8002426:	9304      	str	r3, [sp, #16]
 8002428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800242c:	9303      	str	r3, [sp, #12]
 800242e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002432:	9302      	str	r3, [sp, #8]
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002442:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002446:	f640 0104 	movw	r1, #2052	; 0x804
 800244a:	f7fd fea3 	bl	8000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_base.setSpeed(12);
 800244e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002452:	210c      	movs	r1, #12
 8002454:	4618      	mov	r0, r3
 8002456:	f7fd fedd 	bl	8000214 <_ZN7Stepper8setSpeedEl>
	motor_base.setStepBound(BASE_STEP_RANGE);
 800245a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800245e:	f641 010c 	movw	r1, #6156	; 0x180c
 8002462:	4618      	mov	r0, r3
 8002464:	f7fd feee 	bl	8000244 <_ZN7Stepper12setStepBoundEl>

	Stepper motor_led(STEPS, AIN1_2_GPIO_Port, AIN1_2_Pin,
				AIN2_2_GPIO_Port, AIN2_2_Pin,
				BIN1_2_GPIO_Port, BIN1_2_Pin,
				BIN2_2_GPIO_Port, BIN2_2_Pin,  &adc_data.mag_led, INVERTED);
 8002468:	1d38      	adds	r0, r7, #4
 800246a:	23ff      	movs	r3, #255	; 0xff
 800246c:	9307      	str	r3, [sp, #28]
 800246e:	4b25      	ldr	r3, [pc, #148]	; (8002504 <_Z6myMainv+0x118>)
 8002470:	9306      	str	r3, [sp, #24]
 8002472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002476:	9305      	str	r3, [sp, #20]
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <_Z6myMainv+0x114>)
 800247a:	9304      	str	r3, [sp, #16]
 800247c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002480:	9303      	str	r3, [sp, #12]
 8002482:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <_Z6myMainv+0x114>)
 8002484:	9302      	str	r3, [sp, #8]
 8002486:	2301      	movs	r3, #1
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2302      	movs	r3, #2
 8002492:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002496:	f640 0104 	movw	r1, #2052	; 0x804
 800249a:	f7fd fe7b 	bl	8000194 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_led.setSpeed(16);
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	2110      	movs	r1, #16
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd feb6 	bl	8000214 <_ZN7Stepper8setSpeedEl>
	motor_led.setStepBound(LED_STEP_RANGE);
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	f647 1123 	movw	r1, #31011	; 0x7923
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd fec8 	bl	8000244 <_ZN7Stepper12setStepBoundEl>

	uint32_t counter = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_data, 4);
 80024ba:	2204      	movs	r2, #4
 80024bc:	490f      	ldr	r1, [pc, #60]	; (80024fc <_Z6myMainv+0x110>)
 80024be:	4812      	ldr	r0, [pc, #72]	; (8002508 <_Z6myMainv+0x11c>)
 80024c0:	f000 ffde 	bl	8003480 <HAL_ADC_Start_DMA>
	HAL_Delay(100);
 80024c4:	2064      	movs	r0, #100	; 0x64
 80024c6:	f000 fc87 	bl	8002dd8 <HAL_Delay>

	while (1)
		  {
			counter += 1;
 80024ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024ce:	3301      	adds	r3, #1
 80024d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
//			while(1){
//				motor_base.honeAxis();
//				motor_base.step(-3078);
//				motor_base.step(-3078);
//			}
			startCal(0, 0.5, 0, 0.3, motor_base, motor_led);
 80024d4:	1d3a      	adds	r2, r7, #4
 80024d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	eddf 1a0b 	vldr	s3, [pc, #44]	; 800250c <_Z6myMainv+0x120>
 80024e2:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8002510 <_Z6myMainv+0x124>
 80024e6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80024ea:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002510 <_Z6myMainv+0x124>
 80024ee:	f7fe fccb 	bl	8000e88 <startCal>

			while(1){};
 80024f2:	e7fe      	b.n	80024f2 <_Z6myMainv+0x106>
 80024f4:	20004f5c 	.word	0x20004f5c
 80024f8:	20004f10 	.word	0x20004f10
 80024fc:	200002fc 	.word	0x200002fc
 8002500:	48000400 	.word	0x48000400
 8002504:	200002fe 	.word	0x200002fe
 8002508:	20004dd0 	.word	0x20004dd0
 800250c:	3e99999a 	.word	0x3e99999a
 8002510:	00000000 	.word	0x00000000

08002514 <_Z18Reset_BackupDomainv>:




void Reset_BackupDomain( void )
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8002518:	f7ff feae 	bl	8002278 <LL_RCC_IsActiveFlag_PINRST>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <_Z18Reset_BackupDomainv+0x1c>
 8002522:	f7ff febc 	bl	800229e <LL_RCC_IsActiveFlag_SFTRST>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <_Z18Reset_BackupDomainv+0x1c>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <_Z18Reset_BackupDomainv+0x1e>
 8002530:	2300      	movs	r3, #0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <_Z18Reset_BackupDomainv+0x34>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002536:	f003 fbf1 	bl	8005d1c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800253a:	f003 fbef 	bl	8005d1c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800253e:	f7ff fe79 	bl	8002234 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8002542:	f7ff fe88 	bl	8002256 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8002546:	bf00      	nop
 8002548:	bf00      	nop
}
 800254a:	bd80      	pop	{r7, pc}

0800254c <_Z12Reset_Devicev>:

void Reset_Device( void )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8002550:	f7ff ffe0 	bl	8002514 <_Z18Reset_BackupDomainv>

  Reset_IPCC();
 8002554:	f000 f802 	bl	800255c <_Z10Reset_IPCCv>
#endif

  return;
 8002558:	bf00      	nop
}
 800255a:	bd80      	pop	{r7, pc}

0800255c <_Z10Reset_IPCCv>:

void Reset_IPCC( void )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8002560:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002564:	f7ff feae 	bl	80022c4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8002568:	213f      	movs	r1, #63	; 0x3f
 800256a:	480c      	ldr	r0, [pc, #48]	; (800259c <_Z10Reset_IPCCv+0x40>)
 800256c:	f7ff ff09 	bl	8002382 <LL_C1_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8002570:	213f      	movs	r1, #63	; 0x3f
 8002572:	480a      	ldr	r0, [pc, #40]	; (800259c <_Z10Reset_IPCCv+0x40>)
 8002574:	f7ff ff13 	bl	800239e <LL_C2_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8002578:	213f      	movs	r1, #63	; 0x3f
 800257a:	4808      	ldr	r0, [pc, #32]	; (800259c <_Z10Reset_IPCCv+0x40>)
 800257c:	f7ff febb 	bl	80022f6 <LL_C1_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8002580:	213f      	movs	r1, #63	; 0x3f
 8002582:	4806      	ldr	r0, [pc, #24]	; (800259c <_Z10Reset_IPCCv+0x40>)
 8002584:	f7ff feda 	bl	800233c <LL_C2_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8002588:	213f      	movs	r1, #63	; 0x3f
 800258a:	4804      	ldr	r0, [pc, #16]	; (800259c <_Z10Reset_IPCCv+0x40>)
 800258c:	f7ff fec5 	bl	800231a <LL_C1_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8002590:	213f      	movs	r1, #63	; 0x3f
 8002592:	4802      	ldr	r0, [pc, #8]	; (800259c <_Z10Reset_IPCCv+0x40>)
 8002594:	f7ff fee4 	bl	8002360 <LL_C2_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8002598:	bf00      	nop
}
 800259a:	bd80      	pop	{r7, pc}
 800259c:	58000c00 	.word	0x58000c00

080025a0 <_Z9Init_Extiv>:

void Init_Exti( void )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f7ff fe18 	bl	80021dc <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80025ac:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80025b0:	f7ff fe2a 	bl	8002208 <LL_EXTI_DisableIT_32_63>

  return;
 80025b4:	bf00      	nop
}
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <_Z7initClkv>:

  return;
}

void initClk (void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b092      	sub	sp, #72	; 0x48
 80025bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef st_oscInit = {0};
 80025be:	463b      	mov	r3, r7
 80025c0:	2248      	movs	r2, #72	; 0x48
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f010 ffa6 	bl	8013516 <memset>

  /* Get mutex */
  LL_HSEM_1StepLock(HSEM, 5);
 80025ca:	2105      	movs	r1, #5
 80025cc:	4807      	ldr	r0, [pc, #28]	; (80025ec <_Z7initClkv+0x34>)
 80025ce:	f7ff fef5 	bl	80023bc <LL_HSEM_1StepLock>

  st_oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80025d2:	2340      	movs	r3, #64	; 0x40
 80025d4:	603b      	str	r3, [r7, #0]
  st_oscInit.HSI48State     = RCC_HSI48_ON; /* Used by USB */
 80025d6:	2301      	movs	r3, #1
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_RCC_OscConfig(&st_oscInit);
 80025da:	463b      	mov	r3, r7
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 ff4d 	bl	800647c <HAL_RCC_OscConfig>
}
 80025e2:	bf00      	nop
 80025e4:	3748      	adds	r7, #72	; 0x48
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	58001400 	.word	0x58001400

080025f0 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <LL_RCC_EnableRTC>:
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800260e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800262e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4313      	orrs	r3, r2
 8002636:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002644:	68fb      	ldr	r3, [r7, #12]
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_RTC_Init+0x4c>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <MX_RTC_Init+0x50>)
 800265c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MX_RTC_Init+0x4c>)
 8002660:	2200      	movs	r2, #0
 8002662:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_RTC_Init+0x4c>)
 8002666:	220f      	movs	r2, #15
 8002668:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <MX_RTC_Init+0x4c>)
 800266c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002670:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <MX_RTC_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_RTC_Init+0x4c>)
 800267a:	2200      	movs	r2, #0
 800267c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <MX_RTC_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_RTC_Init+0x4c>)
 8002686:	2200      	movs	r2, #0
 8002688:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_RTC_Init+0x4c>)
 800268c:	f005 f963 	bl	8007956 <HAL_RTC_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002696:	f7ff fd9d 	bl	80021d4 <Error_Handler>
  }

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20004ea0 	.word	0x20004ea0
 80026a4:	40002800 	.word	0x40002800

080026a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <HAL_RTC_MspInit+0x28>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d105      	bne.n	80026c6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026ba:	f7ff ffa0 	bl	80025fe <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80026be:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026c2:	f7ff ffad 	bl	8002620 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40002800 	.word	0x40002800

080026d4 <measMsgReceivedFromNode>:
};

char* endOfLine = "\n\r";


void measMsgReceivedFromNode(struct MeasMsg* msg){
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	// send over UART if USB UART active
#if USB_UART_ACTIVE
	uint8_t retry = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]
//	CDC_Transmit_FS(position, sizeof(position));
//	taskENTER_CRITICAL();
	memcpy((struct MeasMsg*) &serialMsg.measMsg, msg, sizeof(struct MeasMsg));
 80026e0:	220e      	movs	r2, #14
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	481b      	ldr	r0, [pc, #108]	; (8002754 <measMsgReceivedFromNode+0x80>)
 80026e6:	f010 ff0b 	bl	8013500 <memcpy>
	while(CDC_Transmit_FS((uint8_t* ) msg, sizeof(struct MeasMsg)) != USBD_OK){
 80026ea:	e00b      	b.n	8002704 <measMsgReceivedFromNode+0x30>
		if(retry == 5){
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d102      	bne.n	80026f8 <measMsgReceivedFromNode+0x24>
			retry = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
			break;
 80026f6:	e00c      	b.n	8002712 <measMsgReceivedFromNode+0x3e>
		}
		osDelay(1);
 80026f8:	2001      	movs	r0, #1
 80026fa:	f00b fb8d 	bl	800de18 <osDelay>
		retry+=1;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	3301      	adds	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
	while(CDC_Transmit_FS((uint8_t* ) msg, sizeof(struct MeasMsg)) != USBD_OK){
 8002704:	210e      	movs	r1, #14
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f010 fa5c 	bl	8012bc4 <CDC_Transmit_FS>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1ec      	bne.n	80026ec <measMsgReceivedFromNode+0x18>

	}
	while(CDC_Transmit_FS((uint8_t* ) endOfLine, sizeof(endOfLine)) != USBD_OK){
 8002712:	e00b      	b.n	800272c <measMsgReceivedFromNode+0x58>
		if(retry == 5){
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b05      	cmp	r3, #5
 8002718:	d102      	bne.n	8002720 <measMsgReceivedFromNode+0x4c>
			retry = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
			break;
 800271e:	e00e      	b.n	800273e <measMsgReceivedFromNode+0x6a>
		}
		osDelay(1);
 8002720:	2001      	movs	r0, #1
 8002722:	f00b fb79 	bl	800de18 <osDelay>
		retry+=1;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	3301      	adds	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
	while(CDC_Transmit_FS((uint8_t* ) endOfLine, sizeof(endOfLine)) != USBD_OK){
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <measMsgReceivedFromNode+0x84>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2104      	movs	r1, #4
 8002732:	4618      	mov	r0, r3
 8002734:	f010 fa46 	bl	8012bc4 <CDC_Transmit_FS>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ea      	bne.n	8002714 <measMsgReceivedFromNode+0x40>

	// TODO check if power rating in table is lower than current one
	//		if so, replace and record current angle measurements

	// TODO if all expected nodes have replied, move to next Spotlight position
	osThreadFlagsSet (defaultTaskHandle, CAL_THREAD_FLAG);
 800273e:	4b07      	ldr	r3, [pc, #28]	; (800275c <measMsgReceivedFromNode+0x88>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2103      	movs	r1, #3
 8002744:	4618      	mov	r0, r3
 8002746:	f00b fa71 	bl	800dc2c <osThreadFlagsSet>
}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000004 	.word	0x20000004
 8002758:	20000018 	.word	0x20000018
 800275c:	2000028c 	.word	0x2000028c

08002760 <LL_AHB3_GRP1_EnableClock>:
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800276e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4313      	orrs	r3, r2
 8002776:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002784:	68fb      	ldr	r3, [r7, #12]
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002796:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800279a:	f7ff ffe1 	bl	8002760 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	210f      	movs	r1, #15
 80027a2:	f06f 0001 	mvn.w	r0, #1
 80027a6:	f001 fefc 	bl	80045a2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2105      	movs	r1, #5
 80027ae:	202e      	movs	r0, #46	; 0x2e
 80027b0:	f001 fef7 	bl	80045a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80027b4:	202e      	movs	r0, #46	; 0x2e
 80027b6:	f001 ff0e 	bl	80045d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	210f      	movs	r1, #15
 80027be:	202c      	movs	r0, #44	; 0x2c
 80027c0:	f001 feef 	bl	80045a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	210f      	movs	r1, #15
 80027c8:	202d      	movs	r0, #45	; 0x2d
 80027ca:	f001 feea 	bl	80045a2 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80027ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4013      	ands	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027f6:	68fb      	ldr	r3, [r7, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8002814:	2200      	movs	r2, #0
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	2019      	movs	r0, #25
 800281a:	f001 fec2 	bl	80045a2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800281e:	2019      	movs	r0, #25
 8002820:	f001 fed9 	bl	80045d6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002824:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002828:	f7ff ffd3 	bl	80027d2 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800282c:	f107 0208 	add.w	r2, r7, #8
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f004 fb80 	bl	8006f3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800283c:	f004 fb68 	bl	8006f10 <HAL_RCC_GetPCLK2Freq>
 8002840:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	4a12      	ldr	r2, [pc, #72]	; (8002890 <HAL_InitTick+0x8c>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0c9b      	lsrs	r3, r3, #18
 800284c:	3b01      	subs	r3, #1
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002850:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_InitTick+0x90>)
 8002852:	4a11      	ldr	r2, [pc, #68]	; (8002898 <HAL_InitTick+0x94>)
 8002854:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002856:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_InitTick+0x90>)
 8002858:	f240 32e7 	movw	r2, #999	; 0x3e7
 800285c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800285e:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <HAL_InitTick+0x90>)
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_InitTick+0x90>)
 8002866:	2200      	movs	r2, #0
 8002868:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_InitTick+0x90>)
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002870:	4808      	ldr	r0, [pc, #32]	; (8002894 <HAL_InitTick+0x90>)
 8002872:	f005 f95e 	bl	8007b32 <HAL_TIM_Base_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d104      	bne.n	8002886 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800287c:	4805      	ldr	r0, [pc, #20]	; (8002894 <HAL_InitTick+0x90>)
 800287e:	f005 f9f5 	bl	8007c6c <HAL_TIM_Base_Start_IT>
 8002882:	4603      	mov	r3, r0
 8002884:	e000      	b.n	8002888 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	3730      	adds	r7, #48	; 0x30
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	431bde83 	.word	0x431bde83
 8002894:	20004ec4 	.word	0x20004ec4
 8002898:	40012c00 	.word	0x40012c00

0800289c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028a0:	e7fe      	b.n	80028a0 <NMI_Handler+0x4>

080028a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a6:	e7fe      	b.n	80028a6 <HardFault_Handler+0x4>

080028a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ac:	e7fe      	b.n	80028ac <MemManage_Handler+0x4>

080028ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b2:	e7fe      	b.n	80028b2 <BusFault_Handler+0x4>

080028b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <UsageFault_Handler+0x4>

080028ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028cc:	4802      	ldr	r0, [pc, #8]	; (80028d8 <DMA1_Channel1_IRQHandler+0x10>)
 80028ce:	f001 ffe2 	bl	8004896 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20004e34 	.word	0x20004e34

080028dc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <ADC1_IRQHandler+0x10>)
 80028e2:	f000 fe51 	bl	8003588 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20004dd0 	.word	0x20004dd0

080028f0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80028f4:	4802      	ldr	r0, [pc, #8]	; (8002900 <USB_LP_IRQHandler+0x10>)
 80028f6:	f002 fba8 	bl	800504a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20006500 	.word	0x20006500

08002904 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800290a:	f005 fb39 	bl	8007f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20004ec4 	.word	0x20004ec4

08002918 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800291c:	f002 fa94 	bl	8004e48 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}

08002924 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002928:	f7fe fff2 	bl	8001910 <HW_TS_RTC_Wakeup_Handler>
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}

08002930 <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8002934:	f00f ff08 	bl	8012748 <HW_IPCC_Tx_Handler>
  return;
 8002938:	bf00      	nop
}
 800293a:	bd80      	pop	{r7, pc}

0800293c <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8002940:	f00f fea8 	bl	8012694 <HW_IPCC_Rx_Handler>
  return;
 8002944:	bf00      	nop
}
 8002946:	bd80      	pop	{r7, pc}

08002948 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8002948:	b40c      	push	{r2, r3}
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	460a      	mov	r2, r1
 8002954:	71fb      	strb	r3, [r7, #7]
 8002956:	4613      	mov	r3, r2
 8002958:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	b002      	add	sp, #8
 8002966:	4770      	bx	lr

08002968 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800296c:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <SystemInit+0xa0>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002972:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <SystemInit+0xa0>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	4a23      	ldr	r2, [pc, #140]	; (8002a08 <SystemInit+0xa0>)
 800297a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800297e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002996:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800299a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <SystemInit+0xa4>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029b8:	f023 0305 	bic.w	r3, r3, #5
 80029bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80029c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	4a0d      	ldr	r2, [pc, #52]	; (8002a10 <SystemInit+0xa8>)
 80029da:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e0:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <SystemInit+0xa8>)
 80029e2:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000ed00 	.word	0xe000ed00
 8002a0c:	faf6fefb 	.word	0xfaf6fefb
 8002a10:	22041000 	.word	0x22041000

08002a14 <LL_AHB2_GRP1_EnableClock>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a38:	68fb      	ldr	r3, [r7, #12]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_APB1_GRP1_EnableClock>:
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4013      	ands	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_APB2_GRP1_EnableClock>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ab2:	f107 0310 	add.w	r3, r7, #16
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <MX_TIM2_Init+0x98>)
 8002acc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ad0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <MX_TIM2_Init+0x98>)
 8002ad4:	221f      	movs	r2, #31
 8002ad6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <MX_TIM2_Init+0x98>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <MX_TIM2_Init+0x98>)
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <MX_TIM2_Init+0x98>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <MX_TIM2_Init+0x98>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002af2:	4814      	ldr	r0, [pc, #80]	; (8002b44 <MX_TIM2_Init+0x98>)
 8002af4:	f005 f81d 	bl	8007b32 <HAL_TIM_Base_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002afe:	f7ff fb69 	bl	80021d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b08:	f107 0310 	add.w	r3, r7, #16
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	480d      	ldr	r0, [pc, #52]	; (8002b44 <MX_TIM2_Init+0x98>)
 8002b10:	f005 fc66 	bl	80083e0 <HAL_TIM_ConfigClockSource>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b1a:	f7ff fb5b 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4806      	ldr	r0, [pc, #24]	; (8002b44 <MX_TIM2_Init+0x98>)
 8002b2c:	f006 f8de 	bl	8008cec <HAL_TIMEx_MasterConfigSynchronization>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b36:	f7ff fb4d 	bl	80021d4 <Error_Handler>
  }

}
 8002b3a:	bf00      	nop
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20004f5c 	.word	0x20004f5c

08002b48 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b094      	sub	sp, #80	; 0x50
 8002b4c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	60da      	str	r2, [r3, #12]
 8002b5c:	611a      	str	r2, [r3, #16]
 8002b5e:	615a      	str	r2, [r3, #20]
 8002b60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b62:	463b      	mov	r3, r7
 8002b64:	2234      	movs	r2, #52	; 0x34
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f010 fcd4 	bl	8013516 <memset>

  htim17.Instance = TIM17;
 8002b6e:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <MX_TIM17_Init+0xec>)
 8002b70:	4a31      	ldr	r2, [pc, #196]	; (8002c38 <MX_TIM17_Init+0xf0>)
 8002b72:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3199;
 8002b74:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <MX_TIM17_Init+0xec>)
 8002b76:	f640 427f 	movw	r2, #3199	; 0xc7f
 8002b7a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <MX_TIM17_Init+0xec>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <MX_TIM17_Init+0xec>)
 8002b84:	2264      	movs	r2, #100	; 0x64
 8002b86:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b88:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <MX_TIM17_Init+0xec>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002b8e:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <MX_TIM17_Init+0xec>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b94:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <MX_TIM17_Init+0xec>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002b9a:	4826      	ldr	r0, [pc, #152]	; (8002c34 <MX_TIM17_Init+0xec>)
 8002b9c:	f004 ffc9 	bl	8007b32 <HAL_TIM_Base_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002ba6:	f7ff fb15 	bl	80021d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002baa:	4822      	ldr	r0, [pc, #136]	; (8002c34 <MX_TIM17_Init+0xec>)
 8002bac:	f005 f8ac 	bl	8007d08 <HAL_TIM_PWM_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002bb6:	f7ff fb0d 	bl	80021d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bba:	2360      	movs	r3, #96	; 0x60
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bda:	2200      	movs	r2, #0
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4815      	ldr	r0, [pc, #84]	; (8002c34 <MX_TIM17_Init+0xec>)
 8002be0:	f005 faee 	bl	80081c0 <HAL_TIM_PWM_ConfigChannel>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002bea:	f7ff faf3 	bl	80021d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002c10:	463b      	mov	r3, r7
 8002c12:	4619      	mov	r1, r3
 8002c14:	4807      	ldr	r0, [pc, #28]	; (8002c34 <MX_TIM17_Init+0xec>)
 8002c16:	f006 f8c9 	bl	8008dac <HAL_TIMEx_ConfigBreakDeadTime>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002c20:	f7ff fad8 	bl	80021d4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8002c24:	4803      	ldr	r0, [pc, #12]	; (8002c34 <MX_TIM17_Init+0xec>)
 8002c26:	f000 f825 	bl	8002c74 <HAL_TIM_MspPostInit>

}
 8002c2a:	bf00      	nop
 8002c2c:	3750      	adds	r7, #80	; 0x50
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20004f10 	.word	0x20004f10
 8002c38:	40014800 	.word	0x40014800

08002c3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4c:	d103      	bne.n	8002c56 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f7ff fef9 	bl	8002a46 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002c54:	e008      	b.n	8002c68 <HAL_TIM_Base_MspInit+0x2c>
  else if(tim_baseHandle->Instance==TIM17)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a05      	ldr	r2, [pc, #20]	; (8002c70 <HAL_TIM_Base_MspInit+0x34>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d103      	bne.n	8002c68 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c60:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002c64:	f7ff ff08 	bl	8002a78 <LL_APB2_GRP1_EnableClock>
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40014800 	.word	0x40014800

08002c74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 030c 	add.w	r3, r7, #12
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM17)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <HAL_TIM_MspPostInit+0x54>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d113      	bne.n	8002cbe <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c96:	2002      	movs	r0, #2
 8002c98:	f7ff febc 	bl	8002a14 <LL_AHB2_GRP1_EnableClock>
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8002c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8002cae:	230e      	movs	r3, #14
 8002cb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4804      	ldr	r0, [pc, #16]	; (8002ccc <HAL_TIM_MspPostInit+0x58>)
 8002cba:	f001 ff3d 	bl	8004b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002cbe:	bf00      	nop
 8002cc0:	3720      	adds	r7, #32
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40014800 	.word	0x40014800
 8002ccc:	48000400 	.word	0x48000400

08002cd0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002cd0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cd4:	3304      	adds	r3, #4

08002cd6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cd6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cd8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002cda:	d3f9      	bcc.n	8002cd0 <CopyDataInit>
  bx lr
 8002cdc:	4770      	bx	lr

08002cde <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002cde:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002ce0:	3004      	adds	r0, #4

08002ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002ce2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002ce4:	d3fb      	bcc.n	8002cde <FillZerobss>
  bx lr
 8002ce6:	4770      	bx	lr

08002ce8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ce8:	480c      	ldr	r0, [pc, #48]	; (8002d1c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002cea:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002cec:	f7ff fe3c 	bl	8002968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002cf0:	480b      	ldr	r0, [pc, #44]	; (8002d20 <LoopForever+0x8>)
 8002cf2:	490c      	ldr	r1, [pc, #48]	; (8002d24 <LoopForever+0xc>)
 8002cf4:	4a0c      	ldr	r2, [pc, #48]	; (8002d28 <LoopForever+0x10>)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f7ff ffed 	bl	8002cd6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002cfc:	480b      	ldr	r0, [pc, #44]	; (8002d2c <LoopForever+0x14>)
 8002cfe:	490c      	ldr	r1, [pc, #48]	; (8002d30 <LoopForever+0x18>)
 8002d00:	2300      	movs	r3, #0
 8002d02:	f7ff ffee 	bl	8002ce2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002d06:	480b      	ldr	r0, [pc, #44]	; (8002d34 <LoopForever+0x1c>)
 8002d08:	490b      	ldr	r1, [pc, #44]	; (8002d38 <LoopForever+0x20>)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f7ff ffe9 	bl	8002ce2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d10:	f010 fbd2 	bl	80134b8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002d14:	f7ff f95e 	bl	8001fd4 <main>

08002d18 <LoopForever>:

LoopForever:
  b LoopForever
 8002d18:	e7fe      	b.n	8002d18 <LoopForever>
 8002d1a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002d1c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002d20:	20000004 	.word	0x20000004
 8002d24:	200001c0 	.word	0x200001c0
 8002d28:	08013a50 	.word	0x08013a50
  INIT_BSS _sbss, _ebss
 8002d2c:	20000270 	.word	0x20000270
 8002d30:	20006774 	.word	0x20006774
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002d34:	200300e0 	.word	0x200300e0
 8002d38:	20030b57 	.word	0x20030b57

08002d3c <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d3c:	e7fe      	b.n	8002d3c <AES1_IRQHandler>
	...

08002d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_Init+0x3c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a0b      	ldr	r2, [pc, #44]	; (8002d7c <HAL_Init+0x3c>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d56:	2003      	movs	r0, #3
 8002d58:	f001 fc18 	bl	800458c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7ff fd51 	bl	8002804 <HAL_InitTick>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	71fb      	strb	r3, [r7, #7]
 8002d6c:	e001      	b.n	8002d72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d6e:	f7ff fd10 	bl	8002792 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d72:	79fb      	ldrb	r3, [r7, #7]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	58004000 	.word	0x58004000

08002d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_IncTick+0x20>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_IncTick+0x24>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <HAL_IncTick+0x24>)
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000024 	.word	0x20000024
 8002da4:	20004fa8 	.word	0x20004fa8

08002da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_GetTick+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20004fa8 	.word	0x20004fa8

08002dc0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <HAL_GetTickPrio+0x14>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000020 	.word	0x20000020

08002dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002de0:	f7ff ffe2 	bl	8002da8 <HAL_GetTick>
 8002de4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d005      	beq.n	8002dfe <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_Delay+0x40>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8002dfe:	bf00      	nop
 8002e00:	f7ff ffd2 	bl	8002da8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d8f7      	bhi.n	8002e00 <HAL_Delay+0x28>
    {
    }
  }
 8002e10:	bf00      	nop
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000024 	.word	0x20000024

08002e1c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	609a      	str	r2, [r3, #8]
#endif
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3360      	adds	r3, #96	; 0x60
 8002e96:	461a      	mov	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <LL_ADC_SetOffset+0x44>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	03fff000 	.word	0x03fff000

08002ecc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	461a      	mov	r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3360      	adds	r3, #96	; 0x60
 8002f08:	461a      	mov	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f46:	2300      	movs	r3, #0
#endif
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3330      	adds	r3, #48	; 0x30
 8002f64:	461a      	mov	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	4413      	add	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	211f      	movs	r1, #31
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	401a      	ands	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	f003 011f 	and.w	r1, r3, #31
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8002fa0:	bf00      	nop
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
#endif
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b087      	sub	sp, #28
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3314      	adds	r3, #20
 8002ffe:	461a      	mov	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	0e5b      	lsrs	r3, r3, #25
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	4413      	add	r3, r2
 800300c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	0d1b      	lsrs	r3, r3, #20
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	2107      	movs	r1, #7
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	401a      	ands	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	0d1b      	lsrs	r3, r3, #20
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	431a      	orrs	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8003038:	bf00      	nop
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305c:	43db      	mvns	r3, r3
 800305e:	401a      	ands	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f003 0318 	and.w	r3, r3, #24
 8003066:	4908      	ldr	r1, [pc, #32]	; (8003088 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003068:	40d9      	lsrs	r1, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	400b      	ands	r3, r1
 800306e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003072:	431a      	orrs	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	0007ffff 	.word	0x0007ffff

0800308c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800309c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6093      	str	r3, [r2, #8]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030c4:	d101      	bne.n	80030ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80030e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003114:	d101      	bne.n	800311a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800313c:	f043 0201 	orr.w	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <LL_ADC_IsEnabled+0x18>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <LL_ADC_IsEnabled+0x1a>
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003186:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800318a:	f043 0204 	orr.w	r2, r3, #4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d101      	bne.n	80031b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d101      	bne.n	80031dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e12c      	b.n	8003464 <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fd fc4b 	bl	8000ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff3d 	bl	80030b0 <LL_ADC_IsDeepPowerDownEnabled>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d004      	beq.n	8003246 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff23 	bl	800308c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ff58 	bl	8003100 <LL_ADC_IsInternalRegulatorEnabled>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d113      	bne.n	800327e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff ff3c 	bl	80030d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003260:	4b82      	ldr	r3, [pc, #520]	; (800346c <HAL_ADC_Init+0x280>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	099b      	lsrs	r3, r3, #6
 8003266:	4a82      	ldr	r2, [pc, #520]	; (8003470 <HAL_ADC_Init+0x284>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	099b      	lsrs	r3, r3, #6
 800326e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003270:	e002      	b.n	8003278 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	3b01      	subs	r3, #1
 8003276:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f9      	bne.n	8003272 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ff3c 	bl	8003100 <LL_ADC_IsInternalRegulatorEnabled>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10d      	bne.n	80032aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	f043 0210 	orr.w	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	f043 0201 	orr.w	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ff75 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 80032b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f040 80c7 	bne.w	8003452 <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f040 80c3 	bne.w	8003452 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032d4:	f043 0202 	orr.w	r2, r3, #2
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff35 	bl	8003150 <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032ec:	4861      	ldr	r0, [pc, #388]	; (8003474 <HAL_ADC_Init+0x288>)
 80032ee:	f7ff ff2f 	bl	8003150 <LL_ADC_IsEnabled>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4619      	mov	r1, r3
 80032fe:	485e      	ldr	r0, [pc, #376]	; (8003478 <HAL_ADC_Init+0x28c>)
 8003300:	f7ff fd8c 	bl	8002e1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7e5b      	ldrb	r3, [r3, #25]
 8003308:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800330e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003314:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800331a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003322:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8003324:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d106      	bne.n	8003344 <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	3b01      	subs	r3, #1
 800333c:	045b      	lsls	r3, r3, #17
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	4b45      	ldr	r3, [pc, #276]	; (800347c <HAL_ADC_Init+0x290>)
 8003368:	4013      	ands	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6812      	ldr	r2, [r2, #0]
 800336e:	69b9      	ldr	r1, [r7, #24]
 8003370:	430b      	orrs	r3, r1
 8003372:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff10 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 800337e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ff1d 	bl	80031c4 <LL_ADC_INJ_IsConversionOngoing>
 800338a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d13d      	bne.n	800340e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d13a      	bne.n	800340e <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800339c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033a4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b4:	f023 0302 	bic.w	r3, r3, #2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	69b9      	ldr	r1, [r7, #24]
 80033be:	430b      	orrs	r3, r1
 80033c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d118      	bne.n	80033fe <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033d6:	f023 0304 	bic.w	r3, r3, #4
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033e2:	4311      	orrs	r1, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033e8:	4311      	orrs	r1, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033ee:	430a      	orrs	r2, r1
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	611a      	str	r2, [r3, #16]
 80033fc:	e007      	b.n	800340e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d10c      	bne.n	8003430 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f023 010f 	bic.w	r1, r3, #15
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	1e5a      	subs	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
 800342e:	e007      	b.n	8003440 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 020f 	bic.w	r2, r2, #15
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f023 0303 	bic.w	r3, r3, #3
 8003448:	f043 0201 	orr.w	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
 8003450:	e007      	b.n	8003462 <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	f043 0210 	orr.w	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003462:	7ffb      	ldrb	r3, [r7, #31]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3720      	adds	r7, #32
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	2000001c 	.word	0x2000001c
 8003470:	053e2d63 	.word	0x053e2d63
 8003474:	50040000 	.word	0x50040000
 8003478:	50040300 	.word	0x50040300
 800347c:	fff0c007 	.word	0xfff0c007

08003480 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fe84 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d167      	bne.n	800356c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_Start_DMA+0x2a>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e063      	b.n	8003572 <HAL_ADC_Start_DMA+0xf2>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fe0a 	bl	80040cc <ADC_Enable>
 80034b8:	4603      	mov	r3, r0
 80034ba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d14f      	bne.n	8003562 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	f023 0206 	bic.w	r2, r3, #6
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	659a      	str	r2, [r3, #88]	; 0x58
 80034ee:	e002      	b.n	80034f6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	4a20      	ldr	r2, [pc, #128]	; (800357c <HAL_ADC_Start_DMA+0xfc>)
 80034fc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003502:	4a1f      	ldr	r2, [pc, #124]	; (8003580 <HAL_ADC_Start_DMA+0x100>)
 8003504:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350a:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <HAL_ADC_Start_DMA+0x104>)
 800350c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	221c      	movs	r2, #28
 8003514:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0210 	orr.w	r2, r2, #16
 800352c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3340      	adds	r3, #64	; 0x40
 8003548:	4619      	mov	r1, r3
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f001 f927 	bl	80047a0 <HAL_DMA_Start_IT>
 8003552:	4603      	mov	r3, r0
 8003554:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fe0b 	bl	8003176 <LL_ADC_REG_StartConversion>
 8003560:	e006      	b.n	8003570 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800356a:	e001      	b.n	8003570 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800356c:	2302      	movs	r3, #2
 800356e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003570:	7dfb      	ldrb	r3, [r7, #23]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	080041c1 	.word	0x080041c1
 8003580:	08004299 	.word	0x08004299
 8003584:	080042b5 	.word	0x080042b5

08003588 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d017      	beq.n	80035de <HAL_ADC_IRQHandler+0x56>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d012      	beq.n	80035de <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d105      	bne.n	80035d0 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 feb1 	bl	8004338 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2202      	movs	r2, #2
 80035dc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <HAL_ADC_IRQHandler+0x6a>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d05d      	beq.n	80036b8 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d058      	beq.n	80036b8 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d105      	bne.n	800361e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fc83 	bl	8002f2e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d03d      	beq.n	80036aa <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if defined (ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363c:	d035      	beq.n	80036aa <HAL_ADC_IRQHandler+0x122>
#endif
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b08      	cmp	r3, #8
 800364a:	d12e      	bne.n	80036aa <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fda4 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d11a      	bne.n	8003692 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 020c 	bic.w	r2, r2, #12
 800366a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003670:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d112      	bne.n	80036aa <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
 8003690:	e00b      	b.n	80036aa <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	f043 0210 	orr.w	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	f043 0201 	orr.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f922 	bl	80038f4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	220c      	movs	r2, #12
 80036b6:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <HAL_ADC_IRQHandler+0x144>
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d074      	beq.n	80037c0 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d06f      	beq.n	80037c0 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fc63 	bl	8002fc8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003702:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fc10 	bl	8002f2e <LL_ADC_REG_IsTriggerSourceSWStart>
 800370e:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d049      	beq.n	80037b2 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <HAL_ADC_IRQHandler+0x1b0>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d041      	beq.n	80037b2 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003734:	2b00      	cmp	r3, #0
 8003736:	d13c      	bne.n	80037b2 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003742:	2b40      	cmp	r3, #64	; 0x40
 8003744:	d135      	bne.n	80037b2 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d12e      	bne.n	80037b2 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fd33 	bl	80031c4 <LL_ADC_INJ_IsConversionOngoing>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d11a      	bne.n	800379a <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003772:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d112      	bne.n	80037b2 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	f043 0201 	orr.w	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
 8003798:	e00b      	b.n	80037b2 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379e:	f043 0210 	orr.w	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	f043 0201 	orr.w	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fd98 	bl	80042e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2260      	movs	r2, #96	; 0x60
 80037be:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d011      	beq.n	80037ee <HAL_ADC_IRQHandler+0x266>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00c      	beq.n	80037ee <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f89b 	bl	800391c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2280      	movs	r2, #128	; 0x80
 80037ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d012      	beq.n	800381e <HAL_ADC_IRQHandler+0x296>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00d      	beq.n	800381e <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fd7e 	bl	8004310 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800381c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003824:	2b00      	cmp	r3, #0
 8003826:	d012      	beq.n	800384e <HAL_ADC_IRQHandler+0x2c6>
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00d      	beq.n	800384e <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003836:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fd70 	bl	8004324 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	d02b      	beq.n	80038b0 <HAL_ADC_IRQHandler+0x328>
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	d026      	beq.n	80038b0 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 800386a:	2301      	movs	r3, #1
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	e009      	b.n	8003884 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fb99 	bl	8002fac <LL_ADC_REG_GetDMATransfer>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8003880:	2301      	movs	r3, #1
 8003882:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d10e      	bne.n	80038a8 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	f043 0202 	orr.w	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f844 	bl	8003930 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2210      	movs	r2, #16
 80038ae:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d018      	beq.n	80038ec <HAL_ADC_IRQHandler+0x364>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	f043 0208 	orr.w	r2, r3, #8
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038e4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fd08 	bl	80042fc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 80038ec:	bf00      	nop
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b0b6      	sub	sp, #216	; 0xd8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x22>
 8003962:	2302      	movs	r3, #2
 8003964:	e39e      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x760>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff fc13 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	f040 8383 	bne.w	8004086 <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	f7ff fae1 	bl	8002f54 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fc01 	bl	800319e <LL_ADC_REG_IsConversionOngoing>
 800399c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fc0d 	bl	80031c4 <LL_ADC_INJ_IsConversionOngoing>
 80039aa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 81a6 	bne.w	8003d04 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f040 81a1 	bne.w	8003d04 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6819      	ldr	r1, [r3, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f7ff fb0d 	bl	8002fee <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	08db      	lsrs	r3, r3, #3
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d00a      	beq.n	8003a0c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6919      	ldr	r1, [r3, #16]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a06:	f7ff fa3d 	bl	8002e84 <LL_ADC_SetOffset>
 8003a0a:	e17b      	b.n	8003d04 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fa5a 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10a      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0xf4>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2100      	movs	r1, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fa4f 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	0e9b      	lsrs	r3, r3, #26
 8003a32:	f003 021f 	and.w	r2, r3, #31
 8003a36:	e01e      	b.n	8003a76 <HAL_ADC_ConfigChannel+0x132>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fa44 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8003a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003a66:	2320      	movs	r3, #32
 8003a68:	e004      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003a6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x14a>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	0e9b      	lsrs	r3, r3, #26
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	e018      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x17c>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003aa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003aaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003ab2:	2320      	movs	r3, #32
 8003ab4:	e004      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003ab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d106      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2100      	movs	r1, #0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff fa13 	bl	8002ef8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff f9f7 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x1ba>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2101      	movs	r1, #1
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff f9ec 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003af4:	4603      	mov	r3, r0
 8003af6:	0e9b      	lsrs	r3, r3, #26
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	e01e      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x1f8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2101      	movs	r1, #1
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff f9e1 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b14:	fa93 f3a3 	rbit	r3, r3
 8003b18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003b1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003b24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	e004      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003b30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d105      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x210>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	0e9b      	lsrs	r3, r3, #26
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	e018      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x242>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003b68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003b78:	2320      	movs	r3, #32
 8003b7a:	e004      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d106      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2101      	movs	r1, #1
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff f9b0 	bl	8002ef8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff f994 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x280>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff f989 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	0e9b      	lsrs	r3, r3, #26
 8003bbe:	f003 021f 	and.w	r2, r3, #31
 8003bc2:	e01e      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x2be>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2102      	movs	r1, #2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff f97e 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003bf2:	2320      	movs	r3, #32
 8003bf4:	e004      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003bf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x2d6>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	0e9b      	lsrs	r3, r3, #26
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	e016      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x304>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003c2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003c3a:	2320      	movs	r3, #32
 8003c3c:	e004      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d106      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2200      	movs	r2, #0
 8003c52:	2102      	movs	r1, #2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff f94f 	bl	8002ef8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2103      	movs	r1, #3
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff f933 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x342>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2103      	movs	r1, #3
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff f928 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	0e9b      	lsrs	r3, r3, #26
 8003c80:	f003 021f 	and.w	r2, r3, #31
 8003c84:	e017      	b.n	8003cb6 <HAL_ADC_ConfigChannel+0x372>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2103      	movs	r1, #3
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff f91d 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003c92:	4603      	mov	r3, r0
 8003c94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c98:	fa93 f3a3 	rbit	r3, r3
 8003c9c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ca0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003ca8:	2320      	movs	r3, #32
 8003caa:	e003      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cae:	fab3 f383 	clz	r3, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d105      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x38a>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	0e9b      	lsrs	r3, r3, #26
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	e011      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x3ae>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cde:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	e003      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d106      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2103      	movs	r1, #3
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff f8fa 	bl	8002ef8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fa21 	bl	8003150 <LL_ADC_IsEnabled>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f040 81c1 	bne.w	8004098 <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6819      	ldr	r1, [r3, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f7ff f98e 	bl	8003044 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4a8e      	ldr	r2, [pc, #568]	; (8003f68 <HAL_ADC_ConfigChannel+0x624>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	f040 8130 	bne.w	8003f94 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x418>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	0e9b      	lsrs	r3, r3, #26
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	2b09      	cmp	r3, #9
 8003d52:	bf94      	ite	ls
 8003d54:	2301      	movls	r3, #1
 8003d56:	2300      	movhi	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e019      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x44c>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d64:	fa93 f3a3 	rbit	r3, r3
 8003d68:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d6c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003d74:	2320      	movs	r3, #32
 8003d76:	e003      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d7a:	fab3 f383 	clz	r3, r3
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	3301      	adds	r3, #1
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2b09      	cmp	r3, #9
 8003d88:	bf94      	ite	ls
 8003d8a:	2301      	movls	r3, #1
 8003d8c:	2300      	movhi	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d079      	beq.n	8003e88 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x46c>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	0e9b      	lsrs	r3, r3, #26
 8003da6:	3301      	adds	r3, #1
 8003da8:	069b      	lsls	r3, r3, #26
 8003daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dae:	e015      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x498>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003dc8:	2320      	movs	r3, #32
 8003dca:	e003      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dce:	fab3 f383 	clz	r3, r3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	069b      	lsls	r3, r3, #26
 8003dd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x4b8>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	0e9b      	lsrs	r3, r3, #26
 8003dee:	3301      	adds	r3, #1
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	2101      	movs	r1, #1
 8003df6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfa:	e017      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x4e8>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003e14:	2320      	movs	r3, #32
 8003e16:	e003      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1a:	fab3 f383 	clz	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3301      	adds	r3, #1
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	2101      	movs	r1, #1
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	ea42 0103 	orr.w	r1, r2, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x50e>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	0e9b      	lsrs	r3, r3, #26
 8003e42:	3301      	adds	r3, #1
 8003e44:	f003 021f 	and.w	r2, r3, #31
 8003e48:	4613      	mov	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	051b      	lsls	r3, r3, #20
 8003e50:	e018      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x540>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003e6a:	2320      	movs	r3, #32
 8003e6c:	e003      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e70:	fab3 f383 	clz	r3, r3
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	3301      	adds	r3, #1
 8003e78:	f003 021f 	and.w	r2, r3, #31
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4413      	add	r3, r2
 8003e82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e84:	430b      	orrs	r3, r1
 8003e86:	e080      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d107      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x560>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	0e9b      	lsrs	r3, r3, #26
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	069b      	lsls	r3, r3, #26
 8003e9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ea2:	e015      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x58c>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	e003      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	3301      	adds	r3, #1
 8003eca:	069b      	lsls	r3, r3, #26
 8003ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x5ac>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	0e9b      	lsrs	r3, r3, #26
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	2101      	movs	r1, #1
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	e017      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x5dc>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	fa93 f3a3 	rbit	r3, r3
 8003efc:	61fb      	str	r3, [r7, #28]
  return result;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003f08:	2320      	movs	r3, #32
 8003f0a:	e003      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	fab3 f383 	clz	r3, r3
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	3301      	adds	r3, #1
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	ea42 0103 	orr.w	r1, r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10d      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x608>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	0e9b      	lsrs	r3, r3, #26
 8003f36:	3301      	adds	r3, #1
 8003f38:	f003 021f 	and.w	r2, r3, #31
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4413      	add	r3, r2
 8003f42:	3b1e      	subs	r3, #30
 8003f44:	051b      	lsls	r3, r3, #20
 8003f46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	e01d      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x644>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	613b      	str	r3, [r7, #16]
  return result;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003f64:	2320      	movs	r3, #32
 8003f66:	e005      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x630>
 8003f68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	fab3 f383 	clz	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	3301      	adds	r3, #1
 8003f76:	f003 021f 	and.w	r2, r3, #31
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	3b1e      	subs	r3, #30
 8003f82:	051b      	lsls	r3, r3, #20
 8003f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	6892      	ldr	r2, [r2, #8]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	f7ff f82d 	bl	8002fee <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b44      	ldr	r3, [pc, #272]	; (80040ac <HAL_ADC_ConfigChannel+0x768>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d07b      	beq.n	8004098 <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fa0:	4843      	ldr	r0, [pc, #268]	; (80040b0 <HAL_ADC_ConfigChannel+0x76c>)
 8003fa2:	f7fe ff61 	bl	8002e68 <LL_ADC_GetCommonPathInternalCh>
 8003fa6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003faa:	4842      	ldr	r0, [pc, #264]	; (80040b4 <HAL_ADC_ConfigChannel+0x770>)
 8003fac:	f7ff f8d0 	bl	8003150 <LL_ADC_IsEnabled>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d15d      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a3f      	ldr	r2, [pc, #252]	; (80040b8 <HAL_ADC_ConfigChannel+0x774>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d126      	bne.n	800400e <HAL_ADC_ConfigChannel+0x6ca>
 8003fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d120      	bne.n	800400e <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a38      	ldr	r2, [pc, #224]	; (80040b4 <HAL_ADC_ConfigChannel+0x770>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d160      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003fd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4833      	ldr	r0, [pc, #204]	; (80040b0 <HAL_ADC_ConfigChannel+0x76c>)
 8003fe2:	f7fe ff2e 	bl	8002e42 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003fe6:	4b35      	ldr	r3, [pc, #212]	; (80040bc <HAL_ADC_ConfigChannel+0x778>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	099b      	lsrs	r3, r3, #6
 8003fec:	4a34      	ldr	r2, [pc, #208]	; (80040c0 <HAL_ADC_ConfigChannel+0x77c>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	099a      	lsrs	r2, r3, #6
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003ffe:	e002      	b.n	8004006 <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3b01      	subs	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f9      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800400c:	e044      	b.n	8004098 <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2c      	ldr	r2, [pc, #176]	; (80040c4 <HAL_ADC_ConfigChannel+0x780>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d113      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x6fc>
 8004018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800401c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10d      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a22      	ldr	r2, [pc, #136]	; (80040b4 <HAL_ADC_ConfigChannel+0x770>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d134      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800402e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004036:	4619      	mov	r1, r3
 8004038:	481d      	ldr	r0, [pc, #116]	; (80040b0 <HAL_ADC_ConfigChannel+0x76c>)
 800403a:	f7fe ff02 	bl	8002e42 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800403e:	e02b      	b.n	8004098 <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a20      	ldr	r2, [pc, #128]	; (80040c8 <HAL_ADC_ConfigChannel+0x784>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d126      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x754>
 800404a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800404e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d120      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <HAL_ADC_ConfigChannel+0x770>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d11b      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004060:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004064:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004068:	4619      	mov	r1, r3
 800406a:	4811      	ldr	r0, [pc, #68]	; (80040b0 <HAL_ADC_ConfigChannel+0x76c>)
 800406c:	f7fe fee9 	bl	8002e42 <LL_ADC_SetCommonPathInternalCh>
 8004070:	e012      	b.n	8004098 <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004084:	e008      	b.n	8004098 <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	f043 0220 	orr.w	r2, r3, #32
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80040a0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	37d8      	adds	r7, #216	; 0xd8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	80080000 	.word	0x80080000
 80040b0:	50040300 	.word	0x50040300
 80040b4:	50040000 	.word	0x50040000
 80040b8:	c7520000 	.word	0xc7520000
 80040bc:	2000001c 	.word	0x2000001c
 80040c0:	053e2d63 	.word	0x053e2d63
 80040c4:	cb840000 	.word	0xcb840000
 80040c8:	80000001 	.word	0x80000001

080040cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff f837 	bl	8003150 <LL_ADC_IsEnabled>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d15e      	bne.n	80041a6 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <ADC_Enable+0xe4>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00d      	beq.n	8004112 <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	f043 0210 	orr.w	r2, r3, #16
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	f043 0201 	orr.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e04a      	b.n	80041a8 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff f806 	bl	8003128 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800411c:	4825      	ldr	r0, [pc, #148]	; (80041b4 <ADC_Enable+0xe8>)
 800411e:	f7fe fea3 	bl	8002e68 <LL_ADC_GetCommonPathInternalCh>
 8004122:	4603      	mov	r3, r0
 8004124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00f      	beq.n	800414c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800412c:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <ADC_Enable+0xec>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	099b      	lsrs	r3, r3, #6
 8004132:	4a22      	ldr	r2, [pc, #136]	; (80041bc <ADC_Enable+0xf0>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	3301      	adds	r3, #1
 800413c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800413e:	e002      	b.n	8004146 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	3b01      	subs	r3, #1
 8004144:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f9      	bne.n	8004140 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800414c:	f7fe fe2c 	bl	8002da8 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004152:	e021      	b.n	8004198 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe fff9 	bl	8003150 <LL_ADC_IsEnabled>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d104      	bne.n	800416e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7fe ffdd 	bl	8003128 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800416e:	f7fe fe1b 	bl	8002da8 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d90d      	bls.n	8004198 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	f043 0210 	orr.w	r2, r3, #16
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	f043 0201 	orr.w	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e007      	b.n	80041a8 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d1d6      	bne.n	8004154 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	8000003f 	.word	0x8000003f
 80041b4:	50040300 	.word	0x50040300
 80041b8:	2000001c 	.word	0x2000001c
 80041bc:	053e2d63 	.word	0x053e2d63

080041c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d14b      	bne.n	8004272 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d021      	beq.n	8004238 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fe fe98 	bl	8002f2e <LL_ADC_REG_IsTriggerSourceSWStart>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d032      	beq.n	800426a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d12b      	bne.n	800426a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d11f      	bne.n	800426a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f043 0201 	orr.w	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
 8004236:	e018      	b.n	800426a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d111      	bne.n	800426a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d105      	bne.n	800426a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	f043 0201 	orr.w	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff fb42 	bl	80038f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004270:	e00e      	b.n	8004290 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7ff fb56 	bl	8003930 <HAL_ADC_ErrorCallback>
}
 8004284:	e004      	b.n	8004290 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4798      	blx	r3
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7ff fb2e 	bl	8003908 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d2:	f043 0204 	orr.w	r2, r3, #4
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f7ff fb28 	bl	8003930 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800435c:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <__NVIC_SetPriorityGrouping+0x44>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004368:	4013      	ands	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800437e:	4a04      	ldr	r2, [pc, #16]	; (8004390 <__NVIC_SetPriorityGrouping+0x44>)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	60d3      	str	r3, [r2, #12]
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	e000ed00 	.word	0xe000ed00

08004394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004398:	4b04      	ldr	r3, [pc, #16]	; (80043ac <__NVIC_GetPriorityGrouping+0x18>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	0a1b      	lsrs	r3, r3, #8
 800439e:	f003 0307 	and.w	r3, r3, #7
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	e000ed00 	.word	0xe000ed00

080043b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	db0b      	blt.n	80043da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	f003 021f 	and.w	r2, r3, #31
 80043c8:	4907      	ldr	r1, [pc, #28]	; (80043e8 <__NVIC_EnableIRQ+0x38>)
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	2001      	movs	r0, #1
 80043d2:	fa00 f202 	lsl.w	r2, r0, r2
 80043d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	e000e100 	.word	0xe000e100

080043ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	db10      	blt.n	8004420 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	f003 021f 	and.w	r2, r3, #31
 8004404:	4909      	ldr	r1, [pc, #36]	; (800442c <__NVIC_DisableIRQ+0x40>)
 8004406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	2001      	movs	r0, #1
 800440e:	fa00 f202 	lsl.w	r2, r0, r2
 8004412:	3320      	adds	r3, #32
 8004414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004418:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800441c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	e000e100 	.word	0xe000e100

08004430 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800443a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443e:	2b00      	cmp	r3, #0
 8004440:	db0c      	blt.n	800445c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	f003 021f 	and.w	r2, r3, #31
 8004448:	4907      	ldr	r1, [pc, #28]	; (8004468 <__NVIC_SetPendingIRQ+0x38>)
 800444a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2001      	movs	r0, #1
 8004452:	fa00 f202 	lsl.w	r2, r0, r2
 8004456:	3340      	adds	r3, #64	; 0x40
 8004458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	e000e100 	.word	0xe000e100

0800446c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447a:	2b00      	cmp	r3, #0
 800447c:	db0c      	blt.n	8004498 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	f003 021f 	and.w	r2, r3, #31
 8004484:	4907      	ldr	r1, [pc, #28]	; (80044a4 <__NVIC_ClearPendingIRQ+0x38>)
 8004486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	2001      	movs	r0, #1
 800448e:	fa00 f202 	lsl.w	r2, r0, r2
 8004492:	3360      	adds	r3, #96	; 0x60
 8004494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	e000e100 	.word	0xe000e100

080044a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	6039      	str	r1, [r7, #0]
 80044b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	db0a      	blt.n	80044d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	490c      	ldr	r1, [pc, #48]	; (80044f4 <__NVIC_SetPriority+0x4c>)
 80044c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c6:	0112      	lsls	r2, r2, #4
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	440b      	add	r3, r1
 80044cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044d0:	e00a      	b.n	80044e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	4908      	ldr	r1, [pc, #32]	; (80044f8 <__NVIC_SetPriority+0x50>)
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	3b04      	subs	r3, #4
 80044e0:	0112      	lsls	r2, r2, #4
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	440b      	add	r3, r1
 80044e6:	761a      	strb	r2, [r3, #24]
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	e000e100 	.word	0xe000e100
 80044f8:	e000ed00 	.word	0xe000ed00

080044fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b089      	sub	sp, #36	; 0x24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f1c3 0307 	rsb	r3, r3, #7
 8004516:	2b04      	cmp	r3, #4
 8004518:	bf28      	it	cs
 800451a:	2304      	movcs	r3, #4
 800451c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3304      	adds	r3, #4
 8004522:	2b06      	cmp	r3, #6
 8004524:	d902      	bls.n	800452c <NVIC_EncodePriority+0x30>
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	3b03      	subs	r3, #3
 800452a:	e000      	b.n	800452e <NVIC_EncodePriority+0x32>
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004530:	f04f 32ff 	mov.w	r2, #4294967295
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	43da      	mvns	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	401a      	ands	r2, r3
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004544:	f04f 31ff 	mov.w	r1, #4294967295
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	fa01 f303 	lsl.w	r3, r1, r3
 800454e:	43d9      	mvns	r1, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004554:	4313      	orrs	r3, r2
         );
}
 8004556:	4618      	mov	r0, r3
 8004558:	3724      	adds	r7, #36	; 0x24
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004568:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <__NVIC_SystemReset+0x20>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004574:	4903      	ldr	r1, [pc, #12]	; (8004584 <__NVIC_SystemReset+0x20>)
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <__NVIC_SystemReset+0x24>)
 8004578:	4313      	orrs	r3, r2
 800457a:	60cb      	str	r3, [r1, #12]
 800457c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004580:	bf00      	nop
 8004582:	e7fd      	b.n	8004580 <__NVIC_SystemReset+0x1c>
 8004584:	e000ed00 	.word	0xe000ed00
 8004588:	05fa0004 	.word	0x05fa0004

0800458c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fed9 	bl	800434c <__NVIC_SetPriorityGrouping>
}
 800459a:	bf00      	nop
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	4603      	mov	r3, r0
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045b0:	f7ff fef0 	bl	8004394 <__NVIC_GetPriorityGrouping>
 80045b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	6978      	ldr	r0, [r7, #20]
 80045bc:	f7ff ff9e 	bl	80044fc <NVIC_EncodePriority>
 80045c0:	4602      	mov	r2, r0
 80045c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c6:	4611      	mov	r1, r2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff ff6d 	bl	80044a8 <__NVIC_SetPriority>
}
 80045ce:	bf00      	nop
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	4603      	mov	r3, r0
 80045de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fee3 	bl	80043b0 <__NVIC_EnableIRQ>
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	4603      	mov	r3, r0
 80045fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80045fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff fef3 	bl	80043ec <__NVIC_DisableIRQ>
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004612:	f7ff ffa7 	bl	8004564 <__NVIC_SystemReset>

08004616 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	4603      	mov	r3, r0
 800461e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff ff03 	bl	8004430 <__NVIC_SetPendingIRQ>
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	4603      	mov	r3, r0
 800463a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800463c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff ff13 	bl	800446c <__NVIC_ClearPendingIRQ>
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e08e      	b.n	8004780 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	4b47      	ldr	r3, [pc, #284]	; (8004788 <HAL_DMA_Init+0x138>)
 800466a:	429a      	cmp	r2, r3
 800466c:	d80f      	bhi.n	800468e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	4b45      	ldr	r3, [pc, #276]	; (800478c <HAL_DMA_Init+0x13c>)
 8004676:	4413      	add	r3, r2
 8004678:	4a45      	ldr	r2, [pc, #276]	; (8004790 <HAL_DMA_Init+0x140>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	009a      	lsls	r2, r3, #2
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a42      	ldr	r2, [pc, #264]	; (8004794 <HAL_DMA_Init+0x144>)
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
 800468c:	e00e      	b.n	80046ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	4b40      	ldr	r3, [pc, #256]	; (8004798 <HAL_DMA_Init+0x148>)
 8004696:	4413      	add	r3, r2
 8004698:	4a3d      	ldr	r2, [pc, #244]	; (8004790 <HAL_DMA_Init+0x140>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	091b      	lsrs	r3, r3, #4
 80046a0:	009a      	lsls	r2, r3, #2
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a3c      	ldr	r2, [pc, #240]	; (800479c <HAL_DMA_Init+0x14c>)
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f9b6 	bl	8004a70 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800470c:	d102      	bne.n	8004714 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004720:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800472a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d010      	beq.n	8004756 <HAL_DMA_Init+0x106>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b04      	cmp	r3, #4
 800473a:	d80c      	bhi.n	8004756 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f9d5 	bl	8004aec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004752:	605a      	str	r2, [r3, #4]
 8004754:	e008      	b.n	8004768 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40020407 	.word	0x40020407
 800478c:	bffdfff8 	.word	0xbffdfff8
 8004790:	cccccccd 	.word	0xcccccccd
 8004794:	40020000 	.word	0x40020000
 8004798:	bffdfbf8 	.word	0xbffdfbf8
 800479c:	40020400 	.word	0x40020400

080047a0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_DMA_Start_IT+0x20>
 80047bc:	2302      	movs	r3, #2
 80047be:	e066      	b.n	800488e <HAL_DMA_Start_IT+0xee>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d155      	bne.n	8004880 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f8fb 	bl	80049f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 020e 	orr.w	r2, r2, #14
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e00f      	b.n	8004838 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0204 	bic.w	r2, r2, #4
 8004826:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 020a 	orr.w	r2, r2, #10
 8004836:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004854:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800486c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0201 	orr.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e005      	b.n	800488c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004888:	2302      	movs	r3, #2
 800488a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800488c:	7dfb      	ldrb	r3, [r7, #23]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	f003 031c 	and.w	r3, r3, #28
 80048b6:	2204      	movs	r2, #4
 80048b8:	409a      	lsls	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4013      	ands	r3, r2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d026      	beq.n	8004910 <HAL_DMA_IRQHandler+0x7a>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d021      	beq.n	8004910 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0204 	bic.w	r2, r2, #4
 80048e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	f003 021c 	and.w	r2, r3, #28
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	2104      	movs	r1, #4
 80048f8:	fa01 f202 	lsl.w	r2, r1, r2
 80048fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	2b00      	cmp	r3, #0
 8004904:	d071      	beq.n	80049ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800490e:	e06c      	b.n	80049ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004914:	f003 031c 	and.w	r3, r3, #28
 8004918:	2202      	movs	r2, #2
 800491a:	409a      	lsls	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d02e      	beq.n	8004982 <HAL_DMA_IRQHandler+0xec>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d029      	beq.n	8004982 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 020a 	bic.w	r2, r2, #10
 800494a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004958:	f003 021c 	and.w	r2, r3, #28
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	2102      	movs	r1, #2
 8004962:	fa01 f202 	lsl.w	r2, r1, r2
 8004966:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d038      	beq.n	80049ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004980:	e033      	b.n	80049ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	f003 031c 	and.w	r3, r3, #28
 800498a:	2208      	movs	r2, #8
 800498c:	409a      	lsls	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4013      	ands	r3, r2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d02a      	beq.n	80049ec <HAL_DMA_IRQHandler+0x156>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b00      	cmp	r3, #0
 800499e:	d025      	beq.n	80049ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 020e 	bic.w	r2, r2, #14
 80049ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	f003 021c 	and.w	r2, r3, #28
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	2101      	movs	r1, #1
 80049be:	fa01 f202 	lsl.w	r2, r1, r2
 80049c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d004      	beq.n	80049ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
}
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a0a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d004      	beq.n	8004a1e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a1c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	f003 021c 	and.w	r2, r3, #28
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d108      	bne.n	8004a54 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a52:	e007      	b.n	8004a64 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	60da      	str	r2, [r3, #12]
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b17      	ldr	r3, [pc, #92]	; (8004adc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d80a      	bhi.n	8004a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a88:	089b      	lsrs	r3, r3, #2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a90:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6493      	str	r3, [r2, #72]	; 0x48
 8004a98:	e007      	b.n	8004aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	089b      	lsrs	r3, r3, #2
 8004aa0:	009a      	lsls	r2, r3, #2
 8004aa2:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004aa4:	4413      	add	r3, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	3b08      	subs	r3, #8
 8004ab2:	4a0c      	ldr	r2, [pc, #48]	; (8004ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004ac0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	2201      	movs	r2, #1
 8004aca:	409a      	lsls	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	40020407 	.word	0x40020407
 8004ae0:	4002081c 	.word	0x4002081c
 8004ae4:	cccccccd 	.word	0xcccccccd
 8004ae8:	40020880 	.word	0x40020880

08004aec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004afc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	461a      	mov	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004b10:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004b22:	bf00      	nop
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	1000823f 	.word	0x1000823f
 8004b34:	40020940 	.word	0x40020940

08004b38 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b46:	e14c      	b.n	8004de2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	fa01 f303 	lsl.w	r3, r1, r3
 8004b54:	4013      	ands	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 813e 	beq.w	8004ddc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d00b      	beq.n	8004b80 <HAL_GPIO_Init+0x48>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d007      	beq.n	8004b80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b74:	2b11      	cmp	r3, #17
 8004b76:	d003      	beq.n	8004b80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b12      	cmp	r3, #18
 8004b7e:	d130      	bne.n	8004be2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4013      	ands	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	091b      	lsrs	r3, r3, #4
 8004bcc:	f003 0201 	and.w	r2, r3, #1
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	2203      	movs	r2, #3
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d003      	beq.n	8004c22 <HAL_GPIO_Init+0xea>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b12      	cmp	r3, #18
 8004c20:	d123      	bne.n	8004c6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	08da      	lsrs	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3208      	adds	r2, #8
 8004c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	220f      	movs	r2, #15
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	08da      	lsrs	r2, r3, #3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3208      	adds	r2, #8
 8004c64:	6939      	ldr	r1, [r7, #16]
 8004c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	2203      	movs	r2, #3
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f003 0203 	and.w	r2, r3, #3
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 8098 	beq.w	8004ddc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004cac:	4a54      	ldr	r2, [pc, #336]	; (8004e00 <HAL_GPIO_Init+0x2c8>)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	089b      	lsrs	r3, r3, #2
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f003 0303 	and.w	r3, r3, #3
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	220f      	movs	r2, #15
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004cd6:	d019      	beq.n	8004d0c <HAL_GPIO_Init+0x1d4>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a4a      	ldr	r2, [pc, #296]	; (8004e04 <HAL_GPIO_Init+0x2cc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d013      	beq.n	8004d08 <HAL_GPIO_Init+0x1d0>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a49      	ldr	r2, [pc, #292]	; (8004e08 <HAL_GPIO_Init+0x2d0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00d      	beq.n	8004d04 <HAL_GPIO_Init+0x1cc>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a48      	ldr	r2, [pc, #288]	; (8004e0c <HAL_GPIO_Init+0x2d4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d007      	beq.n	8004d00 <HAL_GPIO_Init+0x1c8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a47      	ldr	r2, [pc, #284]	; (8004e10 <HAL_GPIO_Init+0x2d8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d101      	bne.n	8004cfc <HAL_GPIO_Init+0x1c4>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	e008      	b.n	8004d0e <HAL_GPIO_Init+0x1d6>
 8004cfc:	2307      	movs	r3, #7
 8004cfe:	e006      	b.n	8004d0e <HAL_GPIO_Init+0x1d6>
 8004d00:	2303      	movs	r3, #3
 8004d02:	e004      	b.n	8004d0e <HAL_GPIO_Init+0x1d6>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e002      	b.n	8004d0e <HAL_GPIO_Init+0x1d6>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <HAL_GPIO_Init+0x1d6>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	f002 0203 	and.w	r2, r2, #3
 8004d14:	0092      	lsls	r2, r2, #2
 8004d16:	4093      	lsls	r3, r2
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d1e:	4938      	ldr	r1, [pc, #224]	; (8004e00 <HAL_GPIO_Init+0x2c8>)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	3302      	adds	r3, #2
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d2c:	4b39      	ldr	r3, [pc, #228]	; (8004e14 <HAL_GPIO_Init+0x2dc>)
 8004d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d52:	4a30      	ldr	r2, [pc, #192]	; (8004e14 <HAL_GPIO_Init+0x2dc>)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004d5a:	4b2e      	ldr	r3, [pc, #184]	; (8004e14 <HAL_GPIO_Init+0x2dc>)
 8004d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	43db      	mvns	r3, r3
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d80:	4a24      	ldr	r2, [pc, #144]	; (8004e14 <HAL_GPIO_Init+0x2dc>)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d88:	4b22      	ldr	r3, [pc, #136]	; (8004e14 <HAL_GPIO_Init+0x2dc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	43db      	mvns	r3, r3
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4013      	ands	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dac:	4a19      	ldr	r2, [pc, #100]	; (8004e14 <HAL_GPIO_Init+0x2dc>)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004db2:	4b18      	ldr	r3, [pc, #96]	; (8004e14 <HAL_GPIO_Init+0x2dc>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004dd6:	4a0f      	ldr	r2, [pc, #60]	; (8004e14 <HAL_GPIO_Init+0x2dc>)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	3301      	adds	r3, #1
 8004de0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f47f aeab 	bne.w	8004b48 <HAL_GPIO_Init+0x10>
  }
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000
 8004e04:	48000400 	.word	0x48000400
 8004e08:	48000800 	.word	0x48000800
 8004e0c:	48000c00 	.word	0x48000c00
 8004e10:	48001000 	.word	0x48001000
 8004e14:	58000800 	.word	0x58000800

08004e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	807b      	strh	r3, [r7, #2]
 8004e24:	4613      	mov	r3, r2
 8004e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e28:	787b      	ldrb	r3, [r7, #1]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e2e:	887a      	ldrh	r2, [r7, #2]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e34:	e002      	b.n	8004e3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e36:	887a      	ldrh	r2, [r7, #2]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <HAL_HSEM_IRQHandler+0x30>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004e54:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <HAL_HSEM_IRQHandler+0x30>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	4906      	ldr	r1, [pc, #24]	; (8004e78 <HAL_HSEM_IRQHandler+0x30>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004e62:	4a05      	ldr	r2, [pc, #20]	; (8004e78 <HAL_HSEM_IRQHandler+0x30>)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f807 	bl	8004e7c <HAL_HSEM_FreeCallback>
}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	58001500 	.word	0x58001500

08004e7c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e92:	b08b      	sub	sp, #44	; 0x2c
 8004e94:	af06      	add	r7, sp, #24
 8004e96:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e0ad      	b.n	8004ffe <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f00d fffc 	bl	8012eb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f004 f836 	bl	8008f3a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]
 8004ed2:	e035      	b.n	8004f40 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	015b      	lsls	r3, r3, #5
 8004eda:	4413      	add	r3, r2
 8004edc:	3329      	adds	r3, #41	; 0x29
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	015b      	lsls	r3, r3, #5
 8004ee8:	4413      	add	r3, r2
 8004eea:	3328      	adds	r3, #40	; 0x28
 8004eec:	7bfa      	ldrb	r2, [r7, #15]
 8004eee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	b291      	uxth	r1, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	015b      	lsls	r3, r3, #5
 8004efa:	4413      	add	r3, r2
 8004efc:	3336      	adds	r3, #54	; 0x36
 8004efe:	460a      	mov	r2, r1
 8004f00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	015b      	lsls	r3, r3, #5
 8004f08:	4413      	add	r3, r2
 8004f0a:	332b      	adds	r3, #43	; 0x2b
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	015b      	lsls	r3, r3, #5
 8004f16:	4413      	add	r3, r2
 8004f18:	3338      	adds	r3, #56	; 0x38
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	015b      	lsls	r3, r3, #5
 8004f24:	4413      	add	r3, r2
 8004f26:	333c      	adds	r3, #60	; 0x3c
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	3302      	adds	r3, #2
 8004f32:	015b      	lsls	r3, r3, #5
 8004f34:	4413      	add	r3, r2
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
 8004f40:	7bfa      	ldrb	r2, [r7, #15]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d3c4      	bcc.n	8004ed4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
 8004f4e:	e031      	b.n	8004fb4 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	015b      	lsls	r3, r3, #5
 8004f56:	4413      	add	r3, r2
 8004f58:	f203 1329 	addw	r3, r3, #297	; 0x129
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	015b      	lsls	r3, r3, #5
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f6c:	7bfa      	ldrb	r2, [r7, #15]
 8004f6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	015b      	lsls	r3, r3, #5
 8004f76:	4413      	add	r3, r2
 8004f78:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	015b      	lsls	r3, r3, #5
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	015b      	lsls	r3, r3, #5
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	330a      	adds	r3, #10
 8004fa6:	015b      	lsls	r3, r3, #5
 8004fa8:	4413      	add	r3, r2
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
 8004fb4:	7bfa      	ldrb	r2, [r7, #15]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d3c8      	bcc.n	8004f50 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	687e      	ldr	r6, [r7, #4]
 8004fc6:	466d      	mov	r5, sp
 8004fc8:	f106 0410 	add.w	r4, r6, #16
 8004fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	602b      	str	r3, [r5, #0]
 8004fd4:	1d33      	adds	r3, r6, #4
 8004fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fd8:	6838      	ldr	r0, [r7, #0]
 8004fda:	f003 ffc9 	bl	8008f70 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d102      	bne.n	8004ffc <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fe59 	bl	8005cae <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005006 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_PCD_Start+0x16>
 8005018:	2302      	movs	r3, #2
 800501a:	e012      	b.n	8005042 <HAL_PCD_Start+0x3c>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f005 f999 	bl	800a360 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f003 ff68 	bl	8008f08 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f005 f999 	bl	800a38e <USB_ReadInterrupts>
 800505c:	4603      	mov	r3, r0
 800505e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005066:	d102      	bne.n	800506e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fb33 	bl	80056d4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f005 f98b 	bl	800a38e <USB_ReadInterrupts>
 8005078:	4603      	mov	r3, r0
 800507a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005082:	d112      	bne.n	80050aa <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800508c:	b29a      	uxth	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005096:	b292      	uxth	r2, r2
 8005098:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f00d ff90 	bl	8012fc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80050a2:	2100      	movs	r1, #0
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f91e 	bl	80052e6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f005 f96d 	bl	800a38e <USB_ReadInterrupts>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050be:	d10b      	bne.n	80050d8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050d2:	b292      	uxth	r2, r2
 80050d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f005 f956 	bl	800a38e <USB_ReadInterrupts>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ec:	d10b      	bne.n	8005106 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005100:	b292      	uxth	r2, r2
 8005102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f005 f93f 	bl	800a38e <USB_ReadInterrupts>
 8005110:	4603      	mov	r3, r0
 8005112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511a:	d133      	bne.n	8005184 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005124:	b29a      	uxth	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0204 	bic.w	r2, r2, #4
 800512e:	b292      	uxth	r2, r2
 8005130:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800513c:	b29a      	uxth	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0208 	bic.w	r2, r2, #8
 8005146:	b292      	uxth	r2, r2
 8005148:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005152:	2b01      	cmp	r3, #1
 8005154:	d107      	bne.n	8005166 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800515e:	2100      	movs	r1, #0
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fdce 	bl	8005d02 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f00d ff64 	bl	8013034 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005174:	b29a      	uxth	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800517e:	b292      	uxth	r2, r2
 8005180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f005 f900 	bl	800a38e <USB_ReadInterrupts>
 800518e:	4603      	mov	r3, r0
 8005190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005198:	d126      	bne.n	80051e8 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0208 	orr.w	r2, r2, #8
 80051ac:	b292      	uxth	r2, r2
 80051ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c4:	b292      	uxth	r2, r2
 80051c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0204 	orr.w	r2, r2, #4
 80051dc:	b292      	uxth	r2, r2
 80051de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f00d ff0c 	bl	8013000 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f005 f8ce 	bl	800a38e <USB_ReadInterrupts>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f8:	2b80      	cmp	r3, #128	; 0x80
 80051fa:	d13f      	bne.n	800527c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005204:	b29a      	uxth	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800520e:	b292      	uxth	r2, r2
 8005210:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800521a:	2b00      	cmp	r3, #0
 800521c:	d12b      	bne.n	8005276 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0204 	orr.w	r2, r2, #4
 8005230:	b292      	uxth	r2, r2
 8005232:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0208 	orr.w	r2, r2, #8
 8005248:	b292      	uxth	r2, r2
 800524a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800525e:	b29b      	uxth	r3, r3
 8005260:	089b      	lsrs	r3, r3, #2
 8005262:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800526c:	2101      	movs	r1, #1
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fd47 	bl	8005d02 <HAL_PCDEx_LPM_Callback>
 8005274:	e002      	b.n	800527c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f00d fec2 	bl	8013000 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f005 f884 	bl	800a38e <USB_ReadInterrupts>
 8005286:	4603      	mov	r3, r0
 8005288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800528c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005290:	d10e      	bne.n	80052b0 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800529a:	b29a      	uxth	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052a4:	b292      	uxth	r2, r2
 80052a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f00d fe7b 	bl	8012fa6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f005 f86a 	bl	800a38e <USB_ReadInterrupts>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c4:	d10b      	bne.n	80052de <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052d8:	b292      	uxth	r2, r2
 80052da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	460b      	mov	r3, r1
 80052f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_PCD_SetAddress+0x1a>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e013      	b.n	8005328 <HAL_PCD_SetAddress+0x42>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	78fa      	ldrb	r2, [r7, #3]
 800530c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f005 f80d 	bl	800a338 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	4608      	mov	r0, r1
 800533a:	4611      	mov	r1, r2
 800533c:	461a      	mov	r2, r3
 800533e:	4603      	mov	r3, r0
 8005340:	70fb      	strb	r3, [r7, #3]
 8005342:	460b      	mov	r3, r1
 8005344:	803b      	strh	r3, [r7, #0]
 8005346:	4613      	mov	r3, r2
 8005348:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800534e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005352:	2b00      	cmp	r3, #0
 8005354:	da0b      	bge.n	800536e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	015b      	lsls	r3, r3, #5
 800535e:	3328      	adds	r3, #40	; 0x28
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4413      	add	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	705a      	strb	r2, [r3, #1]
 800536c:	e00b      	b.n	8005386 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	015b      	lsls	r3, r3, #5
 8005376:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005386:	78fb      	ldrb	r3, [r7, #3]
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005392:	883a      	ldrh	r2, [r7, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	78ba      	ldrb	r2, [r7, #2]
 800539c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	785b      	ldrb	r3, [r3, #1]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053b0:	78bb      	ldrb	r3, [r7, #2]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d102      	bne.n	80053bc <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_PCD_EP_Open+0x9a>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e00e      	b.n	80053e8 <HAL_PCD_EP_Open+0xb8>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	4618      	mov	r0, r3
 80053da:	f003 fded 	bl	8008fb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80053e6:	7afb      	ldrb	r3, [r7, #11]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005400:	2b00      	cmp	r3, #0
 8005402:	da0b      	bge.n	800541c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005404:	78fb      	ldrb	r3, [r7, #3]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	015b      	lsls	r3, r3, #5
 800540c:	3328      	adds	r3, #40	; 0x28
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	705a      	strb	r2, [r3, #1]
 800541a:	e00b      	b.n	8005434 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	015b      	lsls	r3, r3, #5
 8005424:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	4413      	add	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_PCD_EP_Close+0x5e>
 800544a:	2302      	movs	r3, #2
 800544c:	e00e      	b.n	800546c <HAL_PCD_EP_Close+0x7c>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68f9      	ldr	r1, [r7, #12]
 800545c:	4618      	mov	r0, r3
 800545e:	f004 f959 	bl	8009714 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	607a      	str	r2, [r7, #4]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	460b      	mov	r3, r1
 8005482:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005484:	7afb      	ldrb	r3, [r7, #11]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	015b      	lsls	r3, r3, #5
 800548c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2200      	movs	r2, #0
 80054a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2200      	movs	r2, #0
 80054ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054ae:	7afb      	ldrb	r3, [r7, #11]
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054ba:	7afb      	ldrb	r3, [r7, #11]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6979      	ldr	r1, [r7, #20]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f004 fb0f 	bl	8009aee <USB_EPStartXfer>
 80054d0:	e005      	b.n	80054de <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6979      	ldr	r1, [r7, #20]
 80054d8:	4618      	mov	r0, r3
 80054da:	f004 fb08 	bl	8009aee <USB_EPStartXfer>
  }

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	330a      	adds	r3, #10
 80054fe:	015b      	lsls	r3, r3, #5
 8005500:	4413      	add	r3, r2
 8005502:	3304      	adds	r3, #4
 8005504:	681b      	ldr	r3, [r3, #0]
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b086      	sub	sp, #24
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
 800551e:	460b      	mov	r3, r1
 8005520:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005522:	7afb      	ldrb	r3, [r7, #11]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	015b      	lsls	r3, r3, #5
 800552a:	3328      	adds	r3, #40	; 0x28
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2200      	movs	r2, #0
 8005542:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2201      	movs	r2, #1
 8005548:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800554a:	7afb      	ldrb	r3, [r7, #11]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	b2da      	uxtb	r2, r3
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005556:	7afb      	ldrb	r3, [r7, #11]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6979      	ldr	r1, [r7, #20]
 8005566:	4618      	mov	r0, r3
 8005568:	f004 fac1 	bl	8009aee <USB_EPStartXfer>
 800556c:	e005      	b.n	800557a <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6979      	ldr	r1, [r7, #20]
 8005574:	4618      	mov	r0, r3
 8005576:	f004 faba 	bl	8009aee <USB_EPStartXfer>
  }

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	f003 0207 	and.w	r2, r3, #7
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d901      	bls.n	80055a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e046      	b.n	8005630 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	da0b      	bge.n	80055c2 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055aa:	78fb      	ldrb	r3, [r7, #3]
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	015b      	lsls	r3, r3, #5
 80055b2:	3328      	adds	r3, #40	; 0x28
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	4413      	add	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	705a      	strb	r2, [r3, #1]
 80055c0:	e009      	b.n	80055d6 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	015b      	lsls	r3, r3, #5
 80055c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055dc:	78fb      	ldrb	r3, [r7, #3]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_PCD_EP_SetStall+0x72>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e01c      	b.n	8005630 <HAL_PCD_EP_SetStall+0xac>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68f9      	ldr	r1, [r7, #12]
 8005604:	4618      	mov	r0, r3
 8005606:	f004 fd98 	bl	800a13a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	2b00      	cmp	r3, #0
 8005612:	d108      	bne.n	8005626 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800561e:	4619      	mov	r1, r3
 8005620:	4610      	mov	r0, r2
 8005622:	f004 fec4 	bl	800a3ae <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	f003 020f 	and.w	r2, r3, #15
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	429a      	cmp	r2, r3
 8005650:	d901      	bls.n	8005656 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e03a      	b.n	80056cc <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800565a:	2b00      	cmp	r3, #0
 800565c:	da0b      	bge.n	8005676 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	015b      	lsls	r3, r3, #5
 8005666:	3328      	adds	r3, #40	; 0x28
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	4413      	add	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	705a      	strb	r2, [r3, #1]
 8005674:	e00b      	b.n	800568e <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	015b      	lsls	r3, r3, #5
 800567e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4413      	add	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	b2da      	uxtb	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_PCD_EP_ClrStall+0x76>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e00e      	b.n	80056cc <HAL_PCD_EP_ClrStall+0x94>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68f9      	ldr	r1, [r7, #12]
 80056bc:	4618      	mov	r0, r3
 80056be:	f004 fd8d 	bl	800a1dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08e      	sub	sp, #56	; 0x38
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80056dc:	e29c      	b.n	8005c18 <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80056e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80056f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f040 8152 	bne.w	80059a2 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80056fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b00      	cmp	r3, #0
 8005706:	d150      	bne.n	80057aa <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005718:	81fb      	strh	r3, [r7, #14]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	89fb      	ldrh	r3, [r7, #14]
 8005720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005728:	b29b      	uxth	r3, r3
 800572a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3328      	adds	r3, #40	; 0x28
 8005730:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	4413      	add	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6812      	ldr	r2, [r2, #0]
 800574a:	4413      	add	r3, r2
 800574c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	695a      	ldr	r2, [r3, #20]
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	441a      	add	r2, r3
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005768:	2100      	movs	r1, #0
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f00d fc04 	bl	8012f78 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 824d 	beq.w	8005c18 <PCD_EP_ISR_Handler+0x544>
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f040 8248 	bne.w	8005c18 <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005794:	b2da      	uxtb	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	b292      	uxth	r2, r2
 800579c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057a8:	e236      	b.n	8005c18 <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80057ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80057bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d032      	beq.n	800582a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4413      	add	r3, r2
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	4413      	add	r3, r2
 80057de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f004 fe22 	bl	800a448 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b29a      	uxth	r2, r3
 800580c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005810:	4013      	ands	r3, r2
 8005812:	823b      	strh	r3, [r7, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	8a3a      	ldrh	r2, [r7, #16]
 800581a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800581e:	b292      	uxth	r2, r2
 8005820:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f00d fb7e 	bl	8012f24 <HAL_PCD_SetupStageCallback>
 8005828:	e1f6      	b.n	8005c18 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800582a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800582e:	2b00      	cmp	r3, #0
 8005830:	f280 81f2 	bge.w	8005c18 <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29a      	uxth	r2, r3
 800583c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005840:	4013      	ands	r3, r2
 8005842:	83fb      	strh	r3, [r7, #30]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	8bfa      	ldrh	r2, [r7, #30]
 800584a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800584e:	b292      	uxth	r2, r2
 8005850:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585a:	b29b      	uxth	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	4413      	add	r3, r2
 800586c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d019      	beq.n	80058b6 <PCD_EP_ISR_Handler+0x1e2>
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d015      	beq.n	80058b6 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	6959      	ldr	r1, [r3, #20]
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800589a:	b29b      	uxth	r3, r3
 800589c:	f004 fdd4 	bl	800a448 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	695a      	ldr	r2, [r3, #20]
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	441a      	add	r2, r3
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80058ae:	2100      	movs	r1, #0
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f00d fb49 	bl	8012f48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	4413      	add	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d112      	bne.n	8005904 <PCD_EP_ISR_Handler+0x230>
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e02f      	b.n	8005964 <PCD_EP_ISR_Handler+0x290>
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b3e      	cmp	r3, #62	; 0x3e
 800590a:	d813      	bhi.n	8005934 <PCD_EP_ISR_Handler+0x260>
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	633b      	str	r3, [r7, #48]	; 0x30
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <PCD_EP_ISR_Handler+0x252>
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	3301      	adds	r3, #1
 8005924:	633b      	str	r3, [r7, #48]	; 0x30
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	b29b      	uxth	r3, r3
 800592a:	029b      	lsls	r3, r3, #10
 800592c:	b29a      	uxth	r2, r3
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	e017      	b.n	8005964 <PCD_EP_ISR_Handler+0x290>
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	633b      	str	r3, [r7, #48]	; 0x30
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <PCD_EP_ISR_Handler+0x27a>
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	3b01      	subs	r3, #1
 800594c:	633b      	str	r3, [r7, #48]	; 0x30
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	b29b      	uxth	r3, r3
 8005952:	029b      	lsls	r3, r3, #10
 8005954:	b29b      	uxth	r3, r3
 8005956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800595a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800595e:	b29a      	uxth	r2, r3
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	827b      	strh	r3, [r7, #18]
 8005976:	8a7b      	ldrh	r3, [r7, #18]
 8005978:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800597c:	827b      	strh	r3, [r7, #18]
 800597e:	8a7b      	ldrh	r3, [r7, #18]
 8005980:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005984:	827b      	strh	r3, [r7, #18]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	8a7b      	ldrh	r3, [r7, #18]
 800598c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599c:	b29b      	uxth	r3, r3
 800599e:	8013      	strh	r3, [r2, #0]
 80059a0:	e13a      	b.n	8005c18 <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80059b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f280 80d6 	bge.w	8005b6a <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80059d4:	4013      	ands	r3, r2
 80059d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80059e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059ec:	b292      	uxth	r2, r2
 80059ee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80059f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059f4:	015b      	lsls	r3, r3, #5
 80059f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	4413      	add	r3, r2
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	7b1b      	ldrb	r3, [r3, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d11f      	bne.n	8005a48 <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	4413      	add	r3, r2
 8005a22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a2c:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 8005a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d075      	beq.n	8005b20 <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	6959      	ldr	r1, [r3, #20]
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	88da      	ldrh	r2, [r3, #6]
 8005a40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a42:	f004 fd01 	bl	800a448 <USB_ReadPMA>
 8005a46:	e06b      	b.n	8005b20 <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a62:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	441a      	add	r2, r3
 8005a72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01f      	beq.n	8005ae2 <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	461a      	mov	r2, r3
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	4413      	add	r3, r2
 8005abc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ac6:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8005ac8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d028      	beq.n	8005b20 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	6959      	ldr	r1, [r3, #20]
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	891a      	ldrh	r2, [r3, #8]
 8005ada:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005adc:	f004 fcb4 	bl	800a448 <USB_ReadPMA>
 8005ae0:	e01e      	b.n	8005b20 <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4413      	add	r3, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	4413      	add	r3, r2
 8005afc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b06:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8005b08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	6959      	ldr	r1, [r3, #20]
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	895a      	ldrh	r2, [r3, #10]
 8005b1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b1c:	f004 fc94 	bl	800a448 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b26:	441a      	add	r2, r3
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	695a      	ldr	r2, [r3, #20]
 8005b30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b32:	441a      	add	r2, r3
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <PCD_EP_ISR_Handler+0x476>
 8005b40:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d206      	bcs.n	8005b58 <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f00d f9f9 	bl	8012f48 <HAL_PCD_DataOutStageCallback>
 8005b56:	e008      	b.n	8005b6a <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	7819      	ldrb	r1, [r3, #0]
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	695a      	ldr	r2, [r3, #20]
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff fc85 	bl	8005474 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005b6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d051      	beq.n	8005c18 <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 8005b74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005b78:	015b      	lsls	r3, r3, #5
 8005b7a:	3328      	adds	r3, #40	; 0x28
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	4413      	add	r3, r2
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9c:	843b      	strh	r3, [r7, #32]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	441a      	add	r2, r3
 8005bac:	8c3b      	ldrh	r3, [r7, #32]
 8005bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4413      	add	r3, r2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	695a      	ldr	r2, [r3, #20]
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	441a      	add	r2, r3
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f00d f9ba 	bl	8012f78 <HAL_PCD_DataInStageCallback>
 8005c04:	e008      	b.n	8005c18 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	7819      	ldrb	r1, [r3, #0]
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	695a      	ldr	r2, [r3, #20]
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff fc7d 	bl	8005512 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	b21b      	sxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f6ff ad5a 	blt.w	80056de <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3738      	adds	r7, #56	; 0x38
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	607b      	str	r3, [r7, #4]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	817b      	strh	r3, [r7, #10]
 8005c42:	4613      	mov	r3, r2
 8005c44:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c46:	897b      	ldrh	r3, [r7, #10]
 8005c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d008      	beq.n	8005c64 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c52:	897b      	ldrh	r3, [r7, #10]
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	015b      	lsls	r3, r3, #5
 8005c5a:	3328      	adds	r3, #40	; 0x28
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	e006      	b.n	8005c72 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c64:	897b      	ldrh	r3, [r7, #10]
 8005c66:	015b      	lsls	r3, r3, #5
 8005c68:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005c72:	893b      	ldrh	r3, [r7, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d107      	bne.n	8005c88 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	80da      	strh	r2, [r3, #6]
 8005c86:	e00b      	b.n	8005ca0 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0c1b      	lsrs	r3, r3, #16
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f043 0302 	orr.w	r3, r3, #2
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a04      	ldr	r2, [pc, #16]	; (8005d38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d2a:	6013      	str	r3, [r2, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	58000400 	.word	0x58000400

08005d3c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d40:	4b04      	ldr	r3, [pc, #16]	; (8005d54 <HAL_PWREx_GetVoltageRange+0x18>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	58000400 	.word	0x58000400

08005d58 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005d5c:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a04      	ldr	r2, [pc, #16]	; (8005d74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d66:	6053      	str	r3, [r2, #4]
}
 8005d68:	bf00      	nop
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	58000400 	.word	0x58000400

08005d78 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d8a:	d101      	bne.n	8005d90 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <LL_RCC_HSE_Enable>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dae:	6013      	str	r3, [r2, #0]
}
 8005db0:	bf00      	nop
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <LL_RCC_HSE_Disable>:
{
 8005dba:	b480      	push	{r7}
 8005dbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dcc:	6013      	str	r3, [r2, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <LL_RCC_HSE_IsReady>:
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dea:	d101      	bne.n	8005df0 <LL_RCC_HSE_IsReady+0x18>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <LL_RCC_HSE_IsReady+0x1a>
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <LL_RCC_HSI_Enable>:
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0e:	6013      	str	r3, [r2, #0]
}
 8005e10:	bf00      	nop
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <LL_RCC_HSI_Disable>:
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e2c:	6013      	str	r3, [r2, #0]
}
 8005e2e:	bf00      	nop
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <LL_RCC_HSI_IsReady>:
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4a:	d101      	bne.n	8005e50 <LL_RCC_HSI_IsReady+0x18>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <LL_RCC_HSI_IsReady+0x1a>
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <LL_RCC_HSI_SetCalibTrimming>:
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	061b      	lsls	r3, r3, #24
 8005e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e76:	4313      	orrs	r3, r2
 8005e78:	604b      	str	r3, [r1, #4]
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <LL_RCC_HSI48_Enable>:
{
 8005e86:	b480      	push	{r7}
 8005e88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e96:	f043 0301 	orr.w	r3, r3, #1
 8005e9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005e9e:	bf00      	nop
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <LL_RCC_HSI48_Disable>:
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eb8:	f023 0301 	bic.w	r3, r3, #1
 8005ebc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005ec0:	bf00      	nop
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <LL_RCC_HSI48_IsReady>:
{
 8005eca:	b480      	push	{r7}
 8005ecc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d101      	bne.n	8005ee2 <LL_RCC_HSI48_IsReady+0x18>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <LL_RCC_HSI48_IsReady+0x1a>
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <LL_RCC_LSE_Enable>:
{
 8005eee:	b480      	push	{r7}
 8005ef0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005efe:	f043 0301 	orr.w	r3, r3, #1
 8005f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f06:	bf00      	nop
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <LL_RCC_LSE_Disable>:
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f28:	bf00      	nop
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <LL_RCC_LSE_EnableBypass>:
{
 8005f32:	b480      	push	{r7}
 8005f34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f42:	f043 0304 	orr.w	r3, r3, #4
 8005f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f4a:	bf00      	nop
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <LL_RCC_LSE_DisableBypass>:
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f64:	f023 0304 	bic.w	r3, r3, #4
 8005f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f6c:	bf00      	nop
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <LL_RCC_LSE_IsReady>:
{
 8005f76:	b480      	push	{r7}
 8005f78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d101      	bne.n	8005f8e <LL_RCC_LSE_IsReady+0x18>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <LL_RCC_LSE_IsReady+0x1a>
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <LL_RCC_LSI1_Enable>:
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005fb2:	bf00      	nop
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <LL_RCC_LSI1_Disable>:
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005fd4:	bf00      	nop
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <LL_RCC_LSI1_IsReady>:
{
 8005fde:	b480      	push	{r7}
 8005fe0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d101      	bne.n	8005ff6 <LL_RCC_LSI1_IsReady+0x18>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <LL_RCC_LSI1_IsReady+0x1a>
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <LL_RCC_LSI2_Enable>:
{
 8006002:	b480      	push	{r7}
 8006004:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800600e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006012:	f043 0304 	orr.w	r3, r3, #4
 8006016:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800601a:	bf00      	nop
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <LL_RCC_LSI2_Disable>:
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800602c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006034:	f023 0304 	bic.w	r3, r3, #4
 8006038:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800603c:	bf00      	nop
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <LL_RCC_LSI2_IsReady>:
{
 8006046:	b480      	push	{r7}
 8006048:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800604a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b08      	cmp	r3, #8
 8006058:	d101      	bne.n	800605e <LL_RCC_LSI2_IsReady+0x18>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <LL_RCC_LSI2_IsReady+0x1a>
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <LL_RCC_LSI2_SetTrimming>:
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800607a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <LL_RCC_MSI_Enable>:
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800609c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060a6:	f043 0301 	orr.w	r3, r3, #1
 80060aa:	6013      	str	r3, [r2, #0]
}
 80060ac:	bf00      	nop
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <LL_RCC_MSI_Disable>:
{
 80060b6:	b480      	push	{r7}
 80060b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80060ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	6013      	str	r3, [r2, #0]
}
 80060ca:	bf00      	nop
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <LL_RCC_MSI_IsReady>:
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80060d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d101      	bne.n	80060ea <LL_RCC_MSI_IsReady+0x16>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <LL_RCC_MSI_IsReady+0x18>
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <LL_RCC_MSI_SetRange>:
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80060fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4313      	orrs	r3, r2
 8006110:	600b      	str	r3, [r1, #0]
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <LL_RCC_MSI_GetRange>:
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800612e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2bb0      	cmp	r3, #176	; 0xb0
 8006134:	d901      	bls.n	800613a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006136:	23b0      	movs	r3, #176	; 0xb0
 8006138:	607b      	str	r3, [r7, #4]
  return msiRange;
 800613a:	687b      	ldr	r3, [r7, #4]
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006162:	4313      	orrs	r3, r2
 8006164:	604b      	str	r3, [r1, #4]
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <LL_RCC_SetSysClkSource>:
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800617a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f023 0203 	bic.w	r2, r3, #3
 8006184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4313      	orrs	r3, r2
 800618c:	608b      	str	r3, [r1, #8]
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <LL_RCC_GetSysClkSource>:
{
 800619a:	b480      	push	{r7}
 800619c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800619e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 030c 	and.w	r3, r3, #12
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <LL_RCC_SetAHBPrescaler>:
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80061ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <LL_C2_RCC_SetAHBPrescaler>:
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80061e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80061ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <LL_RCC_SetAHB4Prescaler>:
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800620e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006212:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006216:	f023 020f 	bic.w	r2, r3, #15
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	091b      	lsrs	r3, r3, #4
 800621e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <LL_RCC_SetAPB1Prescaler>:
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800623c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4313      	orrs	r3, r2
 800624e:	608b      	str	r3, [r1, #8]
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <LL_RCC_SetAPB2Prescaler>:
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800626e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4313      	orrs	r3, r2
 8006276:	608b      	str	r3, [r1, #8]
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <LL_RCC_GetAHBPrescaler>:
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006292:	4618      	mov	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <LL_C2_RCC_GetAHBPrescaler>:
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80062a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80062a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <LL_RCC_GetAHB4Prescaler>:
{
 80062b6:	b480      	push	{r7}
 80062b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80062ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <LL_RCC_GetAPB1Prescaler>:
{
 80062d2:	b480      	push	{r7}
 80062d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80062d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <LL_RCC_GetAPB2Prescaler>:
{
 80062ea:	b480      	push	{r7}
 80062ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80062ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <LL_RCC_PLL_Enable>:
{
 8006302:	b480      	push	{r7}
 8006304:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006310:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006314:	6013      	str	r3, [r2, #0]
}
 8006316:	bf00      	nop
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <LL_RCC_PLL_Disable>:
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800632e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006332:	6013      	str	r3, [r2, #0]
}
 8006334:	bf00      	nop
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <LL_RCC_PLL_IsReady>:
{
 800633e:	b480      	push	{r7}
 8006340:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006350:	d101      	bne.n	8006356 <LL_RCC_PLL_IsReady+0x18>
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <LL_RCC_PLL_IsReady+0x1a>
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <LL_RCC_PLL_GetN>:
{
 8006362:	b480      	push	{r7}
 8006364:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	0a1b      	lsrs	r3, r3, #8
 800636e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006372:	4618      	mov	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <LL_RCC_PLL_GetR>:
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800638a:	4618      	mov	r0, r3
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <LL_RCC_PLL_GetDivider>:
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <LL_RCC_PLL_GetMainSource>:
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80063b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f003 0303 	and.w	r3, r3, #3
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <LL_RCC_IsActiveFlag_HPRE>:
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80063c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d6:	d101      	bne.n	80063dc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80063ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80063f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063fc:	d101      	bne.n	8006402 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800640e:	b480      	push	{r7}
 8006410:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006416:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800641a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800641e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006422:	d101      	bne.n	8006428 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006446:	d101      	bne.n	800644c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800645c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006466:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800646a:	d101      	bne.n	8006470 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	b08d      	sub	sp, #52	; 0x34
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e37e      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 8092 	beq.w	80065c0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800649c:	f7ff fe7d 	bl	800619a <LL_RCC_GetSysClkSource>
 80064a0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064a2:	f7ff ff83 	bl	80063ac <LL_RCC_PLL_GetMainSource>
 80064a6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <HAL_RCC_OscConfig+0x3e>
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	2b0c      	cmp	r3, #12
 80064b2:	d14c      	bne.n	800654e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d149      	bne.n	800654e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064ba:	f7ff fe0b 	bl	80060d4 <LL_RCC_MSI_IsReady>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_RCC_OscConfig+0x54>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e35d      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80064d4:	f7ff fe23 	bl	800611e <LL_RCC_MSI_GetRange>
 80064d8:	4603      	mov	r3, r0
 80064da:	429c      	cmp	r4, r3
 80064dc:	d914      	bls.n	8006508 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fd5c 	bl	8006fa0 <RCC_SetFlashLatencyFromMSIRange>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e34c      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fdfd 	bl	80060f6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff fe21 	bl	8006148 <LL_RCC_MSI_SetCalibTrimming>
 8006506:	e013      	b.n	8006530 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fdf2 	bl	80060f6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff fe16 	bl	8006148 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fd3d 	bl	8006fa0 <RCC_SetFlashLatencyFromMSIRange>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e32d      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006530:	f000 fcda 	bl	8006ee8 <HAL_RCC_GetHCLKFreq>
 8006534:	4602      	mov	r2, r0
 8006536:	4bb3      	ldr	r3, [pc, #716]	; (8006804 <HAL_RCC_OscConfig+0x388>)
 8006538:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800653a:	4bb3      	ldr	r3, [pc, #716]	; (8006808 <HAL_RCC_OscConfig+0x38c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f7fc f960 	bl	8002804 <HAL_InitTick>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d039      	beq.n	80065be <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e31e      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d01e      	beq.n	8006594 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006556:	f7ff fd9f 	bl	8006098 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800655a:	f7fc fc25 	bl	8002da8 <HAL_GetTick>
 800655e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006560:	e008      	b.n	8006574 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006562:	f7fc fc21 	bl	8002da8 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e30b      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006574:	f7ff fdae 	bl	80060d4 <LL_RCC_MSI_IsReady>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0f1      	beq.n	8006562 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fdb7 	bl	80060f6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff fddb 	bl	8006148 <LL_RCC_MSI_SetCalibTrimming>
 8006592:	e015      	b.n	80065c0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006594:	f7ff fd8f 	bl	80060b6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006598:	f7fc fc06 	bl	8002da8 <HAL_GetTick>
 800659c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065a0:	f7fc fc02 	bl	8002da8 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e2ec      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80065b2:	f7ff fd8f 	bl	80060d4 <LL_RCC_MSI_IsReady>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1f1      	bne.n	80065a0 <HAL_RCC_OscConfig+0x124>
 80065bc:	e000      	b.n	80065c0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d04e      	beq.n	800666a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065cc:	f7ff fde5 	bl	800619a <LL_RCC_GetSysClkSource>
 80065d0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065d2:	f7ff feeb 	bl	80063ac <LL_RCC_PLL_GetMainSource>
 80065d6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d005      	beq.n	80065ea <HAL_RCC_OscConfig+0x16e>
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	2b0c      	cmp	r3, #12
 80065e2:	d10d      	bne.n	8006600 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d10a      	bne.n	8006600 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ea:	f7ff fbf5 	bl	8005dd8 <LL_RCC_HSE_IsReady>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d039      	beq.n	8006668 <HAL_RCC_OscConfig+0x1ec>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d135      	bne.n	8006668 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e2c5      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006608:	d102      	bne.n	8006610 <HAL_RCC_OscConfig+0x194>
 800660a:	f7ff fbc7 	bl	8005d9c <LL_RCC_HSE_Enable>
 800660e:	e001      	b.n	8006614 <HAL_RCC_OscConfig+0x198>
 8006610:	f7ff fbd3 	bl	8005dba <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d012      	beq.n	8006642 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661c:	f7fc fbc4 	bl	8002da8 <HAL_GetTick>
 8006620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006624:	f7fc fbc0 	bl	8002da8 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b64      	cmp	r3, #100	; 0x64
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e2aa      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006636:	f7ff fbcf 	bl	8005dd8 <LL_RCC_HSE_IsReady>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0f1      	beq.n	8006624 <HAL_RCC_OscConfig+0x1a8>
 8006640:	e013      	b.n	800666a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006642:	f7fc fbb1 	bl	8002da8 <HAL_GetTick>
 8006646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006648:	e008      	b.n	800665c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800664a:	f7fc fbad 	bl	8002da8 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b64      	cmp	r3, #100	; 0x64
 8006656:	d901      	bls.n	800665c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e297      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800665c:	f7ff fbbc 	bl	8005dd8 <LL_RCC_HSE_IsReady>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1f1      	bne.n	800664a <HAL_RCC_OscConfig+0x1ce>
 8006666:	e000      	b.n	800666a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d051      	beq.n	800671a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006676:	f7ff fd90 	bl	800619a <LL_RCC_GetSysClkSource>
 800667a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800667c:	f7ff fe96 	bl	80063ac <LL_RCC_PLL_GetMainSource>
 8006680:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	2b04      	cmp	r3, #4
 8006686:	d005      	beq.n	8006694 <HAL_RCC_OscConfig+0x218>
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	2b0c      	cmp	r3, #12
 800668c:	d113      	bne.n	80066b6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b02      	cmp	r3, #2
 8006692:	d110      	bne.n	80066b6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006694:	f7ff fbd0 	bl	8005e38 <LL_RCC_HSI_IsReady>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <HAL_RCC_OscConfig+0x22e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e270      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fbd4 	bl	8005e5c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066b4:	e031      	b.n	800671a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d019      	beq.n	80066f2 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066be:	f7ff fb9d 	bl	8005dfc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c2:	f7fc fb71 	bl	8002da8 <HAL_GetTick>
 80066c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80066c8:	e008      	b.n	80066dc <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ca:	f7fc fb6d 	bl	8002da8 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e257      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80066dc:	f7ff fbac 	bl	8005e38 <LL_RCC_HSI_IsReady>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0f1      	beq.n	80066ca <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff fbb6 	bl	8005e5c <LL_RCC_HSI_SetCalibTrimming>
 80066f0:	e013      	b.n	800671a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066f2:	f7ff fb92 	bl	8005e1a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f6:	f7fc fb57 	bl	8002da8 <HAL_GetTick>
 80066fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80066fc:	e008      	b.n	8006710 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066fe:	f7fc fb53 	bl	8002da8 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e23d      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006710:	f7ff fb92 	bl	8005e38 <LL_RCC_HSI_IsReady>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1f1      	bne.n	80066fe <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 80a3 	beq.w	800687a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d076      	beq.n	800682a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0310 	and.w	r3, r3, #16
 8006744:	2b00      	cmp	r3, #0
 8006746:	d046      	beq.n	80067d6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006748:	f7ff fc49 	bl	8005fde <LL_RCC_LSI1_IsReady>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d113      	bne.n	800677a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006752:	f7ff fc22 	bl	8005f9a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006756:	f7fc fb27 	bl	8002da8 <HAL_GetTick>
 800675a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800675c:	e008      	b.n	8006770 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800675e:	f7fc fb23 	bl	8002da8 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d901      	bls.n	8006770 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e20d      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006770:	f7ff fc35 	bl	8005fde <LL_RCC_LSI1_IsReady>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0f1      	beq.n	800675e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800677a:	f7ff fc42 	bl	8006002 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677e:	f7fc fb13 	bl	8002da8 <HAL_GetTick>
 8006782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006786:	f7fc fb0f 	bl	8002da8 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b03      	cmp	r3, #3
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e1f9      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006798:	f7ff fc55 	bl	8006046 <LL_RCC_LSI2_IsReady>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f1      	beq.n	8006786 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fc5f 	bl	800606a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80067ac:	f7ff fc06 	bl	8005fbc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b0:	f7fc fafa 	bl	8002da8 <HAL_GetTick>
 80067b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80067b6:	e008      	b.n	80067ca <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80067b8:	f7fc faf6 	bl	8002da8 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e1e0      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80067ca:	f7ff fc08 	bl	8005fde <LL_RCC_LSI1_IsReady>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1f1      	bne.n	80067b8 <HAL_RCC_OscConfig+0x33c>
 80067d4:	e051      	b.n	800687a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80067d6:	f7ff fbe0 	bl	8005f9a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067da:	f7fc fae5 	bl	8002da8 <HAL_GetTick>
 80067de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80067e0:	e008      	b.n	80067f4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80067e2:	f7fc fae1 	bl	8002da8 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d901      	bls.n	80067f4 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e1cb      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80067f4:	f7ff fbf3 	bl	8005fde <LL_RCC_LSI1_IsReady>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f1      	beq.n	80067e2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80067fe:	f7ff fc11 	bl	8006024 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006802:	e00c      	b.n	800681e <HAL_RCC_OscConfig+0x3a2>
 8006804:	2000001c 	.word	0x2000001c
 8006808:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800680c:	f7fc facc 	bl	8002da8 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b03      	cmp	r3, #3
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e1b6      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800681e:	f7ff fc12 	bl	8006046 <LL_RCC_LSI2_IsReady>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1f1      	bne.n	800680c <HAL_RCC_OscConfig+0x390>
 8006828:	e027      	b.n	800687a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800682a:	f7ff fbfb 	bl	8006024 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682e:	f7fc fabb 	bl	8002da8 <HAL_GetTick>
 8006832:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006834:	e008      	b.n	8006848 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006836:	f7fc fab7 	bl	8002da8 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b03      	cmp	r3, #3
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e1a1      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006848:	f7ff fbfd 	bl	8006046 <LL_RCC_LSI2_IsReady>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f1      	bne.n	8006836 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006852:	f7ff fbb3 	bl	8005fbc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006856:	f7fc faa7 	bl	8002da8 <HAL_GetTick>
 800685a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800685e:	f7fc faa3 	bl	8002da8 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e18d      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006870:	f7ff fbb5 	bl	8005fde <LL_RCC_LSI1_IsReady>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f1      	bne.n	800685e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	d05b      	beq.n	800693e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006886:	4bb5      	ldr	r3, [pc, #724]	; (8006b5c <HAL_RCC_OscConfig+0x6e0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688e:	2b00      	cmp	r3, #0
 8006890:	d114      	bne.n	80068bc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006892:	f7ff fa43 	bl	8005d1c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006896:	f7fc fa87 	bl	8002da8 <HAL_GetTick>
 800689a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800689e:	f7fc fa83 	bl	8002da8 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e16d      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068b0:	4baa      	ldr	r3, [pc, #680]	; (8006b5c <HAL_RCC_OscConfig+0x6e0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0f0      	beq.n	800689e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d102      	bne.n	80068ca <HAL_RCC_OscConfig+0x44e>
 80068c4:	f7ff fb13 	bl	8005eee <LL_RCC_LSE_Enable>
 80068c8:	e00c      	b.n	80068e4 <HAL_RCC_OscConfig+0x468>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	2b05      	cmp	r3, #5
 80068d0:	d104      	bne.n	80068dc <HAL_RCC_OscConfig+0x460>
 80068d2:	f7ff fb2e 	bl	8005f32 <LL_RCC_LSE_EnableBypass>
 80068d6:	f7ff fb0a 	bl	8005eee <LL_RCC_LSE_Enable>
 80068da:	e003      	b.n	80068e4 <HAL_RCC_OscConfig+0x468>
 80068dc:	f7ff fb18 	bl	8005f10 <LL_RCC_LSE_Disable>
 80068e0:	f7ff fb38 	bl	8005f54 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d014      	beq.n	8006916 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ec:	f7fc fa5c 	bl	8002da8 <HAL_GetTick>
 80068f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80068f2:	e00a      	b.n	800690a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f4:	f7fc fa58 	bl	8002da8 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006902:	4293      	cmp	r3, r2
 8006904:	d901      	bls.n	800690a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e140      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800690a:	f7ff fb34 	bl	8005f76 <LL_RCC_LSE_IsReady>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0ef      	beq.n	80068f4 <HAL_RCC_OscConfig+0x478>
 8006914:	e013      	b.n	800693e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006916:	f7fc fa47 	bl	8002da8 <HAL_GetTick>
 800691a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800691c:	e00a      	b.n	8006934 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800691e:	f7fc fa43 	bl	8002da8 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	f241 3288 	movw	r2, #5000	; 0x1388
 800692c:	4293      	cmp	r3, r2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e12b      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006934:	f7ff fb1f 	bl	8005f76 <LL_RCC_LSE_IsReady>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1ef      	bne.n	800691e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d02c      	beq.n	80069a4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d014      	beq.n	800697c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006952:	f7ff fa98 	bl	8005e86 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006956:	f7fc fa27 	bl	8002da8 <HAL_GetTick>
 800695a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800695e:	f7fc fa23 	bl	8002da8 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e10d      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006970:	f7ff faab 	bl	8005eca <LL_RCC_HSI48_IsReady>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f1      	beq.n	800695e <HAL_RCC_OscConfig+0x4e2>
 800697a:	e013      	b.n	80069a4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800697c:	f7ff fa94 	bl	8005ea8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006980:	f7fc fa12 	bl	8002da8 <HAL_GetTick>
 8006984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006986:	e008      	b.n	800699a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006988:	f7fc fa0e 	bl	8002da8 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e0f8      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800699a:	f7ff fa96 	bl	8005eca <LL_RCC_HSI48_IsReady>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f1      	bne.n	8006988 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 80ee 	beq.w	8006b8a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069ae:	f7ff fbf4 	bl	800619a <LL_RCC_GetSysClkSource>
 80069b2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80069b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	f040 80af 	bne.w	8006b24 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f003 0203 	and.w	r2, r3, #3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d123      	bne.n	8006a1c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069de:	429a      	cmp	r2, r3
 80069e0:	d11c      	bne.n	8006a1c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	0a1b      	lsrs	r3, r3, #8
 80069e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d114      	bne.n	8006a1c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d10d      	bne.n	8006a1c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d106      	bne.n	8006a1c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d05d      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	2b0c      	cmp	r3, #12
 8006a20:	d058      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e0ab      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a34:	f7ff fc74 	bl	8006320 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a38:	f7fc f9b6 	bl	8002da8 <HAL_GetTick>
 8006a3c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a40:	f7fc f9b2 	bl	8002da8 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e09c      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1ef      	bne.n	8006a40 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	4b3e      	ldr	r3, [pc, #248]	; (8006b60 <HAL_RCC_OscConfig+0x6e4>)
 8006a68:	4013      	ands	r3, r2
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a72:	4311      	orrs	r1, r2
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a78:	0212      	lsls	r2, r2, #8
 8006a7a:	4311      	orrs	r1, r2
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a80:	4311      	orrs	r1, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a86:	4311      	orrs	r1, r2
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006a96:	f7ff fc34 	bl	8006302 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006aaa:	f7fc f97d 	bl	8002da8 <HAL_GetTick>
 8006aae:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab2:	f7fc f979 	bl	8002da8 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e063      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0ef      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ad2:	e05a      	b.n	8006b8a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e059      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d151      	bne.n	8006b8a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006ae6:	f7ff fc0c 	bl	8006302 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006afa:	f7fc f955 	bl	8002da8 <HAL_GetTick>
 8006afe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b02:	f7fc f951 	bl	8002da8 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e03b      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0ef      	beq.n	8006b02 <HAL_RCC_OscConfig+0x686>
 8006b22:	e032      	b.n	8006b8a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	2b0c      	cmp	r3, #12
 8006b28:	d02d      	beq.n	8006b86 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b2a:	f7ff fbf9 	bl	8006320 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b38:	f023 0303 	bic.w	r3, r3, #3
 8006b3c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8006b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b48:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b52:	f7fc f929 	bl	8002da8 <HAL_GetTick>
 8006b56:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b58:	e00d      	b.n	8006b76 <HAL_RCC_OscConfig+0x6fa>
 8006b5a:	bf00      	nop
 8006b5c:	58000400 	.word	0x58000400
 8006b60:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b64:	f7fc f920 	bl	8002da8 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e00a      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1ef      	bne.n	8006b64 <HAL_RCC_OscConfig+0x6e8>
 8006b84:	e001      	b.n	8006b8a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3734      	adds	r7, #52	; 0x34
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd90      	pop	{r4, r7, pc}

08006b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e12d      	b.n	8006e04 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ba8:	4b98      	ldr	r3, [pc, #608]	; (8006e0c <HAL_RCC_ClockConfig+0x278>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d91b      	bls.n	8006bee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb6:	4b95      	ldr	r3, [pc, #596]	; (8006e0c <HAL_RCC_ClockConfig+0x278>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f023 0207 	bic.w	r2, r3, #7
 8006bbe:	4993      	ldr	r1, [pc, #588]	; (8006e0c <HAL_RCC_ClockConfig+0x278>)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc6:	f7fc f8ef 	bl	8002da8 <HAL_GetTick>
 8006bca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bcc:	e008      	b.n	8006be0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006bce:	f7fc f8eb 	bl	8002da8 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e111      	b.n	8006e04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be0:	4b8a      	ldr	r3, [pc, #552]	; (8006e0c <HAL_RCC_ClockConfig+0x278>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d1ef      	bne.n	8006bce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff fad7 	bl	80061b2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c04:	f7fc f8d0 	bl	8002da8 <HAL_GetTick>
 8006c08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c0c:	f7fc f8cc 	bl	8002da8 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e0f2      	b.n	8006e04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006c1e:	f7ff fbd1 	bl	80063c4 <LL_RCC_IsActiveFlag_HPRE>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0f1      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d016      	beq.n	8006c62 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff face 	bl	80061da <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c3e:	f7fc f8b3 	bl	8002da8 <HAL_GetTick>
 8006c42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006c44:	e008      	b.n	8006c58 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c46:	f7fc f8af 	bl	8002da8 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e0d5      	b.n	8006e04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006c58:	f7ff fbc6 	bl	80063e8 <LL_RCC_IsActiveFlag_C2HPRE>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f1      	beq.n	8006c46 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d016      	beq.n	8006c9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7ff fac7 	bl	8006206 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006c78:	f7fc f896 	bl	8002da8 <HAL_GetTick>
 8006c7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c80:	f7fc f892 	bl	8002da8 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e0b8      	b.n	8006e04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006c92:	f7ff fbbc 	bl	800640e <LL_RCC_IsActiveFlag_SHDHPRE>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0f1      	beq.n	8006c80 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d016      	beq.n	8006cd6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff fac1 	bl	8006234 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cb2:	f7fc f879 	bl	8002da8 <HAL_GetTick>
 8006cb6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006cb8:	e008      	b.n	8006ccc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cba:	f7fc f875 	bl	8002da8 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e09b      	b.n	8006e04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006ccc:	f7ff fbb2 	bl	8006434 <LL_RCC_IsActiveFlag_PPRE1>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0f1      	beq.n	8006cba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0308 	and.w	r3, r3, #8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d017      	beq.n	8006d12 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff fab7 	bl	800625c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006cee:	f7fc f85b 	bl	8002da8 <HAL_GetTick>
 8006cf2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cf6:	f7fc f857 	bl	8002da8 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e07d      	b.n	8006e04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006d08:	f7ff fba6 	bl	8006458 <LL_RCC_IsActiveFlag_PPRE2>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0f1      	beq.n	8006cf6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d043      	beq.n	8006da6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d106      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006d26:	f7ff f857 	bl	8005dd8 <LL_RCC_HSE_IsReady>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d11e      	bne.n	8006d6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e067      	b.n	8006e04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d106      	bne.n	8006d4a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006d3c:	f7ff faff 	bl	800633e <LL_RCC_PLL_IsReady>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d113      	bne.n	8006d6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e05c      	b.n	8006e04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d106      	bne.n	8006d60 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006d52:	f7ff f9bf 	bl	80060d4 <LL_RCC_MSI_IsReady>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d108      	bne.n	8006d6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e051      	b.n	8006e04 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006d60:	f7ff f86a 	bl	8005e38 <LL_RCC_HSI_IsReady>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e04a      	b.n	8006e04 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff f9fd 	bl	8006172 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d78:	f7fc f816 	bl	8002da8 <HAL_GetTick>
 8006d7c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d7e:	e00a      	b.n	8006d96 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d80:	f7fc f812 	bl	8002da8 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d901      	bls.n	8006d96 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e036      	b.n	8006e04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d96:	f7ff fa00 	bl	800619a <LL_RCC_GetSysClkSource>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d1ec      	bne.n	8006d80 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006da6:	4b19      	ldr	r3, [pc, #100]	; (8006e0c <HAL_RCC_ClockConfig+0x278>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d21b      	bcs.n	8006dec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db4:	4b15      	ldr	r3, [pc, #84]	; (8006e0c <HAL_RCC_ClockConfig+0x278>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f023 0207 	bic.w	r2, r3, #7
 8006dbc:	4913      	ldr	r1, [pc, #76]	; (8006e0c <HAL_RCC_ClockConfig+0x278>)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc4:	f7fb fff0 	bl	8002da8 <HAL_GetTick>
 8006dc8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006dcc:	f7fb ffec 	bl	8002da8 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e012      	b.n	8006e04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dde:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <HAL_RCC_ClockConfig+0x278>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d1ef      	bne.n	8006dcc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006dec:	f000 f87c 	bl	8006ee8 <HAL_RCC_GetHCLKFreq>
 8006df0:	4602      	mov	r2, r0
 8006df2:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <HAL_RCC_ClockConfig+0x27c>)
 8006df4:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006df6:	f7fb ffe3 	bl	8002dc0 <HAL_GetTickPrio>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fb fd01 	bl	8002804 <HAL_InitTick>
 8006e02:	4603      	mov	r3, r0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	58004000 	.word	0x58004000
 8006e10:	2000001c 	.word	0x2000001c

08006e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e14:	b590      	push	{r4, r7, lr}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e1a:	f7ff f9be 	bl	800619a <LL_RCC_GetSysClkSource>
 8006e1e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10a      	bne.n	8006e3c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006e26:	f7ff f97a 	bl	800611e <LL_RCC_MSI_GetRange>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	091b      	lsrs	r3, r3, #4
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	4a2a      	ldr	r2, [pc, #168]	; (8006edc <HAL_RCC_GetSysClockFreq+0xc8>)
 8006e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	e04a      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d102      	bne.n	8006e48 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e42:	4b27      	ldr	r3, [pc, #156]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e044      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b08      	cmp	r3, #8
 8006e4c:	d10a      	bne.n	8006e64 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006e4e:	f7fe ff93 	bl	8005d78 <LL_RCC_HSE_IsEnabledDiv2>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d102      	bne.n	8006e5e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006e58:	4b21      	ldr	r3, [pc, #132]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	e039      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006e5e:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	e036      	b.n	8006ed2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006e64:	f7ff faa2 	bl	80063ac <LL_RCC_PLL_GetMainSource>
 8006e68:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d002      	beq.n	8006e76 <HAL_RCC_GetSysClockFreq+0x62>
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d003      	beq.n	8006e7c <HAL_RCC_GetSysClockFreq+0x68>
 8006e74:	e00d      	b.n	8006e92 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006e76:	4b1a      	ldr	r3, [pc, #104]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e78:	60bb      	str	r3, [r7, #8]
        break;
 8006e7a:	e015      	b.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006e7c:	f7fe ff7c 	bl	8005d78 <LL_RCC_HSE_IsEnabledDiv2>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d102      	bne.n	8006e8c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006e86:	4b16      	ldr	r3, [pc, #88]	; (8006ee0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e88:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006e8a:	e00d      	b.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8006e8c:	4b15      	ldr	r3, [pc, #84]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e8e:	60bb      	str	r3, [r7, #8]
        break;
 8006e90:	e00a      	b.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006e92:	f7ff f944 	bl	800611e <LL_RCC_MSI_GetRange>
 8006e96:	4603      	mov	r3, r0
 8006e98:	091b      	lsrs	r3, r3, #4
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	4a0f      	ldr	r2, [pc, #60]	; (8006edc <HAL_RCC_GetSysClockFreq+0xc8>)
 8006ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea4:	60bb      	str	r3, [r7, #8]
        break;
 8006ea6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006ea8:	f7ff fa5b 	bl	8006362 <LL_RCC_PLL_GetN>
 8006eac:	4602      	mov	r2, r0
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	fb03 f402 	mul.w	r4, r3, r2
 8006eb4:	f7ff fa6e 	bl	8006394 <LL_RCC_PLL_GetDivider>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	091b      	lsrs	r3, r3, #4
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	fbb4 f4f3 	udiv	r4, r4, r3
 8006ec2:	f7ff fa5b 	bl	800637c <LL_RCC_PLL_GetR>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	0f5b      	lsrs	r3, r3, #29
 8006eca:	3301      	adds	r3, #1
 8006ecc:	fbb4 f3f3 	udiv	r3, r4, r3
 8006ed0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd90      	pop	{r4, r7, pc}
 8006edc:	0801399c 	.word	0x0801399c
 8006ee0:	00f42400 	.word	0x00f42400
 8006ee4:	01e84800 	.word	0x01e84800

08006ee8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ee8:	b598      	push	{r3, r4, r7, lr}
 8006eea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006eec:	f7ff ff92 	bl	8006e14 <HAL_RCC_GetSysClockFreq>
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	f7ff f9c7 	bl	8006284 <LL_RCC_GetAHBPrescaler>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	091b      	lsrs	r3, r3, #4
 8006efa:	f003 030f 	and.w	r3, r3, #15
 8006efe:	4a03      	ldr	r2, [pc, #12]	; (8006f0c <HAL_RCC_GetHCLKFreq+0x24>)
 8006f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f04:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	bd98      	pop	{r3, r4, r7, pc}
 8006f0c:	0801393c 	.word	0x0801393c

08006f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f10:	b598      	push	{r3, r4, r7, lr}
 8006f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006f14:	f7ff ffe8 	bl	8006ee8 <HAL_RCC_GetHCLKFreq>
 8006f18:	4604      	mov	r4, r0
 8006f1a:	f7ff f9e6 	bl	80062ea <LL_RCC_GetAPB2Prescaler>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	0adb      	lsrs	r3, r3, #11
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	4a04      	ldr	r2, [pc, #16]	; (8006f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f2c:	f003 031f 	and.w	r3, r3, #31
 8006f30:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	bd98      	pop	{r3, r4, r7, pc}
 8006f38:	0801397c 	.word	0x0801397c

08006f3c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	226f      	movs	r2, #111	; 0x6f
 8006f4a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8006f4c:	f7ff f925 	bl	800619a <LL_RCC_GetSysClkSource>
 8006f50:	4602      	mov	r2, r0
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8006f56:	f7ff f995 	bl	8006284 <LL_RCC_GetAHBPrescaler>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8006f60:	f7ff f9b7 	bl	80062d2 <LL_RCC_GetAPB1Prescaler>
 8006f64:	4602      	mov	r2, r0
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8006f6a:	f7ff f9be 	bl	80062ea <LL_RCC_GetAPB2Prescaler>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006f74:	f7ff f992 	bl	800629c <LL_C2_RCC_GetAHBPrescaler>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8006f7e:	f7ff f99a 	bl	80062b6 <LL_RCC_GetAHB4Prescaler>
 8006f82:	4602      	mov	r2, r0
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006f88:	4b04      	ldr	r3, [pc, #16]	; (8006f9c <HAL_RCC_GetClockConfig+0x60>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0207 	and.w	r2, r3, #7
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	601a      	str	r2, [r3, #0]
}
 8006f94:	bf00      	nop
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	58004000 	.word	0x58004000

08006fa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006fa0:	b590      	push	{r4, r7, lr}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2bb0      	cmp	r3, #176	; 0xb0
 8006fac:	d903      	bls.n	8006fb6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006fae:	4b15      	ldr	r3, [pc, #84]	; (8007004 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e007      	b.n	8006fc6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	091b      	lsrs	r3, r3, #4
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	4a11      	ldr	r2, [pc, #68]	; (8007004 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006fc6:	f7ff f976 	bl	80062b6 <LL_RCC_GetAHB4Prescaler>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	091b      	lsrs	r3, r3, #4
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	4a0d      	ldr	r2, [pc, #52]	; (8007008 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fde:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4a0a      	ldr	r2, [pc, #40]	; (800700c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe8:	0c9c      	lsrs	r4, r3, #18
 8006fea:	f7fe fea7 	bl	8005d3c <HAL_PWREx_GetVoltageRange>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f000 f80c 	bl	8007010 <RCC_SetFlashLatency>
 8006ff8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd90      	pop	{r4, r7, pc}
 8007002:	bf00      	nop
 8007004:	0801399c 	.word	0x0801399c
 8007008:	0801393c 	.word	0x0801393c
 800700c:	431bde83 	.word	0x431bde83

08007010 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007010:	b590      	push	{r4, r7, lr}
 8007012:	b093      	sub	sp, #76	; 0x4c
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800701a:	4b39      	ldr	r3, [pc, #228]	; (8007100 <RCC_SetFlashLatency+0xf0>)
 800701c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007020:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007026:	4a37      	ldr	r2, [pc, #220]	; (8007104 <RCC_SetFlashLatency+0xf4>)
 8007028:	f107 031c 	add.w	r3, r7, #28
 800702c:	ca07      	ldmia	r2, {r0, r1, r2}
 800702e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007032:	4b35      	ldr	r3, [pc, #212]	; (8007108 <RCC_SetFlashLatency+0xf8>)
 8007034:	f107 040c 	add.w	r4, r7, #12
 8007038:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800703a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800703e:	2300      	movs	r3, #0
 8007040:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007048:	d11c      	bne.n	8007084 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800704a:	2300      	movs	r3, #0
 800704c:	643b      	str	r3, [r7, #64]	; 0x40
 800704e:	e015      	b.n	800707c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007058:	4413      	add	r3, r2
 800705a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	d808      	bhi.n	8007076 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800706c:	4413      	add	r3, r2
 800706e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007072:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007074:	e022      	b.n	80070bc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007078:	3301      	adds	r3, #1
 800707a:	643b      	str	r3, [r7, #64]	; 0x40
 800707c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800707e:	2b03      	cmp	r3, #3
 8007080:	d9e6      	bls.n	8007050 <RCC_SetFlashLatency+0x40>
 8007082:	e01b      	b.n	80070bc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007084:	2300      	movs	r3, #0
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007088:	e015      	b.n	80070b6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800708a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007092:	4413      	add	r3, r2
 8007094:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	429a      	cmp	r2, r3
 800709c:	d808      	bhi.n	80070b0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800709e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80070a6:	4413      	add	r3, r2
 80070a8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80070ac:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80070ae:	e005      	b.n	80070bc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80070b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b2:	3301      	adds	r3, #1
 80070b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d9e6      	bls.n	800708a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80070bc:	4b13      	ldr	r3, [pc, #76]	; (800710c <RCC_SetFlashLatency+0xfc>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f023 0207 	bic.w	r2, r3, #7
 80070c4:	4911      	ldr	r1, [pc, #68]	; (800710c <RCC_SetFlashLatency+0xfc>)
 80070c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c8:	4313      	orrs	r3, r2
 80070ca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070cc:	f7fb fe6c 	bl	8002da8 <HAL_GetTick>
 80070d0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80070d2:	e008      	b.n	80070e6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80070d4:	f7fb fe68 	bl	8002da8 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d901      	bls.n	80070e6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e007      	b.n	80070f6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80070e6:	4b09      	ldr	r3, [pc, #36]	; (800710c <RCC_SetFlashLatency+0xfc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d1ef      	bne.n	80070d4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	374c      	adds	r7, #76	; 0x4c
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd90      	pop	{r4, r7, pc}
 80070fe:	bf00      	nop
 8007100:	080135cc 	.word	0x080135cc
 8007104:	080135dc 	.word	0x080135dc
 8007108:	080135e8 	.word	0x080135e8
 800710c:	58004000 	.word	0x58004000

08007110 <LL_RCC_LSE_IsEnabled>:
{
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <LL_RCC_LSE_IsEnabled+0x18>
 8007124:	2301      	movs	r3, #1
 8007126:	e000      	b.n	800712a <LL_RCC_LSE_IsEnabled+0x1a>
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <LL_RCC_LSE_IsReady>:
{
 8007134:	b480      	push	{r7}
 8007136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b02      	cmp	r3, #2
 8007146:	d101      	bne.n	800714c <LL_RCC_LSE_IsReady+0x18>
 8007148:	2301      	movs	r3, #1
 800714a:	e000      	b.n	800714e <LL_RCC_LSE_IsReady+0x1a>
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <LL_RCC_SetRFWKPClockSource>:
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007168:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800716c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4313      	orrs	r3, r2
 8007174:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <LL_RCC_SetSMPSClockSource>:
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800718c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	f023 0203 	bic.w	r2, r3, #3
 8007196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4313      	orrs	r3, r2
 800719e:	624b      	str	r3, [r1, #36]	; 0x24
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <LL_RCC_SetSMPSPrescaler>:
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80071b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <LL_RCC_SetUSARTClockSource>:
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80071dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e4:	f023 0203 	bic.w	r2, r3, #3
 80071e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <LL_RCC_SetLPUARTClockSource>:
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800720c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007210:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4313      	orrs	r3, r2
 800721c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <LL_RCC_SetI2CClockSource>:
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007238:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	091b      	lsrs	r3, r3, #4
 8007240:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007244:	43db      	mvns	r3, r3
 8007246:	401a      	ands	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007254:	4313      	orrs	r3, r2
 8007256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <LL_RCC_SetLPTIMClockSource>:
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800726e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007272:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	0c1b      	lsrs	r3, r3, #16
 800727a:	041b      	lsls	r3, r3, #16
 800727c:	43db      	mvns	r3, r3
 800727e:	401a      	ands	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	041b      	lsls	r3, r3, #16
 8007284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007288:	4313      	orrs	r3, r2
 800728a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <LL_RCC_SetSAIClockSource>:
{
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80072a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <LL_RCC_SetRNGClockSource>:
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80072ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80072da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <LL_RCC_SetCLK48ClockSource>:
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80072fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <LL_RCC_SetUSBClockSource>:
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff ffe3 	bl	80072f2 <LL_RCC_SetCLK48ClockSource>
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <LL_RCC_SetADCClockSource>:
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800733c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007344:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007348:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4313      	orrs	r3, r2
 8007350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <LL_RCC_SetRTCClockSource>:
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007374:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <LL_RCC_GetRTCClockSource>:
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007398:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800739c:	4618      	mov	r0, r3
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <LL_RCC_ForceBackupDomainReset>:
{
 80073a6:	b480      	push	{r7}
 80073a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80073aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80073be:	bf00      	nop
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80073cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80073e0:	bf00      	nop
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <LL_RCC_PLLSAI1_Enable>:
{
 80073ea:	b480      	push	{r7}
 80073ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80073ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073fc:	6013      	str	r3, [r2, #0]
}
 80073fe:	bf00      	nop
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <LL_RCC_PLLSAI1_Disable>:
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800740c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007416:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800741a:	6013      	str	r3, [r2, #0]
}
 800741c:	bf00      	nop
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <LL_RCC_PLLSAI1_IsReady>:
{
 8007426:	b480      	push	{r7}
 8007428:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800742a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007438:	d101      	bne.n	800743e <LL_RCC_PLLSAI1_IsReady+0x18>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b088      	sub	sp, #32
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007452:	2300      	movs	r3, #0
 8007454:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007456:	2300      	movs	r3, #0
 8007458:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d033      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800746e:	d00c      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007474:	d802      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d010      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x52>
 800747a:	e017      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x62>
 800747c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007480:	d017      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007482:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007486:	d016      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8007488:	e010      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800748a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007498:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800749a:	e00d      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3304      	adds	r3, #4
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 f947 	bl	8007734 <RCCEx_PLLSAI1_ConfigNP>
 80074a6:	4603      	mov	r3, r0
 80074a8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80074aa:	e005      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	77fb      	strb	r3, [r7, #31]
        break;
 80074b0:	e002      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80074b2:	bf00      	nop
 80074b4:	e000      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80074b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074b8:	7ffb      	ldrb	r3, [r7, #31]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d105      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff fee9 	bl	800729a <LL_RCC_SetSAIClockSource>
 80074c8:	e001      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ca:	7ffb      	ldrb	r3, [r7, #31]
 80074cc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d046      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80074da:	f7ff ff57 	bl	800738c <LL_RCC_GetRTCClockSource>
 80074de:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d03c      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80074ea:	f7fe fc17 	bl	8005d1c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d105      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff ff31 	bl	8007360 <LL_RCC_SetRTCClockSource>
 80074fe:	e02e      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007508:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800750a:	f7ff ff4c 	bl	80073a6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800750e:	f7ff ff5b 	bl	80073c8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751c:	4313      	orrs	r3, r2
 800751e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800752a:	f7ff fdf1 	bl	8007110 <LL_RCC_LSE_IsEnabled>
 800752e:	4603      	mov	r3, r0
 8007530:	2b01      	cmp	r3, #1
 8007532:	d114      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007534:	f7fb fc38 	bl	8002da8 <HAL_GetTick>
 8007538:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800753a:	e00b      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800753c:	f7fb fc34 	bl	8002da8 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	f241 3288 	movw	r2, #5000	; 0x1388
 800754a:	4293      	cmp	r3, r2
 800754c:	d902      	bls.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	77fb      	strb	r3, [r7, #31]
              break;
 8007552:	e004      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007554:	f7ff fdee 	bl	8007134 <LL_RCC_LSE_IsReady>
 8007558:	4603      	mov	r3, r0
 800755a:	2b01      	cmp	r3, #1
 800755c:	d1ee      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800755e:	7ffb      	ldrb	r3, [r7, #31]
 8007560:	77bb      	strb	r3, [r7, #30]
 8007562:	e001      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007564:	7ffb      	ldrb	r3, [r7, #31]
 8007566:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff fe2b 	bl	80071d4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d004      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	4618      	mov	r0, r3
 8007590:	f7ff fe36 	bl	8007200 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0310 	and.w	r3, r3, #16
 800759c:	2b00      	cmp	r3, #0
 800759e:	d004      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff fe5e 	bl	8007266 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d004      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff fe53 	bl	8007266 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d004      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fe2b 	bl	800722c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d004      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff fe20 	bl	800722c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d022      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff fe8e 	bl	800731e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800760a:	d107      	bne.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800760c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800761a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007624:	d10b      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3304      	adds	r3, #4
 800762a:	4618      	mov	r0, r3
 800762c:	f000 f8dd 	bl	80077ea <RCCEx_PLLSAI1_ConfigNQ>
 8007630:	4603      	mov	r3, r0
 8007632:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007634:	7ffb      	ldrb	r3, [r7, #31]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800763a:	7ffb      	ldrb	r3, [r7, #31]
 800763c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007646:	2b00      	cmp	r3, #0
 8007648:	d02b      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007652:	d008      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800765c:	d003      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007662:	2b00      	cmp	r3, #0
 8007664:	d105      	bne.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766a:	4618      	mov	r0, r3
 800766c:	f7ff fe2b 	bl	80072c6 <LL_RCC_SetRNGClockSource>
 8007670:	e00a      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	2000      	movs	r0, #0
 800767e:	f7ff fe22 	bl	80072c6 <LL_RCC_SetRNGClockSource>
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7ff fe35 	bl	80072f2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007690:	d107      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800769c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076a0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d022      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff fe3e 	bl	8007334 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076c0:	d107      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80076c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076da:	d10b      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3304      	adds	r3, #4
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 f8dd 	bl	80078a0 <RCCEx_PLLSAI1_ConfigNR>
 80076e6:	4603      	mov	r3, r0
 80076e8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80076ea:	7ffb      	ldrb	r3, [r7, #31]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80076f0:	7ffb      	ldrb	r3, [r7, #31]
 80076f2:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff fd27 	bl	8007158 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d009      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff fd46 	bl	80071ac <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff fd2d 	bl	8007184 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800772a:	7fbb      	ldrb	r3, [r7, #30]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3720      	adds	r7, #32
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007740:	f7ff fe62 	bl	8007408 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007744:	f7fb fb30 	bl	8002da8 <HAL_GetTick>
 8007748:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800774a:	e009      	b.n	8007760 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800774c:	f7fb fb2c 	bl	8002da8 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d902      	bls.n	8007760 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	73fb      	strb	r3, [r7, #15]
      break;
 800775e:	e004      	b.n	800776a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007760:	f7ff fe61 	bl	8007426 <LL_RCC_PLLSAI1_IsReady>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1f0      	bne.n	800774c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d137      	bne.n	80077e0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	021b      	lsls	r3, r3, #8
 8007780:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007784:	4313      	orrs	r3, r2
 8007786:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800779a:	4313      	orrs	r3, r2
 800779c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800779e:	f7ff fe24 	bl	80073ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077a2:	f7fb fb01 	bl	8002da8 <HAL_GetTick>
 80077a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80077a8:	e009      	b.n	80077be <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077aa:	f7fb fafd 	bl	8002da8 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d902      	bls.n	80077be <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	73fb      	strb	r3, [r7, #15]
        break;
 80077bc:	e004      	b.n	80077c8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80077be:	f7ff fe32 	bl	8007426 <LL_RCC_PLLSAI1_IsReady>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d1f0      	bne.n	80077aa <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d108      	bne.n	80077e0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80077ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077d2:	691a      	ldr	r2, [r3, #16]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077dc:	4313      	orrs	r3, r2
 80077de:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80077f6:	f7ff fe07 	bl	8007408 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80077fa:	f7fb fad5 	bl	8002da8 <HAL_GetTick>
 80077fe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007800:	e009      	b.n	8007816 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007802:	f7fb fad1 	bl	8002da8 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d902      	bls.n	8007816 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	73fb      	strb	r3, [r7, #15]
      break;
 8007814:	e004      	b.n	8007820 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007816:	f7ff fe06 	bl	8007426 <LL_RCC_PLLSAI1_IsReady>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f0      	bne.n	8007802 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d137      	bne.n	8007896 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	021b      	lsls	r3, r3, #8
 8007836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800783a:	4313      	orrs	r3, r2
 800783c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800783e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007850:	4313      	orrs	r3, r2
 8007852:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007854:	f7ff fdc9 	bl	80073ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007858:	f7fb faa6 	bl	8002da8 <HAL_GetTick>
 800785c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800785e:	e009      	b.n	8007874 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007860:	f7fb faa2 	bl	8002da8 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d902      	bls.n	8007874 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	73fb      	strb	r3, [r7, #15]
        break;
 8007872:	e004      	b.n	800787e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007874:	f7ff fdd7 	bl	8007426 <LL_RCC_PLLSAI1_IsReady>
 8007878:	4603      	mov	r3, r0
 800787a:	2b01      	cmp	r3, #1
 800787c:	d1f0      	bne.n	8007860 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d108      	bne.n	8007896 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007888:	691a      	ldr	r2, [r3, #16]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007892:	4313      	orrs	r3, r2
 8007894:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007896:	7bfb      	ldrb	r3, [r7, #15]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80078ac:	f7ff fdac 	bl	8007408 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078b0:	f7fb fa7a 	bl	8002da8 <HAL_GetTick>
 80078b4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078b6:	e009      	b.n	80078cc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078b8:	f7fb fa76 	bl	8002da8 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d902      	bls.n	80078cc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	73fb      	strb	r3, [r7, #15]
      break;
 80078ca:	e004      	b.n	80078d6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078cc:	f7ff fdab 	bl	8007426 <LL_RCC_PLLSAI1_IsReady>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1f0      	bne.n	80078b8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d137      	bne.n	800794c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80078dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078f0:	4313      	orrs	r3, r2
 80078f2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80078f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007906:	4313      	orrs	r3, r2
 8007908:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800790a:	f7ff fd6e 	bl	80073ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800790e:	f7fb fa4b 	bl	8002da8 <HAL_GetTick>
 8007912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007914:	e009      	b.n	800792a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007916:	f7fb fa47 	bl	8002da8 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d902      	bls.n	800792a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	73fb      	strb	r3, [r7, #15]
        break;
 8007928:	e004      	b.n	8007934 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800792a:	f7ff fd7c 	bl	8007426 <LL_RCC_PLLSAI1_IsReady>
 800792e:	4603      	mov	r3, r0
 8007930:	2b01      	cmp	r3, #1
 8007932:	d1f0      	bne.n	8007916 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d108      	bne.n	800794c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800793a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800793e:	691a      	ldr	r2, [r3, #16]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007948:	4313      	orrs	r3, r2
 800794a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800794c:	7bfb      	ldrb	r3, [r7, #15]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e090      	b.n	8007a8a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d106      	bne.n	8007982 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7fa fe93 	bl	80026a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2202      	movs	r2, #2
 8007986:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	22ca      	movs	r2, #202	; 0xca
 8007990:	625a      	str	r2, [r3, #36]	; 0x24
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2253      	movs	r2, #83	; 0x53
 8007998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f89f 	bl	8007ade <RTC_EnterInitMode>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d009      	beq.n	80079ba <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	22ff      	movs	r2, #255	; 0xff
 80079ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2204      	movs	r2, #4
 80079b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e067      	b.n	8007a8a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079cc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6899      	ldr	r1, [r3, #8]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	68d2      	ldr	r2, [r2, #12]
 80079f4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6919      	ldr	r1, [r3, #16]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	041a      	lsls	r2, r3, #16
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a18:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0203 	bic.w	r2, r2, #3
 8007a28:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	69da      	ldr	r2, [r3, #28]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d113      	bne.n	8007a78 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f81e 	bl	8007a92 <HAL_RTC_WaitForSynchro>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00d      	beq.n	8007a78 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	22ff      	movs	r2, #255	; 0xff
 8007a62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2204      	movs	r2, #4
 8007a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e008      	b.n	8007a8a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	22ff      	movs	r2, #255	; 0xff
 8007a7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8007a88:	2300      	movs	r3, #0
  }
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b084      	sub	sp, #16
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68da      	ldr	r2, [r3, #12]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007aa8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007aaa:	f7fb f97d 	bl	8002da8 <HAL_GetTick>
 8007aae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ab0:	e009      	b.n	8007ac6 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007ab2:	f7fb f979 	bl	8002da8 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ac0:	d901      	bls.n	8007ac6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e007      	b.n	8007ad6 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0ee      	beq.n	8007ab2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d119      	bne.n	8007b28 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f04f 32ff 	mov.w	r2, #4294967295
 8007afc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007afe:	f7fb f953 	bl	8002da8 <HAL_GetTick>
 8007b02:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b04:	e009      	b.n	8007b1a <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007b06:	f7fb f94f 	bl	8002da8 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b14:	d901      	bls.n	8007b1a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e007      	b.n	8007b2a <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0ee      	beq.n	8007b06 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b082      	sub	sp, #8
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e049      	b.n	8007bd8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d106      	bne.n	8007b5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7fb f86f 	bl	8002c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2202      	movs	r2, #2
 8007b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4610      	mov	r0, r2
 8007b72:	f000 fd17 	bl	80085a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d001      	beq.n	8007bf8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e02e      	b.n	8007c56 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a17      	ldr	r2, [pc, #92]	; (8007c64 <HAL_TIM_Base_Start+0x84>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d004      	beq.n	8007c14 <HAL_TIM_Base_Start+0x34>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c12:	d115      	bne.n	8007c40 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689a      	ldr	r2, [r3, #8]
 8007c1a:	4b13      	ldr	r3, [pc, #76]	; (8007c68 <HAL_TIM_Base_Start+0x88>)
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2b06      	cmp	r3, #6
 8007c24:	d015      	beq.n	8007c52 <HAL_TIM_Base_Start+0x72>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c2c:	d011      	beq.n	8007c52 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f042 0201 	orr.w	r2, r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c3e:	e008      	b.n	8007c52 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f042 0201 	orr.w	r2, r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	e000      	b.n	8007c54 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	40012c00 	.word	0x40012c00
 8007c68:	00010007 	.word	0x00010007

08007c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d001      	beq.n	8007c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e036      	b.n	8007cf2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f042 0201 	orr.w	r2, r2, #1
 8007c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a17      	ldr	r2, [pc, #92]	; (8007d00 <HAL_TIM_Base_Start_IT+0x94>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d004      	beq.n	8007cb0 <HAL_TIM_Base_Start_IT+0x44>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cae:	d115      	bne.n	8007cdc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689a      	ldr	r2, [r3, #8]
 8007cb6:	4b13      	ldr	r3, [pc, #76]	; (8007d04 <HAL_TIM_Base_Start_IT+0x98>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b06      	cmp	r3, #6
 8007cc0:	d015      	beq.n	8007cee <HAL_TIM_Base_Start_IT+0x82>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cc8:	d011      	beq.n	8007cee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0201 	orr.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cda:	e008      	b.n	8007cee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0201 	orr.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	e000      	b.n	8007cf0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	40012c00 	.word	0x40012c00
 8007d04:	00010007 	.word	0x00010007

08007d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e049      	b.n	8007dae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f841 	bl	8007db6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3304      	adds	r3, #4
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f000 fc2c 	bl	80085a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d109      	bne.n	8007df0 <HAL_TIM_PWM_Start+0x24>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	bf14      	ite	ne
 8007de8:	2301      	movne	r3, #1
 8007dea:	2300      	moveq	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	e03c      	b.n	8007e6a <HAL_TIM_PWM_Start+0x9e>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d109      	bne.n	8007e0a <HAL_TIM_PWM_Start+0x3e>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	bf14      	ite	ne
 8007e02:	2301      	movne	r3, #1
 8007e04:	2300      	moveq	r3, #0
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	e02f      	b.n	8007e6a <HAL_TIM_PWM_Start+0x9e>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b08      	cmp	r3, #8
 8007e0e:	d109      	bne.n	8007e24 <HAL_TIM_PWM_Start+0x58>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	bf14      	ite	ne
 8007e1c:	2301      	movne	r3, #1
 8007e1e:	2300      	moveq	r3, #0
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	e022      	b.n	8007e6a <HAL_TIM_PWM_Start+0x9e>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b0c      	cmp	r3, #12
 8007e28:	d109      	bne.n	8007e3e <HAL_TIM_PWM_Start+0x72>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	bf14      	ite	ne
 8007e36:	2301      	movne	r3, #1
 8007e38:	2300      	moveq	r3, #0
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	e015      	b.n	8007e6a <HAL_TIM_PWM_Start+0x9e>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d109      	bne.n	8007e58 <HAL_TIM_PWM_Start+0x8c>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	bf14      	ite	ne
 8007e50:	2301      	movne	r3, #1
 8007e52:	2300      	moveq	r3, #0
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	e008      	b.n	8007e6a <HAL_TIM_PWM_Start+0x9e>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	bf14      	ite	ne
 8007e64:	2301      	movne	r3, #1
 8007e66:	2300      	moveq	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e079      	b.n	8007f66 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d104      	bne.n	8007e82 <HAL_TIM_PWM_Start+0xb6>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e80:	e023      	b.n	8007eca <HAL_TIM_PWM_Start+0xfe>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d104      	bne.n	8007e92 <HAL_TIM_PWM_Start+0xc6>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e90:	e01b      	b.n	8007eca <HAL_TIM_PWM_Start+0xfe>
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d104      	bne.n	8007ea2 <HAL_TIM_PWM_Start+0xd6>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ea0:	e013      	b.n	8007eca <HAL_TIM_PWM_Start+0xfe>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b0c      	cmp	r3, #12
 8007ea6:	d104      	bne.n	8007eb2 <HAL_TIM_PWM_Start+0xe6>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007eb0:	e00b      	b.n	8007eca <HAL_TIM_PWM_Start+0xfe>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b10      	cmp	r3, #16
 8007eb6:	d104      	bne.n	8007ec2 <HAL_TIM_PWM_Start+0xf6>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ec0:	e003      	b.n	8007eca <HAL_TIM_PWM_Start+0xfe>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 fee4 	bl	8008ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a24      	ldr	r2, [pc, #144]	; (8007f70 <HAL_TIM_PWM_Start+0x1a4>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d009      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x12a>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a23      	ldr	r2, [pc, #140]	; (8007f74 <HAL_TIM_PWM_Start+0x1a8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d004      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x12a>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a21      	ldr	r2, [pc, #132]	; (8007f78 <HAL_TIM_PWM_Start+0x1ac>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d101      	bne.n	8007efa <HAL_TIM_PWM_Start+0x12e>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <HAL_TIM_PWM_Start+0x130>
 8007efa:	2300      	movs	r3, #0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d007      	beq.n	8007f10 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a16      	ldr	r2, [pc, #88]	; (8007f70 <HAL_TIM_PWM_Start+0x1a4>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d004      	beq.n	8007f24 <HAL_TIM_PWM_Start+0x158>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f22:	d115      	bne.n	8007f50 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689a      	ldr	r2, [r3, #8]
 8007f2a:	4b14      	ldr	r3, [pc, #80]	; (8007f7c <HAL_TIM_PWM_Start+0x1b0>)
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2b06      	cmp	r3, #6
 8007f34:	d015      	beq.n	8007f62 <HAL_TIM_PWM_Start+0x196>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f3c:	d011      	beq.n	8007f62 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f042 0201 	orr.w	r2, r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f4e:	e008      	b.n	8007f62 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0201 	orr.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	e000      	b.n	8007f64 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	40012c00 	.word	0x40012c00
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800
 8007f7c:	00010007 	.word	0x00010007

08007f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d122      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d11b      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f06f 0202 	mvn.w	r2, #2
 8007fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 facf 	bl	8008566 <HAL_TIM_IC_CaptureCallback>
 8007fc8:	e005      	b.n	8007fd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fac1 	bl	8008552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fad2 	bl	800857a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 0304 	and.w	r3, r3, #4
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d122      	bne.n	8008030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d11b      	bne.n	8008030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f06f 0204 	mvn.w	r2, #4
 8008000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2202      	movs	r2, #2
 8008006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 faa5 	bl	8008566 <HAL_TIM_IC_CaptureCallback>
 800801c:	e005      	b.n	800802a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fa97 	bl	8008552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 faa8 	bl	800857a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b08      	cmp	r3, #8
 800803c:	d122      	bne.n	8008084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b08      	cmp	r3, #8
 800804a:	d11b      	bne.n	8008084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f06f 0208 	mvn.w	r2, #8
 8008054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2204      	movs	r2, #4
 800805a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fa7b 	bl	8008566 <HAL_TIM_IC_CaptureCallback>
 8008070:	e005      	b.n	800807e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fa6d 	bl	8008552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fa7e 	bl	800857a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b10      	cmp	r3, #16
 8008090:	d122      	bne.n	80080d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0310 	and.w	r3, r3, #16
 800809c:	2b10      	cmp	r3, #16
 800809e:	d11b      	bne.n	80080d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0210 	mvn.w	r2, #16
 80080a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2208      	movs	r2, #8
 80080ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fa51 	bl	8008566 <HAL_TIM_IC_CaptureCallback>
 80080c4:	e005      	b.n	80080d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fa43 	bl	8008552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fa54 	bl	800857a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d10e      	bne.n	8008104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d107      	bne.n	8008104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f06f 0201 	mvn.w	r2, #1
 80080fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7fa f856 	bl	80021b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810e:	2b80      	cmp	r3, #128	; 0x80
 8008110:	d10e      	bne.n	8008130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811c:	2b80      	cmp	r3, #128	; 0x80
 800811e:	d107      	bne.n	8008130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fed8 	bl	8008ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800813e:	d10e      	bne.n	800815e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814a:	2b80      	cmp	r3, #128	; 0x80
 800814c:	d107      	bne.n	800815e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fecb 	bl	8008ef4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008168:	2b40      	cmp	r3, #64	; 0x40
 800816a:	d10e      	bne.n	800818a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008176:	2b40      	cmp	r3, #64	; 0x40
 8008178:	d107      	bne.n	800818a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fa02 	bl	800858e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f003 0320 	and.w	r3, r3, #32
 8008194:	2b20      	cmp	r3, #32
 8008196:	d10e      	bne.n	80081b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f003 0320 	and.w	r3, r3, #32
 80081a2:	2b20      	cmp	r3, #32
 80081a4:	d107      	bne.n	80081b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f06f 0220 	mvn.w	r2, #32
 80081ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fe8b 	bl	8008ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081b6:	bf00      	nop
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
	...

080081c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d101      	bne.n	80081da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80081d6:	2302      	movs	r3, #2
 80081d8:	e0fd      	b.n	80083d6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b14      	cmp	r3, #20
 80081e6:	f200 80f0 	bhi.w	80083ca <HAL_TIM_PWM_ConfigChannel+0x20a>
 80081ea:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80081ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f0:	08008245 	.word	0x08008245
 80081f4:	080083cb 	.word	0x080083cb
 80081f8:	080083cb 	.word	0x080083cb
 80081fc:	080083cb 	.word	0x080083cb
 8008200:	08008285 	.word	0x08008285
 8008204:	080083cb 	.word	0x080083cb
 8008208:	080083cb 	.word	0x080083cb
 800820c:	080083cb 	.word	0x080083cb
 8008210:	080082c7 	.word	0x080082c7
 8008214:	080083cb 	.word	0x080083cb
 8008218:	080083cb 	.word	0x080083cb
 800821c:	080083cb 	.word	0x080083cb
 8008220:	08008307 	.word	0x08008307
 8008224:	080083cb 	.word	0x080083cb
 8008228:	080083cb 	.word	0x080083cb
 800822c:	080083cb 	.word	0x080083cb
 8008230:	08008349 	.word	0x08008349
 8008234:	080083cb 	.word	0x080083cb
 8008238:	080083cb 	.word	0x080083cb
 800823c:	080083cb 	.word	0x080083cb
 8008240:	08008389 	.word	0x08008389
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68b9      	ldr	r1, [r7, #8]
 800824a:	4618      	mov	r0, r3
 800824c:	f000 fa0e 	bl	800866c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699a      	ldr	r2, [r3, #24]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0208 	orr.w	r2, r2, #8
 800825e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	699a      	ldr	r2, [r3, #24]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0204 	bic.w	r2, r2, #4
 800826e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6999      	ldr	r1, [r3, #24]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	691a      	ldr	r2, [r3, #16]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	619a      	str	r2, [r3, #24]
      break;
 8008282:	e0a3      	b.n	80083cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68b9      	ldr	r1, [r7, #8]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fa6a 	bl	8008764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	699a      	ldr	r2, [r3, #24]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800829e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6999      	ldr	r1, [r3, #24]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	021a      	lsls	r2, r3, #8
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	619a      	str	r2, [r3, #24]
      break;
 80082c4:	e082      	b.n	80083cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68b9      	ldr	r1, [r7, #8]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 fac3 	bl	8008858 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69da      	ldr	r2, [r3, #28]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f042 0208 	orr.w	r2, r2, #8
 80082e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69da      	ldr	r2, [r3, #28]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0204 	bic.w	r2, r2, #4
 80082f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	69d9      	ldr	r1, [r3, #28]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	61da      	str	r2, [r3, #28]
      break;
 8008304:	e062      	b.n	80083cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fb1b 	bl	8008948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	69da      	ldr	r2, [r3, #28]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69da      	ldr	r2, [r3, #28]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69d9      	ldr	r1, [r3, #28]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	021a      	lsls	r2, r3, #8
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	430a      	orrs	r2, r1
 8008344:	61da      	str	r2, [r3, #28]
      break;
 8008346:	e041      	b.n	80083cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68b9      	ldr	r1, [r7, #8]
 800834e:	4618      	mov	r0, r3
 8008350:	f000 fb58 	bl	8008a04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f042 0208 	orr.w	r2, r2, #8
 8008362:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 0204 	bic.w	r2, r2, #4
 8008372:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	691a      	ldr	r2, [r3, #16]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008386:	e021      	b.n	80083cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68b9      	ldr	r1, [r7, #8]
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fb90 	bl	8008ab4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	021a      	lsls	r2, r3, #8
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	430a      	orrs	r2, r1
 80083c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083c8:	e000      	b.n	80083cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80083ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop

080083e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d101      	bne.n	80083f8 <HAL_TIM_ConfigClockSource+0x18>
 80083f4:	2302      	movs	r3, #2
 80083f6:	e0a8      	b.n	800854a <HAL_TIM_ConfigClockSource+0x16a>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008416:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800841a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008422:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b40      	cmp	r3, #64	; 0x40
 8008432:	d067      	beq.n	8008504 <HAL_TIM_ConfigClockSource+0x124>
 8008434:	2b40      	cmp	r3, #64	; 0x40
 8008436:	d80b      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x70>
 8008438:	2b10      	cmp	r3, #16
 800843a:	d073      	beq.n	8008524 <HAL_TIM_ConfigClockSource+0x144>
 800843c:	2b10      	cmp	r3, #16
 800843e:	d802      	bhi.n	8008446 <HAL_TIM_ConfigClockSource+0x66>
 8008440:	2b00      	cmp	r3, #0
 8008442:	d06f      	beq.n	8008524 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008444:	e078      	b.n	8008538 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008446:	2b20      	cmp	r3, #32
 8008448:	d06c      	beq.n	8008524 <HAL_TIM_ConfigClockSource+0x144>
 800844a:	2b30      	cmp	r3, #48	; 0x30
 800844c:	d06a      	beq.n	8008524 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800844e:	e073      	b.n	8008538 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008450:	2b70      	cmp	r3, #112	; 0x70
 8008452:	d00d      	beq.n	8008470 <HAL_TIM_ConfigClockSource+0x90>
 8008454:	2b70      	cmp	r3, #112	; 0x70
 8008456:	d804      	bhi.n	8008462 <HAL_TIM_ConfigClockSource+0x82>
 8008458:	2b50      	cmp	r3, #80	; 0x50
 800845a:	d033      	beq.n	80084c4 <HAL_TIM_ConfigClockSource+0xe4>
 800845c:	2b60      	cmp	r3, #96	; 0x60
 800845e:	d041      	beq.n	80084e4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8008460:	e06a      	b.n	8008538 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008466:	d066      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x156>
 8008468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800846c:	d017      	beq.n	800849e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800846e:	e063      	b.n	8008538 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6818      	ldr	r0, [r3, #0]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	6899      	ldr	r1, [r3, #8]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f000 fbee 	bl	8008c60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008492:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	609a      	str	r2, [r3, #8]
      break;
 800849c:	e04c      	b.n	8008538 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	6899      	ldr	r1, [r3, #8]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	f000 fbd7 	bl	8008c60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084c0:	609a      	str	r2, [r3, #8]
      break;
 80084c2:	e039      	b.n	8008538 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6818      	ldr	r0, [r3, #0]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	6859      	ldr	r1, [r3, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	461a      	mov	r2, r3
 80084d2:	f000 fb49 	bl	8008b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2150      	movs	r1, #80	; 0x50
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 fba2 	bl	8008c26 <TIM_ITRx_SetConfig>
      break;
 80084e2:	e029      	b.n	8008538 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	6859      	ldr	r1, [r3, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	461a      	mov	r2, r3
 80084f2:	f000 fb68 	bl	8008bc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2160      	movs	r1, #96	; 0x60
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fb92 	bl	8008c26 <TIM_ITRx_SetConfig>
      break;
 8008502:	e019      	b.n	8008538 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	6859      	ldr	r1, [r3, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	461a      	mov	r2, r3
 8008512:	f000 fb29 	bl	8008b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2140      	movs	r1, #64	; 0x40
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fb82 	bl	8008c26 <TIM_ITRx_SetConfig>
      break;
 8008522:	e009      	b.n	8008538 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4619      	mov	r1, r3
 800852e:	4610      	mov	r0, r2
 8008530:	f000 fb79 	bl	8008c26 <TIM_ITRx_SetConfig>
        break;
 8008534:	e000      	b.n	8008538 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8008536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008552:	b480      	push	{r7}
 8008554:	b083      	sub	sp, #12
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800855a:	bf00      	nop
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008566:	b480      	push	{r7}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800856e:	bf00      	nop
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800857a:	b480      	push	{r7}
 800857c:	b083      	sub	sp, #12
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
	...

080085a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a2a      	ldr	r2, [pc, #168]	; (8008660 <TIM_Base_SetConfig+0xbc>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d003      	beq.n	80085c4 <TIM_Base_SetConfig+0x20>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c2:	d108      	bne.n	80085d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a21      	ldr	r2, [pc, #132]	; (8008660 <TIM_Base_SetConfig+0xbc>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00b      	beq.n	80085f6 <TIM_Base_SetConfig+0x52>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085e4:	d007      	beq.n	80085f6 <TIM_Base_SetConfig+0x52>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a1e      	ldr	r2, [pc, #120]	; (8008664 <TIM_Base_SetConfig+0xc0>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d003      	beq.n	80085f6 <TIM_Base_SetConfig+0x52>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a1d      	ldr	r2, [pc, #116]	; (8008668 <TIM_Base_SetConfig+0xc4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d108      	bne.n	8008608 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4313      	orrs	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a0c      	ldr	r2, [pc, #48]	; (8008660 <TIM_Base_SetConfig+0xbc>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d007      	beq.n	8008644 <TIM_Base_SetConfig+0xa0>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a0b      	ldr	r2, [pc, #44]	; (8008664 <TIM_Base_SetConfig+0xc0>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d003      	beq.n	8008644 <TIM_Base_SetConfig+0xa0>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a0a      	ldr	r2, [pc, #40]	; (8008668 <TIM_Base_SetConfig+0xc4>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d103      	bne.n	800864c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	691a      	ldr	r2, [r3, #16]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	615a      	str	r2, [r3, #20]
}
 8008652:	bf00      	nop
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	40012c00 	.word	0x40012c00
 8008664:	40014400 	.word	0x40014400
 8008668:	40014800 	.word	0x40014800

0800866c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	f023 0201 	bic.w	r2, r3, #1
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800869a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f023 0303 	bic.w	r3, r3, #3
 80086a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f023 0302 	bic.w	r3, r3, #2
 80086b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a24      	ldr	r2, [pc, #144]	; (8008758 <TIM_OC1_SetConfig+0xec>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d007      	beq.n	80086dc <TIM_OC1_SetConfig+0x70>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a23      	ldr	r2, [pc, #140]	; (800875c <TIM_OC1_SetConfig+0xf0>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d003      	beq.n	80086dc <TIM_OC1_SetConfig+0x70>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a22      	ldr	r2, [pc, #136]	; (8008760 <TIM_OC1_SetConfig+0xf4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d10c      	bne.n	80086f6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f023 0308 	bic.w	r3, r3, #8
 80086e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f023 0304 	bic.w	r3, r3, #4
 80086f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a17      	ldr	r2, [pc, #92]	; (8008758 <TIM_OC1_SetConfig+0xec>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d007      	beq.n	800870e <TIM_OC1_SetConfig+0xa2>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a17      	ldr	r2, [pc, #92]	; (8008760 <TIM_OC1_SetConfig+0xf4>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d003      	beq.n	800870e <TIM_OC1_SetConfig+0xa2>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a14      	ldr	r2, [pc, #80]	; (800875c <TIM_OC1_SetConfig+0xf0>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d111      	bne.n	8008732 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800871c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4313      	orrs	r3, r2
 8008730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	621a      	str	r2, [r3, #32]
}
 800874c:	bf00      	nop
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	40012c00 	.word	0x40012c00
 800875c:	40014800 	.word	0x40014800
 8008760:	40014400 	.word	0x40014400

08008764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	f023 0210 	bic.w	r2, r3, #16
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800879e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	021b      	lsls	r3, r3, #8
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f023 0320 	bic.w	r3, r3, #32
 80087b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	011b      	lsls	r3, r3, #4
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	4313      	orrs	r3, r2
 80087be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a22      	ldr	r2, [pc, #136]	; (800884c <TIM_OC2_SetConfig+0xe8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d10d      	bne.n	80087e4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a19      	ldr	r2, [pc, #100]	; (800884c <TIM_OC2_SetConfig+0xe8>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d007      	beq.n	80087fc <TIM_OC2_SetConfig+0x98>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a18      	ldr	r2, [pc, #96]	; (8008850 <TIM_OC2_SetConfig+0xec>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_OC2_SetConfig+0x98>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a17      	ldr	r2, [pc, #92]	; (8008854 <TIM_OC2_SetConfig+0xf0>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d113      	bne.n	8008824 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800880a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	4313      	orrs	r3, r2
 8008816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	4313      	orrs	r3, r2
 8008822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	621a      	str	r2, [r3, #32]
}
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	40012c00 	.word	0x40012c00
 8008850:	40014400 	.word	0x40014400
 8008854:	40014800 	.word	0x40014800

08008858 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008858:	b480      	push	{r7}
 800885a:	b087      	sub	sp, #28
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	69db      	ldr	r3, [r3, #28]
 800887e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800888a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f023 0303 	bic.w	r3, r3, #3
 8008892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	021b      	lsls	r3, r3, #8
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a21      	ldr	r2, [pc, #132]	; (800893c <TIM_OC3_SetConfig+0xe4>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d10d      	bne.n	80088d6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	021b      	lsls	r3, r3, #8
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a18      	ldr	r2, [pc, #96]	; (800893c <TIM_OC3_SetConfig+0xe4>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d007      	beq.n	80088ee <TIM_OC3_SetConfig+0x96>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a17      	ldr	r2, [pc, #92]	; (8008940 <TIM_OC3_SetConfig+0xe8>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d003      	beq.n	80088ee <TIM_OC3_SetConfig+0x96>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a16      	ldr	r2, [pc, #88]	; (8008944 <TIM_OC3_SetConfig+0xec>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d113      	bne.n	8008916 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	011b      	lsls	r3, r3, #4
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	4313      	orrs	r3, r2
 8008908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	011b      	lsls	r3, r3, #4
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	4313      	orrs	r3, r2
 8008914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	621a      	str	r2, [r3, #32]
}
 8008930:	bf00      	nop
 8008932:	371c      	adds	r7, #28
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	40012c00 	.word	0x40012c00
 8008940:	40014400 	.word	0x40014400
 8008944:	40014800 	.word	0x40014800

08008948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800897a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	021b      	lsls	r3, r3, #8
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	4313      	orrs	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	031b      	lsls	r3, r3, #12
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a14      	ldr	r2, [pc, #80]	; (80089f8 <TIM_OC4_SetConfig+0xb0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d007      	beq.n	80089bc <TIM_OC4_SetConfig+0x74>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a13      	ldr	r2, [pc, #76]	; (80089fc <TIM_OC4_SetConfig+0xb4>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d003      	beq.n	80089bc <TIM_OC4_SetConfig+0x74>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a12      	ldr	r2, [pc, #72]	; (8008a00 <TIM_OC4_SetConfig+0xb8>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d109      	bne.n	80089d0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	019b      	lsls	r3, r3, #6
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	621a      	str	r2, [r3, #32]
}
 80089ea:	bf00      	nop
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	40012c00 	.word	0x40012c00
 80089fc:	40014400 	.word	0x40014400
 8008a00:	40014800 	.word	0x40014800

08008a04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	041b      	lsls	r3, r3, #16
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a13      	ldr	r2, [pc, #76]	; (8008aa8 <TIM_OC5_SetConfig+0xa4>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d007      	beq.n	8008a6e <TIM_OC5_SetConfig+0x6a>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a12      	ldr	r2, [pc, #72]	; (8008aac <TIM_OC5_SetConfig+0xa8>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d003      	beq.n	8008a6e <TIM_OC5_SetConfig+0x6a>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a11      	ldr	r2, [pc, #68]	; (8008ab0 <TIM_OC5_SetConfig+0xac>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d109      	bne.n	8008a82 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	021b      	lsls	r3, r3, #8
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	621a      	str	r2, [r3, #32]
}
 8008a9c:	bf00      	nop
 8008a9e:	371c      	adds	r7, #28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	40012c00 	.word	0x40012c00
 8008aac:	40014400 	.word	0x40014400
 8008ab0:	40014800 	.word	0x40014800

08008ab4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	021b      	lsls	r3, r3, #8
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	051b      	lsls	r3, r3, #20
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a14      	ldr	r2, [pc, #80]	; (8008b5c <TIM_OC6_SetConfig+0xa8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d007      	beq.n	8008b20 <TIM_OC6_SetConfig+0x6c>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a13      	ldr	r2, [pc, #76]	; (8008b60 <TIM_OC6_SetConfig+0xac>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d003      	beq.n	8008b20 <TIM_OC6_SetConfig+0x6c>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a12      	ldr	r2, [pc, #72]	; (8008b64 <TIM_OC6_SetConfig+0xb0>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d109      	bne.n	8008b34 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	029b      	lsls	r3, r3, #10
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	621a      	str	r2, [r3, #32]
}
 8008b4e:	bf00      	nop
 8008b50:	371c      	adds	r7, #28
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	40012c00 	.word	0x40012c00
 8008b60:	40014400 	.word	0x40014400
 8008b64:	40014800 	.word	0x40014800

08008b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	f023 0201 	bic.w	r2, r3, #1
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	011b      	lsls	r3, r3, #4
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f023 030a 	bic.w	r3, r3, #10
 8008ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	621a      	str	r2, [r3, #32]
}
 8008bba:	bf00      	nop
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b087      	sub	sp, #28
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	f023 0210 	bic.w	r2, r3, #16
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	031b      	lsls	r3, r3, #12
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	011b      	lsls	r3, r3, #4
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	621a      	str	r2, [r3, #32]
}
 8008c1a:	bf00      	nop
 8008c1c:	371c      	adds	r7, #28
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b085      	sub	sp, #20
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	f043 0307 	orr.w	r3, r3, #7
 8008c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	609a      	str	r2, [r3, #8]
}
 8008c54:	bf00      	nop
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	021a      	lsls	r2, r3, #8
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	431a      	orrs	r2, r3
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	609a      	str	r2, [r3, #8]
}
 8008c94:	bf00      	nop
 8008c96:	371c      	adds	r7, #28
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f003 031f 	and.w	r3, r3, #31
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a1a      	ldr	r2, [r3, #32]
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	43db      	mvns	r3, r3
 8008cc2:	401a      	ands	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6a1a      	ldr	r2, [r3, #32]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f003 031f 	and.w	r3, r3, #31
 8008cd2:	6879      	ldr	r1, [r7, #4]
 8008cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	621a      	str	r2, [r3, #32]
}
 8008cde:	bf00      	nop
 8008ce0:	371c      	adds	r7, #28
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
	...

08008cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d101      	bne.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d00:	2302      	movs	r3, #2
 8008d02:	e04a      	b.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a1f      	ldr	r2, [pc, #124]	; (8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d108      	bne.n	8008d40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a12      	ldr	r2, [pc, #72]	; (8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d004      	beq.n	8008d6e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d6c:	d10c      	bne.n	8008d88 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	40012c00 	.word	0x40012c00

08008dac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e078      	b.n	8008eba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	041b      	lsls	r3, r3, #16
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a20      	ldr	r2, [pc, #128]	; (8008ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d106      	bne.n	8008e5a <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a1a      	ldr	r2, [pc, #104]	; (8008ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d121      	bne.n	8008ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	051b      	lsls	r3, r3, #20
 8008e70:	4313      	orrs	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a0c      	ldr	r2, [pc, #48]	; (8008ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d106      	bne.n	8008ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	40012c00 	.word	0x40012c00

08008ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f10:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008f14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	4313      	orrs	r3, r2
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b085      	sub	sp, #20
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f42:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008f46:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	43db      	mvns	r3, r3
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	4013      	ands	r3, r2
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008f70:	b084      	sub	sp, #16
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b082      	sub	sp, #8
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	f107 0014 	add.w	r0, r7, #20
 8008f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2201      	movs	r2, #1
 8008f86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7ff ffb0 	bl	8008f08 <USB_EnableGlobalInt>

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fb4:	b004      	add	sp, #16
 8008fb6:	4770      	bx	lr

08008fb8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b09d      	sub	sp, #116	; 0x74
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fde:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	78db      	ldrb	r3, [r3, #3]
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	d81f      	bhi.n	800902a <USB_ActivateEndpoint+0x72>
 8008fea:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <USB_ActivateEndpoint+0x38>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	08009001 	.word	0x08009001
 8008ff4:	0800901d 	.word	0x0800901d
 8008ff8:	08009033 	.word	0x08009033
 8008ffc:	0800900f 	.word	0x0800900f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009000:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009004:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009008:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800900c:	e012      	b.n	8009034 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800900e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009012:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009016:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800901a:	e00b      	b.n	8009034 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800901c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009024:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009028:	e004      	b.n	8009034 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009030:	e000      	b.n	8009034 <USB_ActivateEndpoint+0x7c>
      break;
 8009032:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	441a      	add	r2, r3
 800903e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800904a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800904e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009052:	b29b      	uxth	r3, r3
 8009054:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	4413      	add	r3, r2
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	b29b      	uxth	r3, r3
 8009064:	b21b      	sxth	r3, r3
 8009066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800906a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800906e:	b21a      	sxth	r2, r3
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	b21b      	sxth	r3, r3
 8009076:	4313      	orrs	r3, r2
 8009078:	b21b      	sxth	r3, r3
 800907a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	441a      	add	r2, r3
 8009088:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800908c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800909c:	b29b      	uxth	r3, r3
 800909e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	7b1b      	ldrb	r3, [r3, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f040 8149 	bne.w	800933c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	785b      	ldrb	r3, [r3, #1]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 8084 	beq.w	80091bc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	61bb      	str	r3, [r7, #24]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090be:	b29b      	uxth	r3, r3
 80090c0:	461a      	mov	r2, r3
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	4413      	add	r3, r2
 80090c6:	61bb      	str	r3, [r7, #24]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	00da      	lsls	r2, r3, #3
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	88db      	ldrh	r3, [r3, #6]
 80090dc:	085b      	lsrs	r3, r3, #1
 80090de:	b29b      	uxth	r3, r3
 80090e0:	005b      	lsls	r3, r3, #1
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	881b      	ldrh	r3, [r3, #0]
 80090f4:	827b      	strh	r3, [r7, #18]
 80090f6:	8a7b      	ldrh	r3, [r7, #18]
 80090f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d01b      	beq.n	8009138 <USB_ActivateEndpoint+0x180>
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	b29b      	uxth	r3, r3
 800910e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009116:	823b      	strh	r3, [r7, #16]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	441a      	add	r2, r3
 8009122:	8a3b      	ldrh	r3, [r7, #16]
 8009124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800912c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009130:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009134:	b29b      	uxth	r3, r3
 8009136:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	78db      	ldrb	r3, [r3, #3]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d020      	beq.n	8009182 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	b29b      	uxth	r3, r3
 800914e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009156:	81bb      	strh	r3, [r7, #12]
 8009158:	89bb      	ldrh	r3, [r7, #12]
 800915a:	f083 0320 	eor.w	r3, r3, #32
 800915e:	81bb      	strh	r3, [r7, #12]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	441a      	add	r2, r3
 800916a:	89bb      	ldrh	r3, [r7, #12]
 800916c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800917c:	b29b      	uxth	r3, r3
 800917e:	8013      	strh	r3, [r2, #0]
 8009180:	e2bf      	b.n	8009702 <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	b29b      	uxth	r3, r3
 8009190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009198:	81fb      	strh	r3, [r7, #14]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	441a      	add	r2, r3
 80091a4:	89fb      	ldrh	r3, [r7, #14]
 80091a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	8013      	strh	r3, [r2, #0]
 80091ba:	e2a2      	b.n	8009702 <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	633b      	str	r3, [r7, #48]	; 0x30
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	461a      	mov	r2, r3
 80091ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091cc:	4413      	add	r3, r2
 80091ce:	633b      	str	r3, [r7, #48]	; 0x30
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	00da      	lsls	r2, r3, #3
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	4413      	add	r3, r2
 80091da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	88db      	ldrh	r3, [r3, #6]
 80091e4:	085b      	lsrs	r3, r3, #1
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ee:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	461a      	mov	r2, r3
 80091fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009200:	4413      	add	r3, r2
 8009202:	62bb      	str	r3, [r7, #40]	; 0x28
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	00da      	lsls	r2, r3, #3
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	4413      	add	r3, r2
 800920e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009212:	627b      	str	r3, [r7, #36]	; 0x24
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d112      	bne.n	8009242 <USB_ActivateEndpoint+0x28a>
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	b29b      	uxth	r3, r3
 8009222:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009226:	b29a      	uxth	r2, r3
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	801a      	strh	r2, [r3, #0]
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	b29b      	uxth	r3, r3
 8009232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800923a:	b29a      	uxth	r2, r3
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	801a      	strh	r2, [r3, #0]
 8009240:	e02f      	b.n	80092a2 <USB_ActivateEndpoint+0x2ea>
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	2b3e      	cmp	r3, #62	; 0x3e
 8009248:	d813      	bhi.n	8009272 <USB_ActivateEndpoint+0x2ba>
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	085b      	lsrs	r3, r3, #1
 8009250:	66bb      	str	r3, [r7, #104]	; 0x68
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <USB_ActivateEndpoint+0x2ac>
 800925e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009260:	3301      	adds	r3, #1
 8009262:	66bb      	str	r3, [r7, #104]	; 0x68
 8009264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009266:	b29b      	uxth	r3, r3
 8009268:	029b      	lsls	r3, r3, #10
 800926a:	b29a      	uxth	r2, r3
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	801a      	strh	r2, [r3, #0]
 8009270:	e017      	b.n	80092a2 <USB_ActivateEndpoint+0x2ea>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	095b      	lsrs	r3, r3, #5
 8009278:	66bb      	str	r3, [r7, #104]	; 0x68
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	f003 031f 	and.w	r3, r3, #31
 8009282:	2b00      	cmp	r3, #0
 8009284:	d102      	bne.n	800928c <USB_ActivateEndpoint+0x2d4>
 8009286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009288:	3b01      	subs	r3, #1
 800928a:	66bb      	str	r3, [r7, #104]	; 0x68
 800928c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800928e:	b29b      	uxth	r3, r3
 8009290:	029b      	lsls	r3, r3, #10
 8009292:	b29b      	uxth	r3, r3
 8009294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800929c:	b29a      	uxth	r2, r3
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80092b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d01b      	beq.n	80092f2 <USB_ActivateEndpoint+0x33a>
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d0:	843b      	strh	r3, [r7, #32]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	441a      	add	r2, r3
 80092dc:	8c3b      	ldrh	r3, [r7, #32]
 80092de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009308:	83fb      	strh	r3, [r7, #30]
 800930a:	8bfb      	ldrh	r3, [r7, #30]
 800930c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009310:	83fb      	strh	r3, [r7, #30]
 8009312:	8bfb      	ldrh	r3, [r7, #30]
 8009314:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009318:	83fb      	strh	r3, [r7, #30]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	441a      	add	r2, r3
 8009324:	8bfb      	ldrh	r3, [r7, #30]
 8009326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800932a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800932e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009336:	b29b      	uxth	r3, r3
 8009338:	8013      	strh	r3, [r2, #0]
 800933a:	e1e2      	b.n	8009702 <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	b29b      	uxth	r3, r3
 800934a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800934e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009352:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	441a      	add	r2, r3
 8009360:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800936c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009374:	b29b      	uxth	r3, r3
 8009376:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	663b      	str	r3, [r7, #96]	; 0x60
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009382:	b29b      	uxth	r3, r3
 8009384:	461a      	mov	r2, r3
 8009386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009388:	4413      	add	r3, r2
 800938a:	663b      	str	r3, [r7, #96]	; 0x60
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	00da      	lsls	r2, r3, #3
 8009392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009394:	4413      	add	r3, r2
 8009396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800939a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	891b      	ldrh	r3, [r3, #8]
 80093a0:	085b      	lsrs	r3, r3, #1
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093aa:	801a      	strh	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	461a      	mov	r2, r3
 80093ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093bc:	4413      	add	r3, r2
 80093be:	65bb      	str	r3, [r7, #88]	; 0x58
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	00da      	lsls	r2, r3, #3
 80093c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093c8:	4413      	add	r3, r2
 80093ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093ce:	657b      	str	r3, [r7, #84]	; 0x54
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	895b      	ldrh	r3, [r3, #10]
 80093d4:	085b      	lsrs	r3, r3, #1
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	005b      	lsls	r3, r3, #1
 80093da:	b29a      	uxth	r2, r3
 80093dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	785b      	ldrb	r3, [r3, #1]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f040 80b1 	bne.w	800954c <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80093fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80093fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d01d      	beq.n	8009442 <USB_ActivateEndpoint+0x48a>
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	b29b      	uxth	r3, r3
 8009414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800941c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	441a      	add	r2, r3
 800942a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800942e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009436:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800943a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800943e:	b29b      	uxth	r3, r3
 8009440:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	881b      	ldrh	r3, [r3, #0]
 800944e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009450:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009456:	2b00      	cmp	r3, #0
 8009458:	d01b      	beq.n	8009492 <USB_ActivateEndpoint+0x4da>
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	b29b      	uxth	r3, r3
 8009468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800946c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009470:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	441a      	add	r2, r3
 800947c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800947e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800948a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800948e:	b29b      	uxth	r3, r3
 8009490:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	b29b      	uxth	r3, r3
 80094a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	441a      	add	r2, r3
 80094b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80094b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	881b      	ldrh	r3, [r3, #0]
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094e0:	873b      	strh	r3, [r7, #56]	; 0x38
 80094e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80094e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80094e8:	873b      	strh	r3, [r7, #56]	; 0x38
 80094ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80094ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80094f0:	873b      	strh	r3, [r7, #56]	; 0x38
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	441a      	add	r2, r3
 80094fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80094fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800950a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800950e:	b29b      	uxth	r3, r3
 8009510:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	b29b      	uxth	r3, r3
 8009520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009528:	86fb      	strh	r3, [r7, #54]	; 0x36
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	441a      	add	r2, r3
 8009534:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800953a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800953e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009546:	b29b      	uxth	r3, r3
 8009548:	8013      	strh	r3, [r2, #0]
 800954a:	e0da      	b.n	8009702 <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800955c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d01d      	beq.n	80095a4 <USB_ActivateEndpoint+0x5ec>
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	b29b      	uxth	r3, r3
 8009576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800957a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800957e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	441a      	add	r2, r3
 800958c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800959c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4413      	add	r3, r2
 80095ae:	881b      	ldrh	r3, [r3, #0]
 80095b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80095b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80095b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d01d      	beq.n	80095fc <USB_ActivateEndpoint+0x644>
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	441a      	add	r2, r3
 80095e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80095e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	b29b      	uxth	r3, r3
 800960a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800960e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009612:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	441a      	add	r2, r3
 8009620:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800962c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009634:	b29b      	uxth	r3, r3
 8009636:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	78db      	ldrb	r3, [r3, #3]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d024      	beq.n	800968a <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	881b      	ldrh	r3, [r3, #0]
 800964c:	b29b      	uxth	r3, r3
 800964e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009656:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800965a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800965e:	f083 0320 	eor.w	r3, r3, #32
 8009662:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	441a      	add	r2, r3
 8009670:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800967c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009684:	b29b      	uxth	r3, r3
 8009686:	8013      	strh	r3, [r2, #0]
 8009688:	e01d      	b.n	80096c6 <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4413      	add	r3, r2
 8009694:	881b      	ldrh	r3, [r3, #0]
 8009696:	b29b      	uxth	r3, r3
 8009698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800969c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	441a      	add	r2, r3
 80096ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80096b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096dc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	441a      	add	r2, r3
 80096ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80096ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096fe:	b29b      	uxth	r3, r3
 8009700:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009702:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009706:	4618      	mov	r0, r3
 8009708:	3774      	adds	r7, #116	; 0x74
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop

08009714 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009714:	b480      	push	{r7}
 8009716:	b08d      	sub	sp, #52	; 0x34
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	7b1b      	ldrb	r3, [r3, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	f040 808e 	bne.w	8009844 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d044      	beq.n	80097ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	81bb      	strh	r3, [r7, #12]
 800973e:	89bb      	ldrh	r3, [r7, #12]
 8009740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	d01b      	beq.n	8009780 <USB_DeactivateEndpoint+0x6c>
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	881b      	ldrh	r3, [r3, #0]
 8009754:	b29b      	uxth	r3, r3
 8009756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800975a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800975e:	817b      	strh	r3, [r7, #10]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	441a      	add	r2, r3
 800976a:	897b      	ldrh	r3, [r7, #10]
 800976c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009778:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800977c:	b29b      	uxth	r3, r3
 800977e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29b      	uxth	r3, r3
 800978e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009796:	813b      	strh	r3, [r7, #8]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	441a      	add	r2, r3
 80097a2:	893b      	ldrh	r3, [r7, #8]
 80097a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	8013      	strh	r3, [r2, #0]
 80097b8:	e192      	b.n	8009ae0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	881b      	ldrh	r3, [r3, #0]
 80097c6:	827b      	strh	r3, [r7, #18]
 80097c8:	8a7b      	ldrh	r3, [r7, #18]
 80097ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d01b      	beq.n	800980a <USB_DeactivateEndpoint+0xf6>
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	881b      	ldrh	r3, [r3, #0]
 80097de:	b29b      	uxth	r3, r3
 80097e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e8:	823b      	strh	r3, [r7, #16]
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	441a      	add	r2, r3
 80097f4:	8a3b      	ldrh	r3, [r7, #16]
 80097f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009806:	b29b      	uxth	r3, r3
 8009808:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4413      	add	r3, r2
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	b29b      	uxth	r3, r3
 8009818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800981c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009820:	81fb      	strh	r3, [r7, #14]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	441a      	add	r2, r3
 800982c:	89fb      	ldrh	r3, [r7, #14]
 800982e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800983a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983e:	b29b      	uxth	r3, r3
 8009840:	8013      	strh	r3, [r2, #0]
 8009842:	e14d      	b.n	8009ae0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	785b      	ldrb	r3, [r3, #1]
 8009848:	2b00      	cmp	r3, #0
 800984a:	f040 80a5 	bne.w	8009998 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	843b      	strh	r3, [r7, #32]
 800985c:	8c3b      	ldrh	r3, [r7, #32]
 800985e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009862:	2b00      	cmp	r3, #0
 8009864:	d01b      	beq.n	800989e <USB_DeactivateEndpoint+0x18a>
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	b29b      	uxth	r3, r3
 8009874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800987c:	83fb      	strh	r3, [r7, #30]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	441a      	add	r2, r3
 8009888:	8bfb      	ldrh	r3, [r7, #30]
 800988a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800988e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009892:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800989a:	b29b      	uxth	r3, r3
 800989c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	83bb      	strh	r3, [r7, #28]
 80098ac:	8bbb      	ldrh	r3, [r7, #28]
 80098ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d01b      	beq.n	80098ee <USB_DeactivateEndpoint+0x1da>
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098cc:	837b      	strh	r3, [r7, #26]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	441a      	add	r2, r3
 80098d8:	8b7b      	ldrh	r3, [r7, #26]
 80098da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009904:	833b      	strh	r3, [r7, #24]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	441a      	add	r2, r3
 8009910:	8b3b      	ldrh	r3, [r7, #24]
 8009912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800991a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800991e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009922:	b29b      	uxth	r3, r3
 8009924:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	b29b      	uxth	r3, r3
 8009934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800993c:	82fb      	strh	r3, [r7, #22]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	441a      	add	r2, r3
 8009948:	8afb      	ldrh	r3, [r7, #22]
 800994a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800994e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800995a:	b29b      	uxth	r3, r3
 800995c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	881b      	ldrh	r3, [r3, #0]
 800996a:	b29b      	uxth	r3, r3
 800996c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009974:	82bb      	strh	r3, [r7, #20]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	441a      	add	r2, r3
 8009980:	8abb      	ldrh	r3, [r7, #20]
 8009982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800998a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800998e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009992:	b29b      	uxth	r3, r3
 8009994:	8013      	strh	r3, [r2, #0]
 8009996:	e0a3      	b.n	8009ae0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80099a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80099a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d01b      	beq.n	80099e8 <USB_DeactivateEndpoint+0x2d4>
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	881b      	ldrh	r3, [r3, #0]
 80099bc:	b29b      	uxth	r3, r3
 80099be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	441a      	add	r2, r3
 80099d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80099d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80099f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80099f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01b      	beq.n	8009a38 <USB_DeactivateEndpoint+0x324>
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	881b      	ldrh	r3, [r3, #0]
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a16:	853b      	strh	r3, [r7, #40]	; 0x28
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	441a      	add	r2, r3
 8009a22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	441a      	add	r2, r3
 8009a5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	881b      	ldrh	r3, [r3, #0]
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	441a      	add	r2, r3
 8009a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009abe:	847b      	strh	r3, [r7, #34]	; 0x22
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	441a      	add	r2, r3
 8009aca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3734      	adds	r7, #52	; 0x34
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b0a0      	sub	sp, #128	; 0x80
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	785b      	ldrb	r3, [r3, #1]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	f040 81a1 	bne.w	8009e44 <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	699a      	ldr	r2, [r3, #24]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d909      	bls.n	8009b22 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	699a      	ldr	r2, [r3, #24]
 8009b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b1a:	1ad2      	subs	r2, r2, r3
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	619a      	str	r2, [r3, #24]
 8009b20:	e005      	b.n	8009b2e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	7b1b      	ldrb	r3, [r3, #12]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d11f      	bne.n	8009b76 <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	6959      	ldr	r1, [r3, #20]
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	88da      	ldrh	r2, [r3, #6]
 8009b3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fc3f 	bl	800a3c6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	613b      	str	r3, [r7, #16]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	461a      	mov	r2, r3
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	4413      	add	r3, r2
 8009b5a:	613b      	str	r3, [r7, #16]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	00da      	lsls	r2, r3, #3
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	4413      	add	r3, r2
 8009b66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	801a      	strh	r2, [r3, #0]
 8009b74:	e141      	b.n	8009dfa <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d076      	beq.n	8009c7a <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	785b      	ldrb	r3, [r3, #1]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d153      	bne.n	8009c40 <USB_EPStartXfer+0x152>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	61fb      	str	r3, [r7, #28]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	4413      	add	r3, r2
 8009baa:	61fb      	str	r3, [r7, #28]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	00da      	lsls	r2, r3, #3
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bba:	61bb      	str	r3, [r7, #24]
 8009bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d112      	bne.n	8009be8 <USB_EPStartXfer+0xfa>
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	801a      	strh	r2, [r3, #0]
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	801a      	strh	r2, [r3, #0]
 8009be6:	e043      	b.n	8009c70 <USB_EPStartXfer+0x182>
 8009be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bea:	2b3e      	cmp	r3, #62	; 0x3e
 8009bec:	d811      	bhi.n	8009c12 <USB_EPStartXfer+0x124>
 8009bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bf0:	085b      	lsrs	r3, r3, #1
 8009bf2:	677b      	str	r3, [r7, #116]	; 0x74
 8009bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d002      	beq.n	8009c04 <USB_EPStartXfer+0x116>
 8009bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c00:	3301      	adds	r3, #1
 8009c02:	677b      	str	r3, [r7, #116]	; 0x74
 8009c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	029b      	lsls	r3, r3, #10
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	801a      	strh	r2, [r3, #0]
 8009c10:	e02e      	b.n	8009c70 <USB_EPStartXfer+0x182>
 8009c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c14:	095b      	lsrs	r3, r3, #5
 8009c16:	677b      	str	r3, [r7, #116]	; 0x74
 8009c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c1a:	f003 031f 	and.w	r3, r3, #31
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d102      	bne.n	8009c28 <USB_EPStartXfer+0x13a>
 8009c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c24:	3b01      	subs	r3, #1
 8009c26:	677b      	str	r3, [r7, #116]	; 0x74
 8009c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	029b      	lsls	r3, r3, #10
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	801a      	strh	r2, [r3, #0]
 8009c3e:	e017      	b.n	8009c70 <USB_EPStartXfer+0x182>
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	785b      	ldrb	r3, [r3, #1]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d113      	bne.n	8009c70 <USB_EPStartXfer+0x182>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	461a      	mov	r2, r3
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	4413      	add	r3, r2
 8009c56:	627b      	str	r3, [r7, #36]	; 0x24
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	00da      	lsls	r2, r3, #3
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c60:	4413      	add	r3, r2
 8009c62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c66:	623b      	str	r3, [r7, #32]
 8009c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	895b      	ldrh	r3, [r3, #10]
 8009c74:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8009c78:	e075      	b.n	8009d66 <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	785b      	ldrb	r3, [r3, #1]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d153      	bne.n	8009d2a <USB_EPStartXfer+0x23c>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	461a      	mov	r2, r3
 8009c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c92:	4413      	add	r3, r2
 8009c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	00da      	lsls	r2, r3, #3
 8009c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d112      	bne.n	8009cd2 <USB_EPStartXfer+0x1e4>
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	801a      	strh	r2, [r3, #0]
 8009cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	801a      	strh	r2, [r3, #0]
 8009cd0:	e045      	b.n	8009d5e <USB_EPStartXfer+0x270>
 8009cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cd4:	2b3e      	cmp	r3, #62	; 0x3e
 8009cd6:	d811      	bhi.n	8009cfc <USB_EPStartXfer+0x20e>
 8009cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cda:	085b      	lsrs	r3, r3, #1
 8009cdc:	673b      	str	r3, [r7, #112]	; 0x70
 8009cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <USB_EPStartXfer+0x200>
 8009ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cea:	3301      	adds	r3, #1
 8009cec:	673b      	str	r3, [r7, #112]	; 0x70
 8009cee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	029b      	lsls	r3, r3, #10
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf8:	801a      	strh	r2, [r3, #0]
 8009cfa:	e030      	b.n	8009d5e <USB_EPStartXfer+0x270>
 8009cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cfe:	095b      	lsrs	r3, r3, #5
 8009d00:	673b      	str	r3, [r7, #112]	; 0x70
 8009d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d04:	f003 031f 	and.w	r3, r3, #31
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <USB_EPStartXfer+0x224>
 8009d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	673b      	str	r3, [r7, #112]	; 0x70
 8009d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	029b      	lsls	r3, r3, #10
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	801a      	strh	r2, [r3, #0]
 8009d28:	e019      	b.n	8009d5e <USB_EPStartXfer+0x270>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	785b      	ldrb	r3, [r3, #1]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d115      	bne.n	8009d5e <USB_EPStartXfer+0x270>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	637b      	str	r3, [r7, #52]	; 0x34
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	461a      	mov	r2, r3
 8009d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d42:	4413      	add	r3, r2
 8009d44:	637b      	str	r3, [r7, #52]	; 0x34
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	00da      	lsls	r2, r3, #3
 8009d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d4e:	4413      	add	r3, r2
 8009d50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d54:	633b      	str	r3, [r7, #48]	; 0x30
 8009d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	891b      	ldrh	r3, [r3, #8]
 8009d62:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	6959      	ldr	r1, [r3, #20]
 8009d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fb27 	bl	800a3c6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	785b      	ldrb	r3, [r3, #1]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d11c      	bne.n	8009dba <USB_EPStartXfer+0x2cc>
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	4413      	add	r3, r2
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d96:	82bb      	strh	r3, [r7, #20]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	441a      	add	r2, r3
 8009da2:	8abb      	ldrh	r3, [r7, #20]
 8009da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009db0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	8013      	strh	r3, [r2, #0]
 8009db8:	e01f      	b.n	8009dfa <USB_EPStartXfer+0x30c>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	785b      	ldrb	r3, [r3, #1]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d11b      	bne.n	8009dfa <USB_EPStartXfer+0x30c>
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4413      	add	r3, r2
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dd8:	82fb      	strh	r3, [r7, #22]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	441a      	add	r2, r3
 8009de4:	8afb      	ldrh	r3, [r7, #22]
 8009de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e10:	817b      	strh	r3, [r7, #10]
 8009e12:	897b      	ldrh	r3, [r7, #10]
 8009e14:	f083 0310 	eor.w	r3, r3, #16
 8009e18:	817b      	strh	r3, [r7, #10]
 8009e1a:	897b      	ldrh	r3, [r7, #10]
 8009e1c:	f083 0320 	eor.w	r3, r3, #32
 8009e20:	817b      	strh	r3, [r7, #10]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	441a      	add	r2, r3
 8009e2c:	897b      	ldrh	r3, [r7, #10]
 8009e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	8013      	strh	r3, [r2, #0]
 8009e42:	e175      	b.n	800a130 <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	699a      	ldr	r2, [r3, #24]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d909      	bls.n	8009e64 <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	699a      	ldr	r2, [r3, #24]
 8009e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e5c:	1ad2      	subs	r2, r2, r3
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	619a      	str	r2, [r3, #24]
 8009e62:	e005      	b.n	8009e70 <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	7b1b      	ldrb	r3, [r3, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d153      	bne.n	8009f20 <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	461a      	mov	r2, r3
 8009e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e88:	4413      	add	r3, r2
 8009e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	00da      	lsls	r2, r3, #3
 8009e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e94:	4413      	add	r3, r2
 8009e96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d112      	bne.n	8009ec8 <USB_EPStartXfer+0x3da>
 8009ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb0:	801a      	strh	r2, [r3, #0]
 8009eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec4:	801a      	strh	r2, [r3, #0]
 8009ec6:	e10f      	b.n	800a0e8 <USB_EPStartXfer+0x5fa>
 8009ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eca:	2b3e      	cmp	r3, #62	; 0x3e
 8009ecc:	d811      	bhi.n	8009ef2 <USB_EPStartXfer+0x404>
 8009ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ed0:	085b      	lsrs	r3, r3, #1
 8009ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d002      	beq.n	8009ee4 <USB_EPStartXfer+0x3f6>
 8009ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	029b      	lsls	r3, r3, #10
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eee:	801a      	strh	r2, [r3, #0]
 8009ef0:	e0fa      	b.n	800a0e8 <USB_EPStartXfer+0x5fa>
 8009ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ef4:	095b      	lsrs	r3, r3, #5
 8009ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009efa:	f003 031f 	and.w	r3, r3, #31
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d102      	bne.n	8009f08 <USB_EPStartXfer+0x41a>
 8009f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f04:	3b01      	subs	r3, #1
 8009f06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	029b      	lsls	r3, r3, #10
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f1c:	801a      	strh	r2, [r3, #0]
 8009f1e:	e0e3      	b.n	800a0e8 <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	785b      	ldrb	r3, [r3, #1]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d153      	bne.n	8009fd0 <USB_EPStartXfer+0x4e2>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	461a      	mov	r2, r3
 8009f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f38:	4413      	add	r3, r2
 8009f3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	00da      	lsls	r2, r3, #3
 8009f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f44:	4413      	add	r3, r2
 8009f46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8009f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d112      	bne.n	8009f78 <USB_EPStartXfer+0x48a>
 8009f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f60:	801a      	strh	r2, [r3, #0]
 8009f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f64:	881b      	ldrh	r3, [r3, #0]
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f74:	801a      	strh	r2, [r3, #0]
 8009f76:	e045      	b.n	800a004 <USB_EPStartXfer+0x516>
 8009f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f7a:	2b3e      	cmp	r3, #62	; 0x3e
 8009f7c:	d811      	bhi.n	8009fa2 <USB_EPStartXfer+0x4b4>
 8009f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f80:	085b      	lsrs	r3, r3, #1
 8009f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d002      	beq.n	8009f94 <USB_EPStartXfer+0x4a6>
 8009f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f90:	3301      	adds	r3, #1
 8009f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	029b      	lsls	r3, r3, #10
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f9e:	801a      	strh	r2, [r3, #0]
 8009fa0:	e030      	b.n	800a004 <USB_EPStartXfer+0x516>
 8009fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fa4:	095b      	lsrs	r3, r3, #5
 8009fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009faa:	f003 031f 	and.w	r3, r3, #31
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d102      	bne.n	8009fb8 <USB_EPStartXfer+0x4ca>
 8009fb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	029b      	lsls	r3, r3, #10
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fcc:	801a      	strh	r2, [r3, #0]
 8009fce:	e019      	b.n	800a004 <USB_EPStartXfer+0x516>
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	785b      	ldrb	r3, [r3, #1]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d115      	bne.n	800a004 <USB_EPStartXfer+0x516>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	663b      	str	r3, [r7, #96]	; 0x60
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fe8:	4413      	add	r3, r2
 8009fea:	663b      	str	r3, [r7, #96]	; 0x60
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	00da      	lsls	r2, r3, #3
 8009ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a002:	801a      	strh	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	653b      	str	r3, [r7, #80]	; 0x50
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	785b      	ldrb	r3, [r3, #1]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d153      	bne.n	800a0b8 <USB_EPStartXfer+0x5ca>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	64bb      	str	r3, [r7, #72]	; 0x48
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	461a      	mov	r2, r3
 800a01e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a020:	4413      	add	r3, r2
 800a022:	64bb      	str	r3, [r7, #72]	; 0x48
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	00da      	lsls	r2, r3, #3
 800a02a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a02c:	4413      	add	r3, r2
 800a02e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a032:	647b      	str	r3, [r7, #68]	; 0x44
 800a034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a036:	2b00      	cmp	r3, #0
 800a038:	d112      	bne.n	800a060 <USB_EPStartXfer+0x572>
 800a03a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	b29b      	uxth	r3, r3
 800a040:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a044:	b29a      	uxth	r2, r3
 800a046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a048:	801a      	strh	r2, [r3, #0]
 800a04a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a058:	b29a      	uxth	r2, r3
 800a05a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a05c:	801a      	strh	r2, [r3, #0]
 800a05e:	e043      	b.n	800a0e8 <USB_EPStartXfer+0x5fa>
 800a060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a062:	2b3e      	cmp	r3, #62	; 0x3e
 800a064:	d811      	bhi.n	800a08a <USB_EPStartXfer+0x59c>
 800a066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a068:	085b      	lsrs	r3, r3, #1
 800a06a:	667b      	str	r3, [r7, #100]	; 0x64
 800a06c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <USB_EPStartXfer+0x58e>
 800a076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a078:	3301      	adds	r3, #1
 800a07a:	667b      	str	r3, [r7, #100]	; 0x64
 800a07c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a07e:	b29b      	uxth	r3, r3
 800a080:	029b      	lsls	r3, r3, #10
 800a082:	b29a      	uxth	r2, r3
 800a084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a086:	801a      	strh	r2, [r3, #0]
 800a088:	e02e      	b.n	800a0e8 <USB_EPStartXfer+0x5fa>
 800a08a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a08c:	095b      	lsrs	r3, r3, #5
 800a08e:	667b      	str	r3, [r7, #100]	; 0x64
 800a090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a092:	f003 031f 	and.w	r3, r3, #31
 800a096:	2b00      	cmp	r3, #0
 800a098:	d102      	bne.n	800a0a0 <USB_EPStartXfer+0x5b2>
 800a09a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a09c:	3b01      	subs	r3, #1
 800a09e:	667b      	str	r3, [r7, #100]	; 0x64
 800a0a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	029b      	lsls	r3, r3, #10
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0b4:	801a      	strh	r2, [r3, #0]
 800a0b6:	e017      	b.n	800a0e8 <USB_EPStartXfer+0x5fa>
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	785b      	ldrb	r3, [r3, #1]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d113      	bne.n	800a0e8 <USB_EPStartXfer+0x5fa>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0cc:	4413      	add	r3, r2
 800a0ce:	653b      	str	r3, [r7, #80]	; 0x50
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	00da      	lsls	r2, r3, #3
 800a0d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0d8:	4413      	add	r3, r2
 800a0da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0e6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fe:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a100:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a102:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a106:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a108:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a10a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a10e:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	441a      	add	r2, r3
 800a11a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a11c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3780      	adds	r7, #128	; 0x80
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b085      	sub	sp, #20
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	785b      	ldrb	r3, [r3, #1]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d020      	beq.n	800a18e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	881b      	ldrh	r3, [r3, #0]
 800a158:	b29b      	uxth	r3, r3
 800a15a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a15e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a162:	81bb      	strh	r3, [r7, #12]
 800a164:	89bb      	ldrh	r3, [r7, #12]
 800a166:	f083 0310 	eor.w	r3, r3, #16
 800a16a:	81bb      	strh	r3, [r7, #12]
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	441a      	add	r2, r3
 800a176:	89bb      	ldrh	r3, [r7, #12]
 800a178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a17c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a188:	b29b      	uxth	r3, r3
 800a18a:	8013      	strh	r3, [r2, #0]
 800a18c:	e01f      	b.n	800a1ce <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	881b      	ldrh	r3, [r3, #0]
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a4:	81fb      	strh	r3, [r7, #14]
 800a1a6:	89fb      	ldrh	r3, [r7, #14]
 800a1a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1ac:	81fb      	strh	r3, [r7, #14]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	441a      	add	r2, r3
 800a1b8:	89fb      	ldrh	r3, [r7, #14]
 800a1ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3714      	adds	r7, #20
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b087      	sub	sp, #28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	7b1b      	ldrb	r3, [r3, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f040 809d 	bne.w	800a32a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	785b      	ldrb	r3, [r3, #1]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d04c      	beq.n	800a292 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	4413      	add	r3, r2
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	823b      	strh	r3, [r7, #16]
 800a206:	8a3b      	ldrh	r3, [r7, #16]
 800a208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d01b      	beq.n	800a248 <USB_EPClearStall+0x6c>
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4413      	add	r3, r2
 800a21a:	881b      	ldrh	r3, [r3, #0]
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a226:	81fb      	strh	r3, [r7, #14]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	441a      	add	r2, r3
 800a232:	89fb      	ldrh	r3, [r7, #14]
 800a234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a23c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a240:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a244:	b29b      	uxth	r3, r3
 800a246:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	78db      	ldrb	r3, [r3, #3]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d06c      	beq.n	800a32a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a266:	81bb      	strh	r3, [r7, #12]
 800a268:	89bb      	ldrh	r3, [r7, #12]
 800a26a:	f083 0320 	eor.w	r3, r3, #32
 800a26e:	81bb      	strh	r3, [r7, #12]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	441a      	add	r2, r3
 800a27a:	89bb      	ldrh	r3, [r7, #12]
 800a27c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	8013      	strh	r3, [r2, #0]
 800a290:	e04b      	b.n	800a32a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	881b      	ldrh	r3, [r3, #0]
 800a29e:	82fb      	strh	r3, [r7, #22]
 800a2a0:	8afb      	ldrh	r3, [r7, #22]
 800a2a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d01b      	beq.n	800a2e2 <USB_EPClearStall+0x106>
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	4413      	add	r3, r2
 800a2b4:	881b      	ldrh	r3, [r3, #0]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2c0:	82bb      	strh	r3, [r7, #20]
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	441a      	add	r2, r3
 800a2cc:	8abb      	ldrh	r3, [r7, #20]
 800a2ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2f8:	827b      	strh	r3, [r7, #18]
 800a2fa:	8a7b      	ldrh	r3, [r7, #18]
 800a2fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a300:	827b      	strh	r3, [r7, #18]
 800a302:	8a7b      	ldrh	r3, [r7, #18]
 800a304:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a308:	827b      	strh	r3, [r7, #18]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	441a      	add	r2, r3
 800a314:	8a7b      	ldrh	r3, [r7, #18]
 800a316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a31a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a31e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a326:	b29b      	uxth	r3, r3
 800a328:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	371c      	adds	r7, #28
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a344:	78fb      	ldrb	r3, [r7, #3]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d103      	bne.n	800a352 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2280      	movs	r2, #128	; 0x80
 800a34e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a36e:	b29b      	uxth	r3, r3
 800a370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a378:	b29a      	uxth	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a38e:	b480      	push	{r7}
 800a390:	b085      	sub	sp, #20
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b083      	sub	sp, #12
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b08d      	sub	sp, #52	; 0x34
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	80fb      	strh	r3, [r7, #6]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a3dc:	88bb      	ldrh	r3, [r7, #4]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	085b      	lsrs	r3, r3, #1
 800a3e2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a3ec:	88fa      	ldrh	r2, [r7, #6]
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3f6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3fc:	e01b      	b.n	800a436 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	3301      	adds	r3, #1
 800a408:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	b29b      	uxth	r3, r3
 800a410:	021b      	lsls	r3, r3, #8
 800a412:	b29b      	uxth	r3, r3
 800a414:	461a      	mov	r2, r3
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	4313      	orrs	r3, r2
 800a41a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	b29a      	uxth	r2, r3
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	3302      	adds	r3, #2
 800a428:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	3301      	adds	r3, #1
 800a42e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a432:	3b01      	subs	r3, #1
 800a434:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1e0      	bne.n	800a3fe <USB_WritePMA+0x38>
  }
}
 800a43c:	bf00      	nop
 800a43e:	3734      	adds	r7, #52	; 0x34
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a448:	b480      	push	{r7}
 800a44a:	b08b      	sub	sp, #44	; 0x2c
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4611      	mov	r1, r2
 800a454:	461a      	mov	r2, r3
 800a456:	460b      	mov	r3, r1
 800a458:	80fb      	strh	r3, [r7, #6]
 800a45a:	4613      	mov	r3, r2
 800a45c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a45e:	88bb      	ldrh	r3, [r7, #4]
 800a460:	085b      	lsrs	r3, r3, #1
 800a462:	b29b      	uxth	r3, r3
 800a464:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a46e:	88fa      	ldrh	r2, [r7, #6]
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	4413      	add	r3, r2
 800a474:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a478:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	627b      	str	r3, [r7, #36]	; 0x24
 800a47e:	e018      	b.n	800a4b2 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a480:	6a3b      	ldr	r3, [r7, #32]
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	b29b      	uxth	r3, r3
 800a486:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	3302      	adds	r3, #2
 800a48c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	b2da      	uxtb	r2, r3
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	3301      	adds	r3, #1
 800a49a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	0a1b      	lsrs	r3, r3, #8
 800a4a0:	b2da      	uxtb	r2, r3
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1e3      	bne.n	800a480 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a4b8:	88bb      	ldrh	r3, [r7, #4]
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d007      	beq.n	800a4d4 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	881b      	ldrh	r3, [r3, #0]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	701a      	strb	r2, [r3, #0]
  }
}
 800a4d4:	bf00      	nop
 800a4d6:	372c      	adds	r7, #44	; 0x2c
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a4ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a4f0:	f008 ff56 	bl	80133a0 <USBD_static_malloc>
 800a4f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d105      	bne.n	800a508 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a504:	2302      	movs	r3, #2
 800a506:	e066      	b.n	800a5d6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	7c1b      	ldrb	r3, [r3, #16]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d119      	bne.n	800a54c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a51c:	2202      	movs	r2, #2
 800a51e:	2181      	movs	r1, #129	; 0x81
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f008 fe20 	bl	8013166 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a52c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a530:	2202      	movs	r2, #2
 800a532:	2101      	movs	r1, #1
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f008 fe16 	bl	8013166 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2210      	movs	r2, #16
 800a546:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a54a:	e016      	b.n	800a57a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a54c:	2340      	movs	r3, #64	; 0x40
 800a54e:	2202      	movs	r2, #2
 800a550:	2181      	movs	r1, #129	; 0x81
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f008 fe07 	bl	8013166 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a55e:	2340      	movs	r3, #64	; 0x40
 800a560:	2202      	movs	r2, #2
 800a562:	2101      	movs	r1, #1
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f008 fdfe 	bl	8013166 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2210      	movs	r2, #16
 800a576:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a57a:	2308      	movs	r3, #8
 800a57c:	2203      	movs	r2, #3
 800a57e:	2182      	movs	r1, #130	; 0x82
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f008 fdf0 	bl	8013166 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	7c1b      	ldrb	r3, [r3, #16]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d109      	bne.n	800a5c4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5ba:	2101      	movs	r1, #1
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f008 febb 	bl	8013338 <USBD_LL_PrepareReceive>
 800a5c2:	e007      	b.n	800a5d4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5ca:	2340      	movs	r3, #64	; 0x40
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f008 feb2 	bl	8013338 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b082      	sub	sp, #8
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a5ea:	2181      	movs	r1, #129	; 0x81
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f008 fde0 	bl	80131b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a5f8:	2101      	movs	r1, #1
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f008 fdd9 	bl	80131b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a608:	2182      	movs	r1, #130	; 0x82
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f008 fdd1 	bl	80131b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00e      	beq.n	800a648 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a63a:	4618      	mov	r0, r3
 800a63c:	f008 febe 	bl	80133bc <USBD_static_free>
    pdev->pClassData = NULL;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
	...

0800a654 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a664:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a66a:	2300      	movs	r3, #0
 800a66c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d101      	bne.n	800a67c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a678:	2303      	movs	r3, #3
 800a67a:	e0af      	b.n	800a7dc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a684:	2b00      	cmp	r3, #0
 800a686:	d03f      	beq.n	800a708 <USBD_CDC_Setup+0xb4>
 800a688:	2b20      	cmp	r3, #32
 800a68a:	f040 809f 	bne.w	800a7cc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	88db      	ldrh	r3, [r3, #6]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d02e      	beq.n	800a6f4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	b25b      	sxtb	r3, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	da16      	bge.n	800a6ce <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	683a      	ldr	r2, [r7, #0]
 800a6aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a6ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	88d2      	ldrh	r2, [r2, #6]
 800a6b2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	88db      	ldrh	r3, [r3, #6]
 800a6b8:	2b07      	cmp	r3, #7
 800a6ba:	bf28      	it	cs
 800a6bc:	2307      	movcs	r3, #7
 800a6be:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	89fa      	ldrh	r2, [r7, #14]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f001 fa94 	bl	800bbf4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a6cc:	e085      	b.n	800a7da <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	785a      	ldrb	r2, [r3, #1]
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	88db      	ldrh	r3, [r3, #6]
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a6e4:	6939      	ldr	r1, [r7, #16]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	88db      	ldrh	r3, [r3, #6]
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f001 faad 	bl	800bc4c <USBD_CtlPrepareRx>
      break;
 800a6f2:	e072      	b.n	800a7da <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	7850      	ldrb	r0, [r2, #1]
 800a700:	2200      	movs	r2, #0
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	4798      	blx	r3
      break;
 800a706:	e068      	b.n	800a7da <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	785b      	ldrb	r3, [r3, #1]
 800a70c:	2b0b      	cmp	r3, #11
 800a70e:	d852      	bhi.n	800a7b6 <USBD_CDC_Setup+0x162>
 800a710:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <USBD_CDC_Setup+0xc4>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a749 	.word	0x0800a749
 800a71c:	0800a7c5 	.word	0x0800a7c5
 800a720:	0800a7b7 	.word	0x0800a7b7
 800a724:	0800a7b7 	.word	0x0800a7b7
 800a728:	0800a7b7 	.word	0x0800a7b7
 800a72c:	0800a7b7 	.word	0x0800a7b7
 800a730:	0800a7b7 	.word	0x0800a7b7
 800a734:	0800a7b7 	.word	0x0800a7b7
 800a738:	0800a7b7 	.word	0x0800a7b7
 800a73c:	0800a7b7 	.word	0x0800a7b7
 800a740:	0800a773 	.word	0x0800a773
 800a744:	0800a79d 	.word	0x0800a79d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b03      	cmp	r3, #3
 800a752:	d107      	bne.n	800a764 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a754:	f107 030a 	add.w	r3, r7, #10
 800a758:	2202      	movs	r2, #2
 800a75a:	4619      	mov	r1, r3
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f001 fa49 	bl	800bbf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a762:	e032      	b.n	800a7ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a764:	6839      	ldr	r1, [r7, #0]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f001 f9d3 	bl	800bb12 <USBD_CtlError>
            ret = USBD_FAIL;
 800a76c:	2303      	movs	r3, #3
 800a76e:	75fb      	strb	r3, [r7, #23]
          break;
 800a770:	e02b      	b.n	800a7ca <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d107      	bne.n	800a78e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a77e:	f107 030d 	add.w	r3, r7, #13
 800a782:	2201      	movs	r2, #1
 800a784:	4619      	mov	r1, r3
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f001 fa34 	bl	800bbf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a78c:	e01d      	b.n	800a7ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a78e:	6839      	ldr	r1, [r7, #0]
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f001 f9be 	bl	800bb12 <USBD_CtlError>
            ret = USBD_FAIL;
 800a796:	2303      	movs	r3, #3
 800a798:	75fb      	strb	r3, [r7, #23]
          break;
 800a79a:	e016      	b.n	800a7ca <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	2b03      	cmp	r3, #3
 800a7a6:	d00f      	beq.n	800a7c8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a7a8:	6839      	ldr	r1, [r7, #0]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f001 f9b1 	bl	800bb12 <USBD_CtlError>
            ret = USBD_FAIL;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a7b4:	e008      	b.n	800a7c8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f001 f9aa 	bl	800bb12 <USBD_CtlError>
          ret = USBD_FAIL;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	75fb      	strb	r3, [r7, #23]
          break;
 800a7c2:	e002      	b.n	800a7ca <USBD_CDC_Setup+0x176>
          break;
 800a7c4:	bf00      	nop
 800a7c6:	e008      	b.n	800a7da <USBD_CDC_Setup+0x186>
          break;
 800a7c8:	bf00      	nop
      }
      break;
 800a7ca:	e006      	b.n	800a7da <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a7cc:	6839      	ldr	r1, [r7, #0]
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f001 f99f 	bl	800bb12 <USBD_CtlError>
      ret = USBD_FAIL;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7d8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d101      	bne.n	800a806 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a802:	2303      	movs	r3, #3
 800a804:	e04c      	b.n	800a8a0 <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a80c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a80e:	78fa      	ldrb	r2, [r7, #3]
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	440b      	add	r3, r1
 800a81c:	3318      	adds	r3, #24
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d026      	beq.n	800a872 <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a824:	78fa      	ldrb	r2, [r7, #3]
 800a826:	6879      	ldr	r1, [r7, #4]
 800a828:	4613      	mov	r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4413      	add	r3, r2
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	440b      	add	r3, r1
 800a832:	3318      	adds	r3, #24
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	78fa      	ldrb	r2, [r7, #3]
 800a838:	68f9      	ldr	r1, [r7, #12]
 800a83a:	0152      	lsls	r2, r2, #5
 800a83c:	440a      	add	r2, r1
 800a83e:	3238      	adds	r2, #56	; 0x38
 800a840:	6812      	ldr	r2, [r2, #0]
 800a842:	fbb3 f1f2 	udiv	r1, r3, r2
 800a846:	fb02 f201 	mul.w	r2, r2, r1
 800a84a:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d110      	bne.n	800a872 <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a850:	78fa      	ldrb	r2, [r7, #3]
 800a852:	6879      	ldr	r1, [r7, #4]
 800a854:	4613      	mov	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	440b      	add	r3, r1
 800a85e:	3318      	adds	r3, #24
 800a860:	2200      	movs	r2, #0
 800a862:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a864:	78f9      	ldrb	r1, [r7, #3]
 800a866:	2300      	movs	r3, #0
 800a868:	2200      	movs	r2, #0
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f008 fd43 	bl	80132f6 <USBD_LL_Transmit>
 800a870:	e015      	b.n	800a89e <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	2200      	movs	r2, #0
 800a876:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00b      	beq.n	800a89e <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a89a:	78fa      	ldrb	r2, [r7, #3]
 800a89c:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	e015      	b.n	800a8f6 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a8ca:	78fb      	ldrb	r3, [r7, #3]
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f008 fd53 	bl	801337a <USBD_LL_GetRxDataSize>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b084      	sub	sp, #16
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a90c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a914:	2303      	movs	r3, #3
 800a916:	e01b      	b.n	800a950 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d015      	beq.n	800a94e <USBD_CDC_EP0_RxReady+0x50>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a928:	2bff      	cmp	r3, #255	; 0xff
 800a92a:	d010      	beq.n	800a94e <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a93a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a942:	b292      	uxth	r2, r2
 800a944:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	22ff      	movs	r2, #255	; 0xff
 800a94a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2243      	movs	r2, #67	; 0x43
 800a964:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a966:	4b03      	ldr	r3, [pc, #12]	; (800a974 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a968:	4618      	mov	r0, r3
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	200000b0 	.word	0x200000b0

0800a978 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2243      	movs	r2, #67	; 0x43
 800a984:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a986:	4b03      	ldr	r3, [pc, #12]	; (800a994 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a988:	4618      	mov	r0, r3
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	2000006c 	.word	0x2000006c

0800a998 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2243      	movs	r2, #67	; 0x43
 800a9a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a9a6:	4b03      	ldr	r3, [pc, #12]	; (800a9b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	200000f4 	.word	0x200000f4

0800a9b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	220a      	movs	r2, #10
 800a9c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a9c6:	4b03      	ldr	r3, [pc, #12]	; (800a9d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	20000028 	.word	0x20000028

0800a9d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	e004      	b.n	800a9f6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b087      	sub	sp, #28
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	60f8      	str	r0, [r7, #12]
 800aa0a:	60b9      	str	r1, [r7, #8]
 800aa0c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa14:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d101      	bne.n	800aa20 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	e008      	b.n	800aa32 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	371c      	adds	r7, #28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b085      	sub	sp, #20
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa4e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d101      	bne.n	800aa5a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800aa56:	2303      	movs	r3, #3
 800aa58:	e004      	b.n	800aa64 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa7e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800aa80:	2301      	movs	r3, #1
 800aa82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e01a      	b.n	800aac8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d114      	bne.n	800aac6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aaba:	2181      	movs	r1, #129	; 0x81
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f008 fc1a 	bl	80132f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aade:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e016      	b.n	800ab1c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	7c1b      	ldrb	r3, [r3, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d109      	bne.n	800ab0a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aafc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab00:	2101      	movs	r1, #1
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f008 fc18 	bl	8013338 <USBD_LL_PrepareReceive>
 800ab08:	e007      	b.n	800ab1a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab10:	2340      	movs	r3, #64	; 0x40
 800ab12:	2101      	movs	r1, #1
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f008 fc0f 	bl	8013338 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ab38:	2303      	movs	r3, #3
 800ab3a:	e01f      	b.n	800ab7c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d003      	beq.n	800ab62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	79fa      	ldrb	r2, [r7, #7]
 800ab6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f008 fa7b 	bl	801306c <USBD_LL_Init>
 800ab76:	4603      	mov	r3, r0
 800ab78:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ab7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e016      	b.n	800abca <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00b      	beq.n	800abc8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb8:	f107 020e 	add.w	r2, r7, #14
 800abbc:	4610      	mov	r0, r2
 800abbe:	4798      	blx	r3
 800abc0:	4602      	mov	r2, r0
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b082      	sub	sp, #8
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f008 faa8 	bl	8013130 <USBD_LL_Start>
 800abe0:	4603      	mov	r3, r0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800abea:	b480      	push	{r7}
 800abec:	b083      	sub	sp, #12
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d009      	beq.n	800ac2e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	78fa      	ldrb	r2, [r7, #3]
 800ac24:	4611      	mov	r1, r2
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	4798      	blx	r3
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	460b      	mov	r3, r1
 800ac42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d007      	beq.n	800ac5e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	78fa      	ldrb	r2, [r7, #3]
 800ac58:	4611      	mov	r1, r2
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	4798      	blx	r3
  }

  return USBD_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 ff0f 	bl	800ba9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ac8e:	461a      	mov	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac9c:	f003 031f 	and.w	r3, r3, #31
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d00e      	beq.n	800acc2 <USBD_LL_SetupStage+0x5a>
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d302      	bcc.n	800acae <USBD_LL_SetupStage+0x46>
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	d014      	beq.n	800acd6 <USBD_LL_SetupStage+0x6e>
 800acac:	e01d      	b.n	800acea <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f9ee 	bl	800b098 <USBD_StdDevReq>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73fb      	strb	r3, [r7, #15]
      break;
 800acc0:	e020      	b.n	800ad04 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acc8:	4619      	mov	r1, r3
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fa52 	bl	800b174 <USBD_StdItfReq>
 800acd0:	4603      	mov	r3, r0
 800acd2:	73fb      	strb	r3, [r7, #15]
      break;
 800acd4:	e016      	b.n	800ad04 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fa8f 	bl	800b202 <USBD_StdEPReq>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]
      break;
 800ace8:	e00c      	b.n	800ad04 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800acf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	4619      	mov	r1, r3
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f008 fa79 	bl	80131f0 <USBD_LL_StallEP>
 800acfe:	4603      	mov	r3, r0
 800ad00:	73fb      	strb	r3, [r7, #15]
      break;
 800ad02:	bf00      	nop
  }

  return ret;
 800ad04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b086      	sub	sp, #24
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	60f8      	str	r0, [r7, #12]
 800ad16:	460b      	mov	r3, r1
 800ad18:	607a      	str	r2, [r7, #4]
 800ad1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ad1c:	7afb      	ldrb	r3, [r7, #11]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d138      	bne.n	800ad94 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ad28:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad30:	2b03      	cmp	r3, #3
 800ad32:	d14a      	bne.n	800adca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	689a      	ldr	r2, [r3, #8]
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d913      	bls.n	800ad68 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	689a      	ldr	r2, [r3, #8]
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	1ad2      	subs	r2, r2, r3
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	68da      	ldr	r2, [r3, #12]
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	4293      	cmp	r3, r2
 800ad58:	bf28      	it	cs
 800ad5a:	4613      	movcs	r3, r2
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	6879      	ldr	r1, [r7, #4]
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f000 ff90 	bl	800bc86 <USBD_CtlContinueRx>
 800ad66:	e030      	b.n	800adca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b03      	cmp	r3, #3
 800ad72:	d10b      	bne.n	800ad8c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d005      	beq.n	800ad8c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f000 ff8b 	bl	800bca8 <USBD_CtlSendStatus>
 800ad92:	e01a      	b.n	800adca <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	2b03      	cmp	r3, #3
 800ad9e:	d114      	bne.n	800adca <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00e      	beq.n	800adca <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb2:	699b      	ldr	r3, [r3, #24]
 800adb4:	7afa      	ldrb	r2, [r7, #11]
 800adb6:	4611      	mov	r1, r2
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	4798      	blx	r3
 800adbc:	4603      	mov	r3, r0
 800adbe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800adc0:	7dfb      	ldrb	r3, [r7, #23]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
 800adc8:	e000      	b.n	800adcc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3718      	adds	r7, #24
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	460b      	mov	r3, r1
 800adde:	607a      	str	r2, [r7, #4]
 800ade0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ade2:	7afb      	ldrb	r3, [r7, #11]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d16b      	bne.n	800aec0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3314      	adds	r3, #20
 800adec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d156      	bne.n	800aea6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	689a      	ldr	r2, [r3, #8]
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d914      	bls.n	800ae2e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	689a      	ldr	r2, [r3, #8]
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	1ad2      	subs	r2, r2, r3
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	461a      	mov	r2, r3
 800ae18:	6879      	ldr	r1, [r7, #4]
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f000 ff05 	bl	800bc2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae20:	2300      	movs	r3, #0
 800ae22:	2200      	movs	r2, #0
 800ae24:	2100      	movs	r1, #0
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f008 fa86 	bl	8013338 <USBD_LL_PrepareReceive>
 800ae2c:	e03b      	b.n	800aea6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	68da      	ldr	r2, [r3, #12]
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d11c      	bne.n	800ae74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	685a      	ldr	r2, [r3, #4]
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d316      	bcc.n	800ae74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	685a      	ldr	r2, [r3, #4]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d20f      	bcs.n	800ae74 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae54:	2200      	movs	r2, #0
 800ae56:	2100      	movs	r1, #0
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f000 fee6 	bl	800bc2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae66:	2300      	movs	r3, #0
 800ae68:	2200      	movs	r2, #0
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f008 fa63 	bl	8013338 <USBD_LL_PrepareReceive>
 800ae72:	e018      	b.n	800aea6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d10b      	bne.n	800ae98 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d005      	beq.n	800ae98 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae98:	2180      	movs	r1, #128	; 0x80
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f008 f9a8 	bl	80131f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f000 ff14 	bl	800bcce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d122      	bne.n	800aef6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f7ff fe9a 	bl	800abea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aebe:	e01a      	b.n	800aef6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	2b03      	cmp	r3, #3
 800aeca:	d114      	bne.n	800aef6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aed2:	695b      	ldr	r3, [r3, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d00e      	beq.n	800aef6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aede:	695b      	ldr	r3, [r3, #20]
 800aee0:	7afa      	ldrb	r2, [r7, #11]
 800aee2:	4611      	mov	r1, r2
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	4798      	blx	r3
 800aee8:	4603      	mov	r3, r0
 800aeea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aeec:	7dfb      	ldrb	r3, [r7, #23]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	e000      	b.n	800aef8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d101      	bne.n	800af34 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800af30:	2303      	movs	r3, #3
 800af32:	e02f      	b.n	800af94 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00f      	beq.n	800af5e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d009      	beq.n	800af5e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	6852      	ldr	r2, [r2, #4]
 800af56:	b2d2      	uxtb	r2, r2
 800af58:	4611      	mov	r1, r2
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af5e:	2340      	movs	r3, #64	; 0x40
 800af60:	2200      	movs	r2, #0
 800af62:	2100      	movs	r1, #0
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f008 f8fe 	bl	8013166 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2240      	movs	r2, #64	; 0x40
 800af76:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af7a:	2340      	movs	r3, #64	; 0x40
 800af7c:	2200      	movs	r2, #0
 800af7e:	2180      	movs	r1, #128	; 0x80
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f008 f8f0 	bl	8013166 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2201      	movs	r2, #1
 800af8a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2240      	movs	r2, #64	; 0x40
 800af90:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	460b      	mov	r3, r1
 800afa6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	78fa      	ldrb	r2, [r7, #3]
 800afac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2204      	movs	r2, #4
 800afd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	2b04      	cmp	r3, #4
 800affa:	d106      	bne.n	800b00a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b002:	b2da      	uxtb	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b026:	2b00      	cmp	r3, #0
 800b028:	d101      	bne.n	800b02e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b02a:	2303      	movs	r3, #3
 800b02c:	e012      	b.n	800b054 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b03      	cmp	r3, #3
 800b038:	d10b      	bne.n	800b052 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b040:	69db      	ldr	r3, [r3, #28]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d005      	beq.n	800b052 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b04c:	69db      	ldr	r3, [r3, #28]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	3301      	adds	r3, #1
 800b072:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b07a:	8a3b      	ldrh	r3, [r7, #16]
 800b07c:	021b      	lsls	r3, r3, #8
 800b07e:	b21a      	sxth	r2, r3
 800b080:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b084:	4313      	orrs	r3, r2
 800b086:	b21b      	sxth	r3, r3
 800b088:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b08a:	89fb      	ldrh	r3, [r7, #14]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	371c      	adds	r7, #28
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0ae:	2b20      	cmp	r3, #32
 800b0b0:	d004      	beq.n	800b0bc <USBD_StdDevReq+0x24>
 800b0b2:	2b40      	cmp	r3, #64	; 0x40
 800b0b4:	d002      	beq.n	800b0bc <USBD_StdDevReq+0x24>
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00a      	beq.n	800b0d0 <USBD_StdDevReq+0x38>
 800b0ba:	e050      	b.n	800b15e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	4798      	blx	r3
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ce:	e04b      	b.n	800b168 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	785b      	ldrb	r3, [r3, #1]
 800b0d4:	2b09      	cmp	r3, #9
 800b0d6:	d83c      	bhi.n	800b152 <USBD_StdDevReq+0xba>
 800b0d8:	a201      	add	r2, pc, #4	; (adr r2, 800b0e0 <USBD_StdDevReq+0x48>)
 800b0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0de:	bf00      	nop
 800b0e0:	0800b135 	.word	0x0800b135
 800b0e4:	0800b149 	.word	0x0800b149
 800b0e8:	0800b153 	.word	0x0800b153
 800b0ec:	0800b13f 	.word	0x0800b13f
 800b0f0:	0800b153 	.word	0x0800b153
 800b0f4:	0800b113 	.word	0x0800b113
 800b0f8:	0800b109 	.word	0x0800b109
 800b0fc:	0800b153 	.word	0x0800b153
 800b100:	0800b12b 	.word	0x0800b12b
 800b104:	0800b11d 	.word	0x0800b11d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f9d4 	bl	800b4b8 <USBD_GetDescriptor>
          break;
 800b110:	e024      	b.n	800b15c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fb39 	bl	800b78c <USBD_SetAddress>
          break;
 800b11a:	e01f      	b.n	800b15c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fb78 	bl	800b814 <USBD_SetConfig>
 800b124:	4603      	mov	r3, r0
 800b126:	73fb      	strb	r3, [r7, #15]
          break;
 800b128:	e018      	b.n	800b15c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b12a:	6839      	ldr	r1, [r7, #0]
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fc17 	bl	800b960 <USBD_GetConfig>
          break;
 800b132:	e013      	b.n	800b15c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fc47 	bl	800b9ca <USBD_GetStatus>
          break;
 800b13c:	e00e      	b.n	800b15c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fc76 	bl	800ba32 <USBD_SetFeature>
          break;
 800b146:	e009      	b.n	800b15c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b148:	6839      	ldr	r1, [r7, #0]
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fc85 	bl	800ba5a <USBD_ClrFeature>
          break;
 800b150:	e004      	b.n	800b15c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 fcdc 	bl	800bb12 <USBD_CtlError>
          break;
 800b15a:	bf00      	nop
      }
      break;
 800b15c:	e004      	b.n	800b168 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fcd6 	bl	800bb12 <USBD_CtlError>
      break;
 800b166:	bf00      	nop
  }

  return ret;
 800b168:	7bfb      	ldrb	r3, [r7, #15]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop

0800b174 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b17e:	2300      	movs	r3, #0
 800b180:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b18a:	2b20      	cmp	r3, #32
 800b18c:	d003      	beq.n	800b196 <USBD_StdItfReq+0x22>
 800b18e:	2b40      	cmp	r3, #64	; 0x40
 800b190:	d001      	beq.n	800b196 <USBD_StdItfReq+0x22>
 800b192:	2b00      	cmp	r3, #0
 800b194:	d12b      	bne.n	800b1ee <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d81d      	bhi.n	800b1e0 <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	889b      	ldrh	r3, [r3, #4]
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d813      	bhi.n	800b1d6 <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	4798      	blx	r3
 800b1bc:	4603      	mov	r3, r0
 800b1be:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	88db      	ldrh	r3, [r3, #6]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d110      	bne.n	800b1ea <USBD_StdItfReq+0x76>
 800b1c8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d10d      	bne.n	800b1ea <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fd6a 	bl	800bca8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b1d4:	e009      	b.n	800b1ea <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fc9a 	bl	800bb12 <USBD_CtlError>
          break;
 800b1de:	e004      	b.n	800b1ea <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fc95 	bl	800bb12 <USBD_CtlError>
          break;
 800b1e8:	e000      	b.n	800b1ec <USBD_StdItfReq+0x78>
          break;
 800b1ea:	bf00      	nop
      }
      break;
 800b1ec:	e004      	b.n	800b1f8 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 800b1ee:	6839      	ldr	r1, [r7, #0]
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fc8e 	bl	800bb12 <USBD_CtlError>
      break;
 800b1f6:	bf00      	nop
  }

  return ret;
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b084      	sub	sp, #16
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b20c:	2300      	movs	r3, #0
 800b20e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	889b      	ldrh	r3, [r3, #4]
 800b214:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b21e:	2b20      	cmp	r3, #32
 800b220:	d004      	beq.n	800b22c <USBD_StdEPReq+0x2a>
 800b222:	2b40      	cmp	r3, #64	; 0x40
 800b224:	d002      	beq.n	800b22c <USBD_StdEPReq+0x2a>
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00a      	beq.n	800b240 <USBD_StdEPReq+0x3e>
 800b22a:	e13a      	b.n	800b4a2 <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	4798      	blx	r3
 800b23a:	4603      	mov	r3, r0
 800b23c:	73fb      	strb	r3, [r7, #15]
      break;
 800b23e:	e135      	b.n	800b4ac <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	785b      	ldrb	r3, [r3, #1]
 800b244:	2b01      	cmp	r3, #1
 800b246:	d03f      	beq.n	800b2c8 <USBD_StdEPReq+0xc6>
 800b248:	2b03      	cmp	r3, #3
 800b24a:	d002      	beq.n	800b252 <USBD_StdEPReq+0x50>
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d07b      	beq.n	800b348 <USBD_StdEPReq+0x146>
 800b250:	e121      	b.n	800b496 <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d002      	beq.n	800b264 <USBD_StdEPReq+0x62>
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d015      	beq.n	800b28e <USBD_StdEPReq+0x8c>
 800b262:	e02b      	b.n	800b2bc <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b264:	7bbb      	ldrb	r3, [r7, #14]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00c      	beq.n	800b284 <USBD_StdEPReq+0x82>
 800b26a:	7bbb      	ldrb	r3, [r7, #14]
 800b26c:	2b80      	cmp	r3, #128	; 0x80
 800b26e:	d009      	beq.n	800b284 <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b270:	7bbb      	ldrb	r3, [r7, #14]
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f007 ffbb 	bl	80131f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b27a:	2180      	movs	r1, #128	; 0x80
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f007 ffb7 	bl	80131f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b282:	e020      	b.n	800b2c6 <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fc43 	bl	800bb12 <USBD_CtlError>
              break;
 800b28c:	e01b      	b.n	800b2c6 <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	885b      	ldrh	r3, [r3, #2]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10e      	bne.n	800b2b4 <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b296:	7bbb      	ldrb	r3, [r7, #14]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00b      	beq.n	800b2b4 <USBD_StdEPReq+0xb2>
 800b29c:	7bbb      	ldrb	r3, [r7, #14]
 800b29e:	2b80      	cmp	r3, #128	; 0x80
 800b2a0:	d008      	beq.n	800b2b4 <USBD_StdEPReq+0xb2>
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	88db      	ldrh	r3, [r3, #6]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d104      	bne.n	800b2b4 <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2aa:	7bbb      	ldrb	r3, [r7, #14]
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f007 ff9e 	bl	80131f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fcf7 	bl	800bca8 <USBD_CtlSendStatus>

              break;
 800b2ba:	e004      	b.n	800b2c6 <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 800b2bc:	6839      	ldr	r1, [r7, #0]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fc27 	bl	800bb12 <USBD_CtlError>
              break;
 800b2c4:	bf00      	nop
          }
          break;
 800b2c6:	e0eb      	b.n	800b4a0 <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d002      	beq.n	800b2da <USBD_StdEPReq+0xd8>
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	d015      	beq.n	800b304 <USBD_StdEPReq+0x102>
 800b2d8:	e02f      	b.n	800b33a <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2da:	7bbb      	ldrb	r3, [r7, #14]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00c      	beq.n	800b2fa <USBD_StdEPReq+0xf8>
 800b2e0:	7bbb      	ldrb	r3, [r7, #14]
 800b2e2:	2b80      	cmp	r3, #128	; 0x80
 800b2e4:	d009      	beq.n	800b2fa <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2e6:	7bbb      	ldrb	r3, [r7, #14]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f007 ff80 	bl	80131f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2f0:	2180      	movs	r1, #128	; 0x80
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f007 ff7c 	bl	80131f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2f8:	e025      	b.n	800b346 <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fc08 	bl	800bb12 <USBD_CtlError>
              break;
 800b302:	e020      	b.n	800b346 <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	885b      	ldrh	r3, [r3, #2]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d11b      	bne.n	800b344 <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b30c:	7bbb      	ldrb	r3, [r7, #14]
 800b30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b312:	2b00      	cmp	r3, #0
 800b314:	d004      	beq.n	800b320 <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	4619      	mov	r1, r3
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f007 ff87 	bl	801322e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fcc1 	bl	800bca8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	4798      	blx	r3
 800b334:	4603      	mov	r3, r0
 800b336:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b338:	e004      	b.n	800b344 <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fbe8 	bl	800bb12 <USBD_CtlError>
              break;
 800b342:	e000      	b.n	800b346 <USBD_StdEPReq+0x144>
              break;
 800b344:	bf00      	nop
          }
          break;
 800b346:	e0ab      	b.n	800b4a0 <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	2b02      	cmp	r3, #2
 800b352:	d002      	beq.n	800b35a <USBD_StdEPReq+0x158>
 800b354:	2b03      	cmp	r3, #3
 800b356:	d032      	beq.n	800b3be <USBD_StdEPReq+0x1bc>
 800b358:	e097      	b.n	800b48a <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d007      	beq.n	800b370 <USBD_StdEPReq+0x16e>
 800b360:	7bbb      	ldrb	r3, [r7, #14]
 800b362:	2b80      	cmp	r3, #128	; 0x80
 800b364:	d004      	beq.n	800b370 <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 800b366:	6839      	ldr	r1, [r7, #0]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 fbd2 	bl	800bb12 <USBD_CtlError>
                break;
 800b36e:	e091      	b.n	800b494 <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b374:	2b00      	cmp	r3, #0
 800b376:	da0b      	bge.n	800b390 <USBD_StdEPReq+0x18e>
 800b378:	7bbb      	ldrb	r3, [r7, #14]
 800b37a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b37e:	4613      	mov	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	3310      	adds	r3, #16
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	4413      	add	r3, r2
 800b38c:	3304      	adds	r3, #4
 800b38e:	e00b      	b.n	800b3a8 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b390:	7bbb      	ldrb	r3, [r7, #14]
 800b392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b396:	4613      	mov	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4413      	add	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	3304      	adds	r3, #4
 800b3a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fc1c 	bl	800bbf4 <USBD_CtlSendData>
              break;
 800b3bc:	e06a      	b.n	800b494 <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b3be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	da11      	bge.n	800b3ea <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
 800b3c8:	f003 020f 	and.w	r2, r3, #15
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	4413      	add	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	440b      	add	r3, r1
 800b3d8:	3324      	adds	r3, #36	; 0x24
 800b3da:	881b      	ldrh	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d117      	bne.n	800b410 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fb95 	bl	800bb12 <USBD_CtlError>
                  break;
 800b3e8:	e054      	b.n	800b494 <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b3ea:	7bbb      	ldrb	r3, [r7, #14]
 800b3ec:	f003 020f 	and.w	r2, r3, #15
 800b3f0:	6879      	ldr	r1, [r7, #4]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4413      	add	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	440b      	add	r3, r1
 800b3fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d104      	bne.n	800b410 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fb82 	bl	800bb12 <USBD_CtlError>
                  break;
 800b40e:	e041      	b.n	800b494 <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b414:	2b00      	cmp	r3, #0
 800b416:	da0b      	bge.n	800b430 <USBD_StdEPReq+0x22e>
 800b418:	7bbb      	ldrb	r3, [r7, #14]
 800b41a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b41e:	4613      	mov	r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4413      	add	r3, r2
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	3310      	adds	r3, #16
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	4413      	add	r3, r2
 800b42c:	3304      	adds	r3, #4
 800b42e:	e00b      	b.n	800b448 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b430:	7bbb      	ldrb	r3, [r7, #14]
 800b432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b436:	4613      	mov	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	4413      	add	r3, r2
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	4413      	add	r3, r2
 800b446:	3304      	adds	r3, #4
 800b448:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b44a:	7bbb      	ldrb	r3, [r7, #14]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <USBD_StdEPReq+0x254>
 800b450:	7bbb      	ldrb	r3, [r7, #14]
 800b452:	2b80      	cmp	r3, #128	; 0x80
 800b454:	d103      	bne.n	800b45e <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	2200      	movs	r2, #0
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	e00e      	b.n	800b47c <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f007 ff02 	bl	801326c <USBD_LL_IsStallEP>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d003      	beq.n	800b476 <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	2201      	movs	r2, #1
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	e002      	b.n	800b47c <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	2200      	movs	r2, #0
 800b47a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	2202      	movs	r2, #2
 800b480:	4619      	mov	r1, r3
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fbb6 	bl	800bbf4 <USBD_CtlSendData>
              break;
 800b488:	e004      	b.n	800b494 <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 800b48a:	6839      	ldr	r1, [r7, #0]
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 fb40 	bl	800bb12 <USBD_CtlError>
              break;
 800b492:	bf00      	nop
          }
          break;
 800b494:	e004      	b.n	800b4a0 <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 fb3a 	bl	800bb12 <USBD_CtlError>
          break;
 800b49e:	bf00      	nop
      }
      break;
 800b4a0:	e004      	b.n	800b4ac <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fb34 	bl	800bb12 <USBD_CtlError>
      break;
 800b4aa:	bf00      	nop
  }

  return ret;
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
	...

0800b4b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	885b      	ldrh	r3, [r3, #2]
 800b4d2:	0a1b      	lsrs	r3, r3, #8
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	2b06      	cmp	r3, #6
 800b4da:	f200 8128 	bhi.w	800b72e <USBD_GetDescriptor+0x276>
 800b4de:	a201      	add	r2, pc, #4	; (adr r2, 800b4e4 <USBD_GetDescriptor+0x2c>)
 800b4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e4:	0800b501 	.word	0x0800b501
 800b4e8:	0800b519 	.word	0x0800b519
 800b4ec:	0800b559 	.word	0x0800b559
 800b4f0:	0800b72f 	.word	0x0800b72f
 800b4f4:	0800b72f 	.word	0x0800b72f
 800b4f8:	0800b6cf 	.word	0x0800b6cf
 800b4fc:	0800b6fb 	.word	0x0800b6fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	7c12      	ldrb	r2, [r2, #16]
 800b50c:	f107 0108 	add.w	r1, r7, #8
 800b510:	4610      	mov	r0, r2
 800b512:	4798      	blx	r3
 800b514:	60f8      	str	r0, [r7, #12]
      break;
 800b516:	e112      	b.n	800b73e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	7c1b      	ldrb	r3, [r3, #16]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10d      	bne.n	800b53c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b528:	f107 0208 	add.w	r2, r7, #8
 800b52c:	4610      	mov	r0, r2
 800b52e:	4798      	blx	r3
 800b530:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	3301      	adds	r3, #1
 800b536:	2202      	movs	r2, #2
 800b538:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b53a:	e100      	b.n	800b73e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b544:	f107 0208 	add.w	r2, r7, #8
 800b548:	4610      	mov	r0, r2
 800b54a:	4798      	blx	r3
 800b54c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	3301      	adds	r3, #1
 800b552:	2202      	movs	r2, #2
 800b554:	701a      	strb	r2, [r3, #0]
      break;
 800b556:	e0f2      	b.n	800b73e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	885b      	ldrh	r3, [r3, #2]
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b05      	cmp	r3, #5
 800b560:	f200 80ac 	bhi.w	800b6bc <USBD_GetDescriptor+0x204>
 800b564:	a201      	add	r2, pc, #4	; (adr r2, 800b56c <USBD_GetDescriptor+0xb4>)
 800b566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56a:	bf00      	nop
 800b56c:	0800b585 	.word	0x0800b585
 800b570:	0800b5b9 	.word	0x0800b5b9
 800b574:	0800b5ed 	.word	0x0800b5ed
 800b578:	0800b621 	.word	0x0800b621
 800b57c:	0800b655 	.word	0x0800b655
 800b580:	0800b689 	.word	0x0800b689
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00b      	beq.n	800b5a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	7c12      	ldrb	r2, [r2, #16]
 800b59c:	f107 0108 	add.w	r1, r7, #8
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	4798      	blx	r3
 800b5a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5a6:	e091      	b.n	800b6cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fab1 	bl	800bb12 <USBD_CtlError>
            err++;
 800b5b0:	7afb      	ldrb	r3, [r7, #11]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5b6:	e089      	b.n	800b6cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00b      	beq.n	800b5dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	7c12      	ldrb	r2, [r2, #16]
 800b5d0:	f107 0108 	add.w	r1, r7, #8
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	4798      	blx	r3
 800b5d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5da:	e077      	b.n	800b6cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5dc:	6839      	ldr	r1, [r7, #0]
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fa97 	bl	800bb12 <USBD_CtlError>
            err++;
 800b5e4:	7afb      	ldrb	r3, [r7, #11]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ea:	e06f      	b.n	800b6cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d00b      	beq.n	800b610 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	7c12      	ldrb	r2, [r2, #16]
 800b604:	f107 0108 	add.w	r1, r7, #8
 800b608:	4610      	mov	r0, r2
 800b60a:	4798      	blx	r3
 800b60c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b60e:	e05d      	b.n	800b6cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b610:	6839      	ldr	r1, [r7, #0]
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 fa7d 	bl	800bb12 <USBD_CtlError>
            err++;
 800b618:	7afb      	ldrb	r3, [r7, #11]
 800b61a:	3301      	adds	r3, #1
 800b61c:	72fb      	strb	r3, [r7, #11]
          break;
 800b61e:	e055      	b.n	800b6cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00b      	beq.n	800b644 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	7c12      	ldrb	r2, [r2, #16]
 800b638:	f107 0108 	add.w	r1, r7, #8
 800b63c:	4610      	mov	r0, r2
 800b63e:	4798      	blx	r3
 800b640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b642:	e043      	b.n	800b6cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b644:	6839      	ldr	r1, [r7, #0]
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fa63 	bl	800bb12 <USBD_CtlError>
            err++;
 800b64c:	7afb      	ldrb	r3, [r7, #11]
 800b64e:	3301      	adds	r3, #1
 800b650:	72fb      	strb	r3, [r7, #11]
          break;
 800b652:	e03b      	b.n	800b6cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00b      	beq.n	800b678 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b666:	695b      	ldr	r3, [r3, #20]
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	7c12      	ldrb	r2, [r2, #16]
 800b66c:	f107 0108 	add.w	r1, r7, #8
 800b670:	4610      	mov	r0, r2
 800b672:	4798      	blx	r3
 800b674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b676:	e029      	b.n	800b6cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fa49 	bl	800bb12 <USBD_CtlError>
            err++;
 800b680:	7afb      	ldrb	r3, [r7, #11]
 800b682:	3301      	adds	r3, #1
 800b684:	72fb      	strb	r3, [r7, #11]
          break;
 800b686:	e021      	b.n	800b6cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b68e:	699b      	ldr	r3, [r3, #24]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00b      	beq.n	800b6ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	7c12      	ldrb	r2, [r2, #16]
 800b6a0:	f107 0108 	add.w	r1, r7, #8
 800b6a4:	4610      	mov	r0, r2
 800b6a6:	4798      	blx	r3
 800b6a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6aa:	e00f      	b.n	800b6cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fa2f 	bl	800bb12 <USBD_CtlError>
            err++;
 800b6b4:	7afb      	ldrb	r3, [r7, #11]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b6ba:	e007      	b.n	800b6cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fa27 	bl	800bb12 <USBD_CtlError>
          err++;
 800b6c4:	7afb      	ldrb	r3, [r7, #11]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b6ca:	bf00      	nop
      }
      break;
 800b6cc:	e037      	b.n	800b73e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	7c1b      	ldrb	r3, [r3, #16]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d109      	bne.n	800b6ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6de:	f107 0208 	add.w	r2, r7, #8
 800b6e2:	4610      	mov	r0, r2
 800b6e4:	4798      	blx	r3
 800b6e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6e8:	e029      	b.n	800b73e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 fa10 	bl	800bb12 <USBD_CtlError>
        err++;
 800b6f2:	7afb      	ldrb	r3, [r7, #11]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	72fb      	strb	r3, [r7, #11]
      break;
 800b6f8:	e021      	b.n	800b73e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	7c1b      	ldrb	r3, [r3, #16]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10d      	bne.n	800b71e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70a:	f107 0208 	add.w	r2, r7, #8
 800b70e:	4610      	mov	r0, r2
 800b710:	4798      	blx	r3
 800b712:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	3301      	adds	r3, #1
 800b718:	2207      	movs	r2, #7
 800b71a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b71c:	e00f      	b.n	800b73e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b71e:	6839      	ldr	r1, [r7, #0]
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f9f6 	bl	800bb12 <USBD_CtlError>
        err++;
 800b726:	7afb      	ldrb	r3, [r7, #11]
 800b728:	3301      	adds	r3, #1
 800b72a:	72fb      	strb	r3, [r7, #11]
      break;
 800b72c:	e007      	b.n	800b73e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b72e:	6839      	ldr	r1, [r7, #0]
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 f9ee 	bl	800bb12 <USBD_CtlError>
      err++;
 800b736:	7afb      	ldrb	r3, [r7, #11]
 800b738:	3301      	adds	r3, #1
 800b73a:	72fb      	strb	r3, [r7, #11]
      break;
 800b73c:	bf00      	nop
  }

  if (err != 0U)
 800b73e:	7afb      	ldrb	r3, [r7, #11]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d11e      	bne.n	800b782 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	88db      	ldrh	r3, [r3, #6]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d016      	beq.n	800b77a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b74c:	893b      	ldrh	r3, [r7, #8]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00e      	beq.n	800b770 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	88da      	ldrh	r2, [r3, #6]
 800b756:	893b      	ldrh	r3, [r7, #8]
 800b758:	4293      	cmp	r3, r2
 800b75a:	bf28      	it	cs
 800b75c:	4613      	movcs	r3, r2
 800b75e:	b29b      	uxth	r3, r3
 800b760:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b762:	893b      	ldrh	r3, [r7, #8]
 800b764:	461a      	mov	r2, r3
 800b766:	68f9      	ldr	r1, [r7, #12]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fa43 	bl	800bbf4 <USBD_CtlSendData>
 800b76e:	e009      	b.n	800b784 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b770:	6839      	ldr	r1, [r7, #0]
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 f9cd 	bl	800bb12 <USBD_CtlError>
 800b778:	e004      	b.n	800b784 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fa94 	bl	800bca8 <USBD_CtlSendStatus>
 800b780:	e000      	b.n	800b784 <USBD_GetDescriptor+0x2cc>
    return;
 800b782:	bf00      	nop
  }
}
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop

0800b78c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	889b      	ldrh	r3, [r3, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d131      	bne.n	800b802 <USBD_SetAddress+0x76>
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	88db      	ldrh	r3, [r3, #6]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d12d      	bne.n	800b802 <USBD_SetAddress+0x76>
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	885b      	ldrh	r3, [r3, #2]
 800b7aa:	2b7f      	cmp	r3, #127	; 0x7f
 800b7ac:	d829      	bhi.n	800b802 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	885b      	ldrh	r3, [r3, #2]
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b03      	cmp	r3, #3
 800b7c4:	d104      	bne.n	800b7d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b7c6:	6839      	ldr	r1, [r7, #0]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f9a2 	bl	800bb12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ce:	e01c      	b.n	800b80a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	7bfa      	ldrb	r2, [r7, #15]
 800b7d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f007 fd6b 	bl	80132b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fa60 	bl	800bca8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d004      	beq.n	800b7f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2202      	movs	r2, #2
 800b7f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7f6:	e008      	b.n	800b80a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b800:	e003      	b.n	800b80a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b802:	6839      	ldr	r1, [r7, #0]
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f984 	bl	800bb12 <USBD_CtlError>
  }
}
 800b80a:	bf00      	nop
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	885b      	ldrh	r3, [r3, #2]
 800b826:	b2da      	uxtb	r2, r3
 800b828:	4b4c      	ldr	r3, [pc, #304]	; (800b95c <USBD_SetConfig+0x148>)
 800b82a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b82c:	4b4b      	ldr	r3, [pc, #300]	; (800b95c <USBD_SetConfig+0x148>)
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d905      	bls.n	800b840 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f96b 	bl	800bb12 <USBD_CtlError>
    return USBD_FAIL;
 800b83c:	2303      	movs	r3, #3
 800b83e:	e088      	b.n	800b952 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b846:	b2db      	uxtb	r3, r3
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d002      	beq.n	800b852 <USBD_SetConfig+0x3e>
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	d025      	beq.n	800b89c <USBD_SetConfig+0x88>
 800b850:	e071      	b.n	800b936 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b852:	4b42      	ldr	r3, [pc, #264]	; (800b95c <USBD_SetConfig+0x148>)
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d01c      	beq.n	800b894 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b85a:	4b40      	ldr	r3, [pc, #256]	; (800b95c <USBD_SetConfig+0x148>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b864:	4b3d      	ldr	r3, [pc, #244]	; (800b95c <USBD_SetConfig+0x148>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	4619      	mov	r1, r3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7ff f9c8 	bl	800ac00 <USBD_SetClassConfig>
 800b870:	4603      	mov	r3, r0
 800b872:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b874:	7bfb      	ldrb	r3, [r7, #15]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d004      	beq.n	800b884 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b87a:	6839      	ldr	r1, [r7, #0]
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 f948 	bl	800bb12 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b882:	e065      	b.n	800b950 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 fa0f 	bl	800bca8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2203      	movs	r2, #3
 800b88e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b892:	e05d      	b.n	800b950 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 fa07 	bl	800bca8 <USBD_CtlSendStatus>
      break;
 800b89a:	e059      	b.n	800b950 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b89c:	4b2f      	ldr	r3, [pc, #188]	; (800b95c <USBD_SetConfig+0x148>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d112      	bne.n	800b8ca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b8ac:	4b2b      	ldr	r3, [pc, #172]	; (800b95c <USBD_SetConfig+0x148>)
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8b6:	4b29      	ldr	r3, [pc, #164]	; (800b95c <USBD_SetConfig+0x148>)
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7ff f9bb 	bl	800ac38 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f9f0 	bl	800bca8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b8c8:	e042      	b.n	800b950 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b8ca:	4b24      	ldr	r3, [pc, #144]	; (800b95c <USBD_SetConfig+0x148>)
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d02a      	beq.n	800b92e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f7ff f9a9 	bl	800ac38 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b8e6:	4b1d      	ldr	r3, [pc, #116]	; (800b95c <USBD_SetConfig+0x148>)
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8f0:	4b1a      	ldr	r3, [pc, #104]	; (800b95c <USBD_SetConfig+0x148>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f7ff f982 	bl	800ac00 <USBD_SetClassConfig>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00f      	beq.n	800b926 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f902 	bl	800bb12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	b2db      	uxtb	r3, r3
 800b914:	4619      	mov	r1, r3
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7ff f98e 	bl	800ac38 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2202      	movs	r2, #2
 800b920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b924:	e014      	b.n	800b950 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f9be 	bl	800bca8 <USBD_CtlSendStatus>
      break;
 800b92c:	e010      	b.n	800b950 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f9ba 	bl	800bca8 <USBD_CtlSendStatus>
      break;
 800b934:	e00c      	b.n	800b950 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 f8ea 	bl	800bb12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b93e:	4b07      	ldr	r3, [pc, #28]	; (800b95c <USBD_SetConfig+0x148>)
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	4619      	mov	r1, r3
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f7ff f977 	bl	800ac38 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b94a:	2303      	movs	r3, #3
 800b94c:	73fb      	strb	r3, [r7, #15]
      break;
 800b94e:	bf00      	nop
  }

  return ret;
 800b950:	7bfb      	ldrb	r3, [r7, #15]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	20000304 	.word	0x20000304

0800b960 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	88db      	ldrh	r3, [r3, #6]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d004      	beq.n	800b97c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b972:	6839      	ldr	r1, [r7, #0]
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 f8cc 	bl	800bb12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b97a:	e022      	b.n	800b9c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b01      	cmp	r3, #1
 800b986:	db17      	blt.n	800b9b8 <USBD_GetConfig+0x58>
 800b988:	2b02      	cmp	r3, #2
 800b98a:	dd02      	ble.n	800b992 <USBD_GetConfig+0x32>
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	d00b      	beq.n	800b9a8 <USBD_GetConfig+0x48>
 800b990:	e012      	b.n	800b9b8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	3308      	adds	r3, #8
 800b99c:	2201      	movs	r2, #1
 800b99e:	4619      	mov	r1, r3
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 f927 	bl	800bbf4 <USBD_CtlSendData>
        break;
 800b9a6:	e00c      	b.n	800b9c2 <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f91f 	bl	800bbf4 <USBD_CtlSendData>
        break;
 800b9b6:	e004      	b.n	800b9c2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f8a9 	bl	800bb12 <USBD_CtlError>
        break;
 800b9c0:	bf00      	nop
}
 800b9c2:	bf00      	nop
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b082      	sub	sp, #8
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d81e      	bhi.n	800ba20 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	88db      	ldrh	r3, [r3, #6]
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d004      	beq.n	800b9f4 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b9ea:	6839      	ldr	r1, [r7, #0]
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f890 	bl	800bb12 <USBD_CtlError>
        break;
 800b9f2:	e01a      	b.n	800ba2a <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d005      	beq.n	800ba10 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	f043 0202 	orr.w	r2, r3, #2
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	330c      	adds	r3, #12
 800ba14:	2202      	movs	r2, #2
 800ba16:	4619      	mov	r1, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 f8eb 	bl	800bbf4 <USBD_CtlSendData>
      break;
 800ba1e:	e004      	b.n	800ba2a <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f875 	bl	800bb12 <USBD_CtlError>
      break;
 800ba28:	bf00      	nop
  }
}
 800ba2a:	bf00      	nop
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b082      	sub	sp, #8
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	885b      	ldrh	r3, [r3, #2]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d106      	bne.n	800ba52 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 f92b 	bl	800bca8 <USBD_CtlSendStatus>
  }
}
 800ba52:	bf00      	nop
 800ba54:	3708      	adds	r7, #8
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d80b      	bhi.n	800ba8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	885b      	ldrh	r3, [r3, #2]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d10c      	bne.n	800ba94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f910 	bl	800bca8 <USBD_CtlSendStatus>
      }
      break;
 800ba88:	e004      	b.n	800ba94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f840 	bl	800bb12 <USBD_CtlError>
      break;
 800ba92:	e000      	b.n	800ba96 <USBD_ClrFeature+0x3c>
      break;
 800ba94:	bf00      	nop
  }
}
 800ba96:	bf00      	nop
 800ba98:	3708      	adds	r7, #8
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	781a      	ldrb	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3301      	adds	r3, #1
 800bab8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	781a      	ldrb	r2, [r3, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3301      	adds	r3, #1
 800bac6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f7ff fac7 	bl	800b05c <SWAPBYTE>
 800bace:	4603      	mov	r3, r0
 800bad0:	461a      	mov	r2, r3
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	3301      	adds	r3, #1
 800bada:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	3301      	adds	r3, #1
 800bae0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f7ff faba 	bl	800b05c <SWAPBYTE>
 800bae8:	4603      	mov	r3, r0
 800baea:	461a      	mov	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	3301      	adds	r3, #1
 800baf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3301      	adds	r3, #1
 800bafa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f7ff faad 	bl	800b05c <SWAPBYTE>
 800bb02:	4603      	mov	r3, r0
 800bb04:	461a      	mov	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	80da      	strh	r2, [r3, #6]
}
 800bb0a:	bf00      	nop
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb1c:	2180      	movs	r1, #128	; 0x80
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f007 fb66 	bl	80131f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bb24:	2100      	movs	r1, #0
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f007 fb62 	bl	80131f0 <USBD_LL_StallEP>
}
 800bb2c:	bf00      	nop
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb40:	2300      	movs	r3, #0
 800bb42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d036      	beq.n	800bbb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb4e:	6938      	ldr	r0, [r7, #16]
 800bb50:	f000 f836 	bl	800bbc0 <USBD_GetLen>
 800bb54:	4603      	mov	r3, r0
 800bb56:	3301      	adds	r3, #1
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	005b      	lsls	r3, r3, #1
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bb62:	7dfb      	ldrb	r3, [r7, #23]
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	4413      	add	r3, r2
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	7812      	ldrb	r2, [r2, #0]
 800bb6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
 800bb70:	3301      	adds	r3, #1
 800bb72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb74:	7dfb      	ldrb	r3, [r7, #23]
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	4413      	add	r3, r2
 800bb7a:	2203      	movs	r2, #3
 800bb7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb7e:	7dfb      	ldrb	r3, [r7, #23]
 800bb80:	3301      	adds	r3, #1
 800bb82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb84:	e013      	b.n	800bbae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb86:	7dfb      	ldrb	r3, [r7, #23]
 800bb88:	68ba      	ldr	r2, [r7, #8]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	693a      	ldr	r2, [r7, #16]
 800bb8e:	7812      	ldrb	r2, [r2, #0]
 800bb90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	3301      	adds	r3, #1
 800bb96:	613b      	str	r3, [r7, #16]
    idx++;
 800bb98:	7dfb      	ldrb	r3, [r7, #23]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb9e:	7dfb      	ldrb	r3, [r7, #23]
 800bba0:	68ba      	ldr	r2, [r7, #8]
 800bba2:	4413      	add	r3, r2
 800bba4:	2200      	movs	r2, #0
 800bba6:	701a      	strb	r2, [r3, #0]
    idx++;
 800bba8:	7dfb      	ldrb	r3, [r7, #23]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1e7      	bne.n	800bb86 <USBD_GetString+0x52>
 800bbb6:	e000      	b.n	800bbba <USBD_GetString+0x86>
    return;
 800bbb8:	bf00      	nop
  }
}
 800bbba:	3718      	adds	r7, #24
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bbd0:	e005      	b.n	800bbde <USBD_GetLen+0x1e>
  {
    len++;
 800bbd2:	7bfb      	ldrb	r3, [r7, #15]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1f5      	bne.n	800bbd2 <USBD_GetLen+0x12>
  }

  return len;
 800bbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3714      	adds	r7, #20
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2202      	movs	r2, #2
 800bc04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	2100      	movs	r1, #0
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f007 fb6b 	bl	80132f6 <USBD_LL_Transmit>

  return USBD_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b084      	sub	sp, #16
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	60f8      	str	r0, [r7, #12]
 800bc32:	60b9      	str	r1, [r7, #8]
 800bc34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f007 fb5a 	bl	80132f6 <USBD_LL_Transmit>

  return USBD_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2203      	movs	r2, #3
 800bc5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	2100      	movs	r1, #0
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f007 fb5e 	bl	8013338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b084      	sub	sp, #16
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	60f8      	str	r0, [r7, #12]
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	68ba      	ldr	r2, [r7, #8]
 800bc96:	2100      	movs	r1, #0
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f007 fb4d 	bl	8013338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2204      	movs	r2, #4
 800bcb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bcb8:	2300      	movs	r3, #0
 800bcba:	2200      	movs	r2, #0
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f007 fb19 	bl	80132f6 <USBD_LL_Transmit>

  return USBD_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b082      	sub	sp, #8
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2205      	movs	r2, #5
 800bcda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcde:	2300      	movs	r3, #0
 800bce0:	2200      	movs	r2, #0
 800bce2:	2100      	movs	r1, #0
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f007 fb27 	bl	8013338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bcfa:	1d3b      	adds	r3, r7, #4
 800bcfc:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	2200      	movs	r2, #0
 800bd02:	2100      	movs	r1, #0
 800bd04:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800bd08:	f000 f938 	bl	800bf7c <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	330b      	adds	r3, #11
 800bd10:	78db      	ldrb	r3, [r3, #3]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b088      	sub	sp, #32
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	4603      	mov	r3, r0
 800bd22:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bd24:	f107 030c 	add.w	r3, r7, #12
 800bd28:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800bd2a:	79fb      	ldrb	r3, [r7, #7]
 800bd2c:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800bd2e:	f107 020c 	add.w	r2, r7, #12
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	2101      	movs	r1, #1
 800bd36:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800bd3a:	f000 f91f 	bl	800bf7c <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	330b      	adds	r3, #11
 800bd42:	78db      	ldrb	r3, [r3, #3]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3720      	adds	r7, #32
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b08b      	sub	sp, #44	; 0x2c
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800bd54:	2300      	movs	r3, #0
 800bd56:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800bd64:	2300      	movs	r3, #0
 800bd66:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800bd70:	2300      	movs	r3, #0
 800bd72:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800bd74:	4b4a      	ldr	r3, [pc, #296]	; (800bea0 <SHCI_GetWirelessFwInfo+0x154>)
 800bd76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bd7c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bd86:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4a44      	ldr	r2, [pc, #272]	; (800bea4 <SHCI_GetWirelessFwInfo+0x158>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d10f      	bne.n	800bdb8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	695b      	ldr	r3, [r3, #20]
 800bd9c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	699b      	ldr	r3, [r3, #24]
 800bda2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	69db      	ldr	r3, [r3, #28]
 800bda8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	617b      	str	r3, [r7, #20]
 800bdb6:	e01a      	b.n	800bdee <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bdc0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bdc4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	695b      	ldr	r3, [r3, #20]
 800bdd4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	699b      	ldr	r3, [r3, #24]
 800bddc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf0:	0e1b      	lsrs	r3, r3, #24
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	0c1b      	lsrs	r3, r3, #16
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800be02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be04:	0a1b      	lsrs	r3, r3, #8
 800be06:	b2da      	uxtb	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800be0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0e:	091b      	lsrs	r3, r3, #4
 800be10:	b2db      	uxtb	r3, r3
 800be12:	f003 030f 	and.w	r3, r3, #15
 800be16:	b2da      	uxtb	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800be1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	f003 030f 	and.w	r3, r3, #15
 800be24:	b2da      	uxtb	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800be2a:	6a3b      	ldr	r3, [r7, #32]
 800be2c:	0e1b      	lsrs	r3, r3, #24
 800be2e:	b2da      	uxtb	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800be34:	6a3b      	ldr	r3, [r7, #32]
 800be36:	0c1b      	lsrs	r3, r3, #16
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800be3e:	6a3b      	ldr	r3, [r7, #32]
 800be40:	0a1b      	lsrs	r3, r3, #8
 800be42:	b2da      	uxtb	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800be48:	6a3b      	ldr	r3, [r7, #32]
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	b2da      	uxtb	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	0e1b      	lsrs	r3, r3, #24
 800be5c:	b2da      	uxtb	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	0c1b      	lsrs	r3, r3, #16
 800be66:	b2da      	uxtb	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	0a1b      	lsrs	r3, r3, #8
 800be70:	b2da      	uxtb	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	0e1b      	lsrs	r3, r3, #24
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	0c1b      	lsrs	r3, r3, #16
 800be84:	b2da      	uxtb	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	b2da      	uxtb	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	372c      	adds	r7, #44	; 0x2c
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	58004000 	.word	0x58004000
 800bea4:	a94656b9 	.word	0xa94656b9

0800bea8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	4a08      	ldr	r2, [pc, #32]	; (800bed8 <shci_init+0x30>)
 800beb8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800beba:	4a08      	ldr	r2, [pc, #32]	; (800bedc <shci_init+0x34>)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800bec0:	4806      	ldr	r0, [pc, #24]	; (800bedc <shci_init+0x34>)
 800bec2:	f000 f911 	bl	800c0e8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4618      	mov	r0, r3
 800becc:	f000 f894 	bl	800bff8 <TlInit>

  return;
 800bed0:	bf00      	nop
}
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	20000328 	.word	0x20000328
 800bedc:	20000308 	.word	0x20000308

0800bee0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bee6:	4822      	ldr	r0, [pc, #136]	; (800bf70 <shci_user_evt_proc+0x90>)
 800bee8:	f001 fce4 	bl	800d8b4 <LST_is_empty>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d12b      	bne.n	800bf4a <shci_user_evt_proc+0x6a>
 800bef2:	4b20      	ldr	r3, [pc, #128]	; (800bf74 <shci_user_evt_proc+0x94>)
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d027      	beq.n	800bf4a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800befa:	f107 030c 	add.w	r3, r7, #12
 800befe:	4619      	mov	r1, r3
 800bf00:	481b      	ldr	r0, [pc, #108]	; (800bf70 <shci_user_evt_proc+0x90>)
 800bf02:	f001 fd5e 	bl	800d9c2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800bf06:	4b1c      	ldr	r3, [pc, #112]	; (800bf78 <shci_user_evt_proc+0x98>)
 800bf08:	69db      	ldr	r3, [r3, #28]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00c      	beq.n	800bf28 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800bf12:	2301      	movs	r3, #1
 800bf14:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bf16:	4b18      	ldr	r3, [pc, #96]	; (800bf78 <shci_user_evt_proc+0x98>)
 800bf18:	69db      	ldr	r3, [r3, #28]
 800bf1a:	1d3a      	adds	r2, r7, #4
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800bf20:	793a      	ldrb	r2, [r7, #4]
 800bf22:	4b14      	ldr	r3, [pc, #80]	; (800bf74 <shci_user_evt_proc+0x94>)
 800bf24:	701a      	strb	r2, [r3, #0]
 800bf26:	e002      	b.n	800bf2e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bf28:	4b12      	ldr	r3, [pc, #72]	; (800bf74 <shci_user_evt_proc+0x94>)
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800bf2e:	4b11      	ldr	r3, [pc, #68]	; (800bf74 <shci_user_evt_proc+0x94>)
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d004      	beq.n	800bf40 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 fa95 	bl	800c468 <TL_MM_EvtDone>
 800bf3e:	e004      	b.n	800bf4a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	4619      	mov	r1, r3
 800bf44:	480a      	ldr	r0, [pc, #40]	; (800bf70 <shci_user_evt_proc+0x90>)
 800bf46:	f001 fcd5 	bl	800d8f4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bf4a:	4809      	ldr	r0, [pc, #36]	; (800bf70 <shci_user_evt_proc+0x90>)
 800bf4c:	f001 fcb2 	bl	800d8b4 <LST_is_empty>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d107      	bne.n	800bf66 <shci_user_evt_proc+0x86>
 800bf56:	4b07      	ldr	r3, [pc, #28]	; (800bf74 <shci_user_evt_proc+0x94>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800bf5e:	4804      	ldr	r0, [pc, #16]	; (800bf70 <shci_user_evt_proc+0x90>)
 800bf60:	f7f4 ff30 	bl	8000dc4 <shci_notify_asynch_evt>
  }


  return;
 800bf64:	bf00      	nop
 800bf66:	bf00      	nop
}
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	2000025c 	.word	0x2000025c
 800bf74:	2000026c 	.word	0x2000026c
 800bf78:	20000308 	.word	0x20000308

0800bf7c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60ba      	str	r2, [r7, #8]
 800bf84:	607b      	str	r3, [r7, #4]
 800bf86:	4603      	mov	r3, r0
 800bf88:	81fb      	strh	r3, [r7, #14]
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800bf8e:	2000      	movs	r0, #0
 800bf90:	f000 f864 	bl	800c05c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800bf94:	4b16      	ldr	r3, [pc, #88]	; (800bff0 <shci_send+0x74>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	89fa      	ldrh	r2, [r7, #14]
 800bf9a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800bf9e:	4b14      	ldr	r3, [pc, #80]	; (800bff0 <shci_send+0x74>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	7b7a      	ldrb	r2, [r7, #13]
 800bfa4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800bfa6:	4b12      	ldr	r3, [pc, #72]	; (800bff0 <shci_send+0x74>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	330c      	adds	r3, #12
 800bfac:	7b7a      	ldrb	r2, [r7, #13]
 800bfae:	68b9      	ldr	r1, [r7, #8]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f007 faa5 	bl	8013500 <memcpy>

  shciContext.io.Send(0,0);
 800bfb6:	4b0f      	ldr	r3, [pc, #60]	; (800bff4 <shci_send+0x78>)
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	2100      	movs	r1, #0
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800bfc0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800bfc4:	f7f4 ff1e 	bl	8000e04 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f103 0008 	add.w	r0, r3, #8
 800bfce:	4b08      	ldr	r3, [pc, #32]	; (800bff0 <shci_send+0x74>)
 800bfd0:	6819      	ldr	r1, [r3, #0]
 800bfd2:	4b07      	ldr	r3, [pc, #28]	; (800bff0 <shci_send+0x74>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	789b      	ldrb	r3, [r3, #2]
 800bfd8:	3303      	adds	r3, #3
 800bfda:	461a      	mov	r2, r3
 800bfdc:	f007 fa90 	bl	8013500 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bfe0:	2001      	movs	r0, #1
 800bfe2:	f000 f83b 	bl	800c05c <Cmd_SetStatus>

  return;
 800bfe6:	bf00      	nop
}
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	20000268 	.word	0x20000268
 800bff4:	20000308 	.word	0x20000308

0800bff8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c000:	4a10      	ldr	r2, [pc, #64]	; (800c044 <TlInit+0x4c>)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c006:	4810      	ldr	r0, [pc, #64]	; (800c048 <TlInit+0x50>)
 800c008:	f001 fc44 	bl	800d894 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c00c:	2001      	movs	r0, #1
 800c00e:	f000 f825 	bl	800c05c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c012:	4b0e      	ldr	r3, [pc, #56]	; (800c04c <TlInit+0x54>)
 800c014:	2201      	movs	r2, #1
 800c016:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c018:	4b0d      	ldr	r3, [pc, #52]	; (800c050 <TlInit+0x58>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00c      	beq.n	800c03a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c024:	4b0b      	ldr	r3, [pc, #44]	; (800c054 <TlInit+0x5c>)
 800c026:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c028:	4b0b      	ldr	r3, [pc, #44]	; (800c058 <TlInit+0x60>)
 800c02a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c02c:	4b08      	ldr	r3, [pc, #32]	; (800c050 <TlInit+0x58>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f107 020c 	add.w	r2, r7, #12
 800c034:	4610      	mov	r0, r2
 800c036:	4798      	blx	r3
  }

  return;
 800c038:	bf00      	nop
 800c03a:	bf00      	nop
}
 800c03c:	3718      	adds	r7, #24
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	20000268 	.word	0x20000268
 800c048:	2000025c 	.word	0x2000025c
 800c04c:	2000026c 	.word	0x2000026c
 800c050:	20000308 	.word	0x20000308
 800c054:	0800c0ad 	.word	0x0800c0ad
 800c058:	0800c0c5 	.word	0x0800c0c5

0800c05c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	4603      	mov	r3, r0
 800c064:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c066:	79fb      	ldrb	r3, [r7, #7]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10b      	bne.n	800c084 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c06c:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <Cmd_SetStatus+0x48>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d003      	beq.n	800c07c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c074:	4b0b      	ldr	r3, [pc, #44]	; (800c0a4 <Cmd_SetStatus+0x48>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2000      	movs	r0, #0
 800c07a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c07c:	4b0a      	ldr	r3, [pc, #40]	; (800c0a8 <Cmd_SetStatus+0x4c>)
 800c07e:	2200      	movs	r2, #0
 800c080:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c082:	e00b      	b.n	800c09c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c084:	4b08      	ldr	r3, [pc, #32]	; (800c0a8 <Cmd_SetStatus+0x4c>)
 800c086:	2201      	movs	r2, #1
 800c088:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c08a:	4b06      	ldr	r3, [pc, #24]	; (800c0a4 <Cmd_SetStatus+0x48>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d004      	beq.n	800c09c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c092:	4b04      	ldr	r3, [pc, #16]	; (800c0a4 <Cmd_SetStatus+0x48>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2001      	movs	r0, #1
 800c098:	4798      	blx	r3
  return;
 800c09a:	bf00      	nop
 800c09c:	bf00      	nop
}
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	20000328 	.word	0x20000328
 800c0a8:	20000264 	.word	0x20000264

0800c0ac <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	f7f4 fe95 	bl	8000de4 <shci_cmd_resp_release>

  return;
 800c0ba:	bf00      	nop
}
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
	...

0800c0c4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c0cc:	6879      	ldr	r1, [r7, #4]
 800c0ce:	4805      	ldr	r0, [pc, #20]	; (800c0e4 <TlUserEvtReceived+0x20>)
 800c0d0:	f001 fc34 	bl	800d93c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c0d4:	4803      	ldr	r0, [pc, #12]	; (800c0e4 <TlUserEvtReceived+0x20>)
 800c0d6:	f7f4 fe75 	bl	8000dc4 <shci_notify_asynch_evt>

  return;
 800c0da:	bf00      	nop
}
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	2000025c 	.word	0x2000025c

0800c0e8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a05      	ldr	r2, [pc, #20]	; (800c108 <shci_register_io_bus+0x20>)
 800c0f4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a04      	ldr	r2, [pc, #16]	; (800c10c <shci_register_io_bus+0x24>)
 800c0fa:	611a      	str	r2, [r3, #16]

  return;
 800c0fc:	bf00      	nop
}
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr
 800c108:	0800c205 	.word	0x0800c205
 800c10c:	0800c259 	.word	0x0800c259

0800c110 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c114:	f006 fb74 	bl	8012800 <HW_IPCC_Enable>

  return;
 800c118:	bf00      	nop
}
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <TL_Init>:


void TL_Init( void )
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c120:	4b10      	ldr	r3, [pc, #64]	; (800c164 <TL_Init+0x48>)
 800c122:	4a11      	ldr	r2, [pc, #68]	; (800c168 <TL_Init+0x4c>)
 800c124:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c126:	4b0f      	ldr	r3, [pc, #60]	; (800c164 <TL_Init+0x48>)
 800c128:	4a10      	ldr	r2, [pc, #64]	; (800c16c <TL_Init+0x50>)
 800c12a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c12c:	4b0d      	ldr	r3, [pc, #52]	; (800c164 <TL_Init+0x48>)
 800c12e:	4a10      	ldr	r2, [pc, #64]	; (800c170 <TL_Init+0x54>)
 800c130:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c132:	4b0c      	ldr	r3, [pc, #48]	; (800c164 <TL_Init+0x48>)
 800c134:	4a0f      	ldr	r2, [pc, #60]	; (800c174 <TL_Init+0x58>)
 800c136:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800c138:	4b0a      	ldr	r3, [pc, #40]	; (800c164 <TL_Init+0x48>)
 800c13a:	4a0f      	ldr	r2, [pc, #60]	; (800c178 <TL_Init+0x5c>)
 800c13c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c13e:	4b09      	ldr	r3, [pc, #36]	; (800c164 <TL_Init+0x48>)
 800c140:	4a0e      	ldr	r2, [pc, #56]	; (800c17c <TL_Init+0x60>)
 800c142:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c144:	4b07      	ldr	r3, [pc, #28]	; (800c164 <TL_Init+0x48>)
 800c146:	4a0e      	ldr	r2, [pc, #56]	; (800c180 <TL_Init+0x64>)
 800c148:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c14a:	4b06      	ldr	r3, [pc, #24]	; (800c164 <TL_Init+0x48>)
 800c14c:	4a0d      	ldr	r2, [pc, #52]	; (800c184 <TL_Init+0x68>)
 800c14e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c150:	4b04      	ldr	r3, [pc, #16]	; (800c164 <TL_Init+0x48>)
 800c152:	4a0d      	ldr	r2, [pc, #52]	; (800c188 <TL_Init+0x6c>)
 800c154:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c156:	4b03      	ldr	r3, [pc, #12]	; (800c164 <TL_Init+0x48>)
 800c158:	4a0c      	ldr	r2, [pc, #48]	; (800c18c <TL_Init+0x70>)
 800c15a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c15c:	f006 fb64 	bl	8012828 <HW_IPCC_Init>

  return;
 800c160:	bf00      	nop
}
 800c162:	bd80      	pop	{r7, pc}
 800c164:	20030000 	.word	0x20030000
 800c168:	20030028 	.word	0x20030028
 800c16c:	20030048 	.word	0x20030048
 800c170:	20030058 	.word	0x20030058
 800c174:	20030064 	.word	0x20030064
 800c178:	2003006c 	.word	0x2003006c
 800c17c:	20030074 	.word	0x20030074
 800c180:	2003007c 	.word	0x2003007c
 800c184:	20030098 	.word	0x20030098
 800c188:	2003009c 	.word	0x2003009c
 800c18c:	200300a8 	.word	0x200300a8

0800c190 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c196:	e01c      	b.n	800c1d2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c198:	1d3b      	adds	r3, r7, #4
 800c19a:	4619      	mov	r1, r3
 800c19c:	4812      	ldr	r0, [pc, #72]	; (800c1e8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c19e:	f001 fc10 	bl	800d9c2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	7a5b      	ldrb	r3, [r3, #9]
 800c1a6:	2b0f      	cmp	r3, #15
 800c1a8:	d003      	beq.n	800c1b2 <HW_IPCC_BLE_RxEvtNot+0x22>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	7a5b      	ldrb	r3, [r3, #9]
 800c1ae:	2b0e      	cmp	r3, #14
 800c1b0:	d105      	bne.n	800c1be <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	2002      	movs	r0, #2
 800c1b8:	f000 f9ba 	bl	800c530 <OutputDbgTrace>
 800c1bc:	e004      	b.n	800c1c8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	2003      	movs	r0, #3
 800c1c4:	f000 f9b4 	bl	800c530 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c1c8:	4b08      	ldr	r3, [pc, #32]	; (800c1ec <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	4610      	mov	r0, r2
 800c1d0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c1d2:	4805      	ldr	r0, [pc, #20]	; (800c1e8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c1d4:	f001 fb6e 	bl	800d8b4 <LST_is_empty>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d0dc      	beq.n	800c198 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c1de:	bf00      	nop
}
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	200300c4 	.word	0x200300c4
 800c1ec:	20000334 	.word	0x20000334

0800c1f0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c1f4:	4b02      	ldr	r3, [pc, #8]	; (800c200 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4798      	blx	r3

  return;
 800c1fa:	bf00      	nop
}
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	20000338 	.word	0x20000338

0800c204 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c210:	480d      	ldr	r0, [pc, #52]	; (800c248 <TL_SYS_Init+0x44>)
 800c212:	f001 fb3f 	bl	800d894 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c216:	4b0d      	ldr	r3, [pc, #52]	; (800c24c <TL_SYS_Init+0x48>)
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	689a      	ldr	r2, [r3, #8]
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	4a08      	ldr	r2, [pc, #32]	; (800c248 <TL_SYS_Init+0x44>)
 800c228:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c22a:	f006 fb2b 	bl	8012884 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a07      	ldr	r2, [pc, #28]	; (800c250 <TL_SYS_Init+0x4c>)
 800c234:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	4a06      	ldr	r2, [pc, #24]	; (800c254 <TL_SYS_Init+0x50>)
 800c23c:	6013      	str	r3, [r2, #0]

  return 0;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	200300cc 	.word	0x200300cc
 800c24c:	20030000 	.word	0x20030000
 800c250:	2000033c 	.word	0x2000033c
 800c254:	20000340 	.word	0x20000340

0800c258 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	460b      	mov	r3, r1
 800c262:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c264:	4b09      	ldr	r3, [pc, #36]	; (800c28c <TL_SYS_SendCmd+0x34>)
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2210      	movs	r2, #16
 800c26c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c26e:	4b07      	ldr	r3, [pc, #28]	; (800c28c <TL_SYS_SendCmd+0x34>)
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4619      	mov	r1, r3
 800c276:	2004      	movs	r0, #4
 800c278:	f000 f95a 	bl	800c530 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c27c:	f006 fb0c 	bl	8012898 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	20030000 	.word	0x20030000

0800c290 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c294:	4b07      	ldr	r3, [pc, #28]	; (800c2b4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4619      	mov	r1, r3
 800c29c:	2005      	movs	r0, #5
 800c29e:	f000 f947 	bl	800c530 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c2a2:	4b05      	ldr	r3, [pc, #20]	; (800c2b8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a03      	ldr	r2, [pc, #12]	; (800c2b4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c2a8:	68d2      	ldr	r2, [r2, #12]
 800c2aa:	6812      	ldr	r2, [r2, #0]
 800c2ac:	4610      	mov	r0, r2
 800c2ae:	4798      	blx	r3

  return;
 800c2b0:	bf00      	nop
}
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	20030000 	.word	0x20030000
 800c2b8:	2000033c 	.word	0x2000033c

0800c2bc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c2c2:	e00e      	b.n	800c2e2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c2c4:	1d3b      	adds	r3, r7, #4
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	480b      	ldr	r0, [pc, #44]	; (800c2f8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c2ca:	f001 fb7a 	bl	800d9c2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	2006      	movs	r0, #6
 800c2d4:	f000 f92c 	bl	800c530 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c2d8:	4b08      	ldr	r3, [pc, #32]	; (800c2fc <HW_IPCC_SYS_EvtNot+0x40>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	4610      	mov	r0, r2
 800c2e0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c2e2:	4805      	ldr	r0, [pc, #20]	; (800c2f8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c2e4:	f001 fae6 	bl	800d8b4 <LST_is_empty>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d0ea      	beq.n	800c2c4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c2ee:	bf00      	nop
}
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	200300cc 	.word	0x200300cc
 800c2fc:	20000340 	.word	0x20000340

0800c300 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800c308:	4b0a      	ldr	r3, [pc, #40]	; (800c334 <TL_THREAD_Init+0x34>)
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685a      	ldr	r2, [r3, #4]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	689a      	ldr	r2, [r3, #8]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 800c326:	f006 fadd 	bl	80128e4 <HW_IPCC_THREAD_Init>

  return;
 800c32a:	bf00      	nop
}
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	20030000 	.word	0x20030000

0800c338 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800c33c:	4b04      	ldr	r3, [pc, #16]	; (800c350 <TL_OT_SendCmd+0x18>)
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	2208      	movs	r2, #8
 800c344:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800c346:	f006 fadb 	bl	8012900 <HW_IPCC_OT_SendCmd>

  return;
 800c34a:	bf00      	nop
}
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	20030000 	.word	0x20030000

0800c354 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800c358:	4b04      	ldr	r3, [pc, #16]	; (800c36c <TL_CLI_SendCmd+0x18>)
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	220a      	movs	r2, #10
 800c360:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800c362:	f006 fadb 	bl	801291c <HW_IPCC_CLI_SendCmd>

  return;
 800c366:	bf00      	nop
}
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	20030000 	.word	0x20030000

0800c370 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c374:	4b04      	ldr	r3, [pc, #16]	; (800c388 <TL_THREAD_SendAck+0x18>)
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	220d      	movs	r2, #13
 800c37c:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800c37e:	f006 fad7 	bl	8012930 <HW_IPCC_THREAD_SendAck>

  return;
 800c382:	bf00      	nop
}
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	20030000 	.word	0x20030000

0800c38c <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800c390:	4b04      	ldr	r3, [pc, #16]	; (800c3a4 <TL_THREAD_CliSendAck+0x18>)
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	220d      	movs	r2, #13
 800c398:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800c39a:	f006 fad7 	bl	801294c <HW_IPCC_THREAD_CliSendAck>

  return;
 800c39e:	bf00      	nop
}
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20030000 	.word	0x20030000

0800c3a8 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800c3ac:	4b03      	ldr	r3, [pc, #12]	; (800c3bc <HW_IPCC_OT_CmdEvtNot+0x14>)
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f005 ff6a 	bl	801228c <TL_OT_CmdEvtReceived>

  return;
 800c3b8:	bf00      	nop
}
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	20030000 	.word	0x20030000

0800c3c0 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800c3c4:	4b03      	ldr	r3, [pc, #12]	; (800c3d4 <HW_IPCC_THREAD_EvtNot+0x14>)
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f005 ff68 	bl	80122a0 <TL_THREAD_NotReceived>

  return;
 800c3d0:	bf00      	nop
}
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	20030000 	.word	0x20030000

0800c3d8 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800c3dc:	4b03      	ldr	r3, [pc, #12]	; (800c3ec <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f006 f80a 	bl	80123fc <TL_THREAD_CliNotReceived>

  return;
 800c3e8:	bf00      	nop
}
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	20030000 	.word	0x20030000

0800c3f0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c3f8:	4817      	ldr	r0, [pc, #92]	; (800c458 <TL_MM_Init+0x68>)
 800c3fa:	f001 fa4b 	bl	800d894 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c3fe:	4817      	ldr	r0, [pc, #92]	; (800c45c <TL_MM_Init+0x6c>)
 800c400:	f001 fa48 	bl	800d894 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c404:	4b16      	ldr	r3, [pc, #88]	; (800c460 <TL_MM_Init+0x70>)
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	4a16      	ldr	r2, [pc, #88]	; (800c464 <TL_MM_Init+0x74>)
 800c40a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c40c:	4b15      	ldr	r3, [pc, #84]	; (800c464 <TL_MM_Init+0x74>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	6892      	ldr	r2, [r2, #8]
 800c414:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c416:	4b13      	ldr	r3, [pc, #76]	; (800c464 <TL_MM_Init+0x74>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	68d2      	ldr	r2, [r2, #12]
 800c41e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c420:	4b10      	ldr	r3, [pc, #64]	; (800c464 <TL_MM_Init+0x74>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a0c      	ldr	r2, [pc, #48]	; (800c458 <TL_MM_Init+0x68>)
 800c426:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c428:	4b0e      	ldr	r3, [pc, #56]	; (800c464 <TL_MM_Init+0x74>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	6812      	ldr	r2, [r2, #0]
 800c430:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c432:	4b0c      	ldr	r3, [pc, #48]	; (800c464 <TL_MM_Init+0x74>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	6852      	ldr	r2, [r2, #4]
 800c43a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c43c:	4b09      	ldr	r3, [pc, #36]	; (800c464 <TL_MM_Init+0x74>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	6912      	ldr	r2, [r2, #16]
 800c444:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c446:	4b07      	ldr	r3, [pc, #28]	; (800c464 <TL_MM_Init+0x74>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	6952      	ldr	r2, [r2, #20]
 800c44e:	619a      	str	r2, [r3, #24]

  return;
 800c450:	bf00      	nop
}
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	200300b4 	.word	0x200300b4
 800c45c:	2000032c 	.word	0x2000032c
 800c460:	20030000 	.word	0x20030000
 800c464:	20000344 	.word	0x20000344

0800c468 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c470:	6879      	ldr	r1, [r7, #4]
 800c472:	4807      	ldr	r0, [pc, #28]	; (800c490 <TL_MM_EvtDone+0x28>)
 800c474:	f001 fa62 	bl	800d93c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c478:	6879      	ldr	r1, [r7, #4]
 800c47a:	2000      	movs	r0, #0
 800c47c:	f000 f858 	bl	800c530 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c480:	4804      	ldr	r0, [pc, #16]	; (800c494 <TL_MM_EvtDone+0x2c>)
 800c482:	f006 fa95 	bl	80129b0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c486:	bf00      	nop
}
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	2000032c 	.word	0x2000032c
 800c494:	0800c499 	.word	0x0800c499

0800c498 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c49e:	e00c      	b.n	800c4ba <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c4a0:	1d3b      	adds	r3, r7, #4
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	480a      	ldr	r0, [pc, #40]	; (800c4d0 <SendFreeBuf+0x38>)
 800c4a6:	f001 fa8c 	bl	800d9c2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c4aa:	4b0a      	ldr	r3, [pc, #40]	; (800c4d4 <SendFreeBuf+0x3c>)
 800c4ac:	691b      	ldr	r3, [r3, #16]
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	4611      	mov	r1, r2
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f001 fa41 	bl	800d93c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c4ba:	4805      	ldr	r0, [pc, #20]	; (800c4d0 <SendFreeBuf+0x38>)
 800c4bc:	f001 f9fa 	bl	800d8b4 <LST_is_empty>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d0ec      	beq.n	800c4a0 <SendFreeBuf+0x8>
  }

  return;
 800c4c6:	bf00      	nop
}
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	2000032c 	.word	0x2000032c
 800c4d4:	20030000 	.word	0x20030000

0800c4d8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c4dc:	4805      	ldr	r0, [pc, #20]	; (800c4f4 <TL_TRACES_Init+0x1c>)
 800c4de:	f001 f9d9 	bl	800d894 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c4e2:	4b05      	ldr	r3, [pc, #20]	; (800c4f8 <TL_TRACES_Init+0x20>)
 800c4e4:	695b      	ldr	r3, [r3, #20]
 800c4e6:	4a03      	ldr	r2, [pc, #12]	; (800c4f4 <TL_TRACES_Init+0x1c>)
 800c4e8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c4ea:	f006 fa97 	bl	8012a1c <HW_IPCC_TRACES_Init>

  return;
 800c4ee:	bf00      	nop
}
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	200300bc 	.word	0x200300bc
 800c4f8:	20030000 	.word	0x20030000

0800c4fc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c502:	e008      	b.n	800c516 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c504:	1d3b      	adds	r3, r7, #4
 800c506:	4619      	mov	r1, r3
 800c508:	4808      	ldr	r0, [pc, #32]	; (800c52c <HW_IPCC_TRACES_EvtNot+0x30>)
 800c50a:	f001 fa5a 	bl	800d9c2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4618      	mov	r0, r3
 800c512:	f7f4 fc89 	bl	8000e28 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c516:	4805      	ldr	r0, [pc, #20]	; (800c52c <HW_IPCC_TRACES_EvtNot+0x30>)
 800c518:	f001 f9cc 	bl	800d8b4 <LST_is_empty>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d0f0      	beq.n	800c504 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c522:	bf00      	nop
}
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	200300bc 	.word	0x200300bc

0800c530 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c530:	b480      	push	{r7}
 800c532:	b085      	sub	sp, #20
 800c534:	af00      	add	r7, sp, #0
 800c536:	4603      	mov	r3, r0
 800c538:	6039      	str	r1, [r7, #0]
 800c53a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c53c:	79fb      	ldrb	r3, [r7, #7]
 800c53e:	2b06      	cmp	r3, #6
 800c540:	d849      	bhi.n	800c5d6 <OutputDbgTrace+0xa6>
 800c542:	a201      	add	r2, pc, #4	; (adr r2, 800c548 <OutputDbgTrace+0x18>)
 800c544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c548:	0800c565 	.word	0x0800c565
 800c54c:	0800c587 	.word	0x0800c587
 800c550:	0800c58d 	.word	0x0800c58d
 800c554:	0800c5a7 	.word	0x0800c5a7
 800c558:	0800c5b3 	.word	0x0800c5b3
 800c55c:	0800c5b9 	.word	0x0800c5b9
 800c560:	0800c5cb 	.word	0x0800c5cb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	7a5b      	ldrb	r3, [r3, #9]
 800c56c:	2b0f      	cmp	r3, #15
 800c56e:	d004      	beq.n	800c57a <OutputDbgTrace+0x4a>
 800c570:	2bff      	cmp	r3, #255	; 0xff
 800c572:	d004      	beq.n	800c57e <OutputDbgTrace+0x4e>
 800c574:	2b0e      	cmp	r3, #14
 800c576:	d004      	beq.n	800c582 <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c578:	e004      	b.n	800c584 <OutputDbgTrace+0x54>
          break;
 800c57a:	bf00      	nop
 800c57c:	e02c      	b.n	800c5d8 <OutputDbgTrace+0xa8>
          break;
 800c57e:	bf00      	nop
 800c580:	e02a      	b.n	800c5d8 <OutputDbgTrace+0xa8>
          break;
 800c582:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c584:	e028      	b.n	800c5d8 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c58a:	e025      	b.n	800c5d8 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	7a5b      	ldrb	r3, [r3, #9]
 800c594:	2b0e      	cmp	r3, #14
 800c596:	d002      	beq.n	800c59e <OutputDbgTrace+0x6e>
 800c598:	2b0f      	cmp	r3, #15
 800c59a:	d002      	beq.n	800c5a2 <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c59c:	e002      	b.n	800c5a4 <OutputDbgTrace+0x74>
          break;
 800c59e:	bf00      	nop
 800c5a0:	e01a      	b.n	800c5d8 <OutputDbgTrace+0xa8>
          break;
 800c5a2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c5a4:	e018      	b.n	800c5d8 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	7a5b      	ldrb	r3, [r3, #9]
 800c5ae:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c5b0:	e012      	b.n	800c5d8 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c5b6:	e00f      	b.n	800c5d8 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	7a5b      	ldrb	r3, [r3, #9]
 800c5c0:	2b0e      	cmp	r3, #14
 800c5c2:	d000      	beq.n	800c5c6 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c5c4:	e000      	b.n	800c5c8 <OutputDbgTrace+0x98>
          break;
 800c5c6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c5c8:	e006      	b.n	800c5d8 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	7a5b      	ldrb	r3, [r3, #9]
 800c5d2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c5d4:	e000      	b.n	800c5d8 <OutputDbgTrace+0xa8>

    default:
      break;
 800c5d6:	bf00      	nop
  }

  return;
 800c5d8:	bf00      	nop
}
 800c5da:	3714      	adds	r7, #20
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <otCoapHeaderInit>:
extern otCoapRequestHandler defaultCoapRequestHandlerCb;

#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	70fb      	strb	r3, [r7, #3]
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800c5f4:	f005 fe64 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c5f8:	f005 fe00 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c5fc:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2200      	movs	r2, #0
 800c602:	f062 0260 	orn	r2, r2, #96	; 0x60
 800c606:	701a      	strb	r2, [r3, #0]
 800c608:	2200      	movs	r2, #0
 800c60a:	705a      	strb	r2, [r3, #1]
 800c60c:	2200      	movs	r2, #0
 800c60e:	709a      	strb	r2, [r3, #2]
 800c610:	2200      	movs	r2, #0
 800c612:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	f042 0203 	orr.w	r2, r2, #3
 800c61c:	711a      	strb	r2, [r3, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	715a      	strb	r2, [r3, #5]
 800c622:	2200      	movs	r2, #0
 800c624:	719a      	strb	r2, [r3, #6]
 800c626:	2200      	movs	r2, #0
 800c628:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 800c630:	78fa      	ldrb	r2, [r7, #3]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 800c636:	78ba      	ldrb	r2, [r7, #2]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800c63c:	f005 fe02 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c640:	f005 fde8 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c644:	60f8      	str	r0, [r7, #12]
}
 800c646:	bf00      	nop
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b086      	sub	sp, #24
 800c652:	af00      	add	r7, sp, #0
 800c654:	60f8      	str	r0, [r7, #12]
 800c656:	60b9      	str	r1, [r7, #8]
 800c658:	4613      	mov	r3, r2
 800c65a:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 800c65c:	f005 fe30 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c660:	f005 fdcc 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c664:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	2200      	movs	r2, #0
 800c66a:	f062 025f 	orn	r2, r2, #95	; 0x5f
 800c66e:	701a      	strb	r2, [r3, #0]
 800c670:	2200      	movs	r2, #0
 800c672:	705a      	strb	r2, [r3, #1]
 800c674:	2200      	movs	r2, #0
 800c676:	709a      	strb	r2, [r3, #2]
 800c678:	2200      	movs	r2, #0
 800c67a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	2200      	movs	r2, #0
 800c680:	f042 0203 	orr.w	r2, r2, #3
 800c684:	711a      	strb	r2, [r3, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	715a      	strb	r2, [r3, #5]
 800c68a:	2200      	movs	r2, #0
 800c68c:	719a      	strb	r2, [r3, #6]
 800c68e:	2200      	movs	r2, #0
 800c690:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 800c698:	68ba      	ldr	r2, [r7, #8]
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 800c69e:	79fa      	ldrb	r2, [r7, #7]
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800c6a4:	f005 fdce 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c6a8:	f005 fdb4 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c6ac:	6178      	str	r0, [r7, #20]
}
 800c6ae:	bf00      	nop
 800c6b0:	3718      	adds	r7, #24
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b084      	sub	sp, #16
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
 800c6be:	460b      	mov	r3, r1
 800c6c0:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800c6c2:	f005 fdfd 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c6c6:	f005 fd99 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c6ca:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f062 025e 	orn	r2, r2, #94	; 0x5e
 800c6d4:	701a      	strb	r2, [r3, #0]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	705a      	strb	r2, [r3, #1]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	709a      	strb	r2, [r3, #2]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f042 0202 	orr.w	r2, r2, #2
 800c6ea:	711a      	strb	r2, [r3, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	715a      	strb	r2, [r3, #5]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	719a      	strb	r2, [r3, #6]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800c6fe:	78fa      	ldrb	r2, [r7, #3]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c704:	f005 fd9e 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c708:	f005 fd84 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c70c:	60f8      	str	r0, [r7, #12]
}
 800c70e:	bf00      	nop
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b084      	sub	sp, #16
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	460b      	mov	r3, r1
 800c720:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800c722:	f005 fdcd 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c726:	f005 fd69 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c72a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2200      	movs	r2, #0
 800c730:	f062 025d 	orn	r2, r2, #93	; 0x5d
 800c734:	701a      	strb	r2, [r3, #0]
 800c736:	2200      	movs	r2, #0
 800c738:	705a      	strb	r2, [r3, #1]
 800c73a:	2200      	movs	r2, #0
 800c73c:	709a      	strb	r2, [r3, #2]
 800c73e:	2200      	movs	r2, #0
 800c740:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2200      	movs	r2, #0
 800c746:	f042 0202 	orr.w	r2, r2, #2
 800c74a:	711a      	strb	r2, [r3, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	715a      	strb	r2, [r3, #5]
 800c750:	2200      	movs	r2, #0
 800c752:	719a      	strb	r2, [r3, #6]
 800c754:	2200      	movs	r2, #0
 800c756:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 800c75e:	78fa      	ldrb	r2, [r7, #3]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c764:	f005 fd6e 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c768:	f005 fd54 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c76c:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	b2db      	uxtb	r3, r3
}
 800c774:	4618      	mov	r0, r3
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800c786:	f005 fd9b 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c78a:	f005 fd37 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c78e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2200      	movs	r2, #0
 800c794:	f062 0250 	orn	r2, r2, #80	; 0x50
 800c798:	701a      	strb	r2, [r3, #0]
 800c79a:	2200      	movs	r2, #0
 800c79c:	705a      	strb	r2, [r3, #1]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	709a      	strb	r2, [r3, #2]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f042 0202 	orr.w	r2, r2, #2
 800c7ae:	711a      	strb	r2, [r3, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	715a      	strb	r2, [r3, #5]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	719a      	strb	r2, [r3, #6]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c7c8:	f005 fd3c 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c7cc:	f005 fd22 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c7d0:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	b2db      	uxtb	r3, r3
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3710      	adds	r7, #16
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c7e8:	f005 fd6a 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c7ec:	f005 fd06 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c7f0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f062 024d 	orn	r2, r2, #77	; 0x4d
 800c7fa:	701a      	strb	r2, [r3, #0]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	705a      	strb	r2, [r3, #1]
 800c800:	2200      	movs	r2, #0
 800c802:	709a      	strb	r2, [r3, #2]
 800c804:	2200      	movs	r2, #0
 800c806:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f042 0201 	orr.w	r2, r2, #1
 800c810:	711a      	strb	r2, [r3, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	715a      	strb	r2, [r3, #5]
 800c816:	2200      	movs	r2, #0
 800c818:	719a      	strb	r2, [r3, #6]
 800c81a:	2200      	movs	r2, #0
 800c81c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c824:	f005 fd0e 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c828:	f005 fcf4 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c82c:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	b2db      	uxtb	r3, r3
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	460b      	mov	r3, r1
 800c846:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800c848:	f005 fd3a 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c84c:	f005 fcd6 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c850:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2200      	movs	r2, #0
 800c856:	f062 0256 	orn	r2, r2, #86	; 0x56
 800c85a:	701a      	strb	r2, [r3, #0]
 800c85c:	2200      	movs	r2, #0
 800c85e:	705a      	strb	r2, [r3, #1]
 800c860:	2200      	movs	r2, #0
 800c862:	709a      	strb	r2, [r3, #2]
 800c864:	2200      	movs	r2, #0
 800c866:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f042 0202 	orr.w	r2, r2, #2
 800c870:	711a      	strb	r2, [r3, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	715a      	strb	r2, [r3, #5]
 800c876:	2200      	movs	r2, #0
 800c878:	719a      	strb	r2, [r3, #6]
 800c87a:	2200      	movs	r2, #0
 800c87c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 800c884:	887a      	ldrh	r2, [r7, #2]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800c88a:	f005 fcdb 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c88e:	f005 fcc1 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c892:	60f8      	str	r0, [r7, #12]
}
 800c894:	bf00      	nop
 800c896:	3710      	adds	r7, #16
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c8a4:	f005 fd0c 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c8a8:	f005 fca8 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c8ac:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f062 0261 	orn	r2, r2, #97	; 0x61
 800c8b6:	701a      	strb	r2, [r3, #0]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	705a      	strb	r2, [r3, #1]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	709a      	strb	r2, [r3, #2]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f042 0201 	orr.w	r2, r2, #1
 800c8cc:	711a      	strb	r2, [r3, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	715a      	strb	r2, [r3, #5]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	719a      	strb	r2, [r3, #6]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c8e0:	f005 fcb0 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c8e4:	f005 fc96 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c8e8:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	b2db      	uxtb	r3, r3
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c900:	f005 fcde 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c904:	f005 fc7a 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c908:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2200      	movs	r2, #0
 800c90e:	f062 024c 	orn	r2, r2, #76	; 0x4c
 800c912:	701a      	strb	r2, [r3, #0]
 800c914:	2200      	movs	r2, #0
 800c916:	705a      	strb	r2, [r3, #1]
 800c918:	2200      	movs	r2, #0
 800c91a:	709a      	strb	r2, [r3, #2]
 800c91c:	2200      	movs	r2, #0
 800c91e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2200      	movs	r2, #0
 800c924:	f042 0201 	orr.w	r2, r2, #1
 800c928:	711a      	strb	r2, [r3, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	715a      	strb	r2, [r3, #5]
 800c92e:	2200      	movs	r2, #0
 800c930:	719a      	strb	r2, [r3, #6]
 800c932:	2200      	movs	r2, #0
 800c934:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c93c:	f005 fc82 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c940:	f005 fc68 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c944:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	b2db      	uxtb	r3, r3
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c95c:	f005 fcb0 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c960:	f005 fc4c 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c964:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2200      	movs	r2, #0
 800c96a:	f062 0255 	orn	r2, r2, #85	; 0x55
 800c96e:	701a      	strb	r2, [r3, #0]
 800c970:	2200      	movs	r2, #0
 800c972:	705a      	strb	r2, [r3, #1]
 800c974:	2200      	movs	r2, #0
 800c976:	709a      	strb	r2, [r3, #2]
 800c978:	2200      	movs	r2, #0
 800c97a:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2200      	movs	r2, #0
 800c980:	f042 0201 	orr.w	r2, r2, #1
 800c984:	711a      	strb	r2, [r3, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	715a      	strb	r2, [r3, #5]
 800c98a:	2200      	movs	r2, #0
 800c98c:	719a      	strb	r2, [r3, #6]
 800c98e:	2200      	movs	r2, #0
 800c990:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c998:	f005 fc54 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c99c:	f005 fc3a 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c9a0:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	689b      	ldr	r3, [r3, #8]
 800c9a6:	b29b      	uxth	r3, r3
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800c9b8:	f005 fc82 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800c9bc:	f005 fc1e 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800c9c0:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f062 0254 	orn	r2, r2, #84	; 0x54
 800c9ca:	701a      	strb	r2, [r3, #0]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	705a      	strb	r2, [r3, #1]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	709a      	strb	r2, [r3, #2]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f042 0201 	orr.w	r2, r2, #1
 800c9e0:	711a      	strb	r2, [r3, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	715a      	strb	r2, [r3, #5]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	719a      	strb	r2, [r3, #6]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800c9f4:	f005 fc26 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800c9f8:	f005 fc0c 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800c9fc:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	b2db      	uxtb	r3, r3
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3710      	adds	r7, #16
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ca14:	f005 fc54 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ca18:	f005 fbf0 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800ca1c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f062 0253 	orn	r2, r2, #83	; 0x53
 800ca26:	701a      	strb	r2, [r3, #0]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	705a      	strb	r2, [r3, #1]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	709a      	strb	r2, [r3, #2]
 800ca30:	2200      	movs	r2, #0
 800ca32:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2200      	movs	r2, #0
 800ca38:	f042 0201 	orr.w	r2, r2, #1
 800ca3c:	711a      	strb	r2, [r3, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	715a      	strb	r2, [r3, #5]
 800ca42:	2200      	movs	r2, #0
 800ca44:	719a      	strb	r2, [r3, #6]
 800ca46:	2200      	movs	r2, #0
 800ca48:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ca50:	f005 fbf8 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ca54:	f005 fbde 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ca58:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	689b      	ldr	r3, [r3, #8]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b084      	sub	sp, #16
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800ca70:	f005 fc26 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ca74:	f005 fbc2 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800ca78:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	f062 0259 	orn	r2, r2, #89	; 0x59
 800ca82:	701a      	strb	r2, [r3, #0]
 800ca84:	2200      	movs	r2, #0
 800ca86:	705a      	strb	r2, [r3, #1]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	709a      	strb	r2, [r3, #2]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f042 0201 	orr.w	r2, r2, #1
 800ca98:	711a      	strb	r2, [r3, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	715a      	strb	r2, [r3, #5]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	719a      	strb	r2, [r3, #6]
 800caa2:	2200      	movs	r2, #0
 800caa4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800caac:	f005 fbca 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cab0:	f005 fbb0 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cab4:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	689b      	ldr	r3, [r3, #8]

}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b086      	sub	sp, #24
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	60f8      	str	r0, [r7, #12]
 800caca:	60b9      	str	r1, [r7, #8]
 800cacc:	607a      	str	r2, [r7, #4]
 800cace:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 800cad0:	f005 fbf6 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cad4:	f005 fb92 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cad8:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	2200      	movs	r2, #0
 800cade:	f062 0258 	orn	r2, r2, #88	; 0x58
 800cae2:	701a      	strb	r2, [r3, #0]
 800cae4:	2200      	movs	r2, #0
 800cae6:	705a      	strb	r2, [r3, #1]
 800cae8:	2200      	movs	r2, #0
 800caea:	709a      	strb	r2, [r3, #2]
 800caec:	2200      	movs	r2, #0
 800caee:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f042 0203 	orr.w	r2, r2, #3
 800caf8:	711a      	strb	r2, [r3, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	715a      	strb	r2, [r3, #5]
 800cafe:	2200      	movs	r2, #0
 800cb00:	719a      	strb	r2, [r3, #6]
 800cb02:	2200      	movs	r2, #0
 800cb04:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 800cb18:	6a3a      	ldr	r2, [r7, #32]
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800cb1e:	f005 fb91 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cb22:	f005 fb77 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cb26:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	b2db      	uxtb	r3, r3
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3718      	adds	r7, #24
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b084      	sub	sp, #16
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
 800cb3e:	460b      	mov	r3, r1
 800cb40:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800cb42:	f005 fbbd 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cb46:	f005 fb59 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cb4a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f062 024b 	orn	r2, r2, #75	; 0x4b
 800cb54:	701a      	strb	r2, [r3, #0]
 800cb56:	2200      	movs	r2, #0
 800cb58:	705a      	strb	r2, [r3, #1]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	709a      	strb	r2, [r3, #2]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2200      	movs	r2, #0
 800cb66:	f042 0201 	orr.w	r2, r2, #1
 800cb6a:	711a      	strb	r2, [r3, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	715a      	strb	r2, [r3, #5]
 800cb70:	2200      	movs	r2, #0
 800cb72:	719a      	strb	r2, [r3, #6]
 800cb74:	2200      	movs	r2, #0
 800cb76:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 800cb78:	887a      	ldrh	r2, [r7, #2]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cb7e:	f005 fb61 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cb82:	f005 fb47 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cb86:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	b2db      	uxtb	r3, r3
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3710      	adds	r7, #16
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b084      	sub	sp, #16
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800cba0:	f005 fb8e 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cba4:	f005 fb2a 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cba8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2200      	movs	r2, #0
 800cbae:	f062 0249 	orn	r2, r2, #73	; 0x49
 800cbb2:	701a      	strb	r2, [r3, #0]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	705a      	strb	r2, [r3, #1]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	709a      	strb	r2, [r3, #2]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f042 0201 	orr.w	r2, r2, #1
 800cbc8:	711a      	strb	r2, [r3, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	715a      	strb	r2, [r3, #5]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	719a      	strb	r2, [r3, #6]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 800cbd6:	683a      	ldr	r2, [r7, #0]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cbdc:	f005 fb32 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cbe0:	f005 fb18 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cbe4:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	b2db      	uxtb	r3, r3
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3710      	adds	r7, #16
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b086      	sub	sp, #24
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800cc00:	f005 fb5e 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cc04:	f005 fafa 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cc08:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f062 0257 	orn	r2, r2, #87	; 0x57
 800cc12:	701a      	strb	r2, [r3, #0]
 800cc14:	2200      	movs	r2, #0
 800cc16:	705a      	strb	r2, [r3, #1]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	709a      	strb	r2, [r3, #2]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f042 0202 	orr.w	r2, r2, #2
 800cc28:	711a      	strb	r2, [r3, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	715a      	strb	r2, [r3, #5]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	719a      	strb	r2, [r3, #6]
 800cc32:	2200      	movs	r2, #0
 800cc34:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800cc42:	f005 faff 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cc46:	f005 fae5 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cc4a:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	b2db      	uxtb	r3, r3
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3718      	adds	r7, #24
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b082      	sub	sp, #8
 800cc5e:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 800cc60:	f005 fb2e 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cc64:	f005 faca 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cc68:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	f062 026b 	orn	r2, r2, #107	; 0x6b
 800cc72:	701a      	strb	r2, [r3, #0]
 800cc74:	2200      	movs	r2, #0
 800cc76:	705a      	strb	r2, [r3, #1]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	709a      	strb	r2, [r3, #2]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	711a      	strb	r2, [r3, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	715a      	strb	r2, [r3, #5]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	719a      	strb	r2, [r3, #6]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800cc92:	f005 fad7 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cc96:	f005 fabd 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cc9a:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	689b      	ldr	r3, [r3, #8]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ccb0:	f005 fb06 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ccb4:	f005 faa2 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800ccb8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f062 0269 	orn	r2, r2, #105	; 0x69
 800ccc2:	701a      	strb	r2, [r3, #0]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	705a      	strb	r2, [r3, #1]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	709a      	strb	r2, [r3, #2]
 800cccc:	2200      	movs	r2, #0
 800ccce:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	711a      	strb	r2, [r3, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	715a      	strb	r2, [r3, #5]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	719a      	strb	r2, [r3, #6]
 800ccde:	2200      	movs	r2, #0
 800cce0:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800cce2:	f005 faaf 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cce6:	f005 fa95 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ccea:	60f8      	str	r0, [r7, #12]
}
 800ccec:	bf00      	nop
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800cd00:	f005 fade 	bl	80122c0 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 800cd04:	4a15      	ldr	r2, [pc, #84]	; (800cd5c <otSetStateChangedCallback+0x68>)
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cd0a:	f005 fa77 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cd0e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f062 0268 	orn	r2, r2, #104	; 0x68
 800cd18:	701a      	strb	r2, [r3, #0]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	705a      	strb	r2, [r3, #1]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	709a      	strb	r2, [r3, #2]
 800cd22:	2200      	movs	r2, #0
 800cd24:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f042 0201 	orr.w	r2, r2, #1
 800cd2e:	711a      	strb	r2, [r3, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	715a      	strb	r2, [r3, #5]
 800cd34:	2200      	movs	r2, #0
 800cd36:	719a      	strb	r2, [r3, #6]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800cd42:	f005 fa7f 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cd46:	f005 fa65 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cd4a:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	b2db      	uxtb	r3, r3
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3718      	adds	r7, #24
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	20000348 	.word	0x20000348

0800cd60 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800cd68:	f005 faaa 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cd6c:	f005 fa46 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cd70:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2200      	movs	r2, #0
 800cd76:	f062 0264 	orn	r2, r2, #100	; 0x64
 800cd7a:	701a      	strb	r2, [r3, #0]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	705a      	strb	r2, [r3, #1]
 800cd80:	2200      	movs	r2, #0
 800cd82:	709a      	strb	r2, [r3, #2]
 800cd84:	2200      	movs	r2, #0
 800cd86:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	711a      	strb	r2, [r3, #4]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	715a      	strb	r2, [r3, #5]
 800cd92:	2200      	movs	r2, #0
 800cd94:	719a      	strb	r2, [r3, #6]
 800cd96:	2200      	movs	r2, #0
 800cd98:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800cd9a:	f005 fa53 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cd9e:	f005 fa39 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cda2:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	b2db      	uxtb	r3, r3
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b084      	sub	sp, #16
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
 800cdba:	460b      	mov	r3, r1
 800cdbc:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800cdbe:	f005 fa7f 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cdc2:	f005 fa1b 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cdc6:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800cdd0:	701a      	strb	r2, [r3, #0]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	705a      	strb	r2, [r3, #1]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	709a      	strb	r2, [r3, #2]
 800cdda:	2200      	movs	r2, #0
 800cddc:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f042 0201 	orr.w	r2, r2, #1
 800cde6:	711a      	strb	r2, [r3, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	715a      	strb	r2, [r3, #5]
 800cdec:	2200      	movs	r2, #0
 800cdee:	719a      	strb	r2, [r3, #6]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800cdf4:	78fa      	ldrb	r2, [r7, #3]
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800cdfa:	f005 fa23 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cdfe:	f005 fa09 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ce02:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	b2db      	uxtb	r3, r3
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b084      	sub	sp, #16
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ce1a:	f005 fa51 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ce1e:	f005 f9ed 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800ce22:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2200      	movs	r2, #0
 800ce28:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800ce2c:	701a      	strb	r2, [r3, #0]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	705a      	strb	r2, [r3, #1]
 800ce32:	2200      	movs	r2, #0
 800ce34:	709a      	strb	r2, [r3, #2]
 800ce36:	2200      	movs	r2, #0
 800ce38:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	711a      	strb	r2, [r3, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	715a      	strb	r2, [r3, #5]
 800ce44:	2200      	movs	r2, #0
 800ce46:	719a      	strb	r2, [r3, #6]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800ce4c:	f005 f9fa 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ce50:	f005 f9e0 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ce54:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	bf14      	ite	ne
 800ce5e:	2301      	movne	r3, #1
 800ce60:	2300      	moveq	r3, #0
 800ce62:	b2db      	uxtb	r3, r3
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800ce74:	f005 fa24 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ce78:	f005 f9c0 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800ce7c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2200      	movs	r2, #0
 800ce82:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 800ce86:	701a      	strb	r2, [r3, #0]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	705a      	strb	r2, [r3, #1]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	709a      	strb	r2, [r3, #2]
 800ce90:	2200      	movs	r2, #0
 800ce92:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2200      	movs	r2, #0
 800ce98:	711a      	strb	r2, [r3, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	715a      	strb	r2, [r3, #5]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	719a      	strb	r2, [r3, #6]
 800cea2:	2200      	movs	r2, #0
 800cea4:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800cea6:	f005 f9cd 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ceaa:	f005 f9b3 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ceae:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	689b      	ldr	r3, [r3, #8]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <otIp6GetMulticastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifMulticastAddress *otIp6GetMulticastAddresses(otInstance *aInstance)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800cec4:	f005 f9fc 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cec8:	f005 f998 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cecc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_MULTICAST_ADDRESSES;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 800ced6:	701a      	strb	r2, [r3, #0]
 800ced8:	2200      	movs	r2, #0
 800ceda:	705a      	strb	r2, [r3, #1]
 800cedc:	2200      	movs	r2, #0
 800cede:	709a      	strb	r2, [r3, #2]
 800cee0:	2200      	movs	r2, #0
 800cee2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	711a      	strb	r2, [r3, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	715a      	strb	r2, [r3, #5]
 800ceee:	2200      	movs	r2, #0
 800cef0:	719a      	strb	r2, [r3, #6]
 800cef2:	2200      	movs	r2, #0
 800cef4:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800cef6:	f005 f9a5 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cefa:	f005 f98b 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cefe:	60f8      	str	r0, [r7, #12]
  return (otNetifMulticastAddress *)p_ot_req->Data[0];
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	689b      	ldr	r3, [r3, #8]
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800cf16:	f005 f9d3 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cf1a:	f005 f96f 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cf1e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800cf28:	701a      	strb	r2, [r3, #0]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	705a      	strb	r2, [r3, #1]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	709a      	strb	r2, [r3, #2]
 800cf32:	2200      	movs	r2, #0
 800cf34:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f042 0202 	orr.w	r2, r2, #2
 800cf3e:	711a      	strb	r2, [r3, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	715a      	strb	r2, [r3, #5]
 800cf44:	2200      	movs	r2, #0
 800cf46:	719a      	strb	r2, [r3, #6]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800cf58:	f005 f974 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cf5c:	f005 f95a 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cf60:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	689b      	ldr	r3, [r3, #8]
 800cf66:	b2db      	uxtb	r3, r3
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3710      	adds	r7, #16
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	460b      	mov	r3, r1
 800cf7a:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800cf7c:	f005 f9a0 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cf80:	f005 f93c 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cf84:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f042 0208 	orr.w	r2, r2, #8
 800cf8e:	701a      	strb	r2, [r3, #0]
 800cf90:	2200      	movs	r2, #0
 800cf92:	705a      	strb	r2, [r3, #1]
 800cf94:	2200      	movs	r2, #0
 800cf96:	709a      	strb	r2, [r3, #2]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f042 0201 	orr.w	r2, r2, #1
 800cfa4:	711a      	strb	r2, [r3, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	715a      	strb	r2, [r3, #5]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	719a      	strb	r2, [r3, #6]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800cfb2:	78fa      	ldrb	r2, [r7, #3]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800cfb8:	f005 f944 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800cfbc:	f005 f92a 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800cfc0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	b2db      	uxtb	r3, r3
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	460b      	mov	r3, r1
 800cfda:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800cfdc:	f005 f970 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800cfe0:	f005 f90c 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800cfe4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	f042 020f 	orr.w	r2, r2, #15
 800cfee:	701a      	strb	r2, [r3, #0]
 800cff0:	2200      	movs	r2, #0
 800cff2:	705a      	strb	r2, [r3, #1]
 800cff4:	2200      	movs	r2, #0
 800cff6:	709a      	strb	r2, [r3, #2]
 800cff8:	2200      	movs	r2, #0
 800cffa:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2200      	movs	r2, #0
 800d000:	f042 0201 	orr.w	r2, r2, #1
 800d004:	711a      	strb	r2, [r3, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	715a      	strb	r2, [r3, #5]
 800d00a:	2200      	movs	r2, #0
 800d00c:	719a      	strb	r2, [r3, #6]
 800d00e:	2200      	movs	r2, #0
 800d010:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800d012:	887a      	ldrh	r2, [r7, #2]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d018:	f005 f914 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d01c:	f005 f8fa 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d020:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	b2db      	uxtb	r3, r3
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800d038:	f005 f942 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d03c:	f005 f8de 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d040:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2200      	movs	r2, #0
 800d046:	f062 0246 	orn	r2, r2, #70	; 0x46
 800d04a:	701a      	strb	r2, [r3, #0]
 800d04c:	2200      	movs	r2, #0
 800d04e:	705a      	strb	r2, [r3, #1]
 800d050:	2200      	movs	r2, #0
 800d052:	709a      	strb	r2, [r3, #2]
 800d054:	2200      	movs	r2, #0
 800d056:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2200      	movs	r2, #0
 800d05c:	f042 0201 	orr.w	r2, r2, #1
 800d060:	711a      	strb	r2, [r3, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	715a      	strb	r2, [r3, #5]
 800d066:	2200      	movs	r2, #0
 800d068:	719a      	strb	r2, [r3, #6]
 800d06a:	2200      	movs	r2, #0
 800d06c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d074:	f005 f8e6 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d078:	f005 f8cc 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d07c:	60f8      	str	r0, [r7, #12]
}
 800d07e:	bf00      	nop
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b084      	sub	sp, #16
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800d08e:	f005 f917 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d092:	f005 f8b3 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d096:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2200      	movs	r2, #0
 800d09c:	f062 0243 	orn	r2, r2, #67	; 0x43
 800d0a0:	701a      	strb	r2, [r3, #0]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	705a      	strb	r2, [r3, #1]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	709a      	strb	r2, [r3, #2]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f042 0201 	orr.w	r2, r2, #1
 800d0b6:	711a      	strb	r2, [r3, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	715a      	strb	r2, [r3, #5]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	719a      	strb	r2, [r3, #6]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d0ca:	f005 f8bb 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d0ce:	f005 f8a1 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d0d2:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	b29b      	uxth	r3, r3
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3710      	adds	r7, #16
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b086      	sub	sp, #24
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	60f8      	str	r0, [r7, #12]
 800d0ea:	60b9      	str	r1, [r7, #8]
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 800d0f0:	f005 f8e6 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d0f4:	f005 f882 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d0f8:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f062 023e 	orn	r2, r2, #62	; 0x3e
 800d102:	701a      	strb	r2, [r3, #0]
 800d104:	2200      	movs	r2, #0
 800d106:	705a      	strb	r2, [r3, #1]
 800d108:	2200      	movs	r2, #0
 800d10a:	709a      	strb	r2, [r3, #2]
 800d10c:	2200      	movs	r2, #0
 800d10e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	2200      	movs	r2, #0
 800d114:	f042 0203 	orr.w	r2, r2, #3
 800d118:	711a      	strb	r2, [r3, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	715a      	strb	r2, [r3, #5]
 800d11e:	2200      	movs	r2, #0
 800d120:	719a      	strb	r2, [r3, #6]
 800d122:	2200      	movs	r2, #0
 800d124:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800d132:	88fa      	ldrh	r2, [r7, #6]
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800d138:	f005 f884 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d13c:	f005 f86a 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d140:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	b2db      	uxtb	r3, r3
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3718      	adds	r7, #24
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af00      	add	r7, sp, #0
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	607a      	str	r2, [r7, #4]
 800d15a:	461a      	mov	r2, r3
 800d15c:	460b      	mov	r3, r1
 800d15e:	817b      	strh	r3, [r7, #10]
 800d160:	4613      	mov	r3, r2
 800d162:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 800d164:	f005 f8ac 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d168:	f005 f848 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d16c:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2200      	movs	r2, #0
 800d172:	f062 023d 	orn	r2, r2, #61	; 0x3d
 800d176:	701a      	strb	r2, [r3, #0]
 800d178:	2200      	movs	r2, #0
 800d17a:	705a      	strb	r2, [r3, #1]
 800d17c:	2200      	movs	r2, #0
 800d17e:	709a      	strb	r2, [r3, #2]
 800d180:	2200      	movs	r2, #0
 800d182:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	2200      	movs	r2, #0
 800d188:	f042 0204 	orr.w	r2, r2, #4
 800d18c:	711a      	strb	r2, [r3, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	715a      	strb	r2, [r3, #5]
 800d192:	2200      	movs	r2, #0
 800d194:	719a      	strb	r2, [r3, #6]
 800d196:	2200      	movs	r2, #0
 800d198:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 800d1a0:	897a      	ldrh	r2, [r7, #10]
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 800d1ac:	893a      	ldrh	r2, [r7, #8]
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800d1b2:	f005 f847 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d1b6:	f005 f82d 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d1ba:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	689b      	ldr	r3, [r3, #8]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3718      	adds	r7, #24
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800d1c8:	b5b0      	push	{r4, r5, r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800d1d2:	f005 f82b 	bl	801222c <THREAD_Get_NotificationPayloadBuffer>
 800d1d6:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	2b17      	cmp	r3, #23
 800d1e0:	f200 81c3 	bhi.w	800d56a <OpenThread_CallBack_Processing+0x3a2>
 800d1e4:	a201      	add	r2, pc, #4	; (adr r2, 800d1ec <OpenThread_CallBack_Processing+0x24>)
 800d1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ea:	bf00      	nop
 800d1ec:	0800d24d 	.word	0x0800d24d
 800d1f0:	0800d269 	.word	0x0800d269
 800d1f4:	0800d2cd 	.word	0x0800d2cd
 800d1f8:	0800d315 	.word	0x0800d315
 800d1fc:	0800d321 	.word	0x0800d321
 800d200:	0800d33f 	.word	0x0800d33f
 800d204:	0800d35d 	.word	0x0800d35d
 800d208:	0800d37b 	.word	0x0800d37b
 800d20c:	0800d399 	.word	0x0800d399
 800d210:	0800d3b7 	.word	0x0800d3b7
 800d214:	0800d3d9 	.word	0x0800d3d9
 800d218:	0800d3f7 	.word	0x0800d3f7
 800d21c:	0800d56b 	.word	0x0800d56b
 800d220:	0800d41d 	.word	0x0800d41d
 800d224:	0800d451 	.word	0x0800d451
 800d228:	0800d479 	.word	0x0800d479
 800d22c:	0800d497 	.word	0x0800d497
 800d230:	0800d505 	.word	0x0800d505
 800d234:	0800d52d 	.word	0x0800d52d
 800d238:	0800d56b 	.word	0x0800d56b
 800d23c:	0800d54b 	.word	0x0800d54b
 800d240:	0800d56b 	.word	0x0800d56b
 800d244:	0800d56b 	.word	0x0800d56b
 800d248:	0800d2a5 	.word	0x0800d2a5
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800d24c:	4b9b      	ldr	r3, [pc, #620]	; (800d4bc <OpenThread_CallBack_Processing+0x2f4>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2b00      	cmp	r3, #0
 800d252:	f000 818d 	beq.w	800d570 <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800d256:	4b99      	ldr	r3, [pc, #612]	; (800d4bc <OpenThread_CallBack_Processing+0x2f4>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	683a      	ldr	r2, [r7, #0]
 800d25c:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800d262:	4611      	mov	r1, r2
 800d264:	4798      	blx	r3
        }
        break;
 800d266:	e183      	b.n	800d570 <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	461a      	mov	r2, r3
 800d26e:	4b94      	ldr	r3, [pc, #592]	; (800d4c0 <OpenThread_CallBack_Processing+0x2f8>)
 800d270:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 800d272:	4b93      	ldr	r3, [pc, #588]	; (800d4c0 <OpenThread_CallBack_Processing+0x2f8>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	4a92      	ldr	r2, [pc, #584]	; (800d4c4 <OpenThread_CallBack_Processing+0x2fc>)
 800d27a:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 800d27c:	4b91      	ldr	r3, [pc, #580]	; (800d4c4 <OpenThread_CallBack_Processing+0x2fc>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	f000 8177 	beq.w	800d574 <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d286:	4b8f      	ldr	r3, [pc, #572]	; (800d4c4 <OpenThread_CallBack_Processing+0x2fc>)
 800d288:	681c      	ldr	r4, [r3, #0]
 800d28a:	4b8d      	ldr	r3, [pc, #564]	; (800d4c0 <OpenThread_CallBack_Processing+0x2f8>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d294:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d29a:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800d2a0:	47a0      	blx	r4
        }
        break;
 800d2a2:	e167      	b.n	800d574 <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 800d2a4:	4b88      	ldr	r3, [pc, #544]	; (800d4c8 <OpenThread_CallBack_Processing+0x300>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f000 8165 	beq.w	800d578 <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d2ae:	4b86      	ldr	r3, [pc, #536]	; (800d4c8 <OpenThread_CallBack_Processing+0x300>)
 800d2b0:	681c      	ldr	r4, [r3, #0]
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d2bc:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d2c2:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800d2c8:	47a0      	blx	r4
        }
        break;
 800d2ca:	e155      	b.n	800d578 <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	4b7e      	ldr	r3, [pc, #504]	; (800d4cc <OpenThread_CallBack_Processing+0x304>)
 800d2d4:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800d2d6:	4b7d      	ldr	r3, [pc, #500]	; (800d4cc <OpenThread_CallBack_Processing+0x304>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	4a7c      	ldr	r2, [pc, #496]	; (800d4d0 <OpenThread_CallBack_Processing+0x308>)
 800d2de:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 800d2e0:	4b7b      	ldr	r3, [pc, #492]	; (800d4d0 <OpenThread_CallBack_Processing+0x308>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f000 8149 	beq.w	800d57c <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d2ea:	4b79      	ldr	r3, [pc, #484]	; (800d4d0 <OpenThread_CallBack_Processing+0x308>)
 800d2ec:	681c      	ldr	r4, [r3, #0]
 800d2ee:	4b77      	ldr	r3, [pc, #476]	; (800d4cc <OpenThread_CallBack_Processing+0x304>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d2f8:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d2fe:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d304:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	462b      	mov	r3, r5
 800d310:	47a0      	blx	r4
        }
        break;
 800d312:	e133      	b.n	800d57c <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800d314:	2001      	movs	r0, #1
 800d316:	f7fe fd00 	bl	800bd1a <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800d31a:	f7f7 f978 	bl	800460e <HAL_NVIC_SystemReset>
        break;
 800d31e:	e14c      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 800d320:	4b6c      	ldr	r3, [pc, #432]	; (800d4d4 <OpenThread_CallBack_Processing+0x30c>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	f000 812b 	beq.w	800d580 <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800d32a:	4b6a      	ldr	r3, [pc, #424]	; (800d4d4 <OpenThread_CallBack_Processing+0x30c>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	683a      	ldr	r2, [r7, #0]
 800d330:	6892      	ldr	r2, [r2, #8]
 800d332:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d334:	683a      	ldr	r2, [r7, #0]
 800d336:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800d338:	4611      	mov	r1, r2
 800d33a:	4798      	blx	r3
        }
        break;
 800d33c:	e120      	b.n	800d580 <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 800d33e:	4b66      	ldr	r3, [pc, #408]	; (800d4d8 <OpenThread_CallBack_Processing+0x310>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	f000 811e 	beq.w	800d584 <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800d348:	4b63      	ldr	r3, [pc, #396]	; (800d4d8 <OpenThread_CallBack_Processing+0x310>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	683a      	ldr	r2, [r7, #0]
 800d34e:	6892      	ldr	r2, [r2, #8]
 800d350:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 800d352:	683a      	ldr	r2, [r7, #0]
 800d354:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800d356:	2000      	movs	r0, #0
 800d358:	4798      	blx	r3
        }
        break;
 800d35a:	e113      	b.n	800d584 <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 800d35c:	4b5f      	ldr	r3, [pc, #380]	; (800d4dc <OpenThread_CallBack_Processing+0x314>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	f000 8111 	beq.w	800d588 <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800d366:	4b5d      	ldr	r3, [pc, #372]	; (800d4dc <OpenThread_CallBack_Processing+0x314>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	683a      	ldr	r2, [r7, #0]
 800d36c:	6892      	ldr	r2, [r2, #8]
 800d36e:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d370:	683a      	ldr	r2, [r7, #0]
 800d372:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800d374:	4611      	mov	r1, r2
 800d376:	4798      	blx	r3
        }
        break;
 800d378:	e106      	b.n	800d588 <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 800d37a:	4b59      	ldr	r3, [pc, #356]	; (800d4e0 <OpenThread_CallBack_Processing+0x318>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	f000 8104 	beq.w	800d58c <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800d384:	4b56      	ldr	r3, [pc, #344]	; (800d4e0 <OpenThread_CallBack_Processing+0x318>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	683a      	ldr	r2, [r7, #0]
 800d38a:	6892      	ldr	r2, [r2, #8]
 800d38c:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d38e:	683a      	ldr	r2, [r7, #0]
 800d390:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800d392:	4611      	mov	r1, r2
 800d394:	4798      	blx	r3
        }
        break;
 800d396:	e0f9      	b.n	800d58c <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 800d398:	4b52      	ldr	r3, [pc, #328]	; (800d4e4 <OpenThread_CallBack_Processing+0x31c>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f000 80f7 	beq.w	800d590 <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800d3a2:	4b50      	ldr	r3, [pc, #320]	; (800d4e4 <OpenThread_CallBack_Processing+0x31c>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	683a      	ldr	r2, [r7, #0]
 800d3a8:	6892      	ldr	r2, [r2, #8]
 800d3aa:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800d3ac:	683a      	ldr	r2, [r7, #0]
 800d3ae:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	4798      	blx	r3
        }
        break;
 800d3b4:	e0ec      	b.n	800d590 <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800d3b6:	4b4c      	ldr	r3, [pc, #304]	; (800d4e8 <OpenThread_CallBack_Processing+0x320>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	f000 80ea 	beq.w	800d594 <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d3c0:	4b49      	ldr	r3, [pc, #292]	; (800d4e8 <OpenThread_CallBack_Processing+0x320>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	683a      	ldr	r2, [r7, #0]
 800d3c6:	6892      	ldr	r2, [r2, #8]
 800d3c8:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800d3ca:	683a      	ldr	r2, [r7, #0]
 800d3cc:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d3ce:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 800d3d0:	683a      	ldr	r2, [r7, #0]
 800d3d2:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800d3d4:	4798      	blx	r3
        }
        break;
 800d3d6:	e0dd      	b.n	800d594 <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800d3d8:	4b44      	ldr	r3, [pc, #272]	; (800d4ec <OpenThread_CallBack_Processing+0x324>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f000 80db 	beq.w	800d598 <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800d3e2:	4b42      	ldr	r3, [pc, #264]	; (800d4ec <OpenThread_CallBack_Processing+0x324>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	683a      	ldr	r2, [r7, #0]
 800d3e8:	6892      	ldr	r2, [r2, #8]
 800d3ea:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 800d3ec:	683a      	ldr	r2, [r7, #0]
 800d3ee:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	4798      	blx	r3
        }
        break;
 800d3f4:	e0d0      	b.n	800d598 <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800d3f6:	4b3e      	ldr	r3, [pc, #248]	; (800d4f0 <OpenThread_CallBack_Processing+0x328>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f000 80ce 	beq.w	800d59c <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d400:	4b3b      	ldr	r3, [pc, #236]	; (800d4f0 <OpenThread_CallBack_Processing+0x328>)
 800d402:	681c      	ldr	r4, [r3, #0]
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d40c:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d412:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800d418:	47a0      	blx	r4
        }
        break;
 800d41a:	e0bf      	b.n	800d59c <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 800d41c:	4b35      	ldr	r3, [pc, #212]	; (800d4f4 <OpenThread_CallBack_Processing+0x32c>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	f000 80bd 	beq.w	800d5a0 <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d426:	4b33      	ldr	r3, [pc, #204]	; (800d4f4 <OpenThread_CallBack_Processing+0x32c>)
 800d428:	681c      	ldr	r4, [r3, #0]
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d434:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d43a:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800d444:	b2db      	uxtb	r3, r3
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	4613      	mov	r3, r2
 800d44a:	462a      	mov	r2, r5
 800d44c:	47a0      	blx	r4
        }
        break;
 800d44e:	e0a7      	b.n	800d5a0 <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 800d450:	4b29      	ldr	r3, [pc, #164]	; (800d4f8 <OpenThread_CallBack_Processing+0x330>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	f000 80a5 	beq.w	800d5a4 <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d45a:	4b27      	ldr	r3, [pc, #156]	; (800d4f8 <OpenThread_CallBack_Processing+0x330>)
 800d45c:	681c      	ldr	r4, [r3, #0]
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d468:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d46e:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800d474:	47a0      	blx	r4
        }
        break;
 800d476:	e095      	b.n	800d5a4 <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 800d478:	4b20      	ldr	r3, [pc, #128]	; (800d4fc <OpenThread_CallBack_Processing+0x334>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f000 8093 	beq.w	800d5a8 <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 800d482:	4b1e      	ldr	r3, [pc, #120]	; (800d4fc <OpenThread_CallBack_Processing+0x334>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	683a      	ldr	r2, [r7, #0]
 800d488:	6892      	ldr	r2, [r2, #8]
 800d48a:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 800d48c:	683a      	ldr	r2, [r7, #0]
 800d48e:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 800d490:	4611      	mov	r1, r2
 800d492:	4798      	blx	r3
        }
        break;
 800d494:	e088      	b.n	800d5a8 <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 800d496:	4b1a      	ldr	r3, [pc, #104]	; (800d500 <OpenThread_CallBack_Processing+0x338>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f000 8086 	beq.w	800d5ac <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d4a0:	4b17      	ldr	r3, [pc, #92]	; (800d500 <OpenThread_CallBack_Processing+0x338>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	683a      	ldr	r2, [r7, #0]
 800d4a6:	6892      	ldr	r2, [r2, #8]
 800d4a8:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 800d4aa:	683a      	ldr	r2, [r7, #0]
 800d4ac:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d4ae:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 800d4b0:	683a      	ldr	r2, [r7, #0]
 800d4b2:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800d4b4:	b2d2      	uxtb	r2, r2
 800d4b6:	4798      	blx	r3
        }
        break;
 800d4b8:	e078      	b.n	800d5ac <OpenThread_CallBack_Processing+0x3e4>
 800d4ba:	bf00      	nop
 800d4bc:	20000348 	.word	0x20000348
 800d4c0:	20004fb0 	.word	0x20004fb0
 800d4c4:	20000388 	.word	0x20000388
 800d4c8:	2000038c 	.word	0x2000038c
 800d4cc:	20004fac 	.word	0x20004fac
 800d4d0:	20000390 	.word	0x20000390
 800d4d4:	20000350 	.word	0x20000350
 800d4d8:	2000034c 	.word	0x2000034c
 800d4dc:	20000354 	.word	0x20000354
 800d4e0:	20000358 	.word	0x20000358
 800d4e4:	2000035c 	.word	0x2000035c
 800d4e8:	20000360 	.word	0x20000360
 800d4ec:	20000364 	.word	0x20000364
 800d4f0:	20000368 	.word	0x20000368
 800d4f4:	2000036c 	.word	0x2000036c
 800d4f8:	20000370 	.word	0x20000370
 800d4fc:	20000374 	.word	0x20000374
 800d500:	20000378 	.word	0x20000378
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800d504:	4b30      	ldr	r3, [pc, #192]	; (800d5c8 <OpenThread_CallBack_Processing+0x400>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d051      	beq.n	800d5b0 <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d50c:	4b2e      	ldr	r3, [pc, #184]	; (800d5c8 <OpenThread_CallBack_Processing+0x400>)
 800d50e:	681c      	ldr	r4, [r3, #0]
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d51a:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d520:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800d526:	b2db      	uxtb	r3, r3
 800d528:	47a0      	blx	r4
        }
        break;
 800d52a:	e041      	b.n	800d5b0 <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 800d52c:	4b27      	ldr	r3, [pc, #156]	; (800d5cc <OpenThread_CallBack_Processing+0x404>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d03f      	beq.n	800d5b4 <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800d534:	4b25      	ldr	r3, [pc, #148]	; (800d5cc <OpenThread_CallBack_Processing+0x404>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	683a      	ldr	r2, [r7, #0]
 800d53a:	6892      	ldr	r2, [r2, #8]
 800d53c:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 800d53e:	683a      	ldr	r2, [r7, #0]
 800d540:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800d542:	b252      	sxtb	r2, r2
 800d544:	4611      	mov	r1, r2
 800d546:	4798      	blx	r3
        }
        break;
 800d548:	e034      	b.n	800d5b4 <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800d54a:	4b21      	ldr	r3, [pc, #132]	; (800d5d0 <OpenThread_CallBack_Processing+0x408>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d032      	beq.n	800d5b8 <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d552:	4b1f      	ldr	r3, [pc, #124]	; (800d5d0 <OpenThread_CallBack_Processing+0x408>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	6892      	ldr	r2, [r2, #8]
 800d55a:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 800d55c:	683a      	ldr	r2, [r7, #0]
 800d55e:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d560:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 800d562:	683a      	ldr	r2, [r7, #0]
 800d564:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800d566:	4798      	blx	r3
        }
        break;
 800d568:	e026      	b.n	800d5b8 <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 800d56a:	2301      	movs	r3, #1
 800d56c:	71fb      	strb	r3, [r7, #7]
        break;
 800d56e:	e024      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d570:	bf00      	nop
 800d572:	e022      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d574:	bf00      	nop
 800d576:	e020      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d578:	bf00      	nop
 800d57a:	e01e      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d57c:	bf00      	nop
 800d57e:	e01c      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d580:	bf00      	nop
 800d582:	e01a      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d584:	bf00      	nop
 800d586:	e018      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d588:	bf00      	nop
 800d58a:	e016      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d58c:	bf00      	nop
 800d58e:	e014      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d590:	bf00      	nop
 800d592:	e012      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d594:	bf00      	nop
 800d596:	e010      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d598:	bf00      	nop
 800d59a:	e00e      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d59c:	bf00      	nop
 800d59e:	e00c      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5a0:	bf00      	nop
 800d5a2:	e00a      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5a4:	bf00      	nop
 800d5a6:	e008      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5a8:	bf00      	nop
 800d5aa:	e006      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5ac:	bf00      	nop
 800d5ae:	e004      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5b0:	bf00      	nop
 800d5b2:	e002      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5b4:	bf00      	nop
 800d5b6:	e000      	b.n	800d5ba <OpenThread_CallBack_Processing+0x3f2>
        break;
 800d5b8:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800d5ba:	f7fe fed9 	bl	800c370 <TL_THREAD_SendAck>
    return status;
 800d5be:	79fb      	ldrb	r3, [r7, #7]

}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bdb0      	pop	{r4, r5, r7, pc}
 800d5c8:	2000037c 	.word	0x2000037c
 800d5cc:	20000380 	.word	0x20000380
 800d5d0:	20000384 	.word	0x20000384

0800d5d4 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	460b      	mov	r3, r1
 800d5de:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800d5e0:	f004 fe6e 	bl	80122c0 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d5e4:	f004 fe0a 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d5e8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 800d5f2:	701a      	strb	r2, [r3, #0]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	f042 0201 	orr.w	r2, r2, #1
 800d5fa:	705a      	strb	r2, [r3, #1]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	709a      	strb	r2, [r3, #2]
 800d600:	2200      	movs	r2, #0
 800d602:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2200      	movs	r2, #0
 800d608:	f042 0201 	orr.w	r2, r2, #1
 800d60c:	711a      	strb	r2, [r3, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	715a      	strb	r2, [r3, #5]
 800d612:	2200      	movs	r2, #0
 800d614:	719a      	strb	r2, [r3, #6]
 800d616:	2200      	movs	r2, #0
 800d618:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800d61a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800d622:	f004 fe0f 	bl	8012244 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d626:	f004 fdf5 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d62a:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	689b      	ldr	r3, [r3, #8]
 800d630:	b2db      	uxtb	r3, r3
}
 800d632:	4618      	mov	r0, r3
 800d634:	3710      	adds	r7, #16
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b084      	sub	sp, #16
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
 800d642:	460b      	mov	r3, r1
 800d644:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800d646:	f004 fe3b 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d64a:	f004 fdd7 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d64e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2200      	movs	r2, #0
 800d654:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800d658:	701a      	strb	r2, [r3, #0]
 800d65a:	2200      	movs	r2, #0
 800d65c:	705a      	strb	r2, [r3, #1]
 800d65e:	2200      	movs	r2, #0
 800d660:	709a      	strb	r2, [r3, #2]
 800d662:	2200      	movs	r2, #0
 800d664:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2200      	movs	r2, #0
 800d66a:	f042 0201 	orr.w	r2, r2, #1
 800d66e:	711a      	strb	r2, [r3, #4]
 800d670:	2200      	movs	r2, #0
 800d672:	715a      	strb	r2, [r3, #5]
 800d674:	2200      	movs	r2, #0
 800d676:	719a      	strb	r2, [r3, #6]
 800d678:	2200      	movs	r2, #0
 800d67a:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800d67c:	78fa      	ldrb	r2, [r7, #3]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d682:	f004 fddf 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d686:	f004 fdc5 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d68a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	b2db      	uxtb	r3, r3
}
 800d692:	4618      	mov	r0, r3
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <otThreadSetChildTimeout>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI void OTCALL otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)
{
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b084      	sub	sp, #16
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
 800d6a2:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d6a4:	f004 fe0c 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d6a8:	f004 fda8 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d6ac:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_CHILD_TIMEOUT;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 800d6b6:	701a      	strb	r2, [r3, #0]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	705a      	strb	r2, [r3, #1]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	709a      	strb	r2, [r3, #2]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	f042 0201 	orr.w	r2, r2, #1
 800d6cc:	711a      	strb	r2, [r3, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	715a      	strb	r2, [r3, #5]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	719a      	strb	r2, [r3, #6]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aTimeout;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	683a      	ldr	r2, [r7, #0]
 800d6de:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d6e0:	f004 fdb0 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d6e4:	f004 fd96 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d6e8:	60f8      	str	r0, [r7, #12]
}
 800d6ea:	bf00      	nop
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <otThreadGetMeshLocalEid>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b084      	sub	sp, #16
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d6fa:	f004 fde1 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d6fe:	f004 fd7d 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d702:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2200      	movs	r2, #0
 800d708:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 800d70c:	701a      	strb	r2, [r3, #0]
 800d70e:	2200      	movs	r2, #0
 800d710:	705a      	strb	r2, [r3, #1]
 800d712:	2200      	movs	r2, #0
 800d714:	709a      	strb	r2, [r3, #2]
 800d716:	2200      	movs	r2, #0
 800d718:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	711a      	strb	r2, [r3, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	715a      	strb	r2, [r3, #5]
 800d724:	2200      	movs	r2, #0
 800d726:	719a      	strb	r2, [r3, #6]
 800d728:	2200      	movs	r2, #0
 800d72a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d72c:	f004 fd8a 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d730:	f004 fd70 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d734:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	689b      	ldr	r3, [r3, #8]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <otThreadGetLinkLocalIp6Address>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otIp6Address *otThreadGetLinkLocalIp6Address(otInstance *aInstance)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b084      	sub	sp, #16
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d74a:	f004 fdb9 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d74e:	f004 fd55 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d752:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_LINK_LOCAL_IP6_ADDRESS;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2200      	movs	r2, #0
 800d758:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 800d75c:	701a      	strb	r2, [r3, #0]
 800d75e:	2200      	movs	r2, #0
 800d760:	705a      	strb	r2, [r3, #1]
 800d762:	2200      	movs	r2, #0
 800d764:	709a      	strb	r2, [r3, #2]
 800d766:	2200      	movs	r2, #0
 800d768:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2200      	movs	r2, #0
 800d76e:	711a      	strb	r2, [r3, #4]
 800d770:	2200      	movs	r2, #0
 800d772:	715a      	strb	r2, [r3, #5]
 800d774:	2200      	movs	r2, #0
 800d776:	719a      	strb	r2, [r3, #6]
 800d778:	2200      	movs	r2, #0
 800d77a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d77c:	f004 fd62 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d780:	f004 fd48 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d784:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	689b      	ldr	r3, [r3, #8]
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b084      	sub	sp, #16
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
 800d79a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800d79c:	f004 fd90 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d7a0:	f004 fd2c 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d7a4:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 800d7ae:	701a      	strb	r2, [r3, #0]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	705a      	strb	r2, [r3, #1]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	709a      	strb	r2, [r3, #2]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f042 0201 	orr.w	r2, r2, #1
 800d7c4:	711a      	strb	r2, [r3, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	715a      	strb	r2, [r3, #5]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	719a      	strb	r2, [r3, #6]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 800d7d2:	683a      	ldr	r2, [r7, #0]
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800d7d8:	f004 fd34 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d7dc:	f004 fd1a 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d7e0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	b2db      	uxtb	r3, r3
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3710      	adds	r7, #16
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d7f8:	f004 fd62 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d7fc:	f004 fcfe 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d800:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2200      	movs	r2, #0
 800d806:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 800d80a:	701a      	strb	r2, [r3, #0]
 800d80c:	2200      	movs	r2, #0
 800d80e:	705a      	strb	r2, [r3, #1]
 800d810:	2200      	movs	r2, #0
 800d812:	709a      	strb	r2, [r3, #2]
 800d814:	2200      	movs	r2, #0
 800d816:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2200      	movs	r2, #0
 800d81c:	711a      	strb	r2, [r3, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	715a      	strb	r2, [r3, #5]
 800d822:	2200      	movs	r2, #0
 800d824:	719a      	strb	r2, [r3, #6]
 800d826:	2200      	movs	r2, #0
 800d828:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d82a:	f004 fd0b 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d82e:	f004 fcf1 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d832:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	b2db      	uxtb	r3, r3
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b084      	sub	sp, #16
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800d84a:	f004 fd39 	bl	80122c0 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800d84e:	f004 fcd5 	bl	80121fc <THREAD_Get_OTCmdPayloadBuffer>
 800d852:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d85c:	701a      	strb	r2, [r3, #0]
 800d85e:	2200      	movs	r2, #0
 800d860:	705a      	strb	r2, [r3, #1]
 800d862:	2200      	movs	r2, #0
 800d864:	709a      	strb	r2, [r3, #2]
 800d866:	2200      	movs	r2, #0
 800d868:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2200      	movs	r2, #0
 800d86e:	711a      	strb	r2, [r3, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	715a      	strb	r2, [r3, #5]
 800d874:	2200      	movs	r2, #0
 800d876:	719a      	strb	r2, [r3, #6]
 800d878:	2200      	movs	r2, #0
 800d87a:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800d87c:	f004 fce2 	bl	8012244 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800d880:	f004 fcc8 	bl	8012214 <THREAD_Get_OTCmdRspPayloadBuffer>
 800d884:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	b29b      	uxth	r3, r3
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	605a      	str	r2, [r3, #4]
}
 800d8a8:	bf00      	nop
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b087      	sub	sp, #28
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8bc:	f3ef 8310 	mrs	r3, PRIMASK
 800d8c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d8c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d8c6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d102      	bne.n	800d8d8 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	75fb      	strb	r3, [r7, #23]
 800d8d6:	e001      	b.n	800d8dc <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	75fb      	strb	r3, [r7, #23]
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800d8e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	371c      	adds	r7, #28
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b087      	sub	sp, #28
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8fe:	f3ef 8310 	mrs	r3, PRIMASK
 800d902:	60fb      	str	r3, [r7, #12]
  return(result);
 800d904:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d906:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d908:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	683a      	ldr	r2, [r7, #0]
 800d91c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	683a      	ldr	r2, [r7, #0]
 800d924:	605a      	str	r2, [r3, #4]
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d930:	bf00      	nop
 800d932:	371c      	adds	r7, #28
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b087      	sub	sp, #28
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d946:	f3ef 8310 	mrs	r3, PRIMASK
 800d94a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d94c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d94e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d950:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	685a      	ldr	r2, [r3, #4]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	683a      	ldr	r2, [r7, #0]
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d978:	bf00      	nop
 800d97a:	371c      	adds	r7, #28
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800d984:	b480      	push	{r7}
 800d986:	b087      	sub	sp, #28
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d98c:	f3ef 8310 	mrs	r3, PRIMASK
 800d990:	60fb      	str	r3, [r7, #12]
  return(result);
 800d992:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d994:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d996:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	6812      	ldr	r2, [r2, #0]
 800d9a0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	6852      	ldr	r2, [r2, #4]
 800d9aa:	605a      	str	r2, [r3, #4]
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d9b6:	bf00      	nop
 800d9b8:	371c      	adds	r7, #28
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b086      	sub	sp, #24
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
 800d9ca:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d9d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d9d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d9d6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7ff ffcd 	bl	800d984 <LST_remove_node>
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d9f4:	bf00      	nop
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d9fc:	b480      	push	{r7}
 800d9fe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800da00:	bf00      	nop
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr
	...

0800da0c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da12:	f3ef 8305 	mrs	r3, IPSR
 800da16:	60bb      	str	r3, [r7, #8]
  return(result);
 800da18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d10f      	bne.n	800da3e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da1e:	f3ef 8310 	mrs	r3, PRIMASK
 800da22:	607b      	str	r3, [r7, #4]
  return(result);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d105      	bne.n	800da36 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da2a:	f3ef 8311 	mrs	r3, BASEPRI
 800da2e:	603b      	str	r3, [r7, #0]
  return(result);
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d007      	beq.n	800da46 <osKernelInitialize+0x3a>
 800da36:	4b0e      	ldr	r3, [pc, #56]	; (800da70 <osKernelInitialize+0x64>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d103      	bne.n	800da46 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800da3e:	f06f 0305 	mvn.w	r3, #5
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	e00c      	b.n	800da60 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800da46:	4b0a      	ldr	r3, [pc, #40]	; (800da70 <osKernelInitialize+0x64>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d105      	bne.n	800da5a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800da4e:	4b08      	ldr	r3, [pc, #32]	; (800da70 <osKernelInitialize+0x64>)
 800da50:	2201      	movs	r2, #1
 800da52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da54:	2300      	movs	r3, #0
 800da56:	60fb      	str	r3, [r7, #12]
 800da58:	e002      	b.n	800da60 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800da5a:	f04f 33ff 	mov.w	r3, #4294967295
 800da5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800da60:	68fb      	ldr	r3, [r7, #12]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3714      	adds	r7, #20
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr
 800da6e:	bf00      	nop
 800da70:	20000394 	.word	0x20000394

0800da74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da7a:	f3ef 8305 	mrs	r3, IPSR
 800da7e:	60bb      	str	r3, [r7, #8]
  return(result);
 800da80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10f      	bne.n	800daa6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da86:	f3ef 8310 	mrs	r3, PRIMASK
 800da8a:	607b      	str	r3, [r7, #4]
  return(result);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d105      	bne.n	800da9e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da92:	f3ef 8311 	mrs	r3, BASEPRI
 800da96:	603b      	str	r3, [r7, #0]
  return(result);
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d007      	beq.n	800daae <osKernelStart+0x3a>
 800da9e:	4b0f      	ldr	r3, [pc, #60]	; (800dadc <osKernelStart+0x68>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b02      	cmp	r3, #2
 800daa4:	d103      	bne.n	800daae <osKernelStart+0x3a>
    stat = osErrorISR;
 800daa6:	f06f 0305 	mvn.w	r3, #5
 800daaa:	60fb      	str	r3, [r7, #12]
 800daac:	e010      	b.n	800dad0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800daae:	4b0b      	ldr	r3, [pc, #44]	; (800dadc <osKernelStart+0x68>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d109      	bne.n	800daca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dab6:	f7ff ffa1 	bl	800d9fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800daba:	4b08      	ldr	r3, [pc, #32]	; (800dadc <osKernelStart+0x68>)
 800dabc:	2202      	movs	r2, #2
 800dabe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dac0:	f001 ffd8 	bl	800fa74 <vTaskStartScheduler>
      stat = osOK;
 800dac4:	2300      	movs	r3, #0
 800dac6:	60fb      	str	r3, [r7, #12]
 800dac8:	e002      	b.n	800dad0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800daca:	f04f 33ff 	mov.w	r3, #4294967295
 800dace:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dad0:	68fb      	ldr	r3, [r7, #12]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	20000394 	.word	0x20000394

0800dae0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b090      	sub	sp, #64	; 0x40
 800dae4:	af04      	add	r7, sp, #16
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800daec:	2300      	movs	r3, #0
 800daee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daf0:	f3ef 8305 	mrs	r3, IPSR
 800daf4:	61fb      	str	r3, [r7, #28]
  return(result);
 800daf6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f040 8090 	bne.w	800dc1e <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dafe:	f3ef 8310 	mrs	r3, PRIMASK
 800db02:	61bb      	str	r3, [r7, #24]
  return(result);
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d105      	bne.n	800db16 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db0a:	f3ef 8311 	mrs	r3, BASEPRI
 800db0e:	617b      	str	r3, [r7, #20]
  return(result);
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d003      	beq.n	800db1e <osThreadNew+0x3e>
 800db16:	4b44      	ldr	r3, [pc, #272]	; (800dc28 <osThreadNew+0x148>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	d07f      	beq.n	800dc1e <osThreadNew+0x13e>
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d07c      	beq.n	800dc1e <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800db24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db28:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800db2a:	2318      	movs	r3, #24
 800db2c:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800db2e:	2300      	movs	r3, #0
 800db30:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800db32:	f04f 33ff 	mov.w	r3, #4294967295
 800db36:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d045      	beq.n	800dbca <osThreadNew+0xea>
      if (attr->name != NULL) {
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d002      	beq.n	800db4c <osThreadNew+0x6c>
        name = attr->name;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	699b      	ldr	r3, [r3, #24]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	699b      	ldr	r3, [r3, #24]
 800db58:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800db5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d008      	beq.n	800db72 <osThreadNew+0x92>
 800db60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db62:	2b38      	cmp	r3, #56	; 0x38
 800db64:	d805      	bhi.n	800db72 <osThreadNew+0x92>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	f003 0301 	and.w	r3, r3, #1
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d001      	beq.n	800db76 <osThreadNew+0x96>
        return (NULL);
 800db72:	2300      	movs	r3, #0
 800db74:	e054      	b.n	800dc20 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	695b      	ldr	r3, [r3, #20]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d003      	beq.n	800db86 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	695b      	ldr	r3, [r3, #20]
 800db82:	089b      	lsrs	r3, r3, #2
 800db84:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00e      	beq.n	800dbac <osThreadNew+0xcc>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	2b5b      	cmp	r3, #91	; 0x5b
 800db94:	d90a      	bls.n	800dbac <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d006      	beq.n	800dbac <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	695b      	ldr	r3, [r3, #20]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d002      	beq.n	800dbac <osThreadNew+0xcc>
        mem = 1;
 800dba6:	2301      	movs	r3, #1
 800dba8:	623b      	str	r3, [r7, #32]
 800dbaa:	e010      	b.n	800dbce <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d10c      	bne.n	800dbce <osThreadNew+0xee>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d108      	bne.n	800dbce <osThreadNew+0xee>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	691b      	ldr	r3, [r3, #16]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d104      	bne.n	800dbce <osThreadNew+0xee>
          mem = 0;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	623b      	str	r3, [r7, #32]
 800dbc8:	e001      	b.n	800dbce <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800dbce:	6a3b      	ldr	r3, [r7, #32]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d110      	bne.n	800dbf6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dbdc:	9202      	str	r2, [sp, #8]
 800dbde:	9301      	str	r3, [sp, #4]
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe2:	9300      	str	r3, [sp, #0]
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbea:	68f8      	ldr	r0, [r7, #12]
 800dbec:	f001 fd70 	bl	800f6d0 <xTaskCreateStatic>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	613b      	str	r3, [r7, #16]
 800dbf4:	e013      	b.n	800dc1e <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d110      	bne.n	800dc1e <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfe:	b29a      	uxth	r2, r3
 800dc00:	f107 0310 	add.w	r3, r7, #16
 800dc04:	9301      	str	r3, [sp, #4]
 800dc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc08:	9300      	str	r3, [sp, #0]
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f001 fdb8 	bl	800f784 <xTaskCreate>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d001      	beq.n	800dc1e <osThreadNew+0x13e>
          hTask = NULL;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dc1e:	693b      	ldr	r3, [r7, #16]
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3730      	adds	r7, #48	; 0x30
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	20000394 	.word	0x20000394

0800dc2c <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b08a      	sub	sp, #40	; 0x28
 800dc30:	af02      	add	r7, sp, #8
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <osThreadFlagsSet+0x1a>
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	da03      	bge.n	800dc4e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800dc46:	f06f 0303 	mvn.w	r3, #3
 800dc4a:	60fb      	str	r3, [r7, #12]
 800dc4c:	e046      	b.n	800dcdc <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800dc4e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc54:	f3ef 8305 	mrs	r3, IPSR
 800dc58:	61bb      	str	r3, [r7, #24]
  return(result);
 800dc5a:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d10f      	bne.n	800dc80 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc60:	f3ef 8310 	mrs	r3, PRIMASK
 800dc64:	617b      	str	r3, [r7, #20]
  return(result);
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d105      	bne.n	800dc78 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc6c:	f3ef 8311 	mrs	r3, BASEPRI
 800dc70:	613b      	str	r3, [r7, #16]
  return(result);
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d024      	beq.n	800dcc2 <osThreadFlagsSet+0x96>
 800dc78:	4b1b      	ldr	r3, [pc, #108]	; (800dce8 <osThreadFlagsSet+0xbc>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2b02      	cmp	r3, #2
 800dc7e:	d120      	bne.n	800dcc2 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800dc80:	2300      	movs	r3, #0
 800dc82:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800dc84:	f107 0308 	add.w	r3, r7, #8
 800dc88:	9300      	str	r3, [sp, #0]
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	6839      	ldr	r1, [r7, #0]
 800dc90:	69f8      	ldr	r0, [r7, #28]
 800dc92:	f002 fe2b 	bl	80108ec <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800dc96:	f107 020c 	add.w	r2, r7, #12
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	2200      	movs	r2, #0
 800dca2:	2100      	movs	r1, #0
 800dca4:	69f8      	ldr	r0, [r7, #28]
 800dca6:	f002 fe21 	bl	80108ec <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d015      	beq.n	800dcdc <osThreadFlagsSet+0xb0>
 800dcb0:	4b0e      	ldr	r3, [pc, #56]	; (800dcec <osThreadFlagsSet+0xc0>)
 800dcb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcb6:	601a      	str	r2, [r3, #0]
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	f3bf 8f6f 	isb	sy
 800dcc0:	e00c      	b.n	800dcdc <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	6839      	ldr	r1, [r7, #0]
 800dcc8:	69f8      	ldr	r0, [r7, #28]
 800dcca:	f002 fd59 	bl	8010780 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800dcce:	f107 030c 	add.w	r3, r7, #12
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	69f8      	ldr	r0, [r7, #28]
 800dcd8:	f002 fd52 	bl	8010780 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3720      	adds	r7, #32
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	20000394 	.word	0x20000394
 800dcec:	e000ed04 	.word	0xe000ed04

0800dcf0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b08e      	sub	sp, #56	; 0x38
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcfc:	f3ef 8305 	mrs	r3, IPSR
 800dd00:	61fb      	str	r3, [r7, #28]
  return(result);
 800dd02:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d10f      	bne.n	800dd28 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd08:	f3ef 8310 	mrs	r3, PRIMASK
 800dd0c:	61bb      	str	r3, [r7, #24]
  return(result);
 800dd0e:	69bb      	ldr	r3, [r7, #24]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d105      	bne.n	800dd20 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd14:	f3ef 8311 	mrs	r3, BASEPRI
 800dd18:	617b      	str	r3, [r7, #20]
  return(result);
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d007      	beq.n	800dd30 <osThreadFlagsWait+0x40>
 800dd20:	4b3c      	ldr	r3, [pc, #240]	; (800de14 <osThreadFlagsWait+0x124>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d103      	bne.n	800dd30 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800dd28:	f06f 0305 	mvn.w	r3, #5
 800dd2c:	637b      	str	r3, [r7, #52]	; 0x34
 800dd2e:	e06b      	b.n	800de08 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	da03      	bge.n	800dd3e <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800dd36:	f06f 0303 	mvn.w	r3, #3
 800dd3a:	637b      	str	r3, [r7, #52]	; 0x34
 800dd3c:	e064      	b.n	800de08 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	f003 0302 	and.w	r3, r3, #2
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d002      	beq.n	800dd4e <osThreadFlagsWait+0x5e>
      clear = 0U;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	633b      	str	r3, [r7, #48]	; 0x30
 800dd4c:	e001      	b.n	800dd52 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800dd52:	2300      	movs	r3, #0
 800dd54:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800dd5a:	f001 ffd1 	bl	800fd00 <xTaskGetTickCount>
 800dd5e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800dd60:	f107 0210 	add.w	r2, r7, #16
 800dd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd68:	2000      	movs	r0, #0
 800dd6a:	f002 fcaf 	bl	80106cc <xTaskNotifyWait>
 800dd6e:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800dd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d137      	bne.n	800dde6 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800dd76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	4013      	ands	r3, r2
 800dd7c:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd82:	4313      	orrs	r3, r2
 800dd84:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	f003 0301 	and.w	r3, r3, #1
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d00c      	beq.n	800ddaa <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd94:	4013      	ands	r3, r2
 800dd96:	68fa      	ldr	r2, [r7, #12]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d032      	beq.n	800de02 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d10f      	bne.n	800ddc2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800dda2:	f06f 0302 	mvn.w	r3, #2
 800dda6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800dda8:	e02e      	b.n	800de08 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800ddaa:	68fa      	ldr	r2, [r7, #12]
 800ddac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddae:	4013      	ands	r3, r2
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d128      	bne.n	800de06 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d103      	bne.n	800ddc2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800ddba:	f06f 0302 	mvn.w	r3, #2
 800ddbe:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800ddc0:	e022      	b.n	800de08 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800ddc2:	f001 ff9d 	bl	800fd00 <xTaskGetTickCount>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddca:	1ad3      	subs	r3, r2, r3
 800ddcc:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800ddce:	6a3a      	ldr	r2, [r7, #32]
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d902      	bls.n	800dddc <osThreadFlagsWait+0xec>
          tout  = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddda:	e00e      	b.n	800ddfa <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800dddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddde:	6a3b      	ldr	r3, [r7, #32]
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dde4:	e009      	b.n	800ddfa <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d103      	bne.n	800ddf4 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800ddec:	f06f 0302 	mvn.w	r3, #2
 800ddf0:	637b      	str	r3, [r7, #52]	; 0x34
 800ddf2:	e002      	b.n	800ddfa <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800ddf4:	f06f 0301 	mvn.w	r3, #1
 800ddf8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d1af      	bne.n	800dd60 <osThreadFlagsWait+0x70>
 800de00:	e002      	b.n	800de08 <osThreadFlagsWait+0x118>
            break;
 800de02:	bf00      	nop
 800de04:	e000      	b.n	800de08 <osThreadFlagsWait+0x118>
            break;
 800de06:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800de08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3738      	adds	r7, #56	; 0x38
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	20000394 	.word	0x20000394

0800de18 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de20:	f3ef 8305 	mrs	r3, IPSR
 800de24:	613b      	str	r3, [r7, #16]
  return(result);
 800de26:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d10f      	bne.n	800de4c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de2c:	f3ef 8310 	mrs	r3, PRIMASK
 800de30:	60fb      	str	r3, [r7, #12]
  return(result);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d105      	bne.n	800de44 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de38:	f3ef 8311 	mrs	r3, BASEPRI
 800de3c:	60bb      	str	r3, [r7, #8]
  return(result);
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d007      	beq.n	800de54 <osDelay+0x3c>
 800de44:	4b0a      	ldr	r3, [pc, #40]	; (800de70 <osDelay+0x58>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2b02      	cmp	r3, #2
 800de4a:	d103      	bne.n	800de54 <osDelay+0x3c>
    stat = osErrorISR;
 800de4c:	f06f 0305 	mvn.w	r3, #5
 800de50:	617b      	str	r3, [r7, #20]
 800de52:	e007      	b.n	800de64 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800de54:	2300      	movs	r3, #0
 800de56:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d002      	beq.n	800de64 <osDelay+0x4c>
      vTaskDelay(ticks);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f001 fdd4 	bl	800fa0c <vTaskDelay>
    }
  }

  return (stat);
 800de64:	697b      	ldr	r3, [r7, #20]
}
 800de66:	4618      	mov	r0, r3
 800de68:	3718      	adds	r7, #24
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	20000394 	.word	0x20000394

0800de74 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800de74:	b580      	push	{r7, lr}
 800de76:	b08a      	sub	sp, #40	; 0x28
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800de7c:	2300      	movs	r3, #0
 800de7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de80:	f3ef 8305 	mrs	r3, IPSR
 800de84:	613b      	str	r3, [r7, #16]
  return(result);
 800de86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f040 8085 	bne.w	800df98 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de8e:	f3ef 8310 	mrs	r3, PRIMASK
 800de92:	60fb      	str	r3, [r7, #12]
  return(result);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d105      	bne.n	800dea6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de9a:	f3ef 8311 	mrs	r3, BASEPRI
 800de9e:	60bb      	str	r3, [r7, #8]
  return(result);
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d003      	beq.n	800deae <osMutexNew+0x3a>
 800dea6:	4b3f      	ldr	r3, [pc, #252]	; (800dfa4 <osMutexNew+0x130>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b02      	cmp	r3, #2
 800deac:	d074      	beq.n	800df98 <osMutexNew+0x124>
    if (attr != NULL) {
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d003      	beq.n	800debc <osMutexNew+0x48>
      type = attr->attr_bits;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	623b      	str	r3, [r7, #32]
 800deba:	e001      	b.n	800dec0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800debc:	2300      	movs	r3, #0
 800debe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800dec0:	6a3b      	ldr	r3, [r7, #32]
 800dec2:	f003 0301 	and.w	r3, r3, #1
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d002      	beq.n	800ded0 <osMutexNew+0x5c>
      rmtx = 1U;
 800deca:	2301      	movs	r3, #1
 800decc:	61fb      	str	r3, [r7, #28]
 800dece:	e001      	b.n	800ded4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800ded0:	2300      	movs	r3, #0
 800ded2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ded4:	6a3b      	ldr	r3, [r7, #32]
 800ded6:	f003 0308 	and.w	r3, r3, #8
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d15c      	bne.n	800df98 <osMutexNew+0x124>
      mem = -1;
 800dede:	f04f 33ff 	mov.w	r3, #4294967295
 800dee2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d015      	beq.n	800df16 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d006      	beq.n	800df00 <osMutexNew+0x8c>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	2b4f      	cmp	r3, #79	; 0x4f
 800def8:	d902      	bls.n	800df00 <osMutexNew+0x8c>
          mem = 1;
 800defa:	2301      	movs	r3, #1
 800defc:	61bb      	str	r3, [r7, #24]
 800defe:	e00c      	b.n	800df1a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	689b      	ldr	r3, [r3, #8]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d108      	bne.n	800df1a <osMutexNew+0xa6>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d104      	bne.n	800df1a <osMutexNew+0xa6>
            mem = 0;
 800df10:	2300      	movs	r3, #0
 800df12:	61bb      	str	r3, [r7, #24]
 800df14:	e001      	b.n	800df1a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800df16:	2300      	movs	r3, #0
 800df18:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d112      	bne.n	800df46 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d007      	beq.n	800df36 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	689b      	ldr	r3, [r3, #8]
 800df2a:	4619      	mov	r1, r3
 800df2c:	2004      	movs	r0, #4
 800df2e:	f000 fc9c 	bl	800e86a <xQueueCreateMutexStatic>
 800df32:	6278      	str	r0, [r7, #36]	; 0x24
 800df34:	e016      	b.n	800df64 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	4619      	mov	r1, r3
 800df3c:	2001      	movs	r0, #1
 800df3e:	f000 fc94 	bl	800e86a <xQueueCreateMutexStatic>
 800df42:	6278      	str	r0, [r7, #36]	; 0x24
 800df44:	e00e      	b.n	800df64 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d10b      	bne.n	800df64 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d004      	beq.n	800df5c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800df52:	2004      	movs	r0, #4
 800df54:	f000 fc71 	bl	800e83a <xQueueCreateMutex>
 800df58:	6278      	str	r0, [r7, #36]	; 0x24
 800df5a:	e003      	b.n	800df64 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800df5c:	2001      	movs	r0, #1
 800df5e:	f000 fc6c 	bl	800e83a <xQueueCreateMutex>
 800df62:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800df64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00c      	beq.n	800df84 <osMutexNew+0x110>
        if (attr != NULL) {
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d003      	beq.n	800df78 <osMutexNew+0x104>
          name = attr->name;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	617b      	str	r3, [r7, #20]
 800df76:	e001      	b.n	800df7c <osMutexNew+0x108>
        } else {
          name = NULL;
 800df78:	2300      	movs	r3, #0
 800df7a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800df7c:	6979      	ldr	r1, [r7, #20]
 800df7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df80:	f001 fb20 	bl	800f5c4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800df84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df86:	2b00      	cmp	r3, #0
 800df88:	d006      	beq.n	800df98 <osMutexNew+0x124>
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d003      	beq.n	800df98 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800df90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df92:	f043 0301 	orr.w	r3, r3, #1
 800df96:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800df98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3728      	adds	r7, #40	; 0x28
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	20000394 	.word	0x20000394

0800dfa8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b088      	sub	sp, #32
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f023 0301 	bic.w	r3, r3, #1
 800dfb8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f003 0301 	and.w	r3, r3, #1
 800dfc0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfc6:	f3ef 8305 	mrs	r3, IPSR
 800dfca:	613b      	str	r3, [r7, #16]
  return(result);
 800dfcc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d10f      	bne.n	800dff2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfd2:	f3ef 8310 	mrs	r3, PRIMASK
 800dfd6:	60fb      	str	r3, [r7, #12]
  return(result);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d105      	bne.n	800dfea <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dfde:	f3ef 8311 	mrs	r3, BASEPRI
 800dfe2:	60bb      	str	r3, [r7, #8]
  return(result);
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d007      	beq.n	800dffa <osMutexAcquire+0x52>
 800dfea:	4b1d      	ldr	r3, [pc, #116]	; (800e060 <osMutexAcquire+0xb8>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b02      	cmp	r3, #2
 800dff0:	d103      	bne.n	800dffa <osMutexAcquire+0x52>
    stat = osErrorISR;
 800dff2:	f06f 0305 	mvn.w	r3, #5
 800dff6:	61fb      	str	r3, [r7, #28]
 800dff8:	e02c      	b.n	800e054 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800dffa:	69bb      	ldr	r3, [r7, #24]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d103      	bne.n	800e008 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800e000:	f06f 0303 	mvn.w	r3, #3
 800e004:	61fb      	str	r3, [r7, #28]
 800e006:	e025      	b.n	800e054 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d011      	beq.n	800e032 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e00e:	6839      	ldr	r1, [r7, #0]
 800e010:	69b8      	ldr	r0, [r7, #24]
 800e012:	f000 fc78 	bl	800e906 <xQueueTakeMutexRecursive>
 800e016:	4603      	mov	r3, r0
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d01b      	beq.n	800e054 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d003      	beq.n	800e02a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800e022:	f06f 0301 	mvn.w	r3, #1
 800e026:	61fb      	str	r3, [r7, #28]
 800e028:	e014      	b.n	800e054 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e02a:	f06f 0302 	mvn.w	r3, #2
 800e02e:	61fb      	str	r3, [r7, #28]
 800e030:	e010      	b.n	800e054 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e032:	6839      	ldr	r1, [r7, #0]
 800e034:	69b8      	ldr	r0, [r7, #24]
 800e036:	f000 fff5 	bl	800f024 <xQueueSemaphoreTake>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d009      	beq.n	800e054 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d003      	beq.n	800e04e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800e046:	f06f 0301 	mvn.w	r3, #1
 800e04a:	61fb      	str	r3, [r7, #28]
 800e04c:	e002      	b.n	800e054 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e04e:	f06f 0302 	mvn.w	r3, #2
 800e052:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e054:	69fb      	ldr	r3, [r7, #28]
}
 800e056:	4618      	mov	r0, r3
 800e058:	3720      	adds	r7, #32
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	20000394 	.word	0x20000394

0800e064 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e064:	b580      	push	{r7, lr}
 800e066:	b088      	sub	sp, #32
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f023 0301 	bic.w	r3, r3, #1
 800e072:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f003 0301 	and.w	r3, r3, #1
 800e07a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e07c:	2300      	movs	r3, #0
 800e07e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e080:	f3ef 8305 	mrs	r3, IPSR
 800e084:	613b      	str	r3, [r7, #16]
  return(result);
 800e086:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d10f      	bne.n	800e0ac <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e08c:	f3ef 8310 	mrs	r3, PRIMASK
 800e090:	60fb      	str	r3, [r7, #12]
  return(result);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d105      	bne.n	800e0a4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e098:	f3ef 8311 	mrs	r3, BASEPRI
 800e09c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d007      	beq.n	800e0b4 <osMutexRelease+0x50>
 800e0a4:	4b16      	ldr	r3, [pc, #88]	; (800e100 <osMutexRelease+0x9c>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b02      	cmp	r3, #2
 800e0aa:	d103      	bne.n	800e0b4 <osMutexRelease+0x50>
    stat = osErrorISR;
 800e0ac:	f06f 0305 	mvn.w	r3, #5
 800e0b0:	61fb      	str	r3, [r7, #28]
 800e0b2:	e01f      	b.n	800e0f4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d103      	bne.n	800e0c2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800e0ba:	f06f 0303 	mvn.w	r3, #3
 800e0be:	61fb      	str	r3, [r7, #28]
 800e0c0:	e018      	b.n	800e0f4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d009      	beq.n	800e0dc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e0c8:	69b8      	ldr	r0, [r7, #24]
 800e0ca:	f000 fbe9 	bl	800e8a0 <xQueueGiveMutexRecursive>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	d00f      	beq.n	800e0f4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e0d4:	f06f 0302 	mvn.w	r3, #2
 800e0d8:	61fb      	str	r3, [r7, #28]
 800e0da:	e00b      	b.n	800e0f4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e0dc:	2300      	movs	r3, #0
 800e0de:	2200      	movs	r2, #0
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	69b8      	ldr	r0, [r7, #24]
 800e0e4:	f000 fcaa 	bl	800ea3c <xQueueGenericSend>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d002      	beq.n	800e0f4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e0ee:	f06f 0302 	mvn.w	r3, #2
 800e0f2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e0f4:	69fb      	ldr	r3, [r7, #28]
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3720      	adds	r7, #32
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	20000394 	.word	0x20000394

0800e104 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e104:	b580      	push	{r7, lr}
 800e106:	b08c      	sub	sp, #48	; 0x30
 800e108:	af02      	add	r7, sp, #8
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e110:	2300      	movs	r3, #0
 800e112:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e114:	f3ef 8305 	mrs	r3, IPSR
 800e118:	61bb      	str	r3, [r7, #24]
  return(result);
 800e11a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f040 8087 	bne.w	800e230 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e122:	f3ef 8310 	mrs	r3, PRIMASK
 800e126:	617b      	str	r3, [r7, #20]
  return(result);
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d105      	bne.n	800e13a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e12e:	f3ef 8311 	mrs	r3, BASEPRI
 800e132:	613b      	str	r3, [r7, #16]
  return(result);
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d003      	beq.n	800e142 <osSemaphoreNew+0x3e>
 800e13a:	4b40      	ldr	r3, [pc, #256]	; (800e23c <osSemaphoreNew+0x138>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2b02      	cmp	r3, #2
 800e140:	d076      	beq.n	800e230 <osSemaphoreNew+0x12c>
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d073      	beq.n	800e230 <osSemaphoreNew+0x12c>
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d86f      	bhi.n	800e230 <osSemaphoreNew+0x12c>
    mem = -1;
 800e150:	f04f 33ff 	mov.w	r3, #4294967295
 800e154:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d015      	beq.n	800e188 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	689b      	ldr	r3, [r3, #8]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d006      	beq.n	800e172 <osSemaphoreNew+0x6e>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	2b4f      	cmp	r3, #79	; 0x4f
 800e16a:	d902      	bls.n	800e172 <osSemaphoreNew+0x6e>
        mem = 1;
 800e16c:	2301      	movs	r3, #1
 800e16e:	623b      	str	r3, [r7, #32]
 800e170:	e00c      	b.n	800e18c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	689b      	ldr	r3, [r3, #8]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d108      	bne.n	800e18c <osSemaphoreNew+0x88>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	68db      	ldr	r3, [r3, #12]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d104      	bne.n	800e18c <osSemaphoreNew+0x88>
          mem = 0;
 800e182:	2300      	movs	r3, #0
 800e184:	623b      	str	r3, [r7, #32]
 800e186:	e001      	b.n	800e18c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800e188:	2300      	movs	r3, #0
 800e18a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800e18c:	6a3b      	ldr	r3, [r7, #32]
 800e18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e192:	d04d      	beq.n	800e230 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2b01      	cmp	r3, #1
 800e198:	d129      	bne.n	800e1ee <osSemaphoreNew+0xea>
        if (mem == 1) {
 800e19a:	6a3b      	ldr	r3, [r7, #32]
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d10b      	bne.n	800e1b8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	689a      	ldr	r2, [r3, #8]
 800e1a4:	2303      	movs	r3, #3
 800e1a6:	9300      	str	r3, [sp, #0]
 800e1a8:	4613      	mov	r3, r2
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	2100      	movs	r1, #0
 800e1ae:	2001      	movs	r0, #1
 800e1b0:	f000 fa54 	bl	800e65c <xQueueGenericCreateStatic>
 800e1b4:	6278      	str	r0, [r7, #36]	; 0x24
 800e1b6:	e005      	b.n	800e1c4 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800e1b8:	2203      	movs	r2, #3
 800e1ba:	2100      	movs	r1, #0
 800e1bc:	2001      	movs	r0, #1
 800e1be:	f000 fac0 	bl	800e742 <xQueueGenericCreate>
 800e1c2:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d022      	beq.n	800e210 <osSemaphoreNew+0x10c>
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d01f      	beq.n	800e210 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1d8:	f000 fc30 	bl	800ea3c <xQueueGenericSend>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d016      	beq.n	800e210 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800e1e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1e4:	f001 f8a3 	bl	800f32e <vQueueDelete>
            hSemaphore = NULL;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	627b      	str	r3, [r7, #36]	; 0x24
 800e1ec:	e010      	b.n	800e210 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800e1ee:	6a3b      	ldr	r3, [r7, #32]
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d108      	bne.n	800e206 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	689b      	ldr	r3, [r3, #8]
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	68b9      	ldr	r1, [r7, #8]
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f000 fbb7 	bl	800e970 <xQueueCreateCountingSemaphoreStatic>
 800e202:	6278      	str	r0, [r7, #36]	; 0x24
 800e204:	e004      	b.n	800e210 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e206:	68b9      	ldr	r1, [r7, #8]
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f000 fbe6 	bl	800e9da <xQueueCreateCountingSemaphore>
 800e20e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00c      	beq.n	800e230 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d003      	beq.n	800e224 <osSemaphoreNew+0x120>
          name = attr->name;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	61fb      	str	r3, [r7, #28]
 800e222:	e001      	b.n	800e228 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800e224:	2300      	movs	r3, #0
 800e226:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e228:	69f9      	ldr	r1, [r7, #28]
 800e22a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e22c:	f001 f9ca 	bl	800f5c4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e232:	4618      	mov	r0, r3
 800e234:	3728      	adds	r7, #40	; 0x28
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	20000394 	.word	0x20000394

0800e240 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e240:	b580      	push	{r7, lr}
 800e242:	b088      	sub	sp, #32
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e24e:	2300      	movs	r3, #0
 800e250:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d103      	bne.n	800e260 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e258:	f06f 0303 	mvn.w	r3, #3
 800e25c:	61fb      	str	r3, [r7, #28]
 800e25e:	e04b      	b.n	800e2f8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e260:	f3ef 8305 	mrs	r3, IPSR
 800e264:	617b      	str	r3, [r7, #20]
  return(result);
 800e266:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d10f      	bne.n	800e28c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e26c:	f3ef 8310 	mrs	r3, PRIMASK
 800e270:	613b      	str	r3, [r7, #16]
  return(result);
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d105      	bne.n	800e284 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e278:	f3ef 8311 	mrs	r3, BASEPRI
 800e27c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d026      	beq.n	800e2d2 <osSemaphoreAcquire+0x92>
 800e284:	4b1f      	ldr	r3, [pc, #124]	; (800e304 <osSemaphoreAcquire+0xc4>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d122      	bne.n	800e2d2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d003      	beq.n	800e29a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800e292:	f06f 0303 	mvn.w	r3, #3
 800e296:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e298:	e02d      	b.n	800e2f6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800e29a:	2300      	movs	r3, #0
 800e29c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e29e:	f107 0308 	add.w	r3, r7, #8
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	69b8      	ldr	r0, [r7, #24]
 800e2a8:	f000 ffc4 	bl	800f234 <xQueueReceiveFromISR>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d003      	beq.n	800e2ba <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800e2b2:	f06f 0302 	mvn.w	r3, #2
 800e2b6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e2b8:	e01d      	b.n	800e2f6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d01a      	beq.n	800e2f6 <osSemaphoreAcquire+0xb6>
 800e2c0:	4b11      	ldr	r3, [pc, #68]	; (800e308 <osSemaphoreAcquire+0xc8>)
 800e2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2c6:	601a      	str	r2, [r3, #0]
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800e2d0:	e011      	b.n	800e2f6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e2d2:	6839      	ldr	r1, [r7, #0]
 800e2d4:	69b8      	ldr	r0, [r7, #24]
 800e2d6:	f000 fea5 	bl	800f024 <xQueueSemaphoreTake>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d00b      	beq.n	800e2f8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d003      	beq.n	800e2ee <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800e2e6:	f06f 0301 	mvn.w	r3, #1
 800e2ea:	61fb      	str	r3, [r7, #28]
 800e2ec:	e004      	b.n	800e2f8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800e2ee:	f06f 0302 	mvn.w	r3, #2
 800e2f2:	61fb      	str	r3, [r7, #28]
 800e2f4:	e000      	b.n	800e2f8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800e2f6:	bf00      	nop
      }
    }
  }

  return (stat);
 800e2f8:	69fb      	ldr	r3, [r7, #28]
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3720      	adds	r7, #32
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	20000394 	.word	0x20000394
 800e308:	e000ed04 	.word	0xe000ed04

0800e30c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b088      	sub	sp, #32
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e318:	2300      	movs	r3, #0
 800e31a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d103      	bne.n	800e32a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e322:	f06f 0303 	mvn.w	r3, #3
 800e326:	61fb      	str	r3, [r7, #28]
 800e328:	e03e      	b.n	800e3a8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e32a:	f3ef 8305 	mrs	r3, IPSR
 800e32e:	617b      	str	r3, [r7, #20]
  return(result);
 800e330:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e332:	2b00      	cmp	r3, #0
 800e334:	d10f      	bne.n	800e356 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e336:	f3ef 8310 	mrs	r3, PRIMASK
 800e33a:	613b      	str	r3, [r7, #16]
  return(result);
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d105      	bne.n	800e34e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e342:	f3ef 8311 	mrs	r3, BASEPRI
 800e346:	60fb      	str	r3, [r7, #12]
  return(result);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d01e      	beq.n	800e38c <osSemaphoreRelease+0x80>
 800e34e:	4b19      	ldr	r3, [pc, #100]	; (800e3b4 <osSemaphoreRelease+0xa8>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b02      	cmp	r3, #2
 800e354:	d11a      	bne.n	800e38c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800e356:	2300      	movs	r3, #0
 800e358:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e35a:	f107 0308 	add.w	r3, r7, #8
 800e35e:	4619      	mov	r1, r3
 800e360:	69b8      	ldr	r0, [r7, #24]
 800e362:	f000 fcf9 	bl	800ed58 <xQueueGiveFromISR>
 800e366:	4603      	mov	r3, r0
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d003      	beq.n	800e374 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800e36c:	f06f 0302 	mvn.w	r3, #2
 800e370:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e372:	e018      	b.n	800e3a6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d015      	beq.n	800e3a6 <osSemaphoreRelease+0x9a>
 800e37a:	4b0f      	ldr	r3, [pc, #60]	; (800e3b8 <osSemaphoreRelease+0xac>)
 800e37c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e380:	601a      	str	r2, [r3, #0]
 800e382:	f3bf 8f4f 	dsb	sy
 800e386:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e38a:	e00c      	b.n	800e3a6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e38c:	2300      	movs	r3, #0
 800e38e:	2200      	movs	r2, #0
 800e390:	2100      	movs	r1, #0
 800e392:	69b8      	ldr	r0, [r7, #24]
 800e394:	f000 fb52 	bl	800ea3c <xQueueGenericSend>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d004      	beq.n	800e3a8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800e39e:	f06f 0302 	mvn.w	r3, #2
 800e3a2:	61fb      	str	r3, [r7, #28]
 800e3a4:	e000      	b.n	800e3a8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e3a6:	bf00      	nop
    }
  }

  return (stat);
 800e3a8:	69fb      	ldr	r3, [r7, #28]
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3720      	adds	r7, #32
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	20000394 	.word	0x20000394
 800e3b8:	e000ed04 	.word	0xe000ed04

0800e3bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e3bc:	b480      	push	{r7}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	60f8      	str	r0, [r7, #12]
 800e3c4:	60b9      	str	r1, [r7, #8]
 800e3c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	4a07      	ldr	r2, [pc, #28]	; (800e3e8 <vApplicationGetIdleTaskMemory+0x2c>)
 800e3cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	4a06      	ldr	r2, [pc, #24]	; (800e3ec <vApplicationGetIdleTaskMemory+0x30>)
 800e3d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3da:	601a      	str	r2, [r3, #0]
}
 800e3dc:	bf00      	nop
 800e3de:	3714      	adds	r7, #20
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr
 800e3e8:	20000398 	.word	0x20000398
 800e3ec:	200003f4 	.word	0x200003f4

0800e3f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e3f0:	b480      	push	{r7}
 800e3f2:	b085      	sub	sp, #20
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60f8      	str	r0, [r7, #12]
 800e3f8:	60b9      	str	r1, [r7, #8]
 800e3fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	4a07      	ldr	r2, [pc, #28]	; (800e41c <vApplicationGetTimerTaskMemory+0x2c>)
 800e400:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	4a06      	ldr	r2, [pc, #24]	; (800e420 <vApplicationGetTimerTaskMemory+0x30>)
 800e406:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e40e:	601a      	str	r2, [r3, #0]
}
 800e410:	bf00      	nop
 800e412:	3714      	adds	r7, #20
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr
 800e41c:	20000bf4 	.word	0x20000bf4
 800e420:	20000c50 	.word	0x20000c50

0800e424 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f103 0208 	add.w	r2, r3, #8
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f04f 32ff 	mov.w	r2, #4294967295
 800e43c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f103 0208 	add.w	r2, r3, #8
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f103 0208 	add.w	r2, r3, #8
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e458:	bf00      	nop
 800e45a:	370c      	adds	r7, #12
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e472:	bf00      	nop
 800e474:	370c      	adds	r7, #12
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr

0800e47e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e47e:	b480      	push	{r7}
 800e480:	b085      	sub	sp, #20
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
 800e486:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	68fa      	ldr	r2, [r7, #12]
 800e492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	689a      	ldr	r2, [r3, #8]
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	683a      	ldr	r2, [r7, #0]
 800e4a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	683a      	ldr	r2, [r7, #0]
 800e4a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	1c5a      	adds	r2, r3, #1
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	601a      	str	r2, [r3, #0]
}
 800e4ba:	bf00      	nop
 800e4bc:	3714      	adds	r7, #20
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr

0800e4c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e4c6:	b480      	push	{r7}
 800e4c8:	b085      	sub	sp, #20
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
 800e4ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4dc:	d103      	bne.n	800e4e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	691b      	ldr	r3, [r3, #16]
 800e4e2:	60fb      	str	r3, [r7, #12]
 800e4e4:	e00c      	b.n	800e500 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	3308      	adds	r3, #8
 800e4ea:	60fb      	str	r3, [r7, #12]
 800e4ec:	e002      	b.n	800e4f4 <vListInsert+0x2e>
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	60fb      	str	r3, [r7, #12]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d2f6      	bcs.n	800e4ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	685a      	ldr	r2, [r3, #4]
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	683a      	ldr	r2, [r7, #0]
 800e50e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	68fa      	ldr	r2, [r7, #12]
 800e514:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	683a      	ldr	r2, [r7, #0]
 800e51a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	1c5a      	adds	r2, r3, #1
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	601a      	str	r2, [r3, #0]
}
 800e52c:	bf00      	nop
 800e52e:	3714      	adds	r7, #20
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr

0800e538 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e538:	b480      	push	{r7}
 800e53a:	b085      	sub	sp, #20
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	6892      	ldr	r2, [r2, #8]
 800e54e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	6852      	ldr	r2, [r2, #4]
 800e558:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	429a      	cmp	r2, r3
 800e562:	d103      	bne.n	800e56c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	689a      	ldr	r2, [r3, #8]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2200      	movs	r2, #0
 800e570:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	1e5a      	subs	r2, r3, #1
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3714      	adds	r7, #20
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr

0800e58c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d109      	bne.n	800e5b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a4:	f383 8811 	msr	BASEPRI, r3
 800e5a8:	f3bf 8f6f 	isb	sy
 800e5ac:	f3bf 8f4f 	dsb	sy
 800e5b0:	60bb      	str	r3, [r7, #8]
 800e5b2:	e7fe      	b.n	800e5b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800e5b4:	f002 ff32 	bl	801141c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5c0:	68f9      	ldr	r1, [r7, #12]
 800e5c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e5c4:	fb01 f303 	mul.w	r3, r1, r3
 800e5c8:	441a      	add	r2, r3
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5e4:	3b01      	subs	r3, #1
 800e5e6:	68f9      	ldr	r1, [r7, #12]
 800e5e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e5ea:	fb01 f303 	mul.w	r3, r1, r3
 800e5ee:	441a      	add	r2, r3
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	22ff      	movs	r2, #255	; 0xff
 800e5f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	22ff      	movs	r2, #255	; 0xff
 800e600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d114      	bne.n	800e634 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	691b      	ldr	r3, [r3, #16]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d01a      	beq.n	800e648 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	3310      	adds	r3, #16
 800e616:	4618      	mov	r0, r3
 800e618:	f001 fce4 	bl	800ffe4 <xTaskRemoveFromEventList>
 800e61c:	4603      	mov	r3, r0
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d012      	beq.n	800e648 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e622:	4b0d      	ldr	r3, [pc, #52]	; (800e658 <xQueueGenericReset+0xcc>)
 800e624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	f3bf 8f4f 	dsb	sy
 800e62e:	f3bf 8f6f 	isb	sy
 800e632:	e009      	b.n	800e648 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	3310      	adds	r3, #16
 800e638:	4618      	mov	r0, r3
 800e63a:	f7ff fef3 	bl	800e424 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	3324      	adds	r3, #36	; 0x24
 800e642:	4618      	mov	r0, r3
 800e644:	f7ff feee 	bl	800e424 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e648:	f002 ff16 	bl	8011478 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e64c:	2301      	movs	r3, #1
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3710      	adds	r7, #16
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	e000ed04 	.word	0xe000ed04

0800e65c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b08e      	sub	sp, #56	; 0x38
 800e660:	af02      	add	r7, sp, #8
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	607a      	str	r2, [r7, #4]
 800e668:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d109      	bne.n	800e684 <xQueueGenericCreateStatic+0x28>
 800e670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e674:	f383 8811 	msr	BASEPRI, r3
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	f3bf 8f4f 	dsb	sy
 800e680:	62bb      	str	r3, [r7, #40]	; 0x28
 800e682:	e7fe      	b.n	800e682 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d109      	bne.n	800e69e <xQueueGenericCreateStatic+0x42>
 800e68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68e:	f383 8811 	msr	BASEPRI, r3
 800e692:	f3bf 8f6f 	isb	sy
 800e696:	f3bf 8f4f 	dsb	sy
 800e69a:	627b      	str	r3, [r7, #36]	; 0x24
 800e69c:	e7fe      	b.n	800e69c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d002      	beq.n	800e6aa <xQueueGenericCreateStatic+0x4e>
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d001      	beq.n	800e6ae <xQueueGenericCreateStatic+0x52>
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e000      	b.n	800e6b0 <xQueueGenericCreateStatic+0x54>
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d109      	bne.n	800e6c8 <xQueueGenericCreateStatic+0x6c>
 800e6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b8:	f383 8811 	msr	BASEPRI, r3
 800e6bc:	f3bf 8f6f 	isb	sy
 800e6c0:	f3bf 8f4f 	dsb	sy
 800e6c4:	623b      	str	r3, [r7, #32]
 800e6c6:	e7fe      	b.n	800e6c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d102      	bne.n	800e6d4 <xQueueGenericCreateStatic+0x78>
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d101      	bne.n	800e6d8 <xQueueGenericCreateStatic+0x7c>
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e000      	b.n	800e6da <xQueueGenericCreateStatic+0x7e>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d109      	bne.n	800e6f2 <xQueueGenericCreateStatic+0x96>
 800e6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e2:	f383 8811 	msr	BASEPRI, r3
 800e6e6:	f3bf 8f6f 	isb	sy
 800e6ea:	f3bf 8f4f 	dsb	sy
 800e6ee:	61fb      	str	r3, [r7, #28]
 800e6f0:	e7fe      	b.n	800e6f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e6f2:	2350      	movs	r3, #80	; 0x50
 800e6f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	2b50      	cmp	r3, #80	; 0x50
 800e6fa:	d009      	beq.n	800e710 <xQueueGenericCreateStatic+0xb4>
 800e6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e700:	f383 8811 	msr	BASEPRI, r3
 800e704:	f3bf 8f6f 	isb	sy
 800e708:	f3bf 8f4f 	dsb	sy
 800e70c:	61bb      	str	r3, [r7, #24]
 800e70e:	e7fe      	b.n	800e70e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e710:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d00d      	beq.n	800e738 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71e:	2201      	movs	r2, #1
 800e720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e724:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72a:	9300      	str	r3, [sp, #0]
 800e72c:	4613      	mov	r3, r2
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	68b9      	ldr	r1, [r7, #8]
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f000 f844 	bl	800e7c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3730      	adds	r7, #48	; 0x30
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e742:	b580      	push	{r7, lr}
 800e744:	b08a      	sub	sp, #40	; 0x28
 800e746:	af02      	add	r7, sp, #8
 800e748:	60f8      	str	r0, [r7, #12]
 800e74a:	60b9      	str	r1, [r7, #8]
 800e74c:	4613      	mov	r3, r2
 800e74e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d109      	bne.n	800e76a <xQueueGenericCreate+0x28>
 800e756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75a:	f383 8811 	msr	BASEPRI, r3
 800e75e:	f3bf 8f6f 	isb	sy
 800e762:	f3bf 8f4f 	dsb	sy
 800e766:	613b      	str	r3, [r7, #16]
 800e768:	e7fe      	b.n	800e768 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d102      	bne.n	800e776 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e770:	2300      	movs	r3, #0
 800e772:	61fb      	str	r3, [r7, #28]
 800e774:	e004      	b.n	800e780 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	68ba      	ldr	r2, [r7, #8]
 800e77a:	fb02 f303 	mul.w	r3, r2, r3
 800e77e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	3350      	adds	r3, #80	; 0x50
 800e784:	4618      	mov	r0, r3
 800e786:	f002 ff63 	bl	8011650 <pvPortMalloc>
 800e78a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d011      	beq.n	800e7b6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	3350      	adds	r3, #80	; 0x50
 800e79a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e7a4:	79fa      	ldrb	r2, [r7, #7]
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	9300      	str	r3, [sp, #0]
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	697a      	ldr	r2, [r7, #20]
 800e7ae:	68b9      	ldr	r1, [r7, #8]
 800e7b0:	68f8      	ldr	r0, [r7, #12]
 800e7b2:	f000 f805 	bl	800e7c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e7b6:	69bb      	ldr	r3, [r7, #24]
	}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3720      	adds	r7, #32
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}

0800e7c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	60f8      	str	r0, [r7, #12]
 800e7c8:	60b9      	str	r1, [r7, #8]
 800e7ca:	607a      	str	r2, [r7, #4]
 800e7cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d103      	bne.n	800e7dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	69ba      	ldr	r2, [r7, #24]
 800e7d8:	601a      	str	r2, [r3, #0]
 800e7da:	e002      	b.n	800e7e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e7dc:	69bb      	ldr	r3, [r7, #24]
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	68fa      	ldr	r2, [r7, #12]
 800e7e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e7ee:	2101      	movs	r1, #1
 800e7f0:	69b8      	ldr	r0, [r7, #24]
 800e7f2:	f7ff fecb 	bl	800e58c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	78fa      	ldrb	r2, [r7, #3]
 800e7fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e7fe:	bf00      	nop
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e806:	b580      	push	{r7, lr}
 800e808:	b082      	sub	sp, #8
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d00e      	beq.n	800e832 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2200      	movs	r2, #0
 800e818:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2200      	movs	r2, #0
 800e81e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2200      	movs	r2, #0
 800e824:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e826:	2300      	movs	r3, #0
 800e828:	2200      	movs	r2, #0
 800e82a:	2100      	movs	r1, #0
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 f905 	bl	800ea3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e832:	bf00      	nop
 800e834:	3708      	adds	r7, #8
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}

0800e83a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b086      	sub	sp, #24
 800e83e:	af00      	add	r7, sp, #0
 800e840:	4603      	mov	r3, r0
 800e842:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e844:	2301      	movs	r3, #1
 800e846:	617b      	str	r3, [r7, #20]
 800e848:	2300      	movs	r3, #0
 800e84a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e84c:	79fb      	ldrb	r3, [r7, #7]
 800e84e:	461a      	mov	r2, r3
 800e850:	6939      	ldr	r1, [r7, #16]
 800e852:	6978      	ldr	r0, [r7, #20]
 800e854:	f7ff ff75 	bl	800e742 <xQueueGenericCreate>
 800e858:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	f7ff ffd3 	bl	800e806 <prvInitialiseMutex>

		return xNewQueue;
 800e860:	68fb      	ldr	r3, [r7, #12]
	}
 800e862:	4618      	mov	r0, r3
 800e864:	3718      	adds	r7, #24
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}

0800e86a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b088      	sub	sp, #32
 800e86e:	af02      	add	r7, sp, #8
 800e870:	4603      	mov	r3, r0
 800e872:	6039      	str	r1, [r7, #0]
 800e874:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e876:	2301      	movs	r3, #1
 800e878:	617b      	str	r3, [r7, #20]
 800e87a:	2300      	movs	r3, #0
 800e87c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e87e:	79fb      	ldrb	r3, [r7, #7]
 800e880:	9300      	str	r3, [sp, #0]
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2200      	movs	r2, #0
 800e886:	6939      	ldr	r1, [r7, #16]
 800e888:	6978      	ldr	r0, [r7, #20]
 800e88a:	f7ff fee7 	bl	800e65c <xQueueGenericCreateStatic>
 800e88e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f7ff ffb8 	bl	800e806 <prvInitialiseMutex>

		return xNewQueue;
 800e896:	68fb      	ldr	r3, [r7, #12]
	}
 800e898:	4618      	mov	r0, r3
 800e89a:	3718      	adds	r7, #24
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e8a0:	b590      	push	{r4, r7, lr}
 800e8a2:	b087      	sub	sp, #28
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d109      	bne.n	800e8c6 <xQueueGiveMutexRecursive+0x26>
 800e8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b6:	f383 8811 	msr	BASEPRI, r3
 800e8ba:	f3bf 8f6f 	isb	sy
 800e8be:	f3bf 8f4f 	dsb	sy
 800e8c2:	60fb      	str	r3, [r7, #12]
 800e8c4:	e7fe      	b.n	800e8c4 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	689c      	ldr	r4, [r3, #8]
 800e8ca:	f001 fd69 	bl	80103a0 <xTaskGetCurrentTaskHandle>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	429c      	cmp	r4, r3
 800e8d2:	d111      	bne.n	800e8f8 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	1e5a      	subs	r2, r3, #1
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d105      	bne.n	800e8f2 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	6938      	ldr	r0, [r7, #16]
 800e8ee:	f000 f8a5 	bl	800ea3c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	617b      	str	r3, [r7, #20]
 800e8f6:	e001      	b.n	800e8fc <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e8fc:	697b      	ldr	r3, [r7, #20]
	}
 800e8fe:	4618      	mov	r0, r3
 800e900:	371c      	adds	r7, #28
 800e902:	46bd      	mov	sp, r7
 800e904:	bd90      	pop	{r4, r7, pc}

0800e906 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e906:	b590      	push	{r4, r7, lr}
 800e908:	b087      	sub	sp, #28
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
 800e90e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d109      	bne.n	800e92e <xQueueTakeMutexRecursive+0x28>
 800e91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91e:	f383 8811 	msr	BASEPRI, r3
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	f3bf 8f4f 	dsb	sy
 800e92a:	60fb      	str	r3, [r7, #12]
 800e92c:	e7fe      	b.n	800e92c <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	689c      	ldr	r4, [r3, #8]
 800e932:	f001 fd35 	bl	80103a0 <xTaskGetCurrentTaskHandle>
 800e936:	4603      	mov	r3, r0
 800e938:	429c      	cmp	r4, r3
 800e93a:	d107      	bne.n	800e94c <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	1c5a      	adds	r2, r3, #1
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e946:	2301      	movs	r3, #1
 800e948:	617b      	str	r3, [r7, #20]
 800e94a:	e00c      	b.n	800e966 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e94c:	6839      	ldr	r1, [r7, #0]
 800e94e:	6938      	ldr	r0, [r7, #16]
 800e950:	f000 fb68 	bl	800f024 <xQueueSemaphoreTake>
 800e954:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d004      	beq.n	800e966 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	1c5a      	adds	r2, r3, #1
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e966:	697b      	ldr	r3, [r7, #20]
	}
 800e968:	4618      	mov	r0, r3
 800e96a:	371c      	adds	r7, #28
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd90      	pop	{r4, r7, pc}

0800e970 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e970:	b580      	push	{r7, lr}
 800e972:	b08a      	sub	sp, #40	; 0x28
 800e974:	af02      	add	r7, sp, #8
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d109      	bne.n	800e996 <xQueueCreateCountingSemaphoreStatic+0x26>
 800e982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e986:	f383 8811 	msr	BASEPRI, r3
 800e98a:	f3bf 8f6f 	isb	sy
 800e98e:	f3bf 8f4f 	dsb	sy
 800e992:	61bb      	str	r3, [r7, #24]
 800e994:	e7fe      	b.n	800e994 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d909      	bls.n	800e9b2 <xQueueCreateCountingSemaphoreStatic+0x42>
 800e99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	617b      	str	r3, [r7, #20]
 800e9b0:	e7fe      	b.n	800e9b0 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e9b2:	2302      	movs	r3, #2
 800e9b4:	9300      	str	r3, [sp, #0]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f7ff fe4d 	bl	800e65c <xQueueGenericCreateStatic>
 800e9c2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d002      	beq.n	800e9d0 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	68ba      	ldr	r2, [r7, #8]
 800e9ce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e9d0:	69fb      	ldr	r3, [r7, #28]
	}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3720      	adds	r7, #32
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b086      	sub	sp, #24
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
 800e9e2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d109      	bne.n	800e9fe <xQueueCreateCountingSemaphore+0x24>
 800e9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	613b      	str	r3, [r7, #16]
 800e9fc:	e7fe      	b.n	800e9fc <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e9fe:	683a      	ldr	r2, [r7, #0]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d909      	bls.n	800ea1a <xQueueCreateCountingSemaphore+0x40>
 800ea06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0a:	f383 8811 	msr	BASEPRI, r3
 800ea0e:	f3bf 8f6f 	isb	sy
 800ea12:	f3bf 8f4f 	dsb	sy
 800ea16:	60fb      	str	r3, [r7, #12]
 800ea18:	e7fe      	b.n	800ea18 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ea1a:	2202      	movs	r2, #2
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7ff fe8f 	bl	800e742 <xQueueGenericCreate>
 800ea24:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d002      	beq.n	800ea32 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	683a      	ldr	r2, [r7, #0]
 800ea30:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ea32:	697b      	ldr	r3, [r7, #20]
	}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3718      	adds	r7, #24
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b08e      	sub	sp, #56	; 0x38
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
 800ea48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ea52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d109      	bne.n	800ea6c <xQueueGenericSend+0x30>
 800ea58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5c:	f383 8811 	msr	BASEPRI, r3
 800ea60:	f3bf 8f6f 	isb	sy
 800ea64:	f3bf 8f4f 	dsb	sy
 800ea68:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea6a:	e7fe      	b.n	800ea6a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d103      	bne.n	800ea7a <xQueueGenericSend+0x3e>
 800ea72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d101      	bne.n	800ea7e <xQueueGenericSend+0x42>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e000      	b.n	800ea80 <xQueueGenericSend+0x44>
 800ea7e:	2300      	movs	r3, #0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d109      	bne.n	800ea98 <xQueueGenericSend+0x5c>
 800ea84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea88:	f383 8811 	msr	BASEPRI, r3
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f3bf 8f4f 	dsb	sy
 800ea94:	627b      	str	r3, [r7, #36]	; 0x24
 800ea96:	e7fe      	b.n	800ea96 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	2b02      	cmp	r3, #2
 800ea9c:	d103      	bne.n	800eaa6 <xQueueGenericSend+0x6a>
 800ea9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d101      	bne.n	800eaaa <xQueueGenericSend+0x6e>
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e000      	b.n	800eaac <xQueueGenericSend+0x70>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d109      	bne.n	800eac4 <xQueueGenericSend+0x88>
 800eab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab4:	f383 8811 	msr	BASEPRI, r3
 800eab8:	f3bf 8f6f 	isb	sy
 800eabc:	f3bf 8f4f 	dsb	sy
 800eac0:	623b      	str	r3, [r7, #32]
 800eac2:	e7fe      	b.n	800eac2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eac4:	f001 fc7c 	bl	80103c0 <xTaskGetSchedulerState>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d102      	bne.n	800ead4 <xQueueGenericSend+0x98>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d101      	bne.n	800ead8 <xQueueGenericSend+0x9c>
 800ead4:	2301      	movs	r3, #1
 800ead6:	e000      	b.n	800eada <xQueueGenericSend+0x9e>
 800ead8:	2300      	movs	r3, #0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d109      	bne.n	800eaf2 <xQueueGenericSend+0xb6>
 800eade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae2:	f383 8811 	msr	BASEPRI, r3
 800eae6:	f3bf 8f6f 	isb	sy
 800eaea:	f3bf 8f4f 	dsb	sy
 800eaee:	61fb      	str	r3, [r7, #28]
 800eaf0:	e7fe      	b.n	800eaf0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eaf2:	f002 fc93 	bl	801141c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d302      	bcc.n	800eb08 <xQueueGenericSend+0xcc>
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	2b02      	cmp	r3, #2
 800eb06:	d129      	bne.n	800eb5c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb08:	683a      	ldr	r2, [r7, #0]
 800eb0a:	68b9      	ldr	r1, [r7, #8]
 800eb0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb0e:	f000 fc48 	bl	800f3a2 <prvCopyDataToQueue>
 800eb12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d010      	beq.n	800eb3e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1e:	3324      	adds	r3, #36	; 0x24
 800eb20:	4618      	mov	r0, r3
 800eb22:	f001 fa5f 	bl	800ffe4 <xTaskRemoveFromEventList>
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d013      	beq.n	800eb54 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eb2c:	4b3f      	ldr	r3, [pc, #252]	; (800ec2c <xQueueGenericSend+0x1f0>)
 800eb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb32:	601a      	str	r2, [r3, #0]
 800eb34:	f3bf 8f4f 	dsb	sy
 800eb38:	f3bf 8f6f 	isb	sy
 800eb3c:	e00a      	b.n	800eb54 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d007      	beq.n	800eb54 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eb44:	4b39      	ldr	r3, [pc, #228]	; (800ec2c <xQueueGenericSend+0x1f0>)
 800eb46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb4a:	601a      	str	r2, [r3, #0]
 800eb4c:	f3bf 8f4f 	dsb	sy
 800eb50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eb54:	f002 fc90 	bl	8011478 <vPortExitCritical>
				return pdPASS;
 800eb58:	2301      	movs	r3, #1
 800eb5a:	e063      	b.n	800ec24 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d103      	bne.n	800eb6a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb62:	f002 fc89 	bl	8011478 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eb66:	2300      	movs	r3, #0
 800eb68:	e05c      	b.n	800ec24 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d106      	bne.n	800eb7e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb70:	f107 0314 	add.w	r3, r7, #20
 800eb74:	4618      	mov	r0, r3
 800eb76:	f001 fa99 	bl	80100ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb7e:	f002 fc7b 	bl	8011478 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb82:	f000 ffdb 	bl	800fb3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb86:	f002 fc49 	bl	801141c <vPortEnterCritical>
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb90:	b25b      	sxtb	r3, r3
 800eb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb96:	d103      	bne.n	800eba0 <xQueueGenericSend+0x164>
 800eb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eba6:	b25b      	sxtb	r3, r3
 800eba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebac:	d103      	bne.n	800ebb6 <xQueueGenericSend+0x17a>
 800ebae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebb6:	f002 fc5f 	bl	8011478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebba:	1d3a      	adds	r2, r7, #4
 800ebbc:	f107 0314 	add.w	r3, r7, #20
 800ebc0:	4611      	mov	r1, r2
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f001 fa88 	bl	80100d8 <xTaskCheckForTimeOut>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d124      	bne.n	800ec18 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ebce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebd0:	f000 fcdf 	bl	800f592 <prvIsQueueFull>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d018      	beq.n	800ec0c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ebda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebdc:	3310      	adds	r3, #16
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f001 f9b0 	bl	800ff48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ebe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebea:	f000 fc6a 	bl	800f4c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ebee:	f000 ffeb 	bl	800fbc8 <xTaskResumeAll>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	f47f af7c 	bne.w	800eaf2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ebfa:	4b0c      	ldr	r3, [pc, #48]	; (800ec2c <xQueueGenericSend+0x1f0>)
 800ebfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec00:	601a      	str	r2, [r3, #0]
 800ec02:	f3bf 8f4f 	dsb	sy
 800ec06:	f3bf 8f6f 	isb	sy
 800ec0a:	e772      	b.n	800eaf2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ec0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec0e:	f000 fc58 	bl	800f4c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec12:	f000 ffd9 	bl	800fbc8 <xTaskResumeAll>
 800ec16:	e76c      	b.n	800eaf2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ec18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec1a:	f000 fc52 	bl	800f4c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec1e:	f000 ffd3 	bl	800fbc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ec22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3738      	adds	r7, #56	; 0x38
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}
 800ec2c:	e000ed04 	.word	0xe000ed04

0800ec30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08e      	sub	sp, #56	; 0x38
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	607a      	str	r2, [r7, #4]
 800ec3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ec42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d109      	bne.n	800ec5c <xQueueGenericSendFromISR+0x2c>
 800ec48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4c:	f383 8811 	msr	BASEPRI, r3
 800ec50:	f3bf 8f6f 	isb	sy
 800ec54:	f3bf 8f4f 	dsb	sy
 800ec58:	627b      	str	r3, [r7, #36]	; 0x24
 800ec5a:	e7fe      	b.n	800ec5a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d103      	bne.n	800ec6a <xQueueGenericSendFromISR+0x3a>
 800ec62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d101      	bne.n	800ec6e <xQueueGenericSendFromISR+0x3e>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	e000      	b.n	800ec70 <xQueueGenericSendFromISR+0x40>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d109      	bne.n	800ec88 <xQueueGenericSendFromISR+0x58>
 800ec74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	623b      	str	r3, [r7, #32]
 800ec86:	e7fe      	b.n	800ec86 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	2b02      	cmp	r3, #2
 800ec8c:	d103      	bne.n	800ec96 <xQueueGenericSendFromISR+0x66>
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec92:	2b01      	cmp	r3, #1
 800ec94:	d101      	bne.n	800ec9a <xQueueGenericSendFromISR+0x6a>
 800ec96:	2301      	movs	r3, #1
 800ec98:	e000      	b.n	800ec9c <xQueueGenericSendFromISR+0x6c>
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d109      	bne.n	800ecb4 <xQueueGenericSendFromISR+0x84>
 800eca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca4:	f383 8811 	msr	BASEPRI, r3
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	61fb      	str	r3, [r7, #28]
 800ecb2:	e7fe      	b.n	800ecb2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ecb4:	f002 fc8e 	bl	80115d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ecb8:	f3ef 8211 	mrs	r2, BASEPRI
 800ecbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc0:	f383 8811 	msr	BASEPRI, r3
 800ecc4:	f3bf 8f6f 	isb	sy
 800ecc8:	f3bf 8f4f 	dsb	sy
 800eccc:	61ba      	str	r2, [r7, #24]
 800ecce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ecd0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ecd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ecd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d302      	bcc.n	800ece6 <xQueueGenericSendFromISR+0xb6>
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	2b02      	cmp	r3, #2
 800ece4:	d12c      	bne.n	800ed40 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ece6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ecf0:	683a      	ldr	r2, [r7, #0]
 800ecf2:	68b9      	ldr	r1, [r7, #8]
 800ecf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecf6:	f000 fb54 	bl	800f3a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ecfa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ecfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed02:	d112      	bne.n	800ed2a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d016      	beq.n	800ed3a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0e:	3324      	adds	r3, #36	; 0x24
 800ed10:	4618      	mov	r0, r3
 800ed12:	f001 f967 	bl	800ffe4 <xTaskRemoveFromEventList>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00e      	beq.n	800ed3a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00b      	beq.n	800ed3a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2201      	movs	r2, #1
 800ed26:	601a      	str	r2, [r3, #0]
 800ed28:	e007      	b.n	800ed3a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ed2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ed2e:	3301      	adds	r3, #1
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	b25a      	sxtb	r2, r3
 800ed34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ed3e:	e001      	b.n	800ed44 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ed40:	2300      	movs	r3, #0
 800ed42:	637b      	str	r3, [r7, #52]	; 0x34
 800ed44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed46:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3738      	adds	r7, #56	; 0x38
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b08e      	sub	sp, #56	; 0x38
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ed66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d109      	bne.n	800ed80 <xQueueGiveFromISR+0x28>
	__asm volatile
 800ed6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed70:	f383 8811 	msr	BASEPRI, r3
 800ed74:	f3bf 8f6f 	isb	sy
 800ed78:	f3bf 8f4f 	dsb	sy
 800ed7c:	623b      	str	r3, [r7, #32]
 800ed7e:	e7fe      	b.n	800ed7e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ed80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d009      	beq.n	800ed9c <xQueueGiveFromISR+0x44>
 800ed88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed8c:	f383 8811 	msr	BASEPRI, r3
 800ed90:	f3bf 8f6f 	isb	sy
 800ed94:	f3bf 8f4f 	dsb	sy
 800ed98:	61fb      	str	r3, [r7, #28]
 800ed9a:	e7fe      	b.n	800ed9a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ed9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d103      	bne.n	800edac <xQueueGiveFromISR+0x54>
 800eda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda6:	689b      	ldr	r3, [r3, #8]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d101      	bne.n	800edb0 <xQueueGiveFromISR+0x58>
 800edac:	2301      	movs	r3, #1
 800edae:	e000      	b.n	800edb2 <xQueueGiveFromISR+0x5a>
 800edb0:	2300      	movs	r3, #0
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d109      	bne.n	800edca <xQueueGiveFromISR+0x72>
 800edb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edba:	f383 8811 	msr	BASEPRI, r3
 800edbe:	f3bf 8f6f 	isb	sy
 800edc2:	f3bf 8f4f 	dsb	sy
 800edc6:	61bb      	str	r3, [r7, #24]
 800edc8:	e7fe      	b.n	800edc8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edca:	f002 fc03 	bl	80115d4 <vPortValidateInterruptPriority>
	__asm volatile
 800edce:	f3ef 8211 	mrs	r2, BASEPRI
 800edd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd6:	f383 8811 	msr	BASEPRI, r3
 800edda:	f3bf 8f6f 	isb	sy
 800edde:	f3bf 8f4f 	dsb	sy
 800ede2:	617a      	str	r2, [r7, #20]
 800ede4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ede6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ede8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800edea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800edf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d22b      	bcs.n	800ee52 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800edfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ee04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee06:	1c5a      	adds	r2, r3, #1
 800ee08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee14:	d112      	bne.n	800ee3c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d016      	beq.n	800ee4c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee20:	3324      	adds	r3, #36	; 0x24
 800ee22:	4618      	mov	r0, r3
 800ee24:	f001 f8de 	bl	800ffe4 <xTaskRemoveFromEventList>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d00e      	beq.n	800ee4c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d00b      	beq.n	800ee4c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	2201      	movs	r2, #1
 800ee38:	601a      	str	r2, [r3, #0]
 800ee3a:	e007      	b.n	800ee4c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee40:	3301      	adds	r3, #1
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	b25a      	sxtb	r2, r3
 800ee46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	637b      	str	r3, [r7, #52]	; 0x34
 800ee50:	e001      	b.n	800ee56 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee52:	2300      	movs	r3, #0
 800ee54:	637b      	str	r3, [r7, #52]	; 0x34
 800ee56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee58:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3738      	adds	r7, #56	; 0x38
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
	...

0800ee6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b08c      	sub	sp, #48	; 0x30
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	60b9      	str	r1, [r7, #8]
 800ee76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ee80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d109      	bne.n	800ee9a <xQueueReceive+0x2e>
	__asm volatile
 800ee86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8a:	f383 8811 	msr	BASEPRI, r3
 800ee8e:	f3bf 8f6f 	isb	sy
 800ee92:	f3bf 8f4f 	dsb	sy
 800ee96:	623b      	str	r3, [r7, #32]
 800ee98:	e7fe      	b.n	800ee98 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d103      	bne.n	800eea8 <xQueueReceive+0x3c>
 800eea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d101      	bne.n	800eeac <xQueueReceive+0x40>
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e000      	b.n	800eeae <xQueueReceive+0x42>
 800eeac:	2300      	movs	r3, #0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d109      	bne.n	800eec6 <xQueueReceive+0x5a>
 800eeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	61fb      	str	r3, [r7, #28]
 800eec4:	e7fe      	b.n	800eec4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eec6:	f001 fa7b 	bl	80103c0 <xTaskGetSchedulerState>
 800eeca:	4603      	mov	r3, r0
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d102      	bne.n	800eed6 <xQueueReceive+0x6a>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d101      	bne.n	800eeda <xQueueReceive+0x6e>
 800eed6:	2301      	movs	r3, #1
 800eed8:	e000      	b.n	800eedc <xQueueReceive+0x70>
 800eeda:	2300      	movs	r3, #0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d109      	bne.n	800eef4 <xQueueReceive+0x88>
 800eee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee4:	f383 8811 	msr	BASEPRI, r3
 800eee8:	f3bf 8f6f 	isb	sy
 800eeec:	f3bf 8f4f 	dsb	sy
 800eef0:	61bb      	str	r3, [r7, #24]
 800eef2:	e7fe      	b.n	800eef2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eef4:	f002 fa92 	bl	801141c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eefc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d01f      	beq.n	800ef44 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef04:	68b9      	ldr	r1, [r7, #8]
 800ef06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef08:	f000 fab5 	bl	800f476 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0e:	1e5a      	subs	r2, r3, #1
 800ef10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef12:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef16:	691b      	ldr	r3, [r3, #16]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d00f      	beq.n	800ef3c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1e:	3310      	adds	r3, #16
 800ef20:	4618      	mov	r0, r3
 800ef22:	f001 f85f 	bl	800ffe4 <xTaskRemoveFromEventList>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d007      	beq.n	800ef3c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ef2c:	4b3c      	ldr	r3, [pc, #240]	; (800f020 <xQueueReceive+0x1b4>)
 800ef2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef32:	601a      	str	r2, [r3, #0]
 800ef34:	f3bf 8f4f 	dsb	sy
 800ef38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ef3c:	f002 fa9c 	bl	8011478 <vPortExitCritical>
				return pdPASS;
 800ef40:	2301      	movs	r3, #1
 800ef42:	e069      	b.n	800f018 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d103      	bne.n	800ef52 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef4a:	f002 fa95 	bl	8011478 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	e062      	b.n	800f018 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d106      	bne.n	800ef66 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef58:	f107 0310 	add.w	r3, r7, #16
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f001 f8a5 	bl	80100ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef62:	2301      	movs	r3, #1
 800ef64:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef66:	f002 fa87 	bl	8011478 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef6a:	f000 fde7 	bl	800fb3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef6e:	f002 fa55 	bl	801141c <vPortEnterCritical>
 800ef72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef78:	b25b      	sxtb	r3, r3
 800ef7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef7e:	d103      	bne.n	800ef88 <xQueueReceive+0x11c>
 800ef80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef8e:	b25b      	sxtb	r3, r3
 800ef90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef94:	d103      	bne.n	800ef9e <xQueueReceive+0x132>
 800ef96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef98:	2200      	movs	r2, #0
 800ef9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef9e:	f002 fa6b 	bl	8011478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efa2:	1d3a      	adds	r2, r7, #4
 800efa4:	f107 0310 	add.w	r3, r7, #16
 800efa8:	4611      	mov	r1, r2
 800efaa:	4618      	mov	r0, r3
 800efac:	f001 f894 	bl	80100d8 <xTaskCheckForTimeOut>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d123      	bne.n	800effe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800efb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efb8:	f000 fad5 	bl	800f566 <prvIsQueueEmpty>
 800efbc:	4603      	mov	r3, r0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d017      	beq.n	800eff2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800efc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc4:	3324      	adds	r3, #36	; 0x24
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	4611      	mov	r1, r2
 800efca:	4618      	mov	r0, r3
 800efcc:	f000 ffbc 	bl	800ff48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800efd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efd2:	f000 fa76 	bl	800f4c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800efd6:	f000 fdf7 	bl	800fbc8 <xTaskResumeAll>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d189      	bne.n	800eef4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800efe0:	4b0f      	ldr	r3, [pc, #60]	; (800f020 <xQueueReceive+0x1b4>)
 800efe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efe6:	601a      	str	r2, [r3, #0]
 800efe8:	f3bf 8f4f 	dsb	sy
 800efec:	f3bf 8f6f 	isb	sy
 800eff0:	e780      	b.n	800eef4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eff4:	f000 fa65 	bl	800f4c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eff8:	f000 fde6 	bl	800fbc8 <xTaskResumeAll>
 800effc:	e77a      	b.n	800eef4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800effe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f000:	f000 fa5f 	bl	800f4c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f004:	f000 fde0 	bl	800fbc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f00a:	f000 faac 	bl	800f566 <prvIsQueueEmpty>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b00      	cmp	r3, #0
 800f012:	f43f af6f 	beq.w	800eef4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f016:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3730      	adds	r7, #48	; 0x30
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	e000ed04 	.word	0xe000ed04

0800f024 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08e      	sub	sp, #56	; 0x38
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f02e:	2300      	movs	r3, #0
 800f030:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f036:	2300      	movs	r3, #0
 800f038:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d109      	bne.n	800f054 <xQueueSemaphoreTake+0x30>
 800f040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f044:	f383 8811 	msr	BASEPRI, r3
 800f048:	f3bf 8f6f 	isb	sy
 800f04c:	f3bf 8f4f 	dsb	sy
 800f050:	623b      	str	r3, [r7, #32]
 800f052:	e7fe      	b.n	800f052 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d009      	beq.n	800f070 <xQueueSemaphoreTake+0x4c>
 800f05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f060:	f383 8811 	msr	BASEPRI, r3
 800f064:	f3bf 8f6f 	isb	sy
 800f068:	f3bf 8f4f 	dsb	sy
 800f06c:	61fb      	str	r3, [r7, #28]
 800f06e:	e7fe      	b.n	800f06e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f070:	f001 f9a6 	bl	80103c0 <xTaskGetSchedulerState>
 800f074:	4603      	mov	r3, r0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d102      	bne.n	800f080 <xQueueSemaphoreTake+0x5c>
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d101      	bne.n	800f084 <xQueueSemaphoreTake+0x60>
 800f080:	2301      	movs	r3, #1
 800f082:	e000      	b.n	800f086 <xQueueSemaphoreTake+0x62>
 800f084:	2300      	movs	r3, #0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d109      	bne.n	800f09e <xQueueSemaphoreTake+0x7a>
 800f08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08e:	f383 8811 	msr	BASEPRI, r3
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	f3bf 8f4f 	dsb	sy
 800f09a:	61bb      	str	r3, [r7, #24]
 800f09c:	e7fe      	b.n	800f09c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f09e:	f002 f9bd 	bl	801141c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0a6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d024      	beq.n	800f0f8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b0:	1e5a      	subs	r2, r3, #1
 800f0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d104      	bne.n	800f0c8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f0be:	f001 faf1 	bl	80106a4 <pvTaskIncrementMutexHeldCount>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ca:	691b      	ldr	r3, [r3, #16]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d00f      	beq.n	800f0f0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d2:	3310      	adds	r3, #16
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f000 ff85 	bl	800ffe4 <xTaskRemoveFromEventList>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d007      	beq.n	800f0f0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f0e0:	4b53      	ldr	r3, [pc, #332]	; (800f230 <xQueueSemaphoreTake+0x20c>)
 800f0e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0e6:	601a      	str	r2, [r3, #0]
 800f0e8:	f3bf 8f4f 	dsb	sy
 800f0ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f0f0:	f002 f9c2 	bl	8011478 <vPortExitCritical>
				return pdPASS;
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	e096      	b.n	800f226 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d110      	bne.n	800f120 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f100:	2b00      	cmp	r3, #0
 800f102:	d009      	beq.n	800f118 <xQueueSemaphoreTake+0xf4>
 800f104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f108:	f383 8811 	msr	BASEPRI, r3
 800f10c:	f3bf 8f6f 	isb	sy
 800f110:	f3bf 8f4f 	dsb	sy
 800f114:	617b      	str	r3, [r7, #20]
 800f116:	e7fe      	b.n	800f116 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f118:	f002 f9ae 	bl	8011478 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f11c:	2300      	movs	r3, #0
 800f11e:	e082      	b.n	800f226 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f122:	2b00      	cmp	r3, #0
 800f124:	d106      	bne.n	800f134 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f126:	f107 030c 	add.w	r3, r7, #12
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 ffbe 	bl	80100ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f130:	2301      	movs	r3, #1
 800f132:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f134:	f002 f9a0 	bl	8011478 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f138:	f000 fd00 	bl	800fb3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f13c:	f002 f96e 	bl	801141c <vPortEnterCritical>
 800f140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f146:	b25b      	sxtb	r3, r3
 800f148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f14c:	d103      	bne.n	800f156 <xQueueSemaphoreTake+0x132>
 800f14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f150:	2200      	movs	r2, #0
 800f152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f15c:	b25b      	sxtb	r3, r3
 800f15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f162:	d103      	bne.n	800f16c <xQueueSemaphoreTake+0x148>
 800f164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f166:	2200      	movs	r2, #0
 800f168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f16c:	f002 f984 	bl	8011478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f170:	463a      	mov	r2, r7
 800f172:	f107 030c 	add.w	r3, r7, #12
 800f176:	4611      	mov	r1, r2
 800f178:	4618      	mov	r0, r3
 800f17a:	f000 ffad 	bl	80100d8 <xTaskCheckForTimeOut>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	d132      	bne.n	800f1ea <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f184:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f186:	f000 f9ee 	bl	800f566 <prvIsQueueEmpty>
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d026      	beq.n	800f1de <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d109      	bne.n	800f1ac <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800f198:	f002 f940 	bl	801141c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f001 f92b 	bl	80103fc <xTaskPriorityInherit>
 800f1a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f1a8:	f002 f966 	bl	8011478 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ae:	3324      	adds	r3, #36	; 0x24
 800f1b0:	683a      	ldr	r2, [r7, #0]
 800f1b2:	4611      	mov	r1, r2
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f000 fec7 	bl	800ff48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f1ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1bc:	f000 f981 	bl	800f4c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f1c0:	f000 fd02 	bl	800fbc8 <xTaskResumeAll>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	f47f af69 	bne.w	800f09e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800f1cc:	4b18      	ldr	r3, [pc, #96]	; (800f230 <xQueueSemaphoreTake+0x20c>)
 800f1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1d2:	601a      	str	r2, [r3, #0]
 800f1d4:	f3bf 8f4f 	dsb	sy
 800f1d8:	f3bf 8f6f 	isb	sy
 800f1dc:	e75f      	b.n	800f09e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f1de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1e0:	f000 f96f 	bl	800f4c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1e4:	f000 fcf0 	bl	800fbc8 <xTaskResumeAll>
 800f1e8:	e759      	b.n	800f09e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f1ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1ec:	f000 f969 	bl	800f4c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1f0:	f000 fcea 	bl	800fbc8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1f6:	f000 f9b6 	bl	800f566 <prvIsQueueEmpty>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	f43f af4e 	beq.w	800f09e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00d      	beq.n	800f224 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800f208:	f002 f908 	bl	801141c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f20c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f20e:	f000 f8b0 	bl	800f372 <prvGetDisinheritPriorityAfterTimeout>
 800f212:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f216:	689b      	ldr	r3, [r3, #8]
 800f218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f21a:	4618      	mov	r0, r3
 800f21c:	f001 f9c2 	bl	80105a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f220:	f002 f92a 	bl	8011478 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f224:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f226:	4618      	mov	r0, r3
 800f228:	3738      	adds	r7, #56	; 0x38
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	e000ed04 	.word	0xe000ed04

0800f234 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b08e      	sub	sp, #56	; 0x38
 800f238:	af00      	add	r7, sp, #0
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	60b9      	str	r1, [r7, #8]
 800f23e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f246:	2b00      	cmp	r3, #0
 800f248:	d109      	bne.n	800f25e <xQueueReceiveFromISR+0x2a>
 800f24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f24e:	f383 8811 	msr	BASEPRI, r3
 800f252:	f3bf 8f6f 	isb	sy
 800f256:	f3bf 8f4f 	dsb	sy
 800f25a:	623b      	str	r3, [r7, #32]
 800f25c:	e7fe      	b.n	800f25c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d103      	bne.n	800f26c <xQueueReceiveFromISR+0x38>
 800f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d101      	bne.n	800f270 <xQueueReceiveFromISR+0x3c>
 800f26c:	2301      	movs	r3, #1
 800f26e:	e000      	b.n	800f272 <xQueueReceiveFromISR+0x3e>
 800f270:	2300      	movs	r3, #0
 800f272:	2b00      	cmp	r3, #0
 800f274:	d109      	bne.n	800f28a <xQueueReceiveFromISR+0x56>
 800f276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f27a:	f383 8811 	msr	BASEPRI, r3
 800f27e:	f3bf 8f6f 	isb	sy
 800f282:	f3bf 8f4f 	dsb	sy
 800f286:	61fb      	str	r3, [r7, #28]
 800f288:	e7fe      	b.n	800f288 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f28a:	f002 f9a3 	bl	80115d4 <vPortValidateInterruptPriority>
	__asm volatile
 800f28e:	f3ef 8211 	mrs	r2, BASEPRI
 800f292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f296:	f383 8811 	msr	BASEPRI, r3
 800f29a:	f3bf 8f6f 	isb	sy
 800f29e:	f3bf 8f4f 	dsb	sy
 800f2a2:	61ba      	str	r2, [r7, #24]
 800f2a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f2a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d02f      	beq.n	800f316 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f2c0:	68b9      	ldr	r1, [r7, #8]
 800f2c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2c4:	f000 f8d7 	bl	800f476 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ca:	1e5a      	subs	r2, r3, #1
 800f2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f2d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2d8:	d112      	bne.n	800f300 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2dc:	691b      	ldr	r3, [r3, #16]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d016      	beq.n	800f310 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e4:	3310      	adds	r3, #16
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f000 fe7c 	bl	800ffe4 <xTaskRemoveFromEventList>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00e      	beq.n	800f310 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d00b      	beq.n	800f310 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	601a      	str	r2, [r3, #0]
 800f2fe:	e007      	b.n	800f310 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f304:	3301      	adds	r3, #1
 800f306:	b2db      	uxtb	r3, r3
 800f308:	b25a      	sxtb	r2, r3
 800f30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f310:	2301      	movs	r3, #1
 800f312:	637b      	str	r3, [r7, #52]	; 0x34
 800f314:	e001      	b.n	800f31a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f316:	2300      	movs	r3, #0
 800f318:	637b      	str	r3, [r7, #52]	; 0x34
 800f31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f326:	4618      	mov	r0, r3
 800f328:	3738      	adds	r7, #56	; 0x38
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}

0800f32e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f32e:	b580      	push	{r7, lr}
 800f330:	b084      	sub	sp, #16
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d109      	bne.n	800f354 <vQueueDelete+0x26>
	__asm volatile
 800f340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f344:	f383 8811 	msr	BASEPRI, r3
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	f3bf 8f4f 	dsb	sy
 800f350:	60bb      	str	r3, [r7, #8]
 800f352:	e7fe      	b.n	800f352 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f354:	68f8      	ldr	r0, [r7, #12]
 800f356:	f000 f95d 	bl	800f614 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f360:	2b00      	cmp	r3, #0
 800f362:	d102      	bne.n	800f36a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f002 fa35 	bl	80117d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f36a:	bf00      	nop
 800f36c:	3710      	adds	r7, #16
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f372:	b480      	push	{r7}
 800f374:	b085      	sub	sp, #20
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d006      	beq.n	800f390 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f38c:	60fb      	str	r3, [r7, #12]
 800f38e:	e001      	b.n	800f394 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f390:	2300      	movs	r3, #0
 800f392:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f394:	68fb      	ldr	r3, [r7, #12]
	}
 800f396:	4618      	mov	r0, r3
 800f398:	3714      	adds	r7, #20
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr

0800f3a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f3a2:	b580      	push	{r7, lr}
 800f3a4:	b086      	sub	sp, #24
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	60f8      	str	r0, [r7, #12]
 800f3aa:	60b9      	str	r1, [r7, #8]
 800f3ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d10d      	bne.n	800f3dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d14d      	bne.n	800f464 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f001 f87d 	bl	80104cc <xTaskPriorityDisinherit>
 800f3d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	609a      	str	r2, [r3, #8]
 800f3da:	e043      	b.n	800f464 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d119      	bne.n	800f416 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6858      	ldr	r0, [r3, #4]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	68b9      	ldr	r1, [r7, #8]
 800f3ee:	f004 f887 	bl	8013500 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	685a      	ldr	r2, [r3, #4]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3fa:	441a      	add	r2, r3
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	685a      	ldr	r2, [r3, #4]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	689b      	ldr	r3, [r3, #8]
 800f408:	429a      	cmp	r2, r3
 800f40a:	d32b      	bcc.n	800f464 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681a      	ldr	r2, [r3, #0]
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	605a      	str	r2, [r3, #4]
 800f414:	e026      	b.n	800f464 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	68d8      	ldr	r0, [r3, #12]
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f41e:	461a      	mov	r2, r3
 800f420:	68b9      	ldr	r1, [r7, #8]
 800f422:	f004 f86d 	bl	8013500 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	68da      	ldr	r2, [r3, #12]
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f42e:	425b      	negs	r3, r3
 800f430:	441a      	add	r2, r3
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	68da      	ldr	r2, [r3, #12]
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	429a      	cmp	r2, r3
 800f440:	d207      	bcs.n	800f452 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	689a      	ldr	r2, [r3, #8]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f44a:	425b      	negs	r3, r3
 800f44c:	441a      	add	r2, r3
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b02      	cmp	r3, #2
 800f456:	d105      	bne.n	800f464 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d002      	beq.n	800f464 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	3b01      	subs	r3, #1
 800f462:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	1c5a      	adds	r2, r3, #1
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f46c:	697b      	ldr	r3, [r7, #20]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3718      	adds	r7, #24
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f476:	b580      	push	{r7, lr}
 800f478:	b082      	sub	sp, #8
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
 800f47e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f484:	2b00      	cmp	r3, #0
 800f486:	d018      	beq.n	800f4ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	68da      	ldr	r2, [r3, #12]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f490:	441a      	add	r2, r3
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	68da      	ldr	r2, [r3, #12]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	689b      	ldr	r3, [r3, #8]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d303      	bcc.n	800f4aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681a      	ldr	r2, [r3, #0]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	68d9      	ldr	r1, [r3, #12]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	6838      	ldr	r0, [r7, #0]
 800f4b6:	f004 f823 	bl	8013500 <memcpy>
	}
}
 800f4ba:	bf00      	nop
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b084      	sub	sp, #16
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f4ca:	f001 ffa7 	bl	801141c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f4d6:	e011      	b.n	800f4fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d012      	beq.n	800f506 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	3324      	adds	r3, #36	; 0x24
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f000 fd7d 	bl	800ffe4 <xTaskRemoveFromEventList>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d001      	beq.n	800f4f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f4f0:	f000 fe52 	bl	8010198 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f4f4:	7bfb      	ldrb	r3, [r7, #15]
 800f4f6:	3b01      	subs	r3, #1
 800f4f8:	b2db      	uxtb	r3, r3
 800f4fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f4fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f500:	2b00      	cmp	r3, #0
 800f502:	dce9      	bgt.n	800f4d8 <prvUnlockQueue+0x16>
 800f504:	e000      	b.n	800f508 <prvUnlockQueue+0x46>
					break;
 800f506:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	22ff      	movs	r2, #255	; 0xff
 800f50c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f510:	f001 ffb2 	bl	8011478 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f514:	f001 ff82 	bl	801141c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f51e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f520:	e011      	b.n	800f546 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d012      	beq.n	800f550 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	3310      	adds	r3, #16
 800f52e:	4618      	mov	r0, r3
 800f530:	f000 fd58 	bl	800ffe4 <xTaskRemoveFromEventList>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f53a:	f000 fe2d 	bl	8010198 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f53e:	7bbb      	ldrb	r3, [r7, #14]
 800f540:	3b01      	subs	r3, #1
 800f542:	b2db      	uxtb	r3, r3
 800f544:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f546:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	dce9      	bgt.n	800f522 <prvUnlockQueue+0x60>
 800f54e:	e000      	b.n	800f552 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f550:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	22ff      	movs	r2, #255	; 0xff
 800f556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f55a:	f001 ff8d 	bl	8011478 <vPortExitCritical>
}
 800f55e:	bf00      	nop
 800f560:	3710      	adds	r7, #16
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f566:	b580      	push	{r7, lr}
 800f568:	b084      	sub	sp, #16
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f56e:	f001 ff55 	bl	801141c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f576:	2b00      	cmp	r3, #0
 800f578:	d102      	bne.n	800f580 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f57a:	2301      	movs	r3, #1
 800f57c:	60fb      	str	r3, [r7, #12]
 800f57e:	e001      	b.n	800f584 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f580:	2300      	movs	r3, #0
 800f582:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f584:	f001 ff78 	bl	8011478 <vPortExitCritical>

	return xReturn;
 800f588:	68fb      	ldr	r3, [r7, #12]
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}

0800f592 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f592:	b580      	push	{r7, lr}
 800f594:	b084      	sub	sp, #16
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f59a:	f001 ff3f 	bl	801141c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d102      	bne.n	800f5b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	60fb      	str	r3, [r7, #12]
 800f5ae:	e001      	b.n	800f5b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5b4:	f001 ff60 	bl	8011478 <vPortExitCritical>

	return xReturn;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
	...

0800f5c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b085      	sub	sp, #20
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	60fb      	str	r3, [r7, #12]
 800f5d2:	e014      	b.n	800f5fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f5d4:	4a0e      	ldr	r2, [pc, #56]	; (800f610 <vQueueAddToRegistry+0x4c>)
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d10b      	bne.n	800f5f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f5e0:	490b      	ldr	r1, [pc, #44]	; (800f610 <vQueueAddToRegistry+0x4c>)
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	683a      	ldr	r2, [r7, #0]
 800f5e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f5ea:	4a09      	ldr	r2, [pc, #36]	; (800f610 <vQueueAddToRegistry+0x4c>)
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	00db      	lsls	r3, r3, #3
 800f5f0:	4413      	add	r3, r2
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f5f6:	e005      	b.n	800f604 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	60fb      	str	r3, [r7, #12]
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2b07      	cmp	r3, #7
 800f602:	d9e7      	bls.n	800f5d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f604:	bf00      	nop
 800f606:	3714      	adds	r7, #20
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr
 800f610:	20004fb4 	.word	0x20004fb4

0800f614 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f614:	b480      	push	{r7}
 800f616:	b085      	sub	sp, #20
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f61c:	2300      	movs	r3, #0
 800f61e:	60fb      	str	r3, [r7, #12]
 800f620:	e016      	b.n	800f650 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f622:	4a10      	ldr	r2, [pc, #64]	; (800f664 <vQueueUnregisterQueue+0x50>)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	00db      	lsls	r3, r3, #3
 800f628:	4413      	add	r3, r2
 800f62a:	685b      	ldr	r3, [r3, #4]
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d10b      	bne.n	800f64a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f632:	4a0c      	ldr	r2, [pc, #48]	; (800f664 <vQueueUnregisterQueue+0x50>)
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2100      	movs	r1, #0
 800f638:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f63c:	4a09      	ldr	r2, [pc, #36]	; (800f664 <vQueueUnregisterQueue+0x50>)
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	00db      	lsls	r3, r3, #3
 800f642:	4413      	add	r3, r2
 800f644:	2200      	movs	r2, #0
 800f646:	605a      	str	r2, [r3, #4]
				break;
 800f648:	e005      	b.n	800f656 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	3301      	adds	r3, #1
 800f64e:	60fb      	str	r3, [r7, #12]
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2b07      	cmp	r3, #7
 800f654:	d9e5      	bls.n	800f622 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f656:	bf00      	nop
 800f658:	3714      	adds	r7, #20
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop
 800f664:	20004fb4 	.word	0x20004fb4

0800f668 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b086      	sub	sp, #24
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f678:	f001 fed0 	bl	801141c <vPortEnterCritical>
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f682:	b25b      	sxtb	r3, r3
 800f684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f688:	d103      	bne.n	800f692 <vQueueWaitForMessageRestricted+0x2a>
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	2200      	movs	r2, #0
 800f68e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f698:	b25b      	sxtb	r3, r3
 800f69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69e:	d103      	bne.n	800f6a8 <vQueueWaitForMessageRestricted+0x40>
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f6a8:	f001 fee6 	bl	8011478 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d106      	bne.n	800f6c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	3324      	adds	r3, #36	; 0x24
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	68b9      	ldr	r1, [r7, #8]
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f000 fc67 	bl	800ff90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f6c2:	6978      	ldr	r0, [r7, #20]
 800f6c4:	f7ff fefd 	bl	800f4c2 <prvUnlockQueue>
	}
 800f6c8:	bf00      	nop
 800f6ca:	3718      	adds	r7, #24
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b08e      	sub	sp, #56	; 0x38
 800f6d4:	af04      	add	r7, sp, #16
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	607a      	str	r2, [r7, #4]
 800f6dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d109      	bne.n	800f6f8 <xTaskCreateStatic+0x28>
 800f6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e8:	f383 8811 	msr	BASEPRI, r3
 800f6ec:	f3bf 8f6f 	isb	sy
 800f6f0:	f3bf 8f4f 	dsb	sy
 800f6f4:	623b      	str	r3, [r7, #32]
 800f6f6:	e7fe      	b.n	800f6f6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800f6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d109      	bne.n	800f712 <xTaskCreateStatic+0x42>
 800f6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f702:	f383 8811 	msr	BASEPRI, r3
 800f706:	f3bf 8f6f 	isb	sy
 800f70a:	f3bf 8f4f 	dsb	sy
 800f70e:	61fb      	str	r3, [r7, #28]
 800f710:	e7fe      	b.n	800f710 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f712:	235c      	movs	r3, #92	; 0x5c
 800f714:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	2b5c      	cmp	r3, #92	; 0x5c
 800f71a:	d009      	beq.n	800f730 <xTaskCreateStatic+0x60>
 800f71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f720:	f383 8811 	msr	BASEPRI, r3
 800f724:	f3bf 8f6f 	isb	sy
 800f728:	f3bf 8f4f 	dsb	sy
 800f72c:	61bb      	str	r3, [r7, #24]
 800f72e:	e7fe      	b.n	800f72e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f730:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f734:	2b00      	cmp	r3, #0
 800f736:	d01e      	beq.n	800f776 <xTaskCreateStatic+0xa6>
 800f738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d01b      	beq.n	800f776 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f740:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f746:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74a:	2202      	movs	r2, #2
 800f74c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f750:	2300      	movs	r3, #0
 800f752:	9303      	str	r3, [sp, #12]
 800f754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f756:	9302      	str	r3, [sp, #8]
 800f758:	f107 0314 	add.w	r3, r7, #20
 800f75c:	9301      	str	r3, [sp, #4]
 800f75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	68b9      	ldr	r1, [r7, #8]
 800f768:	68f8      	ldr	r0, [r7, #12]
 800f76a:	f000 f850 	bl	800f80e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f76e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f770:	f000 f8dc 	bl	800f92c <prvAddNewTaskToReadyList>
 800f774:	e001      	b.n	800f77a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800f776:	2300      	movs	r3, #0
 800f778:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f77a:	697b      	ldr	r3, [r7, #20]
	}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3728      	adds	r7, #40	; 0x28
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f784:	b580      	push	{r7, lr}
 800f786:	b08c      	sub	sp, #48	; 0x30
 800f788:	af04      	add	r7, sp, #16
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	60b9      	str	r1, [r7, #8]
 800f78e:	603b      	str	r3, [r7, #0]
 800f790:	4613      	mov	r3, r2
 800f792:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f794:	88fb      	ldrh	r3, [r7, #6]
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	4618      	mov	r0, r3
 800f79a:	f001 ff59 	bl	8011650 <pvPortMalloc>
 800f79e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00e      	beq.n	800f7c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f7a6:	205c      	movs	r0, #92	; 0x5c
 800f7a8:	f001 ff52 	bl	8011650 <pvPortMalloc>
 800f7ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d003      	beq.n	800f7bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	697a      	ldr	r2, [r7, #20]
 800f7b8:	631a      	str	r2, [r3, #48]	; 0x30
 800f7ba:	e005      	b.n	800f7c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f7bc:	6978      	ldr	r0, [r7, #20]
 800f7be:	f002 f809 	bl	80117d4 <vPortFree>
 800f7c2:	e001      	b.n	800f7c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d017      	beq.n	800f7fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f7d6:	88fa      	ldrh	r2, [r7, #6]
 800f7d8:	2300      	movs	r3, #0
 800f7da:	9303      	str	r3, [sp, #12]
 800f7dc:	69fb      	ldr	r3, [r7, #28]
 800f7de:	9302      	str	r3, [sp, #8]
 800f7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e2:	9301      	str	r3, [sp, #4]
 800f7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	68b9      	ldr	r1, [r7, #8]
 800f7ec:	68f8      	ldr	r0, [r7, #12]
 800f7ee:	f000 f80e 	bl	800f80e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f7f2:	69f8      	ldr	r0, [r7, #28]
 800f7f4:	f000 f89a 	bl	800f92c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	61bb      	str	r3, [r7, #24]
 800f7fc:	e002      	b.n	800f804 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f802:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f804:	69bb      	ldr	r3, [r7, #24]
	}
 800f806:	4618      	mov	r0, r3
 800f808:	3720      	adds	r7, #32
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f80e:	b580      	push	{r7, lr}
 800f810:	b088      	sub	sp, #32
 800f812:	af00      	add	r7, sp, #0
 800f814:	60f8      	str	r0, [r7, #12]
 800f816:	60b9      	str	r1, [r7, #8]
 800f818:	607a      	str	r2, [r7, #4]
 800f81a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	009b      	lsls	r3, r3, #2
 800f824:	461a      	mov	r2, r3
 800f826:	21a5      	movs	r1, #165	; 0xa5
 800f828:	f003 fe75 	bl	8013516 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f836:	3b01      	subs	r3, #1
 800f838:	009b      	lsls	r3, r3, #2
 800f83a:	4413      	add	r3, r2
 800f83c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	f023 0307 	bic.w	r3, r3, #7
 800f844:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f846:	69bb      	ldr	r3, [r7, #24]
 800f848:	f003 0307 	and.w	r3, r3, #7
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d009      	beq.n	800f864 <prvInitialiseNewTask+0x56>
 800f850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f854:	f383 8811 	msr	BASEPRI, r3
 800f858:	f3bf 8f6f 	isb	sy
 800f85c:	f3bf 8f4f 	dsb	sy
 800f860:	617b      	str	r3, [r7, #20]
 800f862:	e7fe      	b.n	800f862 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d01f      	beq.n	800f8aa <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f86a:	2300      	movs	r3, #0
 800f86c:	61fb      	str	r3, [r7, #28]
 800f86e:	e012      	b.n	800f896 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f870:	68ba      	ldr	r2, [r7, #8]
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	4413      	add	r3, r2
 800f876:	7819      	ldrb	r1, [r3, #0]
 800f878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f87a:	69fb      	ldr	r3, [r7, #28]
 800f87c:	4413      	add	r3, r2
 800f87e:	3334      	adds	r3, #52	; 0x34
 800f880:	460a      	mov	r2, r1
 800f882:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f884:	68ba      	ldr	r2, [r7, #8]
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	4413      	add	r3, r2
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d006      	beq.n	800f89e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	3301      	adds	r3, #1
 800f894:	61fb      	str	r3, [r7, #28]
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	2b0f      	cmp	r3, #15
 800f89a:	d9e9      	bls.n	800f870 <prvInitialiseNewTask+0x62>
 800f89c:	e000      	b.n	800f8a0 <prvInitialiseNewTask+0x92>
			{
				break;
 800f89e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f8a8:	e003      	b.n	800f8b2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b4:	2b37      	cmp	r3, #55	; 0x37
 800f8b6:	d901      	bls.n	800f8bc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f8b8:	2337      	movs	r3, #55	; 0x37
 800f8ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d0:	3304      	adds	r3, #4
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fe fdc6 	bl	800e464 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8da:	3318      	adds	r3, #24
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7fe fdc1 	bl	800e464 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f900:	2200      	movs	r2, #0
 800f902:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f906:	683a      	ldr	r2, [r7, #0]
 800f908:	68f9      	ldr	r1, [r7, #12]
 800f90a:	69b8      	ldr	r0, [r7, #24]
 800f90c:	f001 fc60 	bl	80111d0 <pxPortInitialiseStack>
 800f910:	4602      	mov	r2, r0
 800f912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f914:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d002      	beq.n	800f922 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f922:	bf00      	nop
 800f924:	3720      	adds	r7, #32
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
	...

0800f92c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f934:	f001 fd72 	bl	801141c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f938:	4b2d      	ldr	r3, [pc, #180]	; (800f9f0 <prvAddNewTaskToReadyList+0xc4>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	3301      	adds	r3, #1
 800f93e:	4a2c      	ldr	r2, [pc, #176]	; (800f9f0 <prvAddNewTaskToReadyList+0xc4>)
 800f940:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f942:	4b2c      	ldr	r3, [pc, #176]	; (800f9f4 <prvAddNewTaskToReadyList+0xc8>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d109      	bne.n	800f95e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f94a:	4a2a      	ldr	r2, [pc, #168]	; (800f9f4 <prvAddNewTaskToReadyList+0xc8>)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f950:	4b27      	ldr	r3, [pc, #156]	; (800f9f0 <prvAddNewTaskToReadyList+0xc4>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2b01      	cmp	r3, #1
 800f956:	d110      	bne.n	800f97a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f958:	f000 fc68 	bl	801022c <prvInitialiseTaskLists>
 800f95c:	e00d      	b.n	800f97a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f95e:	4b26      	ldr	r3, [pc, #152]	; (800f9f8 <prvAddNewTaskToReadyList+0xcc>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d109      	bne.n	800f97a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f966:	4b23      	ldr	r3, [pc, #140]	; (800f9f4 <prvAddNewTaskToReadyList+0xc8>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f970:	429a      	cmp	r2, r3
 800f972:	d802      	bhi.n	800f97a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f974:	4a1f      	ldr	r2, [pc, #124]	; (800f9f4 <prvAddNewTaskToReadyList+0xc8>)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f97a:	4b20      	ldr	r3, [pc, #128]	; (800f9fc <prvAddNewTaskToReadyList+0xd0>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	3301      	adds	r3, #1
 800f980:	4a1e      	ldr	r2, [pc, #120]	; (800f9fc <prvAddNewTaskToReadyList+0xd0>)
 800f982:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f984:	4b1d      	ldr	r3, [pc, #116]	; (800f9fc <prvAddNewTaskToReadyList+0xd0>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f990:	4b1b      	ldr	r3, [pc, #108]	; (800fa00 <prvAddNewTaskToReadyList+0xd4>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	429a      	cmp	r2, r3
 800f996:	d903      	bls.n	800f9a0 <prvAddNewTaskToReadyList+0x74>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f99c:	4a18      	ldr	r2, [pc, #96]	; (800fa00 <prvAddNewTaskToReadyList+0xd4>)
 800f99e:	6013      	str	r3, [r2, #0]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a4:	4613      	mov	r3, r2
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	4413      	add	r3, r2
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	4a15      	ldr	r2, [pc, #84]	; (800fa04 <prvAddNewTaskToReadyList+0xd8>)
 800f9ae:	441a      	add	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	3304      	adds	r3, #4
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	4610      	mov	r0, r2
 800f9b8:	f7fe fd61 	bl	800e47e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f9bc:	f001 fd5c 	bl	8011478 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f9c0:	4b0d      	ldr	r3, [pc, #52]	; (800f9f8 <prvAddNewTaskToReadyList+0xcc>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d00e      	beq.n	800f9e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f9c8:	4b0a      	ldr	r3, [pc, #40]	; (800f9f4 <prvAddNewTaskToReadyList+0xc8>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d207      	bcs.n	800f9e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f9d6:	4b0c      	ldr	r3, [pc, #48]	; (800fa08 <prvAddNewTaskToReadyList+0xdc>)
 800f9d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9dc:	601a      	str	r2, [r3, #0]
 800f9de:	f3bf 8f4f 	dsb	sy
 800f9e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9e6:	bf00      	nop
 800f9e8:	3708      	adds	r7, #8
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	20002124 	.word	0x20002124
 800f9f4:	20001c50 	.word	0x20001c50
 800f9f8:	20002130 	.word	0x20002130
 800f9fc:	20002140 	.word	0x20002140
 800fa00:	2000212c 	.word	0x2000212c
 800fa04:	20001c54 	.word	0x20001c54
 800fa08:	e000ed04 	.word	0xe000ed04

0800fa0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fa14:	2300      	movs	r3, #0
 800fa16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d016      	beq.n	800fa4c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fa1e:	4b13      	ldr	r3, [pc, #76]	; (800fa6c <vTaskDelay+0x60>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d009      	beq.n	800fa3a <vTaskDelay+0x2e>
 800fa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa2a:	f383 8811 	msr	BASEPRI, r3
 800fa2e:	f3bf 8f6f 	isb	sy
 800fa32:	f3bf 8f4f 	dsb	sy
 800fa36:	60bb      	str	r3, [r7, #8]
 800fa38:	e7fe      	b.n	800fa38 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800fa3a:	f000 f87f 	bl	800fb3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fa3e:	2100      	movs	r1, #0
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f001 f82b 	bl	8010a9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fa46:	f000 f8bf 	bl	800fbc8 <xTaskResumeAll>
 800fa4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d107      	bne.n	800fa62 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800fa52:	4b07      	ldr	r3, [pc, #28]	; (800fa70 <vTaskDelay+0x64>)
 800fa54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa58:	601a      	str	r2, [r3, #0]
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa62:	bf00      	nop
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	2000214c 	.word	0x2000214c
 800fa70:	e000ed04 	.word	0xe000ed04

0800fa74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b08a      	sub	sp, #40	; 0x28
 800fa78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fa82:	463a      	mov	r2, r7
 800fa84:	1d39      	adds	r1, r7, #4
 800fa86:	f107 0308 	add.w	r3, r7, #8
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fe fc96 	bl	800e3bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa90:	6839      	ldr	r1, [r7, #0]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	68ba      	ldr	r2, [r7, #8]
 800fa96:	9202      	str	r2, [sp, #8]
 800fa98:	9301      	str	r3, [sp, #4]
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	2300      	movs	r3, #0
 800faa0:	460a      	mov	r2, r1
 800faa2:	4920      	ldr	r1, [pc, #128]	; (800fb24 <vTaskStartScheduler+0xb0>)
 800faa4:	4820      	ldr	r0, [pc, #128]	; (800fb28 <vTaskStartScheduler+0xb4>)
 800faa6:	f7ff fe13 	bl	800f6d0 <xTaskCreateStatic>
 800faaa:	4602      	mov	r2, r0
 800faac:	4b1f      	ldr	r3, [pc, #124]	; (800fb2c <vTaskStartScheduler+0xb8>)
 800faae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fab0:	4b1e      	ldr	r3, [pc, #120]	; (800fb2c <vTaskStartScheduler+0xb8>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d002      	beq.n	800fabe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fab8:	2301      	movs	r3, #1
 800faba:	617b      	str	r3, [r7, #20]
 800fabc:	e001      	b.n	800fac2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fabe:	2300      	movs	r3, #0
 800fac0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d102      	bne.n	800face <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fac8:	f001 f83c 	bl	8010b44 <xTimerCreateTimerTask>
 800facc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	2b01      	cmp	r3, #1
 800fad2:	d115      	bne.n	800fb00 <vTaskStartScheduler+0x8c>
 800fad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad8:	f383 8811 	msr	BASEPRI, r3
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fae6:	4b12      	ldr	r3, [pc, #72]	; (800fb30 <vTaskStartScheduler+0xbc>)
 800fae8:	f04f 32ff 	mov.w	r2, #4294967295
 800faec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800faee:	4b11      	ldr	r3, [pc, #68]	; (800fb34 <vTaskStartScheduler+0xc0>)
 800faf0:	2201      	movs	r2, #1
 800faf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800faf4:	4b10      	ldr	r3, [pc, #64]	; (800fb38 <vTaskStartScheduler+0xc4>)
 800faf6:	2200      	movs	r2, #0
 800faf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fafa:	f001 fbf1 	bl	80112e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fafe:	e00d      	b.n	800fb1c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb06:	d109      	bne.n	800fb1c <vTaskStartScheduler+0xa8>
 800fb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb0c:	f383 8811 	msr	BASEPRI, r3
 800fb10:	f3bf 8f6f 	isb	sy
 800fb14:	f3bf 8f4f 	dsb	sy
 800fb18:	60fb      	str	r3, [r7, #12]
 800fb1a:	e7fe      	b.n	800fb1a <vTaskStartScheduler+0xa6>
}
 800fb1c:	bf00      	nop
 800fb1e:	3718      	adds	r7, #24
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	080135f8 	.word	0x080135f8
 800fb28:	080101b1 	.word	0x080101b1
 800fb2c:	20002148 	.word	0x20002148
 800fb30:	20002144 	.word	0x20002144
 800fb34:	20002130 	.word	0x20002130
 800fb38:	20002128 	.word	0x20002128

0800fb3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fb40:	4b04      	ldr	r3, [pc, #16]	; (800fb54 <vTaskSuspendAll+0x18>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	3301      	adds	r3, #1
 800fb46:	4a03      	ldr	r2, [pc, #12]	; (800fb54 <vTaskSuspendAll+0x18>)
 800fb48:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fb4a:	bf00      	nop
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr
 800fb54:	2000214c 	.word	0x2000214c

0800fb58 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800fb62:	4b14      	ldr	r3, [pc, #80]	; (800fbb4 <prvGetExpectedIdleTime+0x5c>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d001      	beq.n	800fb6e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800fb6e:	4b12      	ldr	r3, [pc, #72]	; (800fbb8 <prvGetExpectedIdleTime+0x60>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d002      	beq.n	800fb7e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	607b      	str	r3, [r7, #4]
 800fb7c:	e012      	b.n	800fba4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800fb7e:	4b0f      	ldr	r3, [pc, #60]	; (800fbbc <prvGetExpectedIdleTime+0x64>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d902      	bls.n	800fb8c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800fb86:	2300      	movs	r3, #0
 800fb88:	607b      	str	r3, [r7, #4]
 800fb8a:	e00b      	b.n	800fba4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d002      	beq.n	800fb98 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800fb92:	2300      	movs	r3, #0
 800fb94:	607b      	str	r3, [r7, #4]
 800fb96:	e005      	b.n	800fba4 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800fb98:	4b09      	ldr	r3, [pc, #36]	; (800fbc0 <prvGetExpectedIdleTime+0x68>)
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	4b09      	ldr	r3, [pc, #36]	; (800fbc4 <prvGetExpectedIdleTime+0x6c>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	1ad3      	subs	r3, r2, r3
 800fba2:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800fba4:	687b      	ldr	r3, [r7, #4]
	}
 800fba6:	4618      	mov	r0, r3
 800fba8:	370c      	adds	r7, #12
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop
 800fbb4:	2000212c 	.word	0x2000212c
 800fbb8:	20001c50 	.word	0x20001c50
 800fbbc:	20001c54 	.word	0x20001c54
 800fbc0:	20002144 	.word	0x20002144
 800fbc4:	20002128 	.word	0x20002128

0800fbc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b084      	sub	sp, #16
 800fbcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fbd6:	4b41      	ldr	r3, [pc, #260]	; (800fcdc <xTaskResumeAll+0x114>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d109      	bne.n	800fbf2 <xTaskResumeAll+0x2a>
 800fbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe2:	f383 8811 	msr	BASEPRI, r3
 800fbe6:	f3bf 8f6f 	isb	sy
 800fbea:	f3bf 8f4f 	dsb	sy
 800fbee:	603b      	str	r3, [r7, #0]
 800fbf0:	e7fe      	b.n	800fbf0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fbf2:	f001 fc13 	bl	801141c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fbf6:	4b39      	ldr	r3, [pc, #228]	; (800fcdc <xTaskResumeAll+0x114>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	3b01      	subs	r3, #1
 800fbfc:	4a37      	ldr	r2, [pc, #220]	; (800fcdc <xTaskResumeAll+0x114>)
 800fbfe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc00:	4b36      	ldr	r3, [pc, #216]	; (800fcdc <xTaskResumeAll+0x114>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d162      	bne.n	800fcce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fc08:	4b35      	ldr	r3, [pc, #212]	; (800fce0 <xTaskResumeAll+0x118>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d05e      	beq.n	800fcce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc10:	e02f      	b.n	800fc72 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc12:	4b34      	ldr	r3, [pc, #208]	; (800fce4 <xTaskResumeAll+0x11c>)
 800fc14:	68db      	ldr	r3, [r3, #12]
 800fc16:	68db      	ldr	r3, [r3, #12]
 800fc18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	3318      	adds	r3, #24
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fe fc8a 	bl	800e538 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	3304      	adds	r3, #4
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7fe fc85 	bl	800e538 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc32:	4b2d      	ldr	r3, [pc, #180]	; (800fce8 <xTaskResumeAll+0x120>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d903      	bls.n	800fc42 <xTaskResumeAll+0x7a>
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc3e:	4a2a      	ldr	r2, [pc, #168]	; (800fce8 <xTaskResumeAll+0x120>)
 800fc40:	6013      	str	r3, [r2, #0]
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc46:	4613      	mov	r3, r2
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	4413      	add	r3, r2
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	4a27      	ldr	r2, [pc, #156]	; (800fcec <xTaskResumeAll+0x124>)
 800fc50:	441a      	add	r2, r3
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	3304      	adds	r3, #4
 800fc56:	4619      	mov	r1, r3
 800fc58:	4610      	mov	r0, r2
 800fc5a:	f7fe fc10 	bl	800e47e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc62:	4b23      	ldr	r3, [pc, #140]	; (800fcf0 <xTaskResumeAll+0x128>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d302      	bcc.n	800fc72 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fc6c:	4b21      	ldr	r3, [pc, #132]	; (800fcf4 <xTaskResumeAll+0x12c>)
 800fc6e:	2201      	movs	r2, #1
 800fc70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc72:	4b1c      	ldr	r3, [pc, #112]	; (800fce4 <xTaskResumeAll+0x11c>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d1cb      	bne.n	800fc12 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d001      	beq.n	800fc84 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fc80:	f000 fb6e 	bl	8010360 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fc84:	4b1c      	ldr	r3, [pc, #112]	; (800fcf8 <xTaskResumeAll+0x130>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d010      	beq.n	800fcb2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fc90:	f000 f846 	bl	800fd20 <xTaskIncrementTick>
 800fc94:	4603      	mov	r3, r0
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d002      	beq.n	800fca0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fc9a:	4b16      	ldr	r3, [pc, #88]	; (800fcf4 <xTaskResumeAll+0x12c>)
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	3b01      	subs	r3, #1
 800fca4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d1f1      	bne.n	800fc90 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800fcac:	4b12      	ldr	r3, [pc, #72]	; (800fcf8 <xTaskResumeAll+0x130>)
 800fcae:	2200      	movs	r2, #0
 800fcb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fcb2:	4b10      	ldr	r3, [pc, #64]	; (800fcf4 <xTaskResumeAll+0x12c>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d009      	beq.n	800fcce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fcba:	2301      	movs	r3, #1
 800fcbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fcbe:	4b0f      	ldr	r3, [pc, #60]	; (800fcfc <xTaskResumeAll+0x134>)
 800fcc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcc4:	601a      	str	r2, [r3, #0]
 800fcc6:	f3bf 8f4f 	dsb	sy
 800fcca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fcce:	f001 fbd3 	bl	8011478 <vPortExitCritical>

	return xAlreadyYielded;
 800fcd2:	68bb      	ldr	r3, [r7, #8]
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3710      	adds	r7, #16
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}
 800fcdc:	2000214c 	.word	0x2000214c
 800fce0:	20002124 	.word	0x20002124
 800fce4:	200020e4 	.word	0x200020e4
 800fce8:	2000212c 	.word	0x2000212c
 800fcec:	20001c54 	.word	0x20001c54
 800fcf0:	20001c50 	.word	0x20001c50
 800fcf4:	20002138 	.word	0x20002138
 800fcf8:	20002134 	.word	0x20002134
 800fcfc:	e000ed04 	.word	0xe000ed04

0800fd00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fd00:	b480      	push	{r7}
 800fd02:	b083      	sub	sp, #12
 800fd04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fd06:	4b05      	ldr	r3, [pc, #20]	; (800fd1c <xTaskGetTickCount+0x1c>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fd0c:	687b      	ldr	r3, [r7, #4]
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	370c      	adds	r7, #12
 800fd12:	46bd      	mov	sp, r7
 800fd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd18:	4770      	bx	lr
 800fd1a:	bf00      	nop
 800fd1c:	20002128 	.word	0x20002128

0800fd20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b086      	sub	sp, #24
 800fd24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fd26:	2300      	movs	r3, #0
 800fd28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd2a:	4b4e      	ldr	r3, [pc, #312]	; (800fe64 <xTaskIncrementTick+0x144>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	f040 8088 	bne.w	800fe44 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fd34:	4b4c      	ldr	r3, [pc, #304]	; (800fe68 <xTaskIncrementTick+0x148>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	3301      	adds	r3, #1
 800fd3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fd3c:	4a4a      	ldr	r2, [pc, #296]	; (800fe68 <xTaskIncrementTick+0x148>)
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d11f      	bne.n	800fd88 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800fd48:	4b48      	ldr	r3, [pc, #288]	; (800fe6c <xTaskIncrementTick+0x14c>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d009      	beq.n	800fd66 <xTaskIncrementTick+0x46>
 800fd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd56:	f383 8811 	msr	BASEPRI, r3
 800fd5a:	f3bf 8f6f 	isb	sy
 800fd5e:	f3bf 8f4f 	dsb	sy
 800fd62:	603b      	str	r3, [r7, #0]
 800fd64:	e7fe      	b.n	800fd64 <xTaskIncrementTick+0x44>
 800fd66:	4b41      	ldr	r3, [pc, #260]	; (800fe6c <xTaskIncrementTick+0x14c>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	60fb      	str	r3, [r7, #12]
 800fd6c:	4b40      	ldr	r3, [pc, #256]	; (800fe70 <xTaskIncrementTick+0x150>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a3e      	ldr	r2, [pc, #248]	; (800fe6c <xTaskIncrementTick+0x14c>)
 800fd72:	6013      	str	r3, [r2, #0]
 800fd74:	4a3e      	ldr	r2, [pc, #248]	; (800fe70 <xTaskIncrementTick+0x150>)
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	6013      	str	r3, [r2, #0]
 800fd7a:	4b3e      	ldr	r3, [pc, #248]	; (800fe74 <xTaskIncrementTick+0x154>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	3301      	adds	r3, #1
 800fd80:	4a3c      	ldr	r2, [pc, #240]	; (800fe74 <xTaskIncrementTick+0x154>)
 800fd82:	6013      	str	r3, [r2, #0]
 800fd84:	f000 faec 	bl	8010360 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fd88:	4b3b      	ldr	r3, [pc, #236]	; (800fe78 <xTaskIncrementTick+0x158>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	693a      	ldr	r2, [r7, #16]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d349      	bcc.n	800fe26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd92:	4b36      	ldr	r3, [pc, #216]	; (800fe6c <xTaskIncrementTick+0x14c>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d104      	bne.n	800fda6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd9c:	4b36      	ldr	r3, [pc, #216]	; (800fe78 <xTaskIncrementTick+0x158>)
 800fd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800fda2:	601a      	str	r2, [r3, #0]
					break;
 800fda4:	e03f      	b.n	800fe26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fda6:	4b31      	ldr	r3, [pc, #196]	; (800fe6c <xTaskIncrementTick+0x14c>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	68db      	ldr	r3, [r3, #12]
 800fdae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fdb6:	693a      	ldr	r2, [r7, #16]
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d203      	bcs.n	800fdc6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fdbe:	4a2e      	ldr	r2, [pc, #184]	; (800fe78 <xTaskIncrementTick+0x158>)
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fdc4:	e02f      	b.n	800fe26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	3304      	adds	r3, #4
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7fe fbb4 	bl	800e538 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d004      	beq.n	800fde2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	3318      	adds	r3, #24
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7fe fbab 	bl	800e538 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fde6:	4b25      	ldr	r3, [pc, #148]	; (800fe7c <xTaskIncrementTick+0x15c>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d903      	bls.n	800fdf6 <xTaskIncrementTick+0xd6>
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdf2:	4a22      	ldr	r2, [pc, #136]	; (800fe7c <xTaskIncrementTick+0x15c>)
 800fdf4:	6013      	str	r3, [r2, #0]
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	4413      	add	r3, r2
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	4a1f      	ldr	r2, [pc, #124]	; (800fe80 <xTaskIncrementTick+0x160>)
 800fe04:	441a      	add	r2, r3
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	3304      	adds	r3, #4
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	4610      	mov	r0, r2
 800fe0e:	f7fe fb36 	bl	800e47e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe16:	4b1b      	ldr	r3, [pc, #108]	; (800fe84 <xTaskIncrementTick+0x164>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d3b8      	bcc.n	800fd92 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800fe20:	2301      	movs	r3, #1
 800fe22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe24:	e7b5      	b.n	800fd92 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fe26:	4b17      	ldr	r3, [pc, #92]	; (800fe84 <xTaskIncrementTick+0x164>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe2c:	4914      	ldr	r1, [pc, #80]	; (800fe80 <xTaskIncrementTick+0x160>)
 800fe2e:	4613      	mov	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4413      	add	r3, r2
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	440b      	add	r3, r1
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2b01      	cmp	r3, #1
 800fe3c:	d907      	bls.n	800fe4e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800fe3e:	2301      	movs	r3, #1
 800fe40:	617b      	str	r3, [r7, #20]
 800fe42:	e004      	b.n	800fe4e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fe44:	4b10      	ldr	r3, [pc, #64]	; (800fe88 <xTaskIncrementTick+0x168>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	4a0f      	ldr	r2, [pc, #60]	; (800fe88 <xTaskIncrementTick+0x168>)
 800fe4c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fe4e:	4b0f      	ldr	r3, [pc, #60]	; (800fe8c <xTaskIncrementTick+0x16c>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d001      	beq.n	800fe5a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800fe56:	2301      	movs	r3, #1
 800fe58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fe5a:	697b      	ldr	r3, [r7, #20]
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3718      	adds	r7, #24
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	2000214c 	.word	0x2000214c
 800fe68:	20002128 	.word	0x20002128
 800fe6c:	200020dc 	.word	0x200020dc
 800fe70:	200020e0 	.word	0x200020e0
 800fe74:	2000213c 	.word	0x2000213c
 800fe78:	20002144 	.word	0x20002144
 800fe7c:	2000212c 	.word	0x2000212c
 800fe80:	20001c54 	.word	0x20001c54
 800fe84:	20001c50 	.word	0x20001c50
 800fe88:	20002134 	.word	0x20002134
 800fe8c:	20002138 	.word	0x20002138

0800fe90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fe90:	b480      	push	{r7}
 800fe92:	b085      	sub	sp, #20
 800fe94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe96:	4b27      	ldr	r3, [pc, #156]	; (800ff34 <vTaskSwitchContext+0xa4>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d003      	beq.n	800fea6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe9e:	4b26      	ldr	r3, [pc, #152]	; (800ff38 <vTaskSwitchContext+0xa8>)
 800fea0:	2201      	movs	r2, #1
 800fea2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fea4:	e040      	b.n	800ff28 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800fea6:	4b24      	ldr	r3, [pc, #144]	; (800ff38 <vTaskSwitchContext+0xa8>)
 800fea8:	2200      	movs	r2, #0
 800feaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feac:	4b23      	ldr	r3, [pc, #140]	; (800ff3c <vTaskSwitchContext+0xac>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	60fb      	str	r3, [r7, #12]
 800feb2:	e00f      	b.n	800fed4 <vTaskSwitchContext+0x44>
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d109      	bne.n	800fece <vTaskSwitchContext+0x3e>
 800feba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	607b      	str	r3, [r7, #4]
 800fecc:	e7fe      	b.n	800fecc <vTaskSwitchContext+0x3c>
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	3b01      	subs	r3, #1
 800fed2:	60fb      	str	r3, [r7, #12]
 800fed4:	491a      	ldr	r1, [pc, #104]	; (800ff40 <vTaskSwitchContext+0xb0>)
 800fed6:	68fa      	ldr	r2, [r7, #12]
 800fed8:	4613      	mov	r3, r2
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	4413      	add	r3, r2
 800fede:	009b      	lsls	r3, r3, #2
 800fee0:	440b      	add	r3, r1
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d0e5      	beq.n	800feb4 <vTaskSwitchContext+0x24>
 800fee8:	68fa      	ldr	r2, [r7, #12]
 800feea:	4613      	mov	r3, r2
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	4413      	add	r3, r2
 800fef0:	009b      	lsls	r3, r3, #2
 800fef2:	4a13      	ldr	r2, [pc, #76]	; (800ff40 <vTaskSwitchContext+0xb0>)
 800fef4:	4413      	add	r3, r2
 800fef6:	60bb      	str	r3, [r7, #8]
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	685a      	ldr	r2, [r3, #4]
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	605a      	str	r2, [r3, #4]
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	685a      	ldr	r2, [r3, #4]
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	3308      	adds	r3, #8
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d104      	bne.n	800ff18 <vTaskSwitchContext+0x88>
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	685a      	ldr	r2, [r3, #4]
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	605a      	str	r2, [r3, #4]
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	68db      	ldr	r3, [r3, #12]
 800ff1e:	4a09      	ldr	r2, [pc, #36]	; (800ff44 <vTaskSwitchContext+0xb4>)
 800ff20:	6013      	str	r3, [r2, #0]
 800ff22:	4a06      	ldr	r2, [pc, #24]	; (800ff3c <vTaskSwitchContext+0xac>)
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	6013      	str	r3, [r2, #0]
}
 800ff28:	bf00      	nop
 800ff2a:	3714      	adds	r7, #20
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr
 800ff34:	2000214c 	.word	0x2000214c
 800ff38:	20002138 	.word	0x20002138
 800ff3c:	2000212c 	.word	0x2000212c
 800ff40:	20001c54 	.word	0x20001c54
 800ff44:	20001c50 	.word	0x20001c50

0800ff48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d109      	bne.n	800ff6c <vTaskPlaceOnEventList+0x24>
 800ff58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5c:	f383 8811 	msr	BASEPRI, r3
 800ff60:	f3bf 8f6f 	isb	sy
 800ff64:	f3bf 8f4f 	dsb	sy
 800ff68:	60fb      	str	r3, [r7, #12]
 800ff6a:	e7fe      	b.n	800ff6a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff6c:	4b07      	ldr	r3, [pc, #28]	; (800ff8c <vTaskPlaceOnEventList+0x44>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	3318      	adds	r3, #24
 800ff72:	4619      	mov	r1, r3
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f7fe faa6 	bl	800e4c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff7a:	2101      	movs	r1, #1
 800ff7c:	6838      	ldr	r0, [r7, #0]
 800ff7e:	f000 fd8d 	bl	8010a9c <prvAddCurrentTaskToDelayedList>
}
 800ff82:	bf00      	nop
 800ff84:	3710      	adds	r7, #16
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	20001c50 	.word	0x20001c50

0800ff90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b086      	sub	sp, #24
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d109      	bne.n	800ffb6 <vTaskPlaceOnEventListRestricted+0x26>
 800ffa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa6:	f383 8811 	msr	BASEPRI, r3
 800ffaa:	f3bf 8f6f 	isb	sy
 800ffae:	f3bf 8f4f 	dsb	sy
 800ffb2:	617b      	str	r3, [r7, #20]
 800ffb4:	e7fe      	b.n	800ffb4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ffb6:	4b0a      	ldr	r3, [pc, #40]	; (800ffe0 <vTaskPlaceOnEventListRestricted+0x50>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	3318      	adds	r3, #24
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	68f8      	ldr	r0, [r7, #12]
 800ffc0:	f7fe fa5d 	bl	800e47e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d002      	beq.n	800ffd0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800ffca:	f04f 33ff 	mov.w	r3, #4294967295
 800ffce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ffd0:	6879      	ldr	r1, [r7, #4]
 800ffd2:	68b8      	ldr	r0, [r7, #8]
 800ffd4:	f000 fd62 	bl	8010a9c <prvAddCurrentTaskToDelayedList>
	}
 800ffd8:	bf00      	nop
 800ffda:	3718      	adds	r7, #24
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}
 800ffe0:	20001c50 	.word	0x20001c50

0800ffe4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b086      	sub	sp, #24
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	68db      	ldr	r3, [r3, #12]
 800fff0:	68db      	ldr	r3, [r3, #12]
 800fff2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d109      	bne.n	801000e <xTaskRemoveFromEventList+0x2a>
 800fffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffe:	f383 8811 	msr	BASEPRI, r3
 8010002:	f3bf 8f6f 	isb	sy
 8010006:	f3bf 8f4f 	dsb	sy
 801000a:	60fb      	str	r3, [r7, #12]
 801000c:	e7fe      	b.n	801000c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	3318      	adds	r3, #24
 8010012:	4618      	mov	r0, r3
 8010014:	f7fe fa90 	bl	800e538 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010018:	4b1e      	ldr	r3, [pc, #120]	; (8010094 <xTaskRemoveFromEventList+0xb0>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d11f      	bne.n	8010060 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	3304      	adds	r3, #4
 8010024:	4618      	mov	r0, r3
 8010026:	f7fe fa87 	bl	800e538 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801002e:	4b1a      	ldr	r3, [pc, #104]	; (8010098 <xTaskRemoveFromEventList+0xb4>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	429a      	cmp	r2, r3
 8010034:	d903      	bls.n	801003e <xTaskRemoveFromEventList+0x5a>
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003a:	4a17      	ldr	r2, [pc, #92]	; (8010098 <xTaskRemoveFromEventList+0xb4>)
 801003c:	6013      	str	r3, [r2, #0]
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010042:	4613      	mov	r3, r2
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	4413      	add	r3, r2
 8010048:	009b      	lsls	r3, r3, #2
 801004a:	4a14      	ldr	r2, [pc, #80]	; (801009c <xTaskRemoveFromEventList+0xb8>)
 801004c:	441a      	add	r2, r3
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	3304      	adds	r3, #4
 8010052:	4619      	mov	r1, r3
 8010054:	4610      	mov	r0, r2
 8010056:	f7fe fa12 	bl	800e47e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 801005a:	f000 f981 	bl	8010360 <prvResetNextTaskUnblockTime>
 801005e:	e005      	b.n	801006c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	3318      	adds	r3, #24
 8010064:	4619      	mov	r1, r3
 8010066:	480e      	ldr	r0, [pc, #56]	; (80100a0 <xTaskRemoveFromEventList+0xbc>)
 8010068:	f7fe fa09 	bl	800e47e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010070:	4b0c      	ldr	r3, [pc, #48]	; (80100a4 <xTaskRemoveFromEventList+0xc0>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010076:	429a      	cmp	r2, r3
 8010078:	d905      	bls.n	8010086 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801007a:	2301      	movs	r3, #1
 801007c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801007e:	4b0a      	ldr	r3, [pc, #40]	; (80100a8 <xTaskRemoveFromEventList+0xc4>)
 8010080:	2201      	movs	r2, #1
 8010082:	601a      	str	r2, [r3, #0]
 8010084:	e001      	b.n	801008a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010086:	2300      	movs	r3, #0
 8010088:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801008a:	697b      	ldr	r3, [r7, #20]
}
 801008c:	4618      	mov	r0, r3
 801008e:	3718      	adds	r7, #24
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}
 8010094:	2000214c 	.word	0x2000214c
 8010098:	2000212c 	.word	0x2000212c
 801009c:	20001c54 	.word	0x20001c54
 80100a0:	200020e4 	.word	0x200020e4
 80100a4:	20001c50 	.word	0x20001c50
 80100a8:	20002138 	.word	0x20002138

080100ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80100b4:	4b06      	ldr	r3, [pc, #24]	; (80100d0 <vTaskInternalSetTimeOutState+0x24>)
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80100bc:	4b05      	ldr	r3, [pc, #20]	; (80100d4 <vTaskInternalSetTimeOutState+0x28>)
 80100be:	681a      	ldr	r2, [r3, #0]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	605a      	str	r2, [r3, #4]
}
 80100c4:	bf00      	nop
 80100c6:	370c      	adds	r7, #12
 80100c8:	46bd      	mov	sp, r7
 80100ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ce:	4770      	bx	lr
 80100d0:	2000213c 	.word	0x2000213c
 80100d4:	20002128 	.word	0x20002128

080100d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b088      	sub	sp, #32
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d109      	bne.n	80100fc <xTaskCheckForTimeOut+0x24>
 80100e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ec:	f383 8811 	msr	BASEPRI, r3
 80100f0:	f3bf 8f6f 	isb	sy
 80100f4:	f3bf 8f4f 	dsb	sy
 80100f8:	613b      	str	r3, [r7, #16]
 80100fa:	e7fe      	b.n	80100fa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d109      	bne.n	8010116 <xTaskCheckForTimeOut+0x3e>
 8010102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010106:	f383 8811 	msr	BASEPRI, r3
 801010a:	f3bf 8f6f 	isb	sy
 801010e:	f3bf 8f4f 	dsb	sy
 8010112:	60fb      	str	r3, [r7, #12]
 8010114:	e7fe      	b.n	8010114 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8010116:	f001 f981 	bl	801141c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801011a:	4b1d      	ldr	r3, [pc, #116]	; (8010190 <xTaskCheckForTimeOut+0xb8>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	69ba      	ldr	r2, [r7, #24]
 8010126:	1ad3      	subs	r3, r2, r3
 8010128:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010132:	d102      	bne.n	801013a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010134:	2300      	movs	r3, #0
 8010136:	61fb      	str	r3, [r7, #28]
 8010138:	e023      	b.n	8010182 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681a      	ldr	r2, [r3, #0]
 801013e:	4b15      	ldr	r3, [pc, #84]	; (8010194 <xTaskCheckForTimeOut+0xbc>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	429a      	cmp	r2, r3
 8010144:	d007      	beq.n	8010156 <xTaskCheckForTimeOut+0x7e>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	69ba      	ldr	r2, [r7, #24]
 801014c:	429a      	cmp	r2, r3
 801014e:	d302      	bcc.n	8010156 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010150:	2301      	movs	r3, #1
 8010152:	61fb      	str	r3, [r7, #28]
 8010154:	e015      	b.n	8010182 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	697a      	ldr	r2, [r7, #20]
 801015c:	429a      	cmp	r2, r3
 801015e:	d20b      	bcs.n	8010178 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	681a      	ldr	r2, [r3, #0]
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	1ad2      	subs	r2, r2, r3
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f7ff ff9d 	bl	80100ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010172:	2300      	movs	r3, #0
 8010174:	61fb      	str	r3, [r7, #28]
 8010176:	e004      	b.n	8010182 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	2200      	movs	r2, #0
 801017c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801017e:	2301      	movs	r3, #1
 8010180:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010182:	f001 f979 	bl	8011478 <vPortExitCritical>

	return xReturn;
 8010186:	69fb      	ldr	r3, [r7, #28]
}
 8010188:	4618      	mov	r0, r3
 801018a:	3720      	adds	r7, #32
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}
 8010190:	20002128 	.word	0x20002128
 8010194:	2000213c 	.word	0x2000213c

08010198 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010198:	b480      	push	{r7}
 801019a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801019c:	4b03      	ldr	r3, [pc, #12]	; (80101ac <vTaskMissedYield+0x14>)
 801019e:	2201      	movs	r2, #1
 80101a0:	601a      	str	r2, [r3, #0]
}
 80101a2:	bf00      	nop
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr
 80101ac:	20002138 	.word	0x20002138

080101b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80101b8:	f000 f878 	bl	80102ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80101bc:	4b17      	ldr	r3, [pc, #92]	; (801021c <prvIdleTask+0x6c>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d907      	bls.n	80101d4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80101c4:	4b16      	ldr	r3, [pc, #88]	; (8010220 <prvIdleTask+0x70>)
 80101c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101ca:	601a      	str	r2, [r3, #0]
 80101cc:	f3bf 8f4f 	dsb	sy
 80101d0:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80101d4:	f7ff fcc0 	bl	800fb58 <prvGetExpectedIdleTime>
 80101d8:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d9eb      	bls.n	80101b8 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80101e0:	f7ff fcac 	bl	800fb3c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80101e4:	4b0f      	ldr	r3, [pc, #60]	; (8010224 <prvIdleTask+0x74>)
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	4b0f      	ldr	r3, [pc, #60]	; (8010228 <prvIdleTask+0x78>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d209      	bcs.n	8010204 <prvIdleTask+0x54>
 80101f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f4:	f383 8811 	msr	BASEPRI, r3
 80101f8:	f3bf 8f6f 	isb	sy
 80101fc:	f3bf 8f4f 	dsb	sy
 8010200:	60bb      	str	r3, [r7, #8]
 8010202:	e7fe      	b.n	8010202 <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8010204:	f7ff fca8 	bl	800fb58 <prvGetExpectedIdleTime>
 8010208:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2b01      	cmp	r3, #1
 801020e:	d902      	bls.n	8010216 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8010210:	68f8      	ldr	r0, [r7, #12]
 8010212:	f7f0 ff98 	bl	8001146 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8010216:	f7ff fcd7 	bl	800fbc8 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 801021a:	e7cd      	b.n	80101b8 <prvIdleTask+0x8>
 801021c:	20001c54 	.word	0x20001c54
 8010220:	e000ed04 	.word	0xe000ed04
 8010224:	20002144 	.word	0x20002144
 8010228:	20002128 	.word	0x20002128

0801022c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b082      	sub	sp, #8
 8010230:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010232:	2300      	movs	r3, #0
 8010234:	607b      	str	r3, [r7, #4]
 8010236:	e00c      	b.n	8010252 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	4613      	mov	r3, r2
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	4413      	add	r3, r2
 8010240:	009b      	lsls	r3, r3, #2
 8010242:	4a12      	ldr	r2, [pc, #72]	; (801028c <prvInitialiseTaskLists+0x60>)
 8010244:	4413      	add	r3, r2
 8010246:	4618      	mov	r0, r3
 8010248:	f7fe f8ec 	bl	800e424 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	3301      	adds	r3, #1
 8010250:	607b      	str	r3, [r7, #4]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2b37      	cmp	r3, #55	; 0x37
 8010256:	d9ef      	bls.n	8010238 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010258:	480d      	ldr	r0, [pc, #52]	; (8010290 <prvInitialiseTaskLists+0x64>)
 801025a:	f7fe f8e3 	bl	800e424 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801025e:	480d      	ldr	r0, [pc, #52]	; (8010294 <prvInitialiseTaskLists+0x68>)
 8010260:	f7fe f8e0 	bl	800e424 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010264:	480c      	ldr	r0, [pc, #48]	; (8010298 <prvInitialiseTaskLists+0x6c>)
 8010266:	f7fe f8dd 	bl	800e424 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801026a:	480c      	ldr	r0, [pc, #48]	; (801029c <prvInitialiseTaskLists+0x70>)
 801026c:	f7fe f8da 	bl	800e424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010270:	480b      	ldr	r0, [pc, #44]	; (80102a0 <prvInitialiseTaskLists+0x74>)
 8010272:	f7fe f8d7 	bl	800e424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010276:	4b0b      	ldr	r3, [pc, #44]	; (80102a4 <prvInitialiseTaskLists+0x78>)
 8010278:	4a05      	ldr	r2, [pc, #20]	; (8010290 <prvInitialiseTaskLists+0x64>)
 801027a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801027c:	4b0a      	ldr	r3, [pc, #40]	; (80102a8 <prvInitialiseTaskLists+0x7c>)
 801027e:	4a05      	ldr	r2, [pc, #20]	; (8010294 <prvInitialiseTaskLists+0x68>)
 8010280:	601a      	str	r2, [r3, #0]
}
 8010282:	bf00      	nop
 8010284:	3708      	adds	r7, #8
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
 801028a:	bf00      	nop
 801028c:	20001c54 	.word	0x20001c54
 8010290:	200020b4 	.word	0x200020b4
 8010294:	200020c8 	.word	0x200020c8
 8010298:	200020e4 	.word	0x200020e4
 801029c:	200020f8 	.word	0x200020f8
 80102a0:	20002110 	.word	0x20002110
 80102a4:	200020dc 	.word	0x200020dc
 80102a8:	200020e0 	.word	0x200020e0

080102ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80102b2:	e019      	b.n	80102e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80102b4:	f001 f8b2 	bl	801141c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102b8:	4b0f      	ldr	r3, [pc, #60]	; (80102f8 <prvCheckTasksWaitingTermination+0x4c>)
 80102ba:	68db      	ldr	r3, [r3, #12]
 80102bc:	68db      	ldr	r3, [r3, #12]
 80102be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	3304      	adds	r3, #4
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7fe f937 	bl	800e538 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80102ca:	4b0c      	ldr	r3, [pc, #48]	; (80102fc <prvCheckTasksWaitingTermination+0x50>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	3b01      	subs	r3, #1
 80102d0:	4a0a      	ldr	r2, [pc, #40]	; (80102fc <prvCheckTasksWaitingTermination+0x50>)
 80102d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80102d4:	4b0a      	ldr	r3, [pc, #40]	; (8010300 <prvCheckTasksWaitingTermination+0x54>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	3b01      	subs	r3, #1
 80102da:	4a09      	ldr	r2, [pc, #36]	; (8010300 <prvCheckTasksWaitingTermination+0x54>)
 80102dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80102de:	f001 f8cb 	bl	8011478 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f000 f80e 	bl	8010304 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80102e8:	4b05      	ldr	r3, [pc, #20]	; (8010300 <prvCheckTasksWaitingTermination+0x54>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d1e1      	bne.n	80102b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80102f0:	bf00      	nop
 80102f2:	3708      	adds	r7, #8
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	200020f8 	.word	0x200020f8
 80102fc:	20002124 	.word	0x20002124
 8010300:	2000210c 	.word	0x2000210c

08010304 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010312:	2b00      	cmp	r3, #0
 8010314:	d108      	bne.n	8010328 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801031a:	4618      	mov	r0, r3
 801031c:	f001 fa5a 	bl	80117d4 <vPortFree>
				vPortFree( pxTCB );
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f001 fa57 	bl	80117d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010326:	e017      	b.n	8010358 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801032e:	2b01      	cmp	r3, #1
 8010330:	d103      	bne.n	801033a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f001 fa4e 	bl	80117d4 <vPortFree>
	}
 8010338:	e00e      	b.n	8010358 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010340:	2b02      	cmp	r3, #2
 8010342:	d009      	beq.n	8010358 <prvDeleteTCB+0x54>
 8010344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010348:	f383 8811 	msr	BASEPRI, r3
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	60fb      	str	r3, [r7, #12]
 8010356:	e7fe      	b.n	8010356 <prvDeleteTCB+0x52>
	}
 8010358:	bf00      	nop
 801035a:	3710      	adds	r7, #16
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010360:	b480      	push	{r7}
 8010362:	b083      	sub	sp, #12
 8010364:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010366:	4b0c      	ldr	r3, [pc, #48]	; (8010398 <prvResetNextTaskUnblockTime+0x38>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d104      	bne.n	801037a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010370:	4b0a      	ldr	r3, [pc, #40]	; (801039c <prvResetNextTaskUnblockTime+0x3c>)
 8010372:	f04f 32ff 	mov.w	r2, #4294967295
 8010376:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010378:	e008      	b.n	801038c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801037a:	4b07      	ldr	r3, [pc, #28]	; (8010398 <prvResetNextTaskUnblockTime+0x38>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	68db      	ldr	r3, [r3, #12]
 8010382:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	4a04      	ldr	r2, [pc, #16]	; (801039c <prvResetNextTaskUnblockTime+0x3c>)
 801038a:	6013      	str	r3, [r2, #0]
}
 801038c:	bf00      	nop
 801038e:	370c      	adds	r7, #12
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr
 8010398:	200020dc 	.word	0x200020dc
 801039c:	20002144 	.word	0x20002144

080103a0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80103a6:	4b05      	ldr	r3, [pc, #20]	; (80103bc <xTaskGetCurrentTaskHandle+0x1c>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80103ac:	687b      	ldr	r3, [r7, #4]
	}
 80103ae:	4618      	mov	r0, r3
 80103b0:	370c      	adds	r7, #12
 80103b2:	46bd      	mov	sp, r7
 80103b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop
 80103bc:	20001c50 	.word	0x20001c50

080103c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80103c0:	b480      	push	{r7}
 80103c2:	b083      	sub	sp, #12
 80103c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80103c6:	4b0b      	ldr	r3, [pc, #44]	; (80103f4 <xTaskGetSchedulerState+0x34>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d102      	bne.n	80103d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80103ce:	2301      	movs	r3, #1
 80103d0:	607b      	str	r3, [r7, #4]
 80103d2:	e008      	b.n	80103e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103d4:	4b08      	ldr	r3, [pc, #32]	; (80103f8 <xTaskGetSchedulerState+0x38>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d102      	bne.n	80103e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80103dc:	2302      	movs	r3, #2
 80103de:	607b      	str	r3, [r7, #4]
 80103e0:	e001      	b.n	80103e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80103e2:	2300      	movs	r3, #0
 80103e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80103e6:	687b      	ldr	r3, [r7, #4]
	}
 80103e8:	4618      	mov	r0, r3
 80103ea:	370c      	adds	r7, #12
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr
 80103f4:	20002130 	.word	0x20002130
 80103f8:	2000214c 	.word	0x2000214c

080103fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b084      	sub	sp, #16
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010408:	2300      	movs	r3, #0
 801040a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d051      	beq.n	80104b6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010416:	4b2a      	ldr	r3, [pc, #168]	; (80104c0 <xTaskPriorityInherit+0xc4>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801041c:	429a      	cmp	r2, r3
 801041e:	d241      	bcs.n	80104a4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	699b      	ldr	r3, [r3, #24]
 8010424:	2b00      	cmp	r3, #0
 8010426:	db06      	blt.n	8010436 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010428:	4b25      	ldr	r3, [pc, #148]	; (80104c0 <xTaskPriorityInherit+0xc4>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801042e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	6959      	ldr	r1, [r3, #20]
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801043e:	4613      	mov	r3, r2
 8010440:	009b      	lsls	r3, r3, #2
 8010442:	4413      	add	r3, r2
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	4a1f      	ldr	r2, [pc, #124]	; (80104c4 <xTaskPriorityInherit+0xc8>)
 8010448:	4413      	add	r3, r2
 801044a:	4299      	cmp	r1, r3
 801044c:	d122      	bne.n	8010494 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	3304      	adds	r3, #4
 8010452:	4618      	mov	r0, r3
 8010454:	f7fe f870 	bl	800e538 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010458:	4b19      	ldr	r3, [pc, #100]	; (80104c0 <xTaskPriorityInherit+0xc4>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010466:	4b18      	ldr	r3, [pc, #96]	; (80104c8 <xTaskPriorityInherit+0xcc>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	429a      	cmp	r2, r3
 801046c:	d903      	bls.n	8010476 <xTaskPriorityInherit+0x7a>
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010472:	4a15      	ldr	r2, [pc, #84]	; (80104c8 <xTaskPriorityInherit+0xcc>)
 8010474:	6013      	str	r3, [r2, #0]
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801047a:	4613      	mov	r3, r2
 801047c:	009b      	lsls	r3, r3, #2
 801047e:	4413      	add	r3, r2
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	4a10      	ldr	r2, [pc, #64]	; (80104c4 <xTaskPriorityInherit+0xc8>)
 8010484:	441a      	add	r2, r3
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	3304      	adds	r3, #4
 801048a:	4619      	mov	r1, r3
 801048c:	4610      	mov	r0, r2
 801048e:	f7fd fff6 	bl	800e47e <vListInsertEnd>
 8010492:	e004      	b.n	801049e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010494:	4b0a      	ldr	r3, [pc, #40]	; (80104c0 <xTaskPriorityInherit+0xc4>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801049e:	2301      	movs	r3, #1
 80104a0:	60fb      	str	r3, [r7, #12]
 80104a2:	e008      	b.n	80104b6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104a8:	4b05      	ldr	r3, [pc, #20]	; (80104c0 <xTaskPriorityInherit+0xc4>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d201      	bcs.n	80104b6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80104b2:	2301      	movs	r3, #1
 80104b4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80104b6:	68fb      	ldr	r3, [r7, #12]
	}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3710      	adds	r7, #16
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	20001c50 	.word	0x20001c50
 80104c4:	20001c54 	.word	0x20001c54
 80104c8:	2000212c 	.word	0x2000212c

080104cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b086      	sub	sp, #24
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80104d8:	2300      	movs	r3, #0
 80104da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d054      	beq.n	801058c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80104e2:	4b2d      	ldr	r3, [pc, #180]	; (8010598 <xTaskPriorityDisinherit+0xcc>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	693a      	ldr	r2, [r7, #16]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d009      	beq.n	8010500 <xTaskPriorityDisinherit+0x34>
 80104ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f0:	f383 8811 	msr	BASEPRI, r3
 80104f4:	f3bf 8f6f 	isb	sy
 80104f8:	f3bf 8f4f 	dsb	sy
 80104fc:	60fb      	str	r3, [r7, #12]
 80104fe:	e7fe      	b.n	80104fe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010504:	2b00      	cmp	r3, #0
 8010506:	d109      	bne.n	801051c <xTaskPriorityDisinherit+0x50>
 8010508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	60bb      	str	r3, [r7, #8]
 801051a:	e7fe      	b.n	801051a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010520:	1e5a      	subs	r2, r3, #1
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801052e:	429a      	cmp	r2, r3
 8010530:	d02c      	beq.n	801058c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010536:	2b00      	cmp	r3, #0
 8010538:	d128      	bne.n	801058c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	3304      	adds	r3, #4
 801053e:	4618      	mov	r0, r3
 8010540:	f7fd fffa 	bl	800e538 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801054c:	693b      	ldr	r3, [r7, #16]
 801054e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010550:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801055c:	4b0f      	ldr	r3, [pc, #60]	; (801059c <xTaskPriorityDisinherit+0xd0>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	429a      	cmp	r2, r3
 8010562:	d903      	bls.n	801056c <xTaskPriorityDisinherit+0xa0>
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010568:	4a0c      	ldr	r2, [pc, #48]	; (801059c <xTaskPriorityDisinherit+0xd0>)
 801056a:	6013      	str	r3, [r2, #0]
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010570:	4613      	mov	r3, r2
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	4413      	add	r3, r2
 8010576:	009b      	lsls	r3, r3, #2
 8010578:	4a09      	ldr	r2, [pc, #36]	; (80105a0 <xTaskPriorityDisinherit+0xd4>)
 801057a:	441a      	add	r2, r3
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	3304      	adds	r3, #4
 8010580:	4619      	mov	r1, r3
 8010582:	4610      	mov	r0, r2
 8010584:	f7fd ff7b 	bl	800e47e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010588:	2301      	movs	r3, #1
 801058a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801058c:	697b      	ldr	r3, [r7, #20]
	}
 801058e:	4618      	mov	r0, r3
 8010590:	3718      	adds	r7, #24
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	20001c50 	.word	0x20001c50
 801059c:	2000212c 	.word	0x2000212c
 80105a0:	20001c54 	.word	0x20001c54

080105a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b088      	sub	sp, #32
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80105b2:	2301      	movs	r3, #1
 80105b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d068      	beq.n	801068e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80105bc:	69bb      	ldr	r3, [r7, #24]
 80105be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d109      	bne.n	80105d8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80105c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c8:	f383 8811 	msr	BASEPRI, r3
 80105cc:	f3bf 8f6f 	isb	sy
 80105d0:	f3bf 8f4f 	dsb	sy
 80105d4:	60fb      	str	r3, [r7, #12]
 80105d6:	e7fe      	b.n	80105d6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80105d8:	69bb      	ldr	r3, [r7, #24]
 80105da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105dc:	683a      	ldr	r2, [r7, #0]
 80105de:	429a      	cmp	r2, r3
 80105e0:	d902      	bls.n	80105e8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	61fb      	str	r3, [r7, #28]
 80105e6:	e002      	b.n	80105ee <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80105e8:	69bb      	ldr	r3, [r7, #24]
 80105ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80105ee:	69bb      	ldr	r3, [r7, #24]
 80105f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105f2:	69fa      	ldr	r2, [r7, #28]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d04a      	beq.n	801068e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80105f8:	69bb      	ldr	r3, [r7, #24]
 80105fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105fc:	697a      	ldr	r2, [r7, #20]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d145      	bne.n	801068e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010602:	4b25      	ldr	r3, [pc, #148]	; (8010698 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	69ba      	ldr	r2, [r7, #24]
 8010608:	429a      	cmp	r2, r3
 801060a:	d109      	bne.n	8010620 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 801060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010610:	f383 8811 	msr	BASEPRI, r3
 8010614:	f3bf 8f6f 	isb	sy
 8010618:	f3bf 8f4f 	dsb	sy
 801061c:	60bb      	str	r3, [r7, #8]
 801061e:	e7fe      	b.n	801061e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010624:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010626:	69bb      	ldr	r3, [r7, #24]
 8010628:	69fa      	ldr	r2, [r7, #28]
 801062a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801062c:	69bb      	ldr	r3, [r7, #24]
 801062e:	699b      	ldr	r3, [r3, #24]
 8010630:	2b00      	cmp	r3, #0
 8010632:	db04      	blt.n	801063e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801063e:	69bb      	ldr	r3, [r7, #24]
 8010640:	6959      	ldr	r1, [r3, #20]
 8010642:	693a      	ldr	r2, [r7, #16]
 8010644:	4613      	mov	r3, r2
 8010646:	009b      	lsls	r3, r3, #2
 8010648:	4413      	add	r3, r2
 801064a:	009b      	lsls	r3, r3, #2
 801064c:	4a13      	ldr	r2, [pc, #76]	; (801069c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801064e:	4413      	add	r3, r2
 8010650:	4299      	cmp	r1, r3
 8010652:	d11c      	bne.n	801068e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010654:	69bb      	ldr	r3, [r7, #24]
 8010656:	3304      	adds	r3, #4
 8010658:	4618      	mov	r0, r3
 801065a:	f7fd ff6d 	bl	800e538 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801065e:	69bb      	ldr	r3, [r7, #24]
 8010660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010662:	4b0f      	ldr	r3, [pc, #60]	; (80106a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	429a      	cmp	r2, r3
 8010668:	d903      	bls.n	8010672 <vTaskPriorityDisinheritAfterTimeout+0xce>
 801066a:	69bb      	ldr	r3, [r7, #24]
 801066c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801066e:	4a0c      	ldr	r2, [pc, #48]	; (80106a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010670:	6013      	str	r3, [r2, #0]
 8010672:	69bb      	ldr	r3, [r7, #24]
 8010674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010676:	4613      	mov	r3, r2
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	4413      	add	r3, r2
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	4a07      	ldr	r2, [pc, #28]	; (801069c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010680:	441a      	add	r2, r3
 8010682:	69bb      	ldr	r3, [r7, #24]
 8010684:	3304      	adds	r3, #4
 8010686:	4619      	mov	r1, r3
 8010688:	4610      	mov	r0, r2
 801068a:	f7fd fef8 	bl	800e47e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801068e:	bf00      	nop
 8010690:	3720      	adds	r7, #32
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	20001c50 	.word	0x20001c50
 801069c:	20001c54 	.word	0x20001c54
 80106a0:	2000212c 	.word	0x2000212c

080106a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80106a4:	b480      	push	{r7}
 80106a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80106a8:	4b07      	ldr	r3, [pc, #28]	; (80106c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d004      	beq.n	80106ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80106b0:	4b05      	ldr	r3, [pc, #20]	; (80106c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106b6:	3201      	adds	r2, #1
 80106b8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80106ba:	4b03      	ldr	r3, [pc, #12]	; (80106c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80106bc:	681b      	ldr	r3, [r3, #0]
	}
 80106be:	4618      	mov	r0, r3
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr
 80106c8:	20001c50 	.word	0x20001c50

080106cc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b086      	sub	sp, #24
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	60f8      	str	r0, [r7, #12]
 80106d4:	60b9      	str	r1, [r7, #8]
 80106d6:	607a      	str	r2, [r7, #4]
 80106d8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80106da:	f000 fe9f 	bl	801141c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80106de:	4b26      	ldr	r3, [pc, #152]	; (8010778 <xTaskNotifyWait+0xac>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80106e6:	b2db      	uxtb	r3, r3
 80106e8:	2b02      	cmp	r3, #2
 80106ea:	d01a      	beq.n	8010722 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80106ec:	4b22      	ldr	r3, [pc, #136]	; (8010778 <xTaskNotifyWait+0xac>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	43d2      	mvns	r2, r2
 80106f6:	400a      	ands	r2, r1
 80106f8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80106fa:	4b1f      	ldr	r3, [pc, #124]	; (8010778 <xTaskNotifyWait+0xac>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	2201      	movs	r2, #1
 8010700:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00b      	beq.n	8010722 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801070a:	2101      	movs	r1, #1
 801070c:	6838      	ldr	r0, [r7, #0]
 801070e:	f000 f9c5 	bl	8010a9c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010712:	4b1a      	ldr	r3, [pc, #104]	; (801077c <xTaskNotifyWait+0xb0>)
 8010714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010718:	601a      	str	r2, [r3, #0]
 801071a:	f3bf 8f4f 	dsb	sy
 801071e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010722:	f000 fea9 	bl	8011478 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010726:	f000 fe79 	bl	801141c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d004      	beq.n	801073a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010730:	4b11      	ldr	r3, [pc, #68]	; (8010778 <xTaskNotifyWait+0xac>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801073a:	4b0f      	ldr	r3, [pc, #60]	; (8010778 <xTaskNotifyWait+0xac>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010742:	b2db      	uxtb	r3, r3
 8010744:	2b02      	cmp	r3, #2
 8010746:	d002      	beq.n	801074e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010748:	2300      	movs	r3, #0
 801074a:	617b      	str	r3, [r7, #20]
 801074c:	e008      	b.n	8010760 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801074e:	4b0a      	ldr	r3, [pc, #40]	; (8010778 <xTaskNotifyWait+0xac>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010754:	68ba      	ldr	r2, [r7, #8]
 8010756:	43d2      	mvns	r2, r2
 8010758:	400a      	ands	r2, r1
 801075a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 801075c:	2301      	movs	r3, #1
 801075e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010760:	4b05      	ldr	r3, [pc, #20]	; (8010778 <xTaskNotifyWait+0xac>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	2200      	movs	r2, #0
 8010766:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 801076a:	f000 fe85 	bl	8011478 <vPortExitCritical>

		return xReturn;
 801076e:	697b      	ldr	r3, [r7, #20]
	}
 8010770:	4618      	mov	r0, r3
 8010772:	3718      	adds	r7, #24
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}
 8010778:	20001c50 	.word	0x20001c50
 801077c:	e000ed04 	.word	0xe000ed04

08010780 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010780:	b580      	push	{r7, lr}
 8010782:	b08a      	sub	sp, #40	; 0x28
 8010784:	af00      	add	r7, sp, #0
 8010786:	60f8      	str	r0, [r7, #12]
 8010788:	60b9      	str	r1, [r7, #8]
 801078a:	603b      	str	r3, [r7, #0]
 801078c:	4613      	mov	r3, r2
 801078e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010790:	2301      	movs	r3, #1
 8010792:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d109      	bne.n	80107ae <xTaskGenericNotify+0x2e>
 801079a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801079e:	f383 8811 	msr	BASEPRI, r3
 80107a2:	f3bf 8f6f 	isb	sy
 80107a6:	f3bf 8f4f 	dsb	sy
 80107aa:	61bb      	str	r3, [r7, #24]
 80107ac:	e7fe      	b.n	80107ac <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80107b2:	f000 fe33 	bl	801141c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d003      	beq.n	80107c4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80107bc:	6a3b      	ldr	r3, [r7, #32]
 80107be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80107c4:	6a3b      	ldr	r3, [r7, #32]
 80107c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80107ca:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80107cc:	6a3b      	ldr	r3, [r7, #32]
 80107ce:	2202      	movs	r2, #2
 80107d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80107d4:	79fb      	ldrb	r3, [r7, #7]
 80107d6:	2b04      	cmp	r3, #4
 80107d8:	d827      	bhi.n	801082a <xTaskGenericNotify+0xaa>
 80107da:	a201      	add	r2, pc, #4	; (adr r2, 80107e0 <xTaskGenericNotify+0x60>)
 80107dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107e0:	08010849 	.word	0x08010849
 80107e4:	080107f5 	.word	0x080107f5
 80107e8:	08010803 	.word	0x08010803
 80107ec:	0801080f 	.word	0x0801080f
 80107f0:	08010817 	.word	0x08010817
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80107f4:	6a3b      	ldr	r3, [r7, #32]
 80107f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	431a      	orrs	r2, r3
 80107fc:	6a3b      	ldr	r3, [r7, #32]
 80107fe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010800:	e025      	b.n	801084e <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010802:	6a3b      	ldr	r3, [r7, #32]
 8010804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010806:	1c5a      	adds	r2, r3, #1
 8010808:	6a3b      	ldr	r3, [r7, #32]
 801080a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801080c:	e01f      	b.n	801084e <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801080e:	6a3b      	ldr	r3, [r7, #32]
 8010810:	68ba      	ldr	r2, [r7, #8]
 8010812:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010814:	e01b      	b.n	801084e <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010816:	7ffb      	ldrb	r3, [r7, #31]
 8010818:	2b02      	cmp	r3, #2
 801081a:	d003      	beq.n	8010824 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801081c:	6a3b      	ldr	r3, [r7, #32]
 801081e:	68ba      	ldr	r2, [r7, #8]
 8010820:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010822:	e014      	b.n	801084e <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8010824:	2300      	movs	r3, #0
 8010826:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8010828:	e011      	b.n	801084e <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801082a:	6a3b      	ldr	r3, [r7, #32]
 801082c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801082e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010832:	d00b      	beq.n	801084c <xTaskGenericNotify+0xcc>
 8010834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010838:	f383 8811 	msr	BASEPRI, r3
 801083c:	f3bf 8f6f 	isb	sy
 8010840:	f3bf 8f4f 	dsb	sy
 8010844:	617b      	str	r3, [r7, #20]
 8010846:	e7fe      	b.n	8010846 <xTaskGenericNotify+0xc6>
					break;
 8010848:	bf00      	nop
 801084a:	e000      	b.n	801084e <xTaskGenericNotify+0xce>

					break;
 801084c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801084e:	7ffb      	ldrb	r3, [r7, #31]
 8010850:	2b01      	cmp	r3, #1
 8010852:	d13b      	bne.n	80108cc <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010854:	6a3b      	ldr	r3, [r7, #32]
 8010856:	3304      	adds	r3, #4
 8010858:	4618      	mov	r0, r3
 801085a:	f7fd fe6d 	bl	800e538 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801085e:	6a3b      	ldr	r3, [r7, #32]
 8010860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010862:	4b1e      	ldr	r3, [pc, #120]	; (80108dc <xTaskGenericNotify+0x15c>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	429a      	cmp	r2, r3
 8010868:	d903      	bls.n	8010872 <xTaskGenericNotify+0xf2>
 801086a:	6a3b      	ldr	r3, [r7, #32]
 801086c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801086e:	4a1b      	ldr	r2, [pc, #108]	; (80108dc <xTaskGenericNotify+0x15c>)
 8010870:	6013      	str	r3, [r2, #0]
 8010872:	6a3b      	ldr	r3, [r7, #32]
 8010874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010876:	4613      	mov	r3, r2
 8010878:	009b      	lsls	r3, r3, #2
 801087a:	4413      	add	r3, r2
 801087c:	009b      	lsls	r3, r3, #2
 801087e:	4a18      	ldr	r2, [pc, #96]	; (80108e0 <xTaskGenericNotify+0x160>)
 8010880:	441a      	add	r2, r3
 8010882:	6a3b      	ldr	r3, [r7, #32]
 8010884:	3304      	adds	r3, #4
 8010886:	4619      	mov	r1, r3
 8010888:	4610      	mov	r0, r2
 801088a:	f7fd fdf8 	bl	800e47e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801088e:	6a3b      	ldr	r3, [r7, #32]
 8010890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010892:	2b00      	cmp	r3, #0
 8010894:	d009      	beq.n	80108aa <xTaskGenericNotify+0x12a>
 8010896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801089a:	f383 8811 	msr	BASEPRI, r3
 801089e:	f3bf 8f6f 	isb	sy
 80108a2:	f3bf 8f4f 	dsb	sy
 80108a6:	613b      	str	r3, [r7, #16]
 80108a8:	e7fe      	b.n	80108a8 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 80108aa:	f7ff fd59 	bl	8010360 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80108ae:	6a3b      	ldr	r3, [r7, #32]
 80108b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108b2:	4b0c      	ldr	r3, [pc, #48]	; (80108e4 <xTaskGenericNotify+0x164>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d907      	bls.n	80108cc <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80108bc:	4b0a      	ldr	r3, [pc, #40]	; (80108e8 <xTaskGenericNotify+0x168>)
 80108be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108c2:	601a      	str	r2, [r3, #0]
 80108c4:	f3bf 8f4f 	dsb	sy
 80108c8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80108cc:	f000 fdd4 	bl	8011478 <vPortExitCritical>

		return xReturn;
 80108d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3728      	adds	r7, #40	; 0x28
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	2000212c 	.word	0x2000212c
 80108e0:	20001c54 	.word	0x20001c54
 80108e4:	20001c50 	.word	0x20001c50
 80108e8:	e000ed04 	.word	0xe000ed04

080108ec <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b08e      	sub	sp, #56	; 0x38
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	603b      	str	r3, [r7, #0]
 80108f8:	4613      	mov	r3, r2
 80108fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80108fc:	2301      	movs	r3, #1
 80108fe:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d109      	bne.n	801091a <xTaskGenericNotifyFromISR+0x2e>
 8010906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090a:	f383 8811 	msr	BASEPRI, r3
 801090e:	f3bf 8f6f 	isb	sy
 8010912:	f3bf 8f4f 	dsb	sy
 8010916:	627b      	str	r3, [r7, #36]	; 0x24
 8010918:	e7fe      	b.n	8010918 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801091a:	f000 fe5b 	bl	80115d4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8010922:	f3ef 8211 	mrs	r2, BASEPRI
 8010926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801092a:	f383 8811 	msr	BASEPRI, r3
 801092e:	f3bf 8f6f 	isb	sy
 8010932:	f3bf 8f4f 	dsb	sy
 8010936:	623a      	str	r2, [r7, #32]
 8010938:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801093a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801093c:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d003      	beq.n	801094c <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010946:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801094c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010958:	2202      	movs	r2, #2
 801095a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 801095e:	79fb      	ldrb	r3, [r7, #7]
 8010960:	2b04      	cmp	r3, #4
 8010962:	d829      	bhi.n	80109b8 <xTaskGenericNotifyFromISR+0xcc>
 8010964:	a201      	add	r2, pc, #4	; (adr r2, 801096c <xTaskGenericNotifyFromISR+0x80>)
 8010966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801096a:	bf00      	nop
 801096c:	080109d7 	.word	0x080109d7
 8010970:	08010981 	.word	0x08010981
 8010974:	0801098f 	.word	0x0801098f
 8010978:	0801099b 	.word	0x0801099b
 801097c:	080109a3 	.word	0x080109a3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010982:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	431a      	orrs	r2, r3
 8010988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801098c:	e026      	b.n	80109dc <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010992:	1c5a      	adds	r2, r3, #1
 8010994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010996:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8010998:	e020      	b.n	80109dc <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801099a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801099c:	68ba      	ldr	r2, [r7, #8]
 801099e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80109a0:	e01c      	b.n	80109dc <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80109a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80109a6:	2b02      	cmp	r3, #2
 80109a8:	d003      	beq.n	80109b2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80109aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ac:	68ba      	ldr	r2, [r7, #8]
 80109ae:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80109b0:	e014      	b.n	80109dc <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 80109b2:	2300      	movs	r3, #0
 80109b4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80109b6:	e011      	b.n	80109dc <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80109b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109c0:	d00b      	beq.n	80109da <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 80109c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c6:	f383 8811 	msr	BASEPRI, r3
 80109ca:	f3bf 8f6f 	isb	sy
 80109ce:	f3bf 8f4f 	dsb	sy
 80109d2:	61bb      	str	r3, [r7, #24]
 80109d4:	e7fe      	b.n	80109d4 <xTaskGenericNotifyFromISR+0xe8>
					break;
 80109d6:	bf00      	nop
 80109d8:	e000      	b.n	80109dc <xTaskGenericNotifyFromISR+0xf0>
					break;
 80109da:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80109dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d145      	bne.n	8010a70 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80109e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d009      	beq.n	8010a00 <xTaskGenericNotifyFromISR+0x114>
 80109ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109f0:	f383 8811 	msr	BASEPRI, r3
 80109f4:	f3bf 8f6f 	isb	sy
 80109f8:	f3bf 8f4f 	dsb	sy
 80109fc:	617b      	str	r3, [r7, #20]
 80109fe:	e7fe      	b.n	80109fe <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a00:	4b20      	ldr	r3, [pc, #128]	; (8010a84 <xTaskGenericNotifyFromISR+0x198>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d11d      	bne.n	8010a44 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0a:	3304      	adds	r3, #4
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fd fd93 	bl	800e538 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a16:	4b1c      	ldr	r3, [pc, #112]	; (8010a88 <xTaskGenericNotifyFromISR+0x19c>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	d903      	bls.n	8010a26 <xTaskGenericNotifyFromISR+0x13a>
 8010a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a22:	4a19      	ldr	r2, [pc, #100]	; (8010a88 <xTaskGenericNotifyFromISR+0x19c>)
 8010a24:	6013      	str	r3, [r2, #0]
 8010a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a2a:	4613      	mov	r3, r2
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	4413      	add	r3, r2
 8010a30:	009b      	lsls	r3, r3, #2
 8010a32:	4a16      	ldr	r2, [pc, #88]	; (8010a8c <xTaskGenericNotifyFromISR+0x1a0>)
 8010a34:	441a      	add	r2, r3
 8010a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a38:	3304      	adds	r3, #4
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	4610      	mov	r0, r2
 8010a3e:	f7fd fd1e 	bl	800e47e <vListInsertEnd>
 8010a42:	e005      	b.n	8010a50 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a46:	3318      	adds	r3, #24
 8010a48:	4619      	mov	r1, r3
 8010a4a:	4811      	ldr	r0, [pc, #68]	; (8010a90 <xTaskGenericNotifyFromISR+0x1a4>)
 8010a4c:	f7fd fd17 	bl	800e47e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a54:	4b0f      	ldr	r3, [pc, #60]	; (8010a94 <xTaskGenericNotifyFromISR+0x1a8>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d908      	bls.n	8010a70 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d002      	beq.n	8010a6a <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a66:	2201      	movs	r2, #1
 8010a68:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010a6a:	4b0b      	ldr	r3, [pc, #44]	; (8010a98 <xTaskGenericNotifyFromISR+0x1ac>)
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	601a      	str	r2, [r3, #0]
 8010a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a72:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3738      	adds	r7, #56	; 0x38
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	2000214c 	.word	0x2000214c
 8010a88:	2000212c 	.word	0x2000212c
 8010a8c:	20001c54 	.word	0x20001c54
 8010a90:	200020e4 	.word	0x200020e4
 8010a94:	20001c50 	.word	0x20001c50
 8010a98:	20002138 	.word	0x20002138

08010a9c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010aa6:	4b21      	ldr	r3, [pc, #132]	; (8010b2c <prvAddCurrentTaskToDelayedList+0x90>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010aac:	4b20      	ldr	r3, [pc, #128]	; (8010b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	3304      	adds	r3, #4
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7fd fd40 	bl	800e538 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010abe:	d10a      	bne.n	8010ad6 <prvAddCurrentTaskToDelayedList+0x3a>
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d007      	beq.n	8010ad6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ac6:	4b1a      	ldr	r3, [pc, #104]	; (8010b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	3304      	adds	r3, #4
 8010acc:	4619      	mov	r1, r3
 8010ace:	4819      	ldr	r0, [pc, #100]	; (8010b34 <prvAddCurrentTaskToDelayedList+0x98>)
 8010ad0:	f7fd fcd5 	bl	800e47e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010ad4:	e026      	b.n	8010b24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010ad6:	68fa      	ldr	r2, [r7, #12]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	4413      	add	r3, r2
 8010adc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010ade:	4b14      	ldr	r3, [pc, #80]	; (8010b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	68ba      	ldr	r2, [r7, #8]
 8010ae4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010ae6:	68ba      	ldr	r2, [r7, #8]
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d209      	bcs.n	8010b02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010aee:	4b12      	ldr	r3, [pc, #72]	; (8010b38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010af0:	681a      	ldr	r2, [r3, #0]
 8010af2:	4b0f      	ldr	r3, [pc, #60]	; (8010b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	3304      	adds	r3, #4
 8010af8:	4619      	mov	r1, r3
 8010afa:	4610      	mov	r0, r2
 8010afc:	f7fd fce3 	bl	800e4c6 <vListInsert>
}
 8010b00:	e010      	b.n	8010b24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b02:	4b0e      	ldr	r3, [pc, #56]	; (8010b3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	4b0a      	ldr	r3, [pc, #40]	; (8010b30 <prvAddCurrentTaskToDelayedList+0x94>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	3304      	adds	r3, #4
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	4610      	mov	r0, r2
 8010b10:	f7fd fcd9 	bl	800e4c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010b14:	4b0a      	ldr	r3, [pc, #40]	; (8010b40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	68ba      	ldr	r2, [r7, #8]
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d202      	bcs.n	8010b24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010b1e:	4a08      	ldr	r2, [pc, #32]	; (8010b40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	6013      	str	r3, [r2, #0]
}
 8010b24:	bf00      	nop
 8010b26:	3710      	adds	r7, #16
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}
 8010b2c:	20002128 	.word	0x20002128
 8010b30:	20001c50 	.word	0x20001c50
 8010b34:	20002110 	.word	0x20002110
 8010b38:	200020e0 	.word	0x200020e0
 8010b3c:	200020dc 	.word	0x200020dc
 8010b40:	20002144 	.word	0x20002144

08010b44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b08a      	sub	sp, #40	; 0x28
 8010b48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010b4e:	f000 faff 	bl	8011150 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010b52:	4b1c      	ldr	r3, [pc, #112]	; (8010bc4 <xTimerCreateTimerTask+0x80>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d021      	beq.n	8010b9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010b62:	1d3a      	adds	r2, r7, #4
 8010b64:	f107 0108 	add.w	r1, r7, #8
 8010b68:	f107 030c 	add.w	r3, r7, #12
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fd fc3f 	bl	800e3f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010b72:	6879      	ldr	r1, [r7, #4]
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	68fa      	ldr	r2, [r7, #12]
 8010b78:	9202      	str	r2, [sp, #8]
 8010b7a:	9301      	str	r3, [sp, #4]
 8010b7c:	2302      	movs	r3, #2
 8010b7e:	9300      	str	r3, [sp, #0]
 8010b80:	2300      	movs	r3, #0
 8010b82:	460a      	mov	r2, r1
 8010b84:	4910      	ldr	r1, [pc, #64]	; (8010bc8 <xTimerCreateTimerTask+0x84>)
 8010b86:	4811      	ldr	r0, [pc, #68]	; (8010bcc <xTimerCreateTimerTask+0x88>)
 8010b88:	f7fe fda2 	bl	800f6d0 <xTaskCreateStatic>
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	4b10      	ldr	r3, [pc, #64]	; (8010bd0 <xTimerCreateTimerTask+0x8c>)
 8010b90:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010b92:	4b0f      	ldr	r3, [pc, #60]	; (8010bd0 <xTimerCreateTimerTask+0x8c>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d001      	beq.n	8010b9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d109      	bne.n	8010bb8 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8010ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba8:	f383 8811 	msr	BASEPRI, r3
 8010bac:	f3bf 8f6f 	isb	sy
 8010bb0:	f3bf 8f4f 	dsb	sy
 8010bb4:	613b      	str	r3, [r7, #16]
 8010bb6:	e7fe      	b.n	8010bb6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8010bb8:	697b      	ldr	r3, [r7, #20]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3718      	adds	r7, #24
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	20002180 	.word	0x20002180
 8010bc8:	08013600 	.word	0x08013600
 8010bcc:	08010d05 	.word	0x08010d05
 8010bd0:	20002184 	.word	0x20002184

08010bd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b08a      	sub	sp, #40	; 0x28
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
 8010be0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010be2:	2300      	movs	r3, #0
 8010be4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d109      	bne.n	8010c00 <xTimerGenericCommand+0x2c>
 8010bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf0:	f383 8811 	msr	BASEPRI, r3
 8010bf4:	f3bf 8f6f 	isb	sy
 8010bf8:	f3bf 8f4f 	dsb	sy
 8010bfc:	623b      	str	r3, [r7, #32]
 8010bfe:	e7fe      	b.n	8010bfe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010c00:	4b19      	ldr	r3, [pc, #100]	; (8010c68 <xTimerGenericCommand+0x94>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d02a      	beq.n	8010c5e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	2b05      	cmp	r3, #5
 8010c18:	dc18      	bgt.n	8010c4c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010c1a:	f7ff fbd1 	bl	80103c0 <xTaskGetSchedulerState>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	2b02      	cmp	r3, #2
 8010c22:	d109      	bne.n	8010c38 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010c24:	4b10      	ldr	r3, [pc, #64]	; (8010c68 <xTimerGenericCommand+0x94>)
 8010c26:	6818      	ldr	r0, [r3, #0]
 8010c28:	f107 0110 	add.w	r1, r7, #16
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c30:	f7fd ff04 	bl	800ea3c <xQueueGenericSend>
 8010c34:	6278      	str	r0, [r7, #36]	; 0x24
 8010c36:	e012      	b.n	8010c5e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010c38:	4b0b      	ldr	r3, [pc, #44]	; (8010c68 <xTimerGenericCommand+0x94>)
 8010c3a:	6818      	ldr	r0, [r3, #0]
 8010c3c:	f107 0110 	add.w	r1, r7, #16
 8010c40:	2300      	movs	r3, #0
 8010c42:	2200      	movs	r2, #0
 8010c44:	f7fd fefa 	bl	800ea3c <xQueueGenericSend>
 8010c48:	6278      	str	r0, [r7, #36]	; 0x24
 8010c4a:	e008      	b.n	8010c5e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010c4c:	4b06      	ldr	r3, [pc, #24]	; (8010c68 <xTimerGenericCommand+0x94>)
 8010c4e:	6818      	ldr	r0, [r3, #0]
 8010c50:	f107 0110 	add.w	r1, r7, #16
 8010c54:	2300      	movs	r3, #0
 8010c56:	683a      	ldr	r2, [r7, #0]
 8010c58:	f7fd ffea 	bl	800ec30 <xQueueGenericSendFromISR>
 8010c5c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3728      	adds	r7, #40	; 0x28
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}
 8010c68:	20002180 	.word	0x20002180

08010c6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b088      	sub	sp, #32
 8010c70:	af02      	add	r7, sp, #8
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c76:	4b22      	ldr	r3, [pc, #136]	; (8010d00 <prvProcessExpiredTimer+0x94>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	68db      	ldr	r3, [r3, #12]
 8010c7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	3304      	adds	r3, #4
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7fd fc57 	bl	800e538 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c90:	f003 0304 	and.w	r3, r3, #4
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d021      	beq.n	8010cdc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	699a      	ldr	r2, [r3, #24]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	18d1      	adds	r1, r2, r3
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	683a      	ldr	r2, [r7, #0]
 8010ca4:	6978      	ldr	r0, [r7, #20]
 8010ca6:	f000 f8d1 	bl	8010e4c <prvInsertTimerInActiveList>
 8010caa:	4603      	mov	r3, r0
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d01e      	beq.n	8010cee <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	9300      	str	r3, [sp, #0]
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	2100      	movs	r1, #0
 8010cba:	6978      	ldr	r0, [r7, #20]
 8010cbc:	f7ff ff8a 	bl	8010bd4 <xTimerGenericCommand>
 8010cc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d112      	bne.n	8010cee <prvProcessExpiredTimer+0x82>
 8010cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ccc:	f383 8811 	msr	BASEPRI, r3
 8010cd0:	f3bf 8f6f 	isb	sy
 8010cd4:	f3bf 8f4f 	dsb	sy
 8010cd8:	60fb      	str	r3, [r7, #12]
 8010cda:	e7fe      	b.n	8010cda <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ce2:	f023 0301 	bic.w	r3, r3, #1
 8010ce6:	b2da      	uxtb	r2, r3
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	6a1b      	ldr	r3, [r3, #32]
 8010cf2:	6978      	ldr	r0, [r7, #20]
 8010cf4:	4798      	blx	r3
}
 8010cf6:	bf00      	nop
 8010cf8:	3718      	adds	r7, #24
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	20002178 	.word	0x20002178

08010d04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b084      	sub	sp, #16
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d0c:	f107 0308 	add.w	r3, r7, #8
 8010d10:	4618      	mov	r0, r3
 8010d12:	f000 f857 	bl	8010dc4 <prvGetNextExpireTime>
 8010d16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f000 f803 	bl	8010d28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010d22:	f000 f8d5 	bl	8010ed0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010d26:	e7f1      	b.n	8010d0c <prvTimerTask+0x8>

08010d28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b084      	sub	sp, #16
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010d32:	f7fe ff03 	bl	800fb3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d36:	f107 0308 	add.w	r3, r7, #8
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f000 f866 	bl	8010e0c <prvSampleTimeNow>
 8010d40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d130      	bne.n	8010daa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d10a      	bne.n	8010d64 <prvProcessTimerOrBlockTask+0x3c>
 8010d4e:	687a      	ldr	r2, [r7, #4]
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d806      	bhi.n	8010d64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010d56:	f7fe ff37 	bl	800fbc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010d5a:	68f9      	ldr	r1, [r7, #12]
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f7ff ff85 	bl	8010c6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010d62:	e024      	b.n	8010dae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d008      	beq.n	8010d7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010d6a:	4b13      	ldr	r3, [pc, #76]	; (8010db8 <prvProcessTimerOrBlockTask+0x90>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d101      	bne.n	8010d78 <prvProcessTimerOrBlockTask+0x50>
 8010d74:	2301      	movs	r3, #1
 8010d76:	e000      	b.n	8010d7a <prvProcessTimerOrBlockTask+0x52>
 8010d78:	2300      	movs	r3, #0
 8010d7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010d7c:	4b0f      	ldr	r3, [pc, #60]	; (8010dbc <prvProcessTimerOrBlockTask+0x94>)
 8010d7e:	6818      	ldr	r0, [r3, #0]
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	1ad3      	subs	r3, r2, r3
 8010d86:	683a      	ldr	r2, [r7, #0]
 8010d88:	4619      	mov	r1, r3
 8010d8a:	f7fe fc6d 	bl	800f668 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010d8e:	f7fe ff1b 	bl	800fbc8 <xTaskResumeAll>
 8010d92:	4603      	mov	r3, r0
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d10a      	bne.n	8010dae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010d98:	4b09      	ldr	r3, [pc, #36]	; (8010dc0 <prvProcessTimerOrBlockTask+0x98>)
 8010d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d9e:	601a      	str	r2, [r3, #0]
 8010da0:	f3bf 8f4f 	dsb	sy
 8010da4:	f3bf 8f6f 	isb	sy
}
 8010da8:	e001      	b.n	8010dae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010daa:	f7fe ff0d 	bl	800fbc8 <xTaskResumeAll>
}
 8010dae:	bf00      	nop
 8010db0:	3710      	adds	r7, #16
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	2000217c 	.word	0x2000217c
 8010dbc:	20002180 	.word	0x20002180
 8010dc0:	e000ed04 	.word	0xe000ed04

08010dc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b085      	sub	sp, #20
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010dcc:	4b0e      	ldr	r3, [pc, #56]	; (8010e08 <prvGetNextExpireTime+0x44>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d101      	bne.n	8010dda <prvGetNextExpireTime+0x16>
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	e000      	b.n	8010ddc <prvGetNextExpireTime+0x18>
 8010dda:	2200      	movs	r2, #0
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d105      	bne.n	8010df4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010de8:	4b07      	ldr	r3, [pc, #28]	; (8010e08 <prvGetNextExpireTime+0x44>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	60fb      	str	r3, [r7, #12]
 8010df2:	e001      	b.n	8010df8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010df4:	2300      	movs	r3, #0
 8010df6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010df8:	68fb      	ldr	r3, [r7, #12]
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3714      	adds	r7, #20
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr
 8010e06:	bf00      	nop
 8010e08:	20002178 	.word	0x20002178

08010e0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010e14:	f7fe ff74 	bl	800fd00 <xTaskGetTickCount>
 8010e18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010e1a:	4b0b      	ldr	r3, [pc, #44]	; (8010e48 <prvSampleTimeNow+0x3c>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	68fa      	ldr	r2, [r7, #12]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d205      	bcs.n	8010e30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010e24:	f000 f930 	bl	8011088 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2201      	movs	r2, #1
 8010e2c:	601a      	str	r2, [r3, #0]
 8010e2e:	e002      	b.n	8010e36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2200      	movs	r2, #0
 8010e34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010e36:	4a04      	ldr	r2, [pc, #16]	; (8010e48 <prvSampleTimeNow+0x3c>)
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3710      	adds	r7, #16
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	bf00      	nop
 8010e48:	20002188 	.word	0x20002188

08010e4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b086      	sub	sp, #24
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	607a      	str	r2, [r7, #4]
 8010e58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	68ba      	ldr	r2, [r7, #8]
 8010e62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	68fa      	ldr	r2, [r7, #12]
 8010e68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010e6a:	68ba      	ldr	r2, [r7, #8]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d812      	bhi.n	8010e98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e72:	687a      	ldr	r2, [r7, #4]
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	1ad2      	subs	r2, r2, r3
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	699b      	ldr	r3, [r3, #24]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d302      	bcc.n	8010e86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010e80:	2301      	movs	r3, #1
 8010e82:	617b      	str	r3, [r7, #20]
 8010e84:	e01b      	b.n	8010ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010e86:	4b10      	ldr	r3, [pc, #64]	; (8010ec8 <prvInsertTimerInActiveList+0x7c>)
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	3304      	adds	r3, #4
 8010e8e:	4619      	mov	r1, r3
 8010e90:	4610      	mov	r0, r2
 8010e92:	f7fd fb18 	bl	800e4c6 <vListInsert>
 8010e96:	e012      	b.n	8010ebe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010e98:	687a      	ldr	r2, [r7, #4]
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d206      	bcs.n	8010eae <prvInsertTimerInActiveList+0x62>
 8010ea0:	68ba      	ldr	r2, [r7, #8]
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d302      	bcc.n	8010eae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	617b      	str	r3, [r7, #20]
 8010eac:	e007      	b.n	8010ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010eae:	4b07      	ldr	r3, [pc, #28]	; (8010ecc <prvInsertTimerInActiveList+0x80>)
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	3304      	adds	r3, #4
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	4610      	mov	r0, r2
 8010eba:	f7fd fb04 	bl	800e4c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010ebe:	697b      	ldr	r3, [r7, #20]
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3718      	adds	r7, #24
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}
 8010ec8:	2000217c 	.word	0x2000217c
 8010ecc:	20002178 	.word	0x20002178

08010ed0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b08e      	sub	sp, #56	; 0x38
 8010ed4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ed6:	e0c6      	b.n	8011066 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	da17      	bge.n	8010f0e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010ede:	1d3b      	adds	r3, r7, #4
 8010ee0:	3304      	adds	r3, #4
 8010ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d109      	bne.n	8010efe <prvProcessReceivedCommands+0x2e>
 8010eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eee:	f383 8811 	msr	BASEPRI, r3
 8010ef2:	f3bf 8f6f 	isb	sy
 8010ef6:	f3bf 8f4f 	dsb	sy
 8010efa:	61fb      	str	r3, [r7, #28]
 8010efc:	e7fe      	b.n	8010efc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f04:	6850      	ldr	r0, [r2, #4]
 8010f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f08:	6892      	ldr	r2, [r2, #8]
 8010f0a:	4611      	mov	r1, r2
 8010f0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	f2c0 80a7 	blt.w	8011064 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f1c:	695b      	ldr	r3, [r3, #20]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d004      	beq.n	8010f2c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f24:	3304      	adds	r3, #4
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7fd fb06 	bl	800e538 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f2c:	463b      	mov	r3, r7
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7ff ff6c 	bl	8010e0c <prvSampleTimeNow>
 8010f34:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2b09      	cmp	r3, #9
 8010f3a:	f200 8094 	bhi.w	8011066 <prvProcessReceivedCommands+0x196>
 8010f3e:	a201      	add	r2, pc, #4	; (adr r2, 8010f44 <prvProcessReceivedCommands+0x74>)
 8010f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f44:	08010f6d 	.word	0x08010f6d
 8010f48:	08010f6d 	.word	0x08010f6d
 8010f4c:	08010f6d 	.word	0x08010f6d
 8010f50:	08010fdf 	.word	0x08010fdf
 8010f54:	08010ff3 	.word	0x08010ff3
 8010f58:	0801103b 	.word	0x0801103b
 8010f5c:	08010f6d 	.word	0x08010f6d
 8010f60:	08010f6d 	.word	0x08010f6d
 8010f64:	08010fdf 	.word	0x08010fdf
 8010f68:	08010ff3 	.word	0x08010ff3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f72:	f043 0301 	orr.w	r3, r3, #1
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010f7e:	68ba      	ldr	r2, [r7, #8]
 8010f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f82:	699b      	ldr	r3, [r3, #24]
 8010f84:	18d1      	adds	r1, r2, r3
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f8c:	f7ff ff5e 	bl	8010e4c <prvInsertTimerInActiveList>
 8010f90:	4603      	mov	r3, r0
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d067      	beq.n	8011066 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f98:	6a1b      	ldr	r3, [r3, #32]
 8010f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fa4:	f003 0304 	and.w	r3, r3, #4
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d05c      	beq.n	8011066 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010fac:	68ba      	ldr	r2, [r7, #8]
 8010fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb0:	699b      	ldr	r3, [r3, #24]
 8010fb2:	441a      	add	r2, r3
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	9300      	str	r3, [sp, #0]
 8010fb8:	2300      	movs	r3, #0
 8010fba:	2100      	movs	r1, #0
 8010fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fbe:	f7ff fe09 	bl	8010bd4 <xTimerGenericCommand>
 8010fc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010fc4:	6a3b      	ldr	r3, [r7, #32]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d14d      	bne.n	8011066 <prvProcessReceivedCommands+0x196>
 8010fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fce:	f383 8811 	msr	BASEPRI, r3
 8010fd2:	f3bf 8f6f 	isb	sy
 8010fd6:	f3bf 8f4f 	dsb	sy
 8010fda:	61bb      	str	r3, [r7, #24]
 8010fdc:	e7fe      	b.n	8010fdc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fe4:	f023 0301 	bic.w	r3, r3, #1
 8010fe8:	b2da      	uxtb	r2, r3
 8010fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010ff0:	e039      	b.n	8011066 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ff8:	f043 0301 	orr.w	r3, r3, #1
 8010ffc:	b2da      	uxtb	r2, r3
 8010ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011000:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011004:	68ba      	ldr	r2, [r7, #8]
 8011006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011008:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801100c:	699b      	ldr	r3, [r3, #24]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d109      	bne.n	8011026 <prvProcessReceivedCommands+0x156>
 8011012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011016:	f383 8811 	msr	BASEPRI, r3
 801101a:	f3bf 8f6f 	isb	sy
 801101e:	f3bf 8f4f 	dsb	sy
 8011022:	617b      	str	r3, [r7, #20]
 8011024:	e7fe      	b.n	8011024 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011028:	699a      	ldr	r2, [r3, #24]
 801102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102c:	18d1      	adds	r1, r2, r3
 801102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011034:	f7ff ff0a 	bl	8010e4c <prvInsertTimerInActiveList>
					break;
 8011038:	e015      	b.n	8011066 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801103c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011040:	f003 0302 	and.w	r3, r3, #2
 8011044:	2b00      	cmp	r3, #0
 8011046:	d103      	bne.n	8011050 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8011048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801104a:	f000 fbc3 	bl	80117d4 <vPortFree>
 801104e:	e00a      	b.n	8011066 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011056:	f023 0301 	bic.w	r3, r3, #1
 801105a:	b2da      	uxtb	r2, r3
 801105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801105e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011062:	e000      	b.n	8011066 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011064:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011066:	4b07      	ldr	r3, [pc, #28]	; (8011084 <prvProcessReceivedCommands+0x1b4>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	1d39      	adds	r1, r7, #4
 801106c:	2200      	movs	r2, #0
 801106e:	4618      	mov	r0, r3
 8011070:	f7fd fefc 	bl	800ee6c <xQueueReceive>
 8011074:	4603      	mov	r3, r0
 8011076:	2b00      	cmp	r3, #0
 8011078:	f47f af2e 	bne.w	8010ed8 <prvProcessReceivedCommands+0x8>
	}
}
 801107c:	bf00      	nop
 801107e:	3730      	adds	r7, #48	; 0x30
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}
 8011084:	20002180 	.word	0x20002180

08011088 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b088      	sub	sp, #32
 801108c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801108e:	e047      	b.n	8011120 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011090:	4b2d      	ldr	r3, [pc, #180]	; (8011148 <prvSwitchTimerLists+0xc0>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801109a:	4b2b      	ldr	r3, [pc, #172]	; (8011148 <prvSwitchTimerLists+0xc0>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	68db      	ldr	r3, [r3, #12]
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	3304      	adds	r3, #4
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7fd fa45 	bl	800e538 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	6a1b      	ldr	r3, [r3, #32]
 80110b2:	68f8      	ldr	r0, [r7, #12]
 80110b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110bc:	f003 0304 	and.w	r3, r3, #4
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d02d      	beq.n	8011120 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	699b      	ldr	r3, [r3, #24]
 80110c8:	693a      	ldr	r2, [r7, #16]
 80110ca:	4413      	add	r3, r2
 80110cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80110ce:	68ba      	ldr	r2, [r7, #8]
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d90e      	bls.n	80110f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	68ba      	ldr	r2, [r7, #8]
 80110da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	68fa      	ldr	r2, [r7, #12]
 80110e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80110e2:	4b19      	ldr	r3, [pc, #100]	; (8011148 <prvSwitchTimerLists+0xc0>)
 80110e4:	681a      	ldr	r2, [r3, #0]
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	3304      	adds	r3, #4
 80110ea:	4619      	mov	r1, r3
 80110ec:	4610      	mov	r0, r2
 80110ee:	f7fd f9ea 	bl	800e4c6 <vListInsert>
 80110f2:	e015      	b.n	8011120 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80110f4:	2300      	movs	r3, #0
 80110f6:	9300      	str	r3, [sp, #0]
 80110f8:	2300      	movs	r3, #0
 80110fa:	693a      	ldr	r2, [r7, #16]
 80110fc:	2100      	movs	r1, #0
 80110fe:	68f8      	ldr	r0, [r7, #12]
 8011100:	f7ff fd68 	bl	8010bd4 <xTimerGenericCommand>
 8011104:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d109      	bne.n	8011120 <prvSwitchTimerLists+0x98>
 801110c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011110:	f383 8811 	msr	BASEPRI, r3
 8011114:	f3bf 8f6f 	isb	sy
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	603b      	str	r3, [r7, #0]
 801111e:	e7fe      	b.n	801111e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011120:	4b09      	ldr	r3, [pc, #36]	; (8011148 <prvSwitchTimerLists+0xc0>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d1b2      	bne.n	8011090 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801112a:	4b07      	ldr	r3, [pc, #28]	; (8011148 <prvSwitchTimerLists+0xc0>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011130:	4b06      	ldr	r3, [pc, #24]	; (801114c <prvSwitchTimerLists+0xc4>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4a04      	ldr	r2, [pc, #16]	; (8011148 <prvSwitchTimerLists+0xc0>)
 8011136:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011138:	4a04      	ldr	r2, [pc, #16]	; (801114c <prvSwitchTimerLists+0xc4>)
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	6013      	str	r3, [r2, #0]
}
 801113e:	bf00      	nop
 8011140:	3718      	adds	r7, #24
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	20002178 	.word	0x20002178
 801114c:	2000217c 	.word	0x2000217c

08011150 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b082      	sub	sp, #8
 8011154:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011156:	f000 f961 	bl	801141c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801115a:	4b15      	ldr	r3, [pc, #84]	; (80111b0 <prvCheckForValidListAndQueue+0x60>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d120      	bne.n	80111a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011162:	4814      	ldr	r0, [pc, #80]	; (80111b4 <prvCheckForValidListAndQueue+0x64>)
 8011164:	f7fd f95e 	bl	800e424 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011168:	4813      	ldr	r0, [pc, #76]	; (80111b8 <prvCheckForValidListAndQueue+0x68>)
 801116a:	f7fd f95b 	bl	800e424 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801116e:	4b13      	ldr	r3, [pc, #76]	; (80111bc <prvCheckForValidListAndQueue+0x6c>)
 8011170:	4a10      	ldr	r2, [pc, #64]	; (80111b4 <prvCheckForValidListAndQueue+0x64>)
 8011172:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011174:	4b12      	ldr	r3, [pc, #72]	; (80111c0 <prvCheckForValidListAndQueue+0x70>)
 8011176:	4a10      	ldr	r2, [pc, #64]	; (80111b8 <prvCheckForValidListAndQueue+0x68>)
 8011178:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801117a:	2300      	movs	r3, #0
 801117c:	9300      	str	r3, [sp, #0]
 801117e:	4b11      	ldr	r3, [pc, #68]	; (80111c4 <prvCheckForValidListAndQueue+0x74>)
 8011180:	4a11      	ldr	r2, [pc, #68]	; (80111c8 <prvCheckForValidListAndQueue+0x78>)
 8011182:	2110      	movs	r1, #16
 8011184:	200a      	movs	r0, #10
 8011186:	f7fd fa69 	bl	800e65c <xQueueGenericCreateStatic>
 801118a:	4602      	mov	r2, r0
 801118c:	4b08      	ldr	r3, [pc, #32]	; (80111b0 <prvCheckForValidListAndQueue+0x60>)
 801118e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011190:	4b07      	ldr	r3, [pc, #28]	; (80111b0 <prvCheckForValidListAndQueue+0x60>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d005      	beq.n	80111a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011198:	4b05      	ldr	r3, [pc, #20]	; (80111b0 <prvCheckForValidListAndQueue+0x60>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	490b      	ldr	r1, [pc, #44]	; (80111cc <prvCheckForValidListAndQueue+0x7c>)
 801119e:	4618      	mov	r0, r3
 80111a0:	f7fe fa10 	bl	800f5c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80111a4:	f000 f968 	bl	8011478 <vPortExitCritical>
}
 80111a8:	bf00      	nop
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	20002180 	.word	0x20002180
 80111b4:	20002150 	.word	0x20002150
 80111b8:	20002164 	.word	0x20002164
 80111bc:	20002178 	.word	0x20002178
 80111c0:	2000217c 	.word	0x2000217c
 80111c4:	2000222c 	.word	0x2000222c
 80111c8:	2000218c 	.word	0x2000218c
 80111cc:	08013608 	.word	0x08013608

080111d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80111d0:	b480      	push	{r7}
 80111d2:	b085      	sub	sp, #20
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	60b9      	str	r1, [r7, #8]
 80111da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	3b04      	subs	r3, #4
 80111e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80111e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	3b04      	subs	r3, #4
 80111ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	f023 0201 	bic.w	r2, r3, #1
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	3b04      	subs	r3, #4
 80111fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011200:	4a0c      	ldr	r2, [pc, #48]	; (8011234 <pxPortInitialiseStack+0x64>)
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	3b14      	subs	r3, #20
 801120a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	3b04      	subs	r3, #4
 8011216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f06f 0202 	mvn.w	r2, #2
 801121e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	3b20      	subs	r3, #32
 8011224:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011226:	68fb      	ldr	r3, [r7, #12]
}
 8011228:	4618      	mov	r0, r3
 801122a:	3714      	adds	r7, #20
 801122c:	46bd      	mov	sp, r7
 801122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011232:	4770      	bx	lr
 8011234:	08011239 	.word	0x08011239

08011238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011238:	b480      	push	{r7}
 801123a:	b085      	sub	sp, #20
 801123c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801123e:	2300      	movs	r3, #0
 8011240:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011242:	4b11      	ldr	r3, [pc, #68]	; (8011288 <prvTaskExitError+0x50>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801124a:	d009      	beq.n	8011260 <prvTaskExitError+0x28>
 801124c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011250:	f383 8811 	msr	BASEPRI, r3
 8011254:	f3bf 8f6f 	isb	sy
 8011258:	f3bf 8f4f 	dsb	sy
 801125c:	60fb      	str	r3, [r7, #12]
 801125e:	e7fe      	b.n	801125e <prvTaskExitError+0x26>
 8011260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011264:	f383 8811 	msr	BASEPRI, r3
 8011268:	f3bf 8f6f 	isb	sy
 801126c:	f3bf 8f4f 	dsb	sy
 8011270:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011272:	bf00      	nop
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d0fc      	beq.n	8011274 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801127a:	bf00      	nop
 801127c:	3714      	adds	r7, #20
 801127e:	46bd      	mov	sp, r7
 8011280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	20000138 	.word	0x20000138
 801128c:	00000000 	.word	0x00000000

08011290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011290:	4b07      	ldr	r3, [pc, #28]	; (80112b0 <pxCurrentTCBConst2>)
 8011292:	6819      	ldr	r1, [r3, #0]
 8011294:	6808      	ldr	r0, [r1, #0]
 8011296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801129a:	f380 8809 	msr	PSP, r0
 801129e:	f3bf 8f6f 	isb	sy
 80112a2:	f04f 0000 	mov.w	r0, #0
 80112a6:	f380 8811 	msr	BASEPRI, r0
 80112aa:	4770      	bx	lr
 80112ac:	f3af 8000 	nop.w

080112b0 <pxCurrentTCBConst2>:
 80112b0:	20001c50 	.word	0x20001c50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80112b4:	bf00      	nop
 80112b6:	bf00      	nop

080112b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80112b8:	4808      	ldr	r0, [pc, #32]	; (80112dc <prvPortStartFirstTask+0x24>)
 80112ba:	6800      	ldr	r0, [r0, #0]
 80112bc:	6800      	ldr	r0, [r0, #0]
 80112be:	f380 8808 	msr	MSP, r0
 80112c2:	f04f 0000 	mov.w	r0, #0
 80112c6:	f380 8814 	msr	CONTROL, r0
 80112ca:	b662      	cpsie	i
 80112cc:	b661      	cpsie	f
 80112ce:	f3bf 8f4f 	dsb	sy
 80112d2:	f3bf 8f6f 	isb	sy
 80112d6:	df00      	svc	0
 80112d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80112da:	bf00      	nop
 80112dc:	e000ed08 	.word	0xe000ed08

080112e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b086      	sub	sp, #24
 80112e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80112e6:	4b44      	ldr	r3, [pc, #272]	; (80113f8 <xPortStartScheduler+0x118>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	4a44      	ldr	r2, [pc, #272]	; (80113fc <xPortStartScheduler+0x11c>)
 80112ec:	4293      	cmp	r3, r2
 80112ee:	d109      	bne.n	8011304 <xPortStartScheduler+0x24>
 80112f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112f4:	f383 8811 	msr	BASEPRI, r3
 80112f8:	f3bf 8f6f 	isb	sy
 80112fc:	f3bf 8f4f 	dsb	sy
 8011300:	613b      	str	r3, [r7, #16]
 8011302:	e7fe      	b.n	8011302 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011304:	4b3c      	ldr	r3, [pc, #240]	; (80113f8 <xPortStartScheduler+0x118>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4a3d      	ldr	r2, [pc, #244]	; (8011400 <xPortStartScheduler+0x120>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d109      	bne.n	8011322 <xPortStartScheduler+0x42>
 801130e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011312:	f383 8811 	msr	BASEPRI, r3
 8011316:	f3bf 8f6f 	isb	sy
 801131a:	f3bf 8f4f 	dsb	sy
 801131e:	60fb      	str	r3, [r7, #12]
 8011320:	e7fe      	b.n	8011320 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011322:	4b38      	ldr	r3, [pc, #224]	; (8011404 <xPortStartScheduler+0x124>)
 8011324:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	b2db      	uxtb	r3, r3
 801132c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	22ff      	movs	r2, #255	; 0xff
 8011332:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011334:	697b      	ldr	r3, [r7, #20]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	b2db      	uxtb	r3, r3
 801133a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801133c:	78fb      	ldrb	r3, [r7, #3]
 801133e:	b2db      	uxtb	r3, r3
 8011340:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011344:	b2da      	uxtb	r2, r3
 8011346:	4b30      	ldr	r3, [pc, #192]	; (8011408 <xPortStartScheduler+0x128>)
 8011348:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801134a:	4b30      	ldr	r3, [pc, #192]	; (801140c <xPortStartScheduler+0x12c>)
 801134c:	2207      	movs	r2, #7
 801134e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011350:	e009      	b.n	8011366 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011352:	4b2e      	ldr	r3, [pc, #184]	; (801140c <xPortStartScheduler+0x12c>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	3b01      	subs	r3, #1
 8011358:	4a2c      	ldr	r2, [pc, #176]	; (801140c <xPortStartScheduler+0x12c>)
 801135a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801135c:	78fb      	ldrb	r3, [r7, #3]
 801135e:	b2db      	uxtb	r3, r3
 8011360:	005b      	lsls	r3, r3, #1
 8011362:	b2db      	uxtb	r3, r3
 8011364:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011366:	78fb      	ldrb	r3, [r7, #3]
 8011368:	b2db      	uxtb	r3, r3
 801136a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801136e:	2b80      	cmp	r3, #128	; 0x80
 8011370:	d0ef      	beq.n	8011352 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011372:	4b26      	ldr	r3, [pc, #152]	; (801140c <xPortStartScheduler+0x12c>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	f1c3 0307 	rsb	r3, r3, #7
 801137a:	2b04      	cmp	r3, #4
 801137c:	d009      	beq.n	8011392 <xPortStartScheduler+0xb2>
 801137e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011382:	f383 8811 	msr	BASEPRI, r3
 8011386:	f3bf 8f6f 	isb	sy
 801138a:	f3bf 8f4f 	dsb	sy
 801138e:	60bb      	str	r3, [r7, #8]
 8011390:	e7fe      	b.n	8011390 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011392:	4b1e      	ldr	r3, [pc, #120]	; (801140c <xPortStartScheduler+0x12c>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	021b      	lsls	r3, r3, #8
 8011398:	4a1c      	ldr	r2, [pc, #112]	; (801140c <xPortStartScheduler+0x12c>)
 801139a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801139c:	4b1b      	ldr	r3, [pc, #108]	; (801140c <xPortStartScheduler+0x12c>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80113a4:	4a19      	ldr	r2, [pc, #100]	; (801140c <xPortStartScheduler+0x12c>)
 80113a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	b2da      	uxtb	r2, r3
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80113b0:	4b17      	ldr	r3, [pc, #92]	; (8011410 <xPortStartScheduler+0x130>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4a16      	ldr	r2, [pc, #88]	; (8011410 <xPortStartScheduler+0x130>)
 80113b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80113ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80113bc:	4b14      	ldr	r3, [pc, #80]	; (8011410 <xPortStartScheduler+0x130>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4a13      	ldr	r2, [pc, #76]	; (8011410 <xPortStartScheduler+0x130>)
 80113c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80113c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80113c8:	f000 f8d6 	bl	8011578 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80113cc:	4b11      	ldr	r3, [pc, #68]	; (8011414 <xPortStartScheduler+0x134>)
 80113ce:	2200      	movs	r2, #0
 80113d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80113d2:	f000 f8f5 	bl	80115c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80113d6:	4b10      	ldr	r3, [pc, #64]	; (8011418 <xPortStartScheduler+0x138>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	4a0f      	ldr	r2, [pc, #60]	; (8011418 <xPortStartScheduler+0x138>)
 80113dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80113e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80113e2:	f7ff ff69 	bl	80112b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80113e6:	f7fe fd53 	bl	800fe90 <vTaskSwitchContext>
	prvTaskExitError();
 80113ea:	f7ff ff25 	bl	8011238 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80113ee:	2300      	movs	r3, #0
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3718      	adds	r7, #24
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	e000ed00 	.word	0xe000ed00
 80113fc:	410fc271 	.word	0x410fc271
 8011400:	410fc270 	.word	0x410fc270
 8011404:	e000e400 	.word	0xe000e400
 8011408:	2000227c 	.word	0x2000227c
 801140c:	20002280 	.word	0x20002280
 8011410:	e000ed20 	.word	0xe000ed20
 8011414:	20000138 	.word	0x20000138
 8011418:	e000ef34 	.word	0xe000ef34

0801141c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
 8011422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011426:	f383 8811 	msr	BASEPRI, r3
 801142a:	f3bf 8f6f 	isb	sy
 801142e:	f3bf 8f4f 	dsb	sy
 8011432:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011434:	4b0e      	ldr	r3, [pc, #56]	; (8011470 <vPortEnterCritical+0x54>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	3301      	adds	r3, #1
 801143a:	4a0d      	ldr	r2, [pc, #52]	; (8011470 <vPortEnterCritical+0x54>)
 801143c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801143e:	4b0c      	ldr	r3, [pc, #48]	; (8011470 <vPortEnterCritical+0x54>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	2b01      	cmp	r3, #1
 8011444:	d10e      	bne.n	8011464 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011446:	4b0b      	ldr	r3, [pc, #44]	; (8011474 <vPortEnterCritical+0x58>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	b2db      	uxtb	r3, r3
 801144c:	2b00      	cmp	r3, #0
 801144e:	d009      	beq.n	8011464 <vPortEnterCritical+0x48>
 8011450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011454:	f383 8811 	msr	BASEPRI, r3
 8011458:	f3bf 8f6f 	isb	sy
 801145c:	f3bf 8f4f 	dsb	sy
 8011460:	603b      	str	r3, [r7, #0]
 8011462:	e7fe      	b.n	8011462 <vPortEnterCritical+0x46>
	}
}
 8011464:	bf00      	nop
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr
 8011470:	20000138 	.word	0x20000138
 8011474:	e000ed04 	.word	0xe000ed04

08011478 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011478:	b480      	push	{r7}
 801147a:	b083      	sub	sp, #12
 801147c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801147e:	4b11      	ldr	r3, [pc, #68]	; (80114c4 <vPortExitCritical+0x4c>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d109      	bne.n	801149a <vPortExitCritical+0x22>
 8011486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801148a:	f383 8811 	msr	BASEPRI, r3
 801148e:	f3bf 8f6f 	isb	sy
 8011492:	f3bf 8f4f 	dsb	sy
 8011496:	607b      	str	r3, [r7, #4]
 8011498:	e7fe      	b.n	8011498 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801149a:	4b0a      	ldr	r3, [pc, #40]	; (80114c4 <vPortExitCritical+0x4c>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	3b01      	subs	r3, #1
 80114a0:	4a08      	ldr	r2, [pc, #32]	; (80114c4 <vPortExitCritical+0x4c>)
 80114a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80114a4:	4b07      	ldr	r3, [pc, #28]	; (80114c4 <vPortExitCritical+0x4c>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d104      	bne.n	80114b6 <vPortExitCritical+0x3e>
 80114ac:	2300      	movs	r3, #0
 80114ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80114b6:	bf00      	nop
 80114b8:	370c      	adds	r7, #12
 80114ba:	46bd      	mov	sp, r7
 80114bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	20000138 	.word	0x20000138
	...

080114d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80114d0:	f3ef 8009 	mrs	r0, PSP
 80114d4:	f3bf 8f6f 	isb	sy
 80114d8:	4b15      	ldr	r3, [pc, #84]	; (8011530 <pxCurrentTCBConst>)
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	f01e 0f10 	tst.w	lr, #16
 80114e0:	bf08      	it	eq
 80114e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80114e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ea:	6010      	str	r0, [r2, #0]
 80114ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80114f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80114f4:	f380 8811 	msr	BASEPRI, r0
 80114f8:	f3bf 8f4f 	dsb	sy
 80114fc:	f3bf 8f6f 	isb	sy
 8011500:	f7fe fcc6 	bl	800fe90 <vTaskSwitchContext>
 8011504:	f04f 0000 	mov.w	r0, #0
 8011508:	f380 8811 	msr	BASEPRI, r0
 801150c:	bc09      	pop	{r0, r3}
 801150e:	6819      	ldr	r1, [r3, #0]
 8011510:	6808      	ldr	r0, [r1, #0]
 8011512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011516:	f01e 0f10 	tst.w	lr, #16
 801151a:	bf08      	it	eq
 801151c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011520:	f380 8809 	msr	PSP, r0
 8011524:	f3bf 8f6f 	isb	sy
 8011528:	4770      	bx	lr
 801152a:	bf00      	nop
 801152c:	f3af 8000 	nop.w

08011530 <pxCurrentTCBConst>:
 8011530:	20001c50 	.word	0x20001c50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011534:	bf00      	nop
 8011536:	bf00      	nop

08011538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b082      	sub	sp, #8
 801153c:	af00      	add	r7, sp, #0
	__asm volatile
 801153e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011542:	f383 8811 	msr	BASEPRI, r3
 8011546:	f3bf 8f6f 	isb	sy
 801154a:	f3bf 8f4f 	dsb	sy
 801154e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011550:	f7fe fbe6 	bl	800fd20 <xTaskIncrementTick>
 8011554:	4603      	mov	r3, r0
 8011556:	2b00      	cmp	r3, #0
 8011558:	d003      	beq.n	8011562 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801155a:	4b06      	ldr	r3, [pc, #24]	; (8011574 <SysTick_Handler+0x3c>)
 801155c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011560:	601a      	str	r2, [r3, #0]
 8011562:	2300      	movs	r3, #0
 8011564:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801156c:	bf00      	nop
 801156e:	3708      	adds	r7, #8
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}
 8011574:	e000ed04 	.word	0xe000ed04

08011578 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011578:	b480      	push	{r7}
 801157a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801157c:	4b0b      	ldr	r3, [pc, #44]	; (80115ac <vPortSetupTimerInterrupt+0x34>)
 801157e:	2200      	movs	r2, #0
 8011580:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011582:	4b0b      	ldr	r3, [pc, #44]	; (80115b0 <vPortSetupTimerInterrupt+0x38>)
 8011584:	2200      	movs	r2, #0
 8011586:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011588:	4b0a      	ldr	r3, [pc, #40]	; (80115b4 <vPortSetupTimerInterrupt+0x3c>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	4a0a      	ldr	r2, [pc, #40]	; (80115b8 <vPortSetupTimerInterrupt+0x40>)
 801158e:	fba2 2303 	umull	r2, r3, r2, r3
 8011592:	099b      	lsrs	r3, r3, #6
 8011594:	4a09      	ldr	r2, [pc, #36]	; (80115bc <vPortSetupTimerInterrupt+0x44>)
 8011596:	3b01      	subs	r3, #1
 8011598:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801159a:	4b04      	ldr	r3, [pc, #16]	; (80115ac <vPortSetupTimerInterrupt+0x34>)
 801159c:	2207      	movs	r2, #7
 801159e:	601a      	str	r2, [r3, #0]
}
 80115a0:	bf00      	nop
 80115a2:	46bd      	mov	sp, r7
 80115a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop
 80115ac:	e000e010 	.word	0xe000e010
 80115b0:	e000e018 	.word	0xe000e018
 80115b4:	2000001c 	.word	0x2000001c
 80115b8:	10624dd3 	.word	0x10624dd3
 80115bc:	e000e014 	.word	0xe000e014

080115c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80115c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80115d0 <vPortEnableVFP+0x10>
 80115c4:	6801      	ldr	r1, [r0, #0]
 80115c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80115ca:	6001      	str	r1, [r0, #0]
 80115cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80115ce:	bf00      	nop
 80115d0:	e000ed88 	.word	0xe000ed88

080115d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80115d4:	b480      	push	{r7}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80115da:	f3ef 8305 	mrs	r3, IPSR
 80115de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	2b0f      	cmp	r3, #15
 80115e4:	d913      	bls.n	801160e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80115e6:	4a16      	ldr	r2, [pc, #88]	; (8011640 <vPortValidateInterruptPriority+0x6c>)
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	4413      	add	r3, r2
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80115f0:	4b14      	ldr	r3, [pc, #80]	; (8011644 <vPortValidateInterruptPriority+0x70>)
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	7afa      	ldrb	r2, [r7, #11]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d209      	bcs.n	801160e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80115fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115fe:	f383 8811 	msr	BASEPRI, r3
 8011602:	f3bf 8f6f 	isb	sy
 8011606:	f3bf 8f4f 	dsb	sy
 801160a:	607b      	str	r3, [r7, #4]
 801160c:	e7fe      	b.n	801160c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801160e:	4b0e      	ldr	r3, [pc, #56]	; (8011648 <vPortValidateInterruptPriority+0x74>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011616:	4b0d      	ldr	r3, [pc, #52]	; (801164c <vPortValidateInterruptPriority+0x78>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	429a      	cmp	r2, r3
 801161c:	d909      	bls.n	8011632 <vPortValidateInterruptPriority+0x5e>
 801161e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011622:	f383 8811 	msr	BASEPRI, r3
 8011626:	f3bf 8f6f 	isb	sy
 801162a:	f3bf 8f4f 	dsb	sy
 801162e:	603b      	str	r3, [r7, #0]
 8011630:	e7fe      	b.n	8011630 <vPortValidateInterruptPriority+0x5c>
	}
 8011632:	bf00      	nop
 8011634:	3714      	adds	r7, #20
 8011636:	46bd      	mov	sp, r7
 8011638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163c:	4770      	bx	lr
 801163e:	bf00      	nop
 8011640:	e000e3f0 	.word	0xe000e3f0
 8011644:	2000227c 	.word	0x2000227c
 8011648:	e000ed0c 	.word	0xe000ed0c
 801164c:	20002280 	.word	0x20002280

08011650 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b08a      	sub	sp, #40	; 0x28
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011658:	2300      	movs	r3, #0
 801165a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801165c:	f7fe fa6e 	bl	800fb3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011660:	4b57      	ldr	r3, [pc, #348]	; (80117c0 <pvPortMalloc+0x170>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d101      	bne.n	801166c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011668:	f000 f90c 	bl	8011884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801166c:	4b55      	ldr	r3, [pc, #340]	; (80117c4 <pvPortMalloc+0x174>)
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	4013      	ands	r3, r2
 8011674:	2b00      	cmp	r3, #0
 8011676:	f040 808c 	bne.w	8011792 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d01c      	beq.n	80116ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011680:	2208      	movs	r2, #8
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	4413      	add	r3, r2
 8011686:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f003 0307 	and.w	r3, r3, #7
 801168e:	2b00      	cmp	r3, #0
 8011690:	d013      	beq.n	80116ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f023 0307 	bic.w	r3, r3, #7
 8011698:	3308      	adds	r3, #8
 801169a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f003 0307 	and.w	r3, r3, #7
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d009      	beq.n	80116ba <pvPortMalloc+0x6a>
 80116a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116aa:	f383 8811 	msr	BASEPRI, r3
 80116ae:	f3bf 8f6f 	isb	sy
 80116b2:	f3bf 8f4f 	dsb	sy
 80116b6:	617b      	str	r3, [r7, #20]
 80116b8:	e7fe      	b.n	80116b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d068      	beq.n	8011792 <pvPortMalloc+0x142>
 80116c0:	4b41      	ldr	r3, [pc, #260]	; (80117c8 <pvPortMalloc+0x178>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d863      	bhi.n	8011792 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80116ca:	4b40      	ldr	r3, [pc, #256]	; (80117cc <pvPortMalloc+0x17c>)
 80116cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80116ce:	4b3f      	ldr	r3, [pc, #252]	; (80117cc <pvPortMalloc+0x17c>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80116d4:	e004      	b.n	80116e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80116d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80116da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80116e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	687a      	ldr	r2, [r7, #4]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d903      	bls.n	80116f2 <pvPortMalloc+0xa2>
 80116ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d1f1      	bne.n	80116d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80116f2:	4b33      	ldr	r3, [pc, #204]	; (80117c0 <pvPortMalloc+0x170>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d04a      	beq.n	8011792 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80116fc:	6a3b      	ldr	r3, [r7, #32]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2208      	movs	r2, #8
 8011702:	4413      	add	r3, r2
 8011704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011708:	681a      	ldr	r2, [r3, #0]
 801170a:	6a3b      	ldr	r3, [r7, #32]
 801170c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011710:	685a      	ldr	r2, [r3, #4]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	1ad2      	subs	r2, r2, r3
 8011716:	2308      	movs	r3, #8
 8011718:	005b      	lsls	r3, r3, #1
 801171a:	429a      	cmp	r2, r3
 801171c:	d91e      	bls.n	801175c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801171e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	4413      	add	r3, r2
 8011724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011726:	69bb      	ldr	r3, [r7, #24]
 8011728:	f003 0307 	and.w	r3, r3, #7
 801172c:	2b00      	cmp	r3, #0
 801172e:	d009      	beq.n	8011744 <pvPortMalloc+0xf4>
 8011730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011734:	f383 8811 	msr	BASEPRI, r3
 8011738:	f3bf 8f6f 	isb	sy
 801173c:	f3bf 8f4f 	dsb	sy
 8011740:	613b      	str	r3, [r7, #16]
 8011742:	e7fe      	b.n	8011742 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011746:	685a      	ldr	r2, [r3, #4]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	1ad2      	subs	r2, r2, r3
 801174c:	69bb      	ldr	r3, [r7, #24]
 801174e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011756:	69b8      	ldr	r0, [r7, #24]
 8011758:	f000 f8f6 	bl	8011948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801175c:	4b1a      	ldr	r3, [pc, #104]	; (80117c8 <pvPortMalloc+0x178>)
 801175e:	681a      	ldr	r2, [r3, #0]
 8011760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	4a18      	ldr	r2, [pc, #96]	; (80117c8 <pvPortMalloc+0x178>)
 8011768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801176a:	4b17      	ldr	r3, [pc, #92]	; (80117c8 <pvPortMalloc+0x178>)
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	4b18      	ldr	r3, [pc, #96]	; (80117d0 <pvPortMalloc+0x180>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	429a      	cmp	r2, r3
 8011774:	d203      	bcs.n	801177e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011776:	4b14      	ldr	r3, [pc, #80]	; (80117c8 <pvPortMalloc+0x178>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	4a15      	ldr	r2, [pc, #84]	; (80117d0 <pvPortMalloc+0x180>)
 801177c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011780:	685a      	ldr	r2, [r3, #4]
 8011782:	4b10      	ldr	r3, [pc, #64]	; (80117c4 <pvPortMalloc+0x174>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	431a      	orrs	r2, r3
 8011788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801178a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801178e:	2200      	movs	r2, #0
 8011790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011792:	f7fe fa19 	bl	800fbc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011796:	69fb      	ldr	r3, [r7, #28]
 8011798:	f003 0307 	and.w	r3, r3, #7
 801179c:	2b00      	cmp	r3, #0
 801179e:	d009      	beq.n	80117b4 <pvPortMalloc+0x164>
 80117a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a4:	f383 8811 	msr	BASEPRI, r3
 80117a8:	f3bf 8f6f 	isb	sy
 80117ac:	f3bf 8f4f 	dsb	sy
 80117b0:	60fb      	str	r3, [r7, #12]
 80117b2:	e7fe      	b.n	80117b2 <pvPortMalloc+0x162>
	return pvReturn;
 80117b4:	69fb      	ldr	r3, [r7, #28]
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3728      	adds	r7, #40	; 0x28
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	2000499c 	.word	0x2000499c
 80117c4:	200049a8 	.word	0x200049a8
 80117c8:	200049a0 	.word	0x200049a0
 80117cc:	20004994 	.word	0x20004994
 80117d0:	200049a4 	.word	0x200049a4

080117d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b086      	sub	sp, #24
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d046      	beq.n	8011874 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80117e6:	2308      	movs	r3, #8
 80117e8:	425b      	negs	r3, r3
 80117ea:	697a      	ldr	r2, [r7, #20]
 80117ec:	4413      	add	r3, r2
 80117ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	685a      	ldr	r2, [r3, #4]
 80117f8:	4b20      	ldr	r3, [pc, #128]	; (801187c <vPortFree+0xa8>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	4013      	ands	r3, r2
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d109      	bne.n	8011816 <vPortFree+0x42>
 8011802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011806:	f383 8811 	msr	BASEPRI, r3
 801180a:	f3bf 8f6f 	isb	sy
 801180e:	f3bf 8f4f 	dsb	sy
 8011812:	60fb      	str	r3, [r7, #12]
 8011814:	e7fe      	b.n	8011814 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d009      	beq.n	8011832 <vPortFree+0x5e>
 801181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011822:	f383 8811 	msr	BASEPRI, r3
 8011826:	f3bf 8f6f 	isb	sy
 801182a:	f3bf 8f4f 	dsb	sy
 801182e:	60bb      	str	r3, [r7, #8]
 8011830:	e7fe      	b.n	8011830 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	685a      	ldr	r2, [r3, #4]
 8011836:	4b11      	ldr	r3, [pc, #68]	; (801187c <vPortFree+0xa8>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4013      	ands	r3, r2
 801183c:	2b00      	cmp	r3, #0
 801183e:	d019      	beq.n	8011874 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d115      	bne.n	8011874 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	685a      	ldr	r2, [r3, #4]
 801184c:	4b0b      	ldr	r3, [pc, #44]	; (801187c <vPortFree+0xa8>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	43db      	mvns	r3, r3
 8011852:	401a      	ands	r2, r3
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011858:	f7fe f970 	bl	800fb3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	685a      	ldr	r2, [r3, #4]
 8011860:	4b07      	ldr	r3, [pc, #28]	; (8011880 <vPortFree+0xac>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	4413      	add	r3, r2
 8011866:	4a06      	ldr	r2, [pc, #24]	; (8011880 <vPortFree+0xac>)
 8011868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801186a:	6938      	ldr	r0, [r7, #16]
 801186c:	f000 f86c 	bl	8011948 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011870:	f7fe f9aa 	bl	800fbc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011874:	bf00      	nop
 8011876:	3718      	adds	r7, #24
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	200049a8 	.word	0x200049a8
 8011880:	200049a0 	.word	0x200049a0

08011884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011884:	b480      	push	{r7}
 8011886:	b085      	sub	sp, #20
 8011888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801188a:	f242 7310 	movw	r3, #10000	; 0x2710
 801188e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011890:	4b27      	ldr	r3, [pc, #156]	; (8011930 <prvHeapInit+0xac>)
 8011892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f003 0307 	and.w	r3, r3, #7
 801189a:	2b00      	cmp	r3, #0
 801189c:	d00c      	beq.n	80118b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	3307      	adds	r3, #7
 80118a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	f023 0307 	bic.w	r3, r3, #7
 80118aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80118ac:	68ba      	ldr	r2, [r7, #8]
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	1ad3      	subs	r3, r2, r3
 80118b2:	4a1f      	ldr	r2, [pc, #124]	; (8011930 <prvHeapInit+0xac>)
 80118b4:	4413      	add	r3, r2
 80118b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80118bc:	4a1d      	ldr	r2, [pc, #116]	; (8011934 <prvHeapInit+0xb0>)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80118c2:	4b1c      	ldr	r3, [pc, #112]	; (8011934 <prvHeapInit+0xb0>)
 80118c4:	2200      	movs	r2, #0
 80118c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	68ba      	ldr	r2, [r7, #8]
 80118cc:	4413      	add	r3, r2
 80118ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80118d0:	2208      	movs	r2, #8
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	1a9b      	subs	r3, r3, r2
 80118d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	f023 0307 	bic.w	r3, r3, #7
 80118de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	4a15      	ldr	r2, [pc, #84]	; (8011938 <prvHeapInit+0xb4>)
 80118e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80118e6:	4b14      	ldr	r3, [pc, #80]	; (8011938 <prvHeapInit+0xb4>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2200      	movs	r2, #0
 80118ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80118ee:	4b12      	ldr	r3, [pc, #72]	; (8011938 <prvHeapInit+0xb4>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	2200      	movs	r2, #0
 80118f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	68fa      	ldr	r2, [r7, #12]
 80118fe:	1ad2      	subs	r2, r2, r3
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011904:	4b0c      	ldr	r3, [pc, #48]	; (8011938 <prvHeapInit+0xb4>)
 8011906:	681a      	ldr	r2, [r3, #0]
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	4a0a      	ldr	r2, [pc, #40]	; (801193c <prvHeapInit+0xb8>)
 8011912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	685b      	ldr	r3, [r3, #4]
 8011918:	4a09      	ldr	r2, [pc, #36]	; (8011940 <prvHeapInit+0xbc>)
 801191a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801191c:	4b09      	ldr	r3, [pc, #36]	; (8011944 <prvHeapInit+0xc0>)
 801191e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011922:	601a      	str	r2, [r3, #0]
}
 8011924:	bf00      	nop
 8011926:	3714      	adds	r7, #20
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr
 8011930:	20002284 	.word	0x20002284
 8011934:	20004994 	.word	0x20004994
 8011938:	2000499c 	.word	0x2000499c
 801193c:	200049a4 	.word	0x200049a4
 8011940:	200049a0 	.word	0x200049a0
 8011944:	200049a8 	.word	0x200049a8

08011948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011948:	b480      	push	{r7}
 801194a:	b085      	sub	sp, #20
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011950:	4b28      	ldr	r3, [pc, #160]	; (80119f4 <prvInsertBlockIntoFreeList+0xac>)
 8011952:	60fb      	str	r3, [r7, #12]
 8011954:	e002      	b.n	801195c <prvInsertBlockIntoFreeList+0x14>
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	60fb      	str	r3, [r7, #12]
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	429a      	cmp	r2, r3
 8011964:	d8f7      	bhi.n	8011956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	68ba      	ldr	r2, [r7, #8]
 8011970:	4413      	add	r3, r2
 8011972:	687a      	ldr	r2, [r7, #4]
 8011974:	429a      	cmp	r2, r3
 8011976:	d108      	bne.n	801198a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	685a      	ldr	r2, [r3, #4]
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	685b      	ldr	r3, [r3, #4]
 8011980:	441a      	add	r2, r3
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	68ba      	ldr	r2, [r7, #8]
 8011994:	441a      	add	r2, r3
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	429a      	cmp	r2, r3
 801199c:	d118      	bne.n	80119d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	681a      	ldr	r2, [r3, #0]
 80119a2:	4b15      	ldr	r3, [pc, #84]	; (80119f8 <prvInsertBlockIntoFreeList+0xb0>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d00d      	beq.n	80119c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	685a      	ldr	r2, [r3, #4]
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	441a      	add	r2, r3
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	601a      	str	r2, [r3, #0]
 80119c4:	e008      	b.n	80119d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80119c6:	4b0c      	ldr	r3, [pc, #48]	; (80119f8 <prvInsertBlockIntoFreeList+0xb0>)
 80119c8:	681a      	ldr	r2, [r3, #0]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	601a      	str	r2, [r3, #0]
 80119ce:	e003      	b.n	80119d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80119d8:	68fa      	ldr	r2, [r7, #12]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d002      	beq.n	80119e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80119e6:	bf00      	nop
 80119e8:	3714      	adds	r7, #20
 80119ea:	46bd      	mov	sp, r7
 80119ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f0:	4770      	bx	lr
 80119f2:	bf00      	nop
 80119f4:	20004994 	.word	0x20004994
 80119f8:	2000499c 	.word	0x2000499c

080119fc <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8011a02:	f000 f985 	bl	8011d10 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8011a06:	480e      	ldr	r0, [pc, #56]	; (8011a40 <APP_THREAD_Init+0x44>)
 8011a08:	f000 fbe8 	bl	80121dc <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 8011a0c:	2101      	movs	r1, #1
 8011a0e:	2002      	movs	r0, #2
 8011a10:	f001 fd24 	bl	801345c <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8011a14:	f000 fcda 	bl	80123cc <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8011a18:	f000 fcc6 	bl	80123a8 <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 8011a1c:	f7fa f96a 	bl	800bcf4 <SHCI_C2_THREAD_Init>
 8011a20:	4603      	mov	r3, r0
 8011a22:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8011a24:	4a07      	ldr	r2, [pc, #28]	; (8011a44 <APP_THREAD_Init+0x48>)
 8011a26:	2100      	movs	r1, #0
 8011a28:	4807      	ldr	r0, [pc, #28]	; (8011a48 <APP_THREAD_Init+0x4c>)
 8011a2a:	f7fc f859 	bl	800dae0 <osThreadNew>
 8011a2e:	4602      	mov	r2, r0
 8011a30:	4b06      	ldr	r3, [pc, #24]	; (8011a4c <APP_THREAD_Init+0x50>)
 8011a32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8011a34:	f000 f86c 	bl	8011b10 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8011a38:	bf00      	nop
 8011a3a:	3708      	adds	r7, #8
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	20030834 	.word	0x20030834
 8011a44:	080139dc 	.word	0x080139dc
 8011a48:	08011dcd 	.word	0x08011dcd
 8011a4c:	20004ac0 	.word	0x20004ac0

08011a50 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2b07      	cmp	r3, #7
 8011a5e:	d83b      	bhi.n	8011ad8 <APP_THREAD_Error+0x88>
 8011a60:	a201      	add	r2, pc, #4	; (adr r2, 8011a68 <APP_THREAD_Error+0x18>)
 8011a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a66:	bf00      	nop
 8011a68:	08011a89 	.word	0x08011a89
 8011a6c:	08011a93 	.word	0x08011a93
 8011a70:	08011a9d 	.word	0x08011a9d
 8011a74:	08011aa7 	.word	0x08011aa7
 8011a78:	08011ab1 	.word	0x08011ab1
 8011a7c:	08011abb 	.word	0x08011abb
 8011a80:	08011ac5 	.word	0x08011ac5
 8011a84:	08011acf 	.word	0x08011acf
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 8011a88:	6839      	ldr	r1, [r7, #0]
 8011a8a:	4818      	ldr	r0, [pc, #96]	; (8011aec <APP_THREAD_Error+0x9c>)
 8011a8c:	f000 f934 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011a90:	e027      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 8011a92:	6839      	ldr	r1, [r7, #0]
 8011a94:	4816      	ldr	r0, [pc, #88]	; (8011af0 <APP_THREAD_Error+0xa0>)
 8011a96:	f000 f92f 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011a9a:	e022      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 8011a9c:	6839      	ldr	r1, [r7, #0]
 8011a9e:	4815      	ldr	r0, [pc, #84]	; (8011af4 <APP_THREAD_Error+0xa4>)
 8011aa0:	f000 f92a 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011aa4:	e01d      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8011aa6:	6839      	ldr	r1, [r7, #0]
 8011aa8:	4813      	ldr	r0, [pc, #76]	; (8011af8 <APP_THREAD_Error+0xa8>)
 8011aaa:	f000 f925 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011aae:	e018      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8011ab0:	6839      	ldr	r1, [r7, #0]
 8011ab2:	4812      	ldr	r0, [pc, #72]	; (8011afc <APP_THREAD_Error+0xac>)
 8011ab4:	f000 f920 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011ab8:	e013      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 8011aba:	6839      	ldr	r1, [r7, #0]
 8011abc:	4810      	ldr	r0, [pc, #64]	; (8011b00 <APP_THREAD_Error+0xb0>)
 8011abe:	f000 f91b 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011ac2:	e00e      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8011ac4:	6839      	ldr	r1, [r7, #0]
 8011ac6:	480f      	ldr	r0, [pc, #60]	; (8011b04 <APP_THREAD_Error+0xb4>)
 8011ac8:	f000 f916 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011acc:	e009      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 8011ace:	6839      	ldr	r1, [r7, #0]
 8011ad0:	480d      	ldr	r0, [pc, #52]	; (8011b08 <APP_THREAD_Error+0xb8>)
 8011ad2:	f000 f911 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011ad6:	e004      	b.n	8011ae2 <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8011ad8:	2100      	movs	r1, #0
 8011ada:	480c      	ldr	r0, [pc, #48]	; (8011b0c <APP_THREAD_Error+0xbc>)
 8011adc:	f000 f90c 	bl	8011cf8 <APP_THREAD_TraceError>
    break;
 8011ae0:	bf00      	nop
  }
}
 8011ae2:	bf00      	nop
 8011ae4:	3708      	adds	r7, #8
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}
 8011aea:	bf00      	nop
 8011aec:	08013664 	.word	0x08013664
 8011af0:	08013688 	.word	0x08013688
 8011af4:	080136ac 	.word	0x080136ac
 8011af8:	080136cc 	.word	0x080136cc
 8011afc:	080136ec 	.word	0x080136ec
 8011b00:	0801370c 	.word	0x0801370c
 8011b04:	08013728 	.word	0x08013728
 8011b08:	08013754 	.word	0x08013754
 8011b0c:	08013778 	.word	0x08013778

08011b10 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8011b16:	2000      	movs	r0, #0
 8011b18:	f7fb f922 	bl	800cd60 <otInstanceErasePersistentInfo>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011b20:	79fb      	ldrb	r3, [r7, #7]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d004      	beq.n	8011b30 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8011b26:	79fb      	ldrb	r3, [r7, #7]
 8011b28:	4619      	mov	r1, r3
 8011b2a:	2006      	movs	r0, #6
 8011b2c:	f7ff ff90 	bl	8011a50 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8011b30:	2000      	movs	r0, #0
 8011b32:	f7fb f8b9 	bl	800cca8 <otInstanceFinalize>
  otInstanceInitSingle();
 8011b36:	f7fb f890 	bl	800cc5a <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	4955      	ldr	r1, [pc, #340]	; (8011c94 <APP_THREAD_DeviceConfig+0x184>)
 8011b3e:	2000      	movs	r0, #0
 8011b40:	f7fb f8d8 	bl	800ccf4 <otSetStateChangedCallback>
 8011b44:	4603      	mov	r3, r0
 8011b46:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011b48:	79fb      	ldrb	r3, [r7, #7]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d004      	beq.n	8011b58 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 8011b4e:	79fb      	ldrb	r3, [r7, #7]
 8011b50:	4619      	mov	r1, r3
 8011b52:	2001      	movs	r0, #1
 8011b54:	f7ff ff7c 	bl	8011a50 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 8011b58:	2117      	movs	r1, #23
 8011b5a:	2000      	movs	r0, #0
 8011b5c:	f7fb fa08 	bl	800cf70 <otLinkSetChannel>
 8011b60:	4603      	mov	r3, r0
 8011b62:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011b64:	79fb      	ldrb	r3, [r7, #7]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d004      	beq.n	8011b74 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 8011b6a:	79fb      	ldrb	r3, [r7, #7]
 8011b6c:	4619      	mov	r1, r3
 8011b6e:	2002      	movs	r0, #2
 8011b70:	f7ff ff6e 	bl	8011a50 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 8011b74:	f241 2134 	movw	r1, #4660	; 0x1234
 8011b78:	2000      	movs	r0, #0
 8011b7a:	f7fb fa29 	bl	800cfd0 <otLinkSetPanId>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011b82:	79fb      	ldrb	r3, [r7, #7]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d004      	beq.n	8011b92 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 8011b88:	79fb      	ldrb	r3, [r7, #7]
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	2003      	movs	r0, #3
 8011b8e:	f7ff ff5f 	bl	8011a50 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 8011b92:	2101      	movs	r1, #1
 8011b94:	2000      	movs	r0, #0
 8011b96:	f7fb f90c 	bl	800cdb2 <otIp6SetEnabled>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011b9e:	79fb      	ldrb	r3, [r7, #7]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d004      	beq.n	8011bae <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8011ba4:	79fb      	ldrb	r3, [r7, #7]
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	2004      	movs	r0, #4
 8011baa:	f7ff ff51 	bl	8011a50 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 8011bae:	2101      	movs	r1, #1
 8011bb0:	2000      	movs	r0, #0
 8011bb2:	f7fb fd42 	bl	800d63a <otThreadSetEnabled>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8011bba:	79fb      	ldrb	r3, [r7, #7]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d004      	beq.n	8011bca <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8011bc0:	79fb      	ldrb	r3, [r7, #7]
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	2005      	movs	r0, #5
 8011bc6:	f7ff ff43 	bl	8011a50 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 8011bca:	2100      	movs	r1, #0
 8011bcc:	2000      	movs	r0, #0
 8011bce:	f7fb fd34 	bl	800d63a <otThreadSetEnabled>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011bd6:	79fb      	ldrb	r3, [r7, #7]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d004      	beq.n	8011be6 <APP_THREAD_DeviceConfig+0xd6>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 8011bdc:	79fb      	ldrb	r3, [r7, #7]
 8011bde:	4619      	mov	r1, r3
 8011be0:	2005      	movs	r0, #5
 8011be2:	f7ff ff35 	bl	8011a50 <APP_THREAD_Error>
  	}


  	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8011be6:	2106      	movs	r1, #6
 8011be8:	2000      	movs	r0, #0
 8011bea:	f7fb fcf3 	bl	800d5d4 <otPlatRadioSetTransmitPower>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011bf2:	79fb      	ldrb	r3, [r7, #7]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d004      	beq.n	8011c02 <APP_THREAD_DeviceConfig+0xf2>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8011bf8:	79fb      	ldrb	r3, [r7, #7]
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	2002      	movs	r0, #2
 8011bfe:	f7ff ff27 	bl	8011a50 <APP_THREAD_Error>
  	}

  	otThreadSetChildTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 8011c02:	2103      	movs	r1, #3
 8011c04:	2000      	movs	r0, #0
 8011c06:	f7fb fd48 	bl	800d69a <otThreadSetChildTimeout>
//  	error = otThreadSetMasterKey(NULL, &masterKey);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otThreadSetNetworkName(NULL, networkName);
 8011c0a:	4923      	ldr	r1, [pc, #140]	; (8011c98 <APP_THREAD_DeviceConfig+0x188>)
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	f7fb fdc0 	bl	800d792 <otThreadSetNetworkName>
 8011c12:	4603      	mov	r3, r0
 8011c14:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011c16:	79fb      	ldrb	r3, [r7, #7]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d004      	beq.n	8011c26 <APP_THREAD_DeviceConfig+0x116>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8011c1c:	79fb      	ldrb	r3, [r7, #7]
 8011c1e:	4619      	mov	r1, r3
 8011c20:	2002      	movs	r0, #2
 8011c22:	f7ff ff15 	bl	8011a50 <APP_THREAD_Error>
//  	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otIp6SetEnabled(NULL, true);
 8011c26:	2101      	movs	r1, #1
 8011c28:	2000      	movs	r0, #0
 8011c2a:	f7fb f8c2 	bl	800cdb2 <otIp6SetEnabled>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011c32:	79fb      	ldrb	r3, [r7, #7]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d004      	beq.n	8011c42 <APP_THREAD_DeviceConfig+0x132>
  		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8011c38:	79fb      	ldrb	r3, [r7, #7]
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	2004      	movs	r0, #4
 8011c3e:	f7ff ff07 	bl	8011a50 <APP_THREAD_Error>
  	}

  	error = otThreadSetEnabled(NULL, true);
 8011c42:	2101      	movs	r1, #1
 8011c44:	2000      	movs	r0, #0
 8011c46:	f7fb fcf8 	bl	800d63a <otThreadSetEnabled>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8011c4e:	79fb      	ldrb	r3, [r7, #7]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d004      	beq.n	8011c5e <APP_THREAD_DeviceConfig+0x14e>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 8011c54:	79fb      	ldrb	r3, [r7, #7]
 8011c56:	4619      	mov	r1, r3
 8011c58:	2005      	movs	r0, #5
 8011c5a:	f7ff fef9 	bl	8011a50 <APP_THREAD_Error>
  	}

  	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 8011c5e:	f241 6133 	movw	r1, #5683	; 0x1633
 8011c62:	2000      	movs	r0, #0
 8011c64:	f7fa ff67 	bl	800cb36 <otCoapStart>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	71fb      	strb	r3, [r7, #7]
//  	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);

  	error = otCoapAddResource(NULL, &OT_Node_Cal_Ressource);
 8011c6c:	490b      	ldr	r1, [pc, #44]	; (8011c9c <APP_THREAD_DeviceConfig+0x18c>)
 8011c6e:	2000      	movs	r0, #0
 8011c70:	f7fa ff91 	bl	800cb96 <otCoapAddResource>
 8011c74:	4603      	mov	r3, r0
 8011c76:	71fb      	strb	r3, [r7, #7]
  	error = otCoapAddResource(NULL, &OT_Node_Spot_Ressource);
 8011c78:	4909      	ldr	r1, [pc, #36]	; (8011ca0 <APP_THREAD_DeviceConfig+0x190>)
 8011c7a:	2000      	movs	r0, #0
 8011c7c:	f7fa ff8b 	bl	800cb96 <otCoapAddResource>
 8011c80:	4603      	mov	r3, r0
 8011c82:	71fb      	strb	r3, [r7, #7]
  #ifndef DONGLE_CODE
//      error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
  #endif
  	// set default multicast address for border router
  //    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
  	otIp6AddressFromString("ff03::1", &multicastAddr);
 8011c84:	4907      	ldr	r1, [pc, #28]	; (8011ca4 <APP_THREAD_DeviceConfig+0x194>)
 8011c86:	4808      	ldr	r0, [pc, #32]	; (8011ca8 <APP_THREAD_DeviceConfig+0x198>)
 8011c88:	f7fb f940 	bl	800cf0c <otIp6AddressFromString>
  	// set UID in local state variable
  //	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
  //	 = UID64_BASE;
//  	stm32UID(msgSendMyIP.uid);
  /* USER CODE END DEVICECONFIG */
}
 8011c8c:	bf00      	nop
 8011c8e:	3708      	adds	r7, #8
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	08011cad 	.word	0x08011cad
 8011c98:	08013a24 	.word	0x08013a24
 8011c9c:	2000013c 	.word	0x2000013c
 8011ca0:	2000014c 	.word	0x2000014c
 8011ca4:	20005000 	.word	0x20005000
 8011ca8:	08013788 	.word	0x08013788

08011cac <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f003 0304 	and.w	r3, r3, #4
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d013      	beq.n	8011ce8 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 8011cc0:	2000      	movs	r0, #0
 8011cc2:	f7fb fd95 	bl	800d7f0 <otThreadGetDeviceRole>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	2b04      	cmp	r3, #4
 8011cca:	d80f      	bhi.n	8011cec <APP_THREAD_StateNotif+0x40>
 8011ccc:	a201      	add	r2, pc, #4	; (adr r2, 8011cd4 <APP_THREAD_StateNotif+0x28>)
 8011cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cd2:	bf00      	nop
 8011cd4:	08011ced 	.word	0x08011ced
 8011cd8:	08011ced 	.word	0x08011ced
 8011cdc:	08011ced 	.word	0x08011ced
 8011ce0:	08011ced 	.word	0x08011ced
 8011ce4:	08011ced 	.word	0x08011ced
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 8011ce8:	bf00      	nop
 8011cea:	e000      	b.n	8011cee <APP_THREAD_StateNotif+0x42>
      break;
 8011cec:	bf00      	nop
}
 8011cee:	bf00      	nop
 8011cf0:	3708      	adds	r7, #8
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop

08011cf8 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 8011d02:	bf00      	nop
 8011d04:	370c      	adds	r7, #12
 8011d06:	46bd      	mov	sp, r7
 8011d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0c:	4770      	bx	lr
	...

08011d10 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b088      	sub	sp, #32
 8011d14:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8011d16:	1d3b      	adds	r3, r7, #4
 8011d18:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8011d1a:	6978      	ldr	r0, [r7, #20]
 8011d1c:	f7fa f816 	bl	800bd4c <SHCI_GetWirelessFwInfo>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d004      	beq.n	8011d30 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8011d26:	2101      	movs	r1, #1
 8011d28:	2007      	movs	r0, #7
 8011d2a:	f7ff fe91 	bl	8011a50 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 8011d2e:	e03d      	b.n	8011dac <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8011d30:	4a20      	ldr	r2, [pc, #128]	; (8011db4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8011d32:	2101      	movs	r1, #1
 8011d34:	2000      	movs	r0, #0
 8011d36:	f7f0 fe07 	bl	8002948 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8011d3a:	4a1f      	ldr	r2, [pc, #124]	; (8011db8 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 8011d3c:	2101      	movs	r1, #1
 8011d3e:	2000      	movs	r0, #0
 8011d40:	f7f0 fe02 	bl	8002948 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	4619      	mov	r1, r3
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	785b      	ldrb	r3, [r3, #1]
 8011d4e:	461a      	mov	r2, r3
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	789b      	ldrb	r3, [r3, #2]
 8011d54:	9301      	str	r3, [sp, #4]
 8011d56:	9200      	str	r2, [sp, #0]
 8011d58:	460b      	mov	r3, r1
 8011d5a:	4a18      	ldr	r2, [pc, #96]	; (8011dbc <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 8011d5c:	2101      	movs	r1, #1
 8011d5e:	2000      	movs	r0, #0
 8011d60:	f7f0 fdf2 	bl	8002948 <logApplication>
    switch(p_wireless_info->StackType)
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	7a5b      	ldrb	r3, [r3, #9]
 8011d68:	2b11      	cmp	r3, #17
 8011d6a:	d009      	beq.n	8011d80 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 8011d6c:	2b50      	cmp	r3, #80	; 0x50
 8011d6e:	d00d      	beq.n	8011d8c <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 8011d70:	2b10      	cmp	r3, #16
 8011d72:	d111      	bne.n	8011d98 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 8011d74:	4a12      	ldr	r2, [pc, #72]	; (8011dc0 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 8011d76:	2101      	movs	r1, #1
 8011d78:	2000      	movs	r0, #0
 8011d7a:	f7f0 fde5 	bl	8002948 <logApplication>
      break;
 8011d7e:	e010      	b.n	8011da2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 8011d80:	4a10      	ldr	r2, [pc, #64]	; (8011dc4 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 8011d82:	2101      	movs	r1, #1
 8011d84:	2000      	movs	r0, #0
 8011d86:	f7f0 fddf 	bl	8002948 <logApplication>
      break;
 8011d8a:	e00a      	b.n	8011da2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 8011d8c:	4a0e      	ldr	r2, [pc, #56]	; (8011dc8 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 8011d8e:	2101      	movs	r1, #1
 8011d90:	2000      	movs	r0, #0
 8011d92:	f7f0 fdd9 	bl	8002948 <logApplication>
      break;
 8011d96:	e004      	b.n	8011da2 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8011d98:	2101      	movs	r1, #1
 8011d9a:	2007      	movs	r0, #7
 8011d9c:	f7ff fe58 	bl	8011a50 <APP_THREAD_Error>
      break;
 8011da0:	bf00      	nop
    APP_DBG("**********************************************************");
 8011da2:	4a04      	ldr	r2, [pc, #16]	; (8011db4 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8011da4:	2101      	movs	r1, #1
 8011da6:	2000      	movs	r0, #0
 8011da8:	f7f0 fdce 	bl	8002948 <logApplication>
}
 8011dac:	bf00      	nop
 8011dae:	3718      	adds	r7, #24
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}
 8011db4:	08013790 	.word	0x08013790
 8011db8:	080137cc 	.word	0x080137cc
 8011dbc:	080137e8 	.word	0x080137e8
 8011dc0:	08013800 	.word	0x08013800
 8011dc4:	08013818 	.word	0x08013818
 8011dc8:	08013830 	.word	0x08013830

08011dcc <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b082      	sub	sp, #8
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8011dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8011dd8:	2101      	movs	r1, #1
 8011dda:	2001      	movs	r0, #1
 8011ddc:	f7fb ff88 	bl	800dcf0 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8011de0:	f000 fb26 	bl	8012430 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8011de4:	e7f6      	b.n	8011dd4 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08011de6 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8011de6:	b580      	push	{r7, lr}
 8011de8:	b082      	sub	sp, #8
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8011dee:	f04f 32ff 	mov.w	r2, #4294967295
 8011df2:	2101      	movs	r1, #1
 8011df4:	2001      	movs	r0, #1
 8011df6:	f7fb ff7b 	bl	800dcf0 <osThreadFlagsWait>
    Send_CLI_To_M0();
 8011dfa:	f000 fa9b 	bl	8012334 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8011dfe:	e7f6      	b.n	8011dee <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08011e00 <APP_THREAD_CoapNodeSpotRequestHandler>:
//}

static void APP_THREAD_CoapNodeSpotRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b088      	sub	sp, #32
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	607a      	str	r2, [r7, #4]
 8011e0c:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		struct MeasMsg receivedMeasMsg;
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedMeasMsg, sizeof(receivedMeasMsg))
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f7fb f939 	bl	800d086 <otMessageGetOffset>
 8011e14:	4603      	mov	r3, r0
 8011e16:	4619      	mov	r1, r3
 8011e18:	f107 0210 	add.w	r2, r7, #16
 8011e1c:	230e      	movs	r3, #14
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f7fb f996 	bl	800d150 <otMessageRead>
 8011e24:	4603      	mov	r3, r0
 8011e26:	2b0e      	cmp	r3, #14
 8011e28:	d119      	bne.n	8011e5e <APP_THREAD_CoapNodeSpotRequestHandler+0x5e>
				== sizeof(receivedMeasMsg)) {


			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8011e2a:	68b8      	ldr	r0, [r7, #8]
 8011e2c:	f7fa fd64 	bl	800c8f8 <otCoapHeaderGetCode>
 8011e30:	4603      	mov	r3, r0
 8011e32:	2b03      	cmp	r3, #3
 8011e34:	d109      	bne.n	8011e4a <APP_THREAD_CoapNodeSpotRequestHandler+0x4a>
			{
				measMsgReceivedFromNode(&receivedMeasMsg);
 8011e36:	f107 0310 	add.w	r3, r7, #16
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7f0 fc4a 	bl	80026d4 <measMsgReceivedFromNode>
				toggleLed(0,0,1);
 8011e40:	2201      	movs	r2, #1
 8011e42:	2100      	movs	r1, #0
 8011e44:	2000      	movs	r0, #0
 8011e46:	f7f0 f837 	bl	8001eb8 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8011e4a:	68b8      	ldr	r0, [r7, #8]
 8011e4c:	f7fa fd26 	bl	800c89c <otCoapHeaderGetType>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d103      	bne.n	8011e5e <APP_THREAD_CoapNodeSpotRequestHandler+0x5e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 8011e56:	6839      	ldr	r1, [r7, #0]
 8011e58:	68b8      	ldr	r0, [r7, #8]
 8011e5a:	f000 f843 	bl	8011ee4 <APP_THREAD_CoapSendDataResponse>
			}

		}
}
 8011e5e:	bf00      	nop
 8011e60:	3720      	adds	r7, #32
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}
	...

08011e68 <APP_THREAD_CoapNodeCalRequestHandler>:

struct CalMsg receivedCalMsg;
static void APP_THREAD_CoapNodeCalRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	60f8      	str	r0, [r7, #12]
 8011e70:	60b9      	str	r1, [r7, #8]
 8011e72:	607a      	str	r2, [r7, #4]
 8011e74:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedCalMsg, sizeof(receivedCalMsg))
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f7fb f905 	bl	800d086 <otMessageGetOffset>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	4619      	mov	r1, r3
 8011e80:	2308      	movs	r3, #8
 8011e82:	4a17      	ldr	r2, [pc, #92]	; (8011ee0 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f7fb f963 	bl	800d150 <otMessageRead>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	2b08      	cmp	r3, #8
 8011e8e:	d122      	bne.n	8011ed6 <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
				== sizeof(receivedCalMsg)) {

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8011e90:	68b8      	ldr	r0, [r7, #8]
 8011e92:	f7fa fd31 	bl	800c8f8 <otCoapHeaderGetCode>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b03      	cmp	r3, #3
 8011e9a:	d107      	bne.n	8011eac <APP_THREAD_CoapNodeCalRequestHandler+0x44>
			{
				if(receivedCalMsg.cal_fcn == CALIBRATION_START_COMMAND){
 8011e9c:	4b10      	ldr	r3, [pc, #64]	; (8011ee0 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 8011e9e:	789b      	ldrb	r3, [r3, #2]
 8011ea0:	2b01      	cmp	r3, #1
					// TODO: start calibration

				}else if(receivedCalMsg.cal_fcn == CALIBRATION_STOP_COMMAND){
					// TODO: stop calibration
				}
				toggleLed(0,0,1);
 8011ea2:	2201      	movs	r2, #1
 8011ea4:	2100      	movs	r1, #0
 8011ea6:	2000      	movs	r0, #0
 8011ea8:	f7f0 f806 	bl	8001eb8 <toggleLed>
			}

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET)
 8011eac:	68b8      	ldr	r0, [r7, #8]
 8011eae:	f7fa fd23 	bl	800c8f8 <otCoapHeaderGetCode>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	d104      	bne.n	8011ec2 <APP_THREAD_CoapNodeCalRequestHandler+0x5a>
					// 		TODO this can be done in an ACK but doing it now in a separate PUT request to the nodeSpot resource
#ifdef SOLAR_SENSOR_NODE
					sendPowerMeasurement(pMessageInfo->mPeerAddr, receivedCalMsg.angle_1, receivedCalMsg.angle_2);
#endif
				}
				toggleLed(1,0,0);
 8011eb8:	2200      	movs	r2, #0
 8011eba:	2100      	movs	r1, #0
 8011ebc:	2001      	movs	r0, #1
 8011ebe:	f7ef fffb 	bl	8001eb8 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8011ec2:	68b8      	ldr	r0, [r7, #8]
 8011ec4:	f7fa fcea 	bl	800c89c <otCoapHeaderGetType>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d103      	bne.n	8011ed6 <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 8011ece:	6839      	ldr	r1, [r7, #0]
 8011ed0:	68b8      	ldr	r0, [r7, #8]
 8011ed2:	f000 f807 	bl	8011ee4 <APP_THREAD_CoapSendDataResponse>
//
//		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
//			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
//		}

}
 8011ed6:	bf00      	nop
 8011ed8:	3710      	adds	r7, #16
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	2000501c 	.word	0x2000501c

08011ee4 <APP_THREAD_CoapSendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_CoapSendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 8011ee4:	b590      	push	{r4, r7, lr}
 8011ee6:	b085      	sub	sp, #20
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	73fb      	strb	r3, [r7, #15]

  do{
    APP_DBG(" ********* APP_THREAD_CoapSendDataResponse ********* ");
 8011ef2:	4a25      	ldr	r2, [pc, #148]	; (8011f88 <APP_THREAD_CoapSendDataResponse+0xa4>)
 8011ef4:	2101      	movs	r1, #1
 8011ef6:	2000      	movs	r0, #0
 8011ef8:	f7f0 fd26 	bl	8002948 <logApplication>
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8011efc:	2244      	movs	r2, #68	; 0x44
 8011efe:	2120      	movs	r1, #32
 8011f00:	4822      	ldr	r0, [pc, #136]	; (8011f8c <APP_THREAD_CoapSendDataResponse+0xa8>)
 8011f02:	f7fa fb6f 	bl	800c5e4 <otCoapHeaderInit>
    otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f7fa fd24 	bl	800c954 <otCoapHeaderGetMessageId>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	4619      	mov	r1, r3
 8011f10:	481e      	ldr	r0, [pc, #120]	; (8011f8c <APP_THREAD_CoapSendDataResponse+0xa8>)
 8011f12:	f7fa fc93 	bl	800c83c <otCoapHeaderSetMessageId>
    otCoapHeaderSetToken(&OT_Header,
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7fa fd78 	bl	800ca0c <otCoapHeaderGetToken>
 8011f1c:	4604      	mov	r4, r0
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f7fa fd46 	bl	800c9b0 <otCoapHeaderGetTokenLength>
 8011f24:	4603      	mov	r3, r0
 8011f26:	461a      	mov	r2, r3
 8011f28:	4621      	mov	r1, r4
 8011f2a:	4818      	ldr	r0, [pc, #96]	; (8011f8c <APP_THREAD_CoapSendDataResponse+0xa8>)
 8011f2c:	f7fa fb8f 	bl	800c64e <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8011f30:	4916      	ldr	r1, [pc, #88]	; (8011f8c <APP_THREAD_CoapSendDataResponse+0xa8>)
 8011f32:	2000      	movs	r0, #0
 8011f34:	f7fa fd97 	bl	800ca66 <otCoapNewMessage>
 8011f38:	4602      	mov	r2, r0
 8011f3a:	4b15      	ldr	r3, [pc, #84]	; (8011f90 <APP_THREAD_CoapSendDataResponse+0xac>)
 8011f3c:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 8011f3e:	4b14      	ldr	r3, [pc, #80]	; (8011f90 <APP_THREAD_CoapSendDataResponse+0xac>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d106      	bne.n	8011f54 <APP_THREAD_CoapSendDataResponse+0x70>
    {
      APP_DBG("WARNING : pOT_Message = NULL ! -> exit now");
 8011f46:	4a13      	ldr	r2, [pc, #76]	; (8011f94 <APP_THREAD_CoapSendDataResponse+0xb0>)
 8011f48:	2101      	movs	r1, #1
 8011f4a:	2000      	movs	r0, #0
 8011f4c:	f7f0 fcfc 	bl	8002948 <logApplication>
      break;
 8011f50:	bf00      	nop
    {
      otMessageFree(pOT_Message);
//      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 8011f52:	e014      	b.n	8011f7e <APP_THREAD_CoapSendDataResponse+0x9a>
    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 8011f54:	4b0e      	ldr	r3, [pc, #56]	; (8011f90 <APP_THREAD_CoapSendDataResponse+0xac>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	683a      	ldr	r2, [r7, #0]
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	2000      	movs	r0, #0
 8011f5e:	f7fa fe49 	bl	800cbf4 <otCoapSendResponse>
 8011f62:	4603      	mov	r3, r0
 8011f64:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 8011f66:	7bfb      	ldrb	r3, [r7, #15]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d008      	beq.n	8011f7e <APP_THREAD_CoapSendDataResponse+0x9a>
 8011f6c:	4b08      	ldr	r3, [pc, #32]	; (8011f90 <APP_THREAD_CoapSendDataResponse+0xac>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d004      	beq.n	8011f7e <APP_THREAD_CoapSendDataResponse+0x9a>
      otMessageFree(pOT_Message);
 8011f74:	4b06      	ldr	r3, [pc, #24]	; (8011f90 <APP_THREAD_CoapSendDataResponse+0xac>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7fb f859 	bl	800d030 <otMessageFree>
}
 8011f7e:	bf00      	nop
 8011f80:	3714      	adds	r7, #20
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd90      	pop	{r4, r7, pc}
 8011f86:	bf00      	nop
 8011f88:	0801385c 	.word	0x0801385c
 8011f8c:	20004b14 	.word	0x20004b14
 8011f90:	20004ac8 	.word	0x20004ac8
 8011f94:	08013894 	.word	0x08013894

08011f98 <APP_THREAD_SendCoapMsg>:
//		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
//	}
//}

void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, const char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 8011f98:	b590      	push	{r4, r7, lr}
 8011f9a:	b087      	sub	sp, #28
 8011f9c:	af02      	add	r7, sp, #8
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	607a      	str	r2, [r7, #4]
 8011fa2:	603b      	str	r3, [r7, #0]
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	817b      	strh	r3, [r7, #10]
	/************ SET MESSAGE INFO (WHERE THE PACKET GOES) ************/
	// https://openthread.io/reference/struct/ot-message-info.html#structot_message_info
	do {
		// REMOVE BELOW CALLS (ONLY FOR DEBUGGING)
			  myRloc16 = otThreadGetRloc16(NULL);
 8011fa8:	2000      	movs	r0, #0
 8011faa:	f7fb fc4a 	bl	800d842 <otThreadGetRloc16>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	4b7e      	ldr	r3, [pc, #504]	; (80121ac <APP_THREAD_SendCoapMsg+0x214>)
 8011fb4:	801a      	strh	r2, [r3, #0]
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	f7fa ff58 	bl	800ce6c <otIp6GetUnicastAddresses>
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	4b7c      	ldr	r3, [pc, #496]	; (80121b0 <APP_THREAD_SendCoapMsg+0x218>)
 8011fc0:	601a      	str	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 8011fc2:	2000      	movs	r0, #0
 8011fc4:	f7fa ff25 	bl	800ce12 <otIp6IsEnabled>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	461a      	mov	r2, r3
 8011fcc:	4b79      	ldr	r3, [pc, #484]	; (80121b4 <APP_THREAD_SendCoapMsg+0x21c>)
 8011fce:	701a      	strb	r2, [r3, #0]
			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
 8011fd0:	2000      	movs	r0, #0
 8011fd2:	f7fa ff73 	bl	800cebc <otIp6GetMulticastAddresses>
 8011fd6:	4602      	mov	r2, r0
 8011fd8:	4b77      	ldr	r3, [pc, #476]	; (80121b8 <APP_THREAD_SendCoapMsg+0x220>)
 8011fda:	601a      	str	r2, [r3, #0]
			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
 8011fdc:	2000      	movs	r0, #0
 8011fde:	f7fb fb88 	bl	800d6f2 <otThreadGetMeshLocalEid>
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	4b75      	ldr	r3, [pc, #468]	; (80121bc <APP_THREAD_SendCoapMsg+0x224>)
 8011fe6:	601a      	str	r2, [r3, #0]
			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
 8011fe8:	2000      	movs	r0, #0
 8011fea:	f7fb fbaa 	bl	800d742 <otThreadGetLinkLocalIp6Address>
 8011fee:	4602      	mov	r2, r0
 8011ff0:	4b73      	ldr	r3, [pc, #460]	; (80121c0 <APP_THREAD_SendCoapMsg+0x228>)
 8011ff2:	601a      	str	r2, [r3, #0]

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8011ff4:	222c      	movs	r2, #44	; 0x2c
 8011ff6:	2100      	movs	r1, #0
 8011ff8:	4872      	ldr	r0, [pc, #456]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 8011ffa:	f001 fa8c 	bl	8013516 <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 8011ffe:	897b      	ldrh	r3, [r7, #10]
 8012000:	2b64      	cmp	r3, #100	; 0x64
 8012002:	d914      	bls.n	801202e <APP_THREAD_SendCoapMsg+0x96>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8012004:	4b6f      	ldr	r3, [pc, #444]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 8012006:	4a70      	ldr	r2, [pc, #448]	; (80121c8 <APP_THREAD_SendCoapMsg+0x230>)
 8012008:	f103 0410 	add.w	r4, r3, #16
 801200c:	4613      	mov	r3, r2
 801200e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8012014:	2000      	movs	r0, #0
 8012016:	f7fb fb6c 	bl	800d6f2 <otThreadGetMeshLocalEid>
 801201a:	4602      	mov	r2, r0
 801201c:	4b69      	ldr	r3, [pc, #420]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 801201e:	461c      	mov	r4, r3
 8012020:	4613      	mov	r3, r2
 8012022:	6818      	ldr	r0, [r3, #0]
 8012024:	6859      	ldr	r1, [r3, #4]
 8012026:	689a      	ldr	r2, [r3, #8]
 8012028:	68db      	ldr	r3, [r3, #12]
 801202a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801202c:	e015      	b.n	801205a <APP_THREAD_SendCoapMsg+0xc2>
//			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 801202e:	4b65      	ldr	r3, [pc, #404]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 8012030:	4a66      	ldr	r2, [pc, #408]	; (80121cc <APP_THREAD_SendCoapMsg+0x234>)
 8012032:	f103 0410 	add.w	r4, r3, #16
 8012036:	4613      	mov	r3, r2
 8012038:	6818      	ldr	r0, [r3, #0]
 801203a:	6859      	ldr	r1, [r3, #4]
 801203c:	689a      	ldr	r2, [r3, #8]
 801203e:	68db      	ldr	r3, [r3, #12]
 8012040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8012042:	2000      	movs	r0, #0
 8012044:	f7fb fb55 	bl	800d6f2 <otThreadGetMeshLocalEid>
 8012048:	4602      	mov	r2, r0
 801204a:	4b5e      	ldr	r3, [pc, #376]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 801204c:	461c      	mov	r4, r3
 801204e:	4613      	mov	r3, r2
 8012050:	6818      	ldr	r0, [r3, #0]
 8012052:	6859      	ldr	r1, [r3, #4]
 8012054:	689a      	ldr	r2, [r3, #8]
 8012056:	68db      	ldr	r3, [r3, #12]
 8012058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 801205a:	4b5a      	ldr	r3, [pc, #360]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 801205c:	2201      	movs	r2, #1
 801205e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 8012062:	4b58      	ldr	r3, [pc, #352]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 8012064:	f241 6233 	movw	r2, #5683	; 0x1633
 8012068:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 801206a:	4b56      	ldr	r3, [pc, #344]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 801206c:	2240      	movs	r2, #64	; 0x40
 801206e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 8012072:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d009      	beq.n	801208e <APP_THREAD_SendCoapMsg+0xf6>
 801207a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801207e:	2b03      	cmp	r3, #3
 8012080:	d105      	bne.n	801208e <APP_THREAD_SendCoapMsg+0xf6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 8012082:	2203      	movs	r2, #3
 8012084:	2100      	movs	r1, #0
 8012086:	4852      	ldr	r0, [pc, #328]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 8012088:	f7fa faac 	bl	800c5e4 <otCoapHeaderInit>
 801208c:	e04a      	b.n	8012124 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 801208e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d009      	beq.n	80120aa <APP_THREAD_SendCoapMsg+0x112>
 8012096:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801209a:	2b01      	cmp	r3, #1
 801209c:	d105      	bne.n	80120aa <APP_THREAD_SendCoapMsg+0x112>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 801209e:	2201      	movs	r2, #1
 80120a0:	2100      	movs	r1, #0
 80120a2:	484b      	ldr	r0, [pc, #300]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 80120a4:	f7fa fa9e 	bl	800c5e4 <otCoapHeaderInit>
 80120a8:	e03c      	b.n	8012124 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 80120aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d009      	beq.n	80120c6 <APP_THREAD_SendCoapMsg+0x12e>
 80120b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80120b6:	2b02      	cmp	r3, #2
 80120b8:	d105      	bne.n	80120c6 <APP_THREAD_SendCoapMsg+0x12e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 80120ba:	2202      	movs	r2, #2
 80120bc:	2100      	movs	r1, #0
 80120be:	4844      	ldr	r0, [pc, #272]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 80120c0:	f7fa fa90 	bl	800c5e4 <otCoapHeaderInit>
 80120c4:	e02e      	b.n	8012124 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 80120c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d109      	bne.n	80120e2 <APP_THREAD_SendCoapMsg+0x14a>
 80120ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80120d2:	2b03      	cmp	r3, #3
 80120d4:	d105      	bne.n	80120e2 <APP_THREAD_SendCoapMsg+0x14a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 80120d6:	2203      	movs	r2, #3
 80120d8:	2110      	movs	r1, #16
 80120da:	483d      	ldr	r0, [pc, #244]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 80120dc:	f7fa fa82 	bl	800c5e4 <otCoapHeaderInit>
 80120e0:	e020      	b.n	8012124 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 80120e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d109      	bne.n	80120fe <APP_THREAD_SendCoapMsg+0x166>
 80120ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80120ee:	2b01      	cmp	r3, #1
 80120f0:	d105      	bne.n	80120fe <APP_THREAD_SendCoapMsg+0x166>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 80120f2:	2201      	movs	r2, #1
 80120f4:	2110      	movs	r1, #16
 80120f6:	4836      	ldr	r0, [pc, #216]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 80120f8:	f7fa fa74 	bl	800c5e4 <otCoapHeaderInit>
 80120fc:	e012      	b.n	8012124 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 80120fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d109      	bne.n	801211a <APP_THREAD_SendCoapMsg+0x182>
 8012106:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801210a:	2b02      	cmp	r3, #2
 801210c:	d105      	bne.n	801211a <APP_THREAD_SendCoapMsg+0x182>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 801210e:	2202      	movs	r2, #2
 8012110:	2110      	movs	r1, #16
 8012112:	482f      	ldr	r0, [pc, #188]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 8012114:	f7fa fa66 	bl	800c5e4 <otCoapHeaderInit>
 8012118:	e004      	b.n	8012124 <APP_THREAD_SendCoapMsg+0x18c>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 801211a:	2102      	movs	r1, #2
 801211c:	482c      	ldr	r0, [pc, #176]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 801211e:	f7fa faca 	bl	800c6b6 <otCoapHeaderGenerateToken>
 8012122:	e040      	b.n	80121a6 <APP_THREAD_SendCoapMsg+0x20e>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8012124:	6839      	ldr	r1, [r7, #0]
 8012126:	482a      	ldr	r0, [pc, #168]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 8012128:	f7fa fb28 	bl	800c77c <otCoapHeaderAppendUriPathOptions>
 801212c:	4603      	mov	r3, r0
 801212e:	461a      	mov	r2, r3
 8012130:	4b28      	ldr	r3, [pc, #160]	; (80121d4 <APP_THREAD_SendCoapMsg+0x23c>)
 8012132:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 8012134:	212a      	movs	r1, #42	; 0x2a
 8012136:	4826      	ldr	r0, [pc, #152]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 8012138:	f7fa faed 	bl	800c716 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 801213c:	897b      	ldrh	r3, [r7, #10]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d002      	beq.n	8012148 <APP_THREAD_SendCoapMsg+0x1b0>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 8012142:	4823      	ldr	r0, [pc, #140]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 8012144:	f7fa fb4c 	bl	800c7e0 <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 8012148:	4921      	ldr	r1, [pc, #132]	; (80121d0 <APP_THREAD_SendCoapMsg+0x238>)
 801214a:	2000      	movs	r0, #0
 801214c:	f7fa fc8b 	bl	800ca66 <otCoapNewMessage>
 8012150:	4602      	mov	r2, r0
 8012152:	4b21      	ldr	r3, [pc, #132]	; (80121d8 <APP_THREAD_SendCoapMsg+0x240>)
 8012154:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 8012156:	897b      	ldrh	r3, [r7, #10]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d00a      	beq.n	8012172 <APP_THREAD_SendCoapMsg+0x1da>
			error = otMessageAppend(pOT_Message, message, msgSize);
 801215c:	4b1e      	ldr	r3, [pc, #120]	; (80121d8 <APP_THREAD_SendCoapMsg+0x240>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	897a      	ldrh	r2, [r7, #10]
 8012162:	68f9      	ldr	r1, [r7, #12]
 8012164:	4618      	mov	r0, r3
 8012166:	f7fa ffbc 	bl	800d0e2 <otMessageAppend>
 801216a:	4603      	mov	r3, r0
 801216c:	461a      	mov	r2, r3
 801216e:	4b19      	ldr	r3, [pc, #100]	; (80121d4 <APP_THREAD_SendCoapMsg+0x23c>)
 8012170:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 8012172:	4b19      	ldr	r3, [pc, #100]	; (80121d8 <APP_THREAD_SendCoapMsg+0x240>)
 8012174:	6819      	ldr	r1, [r3, #0]
 8012176:	2300      	movs	r3, #0
 8012178:	9300      	str	r3, [sp, #0]
 801217a:	2300      	movs	r3, #0
 801217c:	4a11      	ldr	r2, [pc, #68]	; (80121c4 <APP_THREAD_SendCoapMsg+0x22c>)
 801217e:	2000      	movs	r0, #0
 8012180:	f7fa fc9f 	bl	800cac2 <otCoapSendRequest>
 8012184:	4603      	mov	r3, r0
 8012186:	461a      	mov	r2, r3
 8012188:	4b12      	ldr	r3, [pc, #72]	; (80121d4 <APP_THREAD_SendCoapMsg+0x23c>)
 801218a:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 801218c:	4b11      	ldr	r3, [pc, #68]	; (80121d4 <APP_THREAD_SendCoapMsg+0x23c>)
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d008      	beq.n	80121a6 <APP_THREAD_SendCoapMsg+0x20e>
 8012194:	4b10      	ldr	r3, [pc, #64]	; (80121d8 <APP_THREAD_SendCoapMsg+0x240>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d004      	beq.n	80121a6 <APP_THREAD_SendCoapMsg+0x20e>
			otMessageFree(pOT_Message);
 801219c:	4b0e      	ldr	r3, [pc, #56]	; (80121d8 <APP_THREAD_SendCoapMsg+0x240>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7fa ff45 	bl	800d030 <otMessageFree>
		}

	} while (false);
}
 80121a6:	3714      	adds	r7, #20
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd90      	pop	{r4, r7, pc}
 80121ac:	20005028 	.word	0x20005028
 80121b0:	2000502c 	.word	0x2000502c
 80121b4:	20005010 	.word	0x20005010
 80121b8:	20004ff8 	.word	0x20004ff8
 80121bc:	20005024 	.word	0x20005024
 80121c0:	20004ffc 	.word	0x20004ffc
 80121c4:	20004ae8 	.word	0x20004ae8
 80121c8:	20004ad0 	.word	0x20004ad0
 80121cc:	20005000 	.word	0x20005000
 80121d0:	20004b14 	.word	0x20004b14
 80121d4:	20004acc 	.word	0x20004acc
 80121d8:	20004ac8 	.word	0x20004ac8

080121dc <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 80121dc:	b480      	push	{r7}
 80121de:	b083      	sub	sp, #12
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 80121e4:	4a04      	ldr	r2, [pc, #16]	; (80121f8 <APP_THREAD_RegisterCmdBuffer+0x1c>)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	6013      	str	r3, [r2, #0]
}
 80121ea:	bf00      	nop
 80121ec:	370c      	adds	r7, #12
 80121ee:	46bd      	mov	sp, r7
 80121f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f4:	4770      	bx	lr
 80121f6:	bf00      	nop
 80121f8:	20004ab0 	.word	0x20004ab0

080121fc <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 80121fc:	b480      	push	{r7}
 80121fe:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8012200:	4b03      	ldr	r3, [pc, #12]	; (8012210 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	330c      	adds	r3, #12
}
 8012206:	4618      	mov	r0, r3
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr
 8012210:	20004ab0 	.word	0x20004ab0

08012214 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8012214:	b480      	push	{r7}
 8012216:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 8012218:	4b03      	ldr	r3, [pc, #12]	; (8012228 <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	330b      	adds	r3, #11
}
 801221e:	4618      	mov	r0, r3
 8012220:	46bd      	mov	sp, r7
 8012222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012226:	4770      	bx	lr
 8012228:	20004ab0 	.word	0x20004ab0

0801222c <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 801222c:	b480      	push	{r7}
 801222e:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 8012230:	4b03      	ldr	r3, [pc, #12]	; (8012240 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	330b      	adds	r3, #11
}
 8012236:	4618      	mov	r0, r3
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr
 8012240:	20004ab4 	.word	0x20004ab4

08012244 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 801224a:	4b0f      	ldr	r3, [pc, #60]	; (8012288 <Ot_Cmd_Transfer+0x44>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	2200      	movs	r2, #0
 8012250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012254:	725a      	strb	r2, [r3, #9]
 8012256:	2200      	movs	r2, #0
 8012258:	f042 0202 	orr.w	r2, r2, #2
 801225c:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 801225e:	4b0a      	ldr	r3, [pc, #40]	; (8012288 <Ot_Cmd_Transfer+0x44>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	330c      	adds	r3, #12
 8012264:	685b      	ldr	r3, [r3, #4]
 8012266:	3302      	adds	r3, #2
 8012268:	009b      	lsls	r3, r3, #2
 801226a:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 801226c:	4b06      	ldr	r3, [pc, #24]	; (8012288 <Ot_Cmd_Transfer+0x44>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	687a      	ldr	r2, [r7, #4]
 8012272:	b2d2      	uxtb	r2, r2
 8012274:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 8012276:	f7fa f85f 	bl	800c338 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 801227a:	f000 f829 	bl	80122d0 <Wait_Getting_Ack_From_M0>
}
 801227e:	bf00      	nop
 8012280:	3708      	adds	r7, #8
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
 8012286:	bf00      	nop
 8012288:	20004ab0 	.word	0x20004ab0

0801228c <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8012294:	f000 f82e 	bl	80122f4 <Receive_Ack_From_M0>
}
 8012298:	bf00      	nop
 801229a:	3708      	adds	r7, #8
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 80122a8:	4a04      	ldr	r2, [pc, #16]	; (80122bc <TL_THREAD_NotReceived+0x1c>)
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 80122ae:	f000 f82d 	bl	801230c <Receive_Notification_From_M0>
}
 80122b2:	bf00      	nop
 80122b4:	3708      	adds	r7, #8
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	20004ab4 	.word	0x20004ab4

080122c0 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 80122c0:	b480      	push	{r7}
 80122c2:	af00      	add	r7, sp, #0

}
 80122c4:	bf00      	nop
 80122c6:	46bd      	mov	sp, r7
 80122c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122cc:	4770      	bx	lr
	...

080122d0 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 80122d0:	b480      	push	{r7}
 80122d2:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 80122d4:	bf00      	nop
 80122d6:	4b06      	ldr	r3, [pc, #24]	; (80122f0 <Wait_Getting_Ack_From_M0+0x20>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d0fb      	beq.n	80122d6 <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 80122de:	4b04      	ldr	r3, [pc, #16]	; (80122f0 <Wait_Getting_Ack_From_M0+0x20>)
 80122e0:	2200      	movs	r2, #0
 80122e2:	601a      	str	r2, [r3, #0]
}
 80122e4:	bf00      	nop
 80122e6:	46bd      	mov	sp, r7
 80122e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ec:	4770      	bx	lr
 80122ee:	bf00      	nop
 80122f0:	20004abc 	.word	0x20004abc

080122f4 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 80122f4:	b480      	push	{r7}
 80122f6:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 80122f8:	4b03      	ldr	r3, [pc, #12]	; (8012308 <Receive_Ack_From_M0+0x14>)
 80122fa:	2201      	movs	r2, #1
 80122fc:	601a      	str	r2, [r3, #0]
}
 80122fe:	bf00      	nop
 8012300:	46bd      	mov	sp, r7
 8012302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012306:	4770      	bx	lr
 8012308:	20004abc 	.word	0x20004abc

0801230c <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8012310:	4b06      	ldr	r3, [pc, #24]	; (801232c <Receive_Notification_From_M0+0x20>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	3301      	adds	r3, #1
 8012316:	4a05      	ldr	r2, [pc, #20]	; (801232c <Receive_Notification_From_M0+0x20>)
 8012318:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 801231a:	4b05      	ldr	r3, [pc, #20]	; (8012330 <Receive_Notification_From_M0+0x24>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	2101      	movs	r1, #1
 8012320:	4618      	mov	r0, r3
 8012322:	f7fb fc83 	bl	800dc2c <osThreadFlagsSet>
}
 8012326:	bf00      	nop
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	20004ab8 	.word	0x20004ab8
 8012330:	20004ac0 	.word	0x20004ac0

08012334 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 8012338:	22ff      	movs	r2, #255	; 0xff
 801233a:	2100      	movs	r1, #0
 801233c:	4812      	ldr	r0, [pc, #72]	; (8012388 <Send_CLI_To_M0+0x54>)
 801233e:	f001 f8ea 	bl	8013516 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 8012342:	4b12      	ldr	r3, [pc, #72]	; (801238c <Send_CLI_To_M0+0x58>)
 8012344:	881b      	ldrh	r3, [r3, #0]
 8012346:	b29b      	uxth	r3, r3
 8012348:	461a      	mov	r2, r3
 801234a:	4911      	ldr	r1, [pc, #68]	; (8012390 <Send_CLI_To_M0+0x5c>)
 801234c:	480e      	ldr	r0, [pc, #56]	; (8012388 <Send_CLI_To_M0+0x54>)
 801234e:	f001 f8d7 	bl	8013500 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 8012352:	4b0e      	ldr	r3, [pc, #56]	; (801238c <Send_CLI_To_M0+0x58>)
 8012354:	881b      	ldrh	r3, [r3, #0]
 8012356:	b29b      	uxth	r3, r3
 8012358:	b2da      	uxtb	r2, r3
 801235a:	4b0e      	ldr	r3, [pc, #56]	; (8012394 <Send_CLI_To_M0+0x60>)
 801235c:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 801235e:	4b0d      	ldr	r3, [pc, #52]	; (8012394 <Send_CLI_To_M0+0x60>)
 8012360:	2200      	movs	r2, #0
 8012362:	725a      	strb	r2, [r3, #9]
 8012364:	2200      	movs	r2, #0
 8012366:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 8012368:	4b0b      	ldr	r3, [pc, #44]	; (8012398 <Send_CLI_To_M0+0x64>)
 801236a:	2200      	movs	r2, #0
 801236c:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 801236e:	4b07      	ldr	r3, [pc, #28]	; (801238c <Send_CLI_To_M0+0x58>)
 8012370:	2200      	movs	r2, #0
 8012372:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 8012374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012378:	2100      	movs	r1, #0
 801237a:	4805      	ldr	r0, [pc, #20]	; (8012390 <Send_CLI_To_M0+0x5c>)
 801237c:	f001 f8cb 	bl	8013516 <memset>

  TL_CLI_SendCmd();
 8012380:	f7f9 ffe8 	bl	800c354 <TL_CLI_SendCmd>
}
 8012384:	bf00      	nop
 8012386:	bd80      	pop	{r7, pc}
 8012388:	20030a58 	.word	0x20030a58
 801238c:	20004aac 	.word	0x20004aac
 8012390:	200049ac 	.word	0x200049ac
 8012394:	20030a4c 	.word	0x20030a4c
 8012398:	20004aae 	.word	0x20004aae

0801239c <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 80123a0:	f7f9 fff4 	bl	800c38c <TL_THREAD_CliSendAck>
}
 80123a4:	bf00      	nop
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 80123ac:	4a04      	ldr	r2, [pc, #16]	; (80123c0 <APP_THREAD_Init_UART_CLI+0x18>)
 80123ae:	2100      	movs	r1, #0
 80123b0:	4804      	ldr	r0, [pc, #16]	; (80123c4 <APP_THREAD_Init_UART_CLI+0x1c>)
 80123b2:	f7fb fb95 	bl	800dae0 <osThreadNew>
 80123b6:	4602      	mov	r2, r0
 80123b8:	4b03      	ldr	r3, [pc, #12]	; (80123c8 <APP_THREAD_Init_UART_CLI+0x20>)
 80123ba:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 80123bc:	bf00      	nop
 80123be:	bd80      	pop	{r7, pc}
 80123c0:	08013a00 	.word	0x08013a00
 80123c4:	08011de7 	.word	0x08011de7
 80123c8:	20004ac4 	.word	0x20004ac4

080123cc <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 80123d0:	4b06      	ldr	r3, [pc, #24]	; (80123ec <APP_THREAD_TL_THREAD_INIT+0x20>)
 80123d2:	4a07      	ldr	r2, [pc, #28]	; (80123f0 <APP_THREAD_TL_THREAD_INIT+0x24>)
 80123d4:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 80123d6:	4b05      	ldr	r3, [pc, #20]	; (80123ec <APP_THREAD_TL_THREAD_INIT+0x20>)
 80123d8:	4a06      	ldr	r2, [pc, #24]	; (80123f4 <APP_THREAD_TL_THREAD_INIT+0x28>)
 80123da:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 80123dc:	4b03      	ldr	r3, [pc, #12]	; (80123ec <APP_THREAD_TL_THREAD_INIT+0x20>)
 80123de:	4a06      	ldr	r2, [pc, #24]	; (80123f8 <APP_THREAD_TL_THREAD_INIT+0x2c>)
 80123e0:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 80123e2:	4802      	ldr	r0, [pc, #8]	; (80123ec <APP_THREAD_TL_THREAD_INIT+0x20>)
 80123e4:	f7f9 ff8c 	bl	800c300 <TL_THREAD_Init>
}
 80123e8:	bf00      	nop
 80123ea:	bd80      	pop	{r7, pc}
 80123ec:	200300d4 	.word	0x200300d4
 80123f0:	20030834 	.word	0x20030834
 80123f4:	20030940 	.word	0x20030940
 80123f8:	20030a4c 	.word	0x20030a4c

080123fc <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b084      	sub	sp, #16
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	7adb      	ldrb	r3, [r3, #11]
 801240c:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	330c      	adds	r3, #12
 8012412:	4906      	ldr	r1, [pc, #24]	; (801242c <TL_THREAD_CliNotReceived+0x30>)
 8012414:	4618      	mov	r0, r3
 8012416:	f7ed feb3 	bl	8000180 <strcmp>
 801241a:	4603      	mov	r3, r0
 801241c:	2b00      	cmp	r3, #0
 801241e:	d101      	bne.n	8012424 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8012420:	f7ff ffbc 	bl	801239c <Send_CLI_Ack_For_OT>
  }
}
 8012424:	bf00      	nop
 8012426:	3710      	adds	r7, #16
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}
 801242c:	080138c0 	.word	0x080138c0

08012430 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8012434:	4b09      	ldr	r3, [pc, #36]	; (801245c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d00d      	beq.n	8012458 <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 801243c:	4b07      	ldr	r3, [pc, #28]	; (801245c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	2b01      	cmp	r3, #1
 8012442:	d904      	bls.n	801244e <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8012444:	2100      	movs	r1, #0
 8012446:	2000      	movs	r0, #0
 8012448:	f7ff fb02 	bl	8011a50 <APP_THREAD_Error>
 801244c:	e001      	b.n	8012452 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 801244e:	f7fa febb 	bl	800d1c8 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8012452:	4b02      	ldr	r3, [pc, #8]	; (801245c <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8012454:	2200      	movs	r2, #0
 8012456:	601a      	str	r2, [r3, #0]
  }
}
 8012458:	bf00      	nop
 801245a:	bd80      	pop	{r7, pc}
 801245c:	20004ab8 	.word	0x20004ab8

08012460 <LL_PWR_EnableBootC2>:
{
 8012460:	b480      	push	{r7}
 8012462:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8012464:	4b05      	ldr	r3, [pc, #20]	; (801247c <LL_PWR_EnableBootC2+0x1c>)
 8012466:	68db      	ldr	r3, [r3, #12]
 8012468:	4a04      	ldr	r2, [pc, #16]	; (801247c <LL_PWR_EnableBootC2+0x1c>)
 801246a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801246e:	60d3      	str	r3, [r2, #12]
}
 8012470:	bf00      	nop
 8012472:	46bd      	mov	sp, r7
 8012474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012478:	4770      	bx	lr
 801247a:	bf00      	nop
 801247c:	58000400 	.word	0x58000400

08012480 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8012488:	4b06      	ldr	r3, [pc, #24]	; (80124a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801248a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 801248e:	4905      	ldr	r1, [pc, #20]	; (80124a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	4313      	orrs	r3, r2
 8012494:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8012498:	bf00      	nop
 801249a:	370c      	adds	r7, #12
 801249c:	46bd      	mov	sp, r7
 801249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a2:	4770      	bx	lr
 80124a4:	58000800 	.word	0x58000800

080124a8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80124a8:	b480      	push	{r7}
 80124aa:	b083      	sub	sp, #12
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80124b0:	4b05      	ldr	r3, [pc, #20]	; (80124c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80124b2:	6a1a      	ldr	r2, [r3, #32]
 80124b4:	4904      	ldr	r1, [pc, #16]	; (80124c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	4313      	orrs	r3, r2
 80124ba:	620b      	str	r3, [r1, #32]
}
 80124bc:	bf00      	nop
 80124be:	370c      	adds	r7, #12
 80124c0:	46bd      	mov	sp, r7
 80124c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c6:	4770      	bx	lr
 80124c8:	58000800 	.word	0x58000800

080124cc <LL_AHB3_GRP1_EnableClock>:
{
 80124cc:	b480      	push	{r7}
 80124ce:	b085      	sub	sp, #20
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80124d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80124d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80124da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	4313      	orrs	r3, r2
 80124e2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80124e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80124e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	4013      	ands	r3, r2
 80124ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80124f0:	68fb      	ldr	r3, [r7, #12]
}
 80124f2:	bf00      	nop
 80124f4:	3714      	adds	r7, #20
 80124f6:	46bd      	mov	sp, r7
 80124f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fc:	4770      	bx	lr

080124fe <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80124fe:	b480      	push	{r7}
 8012500:	b085      	sub	sp, #20
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8012506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801250a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 801250e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	4313      	orrs	r3, r2
 8012516:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801251e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	4013      	ands	r3, r2
 8012526:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012528:	68fb      	ldr	r3, [r7, #12]
}
 801252a:	bf00      	nop
 801252c:	3714      	adds	r7, #20
 801252e:	46bd      	mov	sp, r7
 8012530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012534:	4770      	bx	lr

08012536 <LL_C1_IPCC_EnableIT_TXF>:
{
 8012536:	b480      	push	{r7}
 8012538:	b083      	sub	sp, #12
 801253a:	af00      	add	r7, sp, #0
 801253c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	601a      	str	r2, [r3, #0]
}
 801254a:	bf00      	nop
 801254c:	370c      	adds	r7, #12
 801254e:	46bd      	mov	sp, r7
 8012550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012554:	4770      	bx	lr

08012556 <LL_C1_IPCC_EnableIT_RXO>:
{
 8012556:	b480      	push	{r7}
 8012558:	b083      	sub	sp, #12
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	f043 0201 	orr.w	r2, r3, #1
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	601a      	str	r2, [r3, #0]
}
 801256a:	bf00      	nop
 801256c:	370c      	adds	r7, #12
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr

08012576 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8012576:	b480      	push	{r7}
 8012578:	b083      	sub	sp, #12
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
 801257e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	685a      	ldr	r2, [r3, #4]
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	041b      	lsls	r3, r3, #16
 8012588:	43db      	mvns	r3, r3
 801258a:	401a      	ands	r2, r3
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	605a      	str	r2, [r3, #4]
}
 8012590:	bf00      	nop
 8012592:	370c      	adds	r7, #12
 8012594:	46bd      	mov	sp, r7
 8012596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259a:	4770      	bx	lr

0801259c <LL_C1_IPCC_DisableTransmitChannel>:
{
 801259c:	b480      	push	{r7}
 801259e:	b083      	sub	sp, #12
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	685a      	ldr	r2, [r3, #4]
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	041b      	lsls	r3, r3, #16
 80125ae:	431a      	orrs	r2, r3
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	605a      	str	r2, [r3, #4]
}
 80125b4:	bf00      	nop
 80125b6:	370c      	adds	r7, #12
 80125b8:	46bd      	mov	sp, r7
 80125ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125be:	4770      	bx	lr

080125c0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80125c0:	b480      	push	{r7}
 80125c2:	b083      	sub	sp, #12
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	685a      	ldr	r2, [r3, #4]
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	43db      	mvns	r3, r3
 80125d2:	401a      	ands	r2, r3
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	605a      	str	r2, [r3, #4]
}
 80125d8:	bf00      	nop
 80125da:	370c      	adds	r7, #12
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <LL_C1_IPCC_DisableReceiveChannel>:
{
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	685a      	ldr	r2, [r3, #4]
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	431a      	orrs	r2, r3
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	605a      	str	r2, [r3, #4]
}
 80125fa:	bf00      	nop
 80125fc:	370c      	adds	r7, #12
 80125fe:	46bd      	mov	sp, r7
 8012600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012604:	4770      	bx	lr

08012606 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8012606:	b480      	push	{r7}
 8012608:	b083      	sub	sp, #12
 801260a:	af00      	add	r7, sp, #0
 801260c:	6078      	str	r0, [r7, #4]
 801260e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	683a      	ldr	r2, [r7, #0]
 8012614:	609a      	str	r2, [r3, #8]
}
 8012616:	bf00      	nop
 8012618:	370c      	adds	r7, #12
 801261a:	46bd      	mov	sp, r7
 801261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012620:	4770      	bx	lr

08012622 <LL_C1_IPCC_SetFlag_CHx>:
{
 8012622:	b480      	push	{r7}
 8012624:	b083      	sub	sp, #12
 8012626:	af00      	add	r7, sp, #0
 8012628:	6078      	str	r0, [r7, #4]
 801262a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	041a      	lsls	r2, r3, #16
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	609a      	str	r2, [r3, #8]
}
 8012634:	bf00      	nop
 8012636:	370c      	adds	r7, #12
 8012638:	46bd      	mov	sp, r7
 801263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263e:	4770      	bx	lr

08012640 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8012640:	b480      	push	{r7}
 8012642:	b083      	sub	sp, #12
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	68da      	ldr	r2, [r3, #12]
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	4013      	ands	r3, r2
 8012652:	683a      	ldr	r2, [r7, #0]
 8012654:	429a      	cmp	r2, r3
 8012656:	d101      	bne.n	801265c <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8012658:	2301      	movs	r3, #1
 801265a:	e000      	b.n	801265e <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801265c:	2300      	movs	r3, #0
}
 801265e:	4618      	mov	r0, r3
 8012660:	370c      	adds	r7, #12
 8012662:	46bd      	mov	sp, r7
 8012664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012668:	4770      	bx	lr

0801266a <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801266a:	b480      	push	{r7}
 801266c:	b083      	sub	sp, #12
 801266e:	af00      	add	r7, sp, #0
 8012670:	6078      	str	r0, [r7, #4]
 8012672:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	69da      	ldr	r2, [r3, #28]
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	4013      	ands	r3, r2
 801267c:	683a      	ldr	r2, [r7, #0]
 801267e:	429a      	cmp	r2, r3
 8012680:	d101      	bne.n	8012686 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8012682:	2301      	movs	r3, #1
 8012684:	e000      	b.n	8012688 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8012686:	2300      	movs	r3, #0
}
 8012688:	4618      	mov	r0, r3
 801268a:	370c      	adds	r7, #12
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr

08012694 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8012694:	b580      	push	{r7, lr}
 8012696:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8012698:	2102      	movs	r1, #2
 801269a:	482a      	ldr	r0, [pc, #168]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 801269c:	f7ff ffe5 	bl	801266a <LL_C2_IPCC_IsActiveFlag_CHx>
 80126a0:	4603      	mov	r3, r0
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d009      	beq.n	80126ba <HW_IPCC_Rx_Handler+0x26>
 80126a6:	4b27      	ldr	r3, [pc, #156]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	43db      	mvns	r3, r3
 80126ac:	f003 0302 	and.w	r3, r3, #2
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d002      	beq.n	80126ba <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80126b4:	f000 f90a 	bl	80128cc <HW_IPCC_SYS_EvtHandler>
 80126b8:	e041      	b.n	801273e <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 80126ba:	2104      	movs	r1, #4
 80126bc:	4821      	ldr	r0, [pc, #132]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 80126be:	f7ff ffd4 	bl	801266a <LL_C2_IPCC_IsActiveFlag_CHx>
 80126c2:	4603      	mov	r3, r0
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d009      	beq.n	80126dc <HW_IPCC_Rx_Handler+0x48>
 80126c8:	4b1e      	ldr	r3, [pc, #120]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	43db      	mvns	r3, r3
 80126ce:	f003 0304 	and.w	r3, r3, #4
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d002      	beq.n	80126dc <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 80126d6:	f000 f953 	bl	8012980 <HW_IPCC_THREAD_NotEvtHandler>
 80126da:	e030      	b.n	801273e <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 80126dc:	2110      	movs	r1, #16
 80126de:	4819      	ldr	r0, [pc, #100]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 80126e0:	f7ff ffc3 	bl	801266a <LL_C2_IPCC_IsActiveFlag_CHx>
 80126e4:	4603      	mov	r3, r0
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d009      	beq.n	80126fe <HW_IPCC_Rx_Handler+0x6a>
 80126ea:	4b16      	ldr	r3, [pc, #88]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	43db      	mvns	r3, r3
 80126f0:	f003 0310 	and.w	r3, r3, #16
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d002      	beq.n	80126fe <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 80126f8:	f000 f94e 	bl	8012998 <HW_IPCC_THREAD_CliNotEvtHandler>
 80126fc:	e01f      	b.n	801273e <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80126fe:	2101      	movs	r1, #1
 8012700:	4810      	ldr	r0, [pc, #64]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 8012702:	f7ff ffb2 	bl	801266a <LL_C2_IPCC_IsActiveFlag_CHx>
 8012706:	4603      	mov	r3, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	d008      	beq.n	801271e <HW_IPCC_Rx_Handler+0x8a>
 801270c:	4b0d      	ldr	r3, [pc, #52]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	f003 0301 	and.w	r3, r3, #1
 8012714:	2b00      	cmp	r3, #0
 8012716:	d102      	bne.n	801271e <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8012718:	f000 f89c 	bl	8012854 <HW_IPCC_BLE_EvtHandler>
 801271c:	e00f      	b.n	801273e <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 801271e:	2108      	movs	r1, #8
 8012720:	4808      	ldr	r0, [pc, #32]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 8012722:	f7ff ffa2 	bl	801266a <LL_C2_IPCC_IsActiveFlag_CHx>
 8012726:	4603      	mov	r3, r0
 8012728:	2b00      	cmp	r3, #0
 801272a:	d009      	beq.n	8012740 <HW_IPCC_Rx_Handler+0xac>
 801272c:	4b05      	ldr	r3, [pc, #20]	; (8012744 <HW_IPCC_Rx_Handler+0xb0>)
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	43db      	mvns	r3, r3
 8012732:	f003 0308 	and.w	r3, r3, #8
 8012736:	2b00      	cmp	r3, #0
 8012738:	d002      	beq.n	8012740 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 801273a:	f000 f979 	bl	8012a30 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801273e:	bf00      	nop
 8012740:	bf00      	nop
}
 8012742:	bd80      	pop	{r7, pc}
 8012744:	58000c00 	.word	0x58000c00

08012748 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8012748:	b580      	push	{r7, lr}
 801274a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801274c:	2102      	movs	r1, #2
 801274e:	482b      	ldr	r0, [pc, #172]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 8012750:	f7ff ff76 	bl	8012640 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012754:	4603      	mov	r3, r0
 8012756:	2b00      	cmp	r3, #0
 8012758:	d109      	bne.n	801276e <HW_IPCC_Tx_Handler+0x26>
 801275a:	4b28      	ldr	r3, [pc, #160]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	43db      	mvns	r3, r3
 8012760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012768:	f000 f8a4 	bl	80128b4 <HW_IPCC_SYS_CmdEvtHandler>
 801276c:	e042      	b.n	80127f4 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 801276e:	2104      	movs	r1, #4
 8012770:	4822      	ldr	r0, [pc, #136]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 8012772:	f7ff ff65 	bl	8012640 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012776:	4603      	mov	r3, r0
 8012778:	2b00      	cmp	r3, #0
 801277a:	d109      	bne.n	8012790 <HW_IPCC_Tx_Handler+0x48>
 801277c:	4b1f      	ldr	r3, [pc, #124]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	43db      	mvns	r3, r3
 8012782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012786:	2b00      	cmp	r3, #0
 8012788:	d002      	beq.n	8012790 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 801278a:	f000 f8ed 	bl	8012968 <HW_IPCC_OT_CmdEvtHandler>
 801278e:	e031      	b.n	80127f4 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012790:	2102      	movs	r1, #2
 8012792:	481a      	ldr	r0, [pc, #104]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 8012794:	f7ff ff54 	bl	8012640 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012798:	4603      	mov	r3, r0
 801279a:	2b00      	cmp	r3, #0
 801279c:	d109      	bne.n	80127b2 <HW_IPCC_Tx_Handler+0x6a>
 801279e:	4b17      	ldr	r3, [pc, #92]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	43db      	mvns	r3, r3
 80127a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d002      	beq.n	80127b2 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80127ac:	f000 f882 	bl	80128b4 <HW_IPCC_SYS_CmdEvtHandler>
 80127b0:	e020      	b.n	80127f4 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80127b2:	2108      	movs	r1, #8
 80127b4:	4811      	ldr	r0, [pc, #68]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 80127b6:	f7ff ff43 	bl	8012640 <LL_C1_IPCC_IsActiveFlag_CHx>
 80127ba:	4603      	mov	r3, r0
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d109      	bne.n	80127d4 <HW_IPCC_Tx_Handler+0x8c>
 80127c0:	4b0e      	ldr	r3, [pc, #56]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	43db      	mvns	r3, r3
 80127c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d002      	beq.n	80127d4 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 80127ce:	f000 f911 	bl	80129f4 <HW_IPCC_MM_FreeBufHandler>
 80127d2:	e00f      	b.n	80127f4 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80127d4:	2120      	movs	r1, #32
 80127d6:	4809      	ldr	r0, [pc, #36]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 80127d8:	f7ff ff32 	bl	8012640 <LL_C1_IPCC_IsActiveFlag_CHx>
 80127dc:	4603      	mov	r3, r0
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d109      	bne.n	80127f6 <HW_IPCC_Tx_Handler+0xae>
 80127e2:	4b06      	ldr	r3, [pc, #24]	; (80127fc <HW_IPCC_Tx_Handler+0xb4>)
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	43db      	mvns	r3, r3
 80127e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d002      	beq.n	80127f6 <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80127f0:	f000 f83c 	bl	801286c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80127f4:	bf00      	nop
 80127f6:	bf00      	nop
}
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop
 80127fc:	58000c00 	.word	0x58000c00

08012800 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8012800:	b580      	push	{r7, lr}
 8012802:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8012804:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012808:	f7ff fe79 	bl	80124fe <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 801280c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012810:	f7ff fe36 	bl	8012480 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8012814:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012818:	f7ff fe46 	bl	80124a8 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 801281c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801281e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8012820:	f7ff fe1e 	bl	8012460 <LL_PWR_EnableBootC2>

  return;
 8012824:	bf00      	nop
}
 8012826:	bd80      	pop	{r7, pc}

08012828 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8012828:	b580      	push	{r7, lr}
 801282a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 801282c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012830:	f7ff fe4c 	bl	80124cc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8012834:	4806      	ldr	r0, [pc, #24]	; (8012850 <HW_IPCC_Init+0x28>)
 8012836:	f7ff fe8e 	bl	8012556 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801283a:	4805      	ldr	r0, [pc, #20]	; (8012850 <HW_IPCC_Init+0x28>)
 801283c:	f7ff fe7b 	bl	8012536 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8012840:	202c      	movs	r0, #44	; 0x2c
 8012842:	f7f1 fec8 	bl	80045d6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8012846:	202d      	movs	r0, #45	; 0x2d
 8012848:	f7f1 fec5 	bl	80045d6 <HAL_NVIC_EnableIRQ>

  return;
 801284c:	bf00      	nop
}
 801284e:	bd80      	pop	{r7, pc}
 8012850:	58000c00 	.word	0x58000c00

08012854 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8012854:	b580      	push	{r7, lr}
 8012856:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8012858:	f7f9 fc9a 	bl	800c190 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801285c:	2101      	movs	r1, #1
 801285e:	4802      	ldr	r0, [pc, #8]	; (8012868 <HW_IPCC_BLE_EvtHandler+0x14>)
 8012860:	f7ff fed1 	bl	8012606 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012864:	bf00      	nop
}
 8012866:	bd80      	pop	{r7, pc}
 8012868:	58000c00 	.word	0x58000c00

0801286c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 801286c:	b580      	push	{r7, lr}
 801286e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8012870:	2120      	movs	r1, #32
 8012872:	4803      	ldr	r0, [pc, #12]	; (8012880 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8012874:	f7ff fe92 	bl	801259c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8012878:	f7f9 fcba 	bl	800c1f0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 801287c:	bf00      	nop
}
 801287e:	bd80      	pop	{r7, pc}
 8012880:	58000c00 	.word	0x58000c00

08012884 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8012884:	b580      	push	{r7, lr}
 8012886:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012888:	2102      	movs	r1, #2
 801288a:	4802      	ldr	r0, [pc, #8]	; (8012894 <HW_IPCC_SYS_Init+0x10>)
 801288c:	f7ff fe98 	bl	80125c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012890:	bf00      	nop
}
 8012892:	bd80      	pop	{r7, pc}
 8012894:	58000c00 	.word	0x58000c00

08012898 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8012898:	b580      	push	{r7, lr}
 801289a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801289c:	2102      	movs	r1, #2
 801289e:	4804      	ldr	r0, [pc, #16]	; (80128b0 <HW_IPCC_SYS_SendCmd+0x18>)
 80128a0:	f7ff febf 	bl	8012622 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80128a4:	2102      	movs	r1, #2
 80128a6:	4802      	ldr	r0, [pc, #8]	; (80128b0 <HW_IPCC_SYS_SendCmd+0x18>)
 80128a8:	f7ff fe65 	bl	8012576 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80128ac:	bf00      	nop
}
 80128ae:	bd80      	pop	{r7, pc}
 80128b0:	58000c00 	.word	0x58000c00

080128b4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80128b8:	2102      	movs	r1, #2
 80128ba:	4803      	ldr	r0, [pc, #12]	; (80128c8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80128bc:	f7ff fe6e 	bl	801259c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80128c0:	f7f9 fce6 	bl	800c290 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80128c4:	bf00      	nop
}
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	58000c00 	.word	0x58000c00

080128cc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80128d0:	f7f9 fcf4 	bl	800c2bc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80128d4:	2102      	movs	r1, #2
 80128d6:	4802      	ldr	r0, [pc, #8]	; (80128e0 <HW_IPCC_SYS_EvtHandler+0x14>)
 80128d8:	f7ff fe95 	bl	8012606 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80128dc:	bf00      	nop
}
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	58000c00 	.word	0x58000c00

080128e4 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 80128e8:	2104      	movs	r1, #4
 80128ea:	4804      	ldr	r0, [pc, #16]	; (80128fc <HW_IPCC_THREAD_Init+0x18>)
 80128ec:	f7ff fe68 	bl	80125c0 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 80128f0:	2110      	movs	r1, #16
 80128f2:	4802      	ldr	r0, [pc, #8]	; (80128fc <HW_IPCC_THREAD_Init+0x18>)
 80128f4:	f7ff fe64 	bl	80125c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80128f8:	bf00      	nop
}
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	58000c00 	.word	0x58000c00

08012900 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8012900:	b580      	push	{r7, lr}
 8012902:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8012904:	2104      	movs	r1, #4
 8012906:	4804      	ldr	r0, [pc, #16]	; (8012918 <HW_IPCC_OT_SendCmd+0x18>)
 8012908:	f7ff fe8b 	bl	8012622 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801290c:	2104      	movs	r1, #4
 801290e:	4802      	ldr	r0, [pc, #8]	; (8012918 <HW_IPCC_OT_SendCmd+0x18>)
 8012910:	f7ff fe31 	bl	8012576 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012914:	bf00      	nop
}
 8012916:	bd80      	pop	{r7, pc}
 8012918:	58000c00 	.word	0x58000c00

0801291c <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 801291c:	b580      	push	{r7, lr}
 801291e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8012920:	2110      	movs	r1, #16
 8012922:	4802      	ldr	r0, [pc, #8]	; (801292c <HW_IPCC_CLI_SendCmd+0x10>)
 8012924:	f7ff fe7d 	bl	8012622 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012928:	bf00      	nop
}
 801292a:	bd80      	pop	{r7, pc}
 801292c:	58000c00 	.word	0x58000c00

08012930 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8012930:	b580      	push	{r7, lr}
 8012932:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012934:	2104      	movs	r1, #4
 8012936:	4804      	ldr	r0, [pc, #16]	; (8012948 <HW_IPCC_THREAD_SendAck+0x18>)
 8012938:	f7ff fe65 	bl	8012606 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 801293c:	2104      	movs	r1, #4
 801293e:	4802      	ldr	r0, [pc, #8]	; (8012948 <HW_IPCC_THREAD_SendAck+0x18>)
 8012940:	f7ff fe3e 	bl	80125c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012944:	bf00      	nop
}
 8012946:	bd80      	pop	{r7, pc}
 8012948:	58000c00 	.word	0x58000c00

0801294c <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 801294c:	b580      	push	{r7, lr}
 801294e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012950:	2110      	movs	r1, #16
 8012952:	4804      	ldr	r0, [pc, #16]	; (8012964 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8012954:	f7ff fe57 	bl	8012606 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8012958:	2110      	movs	r1, #16
 801295a:	4802      	ldr	r0, [pc, #8]	; (8012964 <HW_IPCC_THREAD_CliSendAck+0x18>)
 801295c:	f7ff fe30 	bl	80125c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012960:	bf00      	nop
}
 8012962:	bd80      	pop	{r7, pc}
 8012964:	58000c00 	.word	0x58000c00

08012968 <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8012968:	b580      	push	{r7, lr}
 801296a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 801296c:	2104      	movs	r1, #4
 801296e:	4803      	ldr	r0, [pc, #12]	; (801297c <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8012970:	f7ff fe14 	bl	801259c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8012974:	f7f9 fd18 	bl	800c3a8 <HW_IPCC_OT_CmdEvtNot>

  return;
 8012978:	bf00      	nop
}
 801297a:	bd80      	pop	{r7, pc}
 801297c:	58000c00 	.word	0x58000c00

08012980 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8012980:	b580      	push	{r7, lr}
 8012982:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8012984:	2104      	movs	r1, #4
 8012986:	4803      	ldr	r0, [pc, #12]	; (8012994 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8012988:	f7ff fe2c 	bl	80125e4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 801298c:	f7f9 fd18 	bl	800c3c0 <HW_IPCC_THREAD_EvtNot>

  return;
 8012990:	bf00      	nop
}
 8012992:	bd80      	pop	{r7, pc}
 8012994:	58000c00 	.word	0x58000c00

08012998 <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 8012998:	b580      	push	{r7, lr}
 801299a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 801299c:	2110      	movs	r1, #16
 801299e:	4803      	ldr	r0, [pc, #12]	; (80129ac <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 80129a0:	f7ff fe20 	bl	80125e4 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 80129a4:	f7f9 fd18 	bl	800c3d8 <HW_IPCC_THREAD_CliEvtNot>

  return;
 80129a8:	bf00      	nop
}
 80129aa:	bd80      	pop	{r7, pc}
 80129ac:	58000c00 	.word	0x58000c00

080129b0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80129b8:	2108      	movs	r1, #8
 80129ba:	480c      	ldr	r0, [pc, #48]	; (80129ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80129bc:	f7ff fe40 	bl	8012640 <LL_C1_IPCC_IsActiveFlag_CHx>
 80129c0:	4603      	mov	r3, r0
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d007      	beq.n	80129d6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80129c6:	4a0a      	ldr	r2, [pc, #40]	; (80129f0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80129cc:	2108      	movs	r1, #8
 80129ce:	4807      	ldr	r0, [pc, #28]	; (80129ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80129d0:	f7ff fdd1 	bl	8012576 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80129d4:	e006      	b.n	80129e4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80129da:	2108      	movs	r1, #8
 80129dc:	4803      	ldr	r0, [pc, #12]	; (80129ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80129de:	f7ff fe20 	bl	8012622 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80129e2:	bf00      	nop
}
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
 80129ea:	bf00      	nop
 80129ec:	58000c00 	.word	0x58000c00
 80129f0:	20004ba4 	.word	0x20004ba4

080129f4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80129f8:	2108      	movs	r1, #8
 80129fa:	4806      	ldr	r0, [pc, #24]	; (8012a14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80129fc:	f7ff fdce 	bl	801259c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8012a00:	4b05      	ldr	r3, [pc, #20]	; (8012a18 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012a06:	2108      	movs	r1, #8
 8012a08:	4802      	ldr	r0, [pc, #8]	; (8012a14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012a0a:	f7ff fe0a 	bl	8012622 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012a0e:	bf00      	nop
}
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	58000c00 	.word	0x58000c00
 8012a18:	20004ba4 	.word	0x20004ba4

08012a1c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012a20:	2108      	movs	r1, #8
 8012a22:	4802      	ldr	r0, [pc, #8]	; (8012a2c <HW_IPCC_TRACES_Init+0x10>)
 8012a24:	f7ff fdcc 	bl	80125c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012a28:	bf00      	nop
}
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	58000c00 	.word	0x58000c00

08012a30 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8012a34:	f7f9 fd62 	bl	800c4fc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012a38:	2108      	movs	r1, #8
 8012a3a:	4802      	ldr	r0, [pc, #8]	; (8012a44 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8012a3c:	f7ff fde3 	bl	8012606 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012a40:	bf00      	nop
}
 8012a42:	bd80      	pop	{r7, pc}
 8012a44:	58000c00 	.word	0x58000c00

08012a48 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	4912      	ldr	r1, [pc, #72]	; (8012a98 <MX_USB_Device_Init+0x50>)
 8012a50:	4812      	ldr	r0, [pc, #72]	; (8012a9c <MX_USB_Device_Init+0x54>)
 8012a52:	f7f8 f867 	bl	800ab24 <USBD_Init>
 8012a56:	4603      	mov	r3, r0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d001      	beq.n	8012a60 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012a5c:	f7ef fbba 	bl	80021d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012a60:	490f      	ldr	r1, [pc, #60]	; (8012aa0 <MX_USB_Device_Init+0x58>)
 8012a62:	480e      	ldr	r0, [pc, #56]	; (8012a9c <MX_USB_Device_Init+0x54>)
 8012a64:	f7f8 f88e 	bl	800ab84 <USBD_RegisterClass>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d001      	beq.n	8012a72 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012a6e:	f7ef fbb1 	bl	80021d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012a72:	490c      	ldr	r1, [pc, #48]	; (8012aa4 <MX_USB_Device_Init+0x5c>)
 8012a74:	4809      	ldr	r0, [pc, #36]	; (8012a9c <MX_USB_Device_Init+0x54>)
 8012a76:	f7f7 ffaf 	bl	800a9d8 <USBD_CDC_RegisterInterface>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d001      	beq.n	8012a84 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012a80:	f7ef fba8 	bl	80021d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012a84:	4805      	ldr	r0, [pc, #20]	; (8012a9c <MX_USB_Device_Init+0x54>)
 8012a86:	f7f8 f8a4 	bl	800abd2 <USBD_Start>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d001      	beq.n	8012a94 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012a90:	f7ef fba0 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012a94:	bf00      	nop
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	20000170 	.word	0x20000170
 8012a9c:	20005030 	.word	0x20005030
 8012aa0:	20000034 	.word	0x20000034
 8012aa4:	2000015c 	.word	0x2000015c

08012aa8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012aac:	2200      	movs	r2, #0
 8012aae:	4905      	ldr	r1, [pc, #20]	; (8012ac4 <CDC_Init_FS+0x1c>)
 8012ab0:	4805      	ldr	r0, [pc, #20]	; (8012ac8 <CDC_Init_FS+0x20>)
 8012ab2:	f7f7 ffa6 	bl	800aa02 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012ab6:	4905      	ldr	r1, [pc, #20]	; (8012acc <CDC_Init_FS+0x24>)
 8012ab8:	4803      	ldr	r0, [pc, #12]	; (8012ac8 <CDC_Init_FS+0x20>)
 8012aba:	f7f7 ffc0 	bl	800aa3e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012abe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	20005b00 	.word	0x20005b00
 8012ac8:	20005030 	.word	0x20005030
 8012acc:	20005300 	.word	0x20005300

08012ad0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012ad0:	b480      	push	{r7}
 8012ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012ad4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b083      	sub	sp, #12
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	6039      	str	r1, [r7, #0]
 8012aea:	71fb      	strb	r3, [r7, #7]
 8012aec:	4613      	mov	r3, r2
 8012aee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012af0:	79fb      	ldrb	r3, [r7, #7]
 8012af2:	2b23      	cmp	r3, #35	; 0x23
 8012af4:	d84a      	bhi.n	8012b8c <CDC_Control_FS+0xac>
 8012af6:	a201      	add	r2, pc, #4	; (adr r2, 8012afc <CDC_Control_FS+0x1c>)
 8012af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012afc:	08012b8d 	.word	0x08012b8d
 8012b00:	08012b8d 	.word	0x08012b8d
 8012b04:	08012b8d 	.word	0x08012b8d
 8012b08:	08012b8d 	.word	0x08012b8d
 8012b0c:	08012b8d 	.word	0x08012b8d
 8012b10:	08012b8d 	.word	0x08012b8d
 8012b14:	08012b8d 	.word	0x08012b8d
 8012b18:	08012b8d 	.word	0x08012b8d
 8012b1c:	08012b8d 	.word	0x08012b8d
 8012b20:	08012b8d 	.word	0x08012b8d
 8012b24:	08012b8d 	.word	0x08012b8d
 8012b28:	08012b8d 	.word	0x08012b8d
 8012b2c:	08012b8d 	.word	0x08012b8d
 8012b30:	08012b8d 	.word	0x08012b8d
 8012b34:	08012b8d 	.word	0x08012b8d
 8012b38:	08012b8d 	.word	0x08012b8d
 8012b3c:	08012b8d 	.word	0x08012b8d
 8012b40:	08012b8d 	.word	0x08012b8d
 8012b44:	08012b8d 	.word	0x08012b8d
 8012b48:	08012b8d 	.word	0x08012b8d
 8012b4c:	08012b8d 	.word	0x08012b8d
 8012b50:	08012b8d 	.word	0x08012b8d
 8012b54:	08012b8d 	.word	0x08012b8d
 8012b58:	08012b8d 	.word	0x08012b8d
 8012b5c:	08012b8d 	.word	0x08012b8d
 8012b60:	08012b8d 	.word	0x08012b8d
 8012b64:	08012b8d 	.word	0x08012b8d
 8012b68:	08012b8d 	.word	0x08012b8d
 8012b6c:	08012b8d 	.word	0x08012b8d
 8012b70:	08012b8d 	.word	0x08012b8d
 8012b74:	08012b8d 	.word	0x08012b8d
 8012b78:	08012b8d 	.word	0x08012b8d
 8012b7c:	08012b8d 	.word	0x08012b8d
 8012b80:	08012b8d 	.word	0x08012b8d
 8012b84:	08012b8d 	.word	0x08012b8d
 8012b88:	08012b8d 	.word	0x08012b8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012b8c:	bf00      	nop
  }

  return (USBD_OK);
 8012b8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	370c      	adds	r7, #12
 8012b94:	46bd      	mov	sp, r7
 8012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9a:	4770      	bx	lr

08012b9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012ba6:	6879      	ldr	r1, [r7, #4]
 8012ba8:	4805      	ldr	r0, [pc, #20]	; (8012bc0 <CDC_Receive_FS+0x24>)
 8012baa:	f7f7 ff48 	bl	800aa3e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012bae:	4804      	ldr	r0, [pc, #16]	; (8012bc0 <CDC_Receive_FS+0x24>)
 8012bb0:	f7f7 ff8e 	bl	800aad0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012bb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3708      	adds	r7, #8
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	20005030 	.word	0x20005030

08012bc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b084      	sub	sp, #16
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	460b      	mov	r3, r1
 8012bce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012bd4:	4b0d      	ldr	r3, [pc, #52]	; (8012c0c <CDC_Transmit_FS+0x48>)
 8012bd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012bda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d001      	beq.n	8012bea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012be6:	2301      	movs	r3, #1
 8012be8:	e00b      	b.n	8012c02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012bea:	887b      	ldrh	r3, [r7, #2]
 8012bec:	461a      	mov	r2, r3
 8012bee:	6879      	ldr	r1, [r7, #4]
 8012bf0:	4806      	ldr	r0, [pc, #24]	; (8012c0c <CDC_Transmit_FS+0x48>)
 8012bf2:	f7f7 ff06 	bl	800aa02 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012bf6:	4805      	ldr	r0, [pc, #20]	; (8012c0c <CDC_Transmit_FS+0x48>)
 8012bf8:	f7f7 ff3a 	bl	800aa70 <USBD_CDC_TransmitPacket>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3710      	adds	r7, #16
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	20005030 	.word	0x20005030

08012c10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b087      	sub	sp, #28
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	60f8      	str	r0, [r7, #12]
 8012c18:	60b9      	str	r1, [r7, #8]
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	371c      	adds	r7, #28
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c30:	4770      	bx	lr
	...

08012c34 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	6039      	str	r1, [r7, #0]
 8012c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	2212      	movs	r2, #18
 8012c44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012c46:	4b03      	ldr	r3, [pc, #12]	; (8012c54 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012c48:	4618      	mov	r0, r3
 8012c4a:	370c      	adds	r7, #12
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr
 8012c54:	2000018c 	.word	0x2000018c

08012c58 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b083      	sub	sp, #12
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	4603      	mov	r3, r0
 8012c60:	6039      	str	r1, [r7, #0]
 8012c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	2204      	movs	r2, #4
 8012c68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012c6a:	4b03      	ldr	r3, [pc, #12]	; (8012c78 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	370c      	adds	r7, #12
 8012c70:	46bd      	mov	sp, r7
 8012c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c76:	4770      	bx	lr
 8012c78:	200001a0 	.word	0x200001a0

08012c7c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	4603      	mov	r3, r0
 8012c84:	6039      	str	r1, [r7, #0]
 8012c86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012c88:	79fb      	ldrb	r3, [r7, #7]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d105      	bne.n	8012c9a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012c8e:	683a      	ldr	r2, [r7, #0]
 8012c90:	4907      	ldr	r1, [pc, #28]	; (8012cb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012c92:	4808      	ldr	r0, [pc, #32]	; (8012cb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012c94:	f7f8 ff4e 	bl	800bb34 <USBD_GetString>
 8012c98:	e004      	b.n	8012ca4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012c9a:	683a      	ldr	r2, [r7, #0]
 8012c9c:	4904      	ldr	r1, [pc, #16]	; (8012cb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012c9e:	4805      	ldr	r0, [pc, #20]	; (8012cb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012ca0:	f7f8 ff48 	bl	800bb34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ca4:	4b02      	ldr	r3, [pc, #8]	; (8012cb0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	3708      	adds	r7, #8
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}
 8012cae:	bf00      	nop
 8012cb0:	20006300 	.word	0x20006300
 8012cb4:	080138c4 	.word	0x080138c4

08012cb8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	6039      	str	r1, [r7, #0]
 8012cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012cc4:	683a      	ldr	r2, [r7, #0]
 8012cc6:	4904      	ldr	r1, [pc, #16]	; (8012cd8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012cc8:	4804      	ldr	r0, [pc, #16]	; (8012cdc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8012cca:	f7f8 ff33 	bl	800bb34 <USBD_GetString>
  return USBD_StrDesc;
 8012cce:	4b02      	ldr	r3, [pc, #8]	; (8012cd8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	3708      	adds	r7, #8
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}
 8012cd8:	20006300 	.word	0x20006300
 8012cdc:	080138d0 	.word	0x080138d0

08012ce0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b082      	sub	sp, #8
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	6039      	str	r1, [r7, #0]
 8012cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	221a      	movs	r2, #26
 8012cf0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012cf2:	f000 f843 	bl	8012d7c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012cf6:	4b02      	ldr	r3, [pc, #8]	; (8012d00 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3708      	adds	r7, #8
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}
 8012d00:	200001a4 	.word	0x200001a4

08012d04 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b082      	sub	sp, #8
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	6039      	str	r1, [r7, #0]
 8012d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012d10:	79fb      	ldrb	r3, [r7, #7]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d105      	bne.n	8012d22 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012d16:	683a      	ldr	r2, [r7, #0]
 8012d18:	4907      	ldr	r1, [pc, #28]	; (8012d38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012d1a:	4808      	ldr	r0, [pc, #32]	; (8012d3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012d1c:	f7f8 ff0a 	bl	800bb34 <USBD_GetString>
 8012d20:	e004      	b.n	8012d2c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012d22:	683a      	ldr	r2, [r7, #0]
 8012d24:	4904      	ldr	r1, [pc, #16]	; (8012d38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012d26:	4805      	ldr	r0, [pc, #20]	; (8012d3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012d28:	f7f8 ff04 	bl	800bb34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d2c:	4b02      	ldr	r3, [pc, #8]	; (8012d38 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3708      	adds	r7, #8
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
 8012d36:	bf00      	nop
 8012d38:	20006300 	.word	0x20006300
 8012d3c:	080138d8 	.word	0x080138d8

08012d40 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	4603      	mov	r3, r0
 8012d48:	6039      	str	r1, [r7, #0]
 8012d4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012d4c:	79fb      	ldrb	r3, [r7, #7]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d105      	bne.n	8012d5e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012d52:	683a      	ldr	r2, [r7, #0]
 8012d54:	4907      	ldr	r1, [pc, #28]	; (8012d74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012d56:	4808      	ldr	r0, [pc, #32]	; (8012d78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012d58:	f7f8 feec 	bl	800bb34 <USBD_GetString>
 8012d5c:	e004      	b.n	8012d68 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012d5e:	683a      	ldr	r2, [r7, #0]
 8012d60:	4904      	ldr	r1, [pc, #16]	; (8012d74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012d62:	4805      	ldr	r0, [pc, #20]	; (8012d78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012d64:	f7f8 fee6 	bl	800bb34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d68:	4b02      	ldr	r3, [pc, #8]	; (8012d74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3708      	adds	r7, #8
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
 8012d72:	bf00      	nop
 8012d74:	20006300 	.word	0x20006300
 8012d78:	080138e4 	.word	0x080138e4

08012d7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b084      	sub	sp, #16
 8012d80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012d82:	4b0f      	ldr	r3, [pc, #60]	; (8012dc0 <Get_SerialNum+0x44>)
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012d88:	4b0e      	ldr	r3, [pc, #56]	; (8012dc4 <Get_SerialNum+0x48>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012d8e:	4b0e      	ldr	r3, [pc, #56]	; (8012dc8 <Get_SerialNum+0x4c>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012d94:	68fa      	ldr	r2, [r7, #12]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	4413      	add	r3, r2
 8012d9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d009      	beq.n	8012db6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012da2:	2208      	movs	r2, #8
 8012da4:	4909      	ldr	r1, [pc, #36]	; (8012dcc <Get_SerialNum+0x50>)
 8012da6:	68f8      	ldr	r0, [r7, #12]
 8012da8:	f000 f814 	bl	8012dd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012dac:	2204      	movs	r2, #4
 8012dae:	4908      	ldr	r1, [pc, #32]	; (8012dd0 <Get_SerialNum+0x54>)
 8012db0:	68b8      	ldr	r0, [r7, #8]
 8012db2:	f000 f80f 	bl	8012dd4 <IntToUnicode>
  }
}
 8012db6:	bf00      	nop
 8012db8:	3710      	adds	r7, #16
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}
 8012dbe:	bf00      	nop
 8012dc0:	1fff7590 	.word	0x1fff7590
 8012dc4:	1fff7594 	.word	0x1fff7594
 8012dc8:	1fff7598 	.word	0x1fff7598
 8012dcc:	200001a6 	.word	0x200001a6
 8012dd0:	200001b6 	.word	0x200001b6

08012dd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b087      	sub	sp, #28
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	4613      	mov	r3, r2
 8012de0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012de2:	2300      	movs	r3, #0
 8012de4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012de6:	2300      	movs	r3, #0
 8012de8:	75fb      	strb	r3, [r7, #23]
 8012dea:	e027      	b.n	8012e3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	0f1b      	lsrs	r3, r3, #28
 8012df0:	2b09      	cmp	r3, #9
 8012df2:	d80b      	bhi.n	8012e0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	0f1b      	lsrs	r3, r3, #28
 8012df8:	b2da      	uxtb	r2, r3
 8012dfa:	7dfb      	ldrb	r3, [r7, #23]
 8012dfc:	005b      	lsls	r3, r3, #1
 8012dfe:	4619      	mov	r1, r3
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	440b      	add	r3, r1
 8012e04:	3230      	adds	r2, #48	; 0x30
 8012e06:	b2d2      	uxtb	r2, r2
 8012e08:	701a      	strb	r2, [r3, #0]
 8012e0a:	e00a      	b.n	8012e22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	0f1b      	lsrs	r3, r3, #28
 8012e10:	b2da      	uxtb	r2, r3
 8012e12:	7dfb      	ldrb	r3, [r7, #23]
 8012e14:	005b      	lsls	r3, r3, #1
 8012e16:	4619      	mov	r1, r3
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	440b      	add	r3, r1
 8012e1c:	3237      	adds	r2, #55	; 0x37
 8012e1e:	b2d2      	uxtb	r2, r2
 8012e20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	011b      	lsls	r3, r3, #4
 8012e26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012e28:	7dfb      	ldrb	r3, [r7, #23]
 8012e2a:	005b      	lsls	r3, r3, #1
 8012e2c:	3301      	adds	r3, #1
 8012e2e:	68ba      	ldr	r2, [r7, #8]
 8012e30:	4413      	add	r3, r2
 8012e32:	2200      	movs	r2, #0
 8012e34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012e36:	7dfb      	ldrb	r3, [r7, #23]
 8012e38:	3301      	adds	r3, #1
 8012e3a:	75fb      	strb	r3, [r7, #23]
 8012e3c:	7dfa      	ldrb	r2, [r7, #23]
 8012e3e:	79fb      	ldrb	r3, [r7, #7]
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d3d3      	bcc.n	8012dec <IntToUnicode+0x18>
  }
}
 8012e44:	bf00      	nop
 8012e46:	371c      	adds	r7, #28
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <LL_AHB2_GRP1_EnableClock>:
{
 8012e50:	b480      	push	{r7}
 8012e52:	b085      	sub	sp, #20
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8012e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	4313      	orrs	r3, r2
 8012e66:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8012e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	4013      	ands	r3, r2
 8012e72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012e74:	68fb      	ldr	r3, [r7, #12]
}
 8012e76:	bf00      	nop
 8012e78:	3714      	adds	r7, #20
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e80:	4770      	bx	lr

08012e82 <LL_APB1_GRP1_EnableClock>:
{
 8012e82:	b480      	push	{r7}
 8012e84:	b085      	sub	sp, #20
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8012e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	4313      	orrs	r3, r2
 8012e98:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8012e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	4013      	ands	r3, r2
 8012ea4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
}
 8012ea8:	bf00      	nop
 8012eaa:	3714      	adds	r7, #20
 8012eac:	46bd      	mov	sp, r7
 8012eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb2:	4770      	bx	lr

08012eb4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b088      	sub	sp, #32
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012ebc:	f107 030c 	add.w	r3, r7, #12
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	601a      	str	r2, [r3, #0]
 8012ec4:	605a      	str	r2, [r3, #4]
 8012ec6:	609a      	str	r2, [r3, #8]
 8012ec8:	60da      	str	r2, [r3, #12]
 8012eca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	4a13      	ldr	r2, [pc, #76]	; (8012f20 <HAL_PCD_MspInit+0x6c>)
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d120      	bne.n	8012f18 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012ed6:	2001      	movs	r0, #1
 8012ed8:	f7ff ffba 	bl	8012e50 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012edc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012ee0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ee2:	2302      	movs	r3, #2
 8012ee4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012eea:	2303      	movs	r3, #3
 8012eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8012eee:	230a      	movs	r3, #10
 8012ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ef2:	f107 030c 	add.w	r3, r7, #12
 8012ef6:	4619      	mov	r1, r3
 8012ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012efc:	f7f1 fe1c 	bl	8004b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012f00:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8012f04:	f7ff ffbd 	bl	8012e82 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8012f08:	2200      	movs	r2, #0
 8012f0a:	2105      	movs	r1, #5
 8012f0c:	2014      	movs	r0, #20
 8012f0e:	f7f1 fb48 	bl	80045a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012f12:	2014      	movs	r0, #20
 8012f14:	f7f1 fb5f 	bl	80045d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012f18:	bf00      	nop
 8012f1a:	3720      	adds	r7, #32
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}
 8012f20:	40006800 	.word	0x40006800

08012f24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8012f38:	4619      	mov	r1, r3
 8012f3a:	4610      	mov	r0, r2
 8012f3c:	f7f7 fe94 	bl	800ac68 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012f40:	bf00      	nop
 8012f42:	3708      	adds	r7, #8
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	460b      	mov	r3, r1
 8012f52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8012f5a:	78fb      	ldrb	r3, [r7, #3]
 8012f5c:	687a      	ldr	r2, [r7, #4]
 8012f5e:	015b      	lsls	r3, r3, #5
 8012f60:	4413      	add	r3, r2
 8012f62:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8012f66:	681a      	ldr	r2, [r3, #0]
 8012f68:	78fb      	ldrb	r3, [r7, #3]
 8012f6a:	4619      	mov	r1, r3
 8012f6c:	f7f7 fecf 	bl	800ad0e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8012f70:	bf00      	nop
 8012f72:	3708      	adds	r7, #8
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	460b      	mov	r3, r1
 8012f82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8012f8a:	78fb      	ldrb	r3, [r7, #3]
 8012f8c:	687a      	ldr	r2, [r7, #4]
 8012f8e:	015b      	lsls	r3, r3, #5
 8012f90:	4413      	add	r3, r2
 8012f92:	333c      	adds	r3, #60	; 0x3c
 8012f94:	681a      	ldr	r2, [r3, #0]
 8012f96:	78fb      	ldrb	r3, [r7, #3]
 8012f98:	4619      	mov	r1, r3
 8012f9a:	f7f7 ff1b 	bl	800add4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8012f9e:	bf00      	nop
 8012fa0:	3708      	adds	r7, #8
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}

08012fa6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fa6:	b580      	push	{r7, lr}
 8012fa8:	b082      	sub	sp, #8
 8012faa:	af00      	add	r7, sp, #0
 8012fac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7f8 f82f 	bl	800b018 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8012fba:	bf00      	nop
 8012fbc:	3708      	adds	r7, #8
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}

08012fc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fc2:	b580      	push	{r7, lr}
 8012fc4:	b084      	sub	sp, #16
 8012fc6:	af00      	add	r7, sp, #0
 8012fc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012fca:	2301      	movs	r3, #1
 8012fcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	689b      	ldr	r3, [r3, #8]
 8012fd2:	2b02      	cmp	r3, #2
 8012fd4:	d001      	beq.n	8012fda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012fd6:	f7ef f8fd 	bl	80021d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012fe0:	7bfa      	ldrb	r2, [r7, #15]
 8012fe2:	4611      	mov	r1, r2
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7f7 ffd9 	bl	800af9c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f7f7 ff85 	bl	800af00 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8012ff6:	bf00      	nop
 8012ff8:	3710      	adds	r7, #16
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
	...

08013000 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b082      	sub	sp, #8
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801300e:	4618      	mov	r0, r3
 8013010:	f7f7 ffd4 	bl	800afbc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	699b      	ldr	r3, [r3, #24]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d005      	beq.n	8013028 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801301c:	4b04      	ldr	r3, [pc, #16]	; (8013030 <HAL_PCD_SuspendCallback+0x30>)
 801301e:	691b      	ldr	r3, [r3, #16]
 8013020:	4a03      	ldr	r2, [pc, #12]	; (8013030 <HAL_PCD_SuspendCallback+0x30>)
 8013022:	f043 0306 	orr.w	r3, r3, #6
 8013026:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8013028:	bf00      	nop
 801302a:	3708      	adds	r7, #8
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}
 8013030:	e000ed00 	.word	0xe000ed00

08013034 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b082      	sub	sp, #8
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	699b      	ldr	r3, [r3, #24]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d007      	beq.n	8013054 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013044:	4b08      	ldr	r3, [pc, #32]	; (8013068 <HAL_PCD_ResumeCallback+0x34>)
 8013046:	691b      	ldr	r3, [r3, #16]
 8013048:	4a07      	ldr	r2, [pc, #28]	; (8013068 <HAL_PCD_ResumeCallback+0x34>)
 801304a:	f023 0306 	bic.w	r3, r3, #6
 801304e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013050:	f000 f9be 	bl	80133d0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801305a:	4618      	mov	r0, r3
 801305c:	f7f7 ffc4 	bl	800afe8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8013060:	bf00      	nop
 8013062:	3708      	adds	r7, #8
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}
 8013068:	e000ed00 	.word	0xe000ed00

0801306c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b082      	sub	sp, #8
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013074:	4a2c      	ldr	r2, [pc, #176]	; (8013128 <USBD_LL_Init+0xbc>)
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	4a2a      	ldr	r2, [pc, #168]	; (8013128 <USBD_LL_Init+0xbc>)
 8013080:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8013084:	f7f2 fe68 	bl	8005d58 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8013088:	4b27      	ldr	r3, [pc, #156]	; (8013128 <USBD_LL_Init+0xbc>)
 801308a:	4a28      	ldr	r2, [pc, #160]	; (801312c <USBD_LL_Init+0xc0>)
 801308c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801308e:	4b26      	ldr	r3, [pc, #152]	; (8013128 <USBD_LL_Init+0xbc>)
 8013090:	2208      	movs	r2, #8
 8013092:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8013094:	4b24      	ldr	r3, [pc, #144]	; (8013128 <USBD_LL_Init+0xbc>)
 8013096:	2202      	movs	r2, #2
 8013098:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801309a:	4b23      	ldr	r3, [pc, #140]	; (8013128 <USBD_LL_Init+0xbc>)
 801309c:	2202      	movs	r2, #2
 801309e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80130a0:	4b21      	ldr	r3, [pc, #132]	; (8013128 <USBD_LL_Init+0xbc>)
 80130a2:	2200      	movs	r2, #0
 80130a4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80130a6:	4b20      	ldr	r3, [pc, #128]	; (8013128 <USBD_LL_Init+0xbc>)
 80130a8:	2200      	movs	r2, #0
 80130aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80130ac:	4b1e      	ldr	r3, [pc, #120]	; (8013128 <USBD_LL_Init+0xbc>)
 80130ae:	2200      	movs	r2, #0
 80130b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80130b2:	4b1d      	ldr	r3, [pc, #116]	; (8013128 <USBD_LL_Init+0xbc>)
 80130b4:	2200      	movs	r2, #0
 80130b6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80130b8:	481b      	ldr	r0, [pc, #108]	; (8013128 <USBD_LL_Init+0xbc>)
 80130ba:	f7f1 fee9 	bl	8004e90 <HAL_PCD_Init>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d001      	beq.n	80130c8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80130c4:	f7ef f886 	bl	80021d4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80130ce:	2318      	movs	r3, #24
 80130d0:	2200      	movs	r2, #0
 80130d2:	2100      	movs	r1, #0
 80130d4:	f7f2 fdae 	bl	8005c34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80130de:	2358      	movs	r3, #88	; 0x58
 80130e0:	2200      	movs	r2, #0
 80130e2:	2180      	movs	r1, #128	; 0x80
 80130e4:	f7f2 fda6 	bl	8005c34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80130ee:	23c0      	movs	r3, #192	; 0xc0
 80130f0:	2200      	movs	r2, #0
 80130f2:	2181      	movs	r1, #129	; 0x81
 80130f4:	f7f2 fd9e 	bl	8005c34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80130fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013102:	2200      	movs	r2, #0
 8013104:	2101      	movs	r1, #1
 8013106:	f7f2 fd95 	bl	8005c34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013114:	2200      	movs	r2, #0
 8013116:	2182      	movs	r1, #130	; 0x82
 8013118:	f7f2 fd8c 	bl	8005c34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801311c:	2300      	movs	r3, #0
}
 801311e:	4618      	mov	r0, r3
 8013120:	3708      	adds	r7, #8
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
 8013126:	bf00      	nop
 8013128:	20006500 	.word	0x20006500
 801312c:	40006800 	.word	0x40006800

08013130 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b084      	sub	sp, #16
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013138:	2300      	movs	r3, #0
 801313a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801313c:	2300      	movs	r3, #0
 801313e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013146:	4618      	mov	r0, r3
 8013148:	f7f1 ff5d 	bl	8005006 <HAL_PCD_Start>
 801314c:	4603      	mov	r3, r0
 801314e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013150:	7bfb      	ldrb	r3, [r7, #15]
 8013152:	4618      	mov	r0, r3
 8013154:	f000 f944 	bl	80133e0 <USBD_Get_USB_Status>
 8013158:	4603      	mov	r3, r0
 801315a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801315c:	7bbb      	ldrb	r3, [r7, #14]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3710      	adds	r7, #16
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013166:	b580      	push	{r7, lr}
 8013168:	b084      	sub	sp, #16
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	4608      	mov	r0, r1
 8013170:	4611      	mov	r1, r2
 8013172:	461a      	mov	r2, r3
 8013174:	4603      	mov	r3, r0
 8013176:	70fb      	strb	r3, [r7, #3]
 8013178:	460b      	mov	r3, r1
 801317a:	70bb      	strb	r3, [r7, #2]
 801317c:	4613      	mov	r3, r2
 801317e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013180:	2300      	movs	r3, #0
 8013182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013184:	2300      	movs	r3, #0
 8013186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801318e:	78bb      	ldrb	r3, [r7, #2]
 8013190:	883a      	ldrh	r2, [r7, #0]
 8013192:	78f9      	ldrb	r1, [r7, #3]
 8013194:	f7f2 f8cc 	bl	8005330 <HAL_PCD_EP_Open>
 8013198:	4603      	mov	r3, r0
 801319a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801319c:	7bfb      	ldrb	r3, [r7, #15]
 801319e:	4618      	mov	r0, r3
 80131a0:	f000 f91e 	bl	80133e0 <USBD_Get_USB_Status>
 80131a4:	4603      	mov	r3, r0
 80131a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3710      	adds	r7, #16
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}

080131b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131b2:	b580      	push	{r7, lr}
 80131b4:	b084      	sub	sp, #16
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]
 80131ba:	460b      	mov	r3, r1
 80131bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131be:	2300      	movs	r3, #0
 80131c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131c2:	2300      	movs	r3, #0
 80131c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80131cc:	78fa      	ldrb	r2, [r7, #3]
 80131ce:	4611      	mov	r1, r2
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7f2 f90d 	bl	80053f0 <HAL_PCD_EP_Close>
 80131d6:	4603      	mov	r3, r0
 80131d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131da:	7bfb      	ldrb	r3, [r7, #15]
 80131dc:	4618      	mov	r0, r3
 80131de:	f000 f8ff 	bl	80133e0 <USBD_Get_USB_Status>
 80131e2:	4603      	mov	r3, r0
 80131e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80131e8:	4618      	mov	r0, r3
 80131ea:	3710      	adds	r7, #16
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}

080131f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b084      	sub	sp, #16
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	460b      	mov	r3, r1
 80131fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131fc:	2300      	movs	r3, #0
 80131fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013200:	2300      	movs	r3, #0
 8013202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801320a:	78fa      	ldrb	r2, [r7, #3]
 801320c:	4611      	mov	r1, r2
 801320e:	4618      	mov	r0, r3
 8013210:	f7f2 f9b8 	bl	8005584 <HAL_PCD_EP_SetStall>
 8013214:	4603      	mov	r3, r0
 8013216:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013218:	7bfb      	ldrb	r3, [r7, #15]
 801321a:	4618      	mov	r0, r3
 801321c:	f000 f8e0 	bl	80133e0 <USBD_Get_USB_Status>
 8013220:	4603      	mov	r3, r0
 8013222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013224:	7bbb      	ldrb	r3, [r7, #14]
}
 8013226:	4618      	mov	r0, r3
 8013228:	3710      	adds	r7, #16
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}

0801322e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801322e:	b580      	push	{r7, lr}
 8013230:	b084      	sub	sp, #16
 8013232:	af00      	add	r7, sp, #0
 8013234:	6078      	str	r0, [r7, #4]
 8013236:	460b      	mov	r3, r1
 8013238:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801323a:	2300      	movs	r3, #0
 801323c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801323e:	2300      	movs	r3, #0
 8013240:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013248:	78fa      	ldrb	r2, [r7, #3]
 801324a:	4611      	mov	r1, r2
 801324c:	4618      	mov	r0, r3
 801324e:	f7f2 f9f3 	bl	8005638 <HAL_PCD_EP_ClrStall>
 8013252:	4603      	mov	r3, r0
 8013254:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013256:	7bfb      	ldrb	r3, [r7, #15]
 8013258:	4618      	mov	r0, r3
 801325a:	f000 f8c1 	bl	80133e0 <USBD_Get_USB_Status>
 801325e:	4603      	mov	r3, r0
 8013260:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013262:	7bbb      	ldrb	r3, [r7, #14]
}
 8013264:	4618      	mov	r0, r3
 8013266:	3710      	adds	r7, #16
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}

0801326c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801326c:	b480      	push	{r7}
 801326e:	b085      	sub	sp, #20
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
 8013274:	460b      	mov	r3, r1
 8013276:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801327e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013284:	2b00      	cmp	r3, #0
 8013286:	da08      	bge.n	801329a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013288:	78fb      	ldrb	r3, [r7, #3]
 801328a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801328e:	68fa      	ldr	r2, [r7, #12]
 8013290:	015b      	lsls	r3, r3, #5
 8013292:	4413      	add	r3, r2
 8013294:	332a      	adds	r3, #42	; 0x2a
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	e008      	b.n	80132ac <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801329a:	78fb      	ldrb	r3, [r7, #3]
 801329c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132a0:	68fa      	ldr	r2, [r7, #12]
 80132a2:	015b      	lsls	r3, r3, #5
 80132a4:	4413      	add	r3, r2
 80132a6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80132aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3714      	adds	r7, #20
 80132b0:	46bd      	mov	sp, r7
 80132b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b6:	4770      	bx	lr

080132b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b084      	sub	sp, #16
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
 80132c0:	460b      	mov	r3, r1
 80132c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132c4:	2300      	movs	r3, #0
 80132c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132c8:	2300      	movs	r3, #0
 80132ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80132d2:	78fa      	ldrb	r2, [r7, #3]
 80132d4:	4611      	mov	r1, r2
 80132d6:	4618      	mov	r0, r3
 80132d8:	f7f2 f805 	bl	80052e6 <HAL_PCD_SetAddress>
 80132dc:	4603      	mov	r3, r0
 80132de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132e0:	7bfb      	ldrb	r3, [r7, #15]
 80132e2:	4618      	mov	r0, r3
 80132e4:	f000 f87c 	bl	80133e0 <USBD_Get_USB_Status>
 80132e8:	4603      	mov	r3, r0
 80132ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	3710      	adds	r7, #16
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}

080132f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80132f6:	b580      	push	{r7, lr}
 80132f8:	b086      	sub	sp, #24
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	60f8      	str	r0, [r7, #12]
 80132fe:	607a      	str	r2, [r7, #4]
 8013300:	603b      	str	r3, [r7, #0]
 8013302:	460b      	mov	r3, r1
 8013304:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013306:	2300      	movs	r3, #0
 8013308:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801330a:	2300      	movs	r3, #0
 801330c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013314:	7af9      	ldrb	r1, [r7, #11]
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	f7f2 f8fa 	bl	8005512 <HAL_PCD_EP_Transmit>
 801331e:	4603      	mov	r3, r0
 8013320:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013322:	7dfb      	ldrb	r3, [r7, #23]
 8013324:	4618      	mov	r0, r3
 8013326:	f000 f85b 	bl	80133e0 <USBD_Get_USB_Status>
 801332a:	4603      	mov	r3, r0
 801332c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801332e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013330:	4618      	mov	r0, r3
 8013332:	3718      	adds	r7, #24
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b086      	sub	sp, #24
 801333c:	af00      	add	r7, sp, #0
 801333e:	60f8      	str	r0, [r7, #12]
 8013340:	607a      	str	r2, [r7, #4]
 8013342:	603b      	str	r3, [r7, #0]
 8013344:	460b      	mov	r3, r1
 8013346:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013348:	2300      	movs	r3, #0
 801334a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801334c:	2300      	movs	r3, #0
 801334e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013356:	7af9      	ldrb	r1, [r7, #11]
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	687a      	ldr	r2, [r7, #4]
 801335c:	f7f2 f88a 	bl	8005474 <HAL_PCD_EP_Receive>
 8013360:	4603      	mov	r3, r0
 8013362:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013364:	7dfb      	ldrb	r3, [r7, #23]
 8013366:	4618      	mov	r0, r3
 8013368:	f000 f83a 	bl	80133e0 <USBD_Get_USB_Status>
 801336c:	4603      	mov	r3, r0
 801336e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013370:	7dbb      	ldrb	r3, [r7, #22]
}
 8013372:	4618      	mov	r0, r3
 8013374:	3718      	adds	r7, #24
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}

0801337a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801337a:	b580      	push	{r7, lr}
 801337c:	b082      	sub	sp, #8
 801337e:	af00      	add	r7, sp, #0
 8013380:	6078      	str	r0, [r7, #4]
 8013382:	460b      	mov	r3, r1
 8013384:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801338c:	78fa      	ldrb	r2, [r7, #3]
 801338e:	4611      	mov	r1, r2
 8013390:	4618      	mov	r0, r3
 8013392:	f7f2 f8a9 	bl	80054e8 <HAL_PCD_EP_GetRxCount>
 8013396:	4603      	mov	r3, r0
}
 8013398:	4618      	mov	r0, r3
 801339a:	3708      	adds	r7, #8
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80133a0:	b480      	push	{r7}
 80133a2:	b083      	sub	sp, #12
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80133a8:	4b03      	ldr	r3, [pc, #12]	; (80133b8 <USBD_static_malloc+0x18>)
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	370c      	adds	r7, #12
 80133ae:	46bd      	mov	sp, r7
 80133b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b4:	4770      	bx	lr
 80133b6:	bf00      	nop
 80133b8:	20004ba8 	.word	0x20004ba8

080133bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80133bc:	b480      	push	{r7}
 80133be:	b083      	sub	sp, #12
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]

}
 80133c4:	bf00      	nop
 80133c6:	370c      	adds	r7, #12
 80133c8:	46bd      	mov	sp, r7
 80133ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ce:	4770      	bx	lr

080133d0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80133d0:	b480      	push	{r7}
 80133d2:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 80133d4:	bf00      	nop
 80133d6:	46bd      	mov	sp, r7
 80133d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133dc:	4770      	bx	lr
	...

080133e0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80133e0:	b480      	push	{r7}
 80133e2:	b085      	sub	sp, #20
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	4603      	mov	r3, r0
 80133e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133ea:	2300      	movs	r3, #0
 80133ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80133ee:	79fb      	ldrb	r3, [r7, #7]
 80133f0:	2b03      	cmp	r3, #3
 80133f2:	d817      	bhi.n	8013424 <USBD_Get_USB_Status+0x44>
 80133f4:	a201      	add	r2, pc, #4	; (adr r2, 80133fc <USBD_Get_USB_Status+0x1c>)
 80133f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133fa:	bf00      	nop
 80133fc:	0801340d 	.word	0x0801340d
 8013400:	08013413 	.word	0x08013413
 8013404:	08013419 	.word	0x08013419
 8013408:	0801341f 	.word	0x0801341f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801340c:	2300      	movs	r3, #0
 801340e:	73fb      	strb	r3, [r7, #15]
    break;
 8013410:	e00b      	b.n	801342a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013412:	2303      	movs	r3, #3
 8013414:	73fb      	strb	r3, [r7, #15]
    break;
 8013416:	e008      	b.n	801342a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013418:	2301      	movs	r3, #1
 801341a:	73fb      	strb	r3, [r7, #15]
    break;
 801341c:	e005      	b.n	801342a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801341e:	2303      	movs	r3, #3
 8013420:	73fb      	strb	r3, [r7, #15]
    break;
 8013422:	e002      	b.n	801342a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013424:	2303      	movs	r3, #3
 8013426:	73fb      	strb	r3, [r7, #15]
    break;
 8013428:	bf00      	nop
  }
  return usb_status;
 801342a:	7bfb      	ldrb	r3, [r7, #15]
}
 801342c:	4618      	mov	r0, r3
 801342e:	3714      	adds	r7, #20
 8013430:	46bd      	mov	sp, r7
 8013432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013436:	4770      	bx	lr

08013438 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8013438:	b480      	push	{r7}
 801343a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801343c:	4b05      	ldr	r3, [pc, #20]	; (8013454 <UTIL_LPM_Init+0x1c>)
 801343e:	2200      	movs	r2, #0
 8013440:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013442:	4b05      	ldr	r3, [pc, #20]	; (8013458 <UTIL_LPM_Init+0x20>)
 8013444:	2200      	movs	r2, #0
 8013446:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013448:	bf00      	nop
 801344a:	46bd      	mov	sp, r7
 801344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013450:	4770      	bx	lr
 8013452:	bf00      	nop
 8013454:	20004dc8 	.word	0x20004dc8
 8013458:	20004dcc 	.word	0x20004dcc

0801345c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801345c:	b480      	push	{r7}
 801345e:	b087      	sub	sp, #28
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	460b      	mov	r3, r1
 8013466:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013468:	f3ef 8310 	mrs	r3, PRIMASK
 801346c:	613b      	str	r3, [r7, #16]
  return(result);
 801346e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013472:	b672      	cpsid	i
  
  switch(state)
 8013474:	78fb      	ldrb	r3, [r7, #3]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d009      	beq.n	801348e <UTIL_LPM_SetOffMode+0x32>
 801347a:	2b01      	cmp	r3, #1
 801347c:	d000      	beq.n	8013480 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 801347e:	e00e      	b.n	801349e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8013480:	4b0c      	ldr	r3, [pc, #48]	; (80134b4 <UTIL_LPM_SetOffMode+0x58>)
 8013482:	681a      	ldr	r2, [r3, #0]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	4313      	orrs	r3, r2
 8013488:	4a0a      	ldr	r2, [pc, #40]	; (80134b4 <UTIL_LPM_SetOffMode+0x58>)
 801348a:	6013      	str	r3, [r2, #0]
      break;
 801348c:	e007      	b.n	801349e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	43da      	mvns	r2, r3
 8013492:	4b08      	ldr	r3, [pc, #32]	; (80134b4 <UTIL_LPM_SetOffMode+0x58>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	4013      	ands	r3, r2
 8013498:	4a06      	ldr	r2, [pc, #24]	; (80134b4 <UTIL_LPM_SetOffMode+0x58>)
 801349a:	6013      	str	r3, [r2, #0]
      break;
 801349c:	bf00      	nop
 801349e:	697b      	ldr	r3, [r7, #20]
 80134a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80134a8:	bf00      	nop
 80134aa:	371c      	adds	r7, #28
 80134ac:	46bd      	mov	sp, r7
 80134ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b2:	4770      	bx	lr
 80134b4:	20004dcc 	.word	0x20004dcc

080134b8 <__libc_init_array>:
 80134b8:	b570      	push	{r4, r5, r6, lr}
 80134ba:	4e0d      	ldr	r6, [pc, #52]	; (80134f0 <__libc_init_array+0x38>)
 80134bc:	4c0d      	ldr	r4, [pc, #52]	; (80134f4 <__libc_init_array+0x3c>)
 80134be:	1ba4      	subs	r4, r4, r6
 80134c0:	10a4      	asrs	r4, r4, #2
 80134c2:	2500      	movs	r5, #0
 80134c4:	42a5      	cmp	r5, r4
 80134c6:	d109      	bne.n	80134dc <__libc_init_array+0x24>
 80134c8:	4e0b      	ldr	r6, [pc, #44]	; (80134f8 <__libc_init_array+0x40>)
 80134ca:	4c0c      	ldr	r4, [pc, #48]	; (80134fc <__libc_init_array+0x44>)
 80134cc:	f000 f82c 	bl	8013528 <_init>
 80134d0:	1ba4      	subs	r4, r4, r6
 80134d2:	10a4      	asrs	r4, r4, #2
 80134d4:	2500      	movs	r5, #0
 80134d6:	42a5      	cmp	r5, r4
 80134d8:	d105      	bne.n	80134e6 <__libc_init_array+0x2e>
 80134da:	bd70      	pop	{r4, r5, r6, pc}
 80134dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80134e0:	4798      	blx	r3
 80134e2:	3501      	adds	r5, #1
 80134e4:	e7ee      	b.n	80134c4 <__libc_init_array+0xc>
 80134e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80134ea:	4798      	blx	r3
 80134ec:	3501      	adds	r5, #1
 80134ee:	e7f2      	b.n	80134d6 <__libc_init_array+0x1e>
 80134f0:	08013a48 	.word	0x08013a48
 80134f4:	08013a48 	.word	0x08013a48
 80134f8:	08013a48 	.word	0x08013a48
 80134fc:	08013a4c 	.word	0x08013a4c

08013500 <memcpy>:
 8013500:	b510      	push	{r4, lr}
 8013502:	1e43      	subs	r3, r0, #1
 8013504:	440a      	add	r2, r1
 8013506:	4291      	cmp	r1, r2
 8013508:	d100      	bne.n	801350c <memcpy+0xc>
 801350a:	bd10      	pop	{r4, pc}
 801350c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013510:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013514:	e7f7      	b.n	8013506 <memcpy+0x6>

08013516 <memset>:
 8013516:	4402      	add	r2, r0
 8013518:	4603      	mov	r3, r0
 801351a:	4293      	cmp	r3, r2
 801351c:	d100      	bne.n	8013520 <memset+0xa>
 801351e:	4770      	bx	lr
 8013520:	f803 1b01 	strb.w	r1, [r3], #1
 8013524:	e7f9      	b.n	801351a <memset+0x4>
	...

08013528 <_init>:
 8013528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801352a:	bf00      	nop
 801352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801352e:	bc08      	pop	{r3}
 8013530:	469e      	mov	lr, r3
 8013532:	4770      	bx	lr

08013534 <_fini>:
 8013534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013536:	bf00      	nop
 8013538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801353a:	bc08      	pop	{r3}
 801353c:	469e      	mov	lr, r3
 801353e:	4770      	bx	lr
